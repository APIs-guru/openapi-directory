openapi: 3.0.0
info:
  version: '2015-07-09'
  x-release: v4
  title: Amazon API Gateway
  description: '<fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: apigateway
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/apigateway-2015-07-09.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/apigateway/'
servers:
  - url: 'http://apigateway.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Amazon API Gateway multi-region endpoint
  - url: 'https://apigateway.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Amazon API Gateway multi-region endpoint
  - url: 'http://apigateway.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon API Gateway endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://apigateway.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon API Gateway endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  /apikeys:
    post:
      operationId: CreateApiKey
      description: '<p>Create an <a>ApiKey</a> resource. </p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/create-api-key.html">AWS CLI</a></div>'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '484':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '485':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The name of the <a>ApiKey</a>.
                  type: string
                description:
                  description: The description of the <a>ApiKey</a>.
                  type: string
                enabled:
                  description: Specifies whether the <a>ApiKey</a> can be used by callers.
                  type: boolean
                generateDistinctId:
                  description: Specifies whether (<code>true</code>) or not (<code>false</code>) the key identifier is distinct from the created API key value. This parameter is deprecated and should not be used.
                  type: boolean
                value:
                  description: Specifies a value of the API key.
                  type: string
                stageKeys:
                  description: DEPRECATED FOR USAGE PLANS - Specifies stages associated with the API key.
                  type: array
                  items:
                    $ref: '#/components/schemas/StageKey'
                customerId:
                  description: 'An AWS Marketplace customer identifier , when integrating with the AWS SaaS Marketplace.'
                  type: string
                tags:
                  description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.'
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetApiKeys
      description: Gets information about the current <a>ApiKeys</a> resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeys'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
        - name: name
          in: query
          required: false
          description: The name of queried API keys.
          schema:
            type: string
        - name: customerId
          in: query
          required: false
          description: 'The identifier of a customer in AWS Marketplace or an external system, such as a developer portal.'
          schema:
            type: string
        - name: includeValues
          in: query
          required: false
          description: A boolean flag to specify whether (<code>true</code>) or not (<code>false</code>) the result contains key values.
          schema:
            type: boolean
  '/restapis/{restapi_id}/authorizers':
    post:
      operationId: CreateAuthorizer
      description: '<p>Adds a new <a>Authorizer</a> resource to an existing <a>RestApi</a> resource.</p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/create-authorizer.html">AWS CLI</a></div>'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorizer'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '483':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - type
              properties:
                name:
                  description: '[Required] The name of the authorizer.'
                  type: string
                type:
                  description: 'The authorizer type. Valid values are <code>TOKEN</code> for a Lambda function using a single authorization token submitted in a custom header, <code>REQUEST</code> for a Lambda function using incoming request parameters, and <code>COGNITO_USER_POOLS</code> for using an Amazon Cognito user pool.'
                  type: string
                  enum:
                    - TOKEN
                    - REQUEST
                    - COGNITO_USER_POOLS
                providerARNs:
                  description: 'A list of the Amazon Cognito user pool ARNs for the <code>COGNITO_USER_POOLS</code> authorizer. Each element is of this format: <code>arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}</code>. For a <code>TOKEN</code> or <code>REQUEST</code> authorizer, this is not defined.'
                  type: array
                  items:
                    $ref: '#/components/schemas/ProviderARN'
                authType:
                  description: 'Optional customer-defined field, used in OpenAPI imports and exports without functional impact.'
                  type: string
                authorizerUri:
                  description: 'Specifies the authorizer''s Uniform Resource Identifier (URI). For <code>TOKEN</code> or <code>REQUEST</code> authorizers, this must be a well-formed Lambda function URI, for example, <code>arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations</code>. In general, the URI has this form <code>arn:aws:apigateway:{region}:lambda:path/{service_api}</code>, where <code>{region}</code> is the same as the region hosting the Lambda function, <code>path</code> indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial <code>/</code>. For Lambda functions, this is usually of the form <code>/2015-03-31/functions/[FunctionARN]/invocations</code>.'
                  type: string
                authorizerCredentials:
                  description: 'Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.'
                  type: string
                identitySource:
                  description: 'The identity source for which authorization is requested. <ul><li>For a <code>TOKEN</code> or <code>COGNITO_USER_POOLS</code> authorizer, this is required and specifies the request header mapping expression for the custom header holding the authorization token submitted by the client. For example, if the token header name is <code>Auth</code>, the header mapping expression is <code>method.request.header.Auth</code>.</li><li>For the <code>REQUEST</code> authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an <code>Auth</code> header, a <code>Name</code> query string parameter are defined as identity sources, this value is <code>method.request.header.Auth, method.request.querystring.Name</code>. These parameters will be used to derive the authorization caching key and to perform runtime validation of the <code>REQUEST</code> authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.</li></ul>'
                  type: string
                identityValidationExpression:
                  description: 'A validation expression for the incoming identity token. For <code>TOKEN</code> authorizers, this value is a regular expression. For <code>COGNITO_USER_POOLS</code> authorizers, API Gateway will match the <code>aud</code> field of the incoming token from the client against the specified regular expression. It will invoke the authorizer''s Lambda function when there is a match. Otherwise, it will return a 401 Unauthorized response without calling the Lambda function. The validation expression does not apply to the <code>REQUEST</code> authorizer.'
                  type: string
                authorizerResultTtlInSeconds:
                  description: 'The TTL in seconds of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.'
                  type: integer
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetAuthorizers
      description: '<p>Describe an existing <a>Authorizers</a> resource.</p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/get-authorizers.html">AWS CLI</a></div>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorizers'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
  '/domainnames/{domain_name}/basepathmappings':
    post:
      operationId: CreateBasePathMapping
      description: Creates a new <a>BasePathMapping</a> resource.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasePathMapping'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: domain_name
          in: path
          required: true
          description: '[Required] The domain name of the <a>BasePathMapping</a> resource to create.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - restApiId
              properties:
                basePath:
                  description: The base path name that callers of the API must provide as part of the URL after the domain name. This value must be unique for all of the mappings across a single API. Specify '(none)' if you do not want callers to specify a base path name after the domain name.
                  type: string
                restApiId:
                  description: '[Required] The string identifier of the associated <a>RestApi</a>.'
                  type: string
                stage:
                  description: The name of the API's stage that you want to use for this mapping. Specify '(none)' if you want callers to explicitly specify the stage name after any base path name.
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetBasePathMappings
      description: Represents a collection of <a>BasePathMapping</a> resources.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasePathMappings'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: domain_name
          in: path
          required: true
          description: '[Required] The domain name of a <a>BasePathMapping</a> resource.'
          schema:
            type: string
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
  '/restapis/{restapi_id}/deployments':
    post:
      operationId: CreateDeployment
      description: 'Creates a <a>Deployment</a> resource, which makes a specified <a>RestApi</a> callable over the internet.'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '485':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '486':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                stageName:
                  description: The name of the <a>Stage</a> resource for the <a>Deployment</a> resource to create.
                  type: string
                stageDescription:
                  description: The description of the <a>Stage</a> resource for the <a>Deployment</a> resource to create.
                  type: string
                description:
                  description: The description for the <a>Deployment</a> resource to create.
                  type: string
                cacheClusterEnabled:
                  description: Enables a cache cluster for the <a>Stage</a> resource specified in the input.
                  type: boolean
                cacheClusterSize:
                  description: Returns the size of the <b>CacheCluster</b>.
                  type: string
                  enum:
                    - '0.5'
                    - '1.6'
                    - '6.1'
                    - '13.5'
                    - '28.4'
                    - '58.2'
                    - '118'
                    - '237'
                variables:
                  description: 'A map that defines the stage variables for the <a>Stage</a> resource that is associated with the new deployment. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>.'
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
                canarySettings:
                  description: The input configuration for a canary deployment.
                  type: object
                  properties:
                    percentTraffic:
                      $ref: '#/components/schemas/Double'
                      description: The percentage (0.0-100.0) of traffic routed to the canary deployment.
                    stageVariableOverrides:
                      $ref: '#/components/schemas/MapOfStringToString'
                      description: A stage variable overrides used for the canary release deployment. They can override existing stage variables or add new stage variables for the canary release deployment. These stage variables are represented as a string-to-string map between stage variable names and their values.
                    useStageCache:
                      $ref: '#/components/schemas/Boolean'
                      description: A Boolean flag to indicate whether the canary release deployment uses the stage cache or not.
                tracingEnabled:
                  description: Specifies whether active tracing with X-ray is enabled for the <a>Stage</a>.
                  type: boolean
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDeployments
      description: Gets information about a <a>Deployments</a> collection.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployments'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
  '/restapis/{restapi_id}/documentation/parts':
    post:
      operationId: CreateDocumentationPart
      description: ''
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentationPart'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '482':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '484':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '485':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - location
                - properties
              properties:
                location:
                  description: Specifies the target API entity to which the documentation applies.
                  type: object
                  properties:
                    type:
                      $ref: '#/components/schemas/DocumentationPartType'
                      description: '[Required] The type of API entity to which the documentation content applies. Valid values are <code>API</code>, <code>AUTHORIZER</code>, <code>MODEL</code>, <code>RESOURCE</code>, <code>METHOD</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>, <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. Content inheritance does not apply to any entity of the <code>API</code>, <code>AUTHORIZER</code>, <code>METHOD</code>, <code>MODEL</code>, <code>REQUEST_BODY</code>, or <code>RESOURCE</code> type.'
                    path:
                      $ref: '#/components/schemas/String'
                      description: 'The URL path of the target. It is a valid field for the API entity types of <code>RESOURCE</code>, <code>METHOD</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>, <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. The default value is <code>/</code> for the root resource. When an applicable child entity inherits the content of another entity of the same type with more general specifications of the other <code>location</code> attributes, the child entity''s <code>path</code> attribute must match that of the parent entity as a prefix.'
                    method:
                      $ref: '#/components/schemas/String'
                      description: 'The HTTP verb of a method. It is a valid field for the API entity types of <code>METHOD</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>, <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. The default value is <code>*</code> for any method. When an applicable child entity inherits the content of an entity of the same type with more general specifications of the other <code>location</code> attributes, the child entity''s <code>method</code> attribute must match that of the parent entity exactly.'
                    statusCode:
                      $ref: '#/components/schemas/DocumentationPartLocationStatusCode'
                      description: 'The HTTP status code of a response. It is a valid field for the API entity types of <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. The default value is <code>*</code> for any status code. When an applicable child entity inherits the content of an entity of the same type with more general specifications of the other <code>location</code> attributes, the child entity''s <code>statusCode</code> attribute must match that of the parent entity exactly.'
                    name:
                      $ref: '#/components/schemas/String'
                      description: 'The name of the targeted API entity. It is a valid and required field for the API entity types of <code>AUTHORIZER</code>, <code>MODEL</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code> and <code>RESPONSE_HEADER</code>. It is an invalid field for any other entity type.'
                properties:
                  description: '[Required] The new documentation content map of the targeted API entity. Enclosed key-value pairs are API-specific, but only OpenAPI-compliant key-value pairs can be exported and, hence, published.'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDocumentationParts
      description: ''
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentationParts'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: type
          in: query
          required: false
          description: 'The type of API entities of the to-be-retrieved documentation parts. '
          schema:
            type: string
            enum:
              - API
              - AUTHORIZER
              - MODEL
              - RESOURCE
              - METHOD
              - PATH_PARAMETER
              - QUERY_PARAMETER
              - REQUEST_HEADER
              - REQUEST_BODY
              - RESPONSE
              - RESPONSE_HEADER
              - RESPONSE_BODY
        - name: name
          in: query
          required: false
          description: The name of API entities of the to-be-retrieved documentation parts.
          schema:
            type: string
        - name: path
          in: query
          required: false
          description: The path of API entities of the to-be-retrieved documentation parts.
          schema:
            type: string
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
        - name: locationStatus
          in: query
          required: false
          description: The status of the API documentation parts to retrieve. Valid values are <code>DOCUMENTED</code> for retrieving <a>DocumentationPart</a> resources with content and <code>UNDOCUMENTED</code> for <a>DocumentationPart</a> resources without content.
          schema:
            type: string
            enum:
              - DOCUMENTED
              - UNDOCUMENTED
    put:
      operationId: ImportDocumentationParts
      description: ''
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentationPartIds'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: mode
          in: query
          required: false
          description: A query parameter to indicate whether to overwrite (<code>OVERWRITE</code>) any existing <a>DocumentationParts</a> definition or to merge (<code>MERGE</code>) the new definition into the existing one. The default value is <code>MERGE</code>.
          schema:
            type: string
            enum:
              - merge
              - overwrite
        - name: failonwarnings
          in: query
          required: false
          description: A query parameter to specify whether to rollback the documentation importation (<code>true</code>) or not (<code>false</code>) when a warning is encountered. The default value is <code>false</code>.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - body
              properties:
                body:
                  description: '[Required] Raw byte array representing the to-be-imported documentation parts. To import from an OpenAPI file, this is a JSON object.'
                  type: string
  '/restapis/{restapi_id}/documentation/versions':
    post:
      operationId: CreateDocumentationVersion
      description: ''
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentationVersion'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '482':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '484':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '485':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - documentationVersion
              properties:
                documentationVersion:
                  description: '[Required] The version identifier of the new snapshot.'
                  type: string
                stageName:
                  description: The stage name to be associated with the new documentation snapshot.
                  type: string
                description:
                  description: A description about the new documentation snapshot.
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDocumentationVersions
      description: ''
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentationVersions'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
  /domainnames:
    post:
      operationId: CreateDomainName
      description: Creates a new domain name.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainName'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - domainName
              properties:
                domainName:
                  description: '[Required] The name of the <a>DomainName</a> resource.'
                  type: string
                certificateName:
                  description: The user-friendly name of the certificate that will be used by edge-optimized endpoint for this domain name.
                  type: string
                certificateBody:
                  description: '[Deprecated] The body of the server certificate that will be used by edge-optimized endpoint for this domain name provided by your certificate authority.'
                  type: string
                certificatePrivateKey:
                  description: '[Deprecated] Your edge-optimized endpoint''s domain name certificate''s private key.'
                  type: string
                certificateChain:
                  description: '[Deprecated] The intermediate certificates and optionally the root certificate, one after the other without any blank lines, used by an edge-optimized endpoint for this domain name. If you include the root certificate, your certificate chain must start with intermediate certificates and end with the root certificate. Use the intermediate certificates that were provided by your certificate authority. Do not include any intermediaries that are not in the chain of trust path.'
                  type: string
                certificateArn:
                  description: The reference to an AWS-managed certificate that will be used by edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.
                  type: string
                regionalCertificateName:
                  description: The user-friendly name of the certificate that will be used by regional endpoint for this domain name.
                  type: string
                regionalCertificateArn:
                  description: The reference to an AWS-managed certificate that will be used by regional endpoint for this domain name. AWS Certificate Manager is the only supported source.
                  type: string
                endpointConfiguration:
                  description: 'The endpoint configuration to indicate the types of endpoints an API (<a>RestApi</a>) or its custom domain name (<a>DomainName</a>) has. '
                  type: object
                  properties:
                    types:
                      $ref: '#/components/schemas/ListOfEndpointType'
                      description: 'A list of endpoint types of an API (<a>RestApi</a>) or its custom domain name (<a>DomainName</a>). For an edge-optimized API and its custom domain name, the endpoint type is <code>"EDGE"</code>. For a regional API and its custom domain name, the endpoint type is <code>REGIONAL</code>. For a private API, the endpoint type is <code>PRIVATE</code>.'
                    vpcEndpointIds:
                      $ref: '#/components/schemas/ListOfString'
                      description: A list of VpcEndpointIds of an API (<a>RestApi</a>) against which to create Route53 ALIASes. It is only supported for <code>PRIVATE</code> endpoint type.
                tags:
                  description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.'
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
                securityPolicy:
                  description: The Transport Layer Security (TLS) version + cipher suite for this <a>DomainName</a>. The valid values are <code>TLS_1_0</code> and <code>TLS_1_2</code>.
                  type: string
                  enum:
                    - TLS_1_0
                    - TLS_1_2
                mutualTlsAuthentication:
                  description: 'If specified, API Gateway performs two-way authentication between the client and the server. Clients must present a trusted certificate to access your custom domain name.'
                  type: object
                  properties:
                    truststoreUri:
                      $ref: '#/components/schemas/String'
                      description: 'An Amazon S3 resource ARN that specifies the truststore for mutual TLS authentication, for example, <code>s3://bucket-name/key-name</code>. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.'
                    truststoreVersion:
                      $ref: '#/components/schemas/String'
                      description: 'The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket.'
                ownershipVerificationCertificateArn:
                  description: The ARN of the public certificate issued by ACM to validate ownership of your custom domain. Only required when configuring mutual TLS and using an ACM imported or private CA certificate ARN as the regionalCertificateArn.
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDomainNames
      description: Represents a collection of <a>DomainName</a> resources.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainNames'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
  '/restapis/{restapi_id}/models':
    post:
      operationId: CreateModel
      description: Adds a new <a>Model</a> resource to an existing <a>RestApi</a> resource.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '485':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The <a>RestApi</a> identifier under which the <a>Model</a> will be created.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - contentType
              properties:
                name:
                  description: '[Required] The name of the model. Must be alphanumeric.'
                  type: string
                description:
                  description: The description of the model.
                  type: string
                schema:
                  description: 'The schema for the model. For <code>application/json</code> models, this should be <a href="https://tools.ietf.org/html/draft-zyp-json-schema-04" target="_blank">JSON schema draft 4</a> model.'
                  type: string
                contentType:
                  description: '[Required] The content-type for the model.'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetModels
      description: Describes existing <a>Models</a> defined for a <a>RestApi</a> resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
  '/restapis/{restapi_id}/requestvalidators':
    post:
      operationId: CreateRequestValidator
      description: Creates a <a>ReqeustValidator</a> of a given <a>RestApi</a>.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidator'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '483':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The name of the to-be-created <a>RequestValidator</a>.
                  type: string
                validateRequestBody:
                  description: A Boolean flag to indicate whether to validate request body according to the configured model schema for the method (<code>true</code>) or not (<code>false</code>).
                  type: boolean
                validateRequestParameters:
                  description: 'A Boolean flag to indicate whether to validate request parameters, <code>true</code>, or not <code>false</code>.'
                  type: boolean
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetRequestValidators
      description: Gets the <a>RequestValidators</a> collection of a given <a>RestApi</a>.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidators'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
  '/restapis/{restapi_id}/resources/{parent_id}':
    post:
      operationId: CreateResource
      description: Creates a <a>Resource</a> resource.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '484':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '485':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: parent_id
          in: path
          required: true
          description: '[Required] The parent resource''s identifier.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - pathPart
              properties:
                pathPart:
                  description: The last path segment for this resource.
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /restapis:
    post:
      operationId: CreateRestApi
      description: Creates a new <a>RestApi</a> resource.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestApi'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  description: '[Required] The name of the <a>RestApi</a>.'
                  type: string
                description:
                  description: The description of the <a>RestApi</a>.
                  type: string
                version:
                  description: A version identifier for the API.
                  type: string
                cloneFrom:
                  description: The ID of the <a>RestApi</a> that you want to clone from.
                  type: string
                binaryMediaTypes:
                  description: 'The list of binary media types supported by the <a>RestApi</a>. By default, the <a>RestApi</a> supports only UTF-8-encoded text payloads.'
                  type: array
                  items:
                    $ref: '#/components/schemas/String'
                minimumCompressionSize:
                  description: 'A nullable integer that is used to enable compression (with non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable compression (with a null value) on an API. When compression is enabled, compression or decompression is not applied on the payload if the payload size is smaller than this value. Setting it to zero allows compression for any payload size.'
                  type: integer
                apiKeySource:
                  description: 'The source of the API key for metering requests according to a usage plan. Valid values are: <ul><li><code>HEADER</code> to read the API key from the <code>X-API-Key</code> header of a request. </li><li><code>AUTHORIZER</code> to read the API key from the <code>UsageIdentifierKey</code> from a custom authorizer.</li></ul>'
                  type: string
                  enum:
                    - HEADER
                    - AUTHORIZER
                endpointConfiguration:
                  description: 'The endpoint configuration to indicate the types of endpoints an API (<a>RestApi</a>) or its custom domain name (<a>DomainName</a>) has. '
                  type: object
                  properties:
                    types:
                      $ref: '#/components/schemas/ListOfEndpointType'
                      description: 'A list of endpoint types of an API (<a>RestApi</a>) or its custom domain name (<a>DomainName</a>). For an edge-optimized API and its custom domain name, the endpoint type is <code>"EDGE"</code>. For a regional API and its custom domain name, the endpoint type is <code>REGIONAL</code>. For a private API, the endpoint type is <code>PRIVATE</code>.'
                    vpcEndpointIds:
                      $ref: '#/components/schemas/ListOfString'
                      description: A list of VpcEndpointIds of an API (<a>RestApi</a>) against which to create Route53 ALIASes. It is only supported for <code>PRIVATE</code> endpoint type.
                policy:
                  description: A stringified JSON policy document that applies to this RestApi regardless of the caller and <a>Method</a> configuration.
                  type: string
                tags:
                  description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.'
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
                disableExecuteApiEndpoint:
                  description: 'Specifies whether clients can invoke your API by using the default <code>execute-api</code> endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.'
                  type: boolean
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetRestApis
      description: Lists the <a>RestApis</a> resources for your collection.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestApis'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
  '/restapis/{restapi_id}/stages':
    post:
      operationId: CreateStage
      description: 'Creates a new <a>Stage</a> resource that references a pre-existing <a>Deployment</a> for the API. '
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stage'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '485':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - stageName
                - deploymentId
              properties:
                stageName:
                  description: '[Required] The name for the <a>Stage</a> resource. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.'
                  type: string
                deploymentId:
                  description: '[Required] The identifier of the <a>Deployment</a> resource for the <a>Stage</a> resource.'
                  type: string
                description:
                  description: The description of the <a>Stage</a> resource.
                  type: string
                cacheClusterEnabled:
                  description: Whether cache clustering is enabled for the stage.
                  type: boolean
                cacheClusterSize:
                  description: Returns the size of the <b>CacheCluster</b>.
                  type: string
                  enum:
                    - '0.5'
                    - '1.6'
                    - '6.1'
                    - '13.5'
                    - '28.4'
                    - '58.2'
                    - '118'
                    - '237'
                variables:
                  description: 'A map that defines the stage variables for the new <a>Stage</a> resource. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>.'
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
                documentationVersion:
                  description: The version of the associated API documentation.
                  type: string
                canarySettings:
                  description: Configuration settings of a canary deployment.
                  type: object
                  properties:
                    percentTraffic:
                      $ref: '#/components/schemas/Double'
                      description: The percent (0-100) of traffic diverted to a canary deployment.
                    deploymentId:
                      $ref: '#/components/schemas/String'
                      description: The ID of the canary deployment.
                    stageVariableOverrides:
                      $ref: '#/components/schemas/MapOfStringToString'
                      description: 'Stage variables overridden for a canary release deployment, including new stage variables introduced in the canary. These stage variables are represented as a string-to-string map between stage variable names and their values.'
                    useStageCache:
                      $ref: '#/components/schemas/Boolean'
                      description: A Boolean flag to indicate whether the canary deployment uses the stage cache or not.
                tracingEnabled:
                  description: Specifies whether active tracing with X-ray is enabled for the <a>Stage</a>.
                  type: boolean
                tags:
                  description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.'
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetStages
      description: Gets information about one or more <a>Stage</a> resources.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stages'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: deploymentId
          in: query
          required: false
          description: The stages' deployment identifiers.
          schema:
            type: string
  /usageplans:
    post:
      operationId: CreateUsagePlan
      description: 'Creates a usage plan with the throttle and quota limits, as well as the associated API stages, specified in the payload. '
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsagePlan'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  description: '[Required] The name of the usage plan.'
                  type: string
                description:
                  description: The description of the usage plan.
                  type: string
                apiStages:
                  description: The associated API stages of the usage plan.
                  type: array
                  items:
                    $ref: '#/components/schemas/ApiStage'
                throttle:
                  description: ' The API request rate limits.'
                  type: object
                  properties:
                    burstLimit:
                      $ref: '#/components/schemas/Integer'
                      description: 'The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.'
                    rateLimit:
                      $ref: '#/components/schemas/Double'
                      description: The API request steady-state rate limit.
                quota:
                  description: Quotas configured for a usage plan.
                  type: object
                  properties:
                    limit:
                      $ref: '#/components/schemas/Integer'
                      description: The maximum number of requests that can be made in a given time period.
                    offset:
                      $ref: '#/components/schemas/Integer'
                      description: 'The day that a time period starts. For example, with a time period of <code>WEEK</code>, an offset of <code>0</code> starts on Sunday, and an offset of <code>1</code> starts on Monday.'
                    period:
                      $ref: '#/components/schemas/QuotaPeriodType'
                      description: 'The time period in which the limit applies. Valid values are "DAY", "WEEK" or "MONTH".'
                tags:
                  description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.'
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetUsagePlans
      description: Gets all the usage plans of the caller's account.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsagePlans'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      parameters:
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: keyId
          in: query
          required: false
          description: The identifier of the API key associated with the usage plans.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
  '/usageplans/{usageplanId}/keys':
    post:
      operationId: CreateUsagePlanKey
      description: Creates a usage plan key for adding an existing API key to a usage plan.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsagePlanKey'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '482':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: usageplanId
          in: path
          required: true
          description: '[Required] The Id of the <a>UsagePlan</a> resource representing the usage plan containing the to-be-created <a>UsagePlanKey</a> resource representing a plan customer.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - keyId
                - keyType
              properties:
                keyId:
                  description: '[Required] The identifier of a <a>UsagePlanKey</a> resource for a plan customer.'
                  type: string
                keyType:
                  description: '[Required] The type of a <a>UsagePlanKey</a> resource for a plan customer.'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetUsagePlanKeys
      description: Gets all the usage plan keys representing the API keys added to a specified usage plan.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsagePlanKeys'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: usageplanId
          in: path
          required: true
          description: '[Required] The Id of the <a>UsagePlan</a> resource representing the usage plan containing the to-be-retrieved <a>UsagePlanKey</a> resource representing a plan customer.'
          schema:
            type: string
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
        - name: name
          in: query
          required: false
          description: A query parameter specifying the name of the to-be-returned usage plan keys.
          schema:
            type: string
  /vpclinks:
    post:
      operationId: CreateVpcLink
      description: 'Creates a VPC link, under the caller''s account in a selected region, in an asynchronous operation that typically takes 2-4 minutes to complete and become operational. The caller must have permissions to create and update VPC Endpoint services.'
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VpcLink'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - targetArns
              properties:
                name:
                  description: '[Required] The name used to label and identify the VPC link.'
                  type: string
                description:
                  description: The description of the VPC link.
                  type: string
                targetArns:
                  description: '[Required] The ARN of the network load balancer of the VPC targeted by the VPC link. The network load balancer must be owned by the same AWS account of the API owner.'
                  type: array
                  items:
                    $ref: '#/components/schemas/String'
                tags:
                  description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.'
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetVpcLinks
      description: Gets the <a>VpcLinks</a> collection under the caller's account in a selected region.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VpcLinks'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
  '/apikeys/{api_Key}':
    delete:
      operationId: DeleteApiKey
      description: Deletes the <a>ApiKey</a> resource.
      responses:
        '202':
          description: Success
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: api_Key
          in: path
          required: true
          description: '[Required] The identifier of the <a>ApiKey</a> resource to be deleted.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetApiKey
      description: Gets information about the current <a>ApiKey</a> resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: api_Key
          in: path
          required: true
          description: '[Required] The identifier of the <a>ApiKey</a> resource.'
          schema:
            type: string
        - name: includeValue
          in: query
          required: false
          description: A boolean flag to specify whether (<code>true</code>) or not (<code>false</code>) the result contains the key value.
          schema:
            type: boolean
    patch:
      operationId: UpdateApiKey
      description: Changes information about an <a>ApiKey</a> resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: api_Key
          in: path
          required: true
          description: '[Required] The identifier of the <a>ApiKey</a> resource to be updated.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: '#/components/schemas/PatchOperation'
  '/restapis/{restapi_id}/authorizers/{authorizer_id}':
    delete:
      operationId: DeleteAuthorizer
      description: '<p>Deletes an existing <a>Authorizer</a> resource.</p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/delete-authorizer.html">AWS CLI</a></div>'
      responses:
        '202':
          description: Success
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: authorizer_id
          in: path
          required: true
          description: '[Required] The identifier of the <a>Authorizer</a> resource.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetAuthorizer
      description: '<p>Describe an existing <a>Authorizer</a> resource.</p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/get-authorizer.html">AWS CLI</a></div>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorizer'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: authorizer_id
          in: path
          required: true
          description: '[Required] The identifier of the <a>Authorizer</a> resource.'
          schema:
            type: string
    post:
      operationId: TestInvokeAuthorizer
      description: '<p>Simulate the execution of an <a>Authorizer</a> in your <a>RestApi</a> with headers, parameters, and an incoming request body.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html">Use Lambda Function as Authorizer</a> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-integrate-with-cognito.html">Use Cognito User Pool as Authorizer</a> </div>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestInvokeAuthorizerResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: authorizer_id
          in: path
          required: true
          description: '[Required] Specifies a test invoke authorizer request''s <a>Authorizer</a> ID.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                headers:
                  description: '[Required] A key-value map of headers to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, should be specified.'
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
                multiValueHeaders:
                  description: '[Optional] The headers as a map from string to list of values to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, may be specified.'
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/ListOfString'
                pathWithQueryString:
                  description: '[Optional] The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters.'
                  type: string
                body:
                  description: '[Optional] The simulated request body of an incoming invocation request.'
                  type: string
                stageVariables:
                  description: A key-value map of stage variables to simulate an invocation on a deployed <a>Stage</a>.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
                additionalContext:
                  description: '[Optional] A key-value map of additional context variables.'
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
    patch:
      operationId: UpdateAuthorizer
      description: '<p>Updates an existing <a>Authorizer</a> resource.</p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/update-authorizer.html">AWS CLI</a></div>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorizer'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: authorizer_id
          in: path
          required: true
          description: '[Required] The identifier of the <a>Authorizer</a> resource.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: '#/components/schemas/PatchOperation'
  '/domainnames/{domain_name}/basepathmappings/{base_path}':
    delete:
      operationId: DeleteBasePathMapping
      description: Deletes the <a>BasePathMapping</a> resource.
      responses:
        '202':
          description: Success
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: domain_name
          in: path
          required: true
          description: '[Required] The domain name of the <a>BasePathMapping</a> resource to delete.'
          schema:
            type: string
        - name: base_path
          in: path
          required: true
          description: '<p>[Required] The base path name of the <a>BasePathMapping</a> resource to delete.</p> <p>To specify an empty base path, set this parameter to <code>''(none)''</code>.</p>'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetBasePathMapping
      description: Describe a <a>BasePathMapping</a> resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasePathMapping'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: domain_name
          in: path
          required: true
          description: '[Required] The domain name of the <a>BasePathMapping</a> resource to be described.'
          schema:
            type: string
        - name: base_path
          in: path
          required: true
          description: '[Required] The base path name that callers of the API must provide as part of the URL after the domain name. This value must be unique for all of the mappings across a single API. Specify ''(none)'' if you do not want callers to specify any base path name after the domain name.'
          schema:
            type: string
    patch:
      operationId: UpdateBasePathMapping
      description: Changes information about the <a>BasePathMapping</a> resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasePathMapping'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: domain_name
          in: path
          required: true
          description: '[Required] The domain name of the <a>BasePathMapping</a> resource to change.'
          schema:
            type: string
        - name: base_path
          in: path
          required: true
          description: '<p>[Required] The base path of the <a>BasePathMapping</a> resource to change.</p> <p>To specify an empty base path, set this parameter to <code>''(none)''</code>.</p>'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: '#/components/schemas/PatchOperation'
  '/clientcertificates/{clientcertificate_id}':
    delete:
      operationId: DeleteClientCertificate
      description: Deletes the <a>ClientCertificate</a> resource.
      responses:
        '202':
          description: Success
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      parameters:
        - name: clientcertificate_id
          in: path
          required: true
          description: '[Required] The identifier of the <a>ClientCertificate</a> resource to be deleted.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetClientCertificate
      description: Gets information about the current <a>ClientCertificate</a> resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientCertificate'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: clientcertificate_id
          in: path
          required: true
          description: '[Required] The identifier of the <a>ClientCertificate</a> resource to be described.'
          schema:
            type: string
    patch:
      operationId: UpdateClientCertificate
      description: Changes information about an <a>ClientCertificate</a> resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientCertificate'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      parameters:
        - name: clientcertificate_id
          in: path
          required: true
          description: '[Required] The identifier of the <a>ClientCertificate</a> resource to be updated.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: '#/components/schemas/PatchOperation'
  '/restapis/{restapi_id}/deployments/{deployment_id}':
    delete:
      operationId: DeleteDeployment
      description: Deletes a <a>Deployment</a> resource. Deleting a deployment will only succeed if there are no <a>Stage</a> resources associated with it.
      responses:
        '202':
          description: Success
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: deployment_id
          in: path
          required: true
          description: '[Required] The identifier of the <a>Deployment</a> resource to delete.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDeployment
      description: Gets information about a <a>Deployment</a> resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: deployment_id
          in: path
          required: true
          description: '[Required] The identifier of the <a>Deployment</a> resource to get information about.'
          schema:
            type: string
        - name: embed
          in: query
          required: false
          description: 'A query parameter to retrieve the specified embedded resources of the returned <a>Deployment</a> resource in the response. In a REST API call, this <code>embed</code> parameter value is a list of comma-separated strings, as in <code>GET /restapis/{restapi_id}/deployments/{deployment_id}?embed=var1,var2</code>. The SDK and other platform-dependent libraries might use a different format for the list. Currently, this request supports only retrieval of the embedded API summary this way. Hence, the parameter value must be a single-valued list containing only the <code>"apisummary"</code> string. For example, <code>GET /restapis/{restapi_id}/deployments/{deployment_id}?embed=apisummary</code>.'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/String'
    patch:
      operationId: UpdateDeployment
      description: Changes information about a <a>Deployment</a> resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: deployment_id
          in: path
          required: true
          description: The replacement identifier for the <a>Deployment</a> resource to change information about.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: '#/components/schemas/PatchOperation'
  '/restapis/{restapi_id}/documentation/parts/{part_id}':
    delete:
      operationId: DeleteDocumentationPart
      description: ''
      responses:
        '202':
          description: Success
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: part_id
          in: path
          required: true
          description: '[Required] The identifier of the to-be-deleted documentation part.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDocumentationPart
      description: ''
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentationPart'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: part_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
    patch:
      operationId: UpdateDocumentationPart
      description: ''
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentationPart'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '485':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: part_id
          in: path
          required: true
          description: '[Required] The identifier of the to-be-updated documentation part.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: '#/components/schemas/PatchOperation'
  '/restapis/{restapi_id}/documentation/versions/{doc_version}':
    delete:
      operationId: DeleteDocumentationVersion
      description: ''
      responses:
        '202':
          description: Success
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: doc_version
          in: path
          required: true
          description: '[Required] The version identifier of a to-be-deleted documentation snapshot.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDocumentationVersion
      description: ''
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentationVersion'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: doc_version
          in: path
          required: true
          description: '[Required] The version identifier of the to-be-retrieved documentation snapshot.'
          schema:
            type: string
    patch:
      operationId: UpdateDocumentationVersion
      description: ''
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentationVersion'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>..'
          schema:
            type: string
        - name: doc_version
          in: path
          required: true
          description: '[Required] The version identifier of the to-be-updated documentation version.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: '#/components/schemas/PatchOperation'
  '/domainnames/{domain_name}':
    delete:
      operationId: DeleteDomainName
      description: Deletes the <a>DomainName</a> resource.
      responses:
        '202':
          description: Success
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: domain_name
          in: path
          required: true
          description: '[Required] The name of the <a>DomainName</a> resource to be deleted.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDomainName
      description: 'Represents a domain name that is contained in a simpler, more intuitive URL that can be called.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainName'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: domain_name
          in: path
          required: true
          description: '[Required] The name of the <a>DomainName</a> resource.'
          schema:
            type: string
    patch:
      operationId: UpdateDomainName
      description: Changes information about the <a>DomainName</a> resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainName'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: domain_name
          in: path
          required: true
          description: '[Required] The name of the <a>DomainName</a> resource to be changed.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: '#/components/schemas/PatchOperation'
  '/restapis/{restapi_id}/gatewayresponses/{response_type}':
    delete:
      operationId: DeleteGatewayResponse
      description: Clears any customization of a <a>GatewayResponse</a> of a specified response type on the given <a>RestApi</a> and resets it with the default settings.
      responses:
        '202':
          description: Success
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: response_type
          in: path
          required: true
          description: '<p>[Required] <p>The response type of the associated <a>GatewayResponse</a>. Valid values are <ul><li>ACCESS_DENIED</li><li>API_CONFIGURATION_ERROR</li><li>AUTHORIZER_FAILURE</li><li> AUTHORIZER_CONFIGURATION_ERROR</li><li>BAD_REQUEST_PARAMETERS</li><li>BAD_REQUEST_BODY</li><li>DEFAULT_4XX</li><li>DEFAULT_5XX</li><li>EXPIRED_TOKEN</li><li>INVALID_SIGNATURE</li><li>INTEGRATION_FAILURE</li><li>INTEGRATION_TIMEOUT</li><li>INVALID_API_KEY</li><li>MISSING_AUTHENTICATION_TOKEN</li><li> QUOTA_EXCEEDED</li><li>REQUEST_TOO_LARGE</li><li>RESOURCE_NOT_FOUND</li><li>THROTTLED</li><li>UNAUTHORIZED</li><li>UNSUPPORTED_MEDIA_TYPE</li></ul> </p></p>'
          schema:
            type: string
            enum:
              - DEFAULT_4XX
              - DEFAULT_5XX
              - RESOURCE_NOT_FOUND
              - UNAUTHORIZED
              - INVALID_API_KEY
              - ACCESS_DENIED
              - AUTHORIZER_FAILURE
              - AUTHORIZER_CONFIGURATION_ERROR
              - INVALID_SIGNATURE
              - EXPIRED_TOKEN
              - MISSING_AUTHENTICATION_TOKEN
              - INTEGRATION_FAILURE
              - INTEGRATION_TIMEOUT
              - API_CONFIGURATION_ERROR
              - UNSUPPORTED_MEDIA_TYPE
              - BAD_REQUEST_PARAMETERS
              - BAD_REQUEST_BODY
              - REQUEST_TOO_LARGE
              - THROTTLED
              - QUOTA_EXCEEDED
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetGatewayResponse
      description: Gets a <a>GatewayResponse</a> of a specified response type on the given <a>RestApi</a>.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayResponse'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: response_type
          in: path
          required: true
          description: '<p>[Required] <p>The response type of the associated <a>GatewayResponse</a>. Valid values are <ul><li>ACCESS_DENIED</li><li>API_CONFIGURATION_ERROR</li><li>AUTHORIZER_FAILURE</li><li> AUTHORIZER_CONFIGURATION_ERROR</li><li>BAD_REQUEST_PARAMETERS</li><li>BAD_REQUEST_BODY</li><li>DEFAULT_4XX</li><li>DEFAULT_5XX</li><li>EXPIRED_TOKEN</li><li>INVALID_SIGNATURE</li><li>INTEGRATION_FAILURE</li><li>INTEGRATION_TIMEOUT</li><li>INVALID_API_KEY</li><li>MISSING_AUTHENTICATION_TOKEN</li><li> QUOTA_EXCEEDED</li><li>REQUEST_TOO_LARGE</li><li>RESOURCE_NOT_FOUND</li><li>THROTTLED</li><li>UNAUTHORIZED</li><li>UNSUPPORTED_MEDIA_TYPE</li></ul> </p></p>'
          schema:
            type: string
            enum:
              - DEFAULT_4XX
              - DEFAULT_5XX
              - RESOURCE_NOT_FOUND
              - UNAUTHORIZED
              - INVALID_API_KEY
              - ACCESS_DENIED
              - AUTHORIZER_FAILURE
              - AUTHORIZER_CONFIGURATION_ERROR
              - INVALID_SIGNATURE
              - EXPIRED_TOKEN
              - MISSING_AUTHENTICATION_TOKEN
              - INTEGRATION_FAILURE
              - INTEGRATION_TIMEOUT
              - API_CONFIGURATION_ERROR
              - UNSUPPORTED_MEDIA_TYPE
              - BAD_REQUEST_PARAMETERS
              - BAD_REQUEST_BODY
              - REQUEST_TOO_LARGE
              - THROTTLED
              - QUOTA_EXCEEDED
    put:
      operationId: PutGatewayResponse
      description: Creates a customization of a <a>GatewayResponse</a> of a specified response type and status code on the given <a>RestApi</a>.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '483':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: response_type
          in: path
          required: true
          description: '<p>[Required] <p>The response type of the associated <a>GatewayResponse</a>. Valid values are <ul><li>ACCESS_DENIED</li><li>API_CONFIGURATION_ERROR</li><li>AUTHORIZER_FAILURE</li><li> AUTHORIZER_CONFIGURATION_ERROR</li><li>BAD_REQUEST_PARAMETERS</li><li>BAD_REQUEST_BODY</li><li>DEFAULT_4XX</li><li>DEFAULT_5XX</li><li>EXPIRED_TOKEN</li><li>INVALID_SIGNATURE</li><li>INTEGRATION_FAILURE</li><li>INTEGRATION_TIMEOUT</li><li>INVALID_API_KEY</li><li>MISSING_AUTHENTICATION_TOKEN</li><li> QUOTA_EXCEEDED</li><li>REQUEST_TOO_LARGE</li><li>RESOURCE_NOT_FOUND</li><li>THROTTLED</li><li>UNAUTHORIZED</li><li>UNSUPPORTED_MEDIA_TYPE</li></ul> </p></p>'
          schema:
            type: string
            enum:
              - DEFAULT_4XX
              - DEFAULT_5XX
              - RESOURCE_NOT_FOUND
              - UNAUTHORIZED
              - INVALID_API_KEY
              - ACCESS_DENIED
              - AUTHORIZER_FAILURE
              - AUTHORIZER_CONFIGURATION_ERROR
              - INVALID_SIGNATURE
              - EXPIRED_TOKEN
              - MISSING_AUTHENTICATION_TOKEN
              - INTEGRATION_FAILURE
              - INTEGRATION_TIMEOUT
              - API_CONFIGURATION_ERROR
              - UNSUPPORTED_MEDIA_TYPE
              - BAD_REQUEST_PARAMETERS
              - BAD_REQUEST_BODY
              - REQUEST_TOO_LARGE
              - THROTTLED
              - QUOTA_EXCEEDED
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                statusCode:
                  description: The status code.
                  type: string
                  pattern: '[1-5]\d\d'
                responseParameters:
                  description: '<p><p>Response parameters (paths, query strings and headers) of the <a>GatewayResponse</a> as a string-to-string map of key-value pairs.</p></p>'
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
                responseTemplates:
                  description: <p><p>Response templates of the <a>GatewayResponse</a> as a string-to-string map of key-value pairs.</p></p>
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
    patch:
      operationId: UpdateGatewayResponse
      description: Updates a <a>GatewayResponse</a> of a specified response type on the given <a>RestApi</a>.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayResponse'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: response_type
          in: path
          required: true
          description: '<p>[Required] <p>The response type of the associated <a>GatewayResponse</a>. Valid values are <ul><li>ACCESS_DENIED</li><li>API_CONFIGURATION_ERROR</li><li>AUTHORIZER_FAILURE</li><li> AUTHORIZER_CONFIGURATION_ERROR</li><li>BAD_REQUEST_PARAMETERS</li><li>BAD_REQUEST_BODY</li><li>DEFAULT_4XX</li><li>DEFAULT_5XX</li><li>EXPIRED_TOKEN</li><li>INVALID_SIGNATURE</li><li>INTEGRATION_FAILURE</li><li>INTEGRATION_TIMEOUT</li><li>INVALID_API_KEY</li><li>MISSING_AUTHENTICATION_TOKEN</li><li> QUOTA_EXCEEDED</li><li>REQUEST_TOO_LARGE</li><li>RESOURCE_NOT_FOUND</li><li>THROTTLED</li><li>UNAUTHORIZED</li><li>UNSUPPORTED_MEDIA_TYPE</li></ul> </p></p>'
          schema:
            type: string
            enum:
              - DEFAULT_4XX
              - DEFAULT_5XX
              - RESOURCE_NOT_FOUND
              - UNAUTHORIZED
              - INVALID_API_KEY
              - ACCESS_DENIED
              - AUTHORIZER_FAILURE
              - AUTHORIZER_CONFIGURATION_ERROR
              - INVALID_SIGNATURE
              - EXPIRED_TOKEN
              - MISSING_AUTHENTICATION_TOKEN
              - INTEGRATION_FAILURE
              - INTEGRATION_TIMEOUT
              - API_CONFIGURATION_ERROR
              - UNSUPPORTED_MEDIA_TYPE
              - BAD_REQUEST_PARAMETERS
              - BAD_REQUEST_BODY
              - REQUEST_TOO_LARGE
              - THROTTLED
              - QUOTA_EXCEEDED
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: '#/components/schemas/PatchOperation'
  '/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration':
    delete:
      operationId: DeleteIntegration
      description: Represents a delete integration.
      responses:
        '204':
          description: Success
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: '[Required] Specifies a delete integration request''s resource identifier.'
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: '[Required] Specifies a delete integration request''s HTTP method.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetIntegration
      description: Get the integration settings.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: '[Required] Specifies a get integration request''s resource identifier'
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: '[Required] Specifies a get integration request''s HTTP method.'
          schema:
            type: string
    put:
      operationId: PutIntegration
      description: Sets up a method's integration.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: '[Required] Specifies a put integration request''s resource ID.'
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: '[Required] Specifies a put integration request''s HTTP method.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
              properties:
                type:
                  description: 'The integration type. The valid value is <code>HTTP</code> for integrating an API method with an HTTP backend; <code>AWS</code> with any AWS service endpoints; <code>MOCK</code> for testing without actually invoking the backend; <code>HTTP_PROXY</code> for integrating with the HTTP proxy integration; <code>AWS_PROXY</code> for integrating with the Lambda proxy integration. '
                  type: string
                  enum:
                    - HTTP
                    - AWS
                    - MOCK
                    - HTTP_PROXY
                    - AWS_PROXY
                httpMethod:
                  description: 'Specifies a put integration HTTP method. When the integration type is HTTP or AWS, this field is required.'
                  type: string
                uri:
                  description: '<p>Specifies Uniform Resource Identifier (URI) of the integration endpoint.</p> <ul> <li><p> For <code>HTTP</code> or <code>HTTP_PROXY</code> integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the <a href="https://en.wikipedia.org/wiki/Uniform_Resource_Identifier" target="_blank">RFC-3986 specification</a>, for either standard integration, where <code>connectionType</code> is not <code>VPC_LINK</code>, or private integration, where <code>connectionType</code> is <code>VPC_LINK</code>. For a private HTTP integration, the URI is not used for routing. </p> </li> <li><p> For <code>AWS</code> or <code>AWS_PROXY</code> integrations, the URI is of the form <code>arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}</code>. Here, <code>{Region}</code> is the API Gateway region (e.g., <code>us-east-1</code>); <code>{service}</code> is the name of the integrated AWS service (e.g., <code>s3</code>); and <code>{subdomain}</code> is a designated subdomain supported by certain AWS service for fast host-name lookup. <code>action</code> can be used for an AWS service action-based API, using an <code>Action={name}&amp;{p1}={v1}&amp;p2={v2}...</code> query string. The ensuing <code>{service_api}</code> refers to a supported action <code>{name}</code> plus any required input parameters. Alternatively, <code>path</code> can be used for an AWS service path-based API. The ensuing <code>service_api</code> refers to the path to an AWS service resource, including the region of the integrated AWS service, if applicable. For example, for integration with the S3 API of <code><a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectGET.html">GetObject</a></code>, the <code>uri</code> can be either <code>arn:aws:apigateway:us-west-2:s3:action/GetObject&amp;Bucket={bucket}&amp;Key={key}</code> or <code>arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</code></p> </li></ul>'
                  type: string
                connectionType:
                  description: The type of the network connection to the integration endpoint. The valid value is <code>INTERNET</code> for connections through the public routable internet or <code>VPC_LINK</code> for private connections between API Gateway and a network load balancer in a VPC. The default value is <code>INTERNET</code>.
                  type: string
                  enum:
                    - INTERNET
                    - VPC_LINK
                connectionId:
                  description: 'The (<a href="https://docs.aws.amazon.com/apigateway/api-reference/resource/vpc-link/#id"><code>id</code></a>) of the <a>VpcLink</a> used for the integration when <code>connectionType=VPC_LINK</code> and undefined, otherwise.'
                  type: string
                credentials:
                  description: Specifies whether credentials are required for a put integration.
                  type: string
                requestParameters:
                  description: 'A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> must be a valid and unique method request parameter name.'
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
                requestTemplates:
                  description: 'Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.'
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
                passthroughBehavior:
                  description: '<p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the <code>requestTemplates</code> property on the Integration resource. There are three valid values: <code>WHEN_NO_MATCH</code>, <code>WHEN_NO_TEMPLATES</code>, and <code>NEVER</code>. </p> <ul> <li><p><code>WHEN_NO_MATCH</code> passes the request body for unmapped content types through to the integration back end without transformation.</p></li> <li><p><code>NEVER</code> rejects unmapped content types with an HTTP 415 ''Unsupported Media Type'' response.</p></li> <li><p><code>WHEN_NO_TEMPLATES</code> allows pass-through when the integration has NO content types mapped to templates. However if there is at least one content type defined, unmapped content types will be rejected with the same 415 response.</p></li> </ul>'
                  type: string
                cacheNamespace:
                  description: 'Specifies a group of related cached parameters. By default, API Gateway uses the resource ID as the <code>cacheNamespace</code>. You can specify the same <code>cacheNamespace</code> across resources to return the same cached data for requests to different resources.'
                  type: string
                cacheKeyParameters:
                  description: 'A list of request parameters whose values API Gateway caches. To be valid values for <code>cacheKeyParameters</code>, these parameters must also be specified for <a>Method</a> <code>requestParameters</code>.'
                  type: array
                  items:
                    $ref: '#/components/schemas/String'
                contentHandling:
                  description: '<p>Specifies how to handle request payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p> <ul> <li><p><code>CONVERT_TO_BINARY</code>: Converts a request payload from a Base64-encoded string to the corresponding binary blob.</p></li> <li><p><code>CONVERT_TO_TEXT</code>: Converts a request payload from a binary blob to a Base64-encoded string.</p></li> </ul> <p>If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the <code>passthroughBehavior</code> is configured to support payload pass-through.</p>'
                  type: string
                  enum:
                    - CONVERT_TO_BINARY
                    - CONVERT_TO_TEXT
                timeoutInMillis:
                  description: 'Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.'
                  type: integer
                tlsConfig:
                  description: ''
                  type: object
                  properties:
                    insecureSkipVerification:
                      $ref: '#/components/schemas/Boolean'
                      description: 'Specifies whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-supported-certificate-authorities-for-http-endpoints.html">supported certificate authority</a>. This isn’t recommended, but it enables you to use certificates that are signed by private certificate authorities, or certificates that are self-signed. If enabled, API Gateway still performs basic certificate validation, which includes checking the certificate''s expiration date, hostname, and presence of a root certificate authority. Supported only for <code>HTTP</code> and <code>HTTP_PROXY</code> integrations.'
    patch:
      operationId: UpdateIntegration
      description: Represents an update integration.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: '[Required] Represents an update integration request''s resource identifier.'
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: '[Required] Represents an update integration request''s HTTP method.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: '#/components/schemas/PatchOperation'
  '/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}':
    delete:
      operationId: DeleteIntegrationResponse
      description: Represents a delete integration response.
      responses:
        '204':
          description: Success
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: '[Required] Specifies a delete integration response request''s resource identifier.'
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: '[Required] Specifies a delete integration response request''s HTTP method.'
          schema:
            type: string
        - name: status_code
          in: path
          required: true
          description: '[Required] Specifies a delete integration response request''s status code.'
          schema:
            type: string
            pattern: '[1-5]\d\d'
            description: The status code.
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetIntegrationResponse
      description: Represents a get integration response.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationResponse'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: '[Required] Specifies a get integration response request''s resource identifier.'
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: '[Required] Specifies a get integration response request''s HTTP method.'
          schema:
            type: string
        - name: status_code
          in: path
          required: true
          description: '[Required] Specifies a get integration response request''s status code.'
          schema:
            type: string
            pattern: '[1-5]\d\d'
            description: The status code.
    put:
      operationId: PutIntegrationResponse
      description: Represents a put integration.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationResponse'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: '[Required] Specifies a put integration response request''s resource identifier.'
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: '[Required] Specifies a put integration response request''s HTTP method.'
          schema:
            type: string
        - name: status_code
          in: path
          required: true
          description: '[Required] Specifies the status code that is used to map the integration response to an existing <a>MethodResponse</a>.'
          schema:
            type: string
            pattern: '[1-5]\d\d'
            description: The status code.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                selectionPattern:
                  description: Specifies the selection pattern of a put integration response.
                  type: string
                responseParameters:
                  description: 'A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> must be a valid and unique response header name and <code>JSON-expression</code> a valid JSON expression without the <code>$</code> prefix.'
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
                responseTemplates:
                  description: Specifies a put integration response's templates.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
                contentHandling:
                  description: '<p>Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p> <ul> <li><p><code>CONVERT_TO_BINARY</code>: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p></li> <li><p><code>CONVERT_TO_TEXT</code>: Converts a response payload from a binary blob to a Base64-encoded string.</p></li> </ul> <p>If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.</p>'
                  type: string
                  enum:
                    - CONVERT_TO_BINARY
                    - CONVERT_TO_TEXT
    patch:
      operationId: UpdateIntegrationResponse
      description: Represents an update integration response.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationResponse'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: '[Required] Specifies an update integration response request''s resource identifier.'
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: '[Required] Specifies an update integration response request''s HTTP method.'
          schema:
            type: string
        - name: status_code
          in: path
          required: true
          description: '[Required] Specifies an update integration response request''s status code.'
          schema:
            type: string
            pattern: '[1-5]\d\d'
            description: The status code.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: '#/components/schemas/PatchOperation'
  '/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}':
    delete:
      operationId: DeleteMethod
      description: Deletes an existing <a>Method</a> resource.
      responses:
        '204':
          description: Success
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: '[Required] The <a>Resource</a> identifier for the <a>Method</a> resource.'
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: '[Required] The HTTP verb of the <a>Method</a> resource.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetMethod
      description: Describe an existing <a>Method</a> resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Method'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: '[Required] The <a>Resource</a> identifier for the <a>Method</a> resource.'
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: '[Required] Specifies the method request''s HTTP method type.'
          schema:
            type: string
    put:
      operationId: PutMethod
      description: Add a method to an existing <a>Resource</a> resource.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Method'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '485':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: '[Required] The <a>Resource</a> identifier for the new <a>Method</a> resource.'
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: '[Required] Specifies the method request''s HTTP method type.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - authorizationType
              properties:
                authorizationType:
                  description: '[Required] The method''s authorization type. Valid values are <code>NONE</code> for open access, <code>AWS_IAM</code> for using AWS IAM permissions, <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code> for using a Cognito user pool.'
                  type: string
                authorizerId:
                  description: 'Specifies the identifier of an <a>Authorizer</a> to use on this Method, if the type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is generated by API Gateway when you created the authorizer.'
                  type: string
                apiKeyRequired:
                  description: Specifies whether the method required a valid <a>ApiKey</a>.
                  type: boolean
                operationName:
                  description: 'A human-friendly operation identifier for the method. For example, you can assign the <code>operationName</code> of <code>ListPets</code> for the <code>GET /pets</code> method in the <code>PetStore</code> example.'
                  type: string
                requestParameters:
                  description: 'A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key defines a method request parameter name matching the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (<code>true</code>) or optional (<code>false</code>). The method request parameter names defined here are available in <a>Integration</a> to be mapped to integration request parameters or body-mapping templates.'
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/NullableBoolean'
                requestModels:
                  description: 'Specifies the <a>Model</a> resources used for the request''s content type. Request models are represented as a key/value map, with a content type as the key and a <a>Model</a> name as the value.'
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
                requestValidatorId:
                  description: The identifier of a <a>RequestValidator</a> for validating the method request.
                  type: string
                authorizationScopes:
                  description: 'A list of authorization scopes configured on the method. The scopes are used with a <code>COGNITO_USER_POOLS</code> authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.'
                  type: array
                  items:
                    $ref: '#/components/schemas/String'
    post:
      operationId: TestInvokeMethod
      description: 'Simulate the execution of a <a>Method</a> in your <a>RestApi</a> with headers, parameters, and an incoming request body.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestInvokeMethodResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: '[Required] Specifies a test invoke method request''s resource ID.'
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: '[Required] Specifies a test invoke method request''s HTTP method.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pathWithQueryString:
                  description: 'The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters.'
                  type: string
                body:
                  description: The simulated request body of an incoming invocation request.
                  type: string
                headers:
                  description: A key-value map of headers to simulate an incoming invocation request.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
                multiValueHeaders:
                  description: The headers as a map from string to list of values to simulate an incoming invocation request.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/ListOfString'
                clientCertificateId:
                  description: A <a>ClientCertificate</a> identifier to use in the test invocation. API Gateway will use the certificate when making the HTTPS request to the defined back-end endpoint.
                  type: string
                stageVariables:
                  description: A key-value map of stage variables to simulate an invocation on a deployed <a>Stage</a>.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
    patch:
      operationId: UpdateMethod
      description: Updates an existing <a>Method</a> resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Method'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: '[Required] The <a>Resource</a> identifier for the <a>Method</a> resource.'
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: '[Required] The HTTP verb of the <a>Method</a> resource.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: '#/components/schemas/PatchOperation'
  '/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}':
    delete:
      operationId: DeleteMethodResponse
      description: Deletes an existing <a>MethodResponse</a> resource.
      responses:
        '204':
          description: Success
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: '[Required] The <a>Resource</a> identifier for the <a>MethodResponse</a> resource.'
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: '[Required] The HTTP verb of the <a>Method</a> resource.'
          schema:
            type: string
        - name: status_code
          in: path
          required: true
          description: '[Required] The status code identifier for the <a>MethodResponse</a> resource.'
          schema:
            type: string
            pattern: '[1-5]\d\d'
            description: The status code.
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetMethodResponse
      description: Describes a <a>MethodResponse</a> resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MethodResponse'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: '[Required] The <a>Resource</a> identifier for the <a>MethodResponse</a> resource.'
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: '[Required] The HTTP verb of the <a>Method</a> resource.'
          schema:
            type: string
        - name: status_code
          in: path
          required: true
          description: '[Required] The status code for the <a>MethodResponse</a> resource.'
          schema:
            type: string
            pattern: '[1-5]\d\d'
            description: The status code.
    put:
      operationId: PutMethodResponse
      description: Adds a <a>MethodResponse</a> to an existing <a>Method</a> resource.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MethodResponse'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '484':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '485':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: '[Required] The <a>Resource</a> identifier for the <a>Method</a> resource.'
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: '[Required] The HTTP verb of the <a>Method</a> resource.'
          schema:
            type: string
        - name: status_code
          in: path
          required: true
          description: '[Required] The method response''s status code.'
          schema:
            type: string
            pattern: '[1-5]\d\d'
            description: The status code.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                responseParameters:
                  description: 'A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header name and the associated value is a Boolean flag indicating whether the method response parameter is required or not. The method response header names must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The response parameter names defined here are available in the integration response to be mapped from an integration response header expressed in <code>integration.response.header.{name}</code>, a static value enclosed within a pair of single quotes (e.g., <code>''application/json''</code>), or a JSON expression from the back-end response payload in the form of <code>integration.response.body.{JSON-expression}</code>, where <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.)'
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/NullableBoolean'
                responseModels:
                  description: 'Specifies the <a>Model</a> resources used for the response''s content type. Response models are represented as a key/value map, with a content type as the key and a <a>Model</a> name as the value.'
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
    patch:
      operationId: UpdateMethodResponse
      description: Updates an existing <a>MethodResponse</a> resource.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MethodResponse'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '484':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '485':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: '[Required] The <a>Resource</a> identifier for the <a>MethodResponse</a> resource.'
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: '[Required] The HTTP verb of the <a>Method</a> resource.'
          schema:
            type: string
        - name: status_code
          in: path
          required: true
          description: '[Required] The status code for the <a>MethodResponse</a> resource.'
          schema:
            type: string
            pattern: '[1-5]\d\d'
            description: The status code.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: '#/components/schemas/PatchOperation'
  '/restapis/{restapi_id}/models/{model_name}':
    delete:
      operationId: DeleteModel
      description: Deletes a model.
      responses:
        '202':
          description: Success
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: model_name
          in: path
          required: true
          description: '[Required] The name of the model to delete.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetModel
      description: Describes an existing model defined for a <a>RestApi</a> resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The <a>RestApi</a> identifier under which the <a>Model</a> exists.'
          schema:
            type: string
        - name: model_name
          in: path
          required: true
          description: '[Required] The name of the model as an identifier.'
          schema:
            type: string
        - name: flatten
          in: query
          required: false
          description: A query parameter of a Boolean value to resolve (<code>true</code>) all external model references and returns a flattened model schema or not (<code>false</code>) The default is <code>false</code>.
          schema:
            type: boolean
    patch:
      operationId: UpdateModel
      description: Changes information about a model.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: model_name
          in: path
          required: true
          description: '[Required] The name of the model to update.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: '#/components/schemas/PatchOperation'
  '/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}':
    delete:
      operationId: DeleteRequestValidator
      description: Deletes a <a>RequestValidator</a> of a given <a>RestApi</a>.
      responses:
        '202':
          description: Success
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: requestvalidator_id
          in: path
          required: true
          description: '[Required] The identifier of the <a>RequestValidator</a> to be deleted.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetRequestValidator
      description: Gets a <a>RequestValidator</a> of a given <a>RestApi</a>.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidator'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: requestvalidator_id
          in: path
          required: true
          description: '[Required] The identifier of the <a>RequestValidator</a> to be retrieved.'
          schema:
            type: string
    patch:
      operationId: UpdateRequestValidator
      description: Updates a <a>RequestValidator</a> of a given <a>RestApi</a>.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidator'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: requestvalidator_id
          in: path
          required: true
          description: '[Required] The identifier of <a>RequestValidator</a> to be updated.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: '#/components/schemas/PatchOperation'
  '/restapis/{restapi_id}/resources/{resource_id}':
    delete:
      operationId: DeleteResource
      description: Deletes a <a>Resource</a> resource.
      responses:
        '202':
          description: Success
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: '[Required] The identifier of the <a>Resource</a> resource.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetResource
      description: Lists information about a resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: '[Required] The identifier for the <a>Resource</a> resource.'
          schema:
            type: string
        - name: embed
          in: query
          required: false
          description: 'A query parameter to retrieve the specified resources embedded in the returned <a>Resource</a> representation in the response. This <code>embed</code> parameter value is a list of comma-separated strings. Currently, the request supports only retrieval of the embedded <a>Method</a> resources this way. The query parameter value must be a single-valued list and contain the <code>"methods"</code> string. For example, <code>GET /restapis/{restapi_id}/resources/{resource_id}?embed=methods</code>.'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/String'
    patch:
      operationId: UpdateResource
      description: Changes information about a <a>Resource</a> resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: '[Required] The identifier of the <a>Resource</a> resource.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: '#/components/schemas/PatchOperation'
  '/restapis/{restapi_id}':
    delete:
      operationId: DeleteRestApi
      description: Deletes the specified API.
      responses:
        '202':
          description: Success
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetRestApi
      description: Lists the <a>RestApi</a> resource in the collection.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestApi'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
    put:
      operationId: PutRestApi
      description: A feature of the API Gateway control service for updating an existing API with an input of external API definitions. The update can take the form of merging the supplied definition into the existing API or overwriting the existing API.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestApi'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '483':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: mode
          in: query
          required: false
          description: 'The <code>mode</code> query parameter to specify the update mode. Valid values are "merge" and "overwrite". By default, the update mode is "merge".'
          schema:
            type: string
            enum:
              - merge
              - overwrite
        - name: failonwarnings
          in: query
          required: false
          description: A query parameter to indicate whether to rollback the API update (<code>true</code>) or not (<code>false</code>) when a warning is encountered. The default value is <code>false</code>.
          schema:
            type: boolean
        - name: parameters
          in: query
          required: false
          description: 'Custom header parameters as part of the request. For example, to exclude <a>DocumentationParts</a> from an imported API, set <code>ignore=documentation</code> as a <code>parameters</code> value, as in the AWS CLI command of <code>aws apigateway import-rest-api --parameters ignore=documentation --body ''file:///path/to/imported-api-body.json''</code>.'
          schema:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - body
              properties:
                body:
                  description: '[Required] The PUT request body containing external API definitions. Currently, only OpenAPI definition JSON/YAML files are supported. The maximum size of the API definition file is 6MB.'
                  type: string
    patch:
      operationId: UpdateRestApi
      description: Changes information about the specified API.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestApi'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: '#/components/schemas/PatchOperation'
  '/restapis/{restapi_id}/stages/{stage_name}':
    delete:
      operationId: DeleteStage
      description: Deletes a <a>Stage</a> resource.
      responses:
        '202':
          description: Success
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: stage_name
          in: path
          required: true
          description: '[Required] The name of the <a>Stage</a> resource to delete.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetStage
      description: Gets information about a <a>Stage</a> resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stage'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: stage_name
          in: path
          required: true
          description: '[Required] The name of the <a>Stage</a> resource to get information about.'
          schema:
            type: string
    patch:
      operationId: UpdateStage
      description: Changes information about a <a>Stage</a> resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stage'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: stage_name
          in: path
          required: true
          description: '[Required] The name of the <a>Stage</a> resource to change information about.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: '#/components/schemas/PatchOperation'
  '/usageplans/{usageplanId}':
    delete:
      operationId: DeleteUsagePlan
      description: Deletes a usage plan of a given plan Id.
      responses:
        '202':
          description: Success
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      parameters:
        - name: usageplanId
          in: path
          required: true
          description: '[Required] The Id of the to-be-deleted usage plan.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetUsagePlan
      description: Gets a usage plan of a given plan identifier.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsagePlan'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: usageplanId
          in: path
          required: true
          description: '[Required] The identifier of the <a>UsagePlan</a> resource to be retrieved.'
          schema:
            type: string
    patch:
      operationId: UpdateUsagePlan
      description: Updates a usage plan of a given plan Id.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsagePlan'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: usageplanId
          in: path
          required: true
          description: '[Required] The Id of the to-be-updated usage plan.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: '#/components/schemas/PatchOperation'
  '/usageplans/{usageplanId}/keys/{keyId}':
    delete:
      operationId: DeleteUsagePlanKey
      description: Deletes a usage plan key and remove the underlying API key from the associated usage plan.
      responses:
        '202':
          description: Success
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '482':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: usageplanId
          in: path
          required: true
          description: '[Required] The Id of the <a>UsagePlan</a> resource representing the usage plan containing the to-be-deleted <a>UsagePlanKey</a> resource representing a plan customer.'
          schema:
            type: string
        - name: keyId
          in: path
          required: true
          description: '[Required] The Id of the <a>UsagePlanKey</a> resource to be deleted.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetUsagePlanKey
      description: Gets a usage plan key of a given key identifier.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsagePlanKey'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: usageplanId
          in: path
          required: true
          description: '[Required] The Id of the <a>UsagePlan</a> resource representing the usage plan containing the to-be-retrieved <a>UsagePlanKey</a> resource representing a plan customer.'
          schema:
            type: string
        - name: keyId
          in: path
          required: true
          description: '[Required] The key Id of the to-be-retrieved <a>UsagePlanKey</a> resource representing a plan customer.'
          schema:
            type: string
  '/vpclinks/{vpclink_id}':
    delete:
      operationId: DeleteVpcLink
      description: Deletes an existing <a>VpcLink</a> of a specified identifier.
      responses:
        '202':
          description: Success
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: vpclink_id
          in: path
          required: true
          description: '[Required] The identifier of the <a>VpcLink</a>. It is used in an <a>Integration</a> to reference this <a>VpcLink</a>.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetVpcLink
      description: Gets a specified VPC link under the caller's account in a region.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VpcLink'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: vpclink_id
          in: path
          required: true
          description: '[Required] The identifier of the <a>VpcLink</a>. It is used in an <a>Integration</a> to reference this <a>VpcLink</a>.'
          schema:
            type: string
    patch:
      operationId: UpdateVpcLink
      description: Updates an existing <a>VpcLink</a> of a specified identifier.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VpcLink'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: vpclink_id
          in: path
          required: true
          description: '[Required] The identifier of the <a>VpcLink</a>. It is used in an <a>Integration</a> to reference this <a>VpcLink</a>.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: '#/components/schemas/PatchOperation'
  '/restapis/{restapi_id}/stages/{stage_name}/cache/authorizers':
    delete:
      operationId: FlushStageAuthorizersCache
      description: Flushes all authorizer cache entries on a stage.
      responses:
        '202':
          description: Success
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated <a>RestApi</a>.
          schema:
            type: string
        - name: stage_name
          in: path
          required: true
          description: The name of the stage to flush.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/restapis/{restapi_id}/stages/{stage_name}/cache/data':
    delete:
      operationId: FlushStageCache
      description: Flushes a stage's cache.
      responses:
        '202':
          description: Success
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: stage_name
          in: path
          required: true
          description: '[Required] The name of the stage to flush its cache.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /clientcertificates:
    post:
      operationId: GenerateClientCertificate
      description: Generates a <a>ClientCertificate</a> resource.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientCertificate'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  description: The description of the <a>ClientCertificate</a>.
                  type: string
                tags:
                  description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.'
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetClientCertificates
      description: Gets a collection of <a>ClientCertificate</a> resources.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientCertificates'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
  /account:
    get:
      operationId: GetAccount
      description: Gets information about the current <a>Account</a> resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters: []
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    patch:
      operationId: UpdateAccount
      description: Changes information about the current <a>Account</a> resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: '#/components/schemas/PatchOperation'
  '/restapis/{restapi_id}/stages/{stage_name}/exports/{export_type}':
    get:
      operationId: GetExport
      description: Exports a deployed version of a <a>RestApi</a> in a specified format.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportResponse'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: stage_name
          in: path
          required: true
          description: '[Required] The name of the <a>Stage</a> that will be exported.'
          schema:
            type: string
        - name: export_type
          in: path
          required: true
          description: '[Required] The type of export. Acceptable values are ''oas30'' for OpenAPI 3.0.x and ''swagger'' for Swagger/OpenAPI 2.0.'
          schema:
            type: string
        - name: parameters
          in: query
          required: false
          description: 'A key-value map of query string parameters that specify properties of the export, depending on the requested <code>exportType</code>. For <code>exportType</code> <code>oas30</code> and <code>swagger</code>, any combination of the following parameters are supported: <code>extensions=''integrations''</code> or <code>extensions=''apigateway''</code> will export the API with x-amazon-apigateway-integration extensions. <code>extensions=''authorizers''</code> will export the API with x-amazon-apigateway-authorizer extensions. <code>postman</code> will export the API with Postman extensions, allowing for import to the Postman tool'
          schema:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/String'
        - name: Accept
          in: header
          required: false
          description: 'The content-type of the export, for example <code>application/json</code>. Currently <code>application/json</code> and <code>application/yaml</code> are supported for <code>exportType</code> of<code>oas30</code> and <code>swagger</code>. This should be specified in the <code>Accept</code> header for direct API requests.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/restapis/{restapi_id}/gatewayresponses':
    get:
      operationId: GetGatewayResponses
      description: 'Gets the <a>GatewayResponses</a> collection on the given <a>RestApi</a>. If an API developer has not added any definitions for gateway responses, the result will be the API Gateway-generated default <a>GatewayResponses</a> collection for the supported response types.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayResponses'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set. The <a>GatewayResponse</a> collection does not support pagination and the position does not apply here.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500. The <a>GatewayResponses</a> collection does not support pagination and the limit does not apply here.
          schema:
            type: integer
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/restapis/{restapi_id}/models/{model_name}/default_template':
    get:
      operationId: GetModelTemplate
      description: Generates a sample mapping template that can be used to transform a payload into the structure of a model.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: model_name
          in: path
          required: true
          description: '[Required] The name of the model for which to generate a template.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/restapis/{restapi_id}/resources':
    get:
      operationId: GetResources
      description: Lists information about a collection of <a>Resource</a> resources.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resources'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
        - name: embed
          in: query
          required: false
          description: 'A query parameter used to retrieve the specified resources embedded in the returned <a>Resources</a> resource in the response. This <code>embed</code> parameter value is a list of comma-separated strings. Currently, the request supports only retrieval of the embedded <a>Method</a> resources this way. The query parameter value must be a single-valued list and contain the <code>"methods"</code> string. For example, <code>GET /restapis/{restapi_id}/resources?embed=methods</code>.'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/String'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/restapis/{restapi_id}/stages/{stage_name}/sdks/{sdk_type}':
    get:
      operationId: GetSdk
      description: Generates a client SDK for a <a>RestApi</a> and <a>Stage</a>.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SdkResponse'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
          schema:
            type: string
        - name: stage_name
          in: path
          required: true
          description: '[Required] The name of the <a>Stage</a> that the SDK will use.'
          schema:
            type: string
        - name: sdk_type
          in: path
          required: true
          description: '[Required] The language for the generated SDK. Currently <code>java</code>, <code>javascript</code>, <code>android</code>, <code>objectivec</code> (for iOS), <code>swift</code> (for iOS), and <code>ruby</code> are supported.'
          schema:
            type: string
        - name: parameters
          in: query
          required: false
          description: 'A string-to-string key-value map of query parameters <code>sdkType</code>-dependent properties of the SDK. For <code>sdkType</code> of <code>objectivec</code> or <code>swift</code>, a parameter named <code>classPrefix</code> is required. For <code>sdkType</code> of <code>android</code>, parameters named <code>groupId</code>, <code>artifactId</code>, <code>artifactVersion</code>, and <code>invokerPackage</code> are required. For <code>sdkType</code> of <code>java</code>, parameters named <code>serviceName</code> and <code>javaPackageName</code> are required. '
          schema:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/String'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/sdktypes/{sdktype_id}':
    get:
      operationId: GetSdkType
      description: ''
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SdkType'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: sdktype_id
          in: path
          required: true
          description: '[Required] The identifier of the queried <a>SdkType</a> instance.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /sdktypes:
    get:
      operationId: GetSdkTypes
      description: ''
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SdkTypes'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/tags/{resource_arn}':
    get:
      operationId: GetTags
      description: Gets the <a>Tags</a> collection for a given resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tags'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '484':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
      parameters:
        - name: resource_arn
          in: path
          required: true
          description: '[Required] The ARN of a resource that can be tagged.'
          schema:
            type: string
        - name: position
          in: query
          required: false
          description: (Not currently supported) The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: (Not currently supported) The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    put:
      operationId: TagResource
      description: Adds or updates a tag on a given resource.
      responses:
        '204':
          description: Success
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '484':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '485':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: resource_arn
          in: path
          required: true
          description: '[Required] The ARN of a resource that can be tagged.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tags
              properties:
                tags:
                  description: '[Required] The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.'
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
  '/usageplans/{usageplanId}/usage#startDate&endDate':
    get:
      operationId: GetUsage
      description: Gets the usage data of a usage plan in a specified time interval.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usage'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: usageplanId
          in: path
          required: true
          description: '[Required] The Id of the usage plan associated with the usage data.'
          schema:
            type: string
        - name: keyId
          in: query
          required: false
          description: The Id of the API key associated with the resultant usage data.
          schema:
            type: string
        - name: startDate
          in: query
          required: true
          description: '[Required] The starting date (e.g., 2016-01-01) of the usage data.'
          schema:
            type: string
        - name: endDate
          in: query
          required: true
          description: '[Required] The ending date (e.g., 2016-12-31) of the usage data.'
          schema:
            type: string
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /apikeys#mode=import&format:
    post:
      operationId: ImportApiKeys
      description: 'Import API keys from an external source, such as a CSV-formatted file.'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyIds'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '484':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '485':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: format
          in: query
          required: true
          description: 'A query parameter to specify the input format to imported API keys. Currently, only the <code>csv</code> format is supported.'
          schema:
            type: string
            enum:
              - csv
        - name: failonwarnings
          in: query
          required: false
          description: A query parameter to indicate whether to rollback <a>ApiKey</a> importation (<code>true</code>) or not (<code>false</code>) when error is encountered.
          schema:
            type: boolean
        - name: mode
          in: query
          required: true
          schema:
            type: string
            enum:
              - import
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - body
              properties:
                body:
                  description: 'The payload of the POST request to import API keys. For the payload format, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-key-file-format.html">API Key File Format</a>.'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /restapis#mode=import:
    post:
      operationId: ImportRestApi
      description: A feature of the API Gateway control service for creating a new API from an external API definition file.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestApi'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: failonwarnings
          in: query
          required: false
          description: A query parameter to indicate whether to rollback the API creation (<code>true</code>) or not (<code>false</code>) when a warning is encountered. The default value is <code>false</code>.
          schema:
            type: boolean
        - name: parameters
          in: query
          required: false
          description: '<p>A key-value map of context-specific query string parameters specifying the behavior of different API importing operations. The following shows operation-specific parameters and their supported values.</p> <p> To exclude <a>DocumentationParts</a> from the import, set <code>parameters</code> as <code>ignore=documentation</code>.</p> <p> To configure the endpoint type, set <code>parameters</code> as <code>endpointConfigurationTypes=EDGE</code>, <code>endpointConfigurationTypes=REGIONAL</code>, or <code>endpointConfigurationTypes=PRIVATE</code>. The default endpoint type is <code>EDGE</code>.</p> <p> To handle imported <code>basepath</code>, set <code>parameters</code> as <code>basepath=ignore</code>, <code>basepath=prepend</code> or <code>basepath=split</code>.</p> <p>For example, the AWS CLI command to exclude documentation from the imported API is:</p> <pre><code>aws apigateway import-rest-api --parameters ignore=documentation --body ''file:///path/to/imported-api-body.json''</code></pre> <p>The AWS CLI command to set the regional endpoint on the imported API is:</p> <pre><code>aws apigateway import-rest-api --parameters endpointConfigurationTypes=REGIONAL --body ''file:///path/to/imported-api-body.json''</code></pre>'
          schema:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/String'
        - name: mode
          in: query
          required: true
          schema:
            type: string
            enum:
              - import
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - body
              properties:
                body:
                  description: '[Required] The POST request body containing external API definitions. Currently, only OpenAPI definition JSON/YAML files are supported. The maximum size of the API definition file is 6MB.'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/tags/{resource_arn}#tagKeys':
    delete:
      operationId: UntagResource
      description: Removes a tag from a given resource.
      responses:
        '204':
          description: Success
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: resource_arn
          in: path
          required: true
          description: '[Required] The ARN of a resource that can be tagged.'
          schema:
            type: string
        - name: tagKeys
          in: query
          required: true
          description: '[Required] The Tag keys to delete.'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/String'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/usageplans/{usageplanId}/keys/{keyId}/usage':
    patch:
      operationId: UpdateUsage
      description: Grants a temporary extension to the remaining quota of a usage plan associated with a specified API key.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usage'
        '480':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      parameters:
        - name: usageplanId
          in: path
          required: true
          description: '[Required] The Id of the usage plan associated with the usage data.'
          schema:
            type: string
        - name: keyId
          in: path
          required: true
          description: '[Required] The identifier of the API key associated with the usage plan in which a temporary extension is granted to the remaining quota.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: '#/components/schemas/PatchOperation'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    ApiKey:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/String'
          description: The identifier of the API Key.
        value:
          $ref: '#/components/schemas/String'
          description: The value of the API Key.
        name:
          $ref: '#/components/schemas/String'
          description: The name of the API Key.
        customerId:
          $ref: '#/components/schemas/String'
          description: 'An AWS Marketplace customer identifier , when integrating with the AWS SaaS Marketplace.'
        description:
          $ref: '#/components/schemas/String'
          description: The description of the API Key.
        enabled:
          $ref: '#/components/schemas/Boolean'
          description: Specifies whether the API Key can be used by callers.
        createdDate:
          $ref: '#/components/schemas/Timestamp'
          description: The timestamp when the API Key was created.
        lastUpdatedDate:
          $ref: '#/components/schemas/Timestamp'
          description: The timestamp when the API Key was last updated.
        stageKeys:
          $ref: '#/components/schemas/ListOfString'
          description: A list of <a>Stage</a> resources that are associated with the <a>ApiKey</a> resource.
        tags:
          $ref: '#/components/schemas/MapOfStringToString'
          description: The collection of tags. Each tag element is associated with a given resource.
      description: '<p>A resource that can be distributed to callers for executing <a>Method</a> resources that require an API key. API keys can be mapped to any <a>Stage</a> on any <a>RestApi</a>, which indicates that the callers with the API key can make requests to that stage.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-api-keys.html">Use API Keys</a> </div>'
    StageKey:
      type: object
      properties:
        restApiId:
          $ref: '#/components/schemas/String'
          description: The string identifier of the associated <a>RestApi</a>.
        stageName:
          $ref: '#/components/schemas/String'
          description: The stage name associated with the stage key.
      description: 'A reference to a unique stage identified in the format <code>{restApiId}/{stage}</code>.'
    String:
      type: string
    UnauthorizedException: {}
    NotFoundException: {}
    TooManyRequestsException: {}
    LimitExceededException: {}
    BadRequestException: {}
    ConflictException: {}
    Authorizer:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/String'
          description: The identifier for the authorizer resource.
        name:
          $ref: '#/components/schemas/String'
          description: '[Required] The name of the authorizer.'
        type:
          $ref: '#/components/schemas/AuthorizerType'
          description: 'The authorizer type. Valid values are <code>TOKEN</code> for a Lambda function using a single authorization token submitted in a custom header, <code>REQUEST</code> for a Lambda function using incoming request parameters, and <code>COGNITO_USER_POOLS</code> for using an Amazon Cognito user pool.'
        providerARNs:
          $ref: '#/components/schemas/ListOfARNs'
          description: 'A list of the Amazon Cognito user pool ARNs for the <code>COGNITO_USER_POOLS</code> authorizer. Each element is of this format: <code>arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}</code>. For a <code>TOKEN</code> or <code>REQUEST</code> authorizer, this is not defined.'
        authType:
          $ref: '#/components/schemas/String'
          description: 'Optional customer-defined field, used in OpenAPI imports and exports without functional impact.'
        authorizerUri:
          $ref: '#/components/schemas/String'
          description: 'Specifies the authorizer''s Uniform Resource Identifier (URI). For <code>TOKEN</code> or <code>REQUEST</code> authorizers, this must be a well-formed Lambda function URI, for example, <code>arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations</code>. In general, the URI has this form <code>arn:aws:apigateway:{region}:lambda:path/{service_api}</code>, where <code>{region}</code> is the same as the region hosting the Lambda function, <code>path</code> indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial <code>/</code>. For Lambda functions, this is usually of the form <code>/2015-03-31/functions/[FunctionARN]/invocations</code>.'
        authorizerCredentials:
          $ref: '#/components/schemas/String'
          description: 'Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.'
        identitySource:
          $ref: '#/components/schemas/String'
          description: 'The identity source for which authorization is requested. <ul><li>For a <code>TOKEN</code> or <code>COGNITO_USER_POOLS</code> authorizer, this is required and specifies the request header mapping expression for the custom header holding the authorization token submitted by the client. For example, if the token header name is <code>Auth</code>, the header mapping expression is <code>method.request.header.Auth</code>.</li><li>For the <code>REQUEST</code> authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an <code>Auth</code> header, a <code>Name</code> query string parameter are defined as identity sources, this value is <code>method.request.header.Auth, method.request.querystring.Name</code>. These parameters will be used to derive the authorization caching key and to perform runtime validation of the <code>REQUEST</code> authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.</li></ul>'
        identityValidationExpression:
          $ref: '#/components/schemas/String'
          description: 'A validation expression for the incoming identity token. For <code>TOKEN</code> authorizers, this value is a regular expression. For <code>COGNITO_USER_POOLS</code> authorizers, API Gateway will match the <code>aud</code> field of the incoming token from the client against the specified regular expression. It will invoke the authorizer''s Lambda function when there is a match. Otherwise, it will return a 401 Unauthorized response without calling the Lambda function. The validation expression does not apply to the <code>REQUEST</code> authorizer.'
        authorizerResultTtlInSeconds:
          $ref: '#/components/schemas/NullableInteger'
          description: 'The TTL in seconds of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.'
      description: '<p>Represents an authorization layer for methods. If enabled on a method, API Gateway will activate the authorizer when a client calls the method.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html">Use Lambda Function as Authorizer</a> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-integrate-with-cognito.html">Use Cognito User Pool as Authorizer</a> </div>'
    ProviderARN:
      type: string
    BasePathMapping:
      type: object
      properties:
        basePath:
          $ref: '#/components/schemas/String'
          description: The base path name that callers of the API must provide as part of the URL after the domain name.
        restApiId:
          $ref: '#/components/schemas/String'
          description: The string identifier of the associated <a>RestApi</a>.
        stage:
          $ref: '#/components/schemas/String'
          description: The name of the associated stage.
      description: '<p>Represents the base path that callers of the API must provide as part of the URL after the domain name.</p> <div class="remarks">A custom domain name plus a <code>BasePathMapping</code> specification identifies a deployed <a>RestApi</a> in a given stage of the owner <a>Account</a>.</div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html">Use Custom Domain Names</a> </div>'
    Deployment:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/String'
          description: The identifier for the deployment resource.
        description:
          $ref: '#/components/schemas/String'
          description: The description for the deployment resource.
        createdDate:
          $ref: '#/components/schemas/Timestamp'
          description: The date and time that the deployment resource was created.
        apiSummary:
          $ref: '#/components/schemas/PathToMapOfMethodSnapshot'
          description: A summary of the <a>RestApi</a> at the date and time that the deployment resource was created.
      description: '<p>An immutable representation of a <a>RestApi</a> resource that can be called by users using <a>Stages</a>. A deployment must be associated with a <a>Stage</a> for it to be callable over the Internet.</p> <div class="remarks">To create a deployment, call <code>POST</code> on the <a>Deployments</a> resource of a <a>RestApi</a>. To view, update, or delete a deployment, call <code>GET</code>, <code>PATCH</code>, or <code>DELETE</code> on the specified deployment resource (<code>/restapis/{restapi_id}/deployments/{deployment_id}</code>).</div> <div class="seeAlso"><a>RestApi</a>, <a>Deployments</a>, <a>Stage</a>, <a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/get-deployment.html">AWS CLI</a>, <a href="https://aws.amazon.com/tools/">AWS SDKs</a> </div>'
    Double:
      type: number
      format: double
    MapOfStringToString:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    Boolean:
      type: boolean
    ServiceUnavailableException: {}
    DocumentationPart:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/String'
          description: 'The <a>DocumentationPart</a> identifier, generated by API Gateway when the <code>DocumentationPart</code> is created.'
        location:
          $ref: '#/components/schemas/DocumentationPartLocation'
          description: 'The location of the API entity to which the documentation applies. Valid fields depend on the targeted API entity type. All the valid location fields are not required. If not explicitly specified, a valid location field is treated as a wildcard and associated documentation content may be inherited by matching entities, unless overridden.'
        properties:
          description: 'A content map of API-specific key-value pairs describing the targeted API entity. The map must be encoded as a JSON string, e.g., <code>"{ \"description\": \"The API does ...\" }"</code>. Only OpenAPI-compliant documentation-related fields from the <literal>properties</literal> map are exported and, hence, published as part of the API entity definitions, while the original documentation parts are exported in a OpenAPI extension of <code>x-amazon-apigateway-documentation</code>.'
      description: '<p>A documentation part for a targeted API entity.</p> <div class="remarks"> <p>A documentation part consists of a content map (<code>properties</code>) and a target (<code>location</code>). The target specifies an API entity to which the documentation content applies. The supported API entity types are <code>API</code>, <code>AUTHORIZER</code>, <code>MODEL</code>, <code>RESOURCE</code>, <code>METHOD</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>, <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. Valid <code>location</code> fields depend on the API entity type. All valid fields are not required.</p> <p>The content map is a JSON string of API-specific key-value pairs. Although an API can use any shape for the content map, only the OpenAPI-compliant documentation fields will be injected into the associated API entity definition in the exported OpenAPI definition file.</p></div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-documenting-api.html">Documenting an API</a>, <a>DocumentationParts</a> </div>'
    DocumentationPartType:
      type: string
      enum:
        - API
        - AUTHORIZER
        - MODEL
        - RESOURCE
        - METHOD
        - PATH_PARAMETER
        - QUERY_PARAMETER
        - REQUEST_HEADER
        - REQUEST_BODY
        - RESPONSE
        - RESPONSE_HEADER
        - RESPONSE_BODY
    DocumentationPartLocationStatusCode:
      type: string
      pattern: '^([1-5]\d\d|\*|\s*)$'
    DocumentationVersion:
      type: object
      properties:
        version:
          $ref: '#/components/schemas/String'
          description: The version identifier of the API documentation snapshot.
        createdDate:
          $ref: '#/components/schemas/Timestamp'
          description: The date when the API documentation snapshot is created.
        description:
          $ref: '#/components/schemas/String'
          description: The description of the API documentation snapshot.
      description: '<p>A snapshot of the documentation of an API.</p> <div class="remarks"><p>Publishing API documentation involves creating a documentation version associated with an API stage and exporting the versioned documentation to an external (e.g., OpenAPI) file.</p></div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-documenting-api.html">Documenting an API</a>, <a>DocumentationPart</a>, <a>DocumentationVersions</a> </div>'
    DomainName:
      type: object
      properties:
        domainName:
          $ref: '#/components/schemas/String'
          description: 'The custom domain name as an API host name, for example, <code>my-api.example.com</code>.'
        certificateName:
          $ref: '#/components/schemas/String'
          description: The name of the certificate that will be used by edge-optimized endpoint for this domain name.
        certificateArn:
          $ref: '#/components/schemas/String'
          description: The reference to an AWS-managed certificate that will be used by edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.
        certificateUploadDate:
          $ref: '#/components/schemas/Timestamp'
          description: The timestamp when the certificate that was used by edge-optimized endpoint for this domain name was uploaded.
        regionalDomainName:
          $ref: '#/components/schemas/String'
          description: The domain name associated with the regional endpoint for this custom domain name. You set up this association by adding a DNS record that points the custom domain name to this regional domain name. The regional domain name is returned by API Gateway when you create a regional endpoint.
        regionalHostedZoneId:
          $ref: '#/components/schemas/String'
          description: 'The region-specific Amazon Route 53 Hosted Zone ID of the regional endpoint. For more information, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-regional-api-custom-domain-create.html">Set up a Regional Custom Domain Name</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#apigateway_region">AWS Regions and Endpoints for API Gateway</a>. '
        regionalCertificateName:
          $ref: '#/components/schemas/String'
          description: The name of the certificate that will be used for validating the regional domain name.
        regionalCertificateArn:
          $ref: '#/components/schemas/String'
          description: The reference to an AWS-managed certificate that will be used for validating the regional domain name. AWS Certificate Manager is the only supported source.
        distributionDomainName:
          $ref: '#/components/schemas/String'
          description: 'The domain name of the Amazon CloudFront distribution associated with this custom domain name for an edge-optimized endpoint. You set up this association when adding a DNS record pointing the custom domain name to this distribution name. For more information about CloudFront distributions, see the <a href="https://aws.amazon.com/documentation/cloudfront/" target="_blank">Amazon CloudFront documentation</a>.'
        distributionHostedZoneId:
          $ref: '#/components/schemas/String'
          description: 'The region-agnostic Amazon Route 53 Hosted Zone ID of the edge-optimized endpoint. The valid value is <code>Z2FDTNDATAQYW2</code> for all the regions. For more information, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-regional-api-custom-domain-create.html">Set up a Regional Custom Domain Name</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#apigateway_region">AWS Regions and Endpoints for API Gateway</a>. '
        endpointConfiguration:
          $ref: '#/components/schemas/EndpointConfiguration'
          description: The endpoint configuration of this <a>DomainName</a> showing the endpoint types of the domain name.
        domainNameStatus:
          $ref: '#/components/schemas/DomainNameStatus'
          description: 'The status of the <a>DomainName</a> migration. The valid values are <code>AVAILABLE</code>, <code>UPDATING</code>, <code>PENDING_CERTIFICATE_REIMPORT</code>, and <code>PENDING_OWNERSHIP_VERIFICATION</code>. If the status is <code>UPDATING</code>, the domain cannot be modified further until the existing operation is complete. If it is <code>AVAILABLE</code>, the domain can be updated.'
        domainNameStatusMessage:
          $ref: '#/components/schemas/String'
          description: An optional text message containing detailed information about status of the <a>DomainName</a> migration.
        securityPolicy:
          $ref: '#/components/schemas/SecurityPolicy'
          description: The Transport Layer Security (TLS) version + cipher suite for this <a>DomainName</a>. The valid values are <code>TLS_1_0</code> and <code>TLS_1_2</code>.
        tags:
          $ref: '#/components/schemas/MapOfStringToString'
          description: The collection of tags. Each tag element is associated with a given resource.
        mutualTlsAuthentication:
          $ref: '#/components/schemas/MutualTlsAuthentication'
          description: 'The mutual TLS authentication configuration for a custom domain name. If specified, API Gateway performs two-way authentication between the client and the server. Clients must present a trusted certificate to access your API.'
        ownershipVerificationCertificateArn:
          $ref: '#/components/schemas/String'
          description: The ARN of the public certificate issued by ACM to validate ownership of your custom domain. Only required when configuring mutual TLS and using an ACM imported or private CA certificate ARN as the regionalCertificateArn.
      description: '<p>Represents a custom domain name as a user-friendly host name of an API (<a>RestApi</a>).</p> <div class="Remarks"> <p>When you deploy an API, API Gateway creates a default host name for the API. This default API host name is of the <code>{restapi-id}.execute-api.{region}.amazonaws.com</code> format. With the default host name, you can access the API''s root resource with the URL of <code>https://{restapi-id}.execute-api.{region}.amazonaws.com/{stage}/</code>. When you set up a custom domain name of <code>apis.example.com</code> for this API, you can then access the same resource using the URL of the <code>https://apis.examples.com/myApi</code>, where <code>myApi</code> is the base path mapping (<a>BasePathMapping</a>) of your API under the custom domain name. </p> </div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html">Set a Custom Host Name for an API</a> </div>'
    ListOfEndpointType:
      type: array
      items:
        $ref: '#/components/schemas/EndpointType'
    ListOfString:
      type: array
      items:
        $ref: '#/components/schemas/String'
    Model:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/String'
          description: The identifier for the model resource.
        name:
          $ref: '#/components/schemas/String'
          description: The name of the model. Must be an alphanumeric string.
        description:
          $ref: '#/components/schemas/String'
          description: The description of the model.
        schema:
          $ref: '#/components/schemas/String'
          description: 'The schema for the model. For <code>application/json</code> models, this should be <a href="https://tools.ietf.org/html/draft-zyp-json-schema-04" target="_blank">JSON schema draft 4</a> model. Do not include "\*/" characters in the description of any properties because such "\*/" characters may be interpreted as the closing marker for comments in some languages, such as Java or JavaScript, causing the installation of your API''s SDK generated by API Gateway to fail.'
        contentType:
          $ref: '#/components/schemas/String'
          description: The content-type for the model.
      description: '<p>Represents the data structure of a method''s request or response payload.</p> <div class="remarks"> <p>A request model defines the data structure of the client-supplied request payload. A response model defines the data structure of the response payload returned by the back end. Although not required, models are useful for mapping payloads between the front end and back end.</p> <p>A model is used for generating an API''s SDK, validating the input request body, and creating a skeletal mapping template.</p> </div> <div class="seeAlso"> <a>Method</a>, <a>MethodResponse</a>, <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/models-mappings.html">Models and Mappings</a> </div>'
    RequestValidator:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/String'
          description: The identifier of this <a>RequestValidator</a>.
        name:
          $ref: '#/components/schemas/String'
          description: The name of this <a>RequestValidator</a>
        validateRequestBody:
          $ref: '#/components/schemas/Boolean'
          description: A Boolean flag to indicate whether to validate a request body according to the configured <a>Model</a> schema.
        validateRequestParameters:
          $ref: '#/components/schemas/Boolean'
          description: A Boolean flag to indicate whether to validate request parameters (<code>true</code>) or not (<code>false</code>).
      description: '<p>A set of validation rules for incoming <a>Method</a> requests.</p> <div class="remarks"> <p>In OpenAPI, a <a>RequestValidator</a> of an API is defined by the <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html#api-gateway-swagger-extensions-request-validators.requestValidator.html">x-amazon-apigateway-request-validators.requestValidator</a> object. It the referenced using the <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html#api-gateway-swagger-extensions-request-validator">x-amazon-apigateway-request-validator</a> property.</p> </div> <div class="seeAlso"><a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-method-request-validation.html">Enable Basic Request Validation in API Gateway</a></div>'
    Resource:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/String'
          description: The resource's identifier.
        parentId:
          $ref: '#/components/schemas/String'
          description: The parent resource's identifier.
        pathPart:
          $ref: '#/components/schemas/String'
          description: The last path segment for this resource.
        path:
          $ref: '#/components/schemas/String'
          description: The full path for this resource.
        resourceMethods:
          $ref: '#/components/schemas/MapOfMethod'
          description: '<p>Gets an API resource''s method of a given HTTP verb.</p> <div class="remarks"> <p>The resource methods are a map of methods indexed by methods'' HTTP verbs enabled on the resource. This method map is included in the <code>200 OK</code> response of the <code>GET /restapis/{restapi_id}/resources/{resource_id}</code> or <code>GET /restapis/{restapi_id}/resources/{resource_id}?embed=methods</code> request.</p> <h4>Example: Get the GET method of an API resource</h4> <h5>Request</h5> <pre><code>GET /restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET HTTP/1.1 Content-Type: application/json Host: apigateway.us-east-1.amazonaws.com X-Amz-Date: 20170223T031827Z Authorization: AWS4-HMAC-SHA256 Credential={access_key_ID}/20170223/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature={sig4_hash}</code></pre> <h5>Response</h5> <pre><code>{ "_links": { "curies": [ { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-{rel}.html", "name": "integration", "templated": true }, { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-response-{rel}.html", "name": "integrationresponse", "templated": true }, { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-method-{rel}.html", "name": "method", "templated": true }, { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-method-response-{rel}.html", "name": "methodresponse", "templated": true } ], "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET", "name": "GET", "title": "GET" }, "integration:put": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "method:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET" }, "method:integration": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "method:responses": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200", "name": "200", "title": "200" }, "method:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET" }, "methodresponse:put": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/{status_code}", "templated": true } }, "apiKeyRequired": false, "authorizationType": "NONE", "httpMethod": "GET", "_embedded": { "method:integration": { "_links": { "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "integration:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "integration:responses": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200", "name": "200", "title": "200" }, "integration:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "integrationresponse:put": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/{status_code}", "templated": true } }, "cacheKeyParameters": [], "cacheNamespace": "3kzxbg5sa2", "credentials": "arn:aws:iam::123456789012:role/apigAwsProxyRole", "httpMethod": "POST", "passthroughBehavior": "WHEN_NO_MATCH", "requestParameters": { "integration.request.header.Content-Type": "''application/x-amz-json-1.1''" }, "requestTemplates": { "application/json": "{\n}" }, "type": "AWS", "uri": "arn:aws:apigateway:us-east-1:kinesis:action/ListStreams", "_embedded": { "integration:responses": { "_links": { "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200", "name": "200", "title": "200" }, "integrationresponse:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200" }, "integrationresponse:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200" } }, "responseParameters": { "method.response.header.Content-Type": "''application/xml''" }, "responseTemplates": { "application/json": "$util.urlDecode(\"%3CkinesisStreams%3E#foreach($stream in $input.path(''$.StreamNames''))%3Cstream%3E%3Cname%3E$stream%3C/name%3E%3C/stream%3E#end%3C/kinesisStreams%3E\")\n" }, "statusCode": "200" } } }, "method:responses": { "_links": { "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200", "name": "200", "title": "200" }, "methodresponse:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200" }, "methodresponse:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200" } }, "responseModels": { "application/json": "Empty" }, "responseParameters": { "method.response.header.Content-Type": false }, "statusCode": "200" } } }</code></pre> <p>If the <code>OPTIONS</code> is enabled on the resource, you can follow the example here to get that method. Just replace the <code>GET</code> of the last path segment in the request URL with <code>OPTIONS</code>.</p> </div> <div class="seeAlso"> </div>'
      description: '<p>Represents an API resource.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-create-api.html">Create an API</a> </div>'
    RestApi:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/String'
          description: The API's identifier. This identifier is unique across all of your APIs in API Gateway.
        name:
          $ref: '#/components/schemas/String'
          description: The API's name.
        description:
          $ref: '#/components/schemas/String'
          description: The API's description.
        createdDate:
          $ref: '#/components/schemas/Timestamp'
          description: The timestamp when the API was created.
        version:
          $ref: '#/components/schemas/String'
          description: A version identifier for the API.
        warnings:
          $ref: '#/components/schemas/ListOfString'
          description: The warning messages reported when <code>failonwarnings</code> is turned on during API import.
        binaryMediaTypes:
          $ref: '#/components/schemas/ListOfString'
          description: 'The list of binary media types supported by the <a>RestApi</a>. By default, the <a>RestApi</a> supports only UTF-8-encoded text payloads.'
        minimumCompressionSize:
          $ref: '#/components/schemas/NullableInteger'
          description: 'A nullable integer that is used to enable compression (with non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable compression (with a null value) on an API. When compression is enabled, compression or decompression is not applied on the payload if the payload size is smaller than this value. Setting it to zero allows compression for any payload size.'
        apiKeySource:
          $ref: '#/components/schemas/ApiKeySourceType'
          description: 'The source of the API key for metering requests according to a usage plan. Valid values are: <ul><li><code>HEADER</code> to read the API key from the <code>X-API-Key</code> header of a request. </li><li><code>AUTHORIZER</code> to read the API key from the <code>UsageIdentifierKey</code> from a custom authorizer.</li></ul>'
        endpointConfiguration:
          $ref: '#/components/schemas/EndpointConfiguration'
          description: The endpoint configuration of this <a>RestApi</a> showing the endpoint types of the API.
        policy:
          $ref: '#/components/schemas/String'
          description: A stringified JSON policy document that applies to this RestApi regardless of the caller and <a>Method</a> configuration.
        tags:
          $ref: '#/components/schemas/MapOfStringToString'
          description: The collection of tags. Each tag element is associated with a given resource.
        disableExecuteApiEndpoint:
          $ref: '#/components/schemas/Boolean'
          description: 'Specifies whether clients can invoke your API by using the default <code>execute-api</code> endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.'
      description: '<p>Represents a REST API.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-create-api.html">Create an API</a> </div>'
    Stage:
      type: object
      properties:
        deploymentId:
          $ref: '#/components/schemas/String'
          description: The identifier of the <a>Deployment</a> that the stage points to.
        clientCertificateId:
          $ref: '#/components/schemas/String'
          description: The identifier of a client certificate for an API stage.
        stageName:
          $ref: '#/components/schemas/String'
          description: 'The name of the stage is the first path segment in the Uniform Resource Identifier (URI) of a call to API Gateway. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.'
        description:
          $ref: '#/components/schemas/String'
          description: The stage's description.
        cacheClusterEnabled:
          $ref: '#/components/schemas/Boolean'
          description: Specifies whether a cache cluster is enabled for the stage.
        cacheClusterSize:
          $ref: '#/components/schemas/CacheClusterSize'
          description: 'The size of the cache cluster for the stage, if enabled.'
        cacheClusterStatus:
          $ref: '#/components/schemas/CacheClusterStatus'
          description: 'The status of the cache cluster for the stage, if enabled.'
        methodSettings:
          $ref: '#/components/schemas/MapOfMethodSettings'
          description: 'A map that defines the method settings for a <a>Stage</a> resource. Keys (designated as <code>/{method_setting_key</code> below) are method paths defined as <code>{resource_path}/{http_method}</code> for an individual method override, or <code>/\*/\*</code> for overriding all methods in the stage. '
        variables:
          $ref: '#/components/schemas/MapOfStringToString'
          description: 'A map that defines the stage variables for a <a>Stage</a> resource. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>.'
        documentationVersion:
          $ref: '#/components/schemas/String'
          description: The version of the associated API documentation.
        accessLogSettings:
          $ref: '#/components/schemas/AccessLogSettings'
          description: Settings for logging access in this stage.
        canarySettings:
          $ref: '#/components/schemas/CanarySettings'
          description: Settings for the canary deployment in this stage.
        tracingEnabled:
          $ref: '#/components/schemas/Boolean'
          description: Specifies whether active tracing with X-ray is enabled for the <a>Stage</a>.
        webAclArn:
          $ref: '#/components/schemas/String'
          description: The ARN of the WebAcl associated with the <a>Stage</a>.
        tags:
          $ref: '#/components/schemas/MapOfStringToString'
          description: The collection of tags. Each tag element is associated with a given resource.
        createdDate:
          $ref: '#/components/schemas/Timestamp'
          description: The timestamp when the stage was created.
        lastUpdatedDate:
          $ref: '#/components/schemas/Timestamp'
          description: The timestamp when the stage last updated.
      description: '<p>Represents a unique identifier for a version of a deployed <a>RestApi</a> that is callable by users.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-deploy-api.html">Deploy an API</a> </div>'
    UsagePlan:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/String'
          description: The identifier of a <a>UsagePlan</a> resource.
        name:
          $ref: '#/components/schemas/String'
          description: The name of a usage plan.
        description:
          $ref: '#/components/schemas/String'
          description: The description of a usage plan.
        apiStages:
          $ref: '#/components/schemas/ListOfApiStage'
          description: The associated API stages of a usage plan.
        throttle:
          $ref: '#/components/schemas/ThrottleSettings'
          description: The request throttle limits of a usage plan.
        quota:
          $ref: '#/components/schemas/QuotaSettings'
          description: The maximum number of permitted requests per a given unit time interval.
        productCode:
          $ref: '#/components/schemas/String'
          description: The AWS Markeplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.
        tags:
          $ref: '#/components/schemas/MapOfStringToString'
          description: The collection of tags. Each tag element is associated with a given resource.
      description: '<p>Represents a usage plan than can specify who can assess associated API stages with specified request limits and quotas.</p> <div class="remarks"> <p>In a usage plan, you associate an API by specifying the API''s Id and a stage name of the specified API. You add plan customers by adding API keys to the plan. </p> </div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-usage-plans.html">Create and Use Usage Plans</a> </div>'
    ApiStage:
      type: object
      properties:
        apiId:
          $ref: '#/components/schemas/String'
          description: API Id of the associated API stage in a usage plan.
        stage:
          $ref: '#/components/schemas/String'
          description: API stage name of the associated API stage in a usage plan.
        throttle:
          $ref: '#/components/schemas/MapOfApiStageThrottleSettings'
          description: Map containing method level throttling information for API stage in a usage plan.
      description: API stage name of the associated API stage in a usage plan.
    Integer:
      type: integer
    QuotaPeriodType:
      type: string
      enum:
        - DAY
        - WEEK
        - MONTH
    UsagePlanKey:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/String'
          description: The Id of a usage plan key.
        type:
          $ref: '#/components/schemas/String'
          description: 'The type of a usage plan key. Currently, the valid key type is <code>API_KEY</code>.'
        value:
          $ref: '#/components/schemas/String'
          description: The value of a usage plan key.
        name:
          $ref: '#/components/schemas/String'
          description: The name of a usage plan key.
      description: '<p>Represents a usage plan key to identify a plan customer.</p> <div class="remarks"> <p>To associate an API stage with a selected API key in a usage plan, you must create a UsagePlanKey resource to represent the selected <a>ApiKey</a>.</p> </div>" <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-usage-plans.html">Create and Use Usage Plans</a> </div>'
    VpcLink:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/String'
          description: The identifier of the <a>VpcLink</a>. It is used in an <a>Integration</a> to reference this <a>VpcLink</a>.
        name:
          $ref: '#/components/schemas/String'
          description: The name used to label and identify the VPC link.
        description:
          $ref: '#/components/schemas/String'
          description: The description of the VPC link.
        targetArns:
          $ref: '#/components/schemas/ListOfString'
          description: The ARN of the network load balancer of the VPC targeted by the VPC link. The network load balancer must be owned by the same AWS account of the API owner.
        status:
          $ref: '#/components/schemas/VpcLinkStatus'
          description: 'The status of the VPC link. The valid values are <code>AVAILABLE</code>, <code>PENDING</code>, <code>DELETING</code>, or <code>FAILED</code>. Deploying an API will wait if the status is <code>PENDING</code> and will fail if the status is <code>DELETING</code>.'
        statusMessage:
          $ref: '#/components/schemas/String'
          description: A description about the VPC link status.
        tags:
          $ref: '#/components/schemas/MapOfStringToString'
          description: The collection of tags. Each tag element is associated with a given resource.
      description: '<p>An API Gateway VPC link for a <a>RestApi</a> to access resources in an Amazon Virtual Private Cloud (VPC).</p> <div class="remarks"> <p><p>To enable access to a resource in an Amazon Virtual Private Cloud through Amazon API Gateway, you, as an API developer, create a <a>VpcLink</a> resource targeted for one or more network load balancers of the VPC and then integrate an API method with a private integration that uses the <a>VpcLink</a>. The private integration has an integration type of <code>HTTP</code> or <code>HTTP_PROXY</code> and has a connection type of <code>VPC_LINK</code>. The integration uses the <code>connectionId</code> property to identify the <a>VpcLink</a> used.</p></p> </div>'
    ClientCertificate:
      type: object
      properties:
        clientCertificateId:
          $ref: '#/components/schemas/String'
          description: The identifier of the client certificate.
        description:
          $ref: '#/components/schemas/String'
          description: The description of the client certificate.
        pemEncodedCertificate:
          $ref: '#/components/schemas/String'
          description: 'The PEM-encoded public key of the client certificate, which can be used to configure certificate authentication in the integration endpoint .'
        createdDate:
          $ref: '#/components/schemas/Timestamp'
          description: The timestamp when the client certificate was created.
        expirationDate:
          $ref: '#/components/schemas/Timestamp'
          description: The timestamp when the client certificate will expire.
        tags:
          $ref: '#/components/schemas/MapOfStringToString'
          description: The collection of tags. Each tag element is associated with a given resource.
      description: '<p>Represents a client certificate used to configure client-side SSL authentication while sending requests to the integration endpoint.</p> <div class="remarks">Client certificates are used to authenticate an API by the backend server. To authenticate an API client (or user), use IAM roles and policies, a custom <a>Authorizer</a> or an Amazon Cognito user pool.</div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started-client-side-ssl-authentication.html">Use Client-Side Certificate</a> </div>'
    Account:
      type: object
      properties:
        cloudwatchRoleArn:
          $ref: '#/components/schemas/String'
          description: 'The ARN of an Amazon CloudWatch role for the current <a>Account</a>. '
        throttleSettings:
          $ref: '#/components/schemas/ThrottleSettings'
          description: Specifies the API request limits configured for the current <a>Account</a>.
        features:
          $ref: '#/components/schemas/ListOfString'
          description: 'A list of features supported for the account. When usage plans are enabled, the features list will include an entry of <code>"UsagePlans"</code>.'
        apiKeyVersion:
          $ref: '#/components/schemas/String'
          description: The version of the API keys used for the account.
      description: '<p>Represents an AWS account that is associated with API Gateway.</p> <div class="remarks"> <p>To view the account info, call <code>GET</code> on this resource.</p> <h4>Error Codes</h4> <p>The following exception may be thrown when the request fails.</p> <ul> <li>UnauthorizedException</li> <li>NotFoundException</li> <li>TooManyRequestsException</li> </ul> <p>For detailed error code information, including the corresponding HTTP Status Codes, see <a href="https://docs.aws.amazon.com/apigateway/api-reference/handling-errors/#api-error-codes">API Gateway Error Codes</a></p> <h4>Example: Get the information about an account.</h4> <h5>Request</h5> <pre><code>GET /account HTTP/1.1 Content-Type: application/json Host: apigateway.us-east-1.amazonaws.com X-Amz-Date: 20160531T184618Z Authorization: AWS4-HMAC-SHA256 Credential={access_key_ID}/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature={sig4_hash} </code></pre> <h5>Response</h5> <p>The successful response returns a <code>200 OK</code> status code and a payload similar to the following:</p> <pre><code>{ "_links": { "curies": { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/account-apigateway-{rel}.html", "name": "account", "templated": true }, "self": { "href": "/account" }, "account:update": { "href": "/account" } }, "cloudwatchRoleArn": "arn:aws:iam::123456789012:role/apigAwsProxyRole", "throttleSettings": { "rateLimit": 500, "burstLimit": 1000 } } </code></pre> <p>In addition to making the REST API call directly, you can use the AWS CLI and an AWS SDK to access this resource.</p> </div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-limits.html">API Gateway Limits</a> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/welcome.html">Developer Guide</a>, <a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/get-account.html">AWS CLI</a> </div>'
    ApiKeys:
      type: object
      properties:
        warnings:
          $ref: '#/components/schemas/ListOfString'
          description: A list of warning messages logged during the import of API keys when the <code>failOnWarnings</code> option is set to true.
        position:
          $ref: '#/components/schemas/String'
        items:
          allOf:
            - $ref: '#/components/schemas/ListOfApiKey'
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: '<p>Represents a collection of API keys as represented by an <a>ApiKeys</a> resource.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-api-keys.html">Use API Keys</a> </div>'
    Authorizers:
      type: object
      properties:
        position:
          $ref: '#/components/schemas/String'
        items:
          allOf:
            - $ref: '#/components/schemas/ListOfAuthorizer'
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: '<p>Represents a collection of <a>Authorizer</a> resources.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html">Use Lambda Function as Authorizer</a> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-integrate-with-cognito.html">Use Cognito User Pool as Authorizer</a> </div>'
    BasePathMappings:
      type: object
      properties:
        position:
          $ref: '#/components/schemas/String'
        items:
          allOf:
            - $ref: '#/components/schemas/ListOfBasePathMapping'
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: '<p>Represents a collection of <a>BasePathMapping</a> resources.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html">Use Custom Domain Names</a> </div>'
    ClientCertificates:
      type: object
      properties:
        position:
          $ref: '#/components/schemas/String'
        items:
          allOf:
            - $ref: '#/components/schemas/ListOfClientCertificate'
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: '<p>Represents a collection of <a>ClientCertificate</a> resources.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started-client-side-ssl-authentication.html">Use Client-Side Certificate</a> </div>'
    Deployments:
      type: object
      properties:
        position:
          $ref: '#/components/schemas/String'
        items:
          allOf:
            - $ref: '#/components/schemas/ListOfDeployment'
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: '<p>Represents a collection resource that contains zero or more references to your existing deployments, and links that guide you on how to interact with your collection. The collection offers a paginated view of the contained deployments.</p> <div class="remarks">To create a new deployment of a <a>RestApi</a>, make a <code>POST</code> request against this resource. To view, update, or delete an existing deployment, make a <code>GET</code>, <code>PATCH</code>, or <code>DELETE</code> request, respectively, on a specified <a>Deployment</a> resource.</div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-deploy-api.html">Deploying an API</a>, <a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/get-deployment.html">AWS CLI</a>, <a href="https://aws.amazon.com/tools/">AWS SDKs</a> </div>'
    DocumentationParts:
      type: object
      properties:
        position:
          $ref: '#/components/schemas/String'
        items:
          allOf:
            - $ref: '#/components/schemas/ListOfDocumentationPart'
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: '<p>The collection of documentation parts of an API.</p> <div class="remarks"/> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-documenting-api.html">Documenting an API</a>, <a>DocumentationPart</a> </div>'
    DocumentationVersions:
      type: object
      properties:
        position:
          $ref: '#/components/schemas/String'
        items:
          allOf:
            - $ref: '#/components/schemas/ListOfDocumentationVersion'
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: '<p>The collection of documentation snapshots of an API. </p> <div class="remarks"><p>Use the <a>DocumentationVersions</a> to manage documentation snapshots associated with various API stages.</p></div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-documenting-api.html">Documenting an API</a>, <a>DocumentationPart</a>, <a>DocumentationVersion</a> </div>'
    DomainNames:
      type: object
      properties:
        position:
          $ref: '#/components/schemas/String'
        items:
          allOf:
            - $ref: '#/components/schemas/ListOfDomainName'
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: '<p>Represents a collection of <a>DomainName</a> resources.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html">Use Client-Side Certificate</a> </div>'
    ExportResponse:
      type: object
      properties:
        body:
          $ref: '#/components/schemas/Blob'
          description: 'The binary blob response to <a>GetExport</a>, which contains the export.'
      description: 'The binary blob response to <a>GetExport</a>, which contains the generated SDK.'
    GatewayResponse:
      type: object
      properties:
        responseType:
          $ref: '#/components/schemas/GatewayResponseType'
          description: 'The response type of the associated <a>GatewayResponse</a>. Valid values are <ul><li>ACCESS_DENIED</li><li>API_CONFIGURATION_ERROR</li><li>AUTHORIZER_FAILURE</li><li> AUTHORIZER_CONFIGURATION_ERROR</li><li>BAD_REQUEST_PARAMETERS</li><li>BAD_REQUEST_BODY</li><li>DEFAULT_4XX</li><li>DEFAULT_5XX</li><li>EXPIRED_TOKEN</li><li>INVALID_SIGNATURE</li><li>INTEGRATION_FAILURE</li><li>INTEGRATION_TIMEOUT</li><li>INVALID_API_KEY</li><li>MISSING_AUTHENTICATION_TOKEN</li><li> QUOTA_EXCEEDED</li><li>REQUEST_TOO_LARGE</li><li>RESOURCE_NOT_FOUND</li><li>THROTTLED</li><li>UNAUTHORIZED</li><li>UNSUPPORTED_MEDIA_TYPE</li></ul> '
        statusCode:
          $ref: '#/components/schemas/StatusCode'
          description: The HTTP status code for this <a>GatewayResponse</a>.
        responseParameters:
          $ref: '#/components/schemas/MapOfStringToString'
          description: 'Response parameters (paths, query strings and headers) of the <a>GatewayResponse</a> as a string-to-string map of key-value pairs.'
        responseTemplates:
          $ref: '#/components/schemas/MapOfStringToString'
          description: Response templates of the <a>GatewayResponse</a> as a string-to-string map of key-value pairs.
        defaultResponse:
          $ref: '#/components/schemas/Boolean'
          description: 'A Boolean flag to indicate whether this <a>GatewayResponse</a> is the default gateway response (<code>true</code>) or not (<code>false</code>). A default gateway response is one generated by API Gateway without any customization by an API developer. '
      description: '<p>A gateway response of a given response type and status code, with optional response parameters and mapping templates.</p> <div class="remarks"> For more information about valid gateway response types, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/supported-gateway-response-types.html">Gateway Response Types Supported by API Gateway</a> <div class="example"> <h4>Example: Get a Gateway Response of a given response type</h4> <h5>Request</h5> <p>This example shows how to get a gateway response of the <code>MISSING_AUTHENTICATION_TOKEN</code> type.</p> <pre><code>GET /restapis/o81lxisefl/gatewayresponses/MISSING_AUTHENTICATION_TOKEN HTTP/1.1 Host: beta-apigateway.us-east-1.amazonaws.com Content-Type: application/json X-Amz-Date: 20170503T202516Z Authorization: AWS4-HMAC-SHA256 Credential={access-key-id}/20170503/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature=1b52460e3159c1a26cff29093855d50ea141c1c5b937528fecaf60f51129697a Cache-Control: no-cache Postman-Token: 3b2a1ce9-c848-2e26-2e2f-9c2caefbed45 </code></pre> <p>The response type is specified as a URL path.</p> <h5>Response</h5> <p>The successful operation returns the <code>200 OK</code> status code and a payload similar to the following:</p> <pre><code>{ "_links": { "curies": { "href": "http://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-gatewayresponse-{rel}.html", "name": "gatewayresponse", "templated": true }, "self": { "href": "/restapis/o81lxisefl/gatewayresponses/MISSING_AUTHENTICATION_TOKEN" }, "gatewayresponse:delete": { "href": "/restapis/o81lxisefl/gatewayresponses/MISSING_AUTHENTICATION_TOKEN" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/MISSING_AUTHENTICATION_TOKEN" } }, "defaultResponse": false, "responseParameters": { "gatewayresponse.header.x-request-path": "method.request.path.petId", "gatewayresponse.header.Access-Control-Allow-Origin": "&apos;a.b.c&apos;", "gatewayresponse.header.x-request-query": "method.request.querystring.q", "gatewayresponse.header.x-request-header": "method.request.header.Accept" }, "responseTemplates": { "application/json": "{\n \"message\": $context.error.messageString,\n \"type\": \"$context.error.responseType\",\n \"stage\": \"$context.stage\",\n \"resourcePath\": \"$context.resourcePath\",\n \"stageVariables.a\": \"$stageVariables.a\",\n \"statusCode\": \"&apos;404&apos;\"\n}" }, "responseType": "MISSING_AUTHENTICATION_TOKEN", "statusCode": "404" }</code></pre> <p/> </div> </div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/customize-gateway-responses.html">Customize Gateway Responses</a> </div>'
    GatewayResponses:
      type: object
      properties:
        position:
          $ref: '#/components/schemas/String'
        items:
          allOf:
            - $ref: '#/components/schemas/ListOfGatewayResponse'
            - xml:
                name: item
              description: 'Returns the entire collection, because of no pagination support.'
      description: '<p>The collection of the <a>GatewayResponse</a> instances of a <a>RestApi</a> as a <code>responseType</code>-to-<a>GatewayResponse</a> object map of key-value pairs. As such, pagination is not supported for querying this collection.</p> <div class="remarks"> For more information about valid gateway response types, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/supported-gateway-response-types.html">Gateway Response Types Supported by API Gateway</a> <div class="example"> <h4>Example: Get the collection of gateway responses of an API</h4> <h5>Request</h5> <p>This example request shows how to retrieve the <a>GatewayResponses</a> collection from an API.</p> <pre><code>GET /restapis/o81lxisefl/gatewayresponses HTTP/1.1 Host: beta-apigateway.us-east-1.amazonaws.com Content-Type: application/json X-Amz-Date: 20170503T220604Z Authorization: AWS4-HMAC-SHA256 Credential={access-key-id}/20170503/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature=59b42fe54a76a5de8adf2c67baa6d39206f8e9ad49a1d77ccc6a5da3103a398a Cache-Control: no-cache Postman-Token: 5637af27-dc29-fc5c-9dfe-0645d52cb515 </code></pre> <p/> <h5>Response</h5> <p>The successful operation returns the <code>200 OK</code> status code and a payload similar to the following:</p> <pre><code>{ "_links": { "curies": { "href": "http://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-gatewayresponse-{rel}.html", "name": "gatewayresponse", "templated": true }, "self": { "href": "/restapis/o81lxisefl/gatewayresponses" }, "first": { "href": "/restapis/o81lxisefl/gatewayresponses" }, "gatewayresponse:by-type": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "item": [ { "href": "/restapis/o81lxisefl/gatewayresponses/INTEGRATION_FAILURE" }, { "href": "/restapis/o81lxisefl/gatewayresponses/RESOURCE_NOT_FOUND" }, { "href": "/restapis/o81lxisefl/gatewayresponses/REQUEST_TOO_LARGE" }, { "href": "/restapis/o81lxisefl/gatewayresponses/THROTTLED" }, { "href": "/restapis/o81lxisefl/gatewayresponses/UNSUPPORTED_MEDIA_TYPE" }, { "href": "/restapis/o81lxisefl/gatewayresponses/AUTHORIZER_CONFIGURATION_ERROR" }, { "href": "/restapis/o81lxisefl/gatewayresponses/DEFAULT_5XX" }, { "href": "/restapis/o81lxisefl/gatewayresponses/DEFAULT_4XX" }, { "href": "/restapis/o81lxisefl/gatewayresponses/BAD_REQUEST_PARAMETERS" }, { "href": "/restapis/o81lxisefl/gatewayresponses/BAD_REQUEST_BODY" }, { "href": "/restapis/o81lxisefl/gatewayresponses/EXPIRED_TOKEN" }, { "href": "/restapis/o81lxisefl/gatewayresponses/ACCESS_DENIED" }, { "href": "/restapis/o81lxisefl/gatewayresponses/INVALID_API_KEY" }, { "href": "/restapis/o81lxisefl/gatewayresponses/UNAUTHORIZED" }, { "href": "/restapis/o81lxisefl/gatewayresponses/API_CONFIGURATION_ERROR" }, { "href": "/restapis/o81lxisefl/gatewayresponses/QUOTA_EXCEEDED" }, { "href": "/restapis/o81lxisefl/gatewayresponses/INTEGRATION_TIMEOUT" }, { "href": "/restapis/o81lxisefl/gatewayresponses/MISSING_AUTHENTICATION_TOKEN" }, { "href": "/restapis/o81lxisefl/gatewayresponses/INVALID_SIGNATURE" }, { "href": "/restapis/o81lxisefl/gatewayresponses/AUTHORIZER_FAILURE" } ] }, "_embedded": { "item": [ { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/INTEGRATION_FAILURE" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/INTEGRATION_FAILURE" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "INTEGRATION_FAILURE", "statusCode": "504" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/RESOURCE_NOT_FOUND" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/RESOURCE_NOT_FOUND" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "RESOURCE_NOT_FOUND", "statusCode": "404" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/REQUEST_TOO_LARGE" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/REQUEST_TOO_LARGE" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "REQUEST_TOO_LARGE", "statusCode": "413" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/THROTTLED" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/THROTTLED" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "THROTTLED", "statusCode": "429" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/UNSUPPORTED_MEDIA_TYPE" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/UNSUPPORTED_MEDIA_TYPE" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "UNSUPPORTED_MEDIA_TYPE", "statusCode": "415" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/AUTHORIZER_CONFIGURATION_ERROR" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/AUTHORIZER_CONFIGURATION_ERROR" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "AUTHORIZER_CONFIGURATION_ERROR", "statusCode": "500" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/DEFAULT_5XX" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/DEFAULT_5XX" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "DEFAULT_5XX" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/DEFAULT_4XX" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/DEFAULT_4XX" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "DEFAULT_4XX" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/BAD_REQUEST_PARAMETERS" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/BAD_REQUEST_PARAMETERS" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "BAD_REQUEST_PARAMETERS", "statusCode": "400" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/BAD_REQUEST_BODY" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/BAD_REQUEST_BODY" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "BAD_REQUEST_BODY", "statusCode": "400" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/EXPIRED_TOKEN" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/EXPIRED_TOKEN" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "EXPIRED_TOKEN", "statusCode": "403" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/ACCESS_DENIED" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/ACCESS_DENIED" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "ACCESS_DENIED", "statusCode": "403" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/INVALID_API_KEY" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/INVALID_API_KEY" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "INVALID_API_KEY", "statusCode": "403" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/UNAUTHORIZED" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/UNAUTHORIZED" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "UNAUTHORIZED", "statusCode": "401" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/API_CONFIGURATION_ERROR" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/API_CONFIGURATION_ERROR" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "API_CONFIGURATION_ERROR", "statusCode": "500" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/QUOTA_EXCEEDED" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/QUOTA_EXCEEDED" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "QUOTA_EXCEEDED", "statusCode": "429" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/INTEGRATION_TIMEOUT" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/INTEGRATION_TIMEOUT" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "INTEGRATION_TIMEOUT", "statusCode": "504" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/MISSING_AUTHENTICATION_TOKEN" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/MISSING_AUTHENTICATION_TOKEN" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "MISSING_AUTHENTICATION_TOKEN", "statusCode": "403" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/INVALID_SIGNATURE" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/INVALID_SIGNATURE" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "INVALID_SIGNATURE", "statusCode": "403" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/AUTHORIZER_FAILURE" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/AUTHORIZER_FAILURE" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "AUTHORIZER_FAILURE", "statusCode": "500" } ] } }</code></pre> <p/> </div> </div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/customize-gateway-responses.html">Customize Gateway Responses</a> </div>'
    Integration:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/IntegrationType'
          description: '<p>Specifies an API method integration type. The valid value is one of the following:</p> <ul> <li><code>AWS</code>: for integrating the API method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration.</li> <li><code>AWS_PROXY</code>: for integrating the API method request with the Lambda function-invoking action with the client request passed through as-is. This integration is also referred to as the Lambda proxy integration.</li> <li><code>HTTP</code>: for integrating the API method request with an HTTP endpoint, including a private HTTP endpoint within a VPC. This integration is also referred to as the HTTP custom integration.</li> <li><code>HTTP_PROXY</code>: for integrating the API method request with an HTTP endpoint, including a private HTTP endpoint within a VPC, with the client request passed through as-is. This is also referred to as the HTTP proxy integration.</li> <li><code>MOCK</code>: for integrating the API method request with API Gateway as a "loop-back" endpoint without invoking any backend.</li> </ul> <p>For the HTTP and HTTP proxy integrations, each integration can specify a protocol (<code>http/https</code>), port and path. Standard 80 and 443 ports are supported as well as custom ports above 1024. An HTTP or HTTP proxy integration with a <code>connectionType</code> of <code>VPC_LINK</code> is referred to as a private integration and uses a <a>VpcLink</a> to connect API Gateway to a network load balancer of a VPC.</p>'
        httpMethod:
          $ref: '#/components/schemas/String'
          description: Specifies the integration's HTTP method type.
        uri:
          $ref: '#/components/schemas/String'
          description: '<p>Specifies Uniform Resource Identifier (URI) of the integration endpoint.</p> <ul> <li><p> For <code>HTTP</code> or <code>HTTP_PROXY</code> integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the <a href="https://en.wikipedia.org/wiki/Uniform_Resource_Identifier" target="_blank">RFC-3986 specification</a>, for either standard integration, where <code>connectionType</code> is not <code>VPC_LINK</code>, or private integration, where <code>connectionType</code> is <code>VPC_LINK</code>. For a private HTTP integration, the URI is not used for routing. </p> </li> <li><p> For <code>AWS</code> or <code>AWS_PROXY</code> integrations, the URI is of the form <code>arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}</code>. Here, <code>{Region}</code> is the API Gateway region (e.g., <code>us-east-1</code>); <code>{service}</code> is the name of the integrated AWS service (e.g., <code>s3</code>); and <code>{subdomain}</code> is a designated subdomain supported by certain AWS service for fast host-name lookup. <code>action</code> can be used for an AWS service action-based API, using an <code>Action={name}&amp;{p1}={v1}&amp;p2={v2}...</code> query string. The ensuing <code>{service_api}</code> refers to a supported action <code>{name}</code> plus any required input parameters. Alternatively, <code>path</code> can be used for an AWS service path-based API. The ensuing <code>service_api</code> refers to the path to an AWS service resource, including the region of the integrated AWS service, if applicable. For example, for integration with the S3 API of <code><a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectGET.html">GetObject</a></code>, the <code>uri</code> can be either <code>arn:aws:apigateway:us-west-2:s3:action/GetObject&amp;Bucket={bucket}&amp;Key={key}</code> or <code>arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</code></p> </li></ul>'
        connectionType:
          $ref: '#/components/schemas/ConnectionType'
          description: The type of the network connection to the integration endpoint. The valid value is <code>INTERNET</code> for connections through the public routable internet or <code>VPC_LINK</code> for private connections between API Gateway and a network load balancer in a VPC. The default value is <code>INTERNET</code>.
        connectionId:
          $ref: '#/components/schemas/String'
          description: 'The (<a href="https://docs.aws.amazon.com/apigateway/api-reference/resource/vpc-link/#id"><code>id</code></a>) of the <a>VpcLink</a> used for the integration when <code>connectionType=VPC_LINK</code> and undefined, otherwise.'
        credentials:
          $ref: '#/components/schemas/String'
          description: 'Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify the string <code>arn:aws:iam::\*:user/\*</code>. To use resource-based permissions on supported AWS services, specify null.'
        requestParameters:
          $ref: '#/components/schemas/MapOfStringToString'
          description: 'A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> must be a valid and unique method request parameter name.'
        requestTemplates:
          $ref: '#/components/schemas/MapOfStringToString'
          description: 'Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.'
        passthroughBehavior:
          $ref: '#/components/schemas/String'
          description: '<div> <p> Specifies how the method request body of an unmapped content type will be passed through the integration request to the back end without transformation. A content type is unmapped if no mapping template is defined in the integration or the content type does not match any of the mapped content types, as specified in <code>requestTemplates</code>. The valid value is one of the following: </p> <ul> <li> <code>WHEN_NO_MATCH</code>: passes the method request body through the integration request to the back end without transformation when the method request content type does not match any content type associated with the mapping templates defined in the integration request. </li> <li> <code>WHEN_NO_TEMPLATES</code>: passes the method request body through the integration request to the back end without transformation when no mapping template is defined in the integration request. If a template is defined when this option is selected, the method request of an unmapped content-type will be rejected with an HTTP <code>415 Unsupported Media Type</code> response. </li> <li> <code>NEVER</code>: rejects the method request with an HTTP <code>415 Unsupported Media Type</code> response when either the method request content type does not match any content type associated with the mapping templates defined in the integration request or no mapping template is defined in the integration request. </li> </ul> </div>'
        contentHandling:
          $ref: '#/components/schemas/ContentHandlingStrategy'
          description: '<p>Specifies how to handle request payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p> <ul> <li><p><code>CONVERT_TO_BINARY</code>: Converts a request payload from a Base64-encoded string to the corresponding binary blob.</p></li> <li><p><code>CONVERT_TO_TEXT</code>: Converts a request payload from a binary blob to a Base64-encoded string.</p></li> </ul> <p>If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the <code>passthroughBehavior</code> is configured to support payload pass-through.</p>'
        timeoutInMillis:
          $ref: '#/components/schemas/Integer'
          description: 'Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.'
        cacheNamespace:
          $ref: '#/components/schemas/String'
          description: 'Specifies a group of related cached parameters. By default, API Gateway uses the resource ID as the <code>cacheNamespace</code>. You can specify the same <code>cacheNamespace</code> across resources to return the same cached data for requests to different resources.'
        cacheKeyParameters:
          $ref: '#/components/schemas/ListOfString'
          description: 'A list of request parameters whose values API Gateway caches. To be valid values for <code>cacheKeyParameters</code>, these parameters must also be specified for <a>Method</a> <code>requestParameters</code>.'
        integrationResponses:
          $ref: '#/components/schemas/MapOfIntegrationResponse'
          description: '<p>Specifies the integration''s responses.</p> <div class="remarks"> <p/> <h4>Example: Get integration responses of a method</h4> <h5>Request</h5> <p/> <pre><code>GET /restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200 HTTP/1.1 Content-Type: application/json Host: apigateway.us-east-1.amazonaws.com X-Amz-Date: 20160607T191449Z Authorization: AWS4-HMAC-SHA256 Credential={access_key_ID}/20160607/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature={sig4_hash} </code></pre> <h5>Response</h5> <p>The successful response returns <code>200 OK</code> status and a payload as follows:</p> <pre><code>{ "_links": { "curies": { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-response-{rel}.html", "name": "integrationresponse", "templated": true }, "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200", "title": "200" }, "integrationresponse:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200" }, "integrationresponse:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200" } }, "responseParameters": { "method.response.header.Content-Type": "''application/xml''" }, "responseTemplates": { "application/json": "$util.urlDecode(\"%3CkinesisStreams%3E#foreach($stream in $input.path(''$.StreamNames''))%3Cstream%3E%3Cname%3E$stream%3C/name%3E%3C/stream%3E#end%3C/kinesisStreams%3E\")\n" }, "statusCode": "200" }</code></pre> <p/> </div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-create-api.html">Creating an API</a> </div>'
        tlsConfig:
          $ref: '#/components/schemas/TlsConfig'
          description: Specifies the TLS configuration for an integration.
      description: '<p>Represents an HTTP, HTTP_PROXY, AWS, AWS_PROXY, or Mock integration.</p> <div class="remarks">In the API Gateway console, the built-in Lambda integration is an AWS integration.</div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-create-api.html">Creating an API</a> </div>'
    IntegrationResponse:
      type: object
      properties:
        statusCode:
          $ref: '#/components/schemas/StatusCode'
          description: Specifies the status code that is used to map the integration response to an existing <a>MethodResponse</a>.
        selectionPattern:
          $ref: '#/components/schemas/String'
          description: 'Specifies the regular expression (regex) pattern used to choose an integration response based on the response from the back end. For example, if the success response returns nothing and the error response returns some string, you could use the <code>.+</code> regex to match error response. However, make sure that the error response does not contain any newline (<code>\n</code>) character in such cases. If the back end is an AWS Lambda function, the AWS Lambda function error header is matched. For all other HTTP and AWS back ends, the HTTP status code is matched.'
        responseParameters:
          $ref: '#/components/schemas/MapOfStringToString'
          description: 'A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> is a valid and unique response header name and <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.'
        responseTemplates:
          $ref: '#/components/schemas/MapOfStringToString'
          description: 'Specifies the templates used to transform the integration response body. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.'
        contentHandling:
          $ref: '#/components/schemas/ContentHandlingStrategy'
          description: '<p>Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p> <ul> <li><p><code>CONVERT_TO_BINARY</code>: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p></li> <li><p><code>CONVERT_TO_TEXT</code>: Converts a response payload from a binary blob to a Base64-encoded string.</p></li> </ul> <p>If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.</p>'
      description: '<p>Represents an integration response. The status code must map to an existing <a>MethodResponse</a>, and parameters and templates can be used to transform the back-end response.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-create-api.html">Creating an API</a> </div>'
    Method:
      type: object
      properties:
        httpMethod:
          $ref: '#/components/schemas/String'
          description: The method's HTTP verb.
        authorizationType:
          $ref: '#/components/schemas/String'
          description: 'The method''s authorization type. Valid values are <code>NONE</code> for open access, <code>AWS_IAM</code> for using AWS IAM permissions, <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code> for using a Cognito user pool.'
        authorizerId:
          $ref: '#/components/schemas/String'
          description: The identifier of an <a>Authorizer</a> to use on this method. The <code>authorizationType</code> must be <code>CUSTOM</code>.
        apiKeyRequired:
          $ref: '#/components/schemas/NullableBoolean'
          description: A boolean flag specifying whether a valid <a>ApiKey</a> is required to invoke this method.
        requestValidatorId:
          $ref: '#/components/schemas/String'
          description: The identifier of a <a>RequestValidator</a> for request validation.
        operationName:
          $ref: '#/components/schemas/String'
          description: 'A human-friendly operation identifier for the method. For example, you can assign the <code>operationName</code> of <code>ListPets</code> for the <code>GET /pets</code> method in the <code>PetStore</code> example.'
        requestParameters:
          $ref: '#/components/schemas/MapOfStringToBoolean'
          description: 'A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key is a method request parameter name matching the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (<code>true</code>) or optional (<code>false</code>). The method request parameter names defined here are available in <a>Integration</a> to be mapped to integration request parameters or templates.'
        requestModels:
          $ref: '#/components/schemas/MapOfStringToString'
          description: 'A key-value map specifying data schemas, represented by <a>Model</a> resources, (as the mapped value) of the request payloads of given content types (as the mapping key).'
        methodResponses:
          $ref: '#/components/schemas/MapOfMethodResponse'
          description: '<p>Gets a method response associated with a given HTTP status code. </p> <div class="remarks"> <p>The collection of method responses are encapsulated in a key-value map, where the key is a response''s HTTP status code and the value is a <a>MethodResponse</a> resource that specifies the response returned to the caller from the back end through the integration response.</p> <h4>Example: Get a 200 OK response of a GET method</h4> <h5>Request</h5> <p/> <pre><code>GET /restapis/uojnr9hd57/resources/0cjtch/methods/GET/responses/200 HTTP/1.1 Content-Type: application/json Host: apigateway.us-east-1.amazonaws.com Content-Length: 117 X-Amz-Date: 20160613T215008Z Authorization: AWS4-HMAC-SHA256 Credential={access_key_ID}/20160613/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature={sig4_hash}</code></pre> <h5>Response</h5> <p>The successful response returns a <code>200 OK</code> status code and a payload similar to the following:</p> <pre><code>{ "_links": { "curies": { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-method-response-{rel}.html", "name": "methodresponse", "templated": true }, "self": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/responses/200", "title": "200" }, "methodresponse:delete": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/responses/200" }, "methodresponse:update": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/responses/200" } }, "responseModels": { "application/json": "Empty" }, "responseParameters": { "method.response.header.operator": false, "method.response.header.operand_2": false, "method.response.header.operand_1": false }, "statusCode": "200" }</code></pre> <p/> </div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/get-method-response.html">AWS CLI</a> </div>'
        methodIntegration:
          $ref: '#/components/schemas/Integration'
          description: '<p>Gets the method''s integration responsible for passing the client-submitted request to the back end and performing necessary transformations to make the request compliant with the back end.</p> <div class="remarks"> <p/> <h4>Example: </h4> <h5>Request</h5> <p/> <pre><code>GET /restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration HTTP/1.1 Content-Type: application/json Host: apigateway.us-east-1.amazonaws.com Content-Length: 117 X-Amz-Date: 20160613T213210Z Authorization: AWS4-HMAC-SHA256 Credential={access_key_ID}/20160613/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature={sig4_hash}</code></pre> <h5>Response</h5> <p>The successful response returns a <code>200 OK</code> status code and a payload similar to the following:</p> <pre><code>{ "_links": { "curies": [ { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-{rel}.html", "name": "integration", "templated": true }, { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-response-{rel}.html", "name": "integrationresponse", "templated": true } ], "self": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration" }, "integration:delete": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration" }, "integration:responses": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration/responses/200", "name": "200", "title": "200" }, "integration:update": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration" }, "integrationresponse:put": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration/responses/{status_code}", "templated": true } }, "cacheKeyParameters": [], "cacheNamespace": "0cjtch", "credentials": "arn:aws:iam::123456789012:role/apigAwsProxyRole", "httpMethod": "POST", "passthroughBehavior": "WHEN_NO_MATCH", "requestTemplates": { "application/json": "{\n \"a\": \"$input.params(''operand1'')\",\n \"b\": \"$input.params(''operand2'')\", \n \"op\": \"$input.params(''operator'')\" \n}" }, "type": "AWS", "uri": "arn:aws:apigateway:us-west-2:lambda:path//2015-03-31/functions/arn:aws:lambda:us-west-2:123456789012:function:Calc/invocations", "_embedded": { "integration:responses": { "_links": { "self": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration/responses/200", "name": "200", "title": "200" }, "integrationresponse:delete": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration/responses/200" }, "integrationresponse:update": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration/responses/200" } }, "responseParameters": { "method.response.header.operator": "integration.response.body.op", "method.response.header.operand_2": "integration.response.body.b", "method.response.header.operand_1": "integration.response.body.a" }, "responseTemplates": { "application/json": "#set($res = $input.path(''$''))\n{\n \"result\": \"$res.a, $res.b, $res.op => $res.c\",\n \"a\" : \"$res.a\",\n \"b\" : \"$res.b\",\n \"op\" : \"$res.op\",\n \"c\" : \"$res.c\"\n}" }, "selectionPattern": "", "statusCode": "200" } } }</code></pre> <p/> </div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/get-integration.html">AWS CLI</a> </div>'
        authorizationScopes:
          $ref: '#/components/schemas/ListOfString'
          description: 'A list of authorization scopes configured on the method. The scopes are used with a <code>COGNITO_USER_POOLS</code> authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.'
      description: '<p> Represents a client-facing interface by which the client calls the API to access back-end resources. A <b>Method</b> resource is integrated with an <a>Integration</a> resource. Both consist of a request and one or more responses. The method request takes the client input that is passed to the back end through the integration request. A method response returns the output from the back end to the client through an integration response. A method request is embodied in a <b>Method</b> resource, whereas an integration request is embodied in an <a>Integration</a> resource. On the other hand, a method response is represented by a <a>MethodResponse</a> resource, whereas an integration response is represented by an <a>IntegrationResponse</a> resource. </p> <div class="remarks"> <p/> <h4>Example: Retrive the GET method on a specified resource</h4> <h5>Request</h5> <p>The following example request retrieves the information about the GET method on an API resource (<code>3kzxbg5sa2</code>) of an API (<code>fugvjdxtri</code>). </p> <pre><code>GET /restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET HTTP/1.1 Content-Type: application/json Host: apigateway.us-east-1.amazonaws.com X-Amz-Date: 20160603T210259Z Authorization: AWS4-HMAC-SHA256 Credential={access_key_ID}/20160603/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature={sig4_hash}</code></pre> <h5>Response</h5> <p>The successful response returns a <code>200 OK</code> status code and a payload similar to the following:</p> <pre><code>{ "_links": { "curies": [ { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-{rel}.html", "name": "integration", "templated": true }, { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-response-{rel}.html", "name": "integrationresponse", "templated": true }, { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-method-{rel}.html", "name": "method", "templated": true }, { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-method-response-{rel}.html", "name": "methodresponse", "templated": true } ], "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET", "name": "GET", "title": "GET" }, "integration:put": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "method:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET" }, "method:integration": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "method:responses": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200", "name": "200", "title": "200" }, "method:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET" }, "methodresponse:put": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/{status_code}", "templated": true } }, "apiKeyRequired": true, "authorizationType": "NONE", "httpMethod": "GET", "_embedded": { "method:integration": { "_links": { "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "integration:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "integration:responses": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200", "name": "200", "title": "200" }, "integration:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "integrationresponse:put": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/{status_code}", "templated": true } }, "cacheKeyParameters": [], "cacheNamespace": "3kzxbg5sa2", "credentials": "arn:aws:iam::123456789012:role/apigAwsProxyRole", "httpMethod": "POST", "passthroughBehavior": "WHEN_NO_MATCH", "requestParameters": { "integration.request.header.Content-Type": "''application/x-amz-json-1.1''" }, "requestTemplates": { "application/json": "{\n}" }, "type": "AWS", "uri": "arn:aws:apigateway:us-east-1:kinesis:action/ListStreams", "_embedded": { "integration:responses": { "_links": { "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200", "name": "200", "title": "200" }, "integrationresponse:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200" }, "integrationresponse:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200" } }, "responseParameters": { "method.response.header.Content-Type": "''application/xml''" }, "responseTemplates": { "application/json": "$util.urlDecode(\"%3CkinesisStreams%3E%23foreach(%24stream%20in%20%24input.path(%27%24.StreamNames%27))%3Cstream%3E%3Cname%3E%24stream%3C%2Fname%3E%3C%2Fstream%3E%23end%3C%2FkinesisStreams%3E\")" }, "statusCode": "200" } } }, "method:responses": { "_links": { "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200", "name": "200", "title": "200" }, "methodresponse:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200" }, "methodresponse:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200" } }, "responseModels": { "application/json": "Empty" }, "responseParameters": { "method.response.header.Content-Type": false }, "statusCode": "200" } } }</code></pre> <p>In the example above, the response template for the <code>200 OK</code> response maps the JSON output from the <code>ListStreams</code> action in the back end to an XML output. The mapping template is URL-encoded as <code>%3CkinesisStreams%3E%23foreach(%24stream%20in%20%24input.path(%27%24.StreamNames%27))%3Cstream%3E%3Cname%3E%24stream%3C%2Fname%3E%3C%2Fstream%3E%23end%3C%2FkinesisStreams%3E</code> and the output is decoded using the <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html#util-templat-reference">$util.urlDecode()</a> helper function.</p> </div> <div class="seeAlso"> <a>MethodResponse</a>, <a>Integration</a>, <a>IntegrationResponse</a>, <a>Resource</a>, <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-method-settings.html">Set up an API''s method</a> </div>'
    MethodResponse:
      type: object
      properties:
        statusCode:
          $ref: '#/components/schemas/StatusCode'
          description: The method response's status code.
        responseParameters:
          $ref: '#/components/schemas/MapOfStringToBoolean'
          description: 'A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header and the value specifies whether the associated method response header is required or not. The expression of the key must match the pattern <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. API Gateway passes certain integration response data to the method response headers specified here according to the mapping you prescribe in the API''s <a>IntegrationResponse</a>. The integration response data that can be mapped include an integration response header expressed in <code>integration.response.header.{name}</code>, a static value enclosed within a pair of single quotes (e.g., <code>''application/json''</code>), or a JSON expression from the back-end response payload in the form of <code>integration.response.body.{JSON-expression}</code>, where <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.)'
        responseModels:
          $ref: '#/components/schemas/MapOfStringToString'
          description: 'Specifies the <a>Model</a> resources used for the response''s content-type. Response models are represented as a key/value map, with a content-type as the key and a <a>Model</a> name as the value.'
      description: '<p>Represents a method response of a given HTTP status code returned to the client. The method response is passed from the back end through the associated integration response that can be transformed using a mapping template. </p> <div class="remarks"> <p/> <h4>Example: A <b>MethodResponse</b> instance of an API</h4> <h5>Request</h5> <p>The example request retrieves a <b>MethodResponse</b> of the 200 status code.</p> <pre><code>GET /restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200 HTTP/1.1 Content-Type: application/json Host: apigateway.us-east-1.amazonaws.com X-Amz-Date: 20160603T222952Z Authorization: AWS4-HMAC-SHA256 Credential={access_key_ID}/20160603/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature={sig4_hash}</code></pre> <h5>Response</h5> <p>The successful response returns <code>200 OK</code> status and a payload as follows:</p> <pre><code>{ "_links": { "curies": { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-method-response-{rel}.html", "name": "methodresponse", "templated": true }, "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200", "title": "200" }, "methodresponse:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200" }, "methodresponse:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200" } }, "responseModels": { "application/json": "Empty" }, "responseParameters": { "method.response.header.Content-Type": false }, "statusCode": "200" }</code></pre> <p/> </div> <div class="seeAlso"> <a>Method</a>, <a>IntegrationResponse</a>, <a>Integration</a> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-create-api.html">Creating an API</a> </div>'
    Template:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/String'
          description: 'The Apache <a href="https://velocity.apache.org/engine/devel/vtl-reference.html" target="_blank">Velocity Template Language (VTL)</a> template content used for the template resource.'
      description: '<p>Represents a mapping template used to transform a payload.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/models-mappings.html#models-mappings-mappings">Mapping Templates</a> </div>'
    Models:
      type: object
      properties:
        position:
          $ref: '#/components/schemas/String'
        items:
          allOf:
            - $ref: '#/components/schemas/ListOfModel'
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: '<p>Represents a collection of <a>Model</a> resources.</p> <div class="seeAlso"> <a>Method</a>, <a>MethodResponse</a>, <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/models-mappings.html">Models and Mappings</a> </div>'
    RequestValidators:
      type: object
      properties:
        position:
          $ref: '#/components/schemas/String'
        items:
          allOf:
            - $ref: '#/components/schemas/ListOfRequestValidator'
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: '<p>A collection of <a>RequestValidator</a> resources of a given <a>RestApi</a>.</p> <div class="remarks"> <p>In OpenAPI, the <a>RequestValidators</a> of an API is defined by the <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html#api-gateway-swagger-extensions-request-validators.html">x-amazon-apigateway-request-validators</a> extension.</p> </div> <div class="seeAlso"><a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-method-request-validation.html">Enable Basic Request Validation in API Gateway</a></div>'
    Resources:
      type: object
      properties:
        position:
          $ref: '#/components/schemas/String'
        items:
          allOf:
            - $ref: '#/components/schemas/ListOfResource'
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: '<p>Represents a collection of <a>Resource</a> resources.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-create-api.html">Create an API</a> </div>'
    RestApis:
      type: object
      properties:
        position:
          $ref: '#/components/schemas/String'
        items:
          allOf:
            - $ref: '#/components/schemas/ListOfRestApi'
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: '<p>Contains references to your APIs and links that guide you in how to interact with your collection. A collection offers a paginated view of your APIs.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-create-api.html">Create an API</a> </div>'
    SdkResponse:
      type: object
      properties:
        body:
          $ref: '#/components/schemas/Blob'
          description: 'The binary blob response to <a>GetSdk</a>, which contains the generated SDK.'
      description: 'The binary blob response to <a>GetSdk</a>, which contains the generated SDK.'
    SdkType:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/String'
          description: The identifier of an <a>SdkType</a> instance.
        friendlyName:
          $ref: '#/components/schemas/String'
          description: The user-friendly name of an <a>SdkType</a> instance.
        description:
          $ref: '#/components/schemas/String'
          description: The description of an <a>SdkType</a>.
        configurationProperties:
          $ref: '#/components/schemas/ListOfSdkConfigurationProperty'
          description: A list of configuration properties of an <a>SdkType</a>.
      description: A type of SDK that API Gateway can generate.
    SdkTypes:
      type: object
      properties:
        position:
          $ref: '#/components/schemas/String'
        items:
          allOf:
            - $ref: '#/components/schemas/ListOfSdkType'
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: The collection of <a>SdkType</a> instances.
    Stages:
      type: object
      properties:
        item:
          $ref: '#/components/schemas/ListOfStage'
          description: The current page of elements from this collection.
      description: '<p>A list of <a>Stage</a> resources that are associated with the <a>ApiKey</a> resource.</p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/stages.html">Deploying API in Stages</a></div>'
    Tags:
      type: object
      properties:
        tags:
          $ref: '#/components/schemas/MapOfStringToString'
          description: The collection of tags. Each tag element is associated with a given resource.
      description: The collection of tags. Each tag element is associated with a given resource.
    Usage:
      type: object
      properties:
        usagePlanId:
          $ref: '#/components/schemas/String'
          description: The plan Id associated with this usage data.
        startDate:
          $ref: '#/components/schemas/String'
          description: The starting date of the usage data.
        endDate:
          $ref: '#/components/schemas/String'
          description: The ending date of the usage data.
        position:
          $ref: '#/components/schemas/String'
        items:
          allOf:
            - $ref: '#/components/schemas/MapOfKeyUsages'
            - xml:
                name: values
              description: 'The usage data, as daily logs of used and remaining quotas, over the specified time interval indexed over the API keys in a usage plan. For example, <code>{..., "values" : { "{api_key}" : [ [0, 100], [10, 90], [100, 10]]}</code>, where <code>{api_key}</code> stands for an API key value and the daily log entry is of the format <code>[used quota, remaining quota]</code>.'
      description: '<p>Represents the usage data of a usage plan.</p> <div class="remarks"/> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-usage-plans.html">Create and Use Usage Plans</a>, <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-usage-plans-with-console.html#api-gateway-usage-plan-manage-usage">Manage Usage in a Usage Plan</a> </div>'
    UsagePlanKeys:
      type: object
      properties:
        position:
          $ref: '#/components/schemas/String'
        items:
          allOf:
            - $ref: '#/components/schemas/ListOfUsagePlanKey'
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: '<p>Represents the collection of usage plan keys added to usage plans for the associated API keys and, possibly, other types of keys.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-usage-plans.html">Create and Use Usage Plans</a> </div>'
    UsagePlans:
      type: object
      properties:
        position:
          $ref: '#/components/schemas/String'
        items:
          allOf:
            - $ref: '#/components/schemas/ListOfUsagePlan'
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: '<p>Represents a collection of usage plans for an AWS account.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-usage-plans.html">Create and Use Usage Plans</a> </div>'
    VpcLinks:
      type: object
      properties:
        position:
          $ref: '#/components/schemas/String'
        items:
          allOf:
            - $ref: '#/components/schemas/ListOfVpcLink'
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: '<p>The collection of VPC links under the caller''s account in a region.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started-with-private-integration.html">Getting Started with Private Integrations</a>, <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-private-integration.html">Set up Private Integrations</a> </div>'
    ApiKeyIds:
      type: object
      properties:
        ids:
          $ref: '#/components/schemas/ListOfString'
          description: A list of all the <a>ApiKey</a> identifiers.
        warnings:
          $ref: '#/components/schemas/ListOfString'
          description: A list of warning messages.
      description: The identifier of an <a>ApiKey</a> used in a <a>UsagePlan</a>.
    DocumentationPartIds:
      type: object
      properties:
        ids:
          $ref: '#/components/schemas/ListOfString'
          description: A list of the returned documentation part identifiers.
        warnings:
          $ref: '#/components/schemas/ListOfString'
          description: A list of warning messages reported during import of documentation parts.
      description: '<p>A collection of the imported <a>DocumentationPart</a> identifiers.</p> <div class="remarks">This is used to return the result when documentation parts in an external (e.g., OpenAPI) file are imported into API Gateway</div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-documenting-api.html">Documenting an API</a>, <a href="https://docs.aws.amazon.com/apigateway/api-reference/link-relation/documentationpart-import/">documentationpart:import</a>, <a>DocumentationPart</a> </div>'
    NullableBoolean:
      type: boolean
    TestInvokeAuthorizerResponse:
      type: object
      properties:
        clientStatus:
          $ref: '#/components/schemas/Integer'
          description: The HTTP status code that the client would have received. Value is 0 if the authorizer succeeded.
        log:
          $ref: '#/components/schemas/String'
          description: The API Gateway execution log for the test authorizer request.
        latency:
          $ref: '#/components/schemas/Long'
          description: The execution latency of the test authorizer request.
        principalId:
          $ref: '#/components/schemas/String'
          description: The principal identity returned by the <a>Authorizer</a>
        policy:
          $ref: '#/components/schemas/String'
          description: The JSON policy document returned by the <a>Authorizer</a>
        authorization:
          $ref: '#/components/schemas/MapOfStringToList'
        claims:
          $ref: '#/components/schemas/MapOfStringToString'
          description: 'The <a href="https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims">open identity claims</a>, with any supported custom attributes, returned from the Cognito Your User Pool configured for the API.'
      description: Represents the response of the test invoke request for a custom <a>Authorizer</a>
    TestInvokeMethodResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Integer'
          description: The HTTP status code.
        body:
          $ref: '#/components/schemas/String'
          description: The body of the HTTP response.
        headers:
          $ref: '#/components/schemas/MapOfStringToString'
          description: The headers of the HTTP response.
        multiValueHeaders:
          $ref: '#/components/schemas/MapOfStringToList'
          description: The headers of the HTTP response as a map from string to list of values.
        log:
          $ref: '#/components/schemas/String'
          description: The API Gateway execution log for the test invoke request.
        latency:
          $ref: '#/components/schemas/Long'
          description: The execution latency of the test invoke request.
      description: '<p>Represents the response of the test invoke request in the HTTP method.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-test-method.html#how-to-test-method-console">Test API using the API Gateway console</a> </div>'
    PatchOperation:
      type: object
      properties:
        op:
          $ref: '#/components/schemas/Op'
          description: ' An update operation to be performed with this PATCH request. The valid value can be <code>add</code>, <code>remove</code>, <code>replace</code> or <code>copy</code>. Not all valid operations are supported for a given resource. Support of the operations depends on specific operational contexts. Attempts to apply an unsupported operation on a resource will return an error message.'
        path:
          $ref: '#/components/schemas/String'
          description: 'The <code>op</code> operation''s target, as identified by a <a href="https://tools.ietf.org/html/draft-ietf-appsawg-json-pointer-08">JSON Pointer</a> value that references a location within the targeted resource. For example, if the target resource has an updateable property of <code>{"name":"value"}</code>, the path for this property is <code>/name</code>. If the <code>name</code> property value is a JSON object (e.g., <code>{"name": {"child/name": "child-value"}}</code>), the path for the <code>child/name</code> property will be <code>/name/child~1name</code>. Any slash ("/") character appearing in path names must be escaped with "~1", as shown in the example above. Each <code>op</code> operation can have only one <code>path</code> associated with it.'
        value:
          $ref: '#/components/schemas/String'
          description: 'The new target value of the update operation. It is applicable for the <code>add</code> or <code>replace</code> operation. When using AWS CLI to update a property of a JSON value, enclose the JSON object with a pair of single quotes in a Linux shell, e.g., ''{"a": ...}''. In a Windows shell, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-using-param.html#cli-using-param-json">Using JSON for Parameters</a>.'
        from:
          $ref: '#/components/schemas/String'
          description: 'The <code>copy</code> update operation''s source as identified by a <code>JSON-Pointer</code> value referencing the location within the targeted resource to copy the value from. For example, to promote a canary deployment, you copy the canary deployment ID to the affiliated deployment ID by calling a PATCH request on a <a>Stage</a> resource with <code>"op":"copy"</code>, <code>"from":"/canarySettings/deploymentId"</code> and <code>"path":"/deploymentId"</code>.'
      description: 'A single patch operation to apply to the specified resource. Please refer to http://tools.ietf.org/html/rfc6902#section-4 for an explanation of how each operation is used.'
    AccessLogSettings:
      type: object
      properties:
        format:
          $ref: '#/components/schemas/String'
          description: 'A single line format of the access logs of data, as specified by selected <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html#context-variable-reference">$context variables</a>. The format must include at least <code>$context.requestId</code>.'
        destinationArn:
          $ref: '#/components/schemas/String'
          description: 'The Amazon Resource Name (ARN) of the CloudWatch Logs log group or Kinesis Data Firehose delivery stream to receive access logs. If you specify a Kinesis Data Firehose delivery stream, the stream name must begin with <code>amazon-apigateway-</code>.'
      description: 'Access log settings, including the access log format and access log destination ARN.'
    ThrottleSettings:
      type: object
      properties:
        burstLimit:
          $ref: '#/components/schemas/Integer'
          description: 'The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.'
        rateLimit:
          $ref: '#/components/schemas/Double'
          description: The API request steady-state rate limit.
      description: ' The API request rate limits.'
    Timestamp:
      type: string
      format: date-time
    ApiKeySourceType:
      type: string
      enum:
        - HEADER
        - AUTHORIZER
    ListOfApiKey:
      type: array
      items:
        $ref: '#/components/schemas/ApiKey'
    ApiKeysFormat:
      type: string
      enum:
        - csv
    MapOfApiStageThrottleSettings:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ThrottleSettings'
    AuthorizerType:
      type: string
      enum:
        - TOKEN
        - REQUEST
        - COGNITO_USER_POOLS
      description: 'The authorizer type. Valid values are <code>TOKEN</code> for a Lambda function using a single authorization token submitted in a custom header, <code>REQUEST</code> for a Lambda function using incoming request parameters, and <code>COGNITO_USER_POOLS</code> for using an Amazon Cognito user pool.'
    ListOfARNs:
      type: array
      items:
        $ref: '#/components/schemas/ProviderARN'
    NullableInteger:
      type: integer
    ListOfAuthorizer:
      type: array
      items:
        $ref: '#/components/schemas/Authorizer'
    ListOfBasePathMapping:
      type: array
      items:
        $ref: '#/components/schemas/BasePathMapping'
    Blob:
      type: string
    CacheClusterSize:
      type: string
      enum:
        - '0.5'
        - '1.6'
        - '6.1'
        - '13.5'
        - '28.4'
        - '58.2'
        - '118'
        - '237'
      description: Returns the size of the <b>CacheCluster</b>.
    CacheClusterStatus:
      type: string
      enum:
        - CREATE_IN_PROGRESS
        - AVAILABLE
        - DELETE_IN_PROGRESS
        - NOT_AVAILABLE
        - FLUSH_IN_PROGRESS
      description: Returns the status of the <b>CacheCluster</b>.
    CanarySettings:
      type: object
      properties:
        percentTraffic:
          $ref: '#/components/schemas/Double'
          description: The percent (0-100) of traffic diverted to a canary deployment.
        deploymentId:
          $ref: '#/components/schemas/String'
          description: The ID of the canary deployment.
        stageVariableOverrides:
          $ref: '#/components/schemas/MapOfStringToString'
          description: 'Stage variables overridden for a canary release deployment, including new stage variables introduced in the canary. These stage variables are represented as a string-to-string map between stage variable names and their values.'
        useStageCache:
          $ref: '#/components/schemas/Boolean'
          description: A Boolean flag to indicate whether the canary deployment uses the stage cache or not.
      description: Configuration settings of a canary deployment.
    ListOfClientCertificate:
      type: array
      items:
        $ref: '#/components/schemas/ClientCertificate'
    ConnectionType:
      type: string
      enum:
        - INTERNET
        - VPC_LINK
    ContentHandlingStrategy:
      type: string
      enum:
        - CONVERT_TO_BINARY
        - CONVERT_TO_TEXT
    ListOfStageKeys:
      type: array
      items:
        $ref: '#/components/schemas/StageKey'
    CreateApiKeyRequest:
      type: object
      title: CreateApiKeyRequest
      properties:
        name:
          $ref: '#/components/schemas/String'
          description: The name of the <a>ApiKey</a>.
        description:
          $ref: '#/components/schemas/String'
          description: The description of the <a>ApiKey</a>.
        enabled:
          $ref: '#/components/schemas/Boolean'
          description: Specifies whether the <a>ApiKey</a> can be used by callers.
        generateDistinctId:
          $ref: '#/components/schemas/Boolean'
          description: Specifies whether (<code>true</code>) or not (<code>false</code>) the key identifier is distinct from the created API key value. This parameter is deprecated and should not be used.
        value:
          $ref: '#/components/schemas/String'
          description: Specifies a value of the API key.
        stageKeys:
          $ref: '#/components/schemas/ListOfStageKeys'
          description: DEPRECATED FOR USAGE PLANS - Specifies stages associated with the API key.
        customerId:
          $ref: '#/components/schemas/String'
          description: 'An AWS Marketplace customer identifier , when integrating with the AWS SaaS Marketplace.'
        tags:
          $ref: '#/components/schemas/MapOfStringToString'
          description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.'
      description: Request to create an <a>ApiKey</a> resource.
    CreateAuthorizerRequest:
      type: object
      required:
        - name
        - type
      title: CreateAuthorizerRequest
      properties:
        name:
          $ref: '#/components/schemas/String'
          description: '[Required] The name of the authorizer.'
        type:
          $ref: '#/components/schemas/AuthorizerType'
          description: '[Required] The authorizer type. Valid values are <code>TOKEN</code> for a Lambda function using a single authorization token submitted in a custom header, <code>REQUEST</code> for a Lambda function using incoming request parameters, and <code>COGNITO_USER_POOLS</code> for using an Amazon Cognito user pool.'
        providerARNs:
          $ref: '#/components/schemas/ListOfARNs'
          description: 'A list of the Amazon Cognito user pool ARNs for the <code>COGNITO_USER_POOLS</code> authorizer. Each element is of this format: <code>arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}</code>. For a <code>TOKEN</code> or <code>REQUEST</code> authorizer, this is not defined.'
        authType:
          $ref: '#/components/schemas/String'
          description: 'Optional customer-defined field, used in OpenAPI imports and exports without functional impact.'
        authorizerUri:
          $ref: '#/components/schemas/String'
          description: 'Specifies the authorizer''s Uniform Resource Identifier (URI). For <code>TOKEN</code> or <code>REQUEST</code> authorizers, this must be a well-formed Lambda function URI, for example, <code>arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations</code>. In general, the URI has this form <code>arn:aws:apigateway:{region}:lambda:path/{service_api}</code>, where <code>{region}</code> is the same as the region hosting the Lambda function, <code>path</code> indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial <code>/</code>. For Lambda functions, this is usually of the form <code>/2015-03-31/functions/[FunctionARN]/invocations</code>.'
        authorizerCredentials:
          $ref: '#/components/schemas/String'
          description: 'Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.'
        identitySource:
          $ref: '#/components/schemas/String'
          description: 'The identity source for which authorization is requested. <ul><li>For a <code>TOKEN</code> or <code>COGNITO_USER_POOLS</code> authorizer, this is required and specifies the request header mapping expression for the custom header holding the authorization token submitted by the client. For example, if the token header name is <code>Auth</code>, the header mapping expression is <code>method.request.header.Auth</code>.</li><li>For the <code>REQUEST</code> authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an <code>Auth</code> header, a <code>Name</code> query string parameter are defined as identity sources, this value is <code>method.request.header.Auth, method.request.querystring.Name</code>. These parameters will be used to derive the authorization caching key and to perform runtime validation of the <code>REQUEST</code> authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.</li></ul>'
        identityValidationExpression:
          $ref: '#/components/schemas/String'
          description: 'A validation expression for the incoming identity token. For <code>TOKEN</code> authorizers, this value is a regular expression. For <code>COGNITO_USER_POOLS</code> authorizers, API Gateway will match the <code>aud</code> field of the incoming token from the client against the specified regular expression. It will invoke the authorizer''s Lambda function when there is a match. Otherwise, it will return a 401 Unauthorized response without calling the Lambda function. The validation expression does not apply to the <code>REQUEST</code> authorizer.'
        authorizerResultTtlInSeconds:
          $ref: '#/components/schemas/NullableInteger'
          description: 'The TTL in seconds of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.'
      description: Request to add a new <a>Authorizer</a> to an existing <a>RestApi</a> resource.
    CreateBasePathMappingRequest:
      type: object
      required:
        - restApiId
      title: CreateBasePathMappingRequest
      properties:
        basePath:
          $ref: '#/components/schemas/String'
          description: The base path name that callers of the API must provide as part of the URL after the domain name. This value must be unique for all of the mappings across a single API. Specify '(none)' if you do not want callers to specify a base path name after the domain name.
        restApiId:
          $ref: '#/components/schemas/String'
          description: '[Required] The string identifier of the associated <a>RestApi</a>.'
        stage:
          $ref: '#/components/schemas/String'
          description: The name of the API's stage that you want to use for this mapping. Specify '(none)' if you want callers to explicitly specify the stage name after any base path name.
      description: Requests API Gateway to create a new <a>BasePathMapping</a> resource.
    DeploymentCanarySettings:
      type: object
      properties:
        percentTraffic:
          $ref: '#/components/schemas/Double'
          description: The percentage (0.0-100.0) of traffic routed to the canary deployment.
        stageVariableOverrides:
          $ref: '#/components/schemas/MapOfStringToString'
          description: A stage variable overrides used for the canary release deployment. They can override existing stage variables or add new stage variables for the canary release deployment. These stage variables are represented as a string-to-string map between stage variable names and their values.
        useStageCache:
          $ref: '#/components/schemas/Boolean'
          description: A Boolean flag to indicate whether the canary release deployment uses the stage cache or not.
      description: The input configuration for a canary deployment.
    CreateDeploymentRequest:
      type: object
      title: CreateDeploymentRequest
      properties:
        stageName:
          $ref: '#/components/schemas/String'
          description: The name of the <a>Stage</a> resource for the <a>Deployment</a> resource to create.
        stageDescription:
          $ref: '#/components/schemas/String'
          description: The description of the <a>Stage</a> resource for the <a>Deployment</a> resource to create.
        description:
          $ref: '#/components/schemas/String'
          description: The description for the <a>Deployment</a> resource to create.
        cacheClusterEnabled:
          $ref: '#/components/schemas/NullableBoolean'
          description: Enables a cache cluster for the <a>Stage</a> resource specified in the input.
        cacheClusterSize:
          $ref: '#/components/schemas/CacheClusterSize'
          description: 'Specifies the cache cluster size for the <a>Stage</a> resource specified in the input, if a cache cluster is enabled.'
        variables:
          $ref: '#/components/schemas/MapOfStringToString'
          description: 'A map that defines the stage variables for the <a>Stage</a> resource that is associated with the new deployment. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>.'
        canarySettings:
          $ref: '#/components/schemas/DeploymentCanarySettings'
          description: 'The input configuration for the canary deployment when the deployment is a canary release deployment. '
        tracingEnabled:
          $ref: '#/components/schemas/NullableBoolean'
          description: Specifies whether active tracing with X-ray is enabled for the <a>Stage</a>.
      description: Requests API Gateway to create a <a>Deployment</a> resource.
    DocumentationPartLocation:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/DocumentationPartType'
          description: '[Required] The type of API entity to which the documentation content applies. Valid values are <code>API</code>, <code>AUTHORIZER</code>, <code>MODEL</code>, <code>RESOURCE</code>, <code>METHOD</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>, <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. Content inheritance does not apply to any entity of the <code>API</code>, <code>AUTHORIZER</code>, <code>METHOD</code>, <code>MODEL</code>, <code>REQUEST_BODY</code>, or <code>RESOURCE</code> type.'
        path:
          $ref: '#/components/schemas/String'
          description: 'The URL path of the target. It is a valid field for the API entity types of <code>RESOURCE</code>, <code>METHOD</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>, <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. The default value is <code>/</code> for the root resource. When an applicable child entity inherits the content of another entity of the same type with more general specifications of the other <code>location</code> attributes, the child entity''s <code>path</code> attribute must match that of the parent entity as a prefix.'
        method:
          $ref: '#/components/schemas/String'
          description: 'The HTTP verb of a method. It is a valid field for the API entity types of <code>METHOD</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>, <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. The default value is <code>*</code> for any method. When an applicable child entity inherits the content of an entity of the same type with more general specifications of the other <code>location</code> attributes, the child entity''s <code>method</code> attribute must match that of the parent entity exactly.'
        statusCode:
          $ref: '#/components/schemas/DocumentationPartLocationStatusCode'
          description: 'The HTTP status code of a response. It is a valid field for the API entity types of <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. The default value is <code>*</code> for any status code. When an applicable child entity inherits the content of an entity of the same type with more general specifications of the other <code>location</code> attributes, the child entity''s <code>statusCode</code> attribute must match that of the parent entity exactly.'
        name:
          $ref: '#/components/schemas/String'
          description: 'The name of the targeted API entity. It is a valid and required field for the API entity types of <code>AUTHORIZER</code>, <code>MODEL</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code> and <code>RESPONSE_HEADER</code>. It is an invalid field for any other entity type.'
      description: Specifies the target API entity to which the documentation applies.
    CreateDocumentationPartRequest:
      type: object
      required:
        - location
        - properties
      title: CreateDocumentationPartRequest
      properties:
        location:
          $ref: '#/components/schemas/DocumentationPartLocation'
          description: '[Required] The location of the targeted API entity of the to-be-created documentation part.'
        properties:
          description: '[Required] The new documentation content map of the targeted API entity. Enclosed key-value pairs are API-specific, but only OpenAPI-compliant key-value pairs can be exported and, hence, published.'
      description: Creates a new documentation part of a given API.
    CreateDocumentationVersionRequest:
      type: object
      required:
        - documentationVersion
      title: CreateDocumentationVersionRequest
      properties:
        documentationVersion:
          $ref: '#/components/schemas/String'
          description: '[Required] The version identifier of the new snapshot.'
        stageName:
          $ref: '#/components/schemas/String'
          description: The stage name to be associated with the new documentation snapshot.
        description:
          $ref: '#/components/schemas/String'
          description: A description about the new documentation snapshot.
      description: Creates a new documentation version of a given API.
    EndpointConfiguration:
      type: object
      properties:
        types:
          $ref: '#/components/schemas/ListOfEndpointType'
          description: 'A list of endpoint types of an API (<a>RestApi</a>) or its custom domain name (<a>DomainName</a>). For an edge-optimized API and its custom domain name, the endpoint type is <code>"EDGE"</code>. For a regional API and its custom domain name, the endpoint type is <code>REGIONAL</code>. For a private API, the endpoint type is <code>PRIVATE</code>.'
        vpcEndpointIds:
          $ref: '#/components/schemas/ListOfString'
          description: A list of VpcEndpointIds of an API (<a>RestApi</a>) against which to create Route53 ALIASes. It is only supported for <code>PRIVATE</code> endpoint type.
      description: 'The endpoint configuration to indicate the types of endpoints an API (<a>RestApi</a>) or its custom domain name (<a>DomainName</a>) has. '
    SecurityPolicy:
      type: string
      enum:
        - TLS_1_0
        - TLS_1_2
    MutualTlsAuthenticationInput:
      type: object
      properties:
        truststoreUri:
          $ref: '#/components/schemas/String'
          description: 'An Amazon S3 resource ARN that specifies the truststore for mutual TLS authentication, for example, <code>s3://bucket-name/key-name</code>. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.'
        truststoreVersion:
          $ref: '#/components/schemas/String'
          description: 'The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket.'
      description: 'If specified, API Gateway performs two-way authentication between the client and the server. Clients must present a trusted certificate to access your custom domain name.'
    CreateDomainNameRequest:
      type: object
      required:
        - domainName
      title: CreateDomainNameRequest
      properties:
        domainName:
          $ref: '#/components/schemas/String'
          description: '[Required] The name of the <a>DomainName</a> resource.'
        certificateName:
          $ref: '#/components/schemas/String'
          description: The user-friendly name of the certificate that will be used by edge-optimized endpoint for this domain name.
        certificateBody:
          $ref: '#/components/schemas/String'
          description: '[Deprecated] The body of the server certificate that will be used by edge-optimized endpoint for this domain name provided by your certificate authority.'
        certificatePrivateKey:
          $ref: '#/components/schemas/String'
          description: '[Deprecated] Your edge-optimized endpoint''s domain name certificate''s private key.'
        certificateChain:
          $ref: '#/components/schemas/String'
          description: '[Deprecated] The intermediate certificates and optionally the root certificate, one after the other without any blank lines, used by an edge-optimized endpoint for this domain name. If you include the root certificate, your certificate chain must start with intermediate certificates and end with the root certificate. Use the intermediate certificates that were provided by your certificate authority. Do not include any intermediaries that are not in the chain of trust path.'
        certificateArn:
          $ref: '#/components/schemas/String'
          description: The reference to an AWS-managed certificate that will be used by edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.
        regionalCertificateName:
          $ref: '#/components/schemas/String'
          description: The user-friendly name of the certificate that will be used by regional endpoint for this domain name.
        regionalCertificateArn:
          $ref: '#/components/schemas/String'
          description: The reference to an AWS-managed certificate that will be used by regional endpoint for this domain name. AWS Certificate Manager is the only supported source.
        endpointConfiguration:
          $ref: '#/components/schemas/EndpointConfiguration'
          description: The endpoint configuration of this <a>DomainName</a> showing the endpoint types of the domain name.
        tags:
          $ref: '#/components/schemas/MapOfStringToString'
          description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.'
        securityPolicy:
          $ref: '#/components/schemas/SecurityPolicy'
          description: The Transport Layer Security (TLS) version + cipher suite for this <a>DomainName</a>. The valid values are <code>TLS_1_0</code> and <code>TLS_1_2</code>.
        mutualTlsAuthentication:
          $ref: '#/components/schemas/MutualTlsAuthenticationInput'
        ownershipVerificationCertificateArn:
          $ref: '#/components/schemas/String'
          description: The ARN of the public certificate issued by ACM to validate ownership of your custom domain. Only required when configuring mutual TLS and using an ACM imported or private CA certificate ARN as the regionalCertificateArn.
      description: A request to create a new domain name.
    CreateModelRequest:
      type: object
      required:
        - name
        - contentType
      title: CreateModelRequest
      properties:
        name:
          $ref: '#/components/schemas/String'
          description: '[Required] The name of the model. Must be alphanumeric.'
        description:
          $ref: '#/components/schemas/String'
          description: The description of the model.
        schema:
          $ref: '#/components/schemas/String'
          description: 'The schema for the model. For <code>application/json</code> models, this should be <a href="https://tools.ietf.org/html/draft-zyp-json-schema-04" target="_blank">JSON schema draft 4</a> model.'
        contentType:
          $ref: '#/components/schemas/String'
          description: '[Required] The content-type for the model.'
      description: Request to add a new <a>Model</a> to an existing <a>RestApi</a> resource.
    CreateRequestValidatorRequest:
      type: object
      title: CreateRequestValidatorRequest
      properties:
        name:
          $ref: '#/components/schemas/String'
          description: The name of the to-be-created <a>RequestValidator</a>.
        validateRequestBody:
          $ref: '#/components/schemas/Boolean'
          description: A Boolean flag to indicate whether to validate request body according to the configured model schema for the method (<code>true</code>) or not (<code>false</code>).
        validateRequestParameters:
          $ref: '#/components/schemas/Boolean'
          description: 'A Boolean flag to indicate whether to validate request parameters, <code>true</code>, or not <code>false</code>.'
      description: Creates a <a>RequestValidator</a> of a given <a>RestApi</a>.
    CreateResourceRequest:
      type: object
      required:
        - pathPart
      title: CreateResourceRequest
      properties:
        pathPart:
          $ref: '#/components/schemas/String'
          description: The last path segment for this resource.
      description: Requests API Gateway to create a <a>Resource</a> resource.
    CreateRestApiRequest:
      type: object
      required:
        - name
      title: CreateRestApiRequest
      properties:
        name:
          $ref: '#/components/schemas/String'
          description: '[Required] The name of the <a>RestApi</a>.'
        description:
          $ref: '#/components/schemas/String'
          description: The description of the <a>RestApi</a>.
        version:
          $ref: '#/components/schemas/String'
          description: A version identifier for the API.
        cloneFrom:
          $ref: '#/components/schemas/String'
          description: The ID of the <a>RestApi</a> that you want to clone from.
        binaryMediaTypes:
          $ref: '#/components/schemas/ListOfString'
          description: 'The list of binary media types supported by the <a>RestApi</a>. By default, the <a>RestApi</a> supports only UTF-8-encoded text payloads.'
        minimumCompressionSize:
          $ref: '#/components/schemas/NullableInteger'
          description: 'A nullable integer that is used to enable compression (with non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable compression (with a null value) on an API. When compression is enabled, compression or decompression is not applied on the payload if the payload size is smaller than this value. Setting it to zero allows compression for any payload size.'
        apiKeySource:
          $ref: '#/components/schemas/ApiKeySourceType'
          description: 'The source of the API key for metering requests according to a usage plan. Valid values are: <ul><li><code>HEADER</code> to read the API key from the <code>X-API-Key</code> header of a request. </li><li><code>AUTHORIZER</code> to read the API key from the <code>UsageIdentifierKey</code> from a custom authorizer.</li></ul>'
        endpointConfiguration:
          $ref: '#/components/schemas/EndpointConfiguration'
          description: The endpoint configuration of this <a>RestApi</a> showing the endpoint types of the API.
        policy:
          $ref: '#/components/schemas/String'
          description: A stringified JSON policy document that applies to this RestApi regardless of the caller and <a>Method</a> configuration.
        tags:
          $ref: '#/components/schemas/MapOfStringToString'
          description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.'
        disableExecuteApiEndpoint:
          $ref: '#/components/schemas/Boolean'
          description: 'Specifies whether clients can invoke your API by using the default <code>execute-api</code> endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.'
      description: The POST Request to add a new <a>RestApi</a> resource to your collection.
    CreateStageRequest:
      type: object
      required:
        - stageName
        - deploymentId
      title: CreateStageRequest
      properties:
        stageName:
          $ref: '#/components/schemas/String'
          description: '[Required] The name for the <a>Stage</a> resource. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.'
        deploymentId:
          $ref: '#/components/schemas/String'
          description: '[Required] The identifier of the <a>Deployment</a> resource for the <a>Stage</a> resource.'
        description:
          $ref: '#/components/schemas/String'
          description: The description of the <a>Stage</a> resource.
        cacheClusterEnabled:
          $ref: '#/components/schemas/Boolean'
          description: Whether cache clustering is enabled for the stage.
        cacheClusterSize:
          $ref: '#/components/schemas/CacheClusterSize'
          description: The stage's cache cluster size.
        variables:
          $ref: '#/components/schemas/MapOfStringToString'
          description: 'A map that defines the stage variables for the new <a>Stage</a> resource. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>.'
        documentationVersion:
          $ref: '#/components/schemas/String'
          description: The version of the associated API documentation.
        canarySettings:
          $ref: '#/components/schemas/CanarySettings'
          description: The canary deployment settings of this stage.
        tracingEnabled:
          $ref: '#/components/schemas/Boolean'
          description: Specifies whether active tracing with X-ray is enabled for the <a>Stage</a>.
        tags:
          $ref: '#/components/schemas/MapOfStringToString'
          description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.'
      description: Requests API Gateway to create a <a>Stage</a> resource.
    CreateUsagePlanKeyRequest:
      type: object
      required:
        - keyId
        - keyType
      title: CreateUsagePlanKeyRequest
      properties:
        keyId:
          $ref: '#/components/schemas/String'
          description: '[Required] The identifier of a <a>UsagePlanKey</a> resource for a plan customer.'
        keyType:
          $ref: '#/components/schemas/String'
          description: '[Required] The type of a <a>UsagePlanKey</a> resource for a plan customer.'
      description: The POST request to create a usage plan key for adding an existing API key to a usage plan.
    ListOfApiStage:
      type: array
      items:
        $ref: '#/components/schemas/ApiStage'
    QuotaSettings:
      type: object
      properties:
        limit:
          $ref: '#/components/schemas/Integer'
          description: The maximum number of requests that can be made in a given time period.
        offset:
          $ref: '#/components/schemas/Integer'
          description: 'The day that a time period starts. For example, with a time period of <code>WEEK</code>, an offset of <code>0</code> starts on Sunday, and an offset of <code>1</code> starts on Monday.'
        period:
          $ref: '#/components/schemas/QuotaPeriodType'
          description: 'The time period in which the limit applies. Valid values are "DAY", "WEEK" or "MONTH".'
      description: Quotas configured for a usage plan.
    CreateUsagePlanRequest:
      type: object
      required:
        - name
      title: CreateUsagePlanRequest
      properties:
        name:
          $ref: '#/components/schemas/String'
          description: '[Required] The name of the usage plan.'
        description:
          $ref: '#/components/schemas/String'
          description: The description of the usage plan.
        apiStages:
          $ref: '#/components/schemas/ListOfApiStage'
          description: The associated API stages of the usage plan.
        throttle:
          $ref: '#/components/schemas/ThrottleSettings'
          description: The throttling limits of the usage plan.
        quota:
          $ref: '#/components/schemas/QuotaSettings'
          description: The quota of the usage plan.
        tags:
          $ref: '#/components/schemas/MapOfStringToString'
          description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.'
      description: 'The POST request to create a usage plan with the name, description, throttle limits and quota limits, as well as the associated API stages, specified in the payload.'
    CreateVpcLinkRequest:
      type: object
      required:
        - name
        - targetArns
      title: CreateVpcLinkRequest
      properties:
        name:
          $ref: '#/components/schemas/String'
          description: '[Required] The name used to label and identify the VPC link.'
        description:
          $ref: '#/components/schemas/String'
          description: The description of the VPC link.
        targetArns:
          $ref: '#/components/schemas/ListOfString'
          description: '[Required] The ARN of the network load balancer of the VPC targeted by the VPC link. The network load balancer must be owned by the same AWS account of the API owner.'
        tags:
          $ref: '#/components/schemas/MapOfStringToString'
          description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.'
      description: 'Creates a VPC link, under the caller''s account in a selected region, in an asynchronous operation that typically takes 2-4 minutes to complete and become operational. The caller must have permissions to create and update VPC Endpoint services.'
    DeleteApiKeyRequest:
      type: object
      title: DeleteApiKeyRequest
      properties: {}
      description: A request to delete the <a>ApiKey</a> resource.
    DeleteAuthorizerRequest:
      type: object
      title: DeleteAuthorizerRequest
      properties: {}
      description: Request to delete an existing <a>Authorizer</a> resource.
    DeleteBasePathMappingRequest:
      type: object
      title: DeleteBasePathMappingRequest
      properties: {}
      description: A request to delete the <a>BasePathMapping</a> resource.
    DeleteClientCertificateRequest:
      type: object
      title: DeleteClientCertificateRequest
      properties: {}
      description: A request to delete the <a>ClientCertificate</a> resource.
    DeleteDeploymentRequest:
      type: object
      title: DeleteDeploymentRequest
      properties: {}
      description: Requests API Gateway to delete a <a>Deployment</a> resource.
    DeleteDocumentationPartRequest:
      type: object
      title: DeleteDocumentationPartRequest
      properties: {}
      description: Deletes an existing documentation part of an API.
    DeleteDocumentationVersionRequest:
      type: object
      title: DeleteDocumentationVersionRequest
      properties: {}
      description: Deletes an existing documentation version of an API.
    DeleteDomainNameRequest:
      type: object
      title: DeleteDomainNameRequest
      properties: {}
      description: A request to delete the <a>DomainName</a> resource.
    GatewayResponseType:
      type: string
      enum:
        - DEFAULT_4XX
        - DEFAULT_5XX
        - RESOURCE_NOT_FOUND
        - UNAUTHORIZED
        - INVALID_API_KEY
        - ACCESS_DENIED
        - AUTHORIZER_FAILURE
        - AUTHORIZER_CONFIGURATION_ERROR
        - INVALID_SIGNATURE
        - EXPIRED_TOKEN
        - MISSING_AUTHENTICATION_TOKEN
        - INTEGRATION_FAILURE
        - INTEGRATION_TIMEOUT
        - API_CONFIGURATION_ERROR
        - UNSUPPORTED_MEDIA_TYPE
        - BAD_REQUEST_PARAMETERS
        - BAD_REQUEST_BODY
        - REQUEST_TOO_LARGE
        - THROTTLED
        - QUOTA_EXCEEDED
    DeleteGatewayResponseRequest:
      type: object
      title: DeleteGatewayResponseRequest
      properties: {}
      description: Clears any customization of a <a>GatewayResponse</a> of a specified response type on the given <a>RestApi</a> and resets it with the default settings.
    DeleteIntegrationRequest:
      type: object
      title: DeleteIntegrationRequest
      properties: {}
      description: Represents a delete integration request.
    StatusCode:
      type: string
      pattern: '[1-5]\d\d'
      description: The status code.
    DeleteIntegrationResponseRequest:
      type: object
      title: DeleteIntegrationResponseRequest
      properties: {}
      description: Represents a delete integration response request.
    DeleteMethodRequest:
      type: object
      title: DeleteMethodRequest
      properties: {}
      description: Request to delete an existing <a>Method</a> resource.
    DeleteMethodResponseRequest:
      type: object
      title: DeleteMethodResponseRequest
      properties: {}
      description: A request to delete an existing <a>MethodResponse</a> resource.
    DeleteModelRequest:
      type: object
      title: DeleteModelRequest
      properties: {}
      description: Request to delete an existing model in an existing <a>RestApi</a> resource.
    DeleteRequestValidatorRequest:
      type: object
      title: DeleteRequestValidatorRequest
      properties: {}
      description: Deletes a specified <a>RequestValidator</a> of a given <a>RestApi</a>.
    DeleteResourceRequest:
      type: object
      title: DeleteResourceRequest
      properties: {}
      description: Request to delete a <a>Resource</a>.
    DeleteRestApiRequest:
      type: object
      title: DeleteRestApiRequest
      properties: {}
      description: Request to delete the specified API from your collection.
    DeleteStageRequest:
      type: object
      title: DeleteStageRequest
      properties: {}
      description: Requests API Gateway to delete a <a>Stage</a> resource.
    DeleteUsagePlanKeyRequest:
      type: object
      title: DeleteUsagePlanKeyRequest
      properties: {}
      description: The DELETE request to delete a usage plan key and remove the underlying API key from the associated usage plan.
    DeleteUsagePlanRequest:
      type: object
      title: DeleteUsagePlanRequest
      properties: {}
      description: The DELETE request to delete a usage plan of a given plan Id.
    DeleteVpcLinkRequest:
      type: object
      title: DeleteVpcLinkRequest
      properties: {}
      description: Deletes an existing <a>VpcLink</a> of a specified identifier.
    PathToMapOfMethodSnapshot:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/MapOfMethodSnapshot'
    ListOfDeployment:
      type: array
      items:
        $ref: '#/components/schemas/Deployment'
    ListOfDocumentationPart:
      type: array
      items:
        $ref: '#/components/schemas/DocumentationPart'
    ListOfDocumentationVersion:
      type: array
      items:
        $ref: '#/components/schemas/DocumentationVersion'
    DomainNameStatus:
      type: string
      enum:
        - AVAILABLE
        - UPDATING
        - PENDING
        - PENDING_CERTIFICATE_REIMPORT
        - PENDING_OWNERSHIP_VERIFICATION
    MutualTlsAuthentication:
      type: object
      properties:
        truststoreUri:
          $ref: '#/components/schemas/String'
          description: 'An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example <code>s3://bucket-name/key-name</code>. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.'
        truststoreVersion:
          $ref: '#/components/schemas/String'
          description: 'The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket.'
        truststoreWarnings:
          $ref: '#/components/schemas/ListOfString'
          description: 'A list of warnings that API Gateway returns while processing your truststore. Invalid certificates produce warnings. Mutual TLS is still enabled, but some clients might not be able to access your API. To resolve warnings, upload a new truststore to S3, and then update you domain name to use the new version.'
      description: 'If specified, API Gateway performs two-way authentication between the client and the server. Clients must present a trusted certificate to access your custom domain name.'
    ListOfDomainName:
      type: array
      items:
        $ref: '#/components/schemas/DomainName'
    EndpointType:
      type: string
      enum:
        - REGIONAL
        - EDGE
        - PRIVATE
      description: 'The endpoint type. The valid values are <code>EDGE</code> for edge-optimized API setup, most suitable for mobile applications; <code>REGIONAL</code> for regional API endpoint setup, most suitable for calling from AWS Region; and <code>PRIVATE</code> for private APIs.'
    FlushStageAuthorizersCacheRequest:
      type: object
      title: FlushStageAuthorizersCacheRequest
      properties: {}
      description: Request to flush authorizer cache entries on a specified stage.
    FlushStageCacheRequest:
      type: object
      title: FlushStageCacheRequest
      properties: {}
      description: Requests API Gateway to flush a stage's cache.
    ListOfGatewayResponse:
      type: array
      items:
        $ref: '#/components/schemas/GatewayResponse'
    GenerateClientCertificateRequest:
      type: object
      title: GenerateClientCertificateRequest
      properties:
        description:
          $ref: '#/components/schemas/String'
          description: The description of the <a>ClientCertificate</a>.
        tags:
          $ref: '#/components/schemas/MapOfStringToString'
          description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.'
      description: A request to generate a <a>ClientCertificate</a> resource.
    GetAccountRequest:
      type: object
      title: GetAccountRequest
      properties: {}
      description: Requests API Gateway to get information about the current <a>Account</a> resource.
    GetApiKeyRequest:
      type: object
      title: GetApiKeyRequest
      properties: {}
      description: A request to get information about the current <a>ApiKey</a> resource.
    GetApiKeysRequest:
      type: object
      title: GetApiKeysRequest
      properties: {}
      description: A request to get information about the current <a>ApiKeys</a> resource.
    GetAuthorizerRequest:
      type: object
      title: GetAuthorizerRequest
      properties: {}
      description: Request to describe an existing <a>Authorizer</a> resource.
    GetAuthorizersRequest:
      type: object
      title: GetAuthorizersRequest
      properties: {}
      description: Request to describe an existing <a>Authorizers</a> resource.
    GetBasePathMappingRequest:
      type: object
      title: GetBasePathMappingRequest
      properties: {}
      description: Request to describe a <a>BasePathMapping</a> resource.
    GetBasePathMappingsRequest:
      type: object
      title: GetBasePathMappingsRequest
      properties: {}
      description: A request to get information about a collection of <a>BasePathMapping</a> resources.
    GetClientCertificateRequest:
      type: object
      title: GetClientCertificateRequest
      properties: {}
      description: A request to get information about the current <a>ClientCertificate</a> resource.
    GetClientCertificatesRequest:
      type: object
      title: GetClientCertificatesRequest
      properties: {}
      description: A request to get information about a collection of <a>ClientCertificate</a> resources.
    GetDeploymentRequest:
      type: object
      title: GetDeploymentRequest
      properties: {}
      description: Requests API Gateway to get information about a <a>Deployment</a> resource.
    GetDeploymentsRequest:
      type: object
      title: GetDeploymentsRequest
      properties: {}
      description: Requests API Gateway to get information about a <a>Deployments</a> collection.
    GetDocumentationPartRequest:
      type: object
      title: GetDocumentationPartRequest
      properties: {}
      description: Gets a specified documentation part of a given API.
    LocationStatusType:
      type: string
      enum:
        - DOCUMENTED
        - UNDOCUMENTED
    GetDocumentationPartsRequest:
      type: object
      title: GetDocumentationPartsRequest
      properties: {}
      description: 'Gets the documentation parts of an API. The result may be filtered by the type, name, or path of API entities (targets).'
    GetDocumentationVersionRequest:
      type: object
      title: GetDocumentationVersionRequest
      properties: {}
      description: Gets a documentation snapshot of an API.
    GetDocumentationVersionsRequest:
      type: object
      title: GetDocumentationVersionsRequest
      properties: {}
      description: Gets the documentation versions of an API.
    GetDomainNameRequest:
      type: object
      title: GetDomainNameRequest
      properties: {}
      description: Request to get the name of a <a>DomainName</a> resource.
    GetDomainNamesRequest:
      type: object
      title: GetDomainNamesRequest
      properties: {}
      description: Request to describe a collection of <a>DomainName</a> resources.
    GetExportRequest:
      type: object
      title: GetExportRequest
      properties: {}
      description: Request a new export of a <a>RestApi</a> for a particular <a>Stage</a>.
    GetGatewayResponseRequest:
      type: object
      title: GetGatewayResponseRequest
      properties: {}
      description: Gets a <a>GatewayResponse</a> of a specified response type on the given <a>RestApi</a>.
    GetGatewayResponsesRequest:
      type: object
      title: GetGatewayResponsesRequest
      properties: {}
      description: 'Gets the <a>GatewayResponses</a> collection on the given <a>RestApi</a>. If an API developer has not added any definitions for gateway responses, the result will be the API Gateway-generated default <a>GatewayResponses</a> collection for the supported response types.'
    GetIntegrationRequest:
      type: object
      title: GetIntegrationRequest
      properties: {}
      description: Represents a request to get the integration configuration.
    GetIntegrationResponseRequest:
      type: object
      title: GetIntegrationResponseRequest
      properties: {}
      description: Represents a get integration response request.
    GetMethodRequest:
      type: object
      title: GetMethodRequest
      properties: {}
      description: Request to describe an existing <a>Method</a> resource.
    GetMethodResponseRequest:
      type: object
      title: GetMethodResponseRequest
      properties: {}
      description: Request to describe a <a>MethodResponse</a> resource.
    GetModelRequest:
      type: object
      title: GetModelRequest
      properties: {}
      description: Request to list information about a model in an existing <a>RestApi</a> resource.
    GetModelTemplateRequest:
      type: object
      title: GetModelTemplateRequest
      properties: {}
      description: Request to generate a sample mapping template used to transform the payload.
    GetModelsRequest:
      type: object
      title: GetModelsRequest
      properties: {}
      description: Request to list existing <a>Models</a> defined for a <a>RestApi</a> resource.
    GetRequestValidatorRequest:
      type: object
      title: GetRequestValidatorRequest
      properties: {}
      description: Gets a <a>RequestValidator</a> of a given <a>RestApi</a>.
    GetRequestValidatorsRequest:
      type: object
      title: GetRequestValidatorsRequest
      properties: {}
      description: Gets the <a>RequestValidators</a> collection of a given <a>RestApi</a>.
    GetResourceRequest:
      type: object
      title: GetResourceRequest
      properties: {}
      description: Request to list information about a resource.
    GetResourcesRequest:
      type: object
      title: GetResourcesRequest
      properties: {}
      description: Request to list information about a collection of resources.
    GetRestApiRequest:
      type: object
      title: GetRestApiRequest
      properties: {}
      description: 'The GET request to list an existing <a>RestApi</a> defined for your collection. '
    GetRestApisRequest:
      type: object
      title: GetRestApisRequest
      properties: {}
      description: The GET request to list existing <a>RestApis</a> defined for your collection.
    GetSdkRequest:
      type: object
      title: GetSdkRequest
      properties: {}
      description: Request a new generated client SDK for a <a>RestApi</a> and <a>Stage</a>.
    GetSdkTypeRequest:
      type: object
      title: GetSdkTypeRequest
      properties: {}
      description: Get an <a>SdkType</a> instance.
    GetSdkTypesRequest:
      type: object
      title: GetSdkTypesRequest
      properties: {}
      description: Get the <a>SdkTypes</a> collection.
    GetStageRequest:
      type: object
      title: GetStageRequest
      properties: {}
      description: Requests API Gateway to get information about a <a>Stage</a> resource.
    GetStagesRequest:
      type: object
      title: GetStagesRequest
      properties: {}
      description: Requests API Gateway to get information about one or more <a>Stage</a> resources.
    GetTagsRequest:
      type: object
      title: GetTagsRequest
      properties: {}
      description: Gets the <a>Tags</a> collection for a given resource.
    GetUsagePlanKeyRequest:
      type: object
      title: GetUsagePlanKeyRequest
      properties: {}
      description: The GET request to get a usage plan key of a given key identifier.
    GetUsagePlanKeysRequest:
      type: object
      title: GetUsagePlanKeysRequest
      properties: {}
      description: The GET request to get all the usage plan keys representing the API keys added to a specified usage plan.
    GetUsagePlanRequest:
      type: object
      title: GetUsagePlanRequest
      properties: {}
      description: The GET request to get a usage plan of a given plan identifier.
    GetUsagePlansRequest:
      type: object
      title: GetUsagePlansRequest
      properties: {}
      description: The GET request to get all the usage plans of the caller's account.
    GetUsageRequest:
      type: object
      title: GetUsageRequest
      properties: {}
      description: The GET request to get the usage data of a usage plan in a specified time interval.
    GetVpcLinkRequest:
      type: object
      title: GetVpcLinkRequest
      properties: {}
      description: Gets a specified VPC link under the caller's account in a region.
    GetVpcLinksRequest:
      type: object
      title: GetVpcLinksRequest
      properties: {}
      description: Gets the <a>VpcLinks</a> collection under the caller's account in a selected region.
    ImportApiKeysRequest:
      type: object
      required:
        - body
      title: ImportApiKeysRequest
      properties:
        body:
          $ref: '#/components/schemas/Blob'
          description: 'The payload of the POST request to import API keys. For the payload format, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-key-file-format.html">API Key File Format</a>.'
      description: 'The POST request to import API keys from an external source, such as a CSV-formatted file.'
    PutMode:
      type: string
      enum:
        - merge
        - overwrite
    ImportDocumentationPartsRequest:
      type: object
      required:
        - body
      title: ImportDocumentationPartsRequest
      properties:
        body:
          $ref: '#/components/schemas/Blob'
          description: '[Required] Raw byte array representing the to-be-imported documentation parts. To import from an OpenAPI file, this is a JSON object.'
      description: 'Import documentation parts from an external (e.g., OpenAPI) definition file. '
    ImportRestApiRequest:
      type: object
      required:
        - body
      title: ImportRestApiRequest
      properties:
        body:
          $ref: '#/components/schemas/Blob'
          description: '[Required] The POST request body containing external API definitions. Currently, only OpenAPI definition JSON/YAML files are supported. The maximum size of the API definition file is 6MB.'
      description: A POST request to import an API to API Gateway using an input of an API definition file.
    IntegrationType:
      type: string
      enum:
        - HTTP
        - AWS
        - MOCK
        - HTTP_PROXY
        - AWS_PROXY
      description: 'The integration type. The valid value is <code>HTTP</code> for integrating an API method with an HTTP backend; <code>AWS</code> with any AWS service endpoints; <code>MOCK</code> for testing without actually invoking the backend; <code>HTTP_PROXY</code> for integrating with the HTTP proxy integration; <code>AWS_PROXY</code> for integrating with the Lambda proxy integration. '
    MapOfIntegrationResponse:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/IntegrationResponse'
    TlsConfig:
      type: object
      properties:
        insecureSkipVerification:
          $ref: '#/components/schemas/Boolean'
          description: 'Specifies whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-supported-certificate-authorities-for-http-endpoints.html">supported certificate authority</a>. This isn’t recommended, but it enables you to use certificates that are signed by private certificate authorities, or certificates that are self-signed. If enabled, API Gateway still performs basic certificate validation, which includes checking the certificate''s expiration date, hostname, and presence of a root certificate authority. Supported only for <code>HTTP</code> and <code>HTTP_PROXY</code> integrations.'
    Long:
      type: integer
    ListOfLong:
      type: array
      items:
        $ref: '#/components/schemas/Long'
    ListOfModel:
      type: array
      items:
        $ref: '#/components/schemas/Model'
    ListOfPatchOperation:
      type: array
      description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
      items:
        $ref: '#/components/schemas/PatchOperation'
    ListOfRequestValidator:
      type: array
      items:
        $ref: '#/components/schemas/RequestValidator'
    ListOfResource:
      type: array
      items:
        $ref: '#/components/schemas/Resource'
    ListOfRestApi:
      type: array
      items:
        $ref: '#/components/schemas/RestApi'
    SdkConfigurationProperty:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/String'
          description: The name of a an <a>SdkType</a> configuration property.
        friendlyName:
          $ref: '#/components/schemas/String'
          description: The user-friendly name of an <a>SdkType</a> configuration property.
        description:
          $ref: '#/components/schemas/String'
          description: The description of an <a>SdkType</a> configuration property.
        required:
          $ref: '#/components/schemas/Boolean'
          description: A boolean flag of an <a>SdkType</a> configuration property to indicate if the associated SDK configuration property is required (<code>true</code>) or not (<code>false</code>).
        defaultValue:
          $ref: '#/components/schemas/String'
          description: The default value of an <a>SdkType</a> configuration property.
      description: A configuration property of an SDK type.
    ListOfSdkConfigurationProperty:
      type: array
      items:
        $ref: '#/components/schemas/SdkConfigurationProperty'
    ListOfSdkType:
      type: array
      items:
        $ref: '#/components/schemas/SdkType'
    ListOfStage:
      type: array
      items:
        $ref: '#/components/schemas/Stage'
    ListOfUsage:
      type: array
      items:
        $ref: '#/components/schemas/ListOfLong'
    ListOfUsagePlan:
      type: array
      items:
        $ref: '#/components/schemas/UsagePlan'
    ListOfUsagePlanKey:
      type: array
      items:
        $ref: '#/components/schemas/UsagePlanKey'
    ListOfVpcLink:
      type: array
      items:
        $ref: '#/components/schemas/VpcLink'
    MapOfKeyUsages:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ListOfUsage'
    MapOfMethod:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Method'
    MapOfMethodResponse:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/MethodResponse'
    MethodSetting:
      type: object
      properties:
        metricsEnabled:
          $ref: '#/components/schemas/Boolean'
          description: 'Specifies whether Amazon CloudWatch metrics are enabled for this method. The PATCH path for this setting is <code>/{method_setting_key}/metrics/enabled</code>, and the value is a Boolean.'
        loggingLevel:
          $ref: '#/components/schemas/String'
          description: 'Specifies the logging level for this method, which affects the log entries pushed to Amazon CloudWatch Logs. The PATCH path for this setting is <code>/{method_setting_key}/logging/loglevel</code>, and the available levels are <code>OFF</code>, <code>ERROR</code>, and <code>INFO</code>. Choose <code>ERROR</code> to write only error-level entries to CloudWatch Logs, or choose <code>INFO</code> to include all <code>ERROR</code> events as well as extra informational events.'
        dataTraceEnabled:
          $ref: '#/components/schemas/Boolean'
          description: 'Specifies whether data trace logging is enabled for this method, which affects the log entries pushed to Amazon CloudWatch Logs. The PATCH path for this setting is <code>/{method_setting_key}/logging/dataTrace</code>, and the value is a Boolean.'
        throttlingBurstLimit:
          $ref: '#/components/schemas/Integer'
          description: 'Specifies the throttling burst limit. The PATCH path for this setting is <code>/{method_setting_key}/throttling/burstLimit</code>, and the value is an integer.'
        throttlingRateLimit:
          $ref: '#/components/schemas/Double'
          description: 'Specifies the throttling rate limit. The PATCH path for this setting is <code>/{method_setting_key}/throttling/rateLimit</code>, and the value is a double.'
        cachingEnabled:
          $ref: '#/components/schemas/Boolean'
          description: 'Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached. The PATCH path for this setting is <code>/{method_setting_key}/caching/enabled</code>, and the value is a Boolean.'
        cacheTtlInSeconds:
          $ref: '#/components/schemas/Integer'
          description: 'Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached. The PATCH path for this setting is <code>/{method_setting_key}/caching/ttlInSeconds</code>, and the value is an integer.'
        cacheDataEncrypted:
          $ref: '#/components/schemas/Boolean'
          description: 'Specifies whether the cached responses are encrypted. The PATCH path for this setting is <code>/{method_setting_key}/caching/dataEncrypted</code>, and the value is a Boolean.'
        requireAuthorizationForCacheControl:
          $ref: '#/components/schemas/Boolean'
          description: 'Specifies whether authorization is required for a cache invalidation request. The PATCH path for this setting is <code>/{method_setting_key}/caching/requireAuthorizationForCacheControl</code>, and the value is a Boolean.'
        unauthorizedCacheControlHeaderStrategy:
          $ref: '#/components/schemas/UnauthorizedCacheControlHeaderStrategy'
          description: 'Specifies how to handle unauthorized requests for cache invalidation. The PATCH path for this setting is <code>/{method_setting_key}/caching/unauthorizedCacheControlHeaderStrategy</code>, and the available values are <code>FAIL_WITH_403</code>, <code>SUCCEED_WITH_RESPONSE_HEADER</code>, <code>SUCCEED_WITHOUT_RESPONSE_HEADER</code>.'
      description: Specifies the method setting properties.
    MapOfMethodSettings:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/MethodSetting'
    MethodSnapshot:
      type: object
      properties:
        authorizationType:
          $ref: '#/components/schemas/String'
          description: 'The method''s authorization type. Valid values are <code>NONE</code> for open access, <code>AWS_IAM</code> for using AWS IAM permissions, <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code> for using a Cognito user pool.'
        apiKeyRequired:
          $ref: '#/components/schemas/Boolean'
          description: Specifies whether the method requires a valid <a>ApiKey</a>.
      description: 'Represents a summary of a <a>Method</a> resource, given a particular date and time.'
    MapOfMethodSnapshot:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/MethodSnapshot'
    MapOfStringToBoolean:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/NullableBoolean'
    MapOfStringToList:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ListOfString'
    UnauthorizedCacheControlHeaderStrategy:
      type: string
      enum:
        - FAIL_WITH_403
        - SUCCEED_WITH_RESPONSE_HEADER
        - SUCCEED_WITHOUT_RESPONSE_HEADER
    Op:
      type: string
      enum:
        - add
        - remove
        - replace
        - move
        - copy
        - test
    PutGatewayResponseRequest:
      type: object
      title: PutGatewayResponseRequest
      properties:
        statusCode:
          $ref: '#/components/schemas/StatusCode'
          description: The HTTP status code of the <a>GatewayResponse</a>.
        responseParameters:
          $ref: '#/components/schemas/MapOfStringToString'
          description: '<p><p>Response parameters (paths, query strings and headers) of the <a>GatewayResponse</a> as a string-to-string map of key-value pairs.</p></p>'
        responseTemplates:
          $ref: '#/components/schemas/MapOfStringToString'
          description: <p><p>Response templates of the <a>GatewayResponse</a> as a string-to-string map of key-value pairs.</p></p>
      description: Creates a customization of a <a>GatewayResponse</a> of a specified response type and status code on the given <a>RestApi</a>.
    PutIntegrationRequest:
      type: object
      required:
        - type
      title: PutIntegrationRequest
      properties:
        type:
          $ref: '#/components/schemas/IntegrationType'
          description: '[Required] Specifies a put integration input''s type.'
        integrationHttpMethod:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: httpMethod
              description: 'Specifies a put integration HTTP method. When the integration type is HTTP or AWS, this field is required.'
        uri:
          $ref: '#/components/schemas/String'
          description: '<p>Specifies Uniform Resource Identifier (URI) of the integration endpoint.</p> <ul> <li><p> For <code>HTTP</code> or <code>HTTP_PROXY</code> integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the <a href="https://en.wikipedia.org/wiki/Uniform_Resource_Identifier" target="_blank">RFC-3986 specification</a>, for either standard integration, where <code>connectionType</code> is not <code>VPC_LINK</code>, or private integration, where <code>connectionType</code> is <code>VPC_LINK</code>. For a private HTTP integration, the URI is not used for routing. </p> </li> <li><p> For <code>AWS</code> or <code>AWS_PROXY</code> integrations, the URI is of the form <code>arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}</code>. Here, <code>{Region}</code> is the API Gateway region (e.g., <code>us-east-1</code>); <code>{service}</code> is the name of the integrated AWS service (e.g., <code>s3</code>); and <code>{subdomain}</code> is a designated subdomain supported by certain AWS service for fast host-name lookup. <code>action</code> can be used for an AWS service action-based API, using an <code>Action={name}&amp;{p1}={v1}&amp;p2={v2}...</code> query string. The ensuing <code>{service_api}</code> refers to a supported action <code>{name}</code> plus any required input parameters. Alternatively, <code>path</code> can be used for an AWS service path-based API. The ensuing <code>service_api</code> refers to the path to an AWS service resource, including the region of the integrated AWS service, if applicable. For example, for integration with the S3 API of <code><a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectGET.html">GetObject</a></code>, the <code>uri</code> can be either <code>arn:aws:apigateway:us-west-2:s3:action/GetObject&amp;Bucket={bucket}&amp;Key={key}</code> or <code>arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</code></p> </li></ul>'
        connectionType:
          $ref: '#/components/schemas/ConnectionType'
          description: The type of the network connection to the integration endpoint. The valid value is <code>INTERNET</code> for connections through the public routable internet or <code>VPC_LINK</code> for private connections between API Gateway and a network load balancer in a VPC. The default value is <code>INTERNET</code>.
        connectionId:
          $ref: '#/components/schemas/String'
          description: 'The (<a href="https://docs.aws.amazon.com/apigateway/api-reference/resource/vpc-link/#id"><code>id</code></a>) of the <a>VpcLink</a> used for the integration when <code>connectionType=VPC_LINK</code> and undefined, otherwise.'
        credentials:
          $ref: '#/components/schemas/String'
          description: Specifies whether credentials are required for a put integration.
        requestParameters:
          $ref: '#/components/schemas/MapOfStringToString'
          description: 'A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> must be a valid and unique method request parameter name.'
        requestTemplates:
          $ref: '#/components/schemas/MapOfStringToString'
          description: 'Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.'
        passthroughBehavior:
          $ref: '#/components/schemas/String'
          description: '<p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the <code>requestTemplates</code> property on the Integration resource. There are three valid values: <code>WHEN_NO_MATCH</code>, <code>WHEN_NO_TEMPLATES</code>, and <code>NEVER</code>. </p> <ul> <li><p><code>WHEN_NO_MATCH</code> passes the request body for unmapped content types through to the integration back end without transformation.</p></li> <li><p><code>NEVER</code> rejects unmapped content types with an HTTP 415 ''Unsupported Media Type'' response.</p></li> <li><p><code>WHEN_NO_TEMPLATES</code> allows pass-through when the integration has NO content types mapped to templates. However if there is at least one content type defined, unmapped content types will be rejected with the same 415 response.</p></li> </ul>'
        cacheNamespace:
          $ref: '#/components/schemas/String'
          description: 'Specifies a group of related cached parameters. By default, API Gateway uses the resource ID as the <code>cacheNamespace</code>. You can specify the same <code>cacheNamespace</code> across resources to return the same cached data for requests to different resources.'
        cacheKeyParameters:
          $ref: '#/components/schemas/ListOfString'
          description: 'A list of request parameters whose values API Gateway caches. To be valid values for <code>cacheKeyParameters</code>, these parameters must also be specified for <a>Method</a> <code>requestParameters</code>.'
        contentHandling:
          $ref: '#/components/schemas/ContentHandlingStrategy'
          description: '<p>Specifies how to handle request payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p> <ul> <li><p><code>CONVERT_TO_BINARY</code>: Converts a request payload from a Base64-encoded string to the corresponding binary blob.</p></li> <li><p><code>CONVERT_TO_TEXT</code>: Converts a request payload from a binary blob to a Base64-encoded string.</p></li> </ul> <p>If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the <code>passthroughBehavior</code> is configured to support payload pass-through.</p>'
        timeoutInMillis:
          $ref: '#/components/schemas/NullableInteger'
          description: 'Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.'
        tlsConfig:
          $ref: '#/components/schemas/TlsConfig'
      description: Sets up a method's integration.
    PutIntegrationResponseRequest:
      type: object
      title: PutIntegrationResponseRequest
      properties:
        selectionPattern:
          $ref: '#/components/schemas/String'
          description: Specifies the selection pattern of a put integration response.
        responseParameters:
          $ref: '#/components/schemas/MapOfStringToString'
          description: 'A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> must be a valid and unique response header name and <code>JSON-expression</code> a valid JSON expression without the <code>$</code> prefix.'
        responseTemplates:
          $ref: '#/components/schemas/MapOfStringToString'
          description: Specifies a put integration response's templates.
        contentHandling:
          $ref: '#/components/schemas/ContentHandlingStrategy'
          description: '<p>Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p> <ul> <li><p><code>CONVERT_TO_BINARY</code>: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p></li> <li><p><code>CONVERT_TO_TEXT</code>: Converts a response payload from a binary blob to a Base64-encoded string.</p></li> </ul> <p>If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.</p>'
      description: Represents a put integration response request.
    PutMethodRequest:
      type: object
      required:
        - authorizationType
      title: PutMethodRequest
      properties:
        authorizationType:
          $ref: '#/components/schemas/String'
          description: '[Required] The method''s authorization type. Valid values are <code>NONE</code> for open access, <code>AWS_IAM</code> for using AWS IAM permissions, <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code> for using a Cognito user pool.'
        authorizerId:
          $ref: '#/components/schemas/String'
          description: 'Specifies the identifier of an <a>Authorizer</a> to use on this Method, if the type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is generated by API Gateway when you created the authorizer.'
        apiKeyRequired:
          $ref: '#/components/schemas/Boolean'
          description: Specifies whether the method required a valid <a>ApiKey</a>.
        operationName:
          $ref: '#/components/schemas/String'
          description: 'A human-friendly operation identifier for the method. For example, you can assign the <code>operationName</code> of <code>ListPets</code> for the <code>GET /pets</code> method in the <code>PetStore</code> example.'
        requestParameters:
          $ref: '#/components/schemas/MapOfStringToBoolean'
          description: 'A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key defines a method request parameter name matching the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (<code>true</code>) or optional (<code>false</code>). The method request parameter names defined here are available in <a>Integration</a> to be mapped to integration request parameters or body-mapping templates.'
        requestModels:
          $ref: '#/components/schemas/MapOfStringToString'
          description: 'Specifies the <a>Model</a> resources used for the request''s content type. Request models are represented as a key/value map, with a content type as the key and a <a>Model</a> name as the value.'
        requestValidatorId:
          $ref: '#/components/schemas/String'
          description: The identifier of a <a>RequestValidator</a> for validating the method request.
        authorizationScopes:
          $ref: '#/components/schemas/ListOfString'
          description: 'A list of authorization scopes configured on the method. The scopes are used with a <code>COGNITO_USER_POOLS</code> authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.'
      description: Request to add a method to an existing <a>Resource</a> resource.
    PutMethodResponseRequest:
      type: object
      title: PutMethodResponseRequest
      properties:
        responseParameters:
          $ref: '#/components/schemas/MapOfStringToBoolean'
          description: 'A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header name and the associated value is a Boolean flag indicating whether the method response parameter is required or not. The method response header names must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The response parameter names defined here are available in the integration response to be mapped from an integration response header expressed in <code>integration.response.header.{name}</code>, a static value enclosed within a pair of single quotes (e.g., <code>''application/json''</code>), or a JSON expression from the back-end response payload in the form of <code>integration.response.body.{JSON-expression}</code>, where <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.)'
        responseModels:
          $ref: '#/components/schemas/MapOfStringToString'
          description: 'Specifies the <a>Model</a> resources used for the response''s content type. Response models are represented as a key/value map, with a content type as the key and a <a>Model</a> name as the value.'
      description: Request to add a <a>MethodResponse</a> to an existing <a>Method</a> resource.
    PutRestApiRequest:
      type: object
      required:
        - body
      title: PutRestApiRequest
      properties:
        body:
          $ref: '#/components/schemas/Blob'
          description: '[Required] The PUT request body containing external API definitions. Currently, only OpenAPI definition JSON/YAML files are supported. The maximum size of the API definition file is 6MB.'
      description: 'A PUT request to update an existing API, with external API definitions specified as the request body.'
    TagResourceRequest:
      type: object
      required:
        - tags
      title: TagResourceRequest
      properties:
        tags:
          $ref: '#/components/schemas/MapOfStringToString'
          description: '[Required] The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.'
      description: Adds or updates a tag on a given resource.
    TestInvokeAuthorizerRequest:
      type: object
      title: TestInvokeAuthorizerRequest
      properties:
        headers:
          $ref: '#/components/schemas/MapOfStringToString'
          description: '[Required] A key-value map of headers to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, should be specified.'
        multiValueHeaders:
          $ref: '#/components/schemas/MapOfStringToList'
          description: '[Optional] The headers as a map from string to list of values to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, may be specified.'
        pathWithQueryString:
          $ref: '#/components/schemas/String'
          description: '[Optional] The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters.'
        body:
          $ref: '#/components/schemas/String'
          description: '[Optional] The simulated request body of an incoming invocation request.'
        stageVariables:
          $ref: '#/components/schemas/MapOfStringToString'
          description: A key-value map of stage variables to simulate an invocation on a deployed <a>Stage</a>.
        additionalContext:
          $ref: '#/components/schemas/MapOfStringToString'
          description: '[Optional] A key-value map of additional context variables.'
      description: Make a request to simulate the execution of an <a>Authorizer</a>.
    TestInvokeMethodRequest:
      type: object
      title: TestInvokeMethodRequest
      properties:
        pathWithQueryString:
          $ref: '#/components/schemas/String'
          description: 'The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters.'
        body:
          $ref: '#/components/schemas/String'
          description: The simulated request body of an incoming invocation request.
        headers:
          $ref: '#/components/schemas/MapOfStringToString'
          description: A key-value map of headers to simulate an incoming invocation request.
        multiValueHeaders:
          $ref: '#/components/schemas/MapOfStringToList'
          description: The headers as a map from string to list of values to simulate an incoming invocation request.
        clientCertificateId:
          $ref: '#/components/schemas/String'
          description: A <a>ClientCertificate</a> identifier to use in the test invocation. API Gateway will use the certificate when making the HTTPS request to the defined back-end endpoint.
        stageVariables:
          $ref: '#/components/schemas/MapOfStringToString'
          description: A key-value map of stage variables to simulate an invocation on a deployed <a>Stage</a>.
      description: Make a request to simulate the execution of a <a>Method</a>.
    UntagResourceRequest:
      type: object
      title: UntagResourceRequest
      properties: {}
      description: Removes a tag from a given resource.
    UpdateAccountRequest:
      type: object
      title: UpdateAccountRequest
      properties:
        patchOperations:
          $ref: '#/components/schemas/ListOfPatchOperation'
          description: A list of update operations to be applied to the specified resource and in the order specified in this list.
      description: Requests API Gateway to change information about the current <a>Account</a> resource.
    UpdateApiKeyRequest:
      type: object
      title: UpdateApiKeyRequest
      properties:
        patchOperations:
          $ref: '#/components/schemas/ListOfPatchOperation'
          description: A list of update operations to be applied to the specified resource and in the order specified in this list.
      description: A request to change information about an <a>ApiKey</a> resource.
    UpdateAuthorizerRequest:
      type: object
      title: UpdateAuthorizerRequest
      properties:
        patchOperations:
          $ref: '#/components/schemas/ListOfPatchOperation'
          description: A list of update operations to be applied to the specified resource and in the order specified in this list.
      description: Request to update an existing <a>Authorizer</a> resource.
    UpdateBasePathMappingRequest:
      type: object
      title: UpdateBasePathMappingRequest
      properties:
        patchOperations:
          $ref: '#/components/schemas/ListOfPatchOperation'
          description: A list of update operations to be applied to the specified resource and in the order specified in this list.
      description: A request to change information about the <a>BasePathMapping</a> resource.
    UpdateClientCertificateRequest:
      type: object
      title: UpdateClientCertificateRequest
      properties:
        patchOperations:
          $ref: '#/components/schemas/ListOfPatchOperation'
          description: A list of update operations to be applied to the specified resource and in the order specified in this list.
      description: A request to change information about an <a>ClientCertificate</a> resource.
    UpdateDeploymentRequest:
      type: object
      title: UpdateDeploymentRequest
      properties:
        patchOperations:
          $ref: '#/components/schemas/ListOfPatchOperation'
          description: A list of update operations to be applied to the specified resource and in the order specified in this list.
      description: Requests API Gateway to change information about a <a>Deployment</a> resource.
    UpdateDocumentationPartRequest:
      type: object
      title: UpdateDocumentationPartRequest
      properties:
        patchOperations:
          $ref: '#/components/schemas/ListOfPatchOperation'
          description: A list of update operations to be applied to the specified resource and in the order specified in this list.
      description: Updates an existing documentation part of a given API.
    UpdateDocumentationVersionRequest:
      type: object
      title: UpdateDocumentationVersionRequest
      properties:
        patchOperations:
          $ref: '#/components/schemas/ListOfPatchOperation'
          description: A list of update operations to be applied to the specified resource and in the order specified in this list.
      description: Updates an existing documentation version of an API.
    UpdateDomainNameRequest:
      type: object
      title: UpdateDomainNameRequest
      properties:
        patchOperations:
          $ref: '#/components/schemas/ListOfPatchOperation'
          description: A list of update operations to be applied to the specified resource and in the order specified in this list.
      description: A request to change information about the <a>DomainName</a> resource.
    UpdateGatewayResponseRequest:
      type: object
      title: UpdateGatewayResponseRequest
      properties:
        patchOperations:
          $ref: '#/components/schemas/ListOfPatchOperation'
          description: A list of update operations to be applied to the specified resource and in the order specified in this list.
      description: Updates a <a>GatewayResponse</a> of a specified response type on the given <a>RestApi</a>.
    UpdateIntegrationRequest:
      type: object
      title: UpdateIntegrationRequest
      properties:
        patchOperations:
          $ref: '#/components/schemas/ListOfPatchOperation'
          description: A list of update operations to be applied to the specified resource and in the order specified in this list.
      description: Represents an update integration request.
    UpdateIntegrationResponseRequest:
      type: object
      title: UpdateIntegrationResponseRequest
      properties:
        patchOperations:
          $ref: '#/components/schemas/ListOfPatchOperation'
          description: A list of update operations to be applied to the specified resource and in the order specified in this list.
      description: Represents an update integration response request.
    UpdateMethodRequest:
      type: object
      title: UpdateMethodRequest
      properties:
        patchOperations:
          $ref: '#/components/schemas/ListOfPatchOperation'
          description: A list of update operations to be applied to the specified resource and in the order specified in this list.
      description: Request to update an existing <a>Method</a> resource.
    UpdateMethodResponseRequest:
      type: object
      title: UpdateMethodResponseRequest
      properties:
        patchOperations:
          $ref: '#/components/schemas/ListOfPatchOperation'
          description: A list of update operations to be applied to the specified resource and in the order specified in this list.
      description: A request to update an existing <a>MethodResponse</a> resource.
    UpdateModelRequest:
      type: object
      title: UpdateModelRequest
      properties:
        patchOperations:
          $ref: '#/components/schemas/ListOfPatchOperation'
          description: A list of update operations to be applied to the specified resource and in the order specified in this list.
      description: Request to update an existing model in an existing <a>RestApi</a> resource.
    UpdateRequestValidatorRequest:
      type: object
      title: UpdateRequestValidatorRequest
      properties:
        patchOperations:
          $ref: '#/components/schemas/ListOfPatchOperation'
          description: A list of update operations to be applied to the specified resource and in the order specified in this list.
      description: Updates a <a>RequestValidator</a> of a given <a>RestApi</a>.
    UpdateResourceRequest:
      type: object
      title: UpdateResourceRequest
      properties:
        patchOperations:
          $ref: '#/components/schemas/ListOfPatchOperation'
          description: A list of update operations to be applied to the specified resource and in the order specified in this list.
      description: Request to change information about a <a>Resource</a> resource.
    UpdateRestApiRequest:
      type: object
      title: UpdateRestApiRequest
      properties:
        patchOperations:
          $ref: '#/components/schemas/ListOfPatchOperation'
          description: A list of update operations to be applied to the specified resource and in the order specified in this list.
      description: Request to update an existing <a>RestApi</a> resource in your collection.
    UpdateStageRequest:
      type: object
      title: UpdateStageRequest
      properties:
        patchOperations:
          $ref: '#/components/schemas/ListOfPatchOperation'
          description: A list of update operations to be applied to the specified resource and in the order specified in this list.
      description: Requests API Gateway to change information about a <a>Stage</a> resource.
    UpdateUsagePlanRequest:
      type: object
      title: UpdateUsagePlanRequest
      properties:
        patchOperations:
          $ref: '#/components/schemas/ListOfPatchOperation'
          description: A list of update operations to be applied to the specified resource and in the order specified in this list.
      description: The PATCH request to update a usage plan of a given plan Id.
    UpdateUsageRequest:
      type: object
      title: UpdateUsageRequest
      properties:
        patchOperations:
          $ref: '#/components/schemas/ListOfPatchOperation'
          description: A list of update operations to be applied to the specified resource and in the order specified in this list.
      description: The PATCH request to grant a temporary extension to the remaining quota of a usage plan associated with a specified API key.
    UpdateVpcLinkRequest:
      type: object
      title: UpdateVpcLinkRequest
      properties:
        patchOperations:
          $ref: '#/components/schemas/ListOfPatchOperation'
          description: A list of update operations to be applied to the specified resource and in the order specified in this list.
      description: Updates an existing <a>VpcLink</a> of a specified identifier.
    VpcLinkStatus:
      type: string
      enum:
        - AVAILABLE
        - PENDING
        - DELETING
        - FAILED
security:
  - hmac: []

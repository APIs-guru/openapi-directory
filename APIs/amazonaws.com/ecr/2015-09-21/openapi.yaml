openapi: 3.0.0
info:
  version: '2015-09-21'
  x-release: v4
  title: Amazon EC2 Container Registry
  description: '<fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p>'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: ecr
  x-aws-signingName: ecr
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/ecr-2015-09-21.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/ecr/'
servers:
  - url: 'http://api.ecr.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Amazon ECR multi-region endpoint
  - url: 'https://api.ecr.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Amazon ECR multi-region endpoint
  - url: 'http://api.ecr.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon ECR endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://api.ecr.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon ECR endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchCheckLayerAvailability:
    post:
      operationId: BatchCheckLayerAvailability
      description: '<p>Checks the availability of one or more image layers in a repository.</p> <p>When an image is pushed to a repository, each image layer is checked to verify if it has been uploaded before. If it has been uploaded, then the image layer is skipped.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCheckLayerAvailabilityResponse'
        '480':
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCheckLayerAvailabilityRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.BatchCheckLayerAvailability
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchDeleteImage:
    post:
      operationId: BatchDeleteImage
      description: '<p>Deletes a list of specified images within a repository. Images are specified with either an <code>imageTag</code> or <code>imageDigest</code>.</p> <p>You can remove a tag from an image by specifying the image''s tag in your request. When you remove the last tag from an image, the image is deleted from your repository.</p> <p>You can completely delete an image (and all of its tags) by specifying the image''s digest in your request.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDeleteImageResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchDeleteImageRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.BatchDeleteImage
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchGetImage:
    post:
      operationId: BatchGetImage
      description: '<p>Gets detailed information for an image. Images are specified with either an <code>imageTag</code> or <code>imageDigest</code>.</p> <p>When an image is pulled, the BatchGetImage API is called once to retrieve the image manifest.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchGetImageResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchGetImageRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.BatchGetImage
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.CompleteLayerUpload:
    post:
      operationId: CompleteLayerUpload
      description: '<p>Informs Amazon ECR that the image layer upload has completed for a specified registry, repository name, and upload ID. You can optionally provide a <code>sha256</code> digest of the image layer for data validation purposes.</p> <p>When an image is pushed, the CompleteLayerUpload API is called once per each new image layer to verify that the upload has completed.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompleteLayerUploadResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
        '483':
          description: UploadNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadNotFoundException'
        '484':
          description: InvalidLayerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLayerException'
        '485':
          description: LayerPartTooSmallException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayerPartTooSmallException'
        '486':
          description: LayerAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayerAlreadyExistsException'
        '487':
          description: EmptyUploadException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyUploadException'
        '488':
          description: KmsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KmsException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteLayerUploadRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.CompleteLayerUpload
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.CreateRepository:
    post:
      operationId: CreateRepository
      description: 'Creates a repository. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/Repositories.html">Amazon ECR Repositories</a> in the <i>Amazon Elastic Container Registry User Guide</i>.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRepositoryResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: InvalidTagParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagParameterException'
        '483':
          description: TooManyTagsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
        '484':
          description: RepositoryAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryAlreadyExistsException'
        '485':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '486':
          description: KmsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KmsException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRepositoryRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.CreateRepository
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteLifecyclePolicy:
    post:
      operationId: DeleteLifecyclePolicy
      description: Deletes the lifecycle policy associated with the specified repository.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteLifecyclePolicyResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
        '483':
          description: LifecyclePolicyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LifecyclePolicyNotFoundException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteLifecyclePolicyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.DeleteLifecyclePolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteRegistryPolicy:
    post:
      operationId: DeleteRegistryPolicy
      description: Deletes the registry permissions policy.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRegistryPolicyResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: RegistryPolicyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistryPolicyNotFoundException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRegistryPolicyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.DeleteRegistryPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteRepository:
    post:
      operationId: DeleteRepository
      description: 'Deletes a repository. If the repository contains images, you must either delete all images in the repository or use the <code>force</code> option to delete the repository.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRepositoryResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
        '483':
          description: RepositoryNotEmptyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotEmptyException'
        '484':
          description: KmsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KmsException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRepositoryRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.DeleteRepository
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteRepositoryPolicy:
    post:
      operationId: DeleteRepositoryPolicy
      description: Deletes the repository policy associated with the specified repository.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRepositoryPolicyResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
        '483':
          description: RepositoryPolicyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryPolicyNotFoundException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRepositoryPolicyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.DeleteRepositoryPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeImageScanFindings:
    post:
      operationId: DescribeImageScanFindings
      description: Returns the scan findings for the specified image.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeImageScanFindingsResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
        '483':
          description: ImageNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageNotFoundException'
        '484':
          description: ScanNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanNotFoundException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeImageScanFindingsRequest'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.DescribeImageScanFindings
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeImages:
    post:
      operationId: DescribeImages
      description: '<p>Returns metadata about the images in a repository.</p> <note> <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it may return a larger image size than the image sizes returned by <a>DescribeImages</a>.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeImagesResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
        '483':
          description: ImageNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageNotFoundException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeImagesRequest'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.DescribeImages
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeRegistry:
    post:
      operationId: DescribeRegistry
      description: Describes the settings for a registry. The replication configuration for a repository can be created or updated with the <a>PutReplicationConfiguration</a> API action.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeRegistryResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeRegistryRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.DescribeRegistry
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeRepositories:
    post:
      operationId: DescribeRepositories
      description: Describes image repositories in a registry.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeRepositoriesResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeRepositoriesRequest'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.DescribeRepositories
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetAuthorizationToken:
    post:
      operationId: GetAuthorizationToken
      description: '<p>Retrieves an authorization token. An authorization token represents your IAM authentication credentials and can be used to access any Amazon ECR registry that your IAM principal has access to. The authorization token is valid for 12 hours.</p> <p>The <code>authorizationToken</code> returned is a base64 encoded string that can be decoded and used in a <code>docker login</code> command to authenticate to a registry. The AWS CLI offers an <code>get-login-password</code> command that simplifies the login process. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html#registry_auth">Registry Authentication</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAuthorizationTokenResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAuthorizationTokenRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.GetAuthorizationToken
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetDownloadUrlForLayer:
    post:
      operationId: GetDownloadUrlForLayer
      description: '<p>Retrieves the pre-signed Amazon S3 download URL corresponding to an image layer. You can only get URLs for image layers that are referenced in an image.</p> <p>When an image is pulled, the GetDownloadUrlForLayer API is called once per image layer that is not already cached.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDownloadUrlForLayerResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: LayersNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayersNotFoundException'
        '483':
          description: LayerInaccessibleException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayerInaccessibleException'
        '484':
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetDownloadUrlForLayerRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.GetDownloadUrlForLayer
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicy:
    post:
      operationId: GetLifecyclePolicy
      description: Retrieves the lifecycle policy for the specified repository.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLifecyclePolicyResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
        '483':
          description: LifecyclePolicyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LifecyclePolicyNotFoundException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetLifecyclePolicyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicyPreview:
    post:
      operationId: GetLifecyclePolicyPreview
      description: Retrieves the results of the lifecycle policy preview request for the specified repository.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLifecyclePolicyPreviewResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
        '483':
          description: LifecyclePolicyPreviewNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LifecyclePolicyPreviewNotFoundException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetLifecyclePolicyPreviewRequest'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicyPreview
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetRegistryPolicy:
    post:
      operationId: GetRegistryPolicy
      description: Retrieves the permissions policy for a registry.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRegistryPolicyResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: RegistryPolicyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistryPolicyNotFoundException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetRegistryPolicyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.GetRegistryPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetRepositoryPolicy:
    post:
      operationId: GetRepositoryPolicy
      description: Retrieves the repository policy for the specified repository.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRepositoryPolicyResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
        '483':
          description: RepositoryPolicyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryPolicyNotFoundException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetRepositoryPolicyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.GetRepositoryPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.InitiateLayerUpload:
    post:
      operationId: InitiateLayerUpload
      description: '<p>Notifies Amazon ECR that you intend to upload an image layer.</p> <p>When an image is pushed, the InitiateLayerUpload API is called once per image layer that has not already been uploaded. Whether or not an image layer has been uploaded is determined by the BatchCheckLayerAvailability API action.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitiateLayerUploadResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
        '483':
          description: KmsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KmsException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitiateLayerUploadRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.InitiateLayerUpload
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.ListImages:
    post:
      operationId: ListImages
      description: '<p>Lists all the image IDs for the specified repository.</p> <p>You can filter images based on whether or not they are tagged by using the <code>tagStatus</code> filter and specifying either <code>TAGGED</code>, <code>UNTAGGED</code> or <code>ANY</code>. For example, you can filter your results to return only <code>UNTAGGED</code> images and then pipe that result to a <a>BatchDeleteImage</a> operation to delete them. Or, you can filter your results to return only <code>TAGGED</code> images to list all of the tags in your repository.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListImagesResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListImagesRequest'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.ListImages
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.ListTagsForResource:
    post:
      operationId: ListTagsForResource
      description: List the tags for an Amazon ECR resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
        '482':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTagsForResourceRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.ListTagsForResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutImage:
    post:
      operationId: PutImage
      description: '<p>Creates or updates the image manifest and tags associated with an image.</p> <p>When an image is pushed and all new image layers have been uploaded, the PutImage API is called once to create or update the image manifest and the tags associated with the image.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutImageResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
        '483':
          description: ImageAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageAlreadyExistsException'
        '484':
          description: LayersNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayersNotFoundException'
        '485':
          description: ReferencedImagesNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferencedImagesNotFoundException'
        '486':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '487':
          description: ImageTagAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageTagAlreadyExistsException'
        '488':
          description: ImageDigestDoesNotMatchException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageDigestDoesNotMatchException'
        '489':
          description: KmsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KmsException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutImageRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.PutImage
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutImageScanningConfiguration:
    post:
      operationId: PutImageScanningConfiguration
      description: Updates the image scanning configuration for the specified repository.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutImageScanningConfigurationResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutImageScanningConfigurationRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.PutImageScanningConfiguration
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutImageTagMutability:
    post:
      operationId: PutImageTagMutability
      description: 'Updates the image tag mutability settings for the specified repository. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-tag-mutability.html">Image Tag Mutability</a> in the <i>Amazon Elastic Container Registry User Guide</i>.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutImageTagMutabilityResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutImageTagMutabilityRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.PutImageTagMutability
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutLifecyclePolicy:
    post:
      operationId: PutLifecyclePolicy
      description: 'Creates or updates the lifecycle policy for the specified repository. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html">Lifecycle Policy Template</a>.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutLifecyclePolicyResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutLifecyclePolicyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.PutLifecyclePolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutRegistryPolicy:
    post:
      operationId: PutRegistryPolicy
      description: '<p>Creates or updates the permissions policy for your registry.</p> <p>A registry policy is used to specify permissions for another AWS account and is used when configuring cross-account replication. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/registry-permissions.html">Registry permissions</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutRegistryPolicyResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutRegistryPolicyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.PutRegistryPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutReplicationConfiguration:
    post:
      operationId: PutReplicationConfiguration
      description: '<p>Creates or updates the replication configuration for a registry. The existing replication configuration for a repository can be retrieved with the <a>DescribeRegistry</a> API action. The first time the PutReplicationConfiguration API is called, a service-linked IAM role is created in your account for the replication process. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/using-service-linked-roles.html">Using Service-Linked Roles for Amazon ECR</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p> <note> <p>When configuring cross-account replication, the destination account must grant the source account permission to replicate. This permission is controlled using a registry permissions policy. For more information, see <a>PutRegistryPolicy</a>.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutReplicationConfigurationResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutReplicationConfigurationRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.PutReplicationConfiguration
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.SetRepositoryPolicy:
    post:
      operationId: SetRepositoryPolicy
      description: 'Applies a repository policy to the specified repository to control access permissions. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policies.html">Amazon ECR Repository Policies</a> in the <i>Amazon Elastic Container Registry User Guide</i>.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetRepositoryPolicyResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetRepositoryPolicyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.SetRepositoryPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.StartImageScan:
    post:
      operationId: StartImageScan
      description: 'Starts an image vulnerability scan. An image scan can only be started once per day on an individual image. This limit includes if an image was scanned on initial push. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html">Image Scanning</a> in the <i>Amazon Elastic Container Registry User Guide</i>.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartImageScanResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: UnsupportedImageTypeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedImageTypeException'
        '483':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '484':
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
        '485':
          description: ImageNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageNotFoundException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartImageScanRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.StartImageScan
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.StartLifecyclePolicyPreview:
    post:
      operationId: StartLifecyclePolicyPreview
      description: Starts a preview of a lifecycle policy for the specified repository. This allows you to see the results before associating the lifecycle policy with the repository.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartLifecyclePolicyPreviewResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
        '483':
          description: LifecyclePolicyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LifecyclePolicyNotFoundException'
        '484':
          description: LifecyclePolicyPreviewInProgressException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LifecyclePolicyPreviewInProgressException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartLifecyclePolicyPreviewRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.StartLifecyclePolicyPreview
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.TagResource:
    post:
      operationId: TagResource
      description: Adds specified tags to a resource with the specified ARN. Existing tags on a resource are not changed if they are not specified in the request parameters.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: InvalidTagParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagParameterException'
        '482':
          description: TooManyTagsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
        '483':
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
        '484':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResourceRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.TagResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.UntagResource:
    post:
      operationId: UntagResource
      description: Deletes specified tags from a resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: InvalidTagParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagParameterException'
        '482':
          description: TooManyTagsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
        '483':
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
        '484':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UntagResourceRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.UntagResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.UploadLayerPart:
    post:
      operationId: UploadLayerPart
      description: '<p>Uploads an image layer part to Amazon ECR.</p> <p>When an image is pushed, each new image layer is uploaded in parts. The maximum size of each image layer part can be 20971520 bytes (or about 20MB). The UploadLayerPart API is called once per each new image layer part.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadLayerPartResponse'
        '480':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: InvalidLayerPartException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLayerPartException'
        '483':
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
        '484':
          description: UploadNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadNotFoundException'
        '485':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '486':
          description: KmsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KmsException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadLayerPartRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.UploadLayerPart
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    BatchCheckLayerAvailabilityResponse:
      type: object
      properties:
        layers:
          $ref: '#/components/schemas/LayerList'
          description: A list of image layer objects corresponding to the image layer references in the request.
        failures:
          $ref: '#/components/schemas/LayerFailureList'
          description: Any failures associated with the call.
    BatchCheckLayerAvailabilityRequest:
      type: object
      required:
        - repositoryName
        - layerDigests
      title: BatchCheckLayerAvailabilityRequest
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: 'The AWS account ID associated with the registry that contains the image layers to check. If you do not specify a registry, the default registry is assumed.'
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that is associated with the image layers to check.
        layerDigests:
          $ref: '#/components/schemas/BatchedOperationLayerDigestList'
          description: The digests of the image layers to check.
    RepositoryNotFoundException: {}
    InvalidParameterException: {}
    ServerException: {}
    BatchDeleteImageResponse:
      type: object
      example:
        failures: []
        imageIds:
          - imageDigest: 'sha256:examplee6d1e504117a17000003d3753086354a38375961f2e665416ef4b1b2f'
            imageTag: precise
      properties:
        imageIds:
          $ref: '#/components/schemas/ImageIdentifierList'
          description: The image IDs of the deleted images.
        failures:
          $ref: '#/components/schemas/ImageFailureList'
          description: Any failures associated with the call.
    BatchDeleteImageRequest:
      type: object
      required:
        - repositoryName
        - imageIds
      title: BatchDeleteImageRequest
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: 'The AWS account ID associated with the registry that contains the image to delete. If you do not specify a registry, the default registry is assumed.'
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The repository that contains the image to delete.
        imageIds:
          $ref: '#/components/schemas/ImageIdentifierList'
          description: A list of image ID references that correspond to images to delete. The format of the <code>imageIds</code> reference is <code>imageTag=tag</code> or <code>imageDigest=digest</code>.
      description: Deletes specified images within a specified repository. Images are specified with either the <code>imageTag</code> or <code>imageDigest</code>.
    BatchGetImageResponse:
      type: object
      example:
        failures: []
        images:
          - imageId:
              imageDigest: 'sha256:example76bdff6d83a09ba2a818f0d00000063724a9ac3ba5019c56f74ebf42a'
              imageTag: precise
            imageManifest: |-
              {
               "schemaVersion": 1,
               "name": "ubuntu",
               "tag": "precise",
              ...
            registryId: '244698725403'
            repositoryName: ubuntu
      properties:
        images:
          $ref: '#/components/schemas/ImageList'
          description: A list of image objects corresponding to the image references in the request.
        failures:
          $ref: '#/components/schemas/ImageFailureList'
          description: Any failures associated with the call.
    BatchGetImageRequest:
      type: object
      required:
        - repositoryName
        - imageIds
      title: BatchGetImageRequest
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: 'The AWS account ID associated with the registry that contains the images to describe. If you do not specify a registry, the default registry is assumed.'
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The repository that contains the images to describe.
        imageIds:
          $ref: '#/components/schemas/ImageIdentifierList'
          description: A list of image ID references that correspond to images to describe. The format of the <code>imageIds</code> reference is <code>imageTag=tag</code> or <code>imageDigest=digest</code>.
        acceptedMediaTypes:
          $ref: '#/components/schemas/MediaTypeList'
          description: '<p>The accepted media types for the request.</p> <p>Valid values: <code>application/vnd.docker.distribution.manifest.v1+json</code> | <code>application/vnd.docker.distribution.manifest.v2+json</code> | <code>application/vnd.oci.image.manifest.v1+json</code> </p>'
    CompleteLayerUploadResponse:
      type: object
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: The registry ID associated with the request.
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The repository name associated with the request.
        uploadId:
          $ref: '#/components/schemas/UploadId'
          description: The upload ID associated with the layer.
        layerDigest:
          $ref: '#/components/schemas/LayerDigest'
          description: The <code>sha256</code> digest of the image layer.
    CompleteLayerUploadRequest:
      type: object
      required:
        - repositoryName
        - uploadId
        - layerDigests
      title: CompleteLayerUploadRequest
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: 'The AWS account ID associated with the registry to which to upload layers. If you do not specify a registry, the default registry is assumed.'
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository to associate with the image layer.
        uploadId:
          $ref: '#/components/schemas/UploadId'
          description: The upload ID from a previous <a>InitiateLayerUpload</a> operation to associate with the image layer.
        layerDigests:
          $ref: '#/components/schemas/LayerDigestList'
          description: The <code>sha256</code> digest of the image layer.
    UploadNotFoundException: {}
    InvalidLayerException: {}
    LayerPartTooSmallException: {}
    LayerAlreadyExistsException: {}
    EmptyUploadException: {}
    KmsException: {}
    CreateRepositoryResponse:
      type: object
      example:
        repository:
          registryId: 012345678901
          repositoryArn: 'arn:aws:ecr:us-west-2:012345678901:repository/project-a/nginx-web-app'
          repositoryName: project-a/nginx-web-app
      properties:
        repository:
          $ref: '#/components/schemas/Repository'
          description: The repository that was created.
    CreateRepositoryRequest:
      type: object
      required:
        - repositoryName
      title: CreateRepositoryRequest
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name to use for the repository. The repository name may be specified on its own (such as <code>nginx-web-app</code>) or it can be prepended with a namespace to group the repository into a category (such as <code>project-a/nginx-web-app</code>).
        tags:
          $ref: '#/components/schemas/TagList'
          description: 'The metadata that you apply to the repository to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.'
        imageTagMutability:
          $ref: '#/components/schemas/ImageTagMutability'
          description: 'The tag mutability setting for the repository. If this parameter is omitted, the default setting of <code>MUTABLE</code> will be used which will allow image tags to be overwritten. If <code>IMMUTABLE</code> is specified, all image tags within the repository will be immutable which will prevent them from being overwritten.'
        imageScanningConfiguration:
          $ref: '#/components/schemas/ImageScanningConfiguration'
          description: The image scanning configuration for the repository. This determines whether images are scanned for known vulnerabilities after being pushed to the repository.
        encryptionConfiguration:
          $ref: '#/components/schemas/EncryptionConfiguration'
          description: The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest.
    InvalidTagParameterException: {}
    TooManyTagsException: {}
    RepositoryAlreadyExistsException: {}
    LimitExceededException: {}
    DeleteLifecyclePolicyResponse:
      type: object
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: The registry ID associated with the request.
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The repository name associated with the request.
        lifecyclePolicyText:
          $ref: '#/components/schemas/LifecyclePolicyText'
          description: The JSON lifecycle policy text.
        lastEvaluatedAt:
          $ref: '#/components/schemas/EvaluationTimestamp'
          description: The time stamp of the last time that the lifecycle policy was run.
    DeleteLifecyclePolicyRequest:
      type: object
      required:
        - repositoryName
      title: DeleteLifecyclePolicyRequest
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: 'The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.'
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository.
    LifecyclePolicyNotFoundException: {}
    DeleteRegistryPolicyResponse:
      type: object
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: The registry ID associated with the request.
        policyText:
          $ref: '#/components/schemas/RegistryPolicyText'
          description: The contents of the registry permissions policy that was deleted.
    DeleteRegistryPolicyRequest:
      type: object
      title: DeleteRegistryPolicyRequest
      properties: {}
    RegistryPolicyNotFoundException: {}
    DeleteRepositoryResponse:
      type: object
      example:
        repository:
          registryId: 012345678901
          repositoryArn: 'arn:aws:ecr:us-west-2:012345678901:repository/ubuntu'
          repositoryName: ubuntu
      properties:
        repository:
          $ref: '#/components/schemas/Repository'
          description: The repository that was deleted.
    DeleteRepositoryRequest:
      type: object
      required:
        - repositoryName
      title: DeleteRepositoryRequest
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: 'The AWS account ID associated with the registry that contains the repository to delete. If you do not specify a registry, the default registry is assumed.'
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository to delete.
        force:
          $ref: '#/components/schemas/ForceFlag'
          description: ' If a repository contains images, forces the deletion.'
    RepositoryNotEmptyException: {}
    DeleteRepositoryPolicyResponse:
      type: object
      example:
        policyText: '{ ... }'
        registryId: 012345678901
        repositoryName: ubuntu
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: The registry ID associated with the request.
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The repository name associated with the request.
        policyText:
          $ref: '#/components/schemas/RepositoryPolicyText'
          description: The JSON repository policy that was deleted from the repository.
    DeleteRepositoryPolicyRequest:
      type: object
      required:
        - repositoryName
      title: DeleteRepositoryPolicyRequest
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: 'The AWS account ID associated with the registry that contains the repository policy to delete. If you do not specify a registry, the default registry is assumed.'
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that is associated with the repository policy to delete.
    RepositoryPolicyNotFoundException: {}
    DescribeImageScanFindingsResponse:
      type: object
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: The registry ID associated with the request.
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The repository name associated with the request.
        imageId:
          $ref: '#/components/schemas/ImageIdentifier'
        imageScanStatus:
          $ref: '#/components/schemas/ImageScanStatus'
          description: The current state of the scan.
        imageScanFindings:
          $ref: '#/components/schemas/ImageScanFindings'
          description: The information contained in the image scan findings.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'The <code>nextToken</code> value to include in a future <code>DescribeImageScanFindings</code> request. When the results of a <code>DescribeImageScanFindings</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.'
    DescribeImageScanFindingsRequest:
      type: object
      required:
        - repositoryName
        - imageId
      title: DescribeImageScanFindingsRequest
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: 'The AWS account ID associated with the registry that contains the repository in which to describe the image scan findings for. If you do not specify a registry, the default registry is assumed.'
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The repository for the image for which to describe the scan findings.
        imageId:
          $ref: '#/components/schemas/ImageIdentifier'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: The <code>nextToken</code> value returned from a previous paginated <code>DescribeImageScanFindings</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is null when there are no more results to return.
        maxResults:
          $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of image scan results returned by <code>DescribeImageScanFindings</code> in paginated output. When this parameter is used, <code>DescribeImageScanFindings</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeImageScanFindings</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 1000. If this parameter is not used, then <code>DescribeImageScanFindings</code> returns up to 100 results and a <code>nextToken</code> value, if applicable.'
    ImageNotFoundException: {}
    ScanNotFoundException: {}
    DescribeImagesResponse:
      type: object
      properties:
        imageDetails:
          $ref: '#/components/schemas/ImageDetailList'
          description: A list of <a>ImageDetail</a> objects that contain data about the image.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'The <code>nextToken</code> value to include in a future <code>DescribeImages</code> request. When the results of a <code>DescribeImages</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.'
    DescribeImagesRequest:
      type: object
      required:
        - repositoryName
      title: DescribeImagesRequest
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: 'The AWS account ID associated with the registry that contains the repository in which to describe images. If you do not specify a registry, the default registry is assumed.'
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The repository that contains the images to describe.
        imageIds:
          $ref: '#/components/schemas/ImageIdentifierList'
          description: The list of image IDs for the requested repository.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: The <code>nextToken</code> value returned from a previous paginated <code>DescribeImages</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code> when there are no more results to return. This option cannot be used when you specify images with <code>imageIds</code>.
        maxResults:
          $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of repository results returned by <code>DescribeImages</code> in paginated output. When this parameter is used, <code>DescribeImages</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeImages</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 1000. If this parameter is not used, then <code>DescribeImages</code> returns up to 100 results and a <code>nextToken</code> value, if applicable. This option cannot be used when you specify images with <code>imageIds</code>.'
        filter:
          $ref: '#/components/schemas/DescribeImagesFilter'
          description: The filter key and value with which to filter your <code>DescribeImages</code> results.
    DescribeRegistryResponse:
      type: object
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: The ID of the registry.
        replicationConfiguration:
          $ref: '#/components/schemas/ReplicationConfiguration'
          description: The replication configuration for the registry.
    DescribeRegistryRequest:
      type: object
      title: DescribeRegistryRequest
      properties: {}
    ValidationException: {}
    DescribeRepositoriesResponse:
      type: object
      example:
        repositories:
          - registryId: 012345678910
            repositoryArn: 'arn:aws:ecr:us-west-2:012345678910:repository/ubuntu'
            repositoryName: ubuntu
          - registryId: 012345678910
            repositoryArn: 'arn:aws:ecr:us-west-2:012345678910:repository/test'
            repositoryName: test
      properties:
        repositories:
          $ref: '#/components/schemas/RepositoryList'
          description: A list of repository objects corresponding to valid repositories.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'The <code>nextToken</code> value to include in a future <code>DescribeRepositories</code> request. When the results of a <code>DescribeRepositories</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.'
    DescribeRepositoriesRequest:
      type: object
      title: DescribeRepositoriesRequest
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: 'The AWS account ID associated with the registry that contains the repositories to be described. If you do not specify a registry, the default registry is assumed.'
        repositoryNames:
          $ref: '#/components/schemas/RepositoryNameList'
          description: 'A list of repositories to describe. If this parameter is omitted, then all repositories in a registry are described.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: <p>The <code>nextToken</code> value returned from a previous paginated <code>DescribeRepositories</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code> when there are no more results to return. This option cannot be used when you specify repositories with <code>repositoryNames</code>.</p> <note> <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p> </note>
        maxResults:
          $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of repository results returned by <code>DescribeRepositories</code> in paginated output. When this parameter is used, <code>DescribeRepositories</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeRepositories</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 1000. If this parameter is not used, then <code>DescribeRepositories</code> returns up to 100 results and a <code>nextToken</code> value, if applicable. This option cannot be used when you specify repositories with <code>repositoryNames</code>.'
    GetAuthorizationTokenResponse:
      type: object
      example:
        authorizationData:
          - authorizationToken: QVdTOkN...
            expiresAt: '1470951892432'
            proxyEndpoint: 'https://012345678901.dkr.ecr.us-west-2.amazonaws.com'
      properties:
        authorizationData:
          $ref: '#/components/schemas/AuthorizationDataList'
          description: A list of authorization token data objects that correspond to the <code>registryIds</code> values in the request.
    GetAuthorizationTokenRequest:
      type: object
      title: GetAuthorizationTokenRequest
      properties:
        registryIds:
          allOf:
            - $ref: '#/components/schemas/GetAuthorizationTokenRegistryIdList'
            - deprecated: true
              description: 'A list of AWS account IDs that are associated with the registries for which to get AuthorizationData objects. If you do not specify a registry, the default registry is assumed.This field is deprecated. The returned authorization token can be used to access any Amazon ECR registry that the IAM principal has access to, specifying a registry ID doesn''t change the permissions scope of the authorization token.'
    GetDownloadUrlForLayerResponse:
      type: object
      properties:
        downloadUrl:
          $ref: '#/components/schemas/Url'
          description: The pre-signed Amazon S3 download URL for the requested layer.
        layerDigest:
          $ref: '#/components/schemas/LayerDigest'
          description: The digest of the image layer to download.
    GetDownloadUrlForLayerRequest:
      type: object
      required:
        - repositoryName
        - layerDigest
      title: GetDownloadUrlForLayerRequest
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: 'The AWS account ID associated with the registry that contains the image layer to download. If you do not specify a registry, the default registry is assumed.'
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that is associated with the image layer to download.
        layerDigest:
          $ref: '#/components/schemas/LayerDigest'
          description: The digest of the image layer to download.
    LayersNotFoundException: {}
    LayerInaccessibleException: {}
    GetLifecyclePolicyResponse:
      type: object
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: The registry ID associated with the request.
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The repository name associated with the request.
        lifecyclePolicyText:
          $ref: '#/components/schemas/LifecyclePolicyText'
          description: The JSON lifecycle policy text.
        lastEvaluatedAt:
          $ref: '#/components/schemas/EvaluationTimestamp'
          description: The time stamp of the last time that the lifecycle policy was run.
    GetLifecyclePolicyRequest:
      type: object
      required:
        - repositoryName
      title: GetLifecyclePolicyRequest
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: 'The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.'
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository.
    GetLifecyclePolicyPreviewResponse:
      type: object
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: The registry ID associated with the request.
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The repository name associated with the request.
        lifecyclePolicyText:
          $ref: '#/components/schemas/LifecyclePolicyText'
          description: The JSON lifecycle policy text.
        status:
          $ref: '#/components/schemas/LifecyclePolicyPreviewStatus'
          description: The status of the lifecycle policy preview request.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'The <code>nextToken</code> value to include in a future <code>GetLifecyclePolicyPreview</code> request. When the results of a <code>GetLifecyclePolicyPreview</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.'
        previewResults:
          $ref: '#/components/schemas/LifecyclePolicyPreviewResultList'
          description: The results of the lifecycle policy preview request.
        summary:
          $ref: '#/components/schemas/LifecyclePolicyPreviewSummary'
          description: The list of images that is returned as a result of the action.
    GetLifecyclePolicyPreviewRequest:
      type: object
      required:
        - repositoryName
      title: GetLifecyclePolicyPreviewRequest
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: 'The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.'
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository.
        imageIds:
          $ref: '#/components/schemas/ImageIdentifierList'
          description: The list of imageIDs to be included.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: The <code>nextToken</code> value returned from a previous paginated&#x2028; <code>GetLifecyclePolicyPreviewRequest</code> request where <code>maxResults</code> was used and the&#x2028; results exceeded the value of that parameter. Pagination continues from the end of the&#x2028; previous results that returned the <code>nextToken</code> value. This value is&#x2028; <code>null</code> when there are no more results to return. This option cannot be used when you specify images with <code>imageIds</code>.
        maxResults:
          $ref: '#/components/schemas/LifecyclePreviewMaxResults'
          description: 'The maximum number of repository results returned by <code>GetLifecyclePolicyPreviewRequest</code> in&#x2028; paginated output. When this parameter is used, <code>GetLifecyclePolicyPreviewRequest</code> only returns&#x2028; <code>maxResults</code> results in a single page along with a <code>nextToken</code>&#x2028; response element. The remaining results of the initial request can be seen by sending&#x2028; another <code>GetLifecyclePolicyPreviewRequest</code> request with the returned <code>nextToken</code>&#x2028; value. This value can be between 1 and 1000. If this&#x2028; parameter is not used, then <code>GetLifecyclePolicyPreviewRequest</code> returns up to&#x2028; 100 results and a <code>nextToken</code> value, if&#x2028; applicable. This option cannot be used when you specify images with <code>imageIds</code>.'
        filter:
          $ref: '#/components/schemas/LifecyclePolicyPreviewFilter'
          description: 'An optional parameter that filters results based on image tag status and all tags, if tagged.'
    LifecyclePolicyPreviewNotFoundException: {}
    GetRegistryPolicyResponse:
      type: object
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: The ID of the registry.
        policyText:
          $ref: '#/components/schemas/RegistryPolicyText'
          description: The JSON text of the permissions policy for a registry.
    GetRegistryPolicyRequest:
      type: object
      title: GetRegistryPolicyRequest
      properties: {}
    GetRepositoryPolicyResponse:
      type: object
      example:
        policyText: |-
          {
            "Version" : "2008-10-17",
            "Statement" : [ {
              "Sid" : "new statement",
              "Effect" : "Allow",
              "Principal" : {
               "AWS" : "arn:aws:iam::012345678901:role/CodeDeployDemo"
              },
          "Action" : [ "ecr:GetDownloadUrlForLayer", "ecr:BatchGetImage", "ecr:BatchCheckLayerAvailability" ]
           } ]
          }
        registryId: 012345678901
        repositoryName: ubuntu
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: The registry ID associated with the request.
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The repository name associated with the request.
        policyText:
          $ref: '#/components/schemas/RepositoryPolicyText'
          description: The JSON repository policy text associated with the repository.
    GetRepositoryPolicyRequest:
      type: object
      required:
        - repositoryName
      title: GetRepositoryPolicyRequest
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: 'The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.'
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository with the policy to retrieve.
    InitiateLayerUploadResponse:
      type: object
      properties:
        uploadId:
          $ref: '#/components/schemas/UploadId'
          description: The upload ID for the layer upload. This parameter is passed to further <a>UploadLayerPart</a> and <a>CompleteLayerUpload</a> operations.
        partSize:
          $ref: '#/components/schemas/PartSize'
          description: 'The size, in bytes, that Amazon ECR expects future layer part uploads to be.'
    InitiateLayerUploadRequest:
      type: object
      required:
        - repositoryName
      title: InitiateLayerUploadRequest
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: 'The AWS account ID associated with the registry to which you intend to upload layers. If you do not specify a registry, the default registry is assumed.'
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository to which you intend to upload layers.
    ListImagesResponse:
      type: object
      example:
        imageIds:
          - imageDigest: 'sha256:764f63476bdff6d83a09ba2a818f0d35757063724a9ac3ba5019c56f74ebf42a'
            imageTag: precise
      properties:
        imageIds:
          $ref: '#/components/schemas/ImageIdentifierList'
          description: The list of image IDs for the requested repository.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'The <code>nextToken</code> value to include in a future <code>ListImages</code> request. When the results of a <code>ListImages</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.'
    ListImagesRequest:
      type: object
      required:
        - repositoryName
      title: ListImagesRequest
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: 'The AWS account ID associated with the registry that contains the repository in which to list images. If you do not specify a registry, the default registry is assumed.'
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The repository with image IDs to be listed.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: <p>The <code>nextToken</code> value returned from a previous paginated <code>ListImages</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code> when there are no more results to return.</p> <note> <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p> </note>
        maxResults:
          $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of image results returned by <code>ListImages</code> in paginated output. When this parameter is used, <code>ListImages</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>ListImages</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 1000. If this parameter is not used, then <code>ListImages</code> returns up to 100 results and a <code>nextToken</code> value, if applicable.'
        filter:
          $ref: '#/components/schemas/ListImagesFilter'
          description: The filter key and value with which to filter your <code>ListImages</code> results.
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          $ref: '#/components/schemas/TagList'
          description: The tags for the resource.
    ListTagsForResourceRequest:
      type: object
      required:
        - resourceArn
      title: ListTagsForResourceRequest
      properties:
        resourceArn:
          $ref: '#/components/schemas/Arn'
          description: 'The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. Currently, the only supported resource is an Amazon ECR repository.'
    PutImageResponse:
      type: object
      properties:
        image:
          $ref: '#/components/schemas/Image'
          description: Details of the image uploaded.
    PutImageRequest:
      type: object
      required:
        - repositoryName
        - imageManifest
      title: PutImageRequest
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: 'The AWS account ID associated with the registry that contains the repository in which to put the image. If you do not specify a registry, the default registry is assumed.'
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository in which to put the image.
        imageManifest:
          $ref: '#/components/schemas/ImageManifest'
          description: The image manifest corresponding to the image to be uploaded.
        imageManifestMediaType:
          $ref: '#/components/schemas/MediaType'
          description: 'The media type of the image manifest. If you push an image manifest that does not contain the <code>mediaType</code> field, you must specify the <code>imageManifestMediaType</code> in the request.'
        imageTag:
          $ref: '#/components/schemas/ImageTag'
          description: The tag to associate with the image. This parameter is required for images that use the Docker Image Manifest V2 Schema 2 or Open Container Initiative (OCI) formats.
        imageDigest:
          $ref: '#/components/schemas/ImageDigest'
          description: The image digest of the image manifest corresponding to the image.
    ImageAlreadyExistsException: {}
    ReferencedImagesNotFoundException: {}
    ImageTagAlreadyExistsException: {}
    ImageDigestDoesNotMatchException: {}
    PutImageScanningConfigurationResponse:
      type: object
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: The registry ID associated with the request.
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The repository name associated with the request.
        imageScanningConfiguration:
          $ref: '#/components/schemas/ImageScanningConfiguration'
          description: The image scanning configuration setting for the repository.
    PutImageScanningConfigurationRequest:
      type: object
      required:
        - repositoryName
        - imageScanningConfiguration
      title: PutImageScanningConfigurationRequest
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: 'The AWS account ID associated with the registry that contains the repository in which to update the image scanning configuration setting. If you do not specify a registry, the default registry is assumed.'
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository in which to update the image scanning configuration setting.
        imageScanningConfiguration:
          $ref: '#/components/schemas/ImageScanningConfiguration'
          description: The image scanning configuration for the repository. This setting determines whether images are scanned for known vulnerabilities after being pushed to the repository.
    PutImageTagMutabilityResponse:
      type: object
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: The registry ID associated with the request.
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The repository name associated with the request.
        imageTagMutability:
          $ref: '#/components/schemas/ImageTagMutability'
          description: The image tag mutability setting for the repository.
    PutImageTagMutabilityRequest:
      type: object
      required:
        - repositoryName
        - imageTagMutability
      title: PutImageTagMutabilityRequest
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: 'The AWS account ID associated with the registry that contains the repository in which to update the image tag mutability settings. If you do not specify a registry, the default registry is assumed.'
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository in which to update the image tag mutability settings.
        imageTagMutability:
          $ref: '#/components/schemas/ImageTagMutability'
          description: 'The tag mutability setting for the repository. If <code>MUTABLE</code> is specified, image tags can be overwritten. If <code>IMMUTABLE</code> is specified, all image tags within the repository will be immutable which will prevent them from being overwritten.'
    PutLifecyclePolicyResponse:
      type: object
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: The registry ID associated with the request.
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The repository name associated with the request.
        lifecyclePolicyText:
          $ref: '#/components/schemas/LifecyclePolicyText'
          description: The JSON repository policy text.
    PutLifecyclePolicyRequest:
      type: object
      required:
        - repositoryName
        - lifecyclePolicyText
      title: PutLifecyclePolicyRequest
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: 'The AWS account ID associated with the registry that contains the repository. If you do&#x2028; not specify a registry, the default registry is assumed.'
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository to receive the policy.
        lifecyclePolicyText:
          $ref: '#/components/schemas/LifecyclePolicyText'
          description: The JSON repository policy text to apply to the repository.
    PutRegistryPolicyResponse:
      type: object
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: The registry ID.
        policyText:
          $ref: '#/components/schemas/RegistryPolicyText'
          description: The JSON policy text for your registry.
    PutRegistryPolicyRequest:
      type: object
      required:
        - policyText
      title: PutRegistryPolicyRequest
      properties:
        policyText:
          $ref: '#/components/schemas/RegistryPolicyText'
          description: 'The JSON policy text to apply to your registry. The policy text follows the same format as IAM policy text. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/registry-permissions.html">Registry permissions</a> in the <i>Amazon Elastic Container Registry User Guide</i>.'
    PutReplicationConfigurationResponse:
      type: object
      properties:
        replicationConfiguration:
          $ref: '#/components/schemas/ReplicationConfiguration'
          description: The contents of the replication configuration for the registry.
    PutReplicationConfigurationRequest:
      type: object
      required:
        - replicationConfiguration
      title: PutReplicationConfigurationRequest
      properties:
        replicationConfiguration:
          $ref: '#/components/schemas/ReplicationConfiguration'
          description: An object representing the replication configuration for a registry.
    SetRepositoryPolicyResponse:
      type: object
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: The registry ID associated with the request.
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The repository name associated with the request.
        policyText:
          $ref: '#/components/schemas/RepositoryPolicyText'
          description: The JSON repository policy text applied to the repository.
    SetRepositoryPolicyRequest:
      type: object
      required:
        - repositoryName
        - policyText
      title: SetRepositoryPolicyRequest
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: 'The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.'
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository to receive the policy.
        policyText:
          $ref: '#/components/schemas/RepositoryPolicyText'
          description: 'The JSON repository policy text to apply to the repository. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policy-examples.html">Amazon ECR Repository Policies</a> in the <i>Amazon Elastic Container Registry User Guide</i>.'
        force:
          $ref: '#/components/schemas/ForceFlag'
          description: 'If the policy you are attempting to set on a repository policy would prevent you from setting another policy in the future, you must force the <a>SetRepositoryPolicy</a> operation. This is intended to prevent accidental repository lock outs.'
    StartImageScanResponse:
      type: object
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: The registry ID associated with the request.
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The repository name associated with the request.
        imageId:
          $ref: '#/components/schemas/ImageIdentifier'
        imageScanStatus:
          $ref: '#/components/schemas/ImageScanStatus'
          description: The current state of the scan.
    StartImageScanRequest:
      type: object
      required:
        - repositoryName
        - imageId
      title: StartImageScanRequest
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: 'The AWS account ID associated with the registry that contains the repository in which to start an image scan request. If you do not specify a registry, the default registry is assumed.'
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that contains the images to scan.
        imageId:
          $ref: '#/components/schemas/ImageIdentifier'
    UnsupportedImageTypeException: {}
    StartLifecyclePolicyPreviewResponse:
      type: object
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: The registry ID associated with the request.
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The repository name associated with the request.
        lifecyclePolicyText:
          $ref: '#/components/schemas/LifecyclePolicyText'
          description: The JSON repository policy text.
        status:
          $ref: '#/components/schemas/LifecyclePolicyPreviewStatus'
          description: The status of the lifecycle policy preview request.
    StartLifecyclePolicyPreviewRequest:
      type: object
      required:
        - repositoryName
      title: StartLifecyclePolicyPreviewRequest
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: 'The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.'
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository to be evaluated.
        lifecyclePolicyText:
          $ref: '#/components/schemas/LifecyclePolicyText'
          description: 'The policy to be evaluated against. If you do not specify a policy, the current policy for the repository is used.'
    LifecyclePolicyPreviewInProgressException: {}
    TagResourceResponse:
      type: object
      properties: {}
    TagResourceRequest:
      type: object
      required:
        - resourceArn
        - tags
      title: TagResourceRequest
      properties:
        resourceArn:
          $ref: '#/components/schemas/Arn'
          description: 'The Amazon Resource Name (ARN) of the the resource to which to add tags. Currently, the only supported resource is an Amazon ECR repository.'
        tags:
          $ref: '#/components/schemas/TagList'
          description: 'The tags to add to the resource. A tag is an array of key-value pairs. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.'
    UntagResourceResponse:
      type: object
      properties: {}
    UntagResourceRequest:
      type: object
      required:
        - resourceArn
        - tagKeys
      title: UntagResourceRequest
      properties:
        resourceArn:
          $ref: '#/components/schemas/Arn'
          description: 'The Amazon Resource Name (ARN) of the resource from which to remove tags. Currently, the only supported resource is an Amazon ECR repository.'
        tagKeys:
          $ref: '#/components/schemas/TagKeyList'
          description: The keys of the tags to be removed.
    UploadLayerPartResponse:
      type: object
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: The registry ID associated with the request.
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The repository name associated with the request.
        uploadId:
          $ref: '#/components/schemas/UploadId'
          description: The upload ID associated with the request.
        lastByteReceived:
          $ref: '#/components/schemas/PartSize'
          description: The integer value of the last byte received in the request.
    UploadLayerPartRequest:
      type: object
      required:
        - repositoryName
        - uploadId
        - partFirstByte
        - partLastByte
        - layerPartBlob
      title: UploadLayerPartRequest
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: 'The AWS account ID associated with the registry to which you are uploading layer parts. If you do not specify a registry, the default registry is assumed.'
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository to which you are uploading layer parts.
        uploadId:
          $ref: '#/components/schemas/UploadId'
          description: The upload ID from a previous <a>InitiateLayerUpload</a> operation to associate with the layer part upload.
        partFirstByte:
          $ref: '#/components/schemas/PartSize'
          description: The position of the first byte of the layer part witin the overall image layer.
        partLastByte:
          $ref: '#/components/schemas/PartSize'
          description: The position of the last byte of the layer part within the overall image layer.
        layerPartBlob:
          $ref: '#/components/schemas/LayerPartBlob'
          description: The base64-encoded layer part payload.
    InvalidLayerPartException: {}
    Arn:
      type: string
    AttributeKey:
      type: string
      minLength: 1
      maxLength: 128
    AttributeValue:
      type: string
      minLength: 1
      maxLength: 256
    Attribute:
      type: object
      required:
        - key
      properties:
        key:
          $ref: '#/components/schemas/AttributeKey'
          description: The attribute key.
        value:
          $ref: '#/components/schemas/AttributeValue'
          description: The value assigned to the attribute key.
      description: This data type is used in the <a>ImageScanFinding</a> data type.
    AttributeList:
      type: array
      items:
        $ref: '#/components/schemas/Attribute'
      minItems: 0
      maxItems: 50
    Base64:
      type: string
      pattern: ^\S+$
    ExpirationTimestamp:
      type: string
      format: date-time
    ProxyEndpoint:
      type: string
    AuthorizationData:
      type: object
      properties:
        authorizationToken:
          $ref: '#/components/schemas/Base64'
          description: 'A base64-encoded string that contains authorization data for the specified Amazon ECR registry. When the string is decoded, it is presented in the format <code>user:password</code> for private registry authentication using <code>docker login</code>.'
        expiresAt:
          $ref: '#/components/schemas/ExpirationTimestamp'
          description: The Unix time in seconds and milliseconds when the authorization token expires. Authorization tokens are valid for 12 hours.
        proxyEndpoint:
          $ref: '#/components/schemas/ProxyEndpoint'
          description: 'The registry URL to use for this authorization token in a <code>docker login</code> command. The Amazon ECR registry URL format is <code>https://aws_account_id.dkr.ecr.region.amazonaws.com</code>. For example, <code>https://012345678910.dkr.ecr.us-east-1.amazonaws.com</code>.. '
      description: An object representing authorization data for an Amazon ECR registry.
    AuthorizationDataList:
      type: array
      items:
        $ref: '#/components/schemas/AuthorizationData'
    RegistryId:
      type: string
      pattern: '[0-9]{12}'
    RepositoryName:
      type: string
      pattern: '(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*'
      minLength: 2
      maxLength: 256
    BatchedOperationLayerDigestList:
      type: array
      items:
        $ref: '#/components/schemas/BatchedOperationLayerDigest'
      minItems: 1
      maxItems: 100
    LayerList:
      type: array
      items:
        $ref: '#/components/schemas/Layer'
    LayerFailureList:
      type: array
      items:
        $ref: '#/components/schemas/LayerFailure'
    ImageIdentifierList:
      type: array
      items:
        $ref: '#/components/schemas/ImageIdentifier'
      minItems: 1
      maxItems: 100
    ImageFailureList:
      type: array
      items:
        $ref: '#/components/schemas/ImageFailure'
    MediaTypeList:
      type: array
      items:
        $ref: '#/components/schemas/MediaType'
      minItems: 1
      maxItems: 100
    ImageList:
      type: array
      items:
        $ref: '#/components/schemas/Image'
    BatchedOperationLayerDigest:
      type: string
      minLength: 0
      maxLength: 1000
    UploadId:
      type: string
      pattern: '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}'
    LayerDigestList:
      type: array
      items:
        $ref: '#/components/schemas/LayerDigest'
      minItems: 1
      maxItems: 100
    LayerDigest:
      type: string
      pattern: '[a-zA-Z0-9-_+.]+:[a-fA-F0-9]+'
    TagList:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
    ImageTagMutability:
      type: string
      enum:
        - MUTABLE
        - IMMUTABLE
    ImageScanningConfiguration:
      type: object
      properties:
        scanOnPush:
          $ref: '#/components/schemas/ScanOnPushFlag'
          description: 'The setting that determines whether images are scanned after being pushed to a repository. If set to <code>true</code>, images will be scanned after being pushed. If this parameter is not specified, it will default to <code>false</code> and images will not be scanned unless a scan is manually started with the <a>StartImageScan</a> API.'
      description: The image scanning configuration for a repository.
    EncryptionConfiguration:
      type: object
      required:
        - encryptionType
      properties:
        encryptionType:
          $ref: '#/components/schemas/EncryptionType'
          description: '<p>The encryption type to use.</p> <p>If you use the <code>KMS</code> encryption type, the contents of the repository will be encrypted using server-side encryption with customer master keys (CMKs) stored in AWS KMS. When you use AWS KMS to encrypt your data, you can either use the default AWS managed CMK for Amazon ECR, or specify your own CMK, which you already created. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html">Protecting Data Using Server-Side Encryption with CMKs Stored in AWS Key Management Service (SSE-KMS)</a> in the <i>Amazon Simple Storage Service Console Developer Guide.</i>.</p> <p>If you use the <code>AES256</code> encryption type, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts the images in the repository using an AES-256 encryption algorithm. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html">Protecting Data Using Server-Side Encryption with Amazon S3-Managed Encryption Keys (SSE-S3)</a> in the <i>Amazon Simple Storage Service Console Developer Guide.</i>.</p>'
        kmsKey:
          $ref: '#/components/schemas/KmsKey'
          description: 'If you use the <code>KMS</code> encryption type, specify the CMK to use for encryption. The alias, key ID, or full ARN of the CMK can be specified. The key must exist in the same Region as the repository. If no key is specified, the default AWS managed CMK for Amazon ECR will be used.'
      description: '<p>The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest.</p> <p>By default, when no encryption configuration is set or the <code>AES256</code> encryption type is used, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts your data at rest using an AES-256 encryption algorithm. This does not require any action on your part.</p> <p>For more control over the encryption of the contents of your repository, you can use server-side encryption with customer master keys (CMKs) stored in AWS Key Management Service (AWS KMS) to encrypt your images. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/encryption-at-rest.html">Amazon ECR encryption at rest</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p>'
    Repository:
      type: object
      properties:
        repositoryArn:
          $ref: '#/components/schemas/Arn'
          description: 'The Amazon Resource Name (ARN) that identifies the repository. The ARN contains the <code>arn:aws:ecr</code> namespace, followed by the region of the repository, AWS account ID of the repository owner, repository namespace, and repository name. For example, <code>arn:aws:ecr:region:012345678910:repository/test</code>.'
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: The AWS account ID associated with the registry that contains the repository.
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository.
        repositoryUri:
          $ref: '#/components/schemas/Url'
          description: The URI for the repository. You can use this URI for container image <code>push</code> and <code>pull</code> operations.
        createdAt:
          $ref: '#/components/schemas/CreationTimestamp'
          description: 'The date and time, in JavaScript date format, when the repository was created.'
        imageTagMutability:
          $ref: '#/components/schemas/ImageTagMutability'
          description: The tag mutability setting for the repository.
        imageScanningConfiguration:
          $ref: '#/components/schemas/ImageScanningConfiguration'
        encryptionConfiguration:
          $ref: '#/components/schemas/EncryptionConfiguration'
          description: The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest.
      description: An object representing a repository.
    CreationTimestamp:
      type: string
      format: date-time
    LifecyclePolicyText:
      type: string
      minLength: 100
      maxLength: 30720
    EvaluationTimestamp:
      type: string
      format: date-time
    RegistryPolicyText:
      type: string
      minLength: 0
      maxLength: 10240
    RepositoryPolicyText:
      type: string
      minLength: 0
      maxLength: 10240
    ForceFlag:
      type: boolean
    ImageIdentifier:
      type: object
      properties:
        imageDigest:
          $ref: '#/components/schemas/ImageDigest'
          description: The <code>sha256</code> digest of the image manifest.
        imageTag:
          $ref: '#/components/schemas/ImageTag'
          description: The tag used for the image.
      description: An object with identifying information for an Amazon ECR image.
    NextToken:
      type: string
    MaxResults:
      type: integer
      minimum: 1
      maximum: 1000
    ImageScanStatus:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ScanStatus'
          description: The current state of an image scan.
        description:
          $ref: '#/components/schemas/ScanStatusDescription'
          description: The description of the image scan status.
      description: The current status of an image scan.
    ImageScanFindings:
      type: object
      properties:
        imageScanCompletedAt:
          $ref: '#/components/schemas/ScanTimestamp'
          description: The time of the last completed image scan.
        vulnerabilitySourceUpdatedAt:
          $ref: '#/components/schemas/VulnerabilitySourceUpdateTimestamp'
          description: The time when the vulnerability data was last scanned.
        findings:
          $ref: '#/components/schemas/ImageScanFindingList'
          description: The findings from the image scan.
        findingSeverityCounts:
          $ref: '#/components/schemas/FindingSeverityCounts'
          description: 'The image vulnerability counts, sorted by severity.'
      description: The details of an image scan.
    TagStatus:
      type: string
      enum:
        - TAGGED
        - UNTAGGED
        - ANY
    DescribeImagesFilter:
      type: object
      properties:
        tagStatus:
          $ref: '#/components/schemas/TagStatus'
          description: The tag status with which to filter your <a>DescribeImages</a> results. You can filter results based on whether they are <code>TAGGED</code> or <code>UNTAGGED</code>.
      description: An object representing a filter on a <a>DescribeImages</a> operation.
    ImageDetailList:
      type: array
      items:
        $ref: '#/components/schemas/ImageDetail'
    ReplicationConfiguration:
      type: object
      required:
        - rules
      properties:
        rules:
          $ref: '#/components/schemas/ReplicationRuleList'
          description: An array of objects representing the replication rules for a replication configuration. A replication configuration may contain only one replication rule but the rule may contain one or more replication destinations.
      description: The replication configuration for a registry.
    RepositoryNameList:
      type: array
      items:
        $ref: '#/components/schemas/RepositoryName'
      minItems: 1
      maxItems: 100
    RepositoryList:
      type: array
      items:
        $ref: '#/components/schemas/Repository'
    EncryptionType:
      type: string
      enum:
        - AES256
        - KMS
    KmsKey:
      type: string
      minLength: 1
      maxLength: 2048
    FindingDescription:
      type: string
    FindingName:
      type: string
    FindingSeverity:
      type: string
      enum:
        - INFORMATIONAL
        - LOW
        - MEDIUM
        - HIGH
        - CRITICAL
        - UNDEFINED
    SeverityCount:
      type: integer
      minimum: 0
    FindingSeverityCounts:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/SeverityCount'
    GetAuthorizationTokenRegistryIdList:
      type: array
      items:
        $ref: '#/components/schemas/RegistryId'
      minItems: 1
      maxItems: 10
    Url:
      type: string
    LifecyclePreviewMaxResults:
      type: integer
      minimum: 1
      maximum: 100
    LifecyclePolicyPreviewFilter:
      type: object
      properties:
        tagStatus:
          $ref: '#/components/schemas/TagStatus'
          description: The tag status of the image.
      description: The filter for the lifecycle policy preview.
    LifecyclePolicyPreviewStatus:
      type: string
      enum:
        - IN_PROGRESS
        - COMPLETE
        - EXPIRED
        - FAILED
    LifecyclePolicyPreviewResultList:
      type: array
      items:
        $ref: '#/components/schemas/LifecyclePolicyPreviewResult'
    LifecyclePolicyPreviewSummary:
      type: object
      properties:
        expiringImageTotalCount:
          $ref: '#/components/schemas/ImageCount'
          description: The number of expiring images.
      description: The summary of the lifecycle policy preview request.
    ImageManifest:
      type: string
      minLength: 1
      maxLength: 4194304
    MediaType:
      type: string
    Image:
      type: object
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: The AWS account ID associated with the registry containing the image.
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository associated with the image.
        imageId:
          $ref: '#/components/schemas/ImageIdentifier'
          description: An object containing the image tag and image digest associated with an image.
        imageManifest:
          $ref: '#/components/schemas/ImageManifest'
          description: The image manifest associated with the image.
        imageManifestMediaType:
          $ref: '#/components/schemas/MediaType'
          description: The manifest media type of the image.
      description: An object representing an Amazon ECR image.
    ImageActionType:
      type: string
      enum:
        - EXPIRE
    ImageCount:
      type: integer
      minimum: 0
    ImageDigest:
      type: string
    ImageTagList:
      type: array
      items:
        $ref: '#/components/schemas/ImageTag'
    ImageSizeInBytes:
      type: integer
    PushTimestamp:
      type: string
      format: date-time
    ImageScanFindingsSummary:
      type: object
      properties:
        imageScanCompletedAt:
          $ref: '#/components/schemas/ScanTimestamp'
          description: The time of the last completed image scan.
        vulnerabilitySourceUpdatedAt:
          $ref: '#/components/schemas/VulnerabilitySourceUpdateTimestamp'
          description: The time when the vulnerability data was last scanned.
        findingSeverityCounts:
          $ref: '#/components/schemas/FindingSeverityCounts'
          description: 'The image vulnerability counts, sorted by severity.'
      description: A summary of the last completed image scan.
    ImageDetail:
      type: object
      properties:
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: The AWS account ID associated with the registry to which this image belongs.
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository to which this image belongs.
        imageDigest:
          $ref: '#/components/schemas/ImageDigest'
          description: The <code>sha256</code> digest of the image manifest.
        imageTags:
          $ref: '#/components/schemas/ImageTagList'
          description: The list of tags associated with this image.
        imageSizeInBytes:
          $ref: '#/components/schemas/ImageSizeInBytes'
          description: '<p>The size, in bytes, of the image in the repository.</p> <p>If the image is a manifest list, this will be the max size of all manifests in the list.</p> <note> <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it may return a larger image size than the image sizes returned by <a>DescribeImages</a>.</p> </note>'
        imagePushedAt:
          $ref: '#/components/schemas/PushTimestamp'
          description: 'The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository. '
        imageScanStatus:
          $ref: '#/components/schemas/ImageScanStatus'
          description: The current state of the scan.
        imageScanFindingsSummary:
          $ref: '#/components/schemas/ImageScanFindingsSummary'
          description: A summary of the last completed image scan.
        imageManifestMediaType:
          $ref: '#/components/schemas/MediaType'
          description: The media type of the image manifest.
        artifactMediaType:
          $ref: '#/components/schemas/MediaType'
          description: The artifact media type of the image.
      description: An object that describes an image returned by a <a>DescribeImages</a> operation.
    ImageFailureCode:
      type: string
      enum:
        - InvalidImageDigest
        - InvalidImageTag
        - ImageTagDoesNotMatchDigest
        - ImageNotFound
        - MissingDigestAndTag
        - ImageReferencedByManifestList
        - KmsError
    ImageFailureReason:
      type: string
    ImageFailure:
      type: object
      properties:
        imageId:
          $ref: '#/components/schemas/ImageIdentifier'
          description: The image ID associated with the failure.
        failureCode:
          $ref: '#/components/schemas/ImageFailureCode'
          description: The code associated with the failure.
        failureReason:
          $ref: '#/components/schemas/ImageFailureReason'
          description: The reason for the failure.
      description: An object representing an Amazon ECR image failure.
    ImageTag:
      type: string
      minLength: 1
      maxLength: 300
    ImageScanFinding:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/FindingName'
          description: 'The name associated with the finding, usually a CVE number.'
        description:
          $ref: '#/components/schemas/FindingDescription'
          description: The description of the finding.
        uri:
          $ref: '#/components/schemas/Url'
          description: A link containing additional details about the security vulnerability.
        severity:
          $ref: '#/components/schemas/FindingSeverity'
          description: The finding severity.
        attributes:
          $ref: '#/components/schemas/AttributeList'
          description: A collection of attributes of the host from which the finding is generated.
      description: Contains information about an image scan finding.
    ImageScanFindingList:
      type: array
      items:
        $ref: '#/components/schemas/ImageScanFinding'
    ScanTimestamp:
      type: string
      format: date-time
    VulnerabilitySourceUpdateTimestamp:
      type: string
      format: date-time
    ScanStatus:
      type: string
      enum:
        - IN_PROGRESS
        - COMPLETE
        - FAILED
    ScanStatusDescription:
      type: string
    ScanOnPushFlag:
      type: boolean
    PartSize:
      type: integer
      minimum: 0
    LayerAvailability:
      type: string
      enum:
        - AVAILABLE
        - UNAVAILABLE
    LayerSizeInBytes:
      type: integer
    Layer:
      type: object
      properties:
        layerDigest:
          $ref: '#/components/schemas/LayerDigest'
          description: The <code>sha256</code> digest of the image layer.
        layerAvailability:
          $ref: '#/components/schemas/LayerAvailability'
          description: The availability status of the image layer.
        layerSize:
          $ref: '#/components/schemas/LayerSizeInBytes'
          description: 'The size, in bytes, of the image layer.'
        mediaType:
          $ref: '#/components/schemas/MediaType'
          description: 'The media type of the layer, such as <code>application/vnd.docker.image.rootfs.diff.tar.gzip</code> or <code>application/vnd.oci.image.layer.v1.tar+gzip</code>.'
      description: An object representing an Amazon ECR image layer.
    LayerFailureCode:
      type: string
      enum:
        - InvalidLayerDigest
        - MissingLayerDigest
    LayerFailureReason:
      type: string
    LayerFailure:
      type: object
      properties:
        layerDigest:
          $ref: '#/components/schemas/BatchedOperationLayerDigest'
          description: The layer digest associated with the failure.
        failureCode:
          $ref: '#/components/schemas/LayerFailureCode'
          description: The failure code associated with the failure.
        failureReason:
          $ref: '#/components/schemas/LayerFailureReason'
          description: The reason for the failure.
      description: An object representing an Amazon ECR image layer failure.
    LayerPartBlob:
      type: string
      minLength: 0
      maxLength: 20971520
    LifecyclePolicyRuleAction:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ImageActionType'
          description: The type of action to be taken.
      description: The type of action to be taken.
    LifecyclePolicyRulePriority:
      type: integer
      minimum: 1
    LifecyclePolicyPreviewResult:
      type: object
      properties:
        imageTags:
          $ref: '#/components/schemas/ImageTagList'
          description: The list of tags associated with this image.
        imageDigest:
          $ref: '#/components/schemas/ImageDigest'
          description: The <code>sha256</code> digest of the image manifest.
        imagePushedAt:
          $ref: '#/components/schemas/PushTimestamp'
          description: 'The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository.'
        action:
          $ref: '#/components/schemas/LifecyclePolicyRuleAction'
          description: The type of action to be taken.
        appliedRulePriority:
          $ref: '#/components/schemas/LifecyclePolicyRulePriority'
          description: The priority of the applied rule.
      description: The result of the lifecycle policy preview.
    ListImagesFilter:
      type: object
      properties:
        tagStatus:
          $ref: '#/components/schemas/TagStatus'
          description: The tag status with which to filter your <a>ListImages</a> results. You can filter results based on whether they are <code>TAGGED</code> or <code>UNTAGGED</code>.
      description: An object representing a filter on a <a>ListImages</a> operation.
    Region:
      type: string
      pattern: '[0-9a-z-]{2,25}'
      minLength: 2
      maxLength: 25
    ReplicationRuleList:
      type: array
      items:
        $ref: '#/components/schemas/ReplicationRule'
      minItems: 0
      maxItems: 1
    ReplicationDestination:
      type: object
      required:
        - region
        - registryId
      properties:
        region:
          $ref: '#/components/schemas/Region'
          description: A Region to replicate to.
        registryId:
          $ref: '#/components/schemas/RegistryId'
          description: The account ID of the destination registry to replicate to.
      description: An array of objects representing the details of a replication destination.
    ReplicationDestinationList:
      type: array
      items:
        $ref: '#/components/schemas/ReplicationDestination'
      minItems: 0
      maxItems: 25
    ReplicationRule:
      type: object
      required:
        - destinations
      properties:
        destinations:
          $ref: '#/components/schemas/ReplicationDestinationList'
          description: An array of objects representing the details of a replication destination.
      description: An array of objects representing the replication destinations for a replication configuration. A replication configuration may contain only one replication rule but the rule may contain one or more replication destinations.
    TagKey:
      type: string
    TagValue:
      type: string
    Tag:
      type: object
      properties:
        Key:
          $ref: '#/components/schemas/TagKey'
          description: One part of a key-value pair that make up a tag. A <code>key</code> is a general label that acts like a category for more specific tag values.
        Value:
          $ref: '#/components/schemas/TagValue'
          description: The optional part of a key-value pair that make up a tag. A <code>value</code> acts as a descriptor within a tag category (key).
      description: 'The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.'
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
security:
  - hmac: []

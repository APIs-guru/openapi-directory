openapi: 3.0.0
info:
  version: '2019-12-04'
  x-release: v4
  title: Amazon Kinesis Video Signaling Channels
  description: 'Kinesis Video Streams Signaling Service is a intermediate service that establishes a communication channel for discovering peers, transmitting offers and answers in order to establish peer-to-peer connection in webRTC technology.'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: kinesis-video-signaling
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/kinesis-video-signaling-2019-12-04.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/kinesisvideo/'
servers:
  - url: 'http://kinesisvideo.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Amazon Kinesis Video Signaling Channels multi-region endpoint
  - url: 'https://kinesisvideo.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Amazon Kinesis Video Signaling Channels multi-region endpoint
  - url: 'http://kinesisvideo.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon Kinesis Video Signaling Channels endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://kinesisvideo.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon Kinesis Video Signaling Channels endpoint for China (Beijing) and China (Ningxia)
paths:
  /v1/get-ice-server-config:
    post:
      operationId: GetIceServerConfig
      description: '<p>Gets the Interactive Connectivity Establishment (ICE) server configuration information, including URIs, username, and password which can be used to configure the WebRTC connection. The ICE component uses this configuration information to setup the WebRTC connection, including authenticating with the Traversal Using Relays around NAT (TURN) relay server. </p> <p>TURN is a protocol that is used to improve the connectivity of peer-to-peer applications. By providing a cloud-based relay service, TURN ensures that a connection can be established even when one or more peers are incapable of a direct peer-to-peer connection. For more information, see <a href="https://tools.ietf.org/html/draft-uberti-rtcweb-turn-rest-00">A REST API For Access To TURN Services</a>.</p> <p> You can invoke this API to establish a fallback mechanism in case either of the peers is unable to establish a direct peer-to-peer connection over a signaling channel. You must specify either a signaling channel ARN or the client ID in order to invoke this API.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIceServerConfigResponse'
        '480':
          description: InvalidClientException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidClientException'
        '481':
          description: SessionExpiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionExpiredException'
        '482':
          description: ClientLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientLimitExceededException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArgumentException'
        '485':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ChannelARN
              properties:
                ChannelARN:
                  description: 'The ARN of the signaling channel to be used for the peer-to-peer connection between configured peers. '
                  type: string
                  pattern: 'arn:aws:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+'
                  minLength: 1
                  maxLength: 1024
                ClientId:
                  description: Unique identifier for the viewer. Must be unique within the signaling channel.
                  type: string
                  pattern: '[a-zA-Z0-9_.-]+'
                  minLength: 1
                  maxLength: 256
                Service:
                  description: 'Specifies the desired service. Currently, <code>TURN</code> is the only valid value.'
                  type: string
                  enum:
                    - TURN
                Username:
                  description: An optional user ID to be associated with the credentials.
                  type: string
                  pattern: '[a-zA-Z0-9_.-]+'
                  minLength: 1
                  maxLength: 256
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /v1/send-alexa-offer-to-master:
    post:
      operationId: SendAlexaOfferToMaster
      description: 'This API allows you to connect WebRTC-enabled devices with Alexa display devices. When invoked, it sends the Alexa Session Description Protocol (SDP) offer to the master peer. The offer is delivered as soon as the master is connected to the specified signaling channel. This API returns the SDP answer from the connected master. If the master is not connected to the signaling channel, redelivery requests are made until the message expires.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendAlexaOfferToMasterResponse'
        '480':
          description: ClientLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientLimitExceededException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArgumentException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ChannelARN
                - SenderClientId
                - MessagePayload
              properties:
                ChannelARN:
                  description: The ARN of the signaling channel by which Alexa and the master peer communicate.
                  type: string
                  pattern: 'arn:aws:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+'
                  minLength: 1
                  maxLength: 1024
                SenderClientId:
                  description: The unique identifier for the sender client.
                  type: string
                  pattern: '[a-zA-Z0-9_.-]+'
                  minLength: 1
                  maxLength: 256
                MessagePayload:
                  description: The base64-encoded SDP offer content.
                  type: string
                  pattern: '[a-zA-Z0-9+/=]+'
                  minLength: 1
                  maxLength: 10000
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    GetIceServerConfigResponse:
      type: object
      properties:
        IceServerList:
          $ref: '#/components/schemas/IceServerList'
          description: The list of ICE server information objects.
    InvalidClientException: {}
    SessionExpiredException: {}
    ClientLimitExceededException: {}
    ResourceNotFoundException: {}
    InvalidArgumentException: {}
    NotAuthorizedException: {}
    SendAlexaOfferToMasterResponse:
      type: object
      properties:
        Answer:
          $ref: '#/components/schemas/Answer'
          description: The base64-encoded SDP answer content.
    Answer:
      type: string
      minLength: 1
      maxLength: 10000
    ClientId:
      type: string
      pattern: '[a-zA-Z0-9_.-]+'
      minLength: 1
      maxLength: 256
    ResourceARN:
      type: string
      pattern: 'arn:aws:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+'
      minLength: 1
      maxLength: 1024
    Service:
      type: string
      enum:
        - TURN
    Username:
      type: string
      pattern: '[a-zA-Z0-9_.-]+'
      minLength: 1
      maxLength: 256
    GetIceServerConfigRequest:
      type: object
      required:
        - ChannelARN
      title: GetIceServerConfigRequest
      properties:
        ChannelARN:
          $ref: '#/components/schemas/ResourceARN'
          description: 'The ARN of the signaling channel to be used for the peer-to-peer connection between configured peers. '
        ClientId:
          $ref: '#/components/schemas/ClientId'
          description: Unique identifier for the viewer. Must be unique within the signaling channel.
        Service:
          $ref: '#/components/schemas/Service'
          description: 'Specifies the desired service. Currently, <code>TURN</code> is the only valid value.'
        Username:
          $ref: '#/components/schemas/Username'
          description: An optional user ID to be associated with the credentials.
    IceServerList:
      type: array
      items:
        $ref: '#/components/schemas/IceServer'
    Uris:
      type: array
      items:
        $ref: '#/components/schemas/Uri'
    Password:
      type: string
      pattern: '[a-zA-Z0-9_.-]+'
      minLength: 1
      maxLength: 256
    Ttl:
      type: integer
      minimum: 30
      maximum: 86400
    IceServer:
      type: object
      properties:
        Uris:
          $ref: '#/components/schemas/Uris'
          description: 'An array of URIs, in the form specified in the <a href="https://tools.ietf.org/html/draft-petithuguenin-behave-turn-uris-03">I-D.petithuguenin-behave-turn-uris</a> spec. These URIs provide the different addresses and/or protocols that can be used to reach the TURN server.'
        Username:
          $ref: '#/components/schemas/Username'
          description: A username to login to the ICE server.
        Password:
          $ref: '#/components/schemas/Password'
          description: A password to login to the ICE server.
        Ttl:
          $ref: '#/components/schemas/Ttl'
          description: 'The period of time, in seconds, during which the username and password are valid.'
      description: A structure for the ICE server connection data.
    MessagePayload:
      type: string
      pattern: '[a-zA-Z0-9+/=]+'
      minLength: 1
      maxLength: 10000
    SendAlexaOfferToMasterRequest:
      type: object
      required:
        - ChannelARN
        - SenderClientId
        - MessagePayload
      title: SendAlexaOfferToMasterRequest
      properties:
        ChannelARN:
          $ref: '#/components/schemas/ResourceARN'
          description: The ARN of the signaling channel by which Alexa and the master peer communicate.
        SenderClientId:
          $ref: '#/components/schemas/ClientId'
          description: The unique identifier for the sender client.
        MessagePayload:
          $ref: '#/components/schemas/MessagePayload'
          description: The base64-encoded SDP offer content.
    Uri:
      type: string
      minLength: 1
      maxLength: 256
security:
  - hmac: []

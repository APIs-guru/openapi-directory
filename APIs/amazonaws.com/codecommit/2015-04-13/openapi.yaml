openapi: 3.0.0
info:
  version: '2015-04-13'
  x-release: v4
  title: AWS CodeCommit
  description: '<fullname>AWS CodeCommit</fullname> <p>This is the <i>AWS CodeCommit API Reference</i>. This reference provides descriptions of the operations and data types for AWS CodeCommit API along with usage examples.</p> <p>You can use the AWS CodeCommit API to work with the following objects:</p> <p>Repositories, by calling the following:</p> <ul> <li> <p> <a>BatchGetRepositories</a>, which returns information about one or more repositories associated with your AWS account.</p> </li> <li> <p> <a>CreateRepository</a>, which creates an AWS CodeCommit repository.</p> </li> <li> <p> <a>DeleteRepository</a>, which deletes an AWS CodeCommit repository.</p> </li> <li> <p> <a>GetRepository</a>, which returns information about a specified repository.</p> </li> <li> <p> <a>ListRepositories</a>, which lists all AWS CodeCommit repositories associated with your AWS account.</p> </li> <li> <p> <a>UpdateRepositoryDescription</a>, which sets or updates the description of the repository.</p> </li> <li> <p> <a>UpdateRepositoryName</a>, which changes the name of the repository. If you change the name of a repository, no other users of that repository can access it until you send them the new HTTPS or SSH URL to use.</p> </li> </ul> <p>Branches, by calling the following:</p> <ul> <li> <p> <a>CreateBranch</a>, which creates a branch in a specified repository.</p> </li> <li> <p> <a>DeleteBranch</a>, which deletes the specified branch in a repository unless it is the default branch.</p> </li> <li> <p> <a>GetBranch</a>, which returns information about a specified branch.</p> </li> <li> <p> <a>ListBranches</a>, which lists all branches for a specified repository.</p> </li> <li> <p> <a>UpdateDefaultBranch</a>, which changes the default branch for a repository.</p> </li> </ul> <p>Files, by calling the following:</p> <ul> <li> <p> <a>DeleteFile</a>, which deletes the content of a specified file from a specified branch.</p> </li> <li> <p> <a>GetBlob</a>, which returns the base-64 encoded content of an individual Git blob object in a repository.</p> </li> <li> <p> <a>GetFile</a>, which returns the base-64 encoded content of a specified file.</p> </li> <li> <p> <a>GetFolder</a>, which returns the contents of a specified folder or directory.</p> </li> <li> <p> <a>PutFile</a>, which adds or modifies a single file in a specified repository and branch.</p> </li> </ul> <p>Commits, by calling the following:</p> <ul> <li> <p> <a>BatchGetCommits</a>, which returns information about one or more commits in a repository.</p> </li> <li> <p> <a>CreateCommit</a>, which creates a commit for changes to a repository.</p> </li> <li> <p> <a>GetCommit</a>, which returns information about a commit, including commit messages and author and committer information.</p> </li> <li> <p> <a>GetDifferences</a>, which returns information about the differences in a valid commit specifier (such as a branch, tag, HEAD, commit ID, or other fully qualified reference).</p> </li> </ul> <p>Merges, by calling the following:</p> <ul> <li> <p> <a>BatchDescribeMergeConflicts</a>, which returns information about conflicts in a merge between commits in a repository.</p> </li> <li> <p> <a>CreateUnreferencedMergeCommit</a>, which creates an unreferenced commit between two branches or commits for the purpose of comparing them and identifying any potential conflicts.</p> </li> <li> <p> <a>DescribeMergeConflicts</a>, which returns information about merge conflicts between the base, source, and destination versions of a file in a potential merge.</p> </li> <li> <p> <a>GetMergeCommit</a>, which returns information about the merge between a source and destination commit. </p> </li> <li> <p> <a>GetMergeConflicts</a>, which returns information about merge conflicts between the source and destination branch in a pull request.</p> </li> <li> <p> <a>GetMergeOptions</a>, which returns information about the available merge options between two branches or commit specifiers.</p> </li> <li> <p> <a>MergeBranchesByFastForward</a>, which merges two branches using the fast-forward merge option.</p> </li> <li> <p> <a>MergeBranchesBySquash</a>, which merges two branches using the squash merge option.</p> </li> <li> <p> <a>MergeBranchesByThreeWay</a>, which merges two branches using the three-way merge option.</p> </li> </ul> <p>Pull requests, by calling the following:</p> <ul> <li> <p> <a>CreatePullRequest</a>, which creates a pull request in a specified repository.</p> </li> <li> <p> <a>CreatePullRequestApprovalRule</a>, which creates an approval rule for a specified pull request.</p> </li> <li> <p> <a>DeletePullRequestApprovalRule</a>, which deletes an approval rule for a specified pull request.</p> </li> <li> <p> <a>DescribePullRequestEvents</a>, which returns information about one or more pull request events.</p> </li> <li> <p> <a>EvaluatePullRequestApprovalRules</a>, which evaluates whether a pull request has met all the conditions specified in its associated approval rules.</p> </li> <li> <p> <a>GetCommentsForPullRequest</a>, which returns information about comments on a specified pull request.</p> </li> <li> <p> <a>GetPullRequest</a>, which returns information about a specified pull request.</p> </li> <li> <p> <a>GetPullRequestApprovalStates</a>, which returns information about the approval states for a specified pull request.</p> </li> <li> <p> <a>GetPullRequestOverrideState</a>, which returns information about whether approval rules have been set aside (overriden) for a pull request, and if so, the Amazon Resource Name (ARN) of the user or identity that overrode the rules and their requirements for the pull request.</p> </li> <li> <p> <a>ListPullRequests</a>, which lists all pull requests for a repository.</p> </li> <li> <p> <a>MergePullRequestByFastForward</a>, which merges the source destination branch of a pull request into the specified destination branch for that pull request using the fast-forward merge option.</p> </li> <li> <p> <a>MergePullRequestBySquash</a>, which merges the source destination branch of a pull request into the specified destination branch for that pull request using the squash merge option.</p> </li> <li> <p> <a>MergePullRequestByThreeWay</a>. which merges the source destination branch of a pull request into the specified destination branch for that pull request using the three-way merge option.</p> </li> <li> <p> <a>OverridePullRequestApprovalRules</a>, which sets aside all approval rule requirements for a pull request.</p> </li> <li> <p> <a>PostCommentForPullRequest</a>, which posts a comment to a pull request at the specified line, file, or request.</p> </li> <li> <p> <a>UpdatePullRequestApprovalRuleContent</a>, which updates the structure of an approval rule for a pull request.</p> </li> <li> <p> <a>UpdatePullRequestApprovalState</a>, which updates the state of an approval on a pull request.</p> </li> <li> <p> <a>UpdatePullRequestDescription</a>, which updates the description of a pull request.</p> </li> <li> <p> <a>UpdatePullRequestStatus</a>, which updates the status of a pull request.</p> </li> <li> <p> <a>UpdatePullRequestTitle</a>, which updates the title of a pull request.</p> </li> </ul> <p>Approval rule templates, by calling the following:</p> <ul> <li> <p> <a>AssociateApprovalRuleTemplateWithRepository</a>, which associates a template with a specified repository. After the template is associated with a repository, AWS CodeCommit creates approval rules that match the template conditions on every pull request created in the specified repository.</p> </li> <li> <p> <a>BatchAssociateApprovalRuleTemplateWithRepositories</a>, which associates a template with one or more specified repositories. After the template is associated with a repository, AWS CodeCommit creates approval rules that match the template conditions on every pull request created in the specified repositories.</p> </li> <li> <p> <a>BatchDisassociateApprovalRuleTemplateFromRepositories</a>, which removes the association between a template and specified repositories so that approval rules based on the template are not automatically created when pull requests are created in those repositories.</p> </li> <li> <p> <a>CreateApprovalRuleTemplate</a>, which creates a template for approval rules that can then be associated with one or more repositories in your AWS account.</p> </li> <li> <p> <a>DeleteApprovalRuleTemplate</a>, which deletes the specified template. It does not remove approval rules on pull requests already created with the template.</p> </li> <li> <p> <a>DisassociateApprovalRuleTemplateFromRepository</a>, which removes the association between a template and a repository so that approval rules based on the template are not automatically created when pull requests are created in the specified repository.</p> </li> <li> <p> <a>GetApprovalRuleTemplate</a>, which returns information about an approval rule template.</p> </li> <li> <p> <a>ListApprovalRuleTemplates</a>, which lists all approval rule templates in the AWS Region in your AWS account.</p> </li> <li> <p> <a>ListAssociatedApprovalRuleTemplatesForRepository</a>, which lists all approval rule templates that are associated with a specified repository.</p> </li> <li> <p> <a>ListRepositoriesForApprovalRuleTemplate</a>, which lists all repositories associated with the specified approval rule template.</p> </li> <li> <p> <a>UpdateApprovalRuleTemplateDescription</a>, which updates the description of an approval rule template.</p> </li> <li> <p> <a>UpdateApprovalRuleTemplateName</a>, which updates the name of an approval rule template.</p> </li> <li> <p> <a>UpdateApprovalRuleTemplateContent</a>, which updates the content of an approval rule template.</p> </li> </ul> <p>Comments in a repository, by calling the following:</p> <ul> <li> <p> <a>DeleteCommentContent</a>, which deletes the content of a comment on a commit in a repository.</p> </li> <li> <p> <a>GetComment</a>, which returns information about a comment on a commit.</p> </li> <li> <p> <a>GetCommentReactions</a>, which returns information about emoji reactions to comments.</p> </li> <li> <p> <a>GetCommentsForComparedCommit</a>, which returns information about comments on the comparison between two commit specifiers in a repository.</p> </li> <li> <p> <a>PostCommentForComparedCommit</a>, which creates a comment on the comparison between two commit specifiers in a repository.</p> </li> <li> <p> <a>PostCommentReply</a>, which creates a reply to a comment.</p> </li> <li> <p> <a>PutCommentReaction</a>, which creates or updates an emoji reaction to a comment.</p> </li> <li> <p> <a>UpdateComment</a>, which updates the content of a comment on a commit in a repository.</p> </li> </ul> <p>Tags used to tag resources in AWS CodeCommit (not Git tags), by calling the following:</p> <ul> <li> <p> <a>ListTagsForResource</a>, which gets information about AWS tags for a specified Amazon Resource Name (ARN) in AWS CodeCommit.</p> </li> <li> <p> <a>TagResource</a>, which adds or updates tags for a resource in AWS CodeCommit.</p> </li> <li> <p> <a>UntagResource</a>, which removes tags for a resource in AWS CodeCommit.</p> </li> </ul> <p>Triggers, by calling the following:</p> <ul> <li> <p> <a>GetRepositoryTriggers</a>, which returns information about triggers configured for a repository.</p> </li> <li> <p> <a>PutRepositoryTriggers</a>, which replaces all triggers for a repository and can be used to create or delete triggers.</p> </li> <li> <p> <a>TestRepositoryTriggers</a>, which tests the functionality of a repository trigger by sending data to the trigger target.</p> </li> </ul> <p>For information about how to use AWS CodeCommit, see the <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">AWS CodeCommit User Guide</a>.</p>'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: codecommit
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/codecommit-2015-04-13.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/codecommit/'
servers:
  - url: 'http://codecommit.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CodeCommit multi-region endpoint
  - url: 'https://codecommit.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CodeCommit multi-region endpoint
  - url: 'http://codecommit.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CodeCommit endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://codecommit.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CodeCommit endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  /#X-Amz-Target=CodeCommit_20150413.AssociateApprovalRuleTemplateWithRepository:
    post:
      operationId: AssociateApprovalRuleTemplateWithRepository
      description: 'Creates an association between an approval rule template and a specified repository. Then, the next time a pull request is created in the repository where the destination reference (if specified) matches the destination reference (branch) for the pull request, an approval rule that matches the template conditions is automatically created for that pull request. If no destination references are specified in the template, an approval rule that matches the template contents is created for all pull requests in that repository.'
      responses:
        '200':
          description: Success
        '480':
          description: ApprovalRuleTemplateNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateNameRequiredException'
        '481':
          description: InvalidApprovalRuleTemplateNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateNameException'
        '482':
          description: ApprovalRuleTemplateDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateDoesNotExistException'
        '483':
          description: MaximumRuleTemplatesAssociatedWithRepositoryException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumRuleTemplatesAssociatedWithRepositoryException'
        '484':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '485':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '486':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '487':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '488':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '489':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '490':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '491':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssociateApprovalRuleTemplateWithRepositoryInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.AssociateApprovalRuleTemplateWithRepository
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.BatchAssociateApprovalRuleTemplateWithRepositories:
    post:
      operationId: BatchAssociateApprovalRuleTemplateWithRepositories
      description: 'Creates an association between an approval rule template and one or more specified repositories. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchAssociateApprovalRuleTemplateWithRepositoriesOutput'
        '480':
          description: ApprovalRuleTemplateNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateNameRequiredException'
        '481':
          description: InvalidApprovalRuleTemplateNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateNameException'
        '482':
          description: ApprovalRuleTemplateDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateDoesNotExistException'
        '483':
          description: RepositoryNamesRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNamesRequiredException'
        '484':
          description: MaximumRepositoryNamesExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumRepositoryNamesExceededException'
        '485':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '486':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '487':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '488':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '489':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchAssociateApprovalRuleTemplateWithRepositoriesInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.BatchAssociateApprovalRuleTemplateWithRepositories
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.BatchDescribeMergeConflicts:
    post:
      operationId: BatchDescribeMergeConflicts
      description: Returns information about one or more merge conflicts in the attempted merge of two commit specifiers using the squash or three-way merge strategy.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDescribeMergeConflictsOutput'
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '483':
          description: MergeOptionRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeOptionRequiredException'
        '484':
          description: InvalidMergeOptionException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMergeOptionException'
        '485':
          description: InvalidContinuationTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContinuationTokenException'
        '486':
          description: CommitRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitRequiredException'
        '487':
          description: CommitDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
        '488':
          description: InvalidCommitException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitException'
        '489':
          description: TipsDivergenceExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TipsDivergenceExceededException'
        '490':
          description: InvalidMaxConflictFilesException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMaxConflictFilesException'
        '491':
          description: InvalidMaxMergeHunksException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMaxMergeHunksException'
        '492':
          description: InvalidConflictDetailLevelException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictDetailLevelException'
        '493':
          description: InvalidConflictResolutionStrategyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionStrategyException'
        '494':
          description: MaximumFileContentToLoadExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumFileContentToLoadExceededException'
        '495':
          description: MaximumItemsToCompareExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumItemsToCompareExceededException'
        '496':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '497':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '498':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '499':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '500':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchDescribeMergeConflictsInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.BatchDescribeMergeConflicts
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.BatchDisassociateApprovalRuleTemplateFromRepositories:
    post:
      operationId: BatchDisassociateApprovalRuleTemplateFromRepositories
      description: 'Removes the association between an approval rule template and one or more specified repositories. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput'
        '480':
          description: ApprovalRuleTemplateNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateNameRequiredException'
        '481':
          description: InvalidApprovalRuleTemplateNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateNameException'
        '482':
          description: ApprovalRuleTemplateDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateDoesNotExistException'
        '483':
          description: RepositoryNamesRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNamesRequiredException'
        '484':
          description: MaximumRepositoryNamesExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumRepositoryNamesExceededException'
        '485':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '486':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '487':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '488':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '489':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchDisassociateApprovalRuleTemplateFromRepositoriesInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.BatchDisassociateApprovalRuleTemplateFromRepositories
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.BatchGetCommits:
    post:
      operationId: BatchGetCommits
      description: Returns information about the contents of one or more commits in a repository.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchGetCommitsOutput'
        '480':
          description: CommitIdsListRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitIdsListRequiredException'
        '481':
          description: CommitIdsLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitIdsLimitExceededException'
        '482':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '483':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '484':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '485':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '486':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '487':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '488':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '489':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchGetCommitsInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.BatchGetCommits
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.BatchGetRepositories:
    post:
      operationId: BatchGetRepositories
      description: <p>Returns information about one or more repositories.</p> <note> <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.</p> </note>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchGetRepositoriesOutput'
        '480':
          description: RepositoryNamesRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNamesRequiredException'
        '481':
          description: MaximumRepositoryNamesExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumRepositoryNamesExceededException'
        '482':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '483':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '484':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '485':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '486':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '487':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchGetRepositoriesInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.BatchGetRepositories
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.CreateApprovalRuleTemplate:
    post:
      operationId: CreateApprovalRuleTemplate
      description: 'Creates a template for approval rules that can then be associated with one or more repositories in your AWS account. When you associate a template with a repository, AWS CodeCommit creates an approval rule that matches the conditions of the template for all pull requests that meet the conditions of the template. For more information, see <a>AssociateApprovalRuleTemplateWithRepository</a>.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApprovalRuleTemplateOutput'
        '480':
          description: ApprovalRuleTemplateNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateNameRequiredException'
        '481':
          description: InvalidApprovalRuleTemplateNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateNameException'
        '482':
          description: ApprovalRuleTemplateNameAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateNameAlreadyExistsException'
        '483':
          description: ApprovalRuleTemplateContentRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateContentRequiredException'
        '484':
          description: InvalidApprovalRuleTemplateContentException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateContentException'
        '485':
          description: InvalidApprovalRuleTemplateDescriptionException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateDescriptionException'
        '486':
          description: NumberOfRuleTemplatesExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NumberOfRuleTemplatesExceededException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApprovalRuleTemplateInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.CreateApprovalRuleTemplate
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.CreateBranch:
    post:
      operationId: CreateBranch
      description: '<p>Creates a branch in a repository and points the branch to a commit.</p> <note> <p>Calling the create branch operation does not set a repository''s default branch. To do this, call the update default branch operation.</p> </note>'
      responses:
        '200':
          description: Success
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '483':
          description: BranchNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameRequiredException'
        '484':
          description: BranchNameExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameExistsException'
        '485':
          description: InvalidBranchNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBranchNameException'
        '486':
          description: CommitIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitIdRequiredException'
        '487':
          description: CommitDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
        '488':
          description: InvalidCommitIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitIdException'
        '489':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '490':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '491':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '492':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '493':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBranchInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.CreateBranch
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.CreateCommit:
    post:
      operationId: CreateCommit
      description: Creates a commit for a repository on the tip of a specified branch.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCommitOutput'
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '483':
          description: ParentCommitIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParentCommitIdRequiredException'
        '484':
          description: InvalidParentCommitIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParentCommitIdException'
        '485':
          description: ParentCommitDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParentCommitDoesNotExistException'
        '486':
          description: ParentCommitIdOutdatedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParentCommitIdOutdatedException'
        '487':
          description: BranchNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameRequiredException'
        '488':
          description: InvalidBranchNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBranchNameException'
        '489':
          description: BranchDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchDoesNotExistException'
        '490':
          description: BranchNameIsTagNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameIsTagNameException'
        '491':
          description: FileEntryRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileEntryRequiredException'
        '492':
          description: MaximumFileEntriesExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumFileEntriesExceededException'
        '493':
          description: PutFileEntryConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutFileEntryConflictException'
        '494':
          description: SourceFileOrContentRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceFileOrContentRequiredException'
        '495':
          description: FileContentAndSourceFileSpecifiedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileContentAndSourceFileSpecifiedException'
        '496':
          description: PathRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
        '497':
          description: InvalidPathException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPathException'
        '498':
          description: SamePathRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SamePathRequestException'
        '499':
          description: FileDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDoesNotExistException'
        '500':
          description: FileContentSizeLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileContentSizeLimitExceededException'
        '501':
          description: FolderContentSizeLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderContentSizeLimitExceededException'
        '502':
          description: InvalidDeletionParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeletionParameterException'
        '503':
          description: RestrictedSourceFileException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestrictedSourceFileException'
        '504':
          description: FileModeRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileModeRequiredException'
        '505':
          description: InvalidFileModeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidFileModeException'
        '506':
          description: NameLengthExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NameLengthExceededException'
        '507':
          description: InvalidEmailException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailException'
        '508':
          description: CommitMessageLengthExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitMessageLengthExceededException'
        '509':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '510':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '511':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '512':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '513':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
        '514':
          description: NoChangeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoChangeException'
        '515':
          description: FileNameConflictsWithDirectoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileNameConflictsWithDirectoryNameException'
        '516':
          description: DirectoryNameConflictsWithFileNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryNameConflictsWithFileNameException'
        '517':
          description: FilePathConflictsWithSubmodulePathException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilePathConflictsWithSubmodulePathException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommitInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.CreateCommit
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.CreatePullRequest:
    post:
      operationId: CreatePullRequest
      description: Creates a pull request in the specified repository.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePullRequestOutput'
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '483':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '484':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '485':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '486':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '487':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
        '488':
          description: ClientRequestTokenRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientRequestTokenRequiredException'
        '489':
          description: InvalidClientRequestTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidClientRequestTokenException'
        '490':
          description: IdempotencyParameterMismatchException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdempotencyParameterMismatchException'
        '491':
          description: ReferenceNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceNameRequiredException'
        '492':
          description: InvalidReferenceNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidReferenceNameException'
        '493':
          description: ReferenceDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceDoesNotExistException'
        '494':
          description: ReferenceTypeNotSupportedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceTypeNotSupportedException'
        '495':
          description: TitleRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TitleRequiredException'
        '496':
          description: InvalidTitleException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTitleException'
        '497':
          description: InvalidDescriptionException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDescriptionException'
        '498':
          description: TargetsRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TargetsRequiredException'
        '499':
          description: InvalidTargetsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTargetsException'
        '500':
          description: TargetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TargetRequiredException'
        '501':
          description: InvalidTargetException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTargetException'
        '502':
          description: MultipleRepositoriesInPullRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipleRepositoriesInPullRequestException'
        '503':
          description: MaximumOpenPullRequestsExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumOpenPullRequestsExceededException'
        '504':
          description: SourceAndDestinationAreSameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceAndDestinationAreSameException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePullRequestInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.CreatePullRequest
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.CreatePullRequestApprovalRule:
    post:
      operationId: CreatePullRequestApprovalRule
      description: Creates an approval rule for a pull request.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePullRequestApprovalRuleOutput'
        '480':
          description: ApprovalRuleNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleNameRequiredException'
        '481':
          description: InvalidApprovalRuleNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleNameException'
        '482':
          description: ApprovalRuleNameAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleNameAlreadyExistsException'
        '483':
          description: ApprovalRuleContentRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleContentRequiredException'
        '484':
          description: InvalidApprovalRuleContentException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleContentException'
        '485':
          description: NumberOfRulesExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NumberOfRulesExceededException'
        '486':
          description: PullRequestDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
        '487':
          description: InvalidPullRequestIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
        '488':
          description: PullRequestIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
        '489':
          description: PullRequestAlreadyClosedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestAlreadyClosedException'
        '490':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '491':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '492':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '493':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '494':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePullRequestApprovalRuleInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.CreatePullRequestApprovalRule
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.CreateRepository:
    post:
      operationId: CreateRepository
      description: 'Creates a new, empty repository.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRepositoryOutput'
        '480':
          description: RepositoryNameExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameExistsException'
        '481':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '482':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '483':
          description: InvalidRepositoryDescriptionException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryDescriptionException'
        '484':
          description: RepositoryLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryLimitExceededException'
        '485':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '486':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '487':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '488':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '489':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
        '490':
          description: InvalidTagsMapException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagsMapException'
        '491':
          description: TooManyTagsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
        '492':
          description: InvalidSystemTagUsageException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSystemTagUsageException'
        '493':
          description: TagPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagPolicyException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRepositoryInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.CreateRepository
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.CreateUnreferencedMergeCommit:
    post:
      operationId: CreateUnreferencedMergeCommit
      description: '<p>Creates an unreferenced commit that represents the result of merging two branches using a specified merge strategy. This can help you determine the outcome of a potential merge. This API cannot be used with the fast-forward merge strategy because that strategy does not create a merge commit.</p> <note> <p>This unreferenced merge commit can only be accessed using the GetCommit API or through git commands such as git fetch. To retrieve this commit, you must specify its commit ID or otherwise reference it.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUnreferencedMergeCommitOutput'
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '483':
          description: TipsDivergenceExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TipsDivergenceExceededException'
        '484':
          description: CommitRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitRequiredException'
        '485':
          description: InvalidCommitException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitException'
        '486':
          description: CommitDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
        '487':
          description: MergeOptionRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeOptionRequiredException'
        '488':
          description: InvalidMergeOptionException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMergeOptionException'
        '489':
          description: InvalidConflictDetailLevelException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictDetailLevelException'
        '490':
          description: InvalidConflictResolutionStrategyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionStrategyException'
        '491':
          description: InvalidConflictResolutionException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionException'
        '492':
          description: ManualMergeRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualMergeRequiredException'
        '493':
          description: MaximumConflictResolutionEntriesExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumConflictResolutionEntriesExceededException'
        '494':
          description: MultipleConflictResolutionEntriesException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipleConflictResolutionEntriesException'
        '495':
          description: ReplacementTypeRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplacementTypeRequiredException'
        '496':
          description: InvalidReplacementTypeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidReplacementTypeException'
        '497':
          description: ReplacementContentRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplacementContentRequiredException'
        '498':
          description: InvalidReplacementContentException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidReplacementContentException'
        '499':
          description: PathRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
        '500':
          description: InvalidPathException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPathException'
        '501':
          description: FileContentSizeLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileContentSizeLimitExceededException'
        '502':
          description: FolderContentSizeLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderContentSizeLimitExceededException'
        '503':
          description: MaximumFileContentToLoadExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumFileContentToLoadExceededException'
        '504':
          description: MaximumItemsToCompareExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumItemsToCompareExceededException'
        '505':
          description: ConcurrentReferenceUpdateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentReferenceUpdateException'
        '506':
          description: FileModeRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileModeRequiredException'
        '507':
          description: InvalidFileModeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidFileModeException'
        '508':
          description: NameLengthExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NameLengthExceededException'
        '509':
          description: InvalidEmailException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailException'
        '510':
          description: CommitMessageLengthExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitMessageLengthExceededException'
        '511':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '512':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '513':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '514':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '515':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUnreferencedMergeCommitInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.CreateUnreferencedMergeCommit
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.DeleteApprovalRuleTemplate:
    post:
      operationId: DeleteApprovalRuleTemplate
      description: Deletes a specified approval rule template. Deleting a template does not remove approval rules on pull requests already created with the template.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteApprovalRuleTemplateOutput'
        '480':
          description: ApprovalRuleTemplateNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateNameRequiredException'
        '481':
          description: InvalidApprovalRuleTemplateNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateNameException'
        '482':
          description: ApprovalRuleTemplateInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateInUseException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteApprovalRuleTemplateInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.DeleteApprovalRuleTemplate
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.DeleteBranch:
    post:
      operationId: DeleteBranch
      description: 'Deletes a branch from a repository, unless that branch is the default branch for the repository. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteBranchOutput'
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '482':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '483':
          description: BranchNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameRequiredException'
        '484':
          description: InvalidBranchNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBranchNameException'
        '485':
          description: DefaultBranchCannotBeDeletedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultBranchCannotBeDeletedException'
        '486':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '487':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '488':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '489':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '490':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteBranchInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.DeleteBranch
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.DeleteCommentContent:
    post:
      operationId: DeleteCommentContent
      description: 'Deletes the content of a comment made on a change, file, or commit in a repository.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCommentContentOutput'
        '480':
          description: CommentDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDoesNotExistException'
        '481':
          description: CommentIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentIdRequiredException'
        '482':
          description: InvalidCommentIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommentIdException'
        '483':
          description: CommentDeletedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDeletedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCommentContentInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.DeleteCommentContent
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.DeleteFile:
    post:
      operationId: DeleteFile
      description: Deletes a specified file from a specified branch. A commit is created on the branch that contains the revision. The file still exists in the commits earlier to the commit that contains the deletion.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteFileOutput'
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '483':
          description: ParentCommitIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParentCommitIdRequiredException'
        '484':
          description: InvalidParentCommitIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParentCommitIdException'
        '485':
          description: ParentCommitDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParentCommitDoesNotExistException'
        '486':
          description: ParentCommitIdOutdatedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParentCommitIdOutdatedException'
        '487':
          description: PathRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
        '488':
          description: InvalidPathException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPathException'
        '489':
          description: FileDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDoesNotExistException'
        '490':
          description: BranchNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameRequiredException'
        '491':
          description: InvalidBranchNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBranchNameException'
        '492':
          description: BranchDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchDoesNotExistException'
        '493':
          description: BranchNameIsTagNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameIsTagNameException'
        '494':
          description: NameLengthExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NameLengthExceededException'
        '495':
          description: InvalidEmailException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailException'
        '496':
          description: CommitMessageLengthExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitMessageLengthExceededException'
        '497':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '498':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '499':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '500':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '501':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteFileInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.DeleteFile
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.DeletePullRequestApprovalRule:
    post:
      operationId: DeletePullRequestApprovalRule
      description: 'Deletes an approval rule from a specified pull request. Approval rules can be deleted from a pull request only if the pull request is open, and if the approval rule was created specifically for a pull request and not generated from an approval rule template associated with the repository where the pull request was created. You cannot delete an approval rule from a merged or closed pull request.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletePullRequestApprovalRuleOutput'
        '480':
          description: PullRequestDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
        '483':
          description: PullRequestAlreadyClosedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestAlreadyClosedException'
        '484':
          description: ApprovalRuleNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleNameRequiredException'
        '485':
          description: InvalidApprovalRuleNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleNameException'
        '486':
          description: CannotDeleteApprovalRuleFromTemplateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CannotDeleteApprovalRuleFromTemplateException'
        '487':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '488':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '489':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '490':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '491':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeletePullRequestApprovalRuleInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.DeletePullRequestApprovalRule
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.DeleteRepository:
    post:
      operationId: DeleteRepository
      description: '<p>Deletes a repository. If a specified repository was already deleted, a null repository ID is returned.</p> <important> <p>Deleting a repository also deletes all associated objects and metadata. After a repository is deleted, all future push calls to the deleted repository fail.</p> </important>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRepositoryOutput'
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '482':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '483':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '484':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '485':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '486':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRepositoryInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.DeleteRepository
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.DescribeMergeConflicts:
    post:
      operationId: DescribeMergeConflicts
      description: 'Returns information about one or more merge conflicts in the attempted merge of two commit specifiers using the squash or three-way merge strategy. If the merge option for the attempted merge is specified as FAST_FORWARD_MERGE, an exception is thrown.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeMergeConflictsOutput'
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '483':
          description: MergeOptionRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeOptionRequiredException'
        '484':
          description: InvalidMergeOptionException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMergeOptionException'
        '485':
          description: InvalidContinuationTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContinuationTokenException'
        '486':
          description: CommitRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitRequiredException'
        '487':
          description: CommitDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
        '488':
          description: InvalidCommitException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitException'
        '489':
          description: TipsDivergenceExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TipsDivergenceExceededException'
        '490':
          description: PathRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
        '491':
          description: InvalidPathException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPathException'
        '492':
          description: FileDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDoesNotExistException'
        '493':
          description: InvalidMaxMergeHunksException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMaxMergeHunksException'
        '494':
          description: InvalidConflictDetailLevelException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictDetailLevelException'
        '495':
          description: InvalidConflictResolutionStrategyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionStrategyException'
        '496':
          description: MaximumFileContentToLoadExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumFileContentToLoadExceededException'
        '497':
          description: MaximumItemsToCompareExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumItemsToCompareExceededException'
        '498':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '499':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '500':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '501':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '502':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeMergeConflictsInput'
      parameters:
        - name: maxMergeHunks
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.DescribeMergeConflicts
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.DescribePullRequestEvents:
    post:
      operationId: DescribePullRequestEvents
      description: Returns information about one or more pull request events.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribePullRequestEventsOutput'
        '480':
          description: PullRequestDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
        '483':
          description: InvalidPullRequestEventTypeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestEventTypeException'
        '484':
          description: InvalidActorArnException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidActorArnException'
        '485':
          description: ActorDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorDoesNotExistException'
        '486':
          description: InvalidMaxResultsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMaxResultsException'
        '487':
          description: InvalidContinuationTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContinuationTokenException'
        '488':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '489':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '490':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '491':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '492':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribePullRequestEventsInput'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.DescribePullRequestEvents
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.DisassociateApprovalRuleTemplateFromRepository:
    post:
      operationId: DisassociateApprovalRuleTemplateFromRepository
      description: Removes the association between a template and a repository so that approval rules based on the template are not automatically created when pull requests are created in the specified repository. This does not delete any approval rules previously created for pull requests through the template association.
      responses:
        '200':
          description: Success
        '480':
          description: ApprovalRuleTemplateNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateNameRequiredException'
        '481':
          description: InvalidApprovalRuleTemplateNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateNameException'
        '482':
          description: ApprovalRuleTemplateDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateDoesNotExistException'
        '483':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '484':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '485':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '486':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '487':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '488':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '489':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '490':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisassociateApprovalRuleTemplateFromRepositoryInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.DisassociateApprovalRuleTemplateFromRepository
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.EvaluatePullRequestApprovalRules:
    post:
      operationId: EvaluatePullRequestApprovalRules
      description: Evaluates whether a pull request has met all the conditions specified in its associated approval rules.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluatePullRequestApprovalRulesOutput'
        '480':
          description: PullRequestDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
        '483':
          description: InvalidRevisionIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRevisionIdException'
        '484':
          description: RevisionIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionIdRequiredException'
        '485':
          description: RevisionNotCurrentException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionNotCurrentException'
        '486':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '487':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '488':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '489':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '490':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluatePullRequestApprovalRulesInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.EvaluatePullRequestApprovalRules
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.GetApprovalRuleTemplate:
    post:
      operationId: GetApprovalRuleTemplate
      description: Returns information about a specified approval rule template.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApprovalRuleTemplateOutput'
        '480':
          description: ApprovalRuleTemplateNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateNameRequiredException'
        '481':
          description: InvalidApprovalRuleTemplateNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateNameException'
        '482':
          description: ApprovalRuleTemplateDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateDoesNotExistException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetApprovalRuleTemplateInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.GetApprovalRuleTemplate
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.GetBlob:
    post:
      operationId: GetBlob
      description: Returns the base-64 encoded content of an individual blob in a repository.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBlobOutput'
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '483':
          description: BlobIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlobIdRequiredException'
        '484':
          description: InvalidBlobIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBlobIdException'
        '485':
          description: BlobIdDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlobIdDoesNotExistException'
        '486':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '487':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '488':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '489':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '490':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
        '491':
          description: FileTooLargeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileTooLargeException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetBlobInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.GetBlob
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.GetBranch:
    post:
      operationId: GetBranch
      description: 'Returns information about a repository branch, including its name and the last commit ID.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBranchOutput'
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '482':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '483':
          description: BranchNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameRequiredException'
        '484':
          description: InvalidBranchNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBranchNameException'
        '485':
          description: BranchDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchDoesNotExistException'
        '486':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '487':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '488':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '489':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '490':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetBranchInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.GetBranch
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.GetComment:
    post:
      operationId: GetComment
      description: '<p>Returns the content of a comment made on a change, file, or commit in a repository. </p> <note> <p>Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of reactions from active identities, use GetCommentReactions.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentOutput'
        '480':
          description: CommentDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDoesNotExistException'
        '481':
          description: CommentDeletedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDeletedException'
        '482':
          description: CommentIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentIdRequiredException'
        '483':
          description: InvalidCommentIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommentIdException'
        '484':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '485':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '486':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '487':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '488':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCommentInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.GetComment
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.GetCommentReactions:
    post:
      operationId: GetCommentReactions
      description: Returns information about reactions to a specified comment ID. Reactions from users who have been deleted will not be included in the count.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentReactionsOutput'
        '480':
          description: CommentDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDoesNotExistException'
        '481':
          description: CommentIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentIdRequiredException'
        '482':
          description: InvalidCommentIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommentIdException'
        '483':
          description: InvalidReactionUserArnException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidReactionUserArnException'
        '484':
          description: InvalidMaxResultsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMaxResultsException'
        '485':
          description: InvalidContinuationTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContinuationTokenException'
        '486':
          description: CommentDeletedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDeletedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCommentReactionsInput'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.GetCommentReactions
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.GetCommentsForComparedCommit:
    post:
      operationId: GetCommentsForComparedCommit
      description: '<p>Returns information about comments made on the comparison between two commits.</p> <note> <p>Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of reactions from active identities, use GetCommentReactions.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentsForComparedCommitOutput'
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '482':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '483':
          description: CommitIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitIdRequiredException'
        '484':
          description: InvalidCommitIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitIdException'
        '485':
          description: CommitDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
        '486':
          description: InvalidMaxResultsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMaxResultsException'
        '487':
          description: InvalidContinuationTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContinuationTokenException'
        '488':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '489':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '490':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '491':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '492':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCommentsForComparedCommitInput'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.GetCommentsForComparedCommit
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.GetCommentsForPullRequest:
    post:
      operationId: GetCommentsForPullRequest
      description: '<p>Returns comments made on a pull request.</p> <note> <p>Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of reactions from active identities, use GetCommentReactions.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentsForPullRequestOutput'
        '480':
          description: PullRequestIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
        '481':
          description: PullRequestDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
        '482':
          description: InvalidPullRequestIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
        '483':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '484':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '485':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '486':
          description: CommitIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitIdRequiredException'
        '487':
          description: InvalidCommitIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitIdException'
        '488':
          description: CommitDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
        '489':
          description: InvalidMaxResultsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMaxResultsException'
        '490':
          description: InvalidContinuationTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContinuationTokenException'
        '491':
          description: RepositoryNotAssociatedWithPullRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotAssociatedWithPullRequestException'
        '492':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '493':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '494':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '495':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '496':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCommentsForPullRequestInput'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.GetCommentsForPullRequest
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.GetCommit:
    post:
      operationId: GetCommit
      description: 'Returns information about a commit, including commit message and committer information.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommitOutput'
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '483':
          description: CommitIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitIdRequiredException'
        '484':
          description: InvalidCommitIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitIdException'
        '485':
          description: CommitIdDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitIdDoesNotExistException'
        '486':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '487':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '488':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '489':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '490':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCommitInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.GetCommit
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.GetDifferences:
    post:
      operationId: GetDifferences
      description: 'Returns information about the differences in a valid commit specifier (such as a branch, tag, HEAD, commit ID, or other fully qualified reference). Results can be limited to a specified path.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDifferencesOutput'
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '482':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '483':
          description: InvalidContinuationTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContinuationTokenException'
        '484':
          description: InvalidMaxResultsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMaxResultsException'
        '485':
          description: InvalidCommitIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitIdException'
        '486':
          description: CommitRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitRequiredException'
        '487':
          description: InvalidCommitException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitException'
        '488':
          description: CommitDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
        '489':
          description: InvalidPathException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPathException'
        '490':
          description: PathDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathDoesNotExistException'
        '491':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '492':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '493':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '494':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '495':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetDifferencesInput'
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.GetDifferences
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.GetFile:
    post:
      operationId: GetFile
      description: Returns the base-64 encoded contents of a specified file and its metadata.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFileOutput'
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '483':
          description: InvalidCommitException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitException'
        '484':
          description: CommitDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
        '485':
          description: PathRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
        '486':
          description: InvalidPathException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPathException'
        '487':
          description: FileDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDoesNotExistException'
        '488':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '489':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '490':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '491':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '492':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
        '493':
          description: FileTooLargeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileTooLargeException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetFileInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.GetFile
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.GetFolder:
    post:
      operationId: GetFolder
      description: Returns the contents of a specified folder in a repository.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFolderOutput'
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '483':
          description: InvalidCommitException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitException'
        '484':
          description: CommitDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
        '485':
          description: PathRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
        '486':
          description: InvalidPathException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPathException'
        '487':
          description: FolderDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderDoesNotExistException'
        '488':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '489':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '490':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '491':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '492':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetFolderInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.GetFolder
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.GetMergeCommit:
    post:
      operationId: GetMergeCommit
      description: Returns information about a specified merge commit.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMergeCommitOutput'
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '483':
          description: CommitRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitRequiredException'
        '484':
          description: InvalidCommitException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitException'
        '485':
          description: CommitDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
        '486':
          description: InvalidConflictDetailLevelException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictDetailLevelException'
        '487':
          description: InvalidConflictResolutionStrategyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionStrategyException'
        '488':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '489':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '490':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '491':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '492':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetMergeCommitInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.GetMergeCommit
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.GetMergeConflicts:
    post:
      operationId: GetMergeConflicts
      description: Returns information about merge conflicts between the before and after commit IDs for a pull request in a repository.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMergeConflictsOutput'
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '483':
          description: MergeOptionRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeOptionRequiredException'
        '484':
          description: InvalidMergeOptionException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMergeOptionException'
        '485':
          description: InvalidContinuationTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContinuationTokenException'
        '486':
          description: CommitRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitRequiredException'
        '487':
          description: CommitDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
        '488':
          description: InvalidCommitException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitException'
        '489':
          description: TipsDivergenceExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TipsDivergenceExceededException'
        '490':
          description: InvalidMaxConflictFilesException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMaxConflictFilesException'
        '491':
          description: InvalidConflictDetailLevelException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictDetailLevelException'
        '492':
          description: InvalidDestinationCommitSpecifierException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDestinationCommitSpecifierException'
        '493':
          description: InvalidSourceCommitSpecifierException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSourceCommitSpecifierException'
        '494':
          description: InvalidConflictResolutionStrategyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionStrategyException'
        '495':
          description: MaximumFileContentToLoadExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumFileContentToLoadExceededException'
        '496':
          description: MaximumItemsToCompareExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumItemsToCompareExceededException'
        '497':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '498':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '499':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '500':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '501':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetMergeConflictsInput'
      parameters:
        - name: maxConflictFiles
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.GetMergeConflicts
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.GetMergeOptions:
    post:
      operationId: GetMergeOptions
      description: 'Returns information about the merge options available for merging two specified branches. For details about why a merge option is not available, use GetMergeConflicts or DescribeMergeConflicts.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMergeOptionsOutput'
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '483':
          description: CommitRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitRequiredException'
        '484':
          description: CommitDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
        '485':
          description: InvalidCommitException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitException'
        '486':
          description: TipsDivergenceExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TipsDivergenceExceededException'
        '487':
          description: InvalidConflictDetailLevelException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictDetailLevelException'
        '488':
          description: InvalidConflictResolutionStrategyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionStrategyException'
        '489':
          description: MaximumFileContentToLoadExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumFileContentToLoadExceededException'
        '490':
          description: MaximumItemsToCompareExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumItemsToCompareExceededException'
        '491':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '492':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '493':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '494':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '495':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetMergeOptionsInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.GetMergeOptions
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.GetPullRequest:
    post:
      operationId: GetPullRequest
      description: Gets information about a pull request in a specified repository.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPullRequestOutput'
        '480':
          description: PullRequestDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
        '483':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '484':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '485':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '486':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '487':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPullRequestInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.GetPullRequest
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.GetPullRequestApprovalStates:
    post:
      operationId: GetPullRequestApprovalStates
      description: Gets information about the approval states for a specified pull request. Approval states only apply to pull requests that have one or more approval rules applied to them.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPullRequestApprovalStatesOutput'
        '480':
          description: PullRequestDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
        '483':
          description: InvalidRevisionIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRevisionIdException'
        '484':
          description: RevisionIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionIdRequiredException'
        '485':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '486':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '487':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '488':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '489':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPullRequestApprovalStatesInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.GetPullRequestApprovalStates
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.GetPullRequestOverrideState:
    post:
      operationId: GetPullRequestOverrideState
      description: 'Returns information about whether approval rules have been set aside (overridden) for a pull request, and if so, the Amazon Resource Name (ARN) of the user or identity that overrode the rules and their requirements for the pull request.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPullRequestOverrideStateOutput'
        '480':
          description: PullRequestDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
        '483':
          description: InvalidRevisionIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRevisionIdException'
        '484':
          description: RevisionIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionIdRequiredException'
        '485':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '486':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '487':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '488':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '489':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPullRequestOverrideStateInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.GetPullRequestOverrideState
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.GetRepository:
    post:
      operationId: GetRepository
      description: <p>Returns information about a repository.</p> <note> <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.</p> </note>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRepositoryOutput'
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '482':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '483':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '484':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '485':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '486':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '487':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetRepositoryInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.GetRepository
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.GetRepositoryTriggers:
    post:
      operationId: GetRepositoryTriggers
      description: Gets information about triggers configured for a repository.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRepositoryTriggersOutput'
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '483':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '484':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '485':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '486':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '487':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetRepositoryTriggersInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.GetRepositoryTriggers
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.ListApprovalRuleTemplates:
    post:
      operationId: ListApprovalRuleTemplates
      description: 'Lists all approval rule templates in the specified AWS Region in your AWS account. If an AWS Region is not specified, the AWS Region where you are signed in is used.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApprovalRuleTemplatesOutput'
        '480':
          description: InvalidMaxResultsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMaxResultsException'
        '481':
          description: InvalidContinuationTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContinuationTokenException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListApprovalRuleTemplatesInput'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.ListApprovalRuleTemplates
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.ListAssociatedApprovalRuleTemplatesForRepository:
    post:
      operationId: ListAssociatedApprovalRuleTemplatesForRepository
      description: Lists all approval rule templates that are associated with a specified repository.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAssociatedApprovalRuleTemplatesForRepositoryOutput'
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '483':
          description: InvalidMaxResultsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMaxResultsException'
        '484':
          description: InvalidContinuationTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContinuationTokenException'
        '485':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '486':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '487':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '488':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '489':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListAssociatedApprovalRuleTemplatesForRepositoryInput'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.ListAssociatedApprovalRuleTemplatesForRepository
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.ListBranches:
    post:
      operationId: ListBranches
      description: Gets information about one or more branches in a repository.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBranchesOutput'
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '482':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '483':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '484':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '485':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '486':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '487':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
        '488':
          description: InvalidContinuationTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContinuationTokenException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListBranchesInput'
      parameters:
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.ListBranches
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.ListPullRequests:
    post:
      operationId: ListPullRequests
      description: Returns a list of pull requests for a specified repository. The return list can be refined by pull request status or pull request author ARN.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPullRequestsOutput'
        '480':
          description: InvalidPullRequestStatusException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestStatusException'
        '481':
          description: InvalidAuthorArnException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidAuthorArnException'
        '482':
          description: AuthorDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorDoesNotExistException'
        '483':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '484':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '485':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '486':
          description: InvalidMaxResultsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMaxResultsException'
        '487':
          description: InvalidContinuationTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContinuationTokenException'
        '488':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '489':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '490':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '491':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '492':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListPullRequestsInput'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.ListPullRequests
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.ListRepositories:
    post:
      operationId: ListRepositories
      description: Gets information about one or more repositories.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRepositoriesOutput'
        '480':
          description: InvalidSortByException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSortByException'
        '481':
          description: InvalidOrderException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidOrderException'
        '482':
          description: InvalidContinuationTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContinuationTokenException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListRepositoriesInput'
      parameters:
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.ListRepositories
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.ListRepositoriesForApprovalRuleTemplate:
    post:
      operationId: ListRepositoriesForApprovalRuleTemplate
      description: Lists all repositories associated with the specified approval rule template.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRepositoriesForApprovalRuleTemplateOutput'
        '480':
          description: ApprovalRuleTemplateNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateNameRequiredException'
        '481':
          description: InvalidApprovalRuleTemplateNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateNameException'
        '482':
          description: ApprovalRuleTemplateDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateDoesNotExistException'
        '483':
          description: InvalidMaxResultsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMaxResultsException'
        '484':
          description: InvalidContinuationTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContinuationTokenException'
        '485':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '486':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '487':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '488':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '489':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListRepositoriesForApprovalRuleTemplateInput'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.ListRepositoriesForApprovalRuleTemplate
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.ListTagsForResource:
    post:
      operationId: ListTagsForResource
      description: 'Gets information about AWS tags for a specified Amazon Resource Name (ARN) in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats">CodeCommit Resources and Operations</a> in the<i> AWS CodeCommit User Guide</i>.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceOutput'
        '480':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '481':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '482':
          description: ResourceArnRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceArnRequiredException'
        '483':
          description: InvalidResourceArnException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidResourceArnException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTagsForResourceInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.ListTagsForResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.MergeBranchesByFastForward:
    post:
      operationId: MergeBranchesByFastForward
      description: Merges two branches using the fast-forward merge strategy.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeBranchesByFastForwardOutput'
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '483':
          description: TipsDivergenceExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TipsDivergenceExceededException'
        '484':
          description: CommitRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitRequiredException'
        '485':
          description: InvalidCommitException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitException'
        '486':
          description: CommitDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
        '487':
          description: InvalidTargetBranchException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTargetBranchException'
        '488':
          description: InvalidBranchNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBranchNameException'
        '489':
          description: BranchNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameRequiredException'
        '490':
          description: BranchNameIsTagNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameIsTagNameException'
        '491':
          description: BranchDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchDoesNotExistException'
        '492':
          description: ManualMergeRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualMergeRequiredException'
        '493':
          description: ConcurrentReferenceUpdateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentReferenceUpdateException'
        '494':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '495':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '496':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '497':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '498':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergeBranchesByFastForwardInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.MergeBranchesByFastForward
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.MergeBranchesBySquash:
    post:
      operationId: MergeBranchesBySquash
      description: Merges two branches using the squash merge strategy.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeBranchesBySquashOutput'
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '483':
          description: TipsDivergenceExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TipsDivergenceExceededException'
        '484':
          description: CommitRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitRequiredException'
        '485':
          description: InvalidCommitException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitException'
        '486':
          description: CommitDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
        '487':
          description: InvalidTargetBranchException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTargetBranchException'
        '488':
          description: InvalidBranchNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBranchNameException'
        '489':
          description: BranchNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameRequiredException'
        '490':
          description: BranchNameIsTagNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameIsTagNameException'
        '491':
          description: BranchDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchDoesNotExistException'
        '492':
          description: ManualMergeRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualMergeRequiredException'
        '493':
          description: InvalidConflictDetailLevelException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictDetailLevelException'
        '494':
          description: InvalidConflictResolutionStrategyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionStrategyException'
        '495':
          description: InvalidConflictResolutionException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionException'
        '496':
          description: MaximumConflictResolutionEntriesExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumConflictResolutionEntriesExceededException'
        '497':
          description: MultipleConflictResolutionEntriesException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipleConflictResolutionEntriesException'
        '498':
          description: ReplacementTypeRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplacementTypeRequiredException'
        '499':
          description: InvalidReplacementTypeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidReplacementTypeException'
        '500':
          description: ReplacementContentRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplacementContentRequiredException'
        '501':
          description: InvalidReplacementContentException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidReplacementContentException'
        '502':
          description: PathRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
        '503':
          description: InvalidPathException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPathException'
        '504':
          description: FileContentSizeLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileContentSizeLimitExceededException'
        '505':
          description: FolderContentSizeLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderContentSizeLimitExceededException'
        '506':
          description: MaximumFileContentToLoadExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumFileContentToLoadExceededException'
        '507':
          description: MaximumItemsToCompareExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumItemsToCompareExceededException'
        '508':
          description: FileModeRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileModeRequiredException'
        '509':
          description: InvalidFileModeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidFileModeException'
        '510':
          description: NameLengthExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NameLengthExceededException'
        '511':
          description: InvalidEmailException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailException'
        '512':
          description: CommitMessageLengthExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitMessageLengthExceededException'
        '513':
          description: ConcurrentReferenceUpdateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentReferenceUpdateException'
        '514':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '515':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '516':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '517':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '518':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergeBranchesBySquashInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.MergeBranchesBySquash
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.MergeBranchesByThreeWay:
    post:
      operationId: MergeBranchesByThreeWay
      description: Merges two specified branches using the three-way merge strategy.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeBranchesByThreeWayOutput'
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '483':
          description: TipsDivergenceExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TipsDivergenceExceededException'
        '484':
          description: CommitRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitRequiredException'
        '485':
          description: InvalidCommitException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitException'
        '486':
          description: CommitDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
        '487':
          description: InvalidTargetBranchException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTargetBranchException'
        '488':
          description: InvalidBranchNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBranchNameException'
        '489':
          description: BranchNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameRequiredException'
        '490':
          description: BranchNameIsTagNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameIsTagNameException'
        '491':
          description: BranchDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchDoesNotExistException'
        '492':
          description: ManualMergeRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualMergeRequiredException'
        '493':
          description: ConcurrentReferenceUpdateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentReferenceUpdateException'
        '494':
          description: InvalidConflictDetailLevelException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictDetailLevelException'
        '495':
          description: InvalidConflictResolutionStrategyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionStrategyException'
        '496':
          description: InvalidConflictResolutionException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionException'
        '497':
          description: MaximumConflictResolutionEntriesExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumConflictResolutionEntriesExceededException'
        '498':
          description: MultipleConflictResolutionEntriesException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipleConflictResolutionEntriesException'
        '499':
          description: ReplacementTypeRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplacementTypeRequiredException'
        '500':
          description: InvalidReplacementTypeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidReplacementTypeException'
        '501':
          description: ReplacementContentRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplacementContentRequiredException'
        '502':
          description: InvalidReplacementContentException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidReplacementContentException'
        '503':
          description: PathRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
        '504':
          description: InvalidPathException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPathException'
        '505':
          description: FileContentSizeLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileContentSizeLimitExceededException'
        '506':
          description: FolderContentSizeLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderContentSizeLimitExceededException'
        '507':
          description: MaximumFileContentToLoadExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumFileContentToLoadExceededException'
        '508':
          description: MaximumItemsToCompareExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumItemsToCompareExceededException'
        '509':
          description: FileModeRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileModeRequiredException'
        '510':
          description: InvalidFileModeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidFileModeException'
        '511':
          description: NameLengthExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NameLengthExceededException'
        '512':
          description: InvalidEmailException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailException'
        '513':
          description: CommitMessageLengthExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitMessageLengthExceededException'
        '514':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '515':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '516':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '517':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '518':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergeBranchesByThreeWayInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.MergeBranchesByThreeWay
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.MergePullRequestByFastForward:
    post:
      operationId: MergePullRequestByFastForward
      description: 'Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the fast-forward merge strategy. If the merge is successful, it closes the pull request.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergePullRequestByFastForwardOutput'
        '480':
          description: ManualMergeRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualMergeRequiredException'
        '481':
          description: PullRequestAlreadyClosedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestAlreadyClosedException'
        '482':
          description: PullRequestDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
        '483':
          description: InvalidPullRequestIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
        '484':
          description: PullRequestIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
        '485':
          description: TipOfSourceReferenceIsDifferentException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TipOfSourceReferenceIsDifferentException'
        '486':
          description: ReferenceDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceDoesNotExistException'
        '487':
          description: InvalidCommitIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitIdException'
        '488':
          description: RepositoryNotAssociatedWithPullRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotAssociatedWithPullRequestException'
        '489':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '490':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '491':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '492':
          description: ConcurrentReferenceUpdateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentReferenceUpdateException'
        '493':
          description: PullRequestApprovalRulesNotSatisfiedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestApprovalRulesNotSatisfiedException'
        '494':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '495':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '496':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '497':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '498':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergePullRequestByFastForwardInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.MergePullRequestByFastForward
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.MergePullRequestBySquash:
    post:
      operationId: MergePullRequestBySquash
      description: 'Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the squash merge strategy. If the merge is successful, it closes the pull request.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergePullRequestBySquashOutput'
        '480':
          description: PullRequestAlreadyClosedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestAlreadyClosedException'
        '481':
          description: PullRequestDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
        '482':
          description: PullRequestIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
        '483':
          description: InvalidPullRequestIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
        '484':
          description: InvalidCommitIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitIdException'
        '485':
          description: ManualMergeRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualMergeRequiredException'
        '486':
          description: TipOfSourceReferenceIsDifferentException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TipOfSourceReferenceIsDifferentException'
        '487':
          description: TipsDivergenceExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TipsDivergenceExceededException'
        '488':
          description: NameLengthExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NameLengthExceededException'
        '489':
          description: InvalidEmailException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailException'
        '490':
          description: CommitMessageLengthExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitMessageLengthExceededException'
        '491':
          description: InvalidConflictDetailLevelException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictDetailLevelException'
        '492':
          description: InvalidConflictResolutionStrategyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionStrategyException'
        '493':
          description: InvalidConflictResolutionException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionException'
        '494':
          description: ReplacementTypeRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplacementTypeRequiredException'
        '495':
          description: InvalidReplacementTypeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidReplacementTypeException'
        '496':
          description: MultipleConflictResolutionEntriesException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipleConflictResolutionEntriesException'
        '497':
          description: ReplacementContentRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplacementContentRequiredException'
        '498':
          description: MaximumConflictResolutionEntriesExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumConflictResolutionEntriesExceededException'
        '499':
          description: ConcurrentReferenceUpdateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentReferenceUpdateException'
        '500':
          description: PathRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
        '501':
          description: InvalidPathException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPathException'
        '502':
          description: InvalidFileModeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidFileModeException'
        '503':
          description: InvalidReplacementContentException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidReplacementContentException'
        '504':
          description: FileContentSizeLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileContentSizeLimitExceededException'
        '505':
          description: FolderContentSizeLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderContentSizeLimitExceededException'
        '506':
          description: MaximumFileContentToLoadExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumFileContentToLoadExceededException'
        '507':
          description: MaximumItemsToCompareExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumItemsToCompareExceededException'
        '508':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '509':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '510':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '511':
          description: RepositoryNotAssociatedWithPullRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotAssociatedWithPullRequestException'
        '512':
          description: PullRequestApprovalRulesNotSatisfiedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestApprovalRulesNotSatisfiedException'
        '513':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '514':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '515':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '516':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '517':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergePullRequestBySquashInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.MergePullRequestBySquash
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.MergePullRequestByThreeWay:
    post:
      operationId: MergePullRequestByThreeWay
      description: 'Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the three-way merge strategy. If the merge is successful, it closes the pull request.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergePullRequestByThreeWayOutput'
        '480':
          description: PullRequestAlreadyClosedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestAlreadyClosedException'
        '481':
          description: PullRequestDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
        '482':
          description: PullRequestIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
        '483':
          description: InvalidPullRequestIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
        '484':
          description: InvalidCommitIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitIdException'
        '485':
          description: ManualMergeRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualMergeRequiredException'
        '486':
          description: TipOfSourceReferenceIsDifferentException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TipOfSourceReferenceIsDifferentException'
        '487':
          description: TipsDivergenceExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TipsDivergenceExceededException'
        '488':
          description: NameLengthExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NameLengthExceededException'
        '489':
          description: InvalidEmailException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailException'
        '490':
          description: CommitMessageLengthExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitMessageLengthExceededException'
        '491':
          description: InvalidConflictDetailLevelException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictDetailLevelException'
        '492':
          description: InvalidConflictResolutionStrategyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionStrategyException'
        '493':
          description: InvalidConflictResolutionException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionException'
        '494':
          description: ReplacementTypeRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplacementTypeRequiredException'
        '495':
          description: InvalidReplacementTypeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidReplacementTypeException'
        '496':
          description: MultipleConflictResolutionEntriesException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipleConflictResolutionEntriesException'
        '497':
          description: ReplacementContentRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplacementContentRequiredException'
        '498':
          description: MaximumConflictResolutionEntriesExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumConflictResolutionEntriesExceededException'
        '499':
          description: PathRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
        '500':
          description: InvalidPathException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPathException'
        '501':
          description: InvalidFileModeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidFileModeException'
        '502':
          description: InvalidReplacementContentException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidReplacementContentException'
        '503':
          description: FileContentSizeLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileContentSizeLimitExceededException'
        '504':
          description: FolderContentSizeLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderContentSizeLimitExceededException'
        '505':
          description: MaximumFileContentToLoadExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumFileContentToLoadExceededException'
        '506':
          description: MaximumItemsToCompareExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumItemsToCompareExceededException'
        '507':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '508':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '509':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '510':
          description: RepositoryNotAssociatedWithPullRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotAssociatedWithPullRequestException'
        '511':
          description: ConcurrentReferenceUpdateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentReferenceUpdateException'
        '512':
          description: PullRequestApprovalRulesNotSatisfiedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestApprovalRulesNotSatisfiedException'
        '513':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '514':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '515':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '516':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '517':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergePullRequestByThreeWayInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.MergePullRequestByThreeWay
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.OverridePullRequestApprovalRules:
    post:
      operationId: OverridePullRequestApprovalRules
      description: Sets aside (overrides) all approval rule requirements for a specified pull request.
      responses:
        '200':
          description: Success
        '480':
          description: PullRequestDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
        '483':
          description: InvalidRevisionIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRevisionIdException'
        '484':
          description: RevisionIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionIdRequiredException'
        '485':
          description: InvalidOverrideStatusException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidOverrideStatusException'
        '486':
          description: OverrideStatusRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OverrideStatusRequiredException'
        '487':
          description: OverrideAlreadySetException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OverrideAlreadySetException'
        '488':
          description: RevisionNotCurrentException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionNotCurrentException'
        '489':
          description: PullRequestAlreadyClosedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestAlreadyClosedException'
        '490':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '491':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '492':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '493':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '494':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OverridePullRequestApprovalRulesInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.OverridePullRequestApprovalRules
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.PostCommentForComparedCommit:
    post:
      operationId: PostCommentForComparedCommit
      description: Posts a comment on the comparison between two commits.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCommentForComparedCommitOutput'
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '482':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '483':
          description: ClientRequestTokenRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientRequestTokenRequiredException'
        '484':
          description: InvalidClientRequestTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidClientRequestTokenException'
        '485':
          description: IdempotencyParameterMismatchException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdempotencyParameterMismatchException'
        '486':
          description: CommentContentRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentContentRequiredException'
        '487':
          description: CommentContentSizeLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentContentSizeLimitExceededException'
        '488':
          description: InvalidFileLocationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidFileLocationException'
        '489':
          description: InvalidRelativeFileVersionEnumException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRelativeFileVersionEnumException'
        '490':
          description: PathRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
        '491':
          description: InvalidFilePositionException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidFilePositionException'
        '492':
          description: CommitIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitIdRequiredException'
        '493':
          description: InvalidCommitIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitIdException'
        '494':
          description: BeforeCommitIdAndAfterCommitIdAreSameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeforeCommitIdAndAfterCommitIdAreSameException'
        '495':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '496':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '497':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '498':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '499':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
        '500':
          description: CommitDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
        '501':
          description: InvalidPathException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPathException'
        '502':
          description: PathDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathDoesNotExistException'
        '503':
          description: PathRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCommentForComparedCommitInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.PostCommentForComparedCommit
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.PostCommentForPullRequest:
    post:
      operationId: PostCommentForPullRequest
      description: Posts a comment on a pull request.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCommentForPullRequestOutput'
        '480':
          description: PullRequestDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
        '483':
          description: RepositoryNotAssociatedWithPullRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotAssociatedWithPullRequestException'
        '484':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '485':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '486':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '487':
          description: ClientRequestTokenRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientRequestTokenRequiredException'
        '488':
          description: InvalidClientRequestTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidClientRequestTokenException'
        '489':
          description: IdempotencyParameterMismatchException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdempotencyParameterMismatchException'
        '490':
          description: CommentContentRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentContentRequiredException'
        '491':
          description: CommentContentSizeLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentContentSizeLimitExceededException'
        '492':
          description: InvalidFileLocationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidFileLocationException'
        '493':
          description: InvalidRelativeFileVersionEnumException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRelativeFileVersionEnumException'
        '494':
          description: PathRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
        '495':
          description: InvalidFilePositionException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidFilePositionException'
        '496':
          description: CommitIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitIdRequiredException'
        '497':
          description: InvalidCommitIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitIdException'
        '498':
          description: BeforeCommitIdAndAfterCommitIdAreSameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeforeCommitIdAndAfterCommitIdAreSameException'
        '499':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '500':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '501':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '502':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '503':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
        '504':
          description: CommitDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
        '505':
          description: InvalidPathException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPathException'
        '506':
          description: PathDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathDoesNotExistException'
        '507':
          description: PathRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCommentForPullRequestInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.PostCommentForPullRequest
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.PostCommentReply:
    post:
      operationId: PostCommentReply
      description: Posts a comment in reply to an existing comment on a comparison between commits or a pull request.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCommentReplyOutput'
        '480':
          description: ClientRequestTokenRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientRequestTokenRequiredException'
        '481':
          description: InvalidClientRequestTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidClientRequestTokenException'
        '482':
          description: IdempotencyParameterMismatchException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdempotencyParameterMismatchException'
        '483':
          description: CommentContentRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentContentRequiredException'
        '484':
          description: CommentContentSizeLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentContentSizeLimitExceededException'
        '485':
          description: CommentDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDoesNotExistException'
        '486':
          description: CommentIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentIdRequiredException'
        '487':
          description: InvalidCommentIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommentIdException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCommentReplyInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.PostCommentReply
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.PutCommentReaction:
    post:
      operationId: PutCommentReaction
      description: 'Adds or updates a reaction to a specified comment for the user whose identity is used to make the request. You can only add or update a reaction for yourself. You cannot add, modify, or delete a reaction for another user.'
      responses:
        '200':
          description: Success
        '480':
          description: CommentDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDoesNotExistException'
        '481':
          description: CommentIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentIdRequiredException'
        '482':
          description: InvalidCommentIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommentIdException'
        '483':
          description: InvalidReactionValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidReactionValueException'
        '484':
          description: ReactionValueRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReactionValueRequiredException'
        '485':
          description: ReactionLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReactionLimitExceededException'
        '486':
          description: CommentDeletedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDeletedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutCommentReactionInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.PutCommentReaction
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.PutFile:
    post:
      operationId: PutFile
      description: 'Adds or updates a file in a branch in an AWS CodeCommit repository, and generates a commit for the addition in the specified branch.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutFileOutput'
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '483':
          description: ParentCommitIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParentCommitIdRequiredException'
        '484':
          description: InvalidParentCommitIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParentCommitIdException'
        '485':
          description: ParentCommitDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParentCommitDoesNotExistException'
        '486':
          description: ParentCommitIdOutdatedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParentCommitIdOutdatedException'
        '487':
          description: FileContentRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileContentRequiredException'
        '488':
          description: FileContentSizeLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileContentSizeLimitExceededException'
        '489':
          description: FolderContentSizeLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderContentSizeLimitExceededException'
        '490':
          description: PathRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
        '491':
          description: InvalidPathException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPathException'
        '492':
          description: BranchNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameRequiredException'
        '493':
          description: InvalidBranchNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBranchNameException'
        '494':
          description: BranchDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchDoesNotExistException'
        '495':
          description: BranchNameIsTagNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameIsTagNameException'
        '496':
          description: InvalidFileModeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidFileModeException'
        '497':
          description: NameLengthExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NameLengthExceededException'
        '498':
          description: InvalidEmailException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailException'
        '499':
          description: CommitMessageLengthExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitMessageLengthExceededException'
        '500':
          description: InvalidDeletionParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeletionParameterException'
        '501':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '502':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '503':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '504':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '505':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
        '506':
          description: SameFileContentException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SameFileContentException'
        '507':
          description: FileNameConflictsWithDirectoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileNameConflictsWithDirectoryNameException'
        '508':
          description: DirectoryNameConflictsWithFileNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryNameConflictsWithFileNameException'
        '509':
          description: FilePathConflictsWithSubmodulePathException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilePathConflictsWithSubmodulePathException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutFileInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.PutFile
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.PutRepositoryTriggers:
    post:
      operationId: PutRepositoryTriggers
      description: Replaces all triggers for a repository. Used to create or delete triggers.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutRepositoryTriggersOutput'
        '480':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '481':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '482':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '483':
          description: RepositoryTriggersListRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryTriggersListRequiredException'
        '484':
          description: MaximumRepositoryTriggersExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumRepositoryTriggersExceededException'
        '485':
          description: InvalidRepositoryTriggerNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryTriggerNameException'
        '486':
          description: InvalidRepositoryTriggerDestinationArnException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryTriggerDestinationArnException'
        '487':
          description: InvalidRepositoryTriggerRegionException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryTriggerRegionException'
        '488':
          description: InvalidRepositoryTriggerCustomDataException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryTriggerCustomDataException'
        '489':
          description: MaximumBranchesExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumBranchesExceededException'
        '490':
          description: InvalidRepositoryTriggerBranchNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryTriggerBranchNameException'
        '491':
          description: InvalidRepositoryTriggerEventsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryTriggerEventsException'
        '492':
          description: RepositoryTriggerNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryTriggerNameRequiredException'
        '493':
          description: RepositoryTriggerDestinationArnRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryTriggerDestinationArnRequiredException'
        '494':
          description: RepositoryTriggerBranchNameListRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryTriggerBranchNameListRequiredException'
        '495':
          description: RepositoryTriggerEventsListRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryTriggerEventsListRequiredException'
        '496':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '497':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '498':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '499':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '500':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutRepositoryTriggersInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.PutRepositoryTriggers
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.TagResource:
    post:
      operationId: TagResource
      description: 'Adds or updates tags for a resource in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats">CodeCommit Resources and Operations</a> in the <i>AWS CodeCommit User Guide</i>.'
      responses:
        '200':
          description: Success
        '480':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '481':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '482':
          description: ResourceArnRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceArnRequiredException'
        '483':
          description: InvalidResourceArnException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidResourceArnException'
        '484':
          description: TagsMapRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagsMapRequiredException'
        '485':
          description: InvalidTagsMapException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagsMapException'
        '486':
          description: TooManyTagsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
        '487':
          description: InvalidSystemTagUsageException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSystemTagUsageException'
        '488':
          description: TagPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagPolicyException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResourceInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.TagResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.TestRepositoryTriggers:
    post:
      operationId: TestRepositoryTriggers
      description: 'Tests the functionality of repository triggers by sending information to the trigger target. If real data is available in the repository, the test sends data from the last commit. If no data is available, sample data is generated.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestRepositoryTriggersOutput'
        '480':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '481':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '482':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '483':
          description: RepositoryTriggersListRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryTriggersListRequiredException'
        '484':
          description: MaximumRepositoryTriggersExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumRepositoryTriggersExceededException'
        '485':
          description: InvalidRepositoryTriggerNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryTriggerNameException'
        '486':
          description: InvalidRepositoryTriggerDestinationArnException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryTriggerDestinationArnException'
        '487':
          description: InvalidRepositoryTriggerRegionException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryTriggerRegionException'
        '488':
          description: InvalidRepositoryTriggerCustomDataException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryTriggerCustomDataException'
        '489':
          description: MaximumBranchesExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumBranchesExceededException'
        '490':
          description: InvalidRepositoryTriggerBranchNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryTriggerBranchNameException'
        '491':
          description: InvalidRepositoryTriggerEventsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryTriggerEventsException'
        '492':
          description: RepositoryTriggerNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryTriggerNameRequiredException'
        '493':
          description: RepositoryTriggerDestinationArnRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryTriggerDestinationArnRequiredException'
        '494':
          description: RepositoryTriggerBranchNameListRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryTriggerBranchNameListRequiredException'
        '495':
          description: RepositoryTriggerEventsListRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryTriggerEventsListRequiredException'
        '496':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '497':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '498':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '499':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '500':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestRepositoryTriggersInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.TestRepositoryTriggers
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.UntagResource:
    post:
      operationId: UntagResource
      description: 'Removes tags for a resource in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats">CodeCommit Resources and Operations</a> in the <i>AWS CodeCommit User Guide</i>.'
      responses:
        '200':
          description: Success
        '480':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '481':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '482':
          description: ResourceArnRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceArnRequiredException'
        '483':
          description: InvalidResourceArnException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidResourceArnException'
        '484':
          description: TagKeysListRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagKeysListRequiredException'
        '485':
          description: InvalidTagKeysListException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagKeysListException'
        '486':
          description: TooManyTagsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
        '487':
          description: InvalidSystemTagUsageException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSystemTagUsageException'
        '488':
          description: TagPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagPolicyException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UntagResourceInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.UntagResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.UpdateApprovalRuleTemplateContent:
    post:
      operationId: UpdateApprovalRuleTemplateContent
      description: 'Updates the content of an approval rule template. You can change the number of required approvals, the membership of the approval rule, and whether an approval pool is defined.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateApprovalRuleTemplateContentOutput'
        '480':
          description: InvalidApprovalRuleTemplateNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateNameException'
        '481':
          description: ApprovalRuleTemplateNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateNameRequiredException'
        '482':
          description: ApprovalRuleTemplateDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateDoesNotExistException'
        '483':
          description: InvalidApprovalRuleTemplateContentException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateContentException'
        '484':
          description: InvalidRuleContentSha256Exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRuleContentSha256Exception'
        '485':
          description: ApprovalRuleTemplateContentRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateContentRequiredException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApprovalRuleTemplateContentInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.UpdateApprovalRuleTemplateContent
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.UpdateApprovalRuleTemplateDescription:
    post:
      operationId: UpdateApprovalRuleTemplateDescription
      description: Updates the description for a specified approval rule template.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateApprovalRuleTemplateDescriptionOutput'
        '480':
          description: InvalidApprovalRuleTemplateNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateNameException'
        '481':
          description: ApprovalRuleTemplateNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateNameRequiredException'
        '482':
          description: ApprovalRuleTemplateDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateDoesNotExistException'
        '483':
          description: InvalidApprovalRuleTemplateDescriptionException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateDescriptionException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApprovalRuleTemplateDescriptionInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.UpdateApprovalRuleTemplateDescription
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.UpdateApprovalRuleTemplateName:
    post:
      operationId: UpdateApprovalRuleTemplateName
      description: Updates the name of a specified approval rule template.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateApprovalRuleTemplateNameOutput'
        '480':
          description: InvalidApprovalRuleTemplateNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateNameException'
        '481':
          description: ApprovalRuleTemplateNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateNameRequiredException'
        '482':
          description: ApprovalRuleTemplateDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateDoesNotExistException'
        '483':
          description: ApprovalRuleTemplateNameAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateNameAlreadyExistsException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApprovalRuleTemplateNameInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.UpdateApprovalRuleTemplateName
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.UpdateComment:
    post:
      operationId: UpdateComment
      description: Replaces the contents of a comment.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCommentOutput'
        '480':
          description: CommentContentRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentContentRequiredException'
        '481':
          description: CommentContentSizeLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentContentSizeLimitExceededException'
        '482':
          description: CommentDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDoesNotExistException'
        '483':
          description: CommentIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentIdRequiredException'
        '484':
          description: InvalidCommentIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommentIdException'
        '485':
          description: CommentNotCreatedByCallerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentNotCreatedByCallerException'
        '486':
          description: CommentDeletedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDeletedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.UpdateComment
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.UpdateDefaultBranch:
    post:
      operationId: UpdateDefaultBranch
      description: '<p>Sets or changes the default branch name for the specified repository.</p> <note> <p>If you use this operation to change the default branch name to the current default branch name, a success message is returned even though the default branch did not change.</p> </note>'
      responses:
        '200':
          description: Success
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '482':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '483':
          description: BranchNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameRequiredException'
        '484':
          description: InvalidBranchNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBranchNameException'
        '485':
          description: BranchDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchDoesNotExistException'
        '486':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '487':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '488':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '489':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '490':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDefaultBranchInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.UpdateDefaultBranch
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestApprovalRuleContent:
    post:
      operationId: UpdatePullRequestApprovalRuleContent
      description: 'Updates the structure of an approval rule created specifically for a pull request. For example, you can change the number of required approvers and the approval pool for approvers. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePullRequestApprovalRuleContentOutput'
        '480':
          description: PullRequestDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
        '483':
          description: PullRequestAlreadyClosedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestAlreadyClosedException'
        '484':
          description: ApprovalRuleNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleNameRequiredException'
        '485':
          description: InvalidApprovalRuleNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleNameException'
        '486':
          description: ApprovalRuleDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleDoesNotExistException'
        '487':
          description: InvalidRuleContentSha256Exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRuleContentSha256Exception'
        '488':
          description: ApprovalRuleContentRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleContentRequiredException'
        '489':
          description: InvalidApprovalRuleContentException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleContentException'
        '490':
          description: CannotModifyApprovalRuleFromTemplateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CannotModifyApprovalRuleFromTemplateException'
        '491':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '492':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '493':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '494':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '495':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePullRequestApprovalRuleContentInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.UpdatePullRequestApprovalRuleContent
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestApprovalState:
    post:
      operationId: UpdatePullRequestApprovalState
      description: Updates the state of a user's approval on a pull request. The user is derived from the signed-in account when the request is made.
      responses:
        '200':
          description: Success
        '480':
          description: PullRequestDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
        '483':
          description: InvalidRevisionIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRevisionIdException'
        '484':
          description: RevisionIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionIdRequiredException'
        '485':
          description: InvalidApprovalStateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalStateException'
        '486':
          description: ApprovalStateRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalStateRequiredException'
        '487':
          description: PullRequestCannotBeApprovedByAuthorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestCannotBeApprovedByAuthorException'
        '488':
          description: RevisionNotCurrentException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionNotCurrentException'
        '489':
          description: PullRequestAlreadyClosedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestAlreadyClosedException'
        '490':
          description: MaximumNumberOfApprovalsExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumNumberOfApprovalsExceededException'
        '491':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '492':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '493':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '494':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '495':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePullRequestApprovalStateInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.UpdatePullRequestApprovalState
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestDescription:
    post:
      operationId: UpdatePullRequestDescription
      description: Replaces the contents of the description of a pull request.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePullRequestDescriptionOutput'
        '480':
          description: PullRequestDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
        '483':
          description: InvalidDescriptionException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDescriptionException'
        '484':
          description: PullRequestAlreadyClosedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestAlreadyClosedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePullRequestDescriptionInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.UpdatePullRequestDescription
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestStatus:
    post:
      operationId: UpdatePullRequestStatus
      description: 'Updates the status of a pull request. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePullRequestStatusOutput'
        '480':
          description: PullRequestDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
        '483':
          description: InvalidPullRequestStatusUpdateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestStatusUpdateException'
        '484':
          description: InvalidPullRequestStatusException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestStatusException'
        '485':
          description: PullRequestStatusRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestStatusRequiredException'
        '486':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '487':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '488':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '489':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '490':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePullRequestStatusInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.UpdatePullRequestStatus
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestTitle:
    post:
      operationId: UpdatePullRequestTitle
      description: Replaces the title of a pull request.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePullRequestTitleOutput'
        '480':
          description: PullRequestDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
        '483':
          description: TitleRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TitleRequiredException'
        '484':
          description: InvalidTitleException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTitleException'
        '485':
          description: PullRequestAlreadyClosedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestAlreadyClosedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePullRequestTitleInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.UpdatePullRequestTitle
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.UpdateRepositoryDescription:
    post:
      operationId: UpdateRepositoryDescription
      description: <p>Sets or changes the comment or description for a repository.</p> <note> <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.</p> </note>
      responses:
        '200':
          description: Success
        '480':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '481':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '482':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
        '483':
          description: InvalidRepositoryDescriptionException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryDescriptionException'
        '484':
          description: EncryptionIntegrityChecksFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
        '485':
          description: EncryptionKeyAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
        '486':
          description: EncryptionKeyDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
        '487':
          description: EncryptionKeyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
        '488':
          description: EncryptionKeyUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRepositoryDescriptionInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.UpdateRepositoryDescription
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeCommit_20150413.UpdateRepositoryName:
    post:
      operationId: UpdateRepositoryName
      description: 'Renames a repository. The repository name must be unique across the calling AWS account. Repository names are limited to 100 alphanumeric, dash, and underscore characters, and cannot include certain characters. The suffix .git is prohibited. For more information about the limits on repository names, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html">Limits</a> in the AWS CodeCommit User Guide.'
      responses:
        '200':
          description: Success
        '480':
          description: RepositoryDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
        '481':
          description: RepositoryNameExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameExistsException'
        '482':
          description: RepositoryNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
        '483':
          description: InvalidRepositoryNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRepositoryNameInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeCommit_20150413.UpdateRepositoryName
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    AssociateApprovalRuleTemplateWithRepositoryInput:
      type: object
      required:
        - approvalRuleTemplateName
        - repositoryName
      title: AssociateApprovalRuleTemplateWithRepositoryInput
      properties:
        approvalRuleTemplateName:
          $ref: '#/components/schemas/ApprovalRuleTemplateName'
          description: 'The name for the approval rule template. '
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that you want to associate with the template.
    ApprovalRuleTemplateNameRequiredException: {}
    InvalidApprovalRuleTemplateNameException: {}
    ApprovalRuleTemplateDoesNotExistException: {}
    MaximumRuleTemplatesAssociatedWithRepositoryException: {}
    RepositoryNameRequiredException: {}
    InvalidRepositoryNameException: {}
    RepositoryDoesNotExistException: {}
    EncryptionIntegrityChecksFailedException: {}
    EncryptionKeyAccessDeniedException: {}
    EncryptionKeyDisabledException: {}
    EncryptionKeyNotFoundException: {}
    EncryptionKeyUnavailableException: {}
    BatchAssociateApprovalRuleTemplateWithRepositoriesOutput:
      type: object
      required:
        - associatedRepositoryNames
        - errors
      properties:
        associatedRepositoryNames:
          $ref: '#/components/schemas/RepositoryNameList'
          description: A list of names of the repositories that have been associated with the template.
        errors:
          $ref: '#/components/schemas/BatchAssociateApprovalRuleTemplateWithRepositoriesErrorsList'
          description: A list of any errors that might have occurred while attempting to create the association between the template and the repositories.
    BatchAssociateApprovalRuleTemplateWithRepositoriesInput:
      type: object
      required:
        - approvalRuleTemplateName
        - repositoryNames
      title: BatchAssociateApprovalRuleTemplateWithRepositoriesInput
      properties:
        approvalRuleTemplateName:
          $ref: '#/components/schemas/ApprovalRuleTemplateName'
          description: The name of the template you want to associate with one or more repositories.
        repositoryNames:
          $ref: '#/components/schemas/RepositoryNameList'
          description: <p>The names of the repositories you want to associate with the template.</p> <note> <p>The length constraint limit is for each string in the array. The array itself can be empty.</p> </note>
    RepositoryNamesRequiredException: {}
    MaximumRepositoryNamesExceededException: {}
    BatchDescribeMergeConflictsOutput:
      type: object
      required:
        - conflicts
        - destinationCommitId
        - sourceCommitId
      properties:
        conflicts:
          $ref: '#/components/schemas/Conflicts'
          description: 'A list of conflicts for each file, including the conflict metadata and the hunks of the differences between the files.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: An enumeration token that can be used in a request to return the next batch of the results.
        errors:
          $ref: '#/components/schemas/BatchDescribeMergeConflictsErrors'
          description: A list of any errors returned while describing the merge conflicts for each file.
        destinationCommitId:
          $ref: '#/components/schemas/ObjectId'
          description: The commit ID of the destination commit specifier that was used in the merge evaluation.
        sourceCommitId:
          $ref: '#/components/schemas/ObjectId'
          description: The commit ID of the source commit specifier that was used in the merge evaluation.
        baseCommitId:
          $ref: '#/components/schemas/ObjectId'
          description: The commit ID of the merge base.
    BatchDescribeMergeConflictsInput:
      type: object
      required:
        - repositoryName
        - destinationCommitSpecifier
        - sourceCommitSpecifier
        - mergeOption
      title: BatchDescribeMergeConflictsInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that contains the merge conflicts you want to review.
        destinationCommitSpecifier:
          $ref: '#/components/schemas/CommitName'
          description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
        sourceCommitSpecifier:
          $ref: '#/components/schemas/CommitName'
          description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
        mergeOption:
          $ref: '#/components/schemas/MergeOptionTypeEnum'
          description: The merge option or strategy you want to use to merge the code.
        maxMergeHunks:
          $ref: '#/components/schemas/MaxResults'
          description: The maximum number of merge hunks to include in the output.
        maxConflictFiles:
          $ref: '#/components/schemas/MaxResults'
          description: The maximum number of files to include in the output.
        filePaths:
          $ref: '#/components/schemas/FilePaths'
          description: 'The path of the target files used to describe the conflicts. If not specified, the default is all conflict files.'
        conflictDetailLevel:
          $ref: '#/components/schemas/ConflictDetailLevelTypeEnum'
          description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.'
        conflictResolutionStrategy:
          $ref: '#/components/schemas/ConflictResolutionStrategyTypeEnum'
          description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'An enumeration token that, when provided in a request, returns the next batch of the results.'
    MergeOptionRequiredException: {}
    InvalidMergeOptionException: {}
    InvalidContinuationTokenException: {}
    CommitRequiredException: {}
    CommitDoesNotExistException: {}
    InvalidCommitException: {}
    TipsDivergenceExceededException: {}
    InvalidMaxConflictFilesException: {}
    InvalidMaxMergeHunksException: {}
    InvalidConflictDetailLevelException: {}
    InvalidConflictResolutionStrategyException: {}
    MaximumFileContentToLoadExceededException: {}
    MaximumItemsToCompareExceededException: {}
    BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput:
      type: object
      required:
        - disassociatedRepositoryNames
        - errors
      properties:
        disassociatedRepositoryNames:
          $ref: '#/components/schemas/RepositoryNameList'
          description: A list of repository names that have had their association with the template removed.
        errors:
          $ref: '#/components/schemas/BatchDisassociateApprovalRuleTemplateFromRepositoriesErrorsList'
          description: A list of any errors that might have occurred while attempting to remove the association between the template and the repositories.
    BatchDisassociateApprovalRuleTemplateFromRepositoriesInput:
      type: object
      required:
        - approvalRuleTemplateName
        - repositoryNames
      title: BatchDisassociateApprovalRuleTemplateFromRepositoriesInput
      properties:
        approvalRuleTemplateName:
          $ref: '#/components/schemas/ApprovalRuleTemplateName'
          description: The name of the template that you want to disassociate from one or more repositories.
        repositoryNames:
          $ref: '#/components/schemas/RepositoryNameList'
          description: <p>The repository names that you want to disassociate from the approval rule template.</p> <note> <p>The length constraint limit is for each string in the array. The array itself can be empty.</p> </note>
    BatchGetCommitsOutput:
      type: object
      properties:
        commits:
          $ref: '#/components/schemas/CommitObjectsList'
          description: 'An array of commit data type objects, each of which contains information about a specified commit.'
        errors:
          $ref: '#/components/schemas/BatchGetCommitsErrorsList'
          description: 'Returns any commit IDs for which information could not be found. For example, if one of the commit IDs was a shortened SHA ID or that commit was not found in the specified repository, the ID returns an error object with more information.'
    BatchGetCommitsInput:
      type: object
      required:
        - commitIds
        - repositoryName
      title: BatchGetCommitsInput
      properties:
        commitIds:
          $ref: '#/components/schemas/CommitIdsInputList'
          description: <p>The full commit IDs of the commits to get information about.</p> <note> <p>You must supply the full SHA IDs of each commit. You cannot use shortened SHA IDs.</p> </note>
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that contains the commits.
    CommitIdsListRequiredException: {}
    CommitIdsLimitExceededException: {}
    BatchGetRepositoriesOutput:
      type: object
      properties:
        repositories:
          $ref: '#/components/schemas/RepositoryMetadataList'
          description: A list of repositories returned by the batch get repositories operation.
        repositoriesNotFound:
          $ref: '#/components/schemas/RepositoryNotFoundList'
          description: Returns a list of repository names for which information could not be found.
      description: Represents the output of a batch get repositories operation.
    BatchGetRepositoriesInput:
      type: object
      required:
        - repositoryNames
      title: BatchGetRepositoriesInput
      properties:
        repositoryNames:
          $ref: '#/components/schemas/RepositoryNameList'
          description: <p>The names of the repositories to get information about.</p> <note> <p>The length constraint limit is for each string in the array. The array itself can be empty.</p> </note>
      description: Represents the input of a batch get repositories operation.
    CreateApprovalRuleTemplateOutput:
      type: object
      required:
        - approvalRuleTemplate
      properties:
        approvalRuleTemplate:
          $ref: '#/components/schemas/ApprovalRuleTemplate'
          description: The content and structure of the created approval rule template.
    CreateApprovalRuleTemplateInput:
      type: object
      required:
        - approvalRuleTemplateName
        - approvalRuleTemplateContent
      title: CreateApprovalRuleTemplateInput
      properties:
        approvalRuleTemplateName:
          $ref: '#/components/schemas/ApprovalRuleTemplateName'
          description: 'The name of the approval rule template. Provide descriptive names, because this name is applied to the approval rules created automatically in associated repositories.'
        approvalRuleTemplateContent:
          $ref: '#/components/schemas/ApprovalRuleTemplateContent'
          description: '<p>The content of the approval rule that is created on pull requests in associated repositories. If you specify one or more destination references (branches), approval rules are created in an associated repository only if their destination references (branches) match those specified in the template.</p> <note> <p>When you create the content of the approval rule template, you can specify approvers in an approval pool in one of two ways:</p> <ul> <li> <p> <b>CodeCommitApprovers</b>: This option only requires an AWS account and a resource. It can be used for both IAM users and federated access users whose name matches the provided resource name. This is a very powerful option that offers a great deal of flexibility. For example, if you specify the AWS account <i>123456789012</i> and <i>Mary_Major</i>, all of the following are counted as approvals coming from that user:</p> <ul> <li> <p>An IAM user in the account (arn:aws:iam::<i>123456789012</i>:user/<i>Mary_Major</i>)</p> </li> <li> <p>A federated user identified in IAM as Mary_Major (arn:aws:sts::<i>123456789012</i>:federated-user/<i>Mary_Major</i>)</p> </li> </ul> <p>This option does not recognize an active session of someone assuming the role of CodeCommitReview with a role session name of <i>Mary_Major</i> (arn:aws:sts::<i>123456789012</i>:assumed-role/CodeCommitReview/<i>Mary_Major</i>) unless you include a wildcard (*Mary_Major).</p> </li> <li> <p> <b>Fully qualified ARN</b>: This option allows you to specify the fully qualified Amazon Resource Name (ARN) of the IAM user or role. </p> </li> </ul> <p>For more information about IAM ARNs, wildcards, and formats, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> </note>'
        approvalRuleTemplateDescription:
          $ref: '#/components/schemas/ApprovalRuleTemplateDescription'
          description: The description of the approval rule template. Consider providing a description that explains what this template does and when it might be appropriate to associate it with repositories.
    ApprovalRuleTemplateNameAlreadyExistsException: {}
    ApprovalRuleTemplateContentRequiredException: {}
    InvalidApprovalRuleTemplateContentException: {}
    InvalidApprovalRuleTemplateDescriptionException: {}
    NumberOfRuleTemplatesExceededException: {}
    CreateBranchInput:
      type: object
      required:
        - repositoryName
        - branchName
        - commitId
      title: CreateBranchInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository in which you want to create the new branch.
        branchName:
          $ref: '#/components/schemas/BranchName'
          description: The name of the new branch to create.
        commitId:
          $ref: '#/components/schemas/CommitId'
          description: The ID of the commit to point the new branch to.
      description: Represents the input of a create branch operation.
    BranchNameRequiredException: {}
    BranchNameExistsException: {}
    InvalidBranchNameException: {}
    CommitIdRequiredException: {}
    InvalidCommitIdException: {}
    CreateCommitOutput:
      type: object
      properties:
        commitId:
          $ref: '#/components/schemas/ObjectId'
          description: The full commit ID of the commit that contains your committed file changes.
        treeId:
          $ref: '#/components/schemas/ObjectId'
          description: The full SHA-1 pointer of the tree information for the commit that contains the commited file changes.
        filesAdded:
          $ref: '#/components/schemas/FilesMetadata'
          description: The files added as part of the committed file changes.
        filesUpdated:
          $ref: '#/components/schemas/FilesMetadata'
          description: The files updated as part of the commited file changes.
        filesDeleted:
          $ref: '#/components/schemas/FilesMetadata'
          description: The files deleted as part of the committed file changes.
    CreateCommitInput:
      type: object
      required:
        - repositoryName
        - branchName
      title: CreateCommitInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository where you create the commit.
        branchName:
          $ref: '#/components/schemas/BranchName'
          description: The name of the branch where you create the commit.
        parentCommitId:
          $ref: '#/components/schemas/CommitId'
          description: The ID of the commit that is the parent of the commit you create. Not required if this is an empty repository.
        authorName:
          $ref: '#/components/schemas/Name'
          description: The name of the author who created the commit. This information is used as both the author and committer for the commit.
        email:
          $ref: '#/components/schemas/Email'
          description: The email address of the person who created the commit.
        commitMessage:
          $ref: '#/components/schemas/Message'
          description: 'The commit message you want to include in the commit. Commit messages are limited to 256 KB. If no message is specified, a default message is used.'
        keepEmptyFolders:
          $ref: '#/components/schemas/KeepEmptyFolders'
          description: 'If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If true, a ..gitkeep file is created for empty folders. The default is false.'
        putFiles:
          $ref: '#/components/schemas/PutFileEntries'
          description: The files to add or update in this commit.
        deleteFiles:
          $ref: '#/components/schemas/DeleteFileEntries'
          description: The files to delete in this commit. These files still exist in earlier commits.
        setFileModes:
          $ref: '#/components/schemas/SetFileModeEntries'
          description: The file modes to update for files in this commit.
    ParentCommitIdRequiredException: {}
    InvalidParentCommitIdException: {}
    ParentCommitDoesNotExistException: {}
    ParentCommitIdOutdatedException: {}
    BranchDoesNotExistException: {}
    BranchNameIsTagNameException: {}
    FileEntryRequiredException: {}
    MaximumFileEntriesExceededException: {}
    PutFileEntryConflictException: {}
    SourceFileOrContentRequiredException: {}
    FileContentAndSourceFileSpecifiedException: {}
    PathRequiredException: {}
    InvalidPathException: {}
    SamePathRequestException: {}
    FileDoesNotExistException: {}
    FileContentSizeLimitExceededException: {}
    FolderContentSizeLimitExceededException: {}
    InvalidDeletionParameterException: {}
    RestrictedSourceFileException: {}
    FileModeRequiredException: {}
    InvalidFileModeException: {}
    NameLengthExceededException: {}
    InvalidEmailException: {}
    CommitMessageLengthExceededException: {}
    NoChangeException: {}
    FileNameConflictsWithDirectoryNameException: {}
    DirectoryNameConflictsWithFileNameException: {}
    FilePathConflictsWithSubmodulePathException: {}
    CreatePullRequestOutput:
      type: object
      required:
        - pullRequest
      properties:
        pullRequest:
          $ref: '#/components/schemas/PullRequest'
          description: Information about the newly created pull request.
    CreatePullRequestInput:
      type: object
      required:
        - title
        - targets
      title: CreatePullRequestInput
      properties:
        title:
          $ref: '#/components/schemas/Title'
          description: The title of the pull request. This title is used to identify the pull request to other users in the repository.
        description:
          $ref: '#/components/schemas/Description'
          description: A description of the pull request.
        targets:
          $ref: '#/components/schemas/TargetList'
          description: 'The targets for the pull request, including the source of the code to be reviewed (the source branch) and the destination where the creator of the pull request intends the code to be merged after the pull request is closed (the destination branch).'
        clientRequestToken:
          $ref: '#/components/schemas/ClientRequestToken'
          description: '<p>A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.</p> <note> <p>The AWS SDKs prepopulate client request tokens. If you are using an AWS SDK, an idempotency token is created for you.</p> </note>'
    ClientRequestTokenRequiredException: {}
    InvalidClientRequestTokenException: {}
    IdempotencyParameterMismatchException: {}
    ReferenceNameRequiredException: {}
    InvalidReferenceNameException: {}
    ReferenceDoesNotExistException: {}
    ReferenceTypeNotSupportedException: {}
    TitleRequiredException: {}
    InvalidTitleException: {}
    InvalidDescriptionException: {}
    TargetsRequiredException: {}
    InvalidTargetsException: {}
    TargetRequiredException: {}
    InvalidTargetException: {}
    MultipleRepositoriesInPullRequestException: {}
    MaximumOpenPullRequestsExceededException: {}
    SourceAndDestinationAreSameException: {}
    CreatePullRequestApprovalRuleOutput:
      type: object
      required:
        - approvalRule
      properties:
        approvalRule:
          $ref: '#/components/schemas/ApprovalRule'
          description: Information about the created approval rule.
    CreatePullRequestApprovalRuleInput:
      type: object
      required:
        - pullRequestId
        - approvalRuleName
        - approvalRuleContent
      title: CreatePullRequestApprovalRuleInput
      properties:
        pullRequestId:
          $ref: '#/components/schemas/PullRequestId'
          description: The system-generated ID of the pull request for which you want to create the approval rule.
        approvalRuleName:
          $ref: '#/components/schemas/ApprovalRuleName'
          description: The name for the approval rule.
        approvalRuleContent:
          $ref: '#/components/schemas/ApprovalRuleContent'
          description: '<p>The content of the approval rule, including the number of approvals needed and the structure of an approval pool defined for approvals, if any. For more information about approval pools, see the AWS CodeCommit User Guide.</p> <note> <p>When you create the content of the approval rule, you can specify approvers in an approval pool in one of two ways:</p> <ul> <li> <p> <b>CodeCommitApprovers</b>: This option only requires an AWS account and a resource. It can be used for both IAM users and federated access users whose name matches the provided resource name. This is a very powerful option that offers a great deal of flexibility. For example, if you specify the AWS account <i>123456789012</i> and <i>Mary_Major</i>, all of the following would be counted as approvals coming from that user:</p> <ul> <li> <p>An IAM user in the account (arn:aws:iam::<i>123456789012</i>:user/<i>Mary_Major</i>)</p> </li> <li> <p>A federated user identified in IAM as Mary_Major (arn:aws:sts::<i>123456789012</i>:federated-user/<i>Mary_Major</i>)</p> </li> </ul> <p>This option does not recognize an active session of someone assuming the role of CodeCommitReview with a role session name of <i>Mary_Major</i> (arn:aws:sts::<i>123456789012</i>:assumed-role/CodeCommitReview/<i>Mary_Major</i>) unless you include a wildcard (*Mary_Major).</p> </li> <li> <p> <b>Fully qualified ARN</b>: This option allows you to specify the fully qualified Amazon Resource Name (ARN) of the IAM user or role. </p> </li> </ul> <p>For more information about IAM ARNs, wildcards, and formats, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> </note>'
    ApprovalRuleNameRequiredException: {}
    InvalidApprovalRuleNameException: {}
    ApprovalRuleNameAlreadyExistsException: {}
    ApprovalRuleContentRequiredException: {}
    InvalidApprovalRuleContentException: {}
    NumberOfRulesExceededException: {}
    PullRequestDoesNotExistException: {}
    InvalidPullRequestIdException: {}
    PullRequestIdRequiredException: {}
    PullRequestAlreadyClosedException: {}
    CreateRepositoryOutput:
      type: object
      properties:
        repositoryMetadata:
          $ref: '#/components/schemas/RepositoryMetadata'
          description: Information about the newly created repository.
      description: Represents the output of a create repository operation.
    CreateRepositoryInput:
      type: object
      required:
        - repositoryName
      title: CreateRepositoryInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: '<p>The name of the new repository to be created.</p> <note> <p>The repository name must be unique across the calling AWS account. Repository names are limited to 100 alphanumeric, dash, and underscore characters, and cannot include certain characters. For more information about the limits on repository names, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html">Limits</a> in the <i>AWS CodeCommit User Guide</i>. The suffix .git is prohibited.</p> </note>'
        repositoryDescription:
          $ref: '#/components/schemas/RepositoryDescription'
          description: <p>A comment or description about the new repository.</p> <note> <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.</p> </note>
        tags:
          $ref: '#/components/schemas/TagsMap'
          description: One or more tag key-value pairs to use when tagging this repository.
      description: Represents the input of a create repository operation.
    RepositoryNameExistsException: {}
    InvalidRepositoryDescriptionException: {}
    RepositoryLimitExceededException: {}
    InvalidTagsMapException: {}
    TooManyTagsException: {}
    InvalidSystemTagUsageException: {}
    TagPolicyException: {}
    CreateUnreferencedMergeCommitOutput:
      type: object
      properties:
        commitId:
          $ref: '#/components/schemas/ObjectId'
          description: The full commit ID of the commit that contains your merge results.
        treeId:
          $ref: '#/components/schemas/ObjectId'
          description: The full SHA-1 pointer of the tree information for the commit that contains the merge results.
    CreateUnreferencedMergeCommitInput:
      type: object
      required:
        - repositoryName
        - sourceCommitSpecifier
        - destinationCommitSpecifier
        - mergeOption
      title: CreateUnreferencedMergeCommitInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository where you want to create the unreferenced merge commit.
        sourceCommitSpecifier:
          $ref: '#/components/schemas/CommitName'
          description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
        destinationCommitSpecifier:
          $ref: '#/components/schemas/CommitName'
          description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
        mergeOption:
          $ref: '#/components/schemas/MergeOptionTypeEnum'
          description: The merge option or strategy you want to use to merge the code.
        conflictDetailLevel:
          $ref: '#/components/schemas/ConflictDetailLevelTypeEnum'
          description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.'
        conflictResolutionStrategy:
          $ref: '#/components/schemas/ConflictResolutionStrategyTypeEnum'
          description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.'
        authorName:
          $ref: '#/components/schemas/Name'
          description: The name of the author who created the unreferenced commit. This information is used as both the author and committer for the commit.
        email:
          $ref: '#/components/schemas/Email'
          description: The email address for the person who created the unreferenced commit.
        commitMessage:
          $ref: '#/components/schemas/Message'
          description: The commit message for the unreferenced commit.
        keepEmptyFolders:
          $ref: '#/components/schemas/KeepEmptyFolders'
          description: 'If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If this is specified as true, a .gitkeep file is created for empty folders. The default is false.'
        conflictResolution:
          $ref: '#/components/schemas/ConflictResolution'
          description: 'If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge.'
    InvalidConflictResolutionException: {}
    ManualMergeRequiredException: {}
    MaximumConflictResolutionEntriesExceededException: {}
    MultipleConflictResolutionEntriesException: {}
    ReplacementTypeRequiredException: {}
    InvalidReplacementTypeException: {}
    ReplacementContentRequiredException: {}
    InvalidReplacementContentException: {}
    ConcurrentReferenceUpdateException: {}
    DeleteApprovalRuleTemplateOutput:
      type: object
      required:
        - approvalRuleTemplateId
      properties:
        approvalRuleTemplateId:
          $ref: '#/components/schemas/ApprovalRuleTemplateId'
          description: 'The system-generated ID of the deleted approval rule template. If the template has been previously deleted, the only response is a 200 OK.'
    DeleteApprovalRuleTemplateInput:
      type: object
      required:
        - approvalRuleTemplateName
      title: DeleteApprovalRuleTemplateInput
      properties:
        approvalRuleTemplateName:
          $ref: '#/components/schemas/ApprovalRuleTemplateName'
          description: The name of the approval rule template to delete.
    ApprovalRuleTemplateInUseException: {}
    DeleteBranchOutput:
      type: object
      properties:
        deletedBranch:
          $ref: '#/components/schemas/BranchInfo'
          description: 'Information about the branch deleted by the operation, including the branch name and the commit ID that was the tip of the branch.'
      description: Represents the output of a delete branch operation.
    DeleteBranchInput:
      type: object
      required:
        - repositoryName
        - branchName
      title: DeleteBranchInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that contains the branch to be deleted.
        branchName:
          $ref: '#/components/schemas/BranchName'
          description: The name of the branch to delete.
      description: Represents the input of a delete branch operation.
    DefaultBranchCannotBeDeletedException: {}
    DeleteCommentContentOutput:
      type: object
      properties:
        comment:
          $ref: '#/components/schemas/Comment'
          description: Information about the comment you just deleted.
    DeleteCommentContentInput:
      type: object
      required:
        - commentId
      title: DeleteCommentContentInput
      properties:
        commentId:
          $ref: '#/components/schemas/CommentId'
          description: 'The unique, system-generated ID of the comment. To get this ID, use <a>GetCommentsForComparedCommit</a> or <a>GetCommentsForPullRequest</a>.'
    CommentDoesNotExistException: {}
    CommentIdRequiredException: {}
    InvalidCommentIdException: {}
    CommentDeletedException: {}
    DeleteFileOutput:
      type: object
      required:
        - commitId
        - blobId
        - treeId
        - filePath
      properties:
        commitId:
          $ref: '#/components/schemas/ObjectId'
          description: The full commit ID of the commit that contains the change that deletes the file.
        blobId:
          $ref: '#/components/schemas/ObjectId'
          description: The blob ID removed from the tree as part of deleting the file.
        treeId:
          $ref: '#/components/schemas/ObjectId'
          description: The full SHA-1 pointer of the tree information for the commit that contains the delete file change.
        filePath:
          $ref: '#/components/schemas/Path'
          description: 'The fully qualified path to the file to be deleted, including the full name and extension of that file.'
    DeleteFileInput:
      type: object
      required:
        - repositoryName
        - branchName
        - filePath
        - parentCommitId
      title: DeleteFileInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that contains the file to delete.
        branchName:
          $ref: '#/components/schemas/BranchName'
          description: The name of the branch where the commit that deletes the file is made.
        filePath:
          $ref: '#/components/schemas/Path'
          description: 'The fully qualified path to the file that to be deleted, including the full name and extension of that file. For example, /examples/file.md is a fully qualified path to a file named file.md in a folder named examples.'
        parentCommitId:
          $ref: '#/components/schemas/CommitId'
          description: The ID of the commit that is the tip of the branch where you want to create the commit that deletes the file. This must be the HEAD commit for the branch. The commit that deletes the file is created from this commit ID.
        keepEmptyFolders:
          $ref: '#/components/schemas/KeepEmptyFolders'
          description: 'If a file is the only object in the folder or directory, specifies whether to delete the folder or directory that contains the file. By default, empty folders are deleted. This includes empty folders that are part of the directory structure. For example, if the path to a file is dir1/dir2/dir3/dir4, and dir2 and dir3 are empty, deleting the last file in dir4 also deletes the empty folders dir4, dir3, and dir2.'
        commitMessage:
          $ref: '#/components/schemas/Message'
          description: 'The commit message you want to include as part of deleting the file. Commit messages are limited to 256 KB. If no message is specified, a default message is used.'
        name:
          $ref: '#/components/schemas/Name'
          description: 'The name of the author of the commit that deletes the file. If no name is specified, the user''s ARN is used as the author name and committer name.'
        email:
          $ref: '#/components/schemas/Email'
          description: 'The email address for the commit that deletes the file. If no email address is specified, the email address is left blank.'
    DeletePullRequestApprovalRuleOutput:
      type: object
      required:
        - approvalRuleId
      properties:
        approvalRuleId:
          $ref: '#/components/schemas/ApprovalRuleId'
          description: '<p>The ID of the deleted approval rule. </p> <note> <p>If the approval rule was deleted in an earlier API call, the response is 200 OK without content.</p> </note>'
    DeletePullRequestApprovalRuleInput:
      type: object
      required:
        - pullRequestId
        - approvalRuleName
      title: DeletePullRequestApprovalRuleInput
      properties:
        pullRequestId:
          $ref: '#/components/schemas/PullRequestId'
          description: The system-generated ID of the pull request that contains the approval rule you want to delete.
        approvalRuleName:
          $ref: '#/components/schemas/ApprovalRuleName'
          description: The name of the approval rule you want to delete.
    CannotDeleteApprovalRuleFromTemplateException: {}
    DeleteRepositoryOutput:
      type: object
      properties:
        repositoryId:
          $ref: '#/components/schemas/RepositoryId'
          description: The ID of the repository that was deleted.
      description: Represents the output of a delete repository operation.
    DeleteRepositoryInput:
      type: object
      required:
        - repositoryName
      title: DeleteRepositoryInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository to delete.
      description: Represents the input of a delete repository operation.
    DescribeMergeConflictsOutput:
      type: object
      required:
        - conflictMetadata
        - mergeHunks
        - destinationCommitId
        - sourceCommitId
      properties:
        conflictMetadata:
          $ref: '#/components/schemas/ConflictMetadata'
          description: Contains metadata about the conflicts found in the merge.
        mergeHunks:
          $ref: '#/components/schemas/MergeHunks'
          description: A list of merge hunks of the differences between the files or lines.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: An enumeration token that can be used in a request to return the next batch of the results.
        destinationCommitId:
          $ref: '#/components/schemas/ObjectId'
          description: The commit ID of the destination commit specifier that was used in the merge evaluation.
        sourceCommitId:
          $ref: '#/components/schemas/ObjectId'
          description: The commit ID of the source commit specifier that was used in the merge evaluation.
        baseCommitId:
          $ref: '#/components/schemas/ObjectId'
          description: The commit ID of the merge base.
    DescribeMergeConflictsInput:
      type: object
      required:
        - repositoryName
        - destinationCommitSpecifier
        - sourceCommitSpecifier
        - mergeOption
        - filePath
      title: DescribeMergeConflictsInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository where you want to get information about a merge conflict.
        destinationCommitSpecifier:
          $ref: '#/components/schemas/CommitName'
          description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
        sourceCommitSpecifier:
          $ref: '#/components/schemas/CommitName'
          description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
        mergeOption:
          $ref: '#/components/schemas/MergeOptionTypeEnum'
          description: The merge option or strategy you want to use to merge the code.
        maxMergeHunks:
          $ref: '#/components/schemas/MaxResults'
          description: The maximum number of merge hunks to include in the output.
        filePath:
          $ref: '#/components/schemas/Path'
          description: 'The path of the target files used to describe the conflicts. '
        conflictDetailLevel:
          $ref: '#/components/schemas/ConflictDetailLevelTypeEnum'
          description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.'
        conflictResolutionStrategy:
          $ref: '#/components/schemas/ConflictResolutionStrategyTypeEnum'
          description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'An enumeration token that, when provided in a request, returns the next batch of the results.'
    DescribePullRequestEventsOutput:
      type: object
      required:
        - pullRequestEvents
      properties:
        pullRequestEvents:
          $ref: '#/components/schemas/PullRequestEventList'
          description: Information about the pull request events.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: An enumeration token that can be used in a request to return the next batch of the results.
    DescribePullRequestEventsInput:
      type: object
      required:
        - pullRequestId
      title: DescribePullRequestEventsInput
      properties:
        pullRequestId:
          $ref: '#/components/schemas/PullRequestId'
          description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
        pullRequestEventType:
          $ref: '#/components/schemas/PullRequestEventType'
          description: Optional. The pull request event type about which you want to return information.
        actorArn:
          $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the user whose actions resulted in the event. Examples include updating the pull request with more commits or changing the status of a pull request.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'An enumeration token that, when provided in a request, returns the next batch of the results.'
        maxResults:
          $ref: '#/components/schemas/MaxResults'
          description: 'A non-zero, non-negative integer used to limit the number of returned results. The default is 100 events, which is also the maximum number of events that can be returned in a result.'
    InvalidPullRequestEventTypeException: {}
    InvalidActorArnException: {}
    ActorDoesNotExistException: {}
    InvalidMaxResultsException: {}
    DisassociateApprovalRuleTemplateFromRepositoryInput:
      type: object
      required:
        - approvalRuleTemplateName
        - repositoryName
      title: DisassociateApprovalRuleTemplateFromRepositoryInput
      properties:
        approvalRuleTemplateName:
          $ref: '#/components/schemas/ApprovalRuleTemplateName'
          description: The name of the approval rule template to disassociate from a specified repository.
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository you want to disassociate from the template.
    EvaluatePullRequestApprovalRulesOutput:
      type: object
      required:
        - evaluation
      properties:
        evaluation:
          $ref: '#/components/schemas/Evaluation'
          description: 'The result of the evaluation, including the names of the rules whose conditions have been met (if any), the names of the rules whose conditions have not been met (if any), whether the pull request is in the approved state, and whether the pull request approval rule has been set aside by an override. '
    EvaluatePullRequestApprovalRulesInput:
      type: object
      required:
        - pullRequestId
        - revisionId
      title: EvaluatePullRequestApprovalRulesInput
      properties:
        pullRequestId:
          $ref: '#/components/schemas/PullRequestId'
          description: The system-generated ID of the pull request you want to evaluate.
        revisionId:
          $ref: '#/components/schemas/RevisionId'
          description: 'The system-generated ID for the pull request revision. To retrieve the most recent revision ID for a pull request, use <a>GetPullRequest</a>.'
    InvalidRevisionIdException: {}
    RevisionIdRequiredException: {}
    RevisionNotCurrentException: {}
    GetApprovalRuleTemplateOutput:
      type: object
      required:
        - approvalRuleTemplate
      properties:
        approvalRuleTemplate:
          $ref: '#/components/schemas/ApprovalRuleTemplate'
          description: The content and structure of the approval rule template.
    GetApprovalRuleTemplateInput:
      type: object
      required:
        - approvalRuleTemplateName
      title: GetApprovalRuleTemplateInput
      properties:
        approvalRuleTemplateName:
          $ref: '#/components/schemas/ApprovalRuleTemplateName'
          description: The name of the approval rule template for which you want to get information.
    GetBlobOutput:
      type: object
      required:
        - content
      properties:
        content:
          $ref: '#/components/schemas/blob'
          description: 'The content of the blob, usually a file.'
      description: Represents the output of a get blob operation.
    GetBlobInput:
      type: object
      required:
        - repositoryName
        - blobId
      title: GetBlobInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that contains the blob.
        blobId:
          $ref: '#/components/schemas/ObjectId'
          description: 'The ID of the blob, which is its SHA-1 pointer.'
      description: Represents the input of a get blob operation.
    BlobIdRequiredException: {}
    InvalidBlobIdException: {}
    BlobIdDoesNotExistException: {}
    FileTooLargeException: {}
    GetBranchOutput:
      type: object
      properties:
        branch:
          $ref: '#/components/schemas/BranchInfo'
          description: The name of the branch.
      description: Represents the output of a get branch operation.
    GetBranchInput:
      type: object
      title: GetBranchInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that contains the branch for which you want to retrieve information.
        branchName:
          $ref: '#/components/schemas/BranchName'
          description: The name of the branch for which you want to retrieve information.
      description: Represents the input of a get branch operation.
    GetCommentOutput:
      type: object
      properties:
        comment:
          $ref: '#/components/schemas/Comment'
          description: The contents of the comment.
    GetCommentInput:
      type: object
      required:
        - commentId
      title: GetCommentInput
      properties:
        commentId:
          $ref: '#/components/schemas/CommentId'
          description: 'The unique, system-generated ID of the comment. To get this ID, use <a>GetCommentsForComparedCommit</a> or <a>GetCommentsForPullRequest</a>.'
    GetCommentReactionsOutput:
      type: object
      required:
        - reactionsForComment
      properties:
        reactionsForComment:
          $ref: '#/components/schemas/ReactionsForCommentList'
          description: An array of reactions to the specified comment.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: An enumeration token that can be used in a request to return the next batch of the results.
    GetCommentReactionsInput:
      type: object
      required:
        - commentId
      title: GetCommentReactionsInput
      properties:
        commentId:
          $ref: '#/components/schemas/CommentId'
          description: The ID of the comment for which you want to get reactions information.
        reactionUserArn:
          $ref: '#/components/schemas/Arn'
          description: Optional. The Amazon Resource Name (ARN) of the user or identity for which you want to get reaction information.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'An enumeration token that, when provided in a request, returns the next batch of the results. '
        maxResults:
          $ref: '#/components/schemas/MaxResults'
          description: 'A non-zero, non-negative integer used to limit the number of returned results. The default is the same as the allowed maximum, 1,000.'
    InvalidReactionUserArnException: {}
    GetCommentsForComparedCommitOutput:
      type: object
      properties:
        commentsForComparedCommitData:
          $ref: '#/components/schemas/CommentsForComparedCommitData'
          description: A list of comment objects on the compared commit.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: An enumeration token that can be used in a request to return the next batch of the results.
    GetCommentsForComparedCommitInput:
      type: object
      required:
        - repositoryName
        - afterCommitId
      title: GetCommentsForComparedCommitInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository where you want to compare commits.
        beforeCommitId:
          $ref: '#/components/schemas/CommitId'
          description: 'To establish the directionality of the comparison, the full commit ID of the before commit.'
        afterCommitId:
          $ref: '#/components/schemas/CommitId'
          description: 'To establish the directionality of the comparison, the full commit ID of the after commit.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'An enumeration token that when provided in a request, returns the next batch of the results. '
        maxResults:
          $ref: '#/components/schemas/MaxResults'
          description: 'A non-zero, non-negative integer used to limit the number of returned results. The default is 100 comments, but you can configure up to 500.'
    GetCommentsForPullRequestOutput:
      type: object
      properties:
        commentsForPullRequestData:
          $ref: '#/components/schemas/CommentsForPullRequestData'
          description: An array of comment objects on the pull request.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: An enumeration token that can be used in a request to return the next batch of the results.
    GetCommentsForPullRequestInput:
      type: object
      required:
        - pullRequestId
      title: GetCommentsForPullRequestInput
      properties:
        pullRequestId:
          $ref: '#/components/schemas/PullRequestId'
          description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that contains the pull request.
        beforeCommitId:
          $ref: '#/components/schemas/CommitId'
          description: The full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was created.
        afterCommitId:
          $ref: '#/components/schemas/CommitId'
          description: The full commit ID of the commit in the source branch that was the tip of the branch at the time the comment was made.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'An enumeration token that, when provided in a request, returns the next batch of the results.'
        maxResults:
          $ref: '#/components/schemas/MaxResults'
          description: 'A non-zero, non-negative integer used to limit the number of returned results. The default is 100 comments. You can return up to 500 comments with a single request.'
    RepositoryNotAssociatedWithPullRequestException: {}
    GetCommitOutput:
      type: object
      required:
        - commit
      properties:
        commit:
          $ref: '#/components/schemas/Commit'
          description: A commit data type object that contains information about the specified commit.
      description: Represents the output of a get commit operation.
    GetCommitInput:
      type: object
      required:
        - repositoryName
        - commitId
      title: GetCommitInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository to which the commit was made.
        commitId:
          $ref: '#/components/schemas/ObjectId'
          description: The commit ID. Commit IDs are the full SHA ID of the commit.
      description: Represents the input of a get commit operation.
    CommitIdDoesNotExistException: {}
    GetDifferencesOutput:
      type: object
      properties:
        differences:
          $ref: '#/components/schemas/DifferenceList'
          description: 'A data type object that contains information about the differences, including whether the difference is added, modified, or deleted (A, D, M).'
        NextToken:
          $ref: '#/components/schemas/NextToken'
          description: An enumeration token that can be used in a request to return the next batch of the results.
    GetDifferencesInput:
      type: object
      required:
        - repositoryName
        - afterCommitSpecifier
      title: GetDifferencesInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository where you want to get differences.
        beforeCommitSpecifier:
          $ref: '#/components/schemas/CommitName'
          description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, the full commit ID). Optional. If not specified, all changes before the <code>afterCommitSpecifier</code> value are shown. If you do not use <code>beforeCommitSpecifier</code> in your request, consider limiting the results with <code>maxResults</code>.'
        afterCommitSpecifier:
          $ref: '#/components/schemas/CommitName'
          description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit.'
        beforePath:
          $ref: '#/components/schemas/Path'
          description: 'The file path in which to check for differences. Limits the results to this path. Can also be used to specify the previous name of a directory or folder. If <code>beforePath</code> and <code>afterPath</code> are not specified, differences are shown for all paths.'
        afterPath:
          $ref: '#/components/schemas/Path'
          description: 'The file path in which to check differences. Limits the results to this path. Can also be used to specify the changed name of a directory or folder, if it has changed. If not specified, differences are shown for all paths.'
        MaxResults:
          $ref: '#/components/schemas/Limit'
          description: 'A non-zero, non-negative integer used to limit the number of returned results.'
        NextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'An enumeration token that, when provided in a request, returns the next batch of the results.'
    PathDoesNotExistException: {}
    GetFileOutput:
      type: object
      required:
        - commitId
        - blobId
        - filePath
        - fileMode
        - fileSize
        - fileContent
      properties:
        commitId:
          $ref: '#/components/schemas/ObjectId'
          description: The full commit ID of the commit that contains the content returned by GetFile.
        blobId:
          $ref: '#/components/schemas/ObjectId'
          description: The blob ID of the object that represents the file content.
        filePath:
          $ref: '#/components/schemas/Path'
          description: The fully qualified path to the specified file. Returns the name and extension of the file.
        fileMode:
          $ref: '#/components/schemas/FileModeTypeEnum'
          description: '<p>The extrapolated file mode permissions of the blob. Valid values include strings such as EXECUTABLE and not numeric values.</p> <note> <p>The file mode permissions returned by this API are not the standard file mode permission values, such as 100644, but rather extrapolated values. See the supported return values.</p> </note>'
        fileSize:
          $ref: '#/components/schemas/ObjectSize'
          description: 'The size of the contents of the file, in bytes.'
        fileContent:
          $ref: '#/components/schemas/FileContent'
          description: The base-64 encoded binary data object that represents the content of the file.
    GetFileInput:
      type: object
      required:
        - repositoryName
        - filePath
      title: GetFileInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that contains the file.
        commitSpecifier:
          $ref: '#/components/schemas/CommitName'
          description: 'The fully quaified reference that identifies the commit that contains the file. For example, you can specify a full commit ID, a tag, a branch name, or a reference such as refs/heads/master. If none is provided, the head commit is used.'
        filePath:
          $ref: '#/components/schemas/Path'
          description: 'The fully qualified path to the file, including the full name and extension of the file. For example, /examples/file.md is the fully qualified path to a file named file.md in a folder named examples.'
    GetFolderOutput:
      type: object
      required:
        - commitId
        - folderPath
      properties:
        commitId:
          $ref: '#/components/schemas/ObjectId'
          description: The full commit ID used as a reference for the returned version of the folder content.
        folderPath:
          $ref: '#/components/schemas/Path'
          description: The fully qualified path of the folder whose contents are returned.
        treeId:
          $ref: '#/components/schemas/ObjectId'
          description: The full SHA-1 pointer of the tree information for the commit that contains the folder.
        subFolders:
          $ref: '#/components/schemas/FolderList'
          description: 'The list of folders that exist under the specified folder, if any.'
        files:
          $ref: '#/components/schemas/FileList'
          description: 'The list of files in the specified folder, if any.'
        symbolicLinks:
          $ref: '#/components/schemas/SymbolicLinkList'
          description: 'The list of symbolic links to other files and folders in the specified folder, if any.'
        subModules:
          $ref: '#/components/schemas/SubModuleList'
          description: 'The list of submodules in the specified folder, if any.'
    GetFolderInput:
      type: object
      required:
        - repositoryName
        - folderPath
      title: GetFolderInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository.
        commitSpecifier:
          $ref: '#/components/schemas/CommitName'
          description: 'A fully qualified reference used to identify a commit that contains the version of the folder''s content to return. A fully qualified reference can be a commit ID, branch name, tag, or reference such as HEAD. If no specifier is provided, the folder content is returned as it exists in the HEAD commit.'
        folderPath:
          $ref: '#/components/schemas/Path'
          description: 'The fully qualified path to the folder whose contents are returned, including the folder name. For example, /examples is a fully-qualified path to a folder named examples that was created off of the root directory (/) of a repository. '
    FolderDoesNotExistException: {}
    GetMergeCommitOutput:
      type: object
      properties:
        sourceCommitId:
          $ref: '#/components/schemas/ObjectId'
          description: The commit ID of the source commit specifier that was used in the merge evaluation.
        destinationCommitId:
          $ref: '#/components/schemas/ObjectId'
          description: The commit ID of the destination commit specifier that was used in the merge evaluation.
        baseCommitId:
          $ref: '#/components/schemas/ObjectId'
          description: The commit ID of the merge base.
        mergedCommitId:
          $ref: '#/components/schemas/ObjectId'
          description: 'The commit ID for the merge commit created when the source branch was merged into the destination branch. If the fast-forward merge strategy was used, there is no merge commit.'
    GetMergeCommitInput:
      type: object
      required:
        - repositoryName
        - sourceCommitSpecifier
        - destinationCommitSpecifier
      title: GetMergeCommitInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that contains the merge commit about which you want to get information.
        sourceCommitSpecifier:
          $ref: '#/components/schemas/CommitName'
          description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
        destinationCommitSpecifier:
          $ref: '#/components/schemas/CommitName'
          description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
        conflictDetailLevel:
          $ref: '#/components/schemas/ConflictDetailLevelTypeEnum'
          description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.'
        conflictResolutionStrategy:
          $ref: '#/components/schemas/ConflictResolutionStrategyTypeEnum'
          description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.'
    GetMergeConflictsOutput:
      type: object
      required:
        - mergeable
        - destinationCommitId
        - sourceCommitId
        - conflictMetadataList
      properties:
        mergeable:
          $ref: '#/components/schemas/IsMergeable'
          description: A Boolean value that indicates whether the code is mergeable by the specified merge option.
        destinationCommitId:
          $ref: '#/components/schemas/ObjectId'
          description: The commit ID of the destination commit specifier that was used in the merge evaluation.
        sourceCommitId:
          $ref: '#/components/schemas/ObjectId'
          description: The commit ID of the source commit specifier that was used in the merge evaluation.
        baseCommitId:
          $ref: '#/components/schemas/ObjectId'
          description: The commit ID of the merge base.
        conflictMetadataList:
          $ref: '#/components/schemas/ConflictMetadataList'
          description: 'A list of metadata for any conflicting files. If the specified merge strategy is FAST_FORWARD_MERGE, this list is always empty.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: An enumeration token that can be used in a request to return the next batch of the results.
    GetMergeConflictsInput:
      type: object
      required:
        - repositoryName
        - destinationCommitSpecifier
        - sourceCommitSpecifier
        - mergeOption
      title: GetMergeConflictsInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository where the pull request was created.
        destinationCommitSpecifier:
          $ref: '#/components/schemas/CommitName'
          description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
        sourceCommitSpecifier:
          $ref: '#/components/schemas/CommitName'
          description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
        mergeOption:
          $ref: '#/components/schemas/MergeOptionTypeEnum'
          description: 'The merge option or strategy you want to use to merge the code. '
        conflictDetailLevel:
          $ref: '#/components/schemas/ConflictDetailLevelTypeEnum'
          description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.'
        maxConflictFiles:
          $ref: '#/components/schemas/MaxResults'
          description: The maximum number of files to include in the output.
        conflictResolutionStrategy:
          $ref: '#/components/schemas/ConflictResolutionStrategyTypeEnum'
          description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'An enumeration token that, when provided in a request, returns the next batch of the results.'
    InvalidDestinationCommitSpecifierException: {}
    InvalidSourceCommitSpecifierException: {}
    GetMergeOptionsOutput:
      type: object
      required:
        - mergeOptions
        - sourceCommitId
        - destinationCommitId
        - baseCommitId
      properties:
        mergeOptions:
          $ref: '#/components/schemas/MergeOptions'
          description: The merge option or strategy used to merge the code.
        sourceCommitId:
          $ref: '#/components/schemas/ObjectId'
          description: The commit ID of the source commit specifier that was used in the merge evaluation.
        destinationCommitId:
          $ref: '#/components/schemas/ObjectId'
          description: The commit ID of the destination commit specifier that was used in the merge evaluation.
        baseCommitId:
          $ref: '#/components/schemas/ObjectId'
          description: The commit ID of the merge base.
    GetMergeOptionsInput:
      type: object
      required:
        - repositoryName
        - sourceCommitSpecifier
        - destinationCommitSpecifier
      title: GetMergeOptionsInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that contains the commits about which you want to get merge options.
        sourceCommitSpecifier:
          $ref: '#/components/schemas/CommitName'
          description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
        destinationCommitSpecifier:
          $ref: '#/components/schemas/CommitName'
          description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
        conflictDetailLevel:
          $ref: '#/components/schemas/ConflictDetailLevelTypeEnum'
          description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.'
        conflictResolutionStrategy:
          $ref: '#/components/schemas/ConflictResolutionStrategyTypeEnum'
          description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.'
    GetPullRequestOutput:
      type: object
      required:
        - pullRequest
      properties:
        pullRequest:
          $ref: '#/components/schemas/PullRequest'
          description: Information about the specified pull request.
    GetPullRequestInput:
      type: object
      required:
        - pullRequestId
      title: GetPullRequestInput
      properties:
        pullRequestId:
          $ref: '#/components/schemas/PullRequestId'
          description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
    GetPullRequestApprovalStatesOutput:
      type: object
      properties:
        approvals:
          $ref: '#/components/schemas/ApprovalList'
          description: Information about users who have approved the pull request.
    GetPullRequestApprovalStatesInput:
      type: object
      required:
        - pullRequestId
        - revisionId
      title: GetPullRequestApprovalStatesInput
      properties:
        pullRequestId:
          $ref: '#/components/schemas/PullRequestId'
          description: The system-generated ID for the pull request.
        revisionId:
          $ref: '#/components/schemas/RevisionId'
          description: The system-generated ID for the pull request revision.
    GetPullRequestOverrideStateOutput:
      type: object
      properties:
        overridden:
          $ref: '#/components/schemas/Overridden'
          description: A Boolean value that indicates whether a pull request has had its rules set aside (TRUE) or whether all approval rules still apply (FALSE).
        overrider:
          $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the user or identity that overrode the rules and their requirements for the pull request.
    GetPullRequestOverrideStateInput:
      type: object
      required:
        - pullRequestId
        - revisionId
      title: GetPullRequestOverrideStateInput
      properties:
        pullRequestId:
          $ref: '#/components/schemas/PullRequestId'
          description: The ID of the pull request for which you want to get information about whether approval rules have been set aside (overridden).
        revisionId:
          $ref: '#/components/schemas/RevisionId'
          description: 'The system-generated ID of the revision for the pull request. To retrieve the most recent revision ID, use <a>GetPullRequest</a>.'
    GetRepositoryOutput:
      type: object
      properties:
        repositoryMetadata:
          $ref: '#/components/schemas/RepositoryMetadata'
          description: Information about the repository.
      description: Represents the output of a get repository operation.
    GetRepositoryInput:
      type: object
      required:
        - repositoryName
      title: GetRepositoryInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository to get information about.
      description: Represents the input of a get repository operation.
    GetRepositoryTriggersOutput:
      type: object
      properties:
        configurationId:
          $ref: '#/components/schemas/RepositoryTriggersConfigurationId'
          description: The system-generated unique ID for the trigger.
        triggers:
          $ref: '#/components/schemas/RepositoryTriggersList'
          description: The JSON block of configuration information for each trigger.
      description: Represents the output of a get repository triggers operation.
    GetRepositoryTriggersInput:
      type: object
      required:
        - repositoryName
      title: GetRepositoryTriggersInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository for which the trigger is configured.
      description: Represents the input of a get repository triggers operation.
    ListApprovalRuleTemplatesOutput:
      type: object
      properties:
        approvalRuleTemplateNames:
          $ref: '#/components/schemas/ApprovalRuleTemplateNameList'
          description: The names of all the approval rule templates found in the AWS Region for your AWS account.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: An enumeration token that allows the operation to batch the next results of the operation.
    ListApprovalRuleTemplatesInput:
      type: object
      title: ListApprovalRuleTemplatesInput
      properties:
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'An enumeration token that, when provided in a request, returns the next batch of the results.'
        maxResults:
          $ref: '#/components/schemas/MaxResults'
          description: 'A non-zero, non-negative integer used to limit the number of returned results.'
    ListAssociatedApprovalRuleTemplatesForRepositoryOutput:
      type: object
      properties:
        approvalRuleTemplateNames:
          $ref: '#/components/schemas/ApprovalRuleTemplateNameList'
          description: The names of all approval rule templates associated with the repository.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: An enumeration token that allows the operation to batch the next results of the operation.
    ListAssociatedApprovalRuleTemplatesForRepositoryInput:
      type: object
      required:
        - repositoryName
      title: ListAssociatedApprovalRuleTemplatesForRepositoryInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository for which you want to list all associated approval rule templates.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'An enumeration token that, when provided in a request, returns the next batch of the results.'
        maxResults:
          $ref: '#/components/schemas/MaxResults'
          description: 'A non-zero, non-negative integer used to limit the number of returned results.'
    ListBranchesOutput:
      type: object
      properties:
        branches:
          $ref: '#/components/schemas/BranchNameList'
          description: The list of branch names.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: An enumeration token that returns the batch of the results.
      description: Represents the output of a list branches operation.
    ListBranchesInput:
      type: object
      required:
        - repositoryName
      title: ListBranchesInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that contains the branches.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: An enumeration token that allows the operation to batch the results.
      description: Represents the input of a list branches operation.
    ListPullRequestsOutput:
      type: object
      required:
        - pullRequestIds
      properties:
        pullRequestIds:
          $ref: '#/components/schemas/PullRequestIdList'
          description: The system-generated IDs of the pull requests.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: An enumeration token that allows the operation to batch the next results of the operation.
    ListPullRequestsInput:
      type: object
      required:
        - repositoryName
      title: ListPullRequestsInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository for which you want to list pull requests.
        authorArn:
          $ref: '#/components/schemas/Arn'
          description: 'Optional. The Amazon Resource Name (ARN) of the user who created the pull request. If used, this filters the results to pull requests created by that user.'
        pullRequestStatus:
          $ref: '#/components/schemas/PullRequestStatusEnum'
          description: 'Optional. The status of the pull request. If used, this refines the results to the pull requests that match the specified status.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'An enumeration token that, when provided in a request, returns the next batch of the results.'
        maxResults:
          $ref: '#/components/schemas/MaxResults'
          description: 'A non-zero, non-negative integer used to limit the number of returned results.'
    InvalidPullRequestStatusException: {}
    InvalidAuthorArnException: {}
    AuthorDoesNotExistException: {}
    ListRepositoriesOutput:
      type: object
      properties:
        repositories:
          $ref: '#/components/schemas/RepositoryNameIdPairList'
          description: Lists the repositories called by the list repositories operation.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.'
      description: Represents the output of a list repositories operation.
    ListRepositoriesInput:
      type: object
      title: ListRepositoriesInput
      properties:
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.'
        sortBy:
          $ref: '#/components/schemas/SortByEnum'
          description: The criteria used to sort the results of a list repositories operation.
        order:
          $ref: '#/components/schemas/OrderEnum'
          description: The order in which to sort the results of a list repositories operation.
      description: Represents the input of a list repositories operation.
    InvalidSortByException: {}
    InvalidOrderException: {}
    ListRepositoriesForApprovalRuleTemplateOutput:
      type: object
      properties:
        repositoryNames:
          $ref: '#/components/schemas/RepositoryNameList'
          description: A list of repository names that are associated with the specified approval rule template.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: An enumeration token that allows the operation to batch the next results of the operation.
    ListRepositoriesForApprovalRuleTemplateInput:
      type: object
      required:
        - approvalRuleTemplateName
      title: ListRepositoriesForApprovalRuleTemplateInput
      properties:
        approvalRuleTemplateName:
          $ref: '#/components/schemas/ApprovalRuleTemplateName'
          description: The name of the approval rule template for which you want to list repositories that are associated with that template.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'An enumeration token that, when provided in a request, returns the next batch of the results.'
        maxResults:
          $ref: '#/components/schemas/MaxResults'
          description: 'A non-zero, non-negative integer used to limit the number of returned results.'
    ListTagsForResourceOutput:
      type: object
      properties:
        tags:
          $ref: '#/components/schemas/TagsMap'
          description: A list of tag key and value pairs associated with the specified resource.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: An enumeration token that allows the operation to batch the next results of the operation.
    ListTagsForResourceInput:
      type: object
      required:
        - resourceArn
      title: ListTagsForResourceInput
      properties:
        resourceArn:
          $ref: '#/components/schemas/ResourceArn'
          description: 'The Amazon Resource Name (ARN) of the resource for which you want to get information about tags, if any.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'An enumeration token that, when provided in a request, returns the next batch of the results.'
    ResourceArnRequiredException: {}
    InvalidResourceArnException: {}
    MergeBranchesByFastForwardOutput:
      type: object
      properties:
        commitId:
          $ref: '#/components/schemas/ObjectId'
          description: The commit ID of the merge in the destination or target branch.
        treeId:
          $ref: '#/components/schemas/ObjectId'
          description: The tree ID of the merge in the destination or target branch.
    MergeBranchesByFastForwardInput:
      type: object
      required:
        - repositoryName
        - sourceCommitSpecifier
        - destinationCommitSpecifier
      title: MergeBranchesByFastForwardInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository where you want to merge two branches.
        sourceCommitSpecifier:
          $ref: '#/components/schemas/CommitName'
          description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
        destinationCommitSpecifier:
          $ref: '#/components/schemas/CommitName'
          description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
        targetBranch:
          $ref: '#/components/schemas/BranchName'
          description: The branch where the merge is applied.
    InvalidTargetBranchException: {}
    MergeBranchesBySquashOutput:
      type: object
      properties:
        commitId:
          $ref: '#/components/schemas/ObjectId'
          description: The commit ID of the merge in the destination or target branch.
        treeId:
          $ref: '#/components/schemas/ObjectId'
          description: The tree ID of the merge in the destination or target branch.
    MergeBranchesBySquashInput:
      type: object
      required:
        - repositoryName
        - sourceCommitSpecifier
        - destinationCommitSpecifier
      title: MergeBranchesBySquashInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository where you want to merge two branches.
        sourceCommitSpecifier:
          $ref: '#/components/schemas/CommitName'
          description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
        destinationCommitSpecifier:
          $ref: '#/components/schemas/CommitName'
          description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
        targetBranch:
          $ref: '#/components/schemas/BranchName'
          description: 'The branch where the merge is applied. '
        conflictDetailLevel:
          $ref: '#/components/schemas/ConflictDetailLevelTypeEnum'
          description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.'
        conflictResolutionStrategy:
          $ref: '#/components/schemas/ConflictResolutionStrategyTypeEnum'
          description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.'
        authorName:
          $ref: '#/components/schemas/Name'
          description: The name of the author who created the commit. This information is used as both the author and committer for the commit.
        email:
          $ref: '#/components/schemas/Email'
          description: The email address of the person merging the branches. This information is used in the commit information for the merge.
        commitMessage:
          $ref: '#/components/schemas/Message'
          description: The commit message for the merge.
        keepEmptyFolders:
          $ref: '#/components/schemas/KeepEmptyFolders'
          description: 'If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If this is specified as true, a .gitkeep file is created for empty folders. The default is false.'
        conflictResolution:
          $ref: '#/components/schemas/ConflictResolution'
          description: 'If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge.'
    MergeBranchesByThreeWayOutput:
      type: object
      properties:
        commitId:
          $ref: '#/components/schemas/ObjectId'
          description: The commit ID of the merge in the destination or target branch.
        treeId:
          $ref: '#/components/schemas/ObjectId'
          description: The tree ID of the merge in the destination or target branch.
    MergeBranchesByThreeWayInput:
      type: object
      required:
        - repositoryName
        - sourceCommitSpecifier
        - destinationCommitSpecifier
      title: MergeBranchesByThreeWayInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository where you want to merge two branches.
        sourceCommitSpecifier:
          $ref: '#/components/schemas/CommitName'
          description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
        destinationCommitSpecifier:
          $ref: '#/components/schemas/CommitName'
          description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
        targetBranch:
          $ref: '#/components/schemas/BranchName'
          description: 'The branch where the merge is applied. '
        conflictDetailLevel:
          $ref: '#/components/schemas/ConflictDetailLevelTypeEnum'
          description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.'
        conflictResolutionStrategy:
          $ref: '#/components/schemas/ConflictResolutionStrategyTypeEnum'
          description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.'
        authorName:
          $ref: '#/components/schemas/Name'
          description: The name of the author who created the commit. This information is used as both the author and committer for the commit.
        email:
          $ref: '#/components/schemas/Email'
          description: The email address of the person merging the branches. This information is used in the commit information for the merge.
        commitMessage:
          $ref: '#/components/schemas/Message'
          description: The commit message to include in the commit information for the merge.
        keepEmptyFolders:
          $ref: '#/components/schemas/KeepEmptyFolders'
          description: 'If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If true, a .gitkeep file is created for empty folders. The default is false.'
        conflictResolution:
          $ref: '#/components/schemas/ConflictResolution'
          description: 'If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge.'
    MergePullRequestByFastForwardOutput:
      type: object
      properties:
        pullRequest:
          $ref: '#/components/schemas/PullRequest'
          description: 'Information about the specified pull request, including the merge.'
    MergePullRequestByFastForwardInput:
      type: object
      required:
        - pullRequestId
        - repositoryName
      title: MergePullRequestByFastForwardInput
      properties:
        pullRequestId:
          $ref: '#/components/schemas/PullRequestId'
          description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository where the pull request was created.
        sourceCommitId:
          $ref: '#/components/schemas/ObjectId'
          description: The full commit ID of the original or updated commit in the pull request source branch. Pass this value if you want an exception thrown if the current commit ID of the tip of the source branch does not match this commit ID.
    TipOfSourceReferenceIsDifferentException: {}
    PullRequestApprovalRulesNotSatisfiedException: {}
    MergePullRequestBySquashOutput:
      type: object
      properties:
        pullRequest:
          $ref: '#/components/schemas/PullRequest'
    MergePullRequestBySquashInput:
      type: object
      required:
        - pullRequestId
        - repositoryName
      title: MergePullRequestBySquashInput
      properties:
        pullRequestId:
          $ref: '#/components/schemas/PullRequestId'
          description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository where the pull request was created.
        sourceCommitId:
          $ref: '#/components/schemas/ObjectId'
          description: The full commit ID of the original or updated commit in the pull request source branch. Pass this value if you want an exception thrown if the current commit ID of the tip of the source branch does not match this commit ID.
        conflictDetailLevel:
          $ref: '#/components/schemas/ConflictDetailLevelTypeEnum'
          description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.'
        conflictResolutionStrategy:
          $ref: '#/components/schemas/ConflictResolutionStrategyTypeEnum'
          description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.'
        commitMessage:
          $ref: '#/components/schemas/Message'
          description: The commit message to include in the commit information for the merge.
        authorName:
          $ref: '#/components/schemas/Name'
          description: The name of the author who created the commit. This information is used as both the author and committer for the commit.
        email:
          $ref: '#/components/schemas/Email'
          description: The email address of the person merging the branches. This information is used in the commit information for the merge.
        keepEmptyFolders:
          $ref: '#/components/schemas/KeepEmptyFolders'
          description: 'If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If true, a .gitkeep file is created for empty folders. The default is false.'
        conflictResolution:
          $ref: '#/components/schemas/ConflictResolution'
          description: 'If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge.'
    MergePullRequestByThreeWayOutput:
      type: object
      properties:
        pullRequest:
          $ref: '#/components/schemas/PullRequest'
    MergePullRequestByThreeWayInput:
      type: object
      required:
        - pullRequestId
        - repositoryName
      title: MergePullRequestByThreeWayInput
      properties:
        pullRequestId:
          $ref: '#/components/schemas/PullRequestId'
          description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository where the pull request was created.
        sourceCommitId:
          $ref: '#/components/schemas/ObjectId'
          description: The full commit ID of the original or updated commit in the pull request source branch. Pass this value if you want an exception thrown if the current commit ID of the tip of the source branch does not match this commit ID.
        conflictDetailLevel:
          $ref: '#/components/schemas/ConflictDetailLevelTypeEnum'
          description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.'
        conflictResolutionStrategy:
          $ref: '#/components/schemas/ConflictResolutionStrategyTypeEnum'
          description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.'
        commitMessage:
          $ref: '#/components/schemas/Message'
          description: The commit message to include in the commit information for the merge.
        authorName:
          $ref: '#/components/schemas/Name'
          description: The name of the author who created the commit. This information is used as both the author and committer for the commit.
        email:
          $ref: '#/components/schemas/Email'
          description: The email address of the person merging the branches. This information is used in the commit information for the merge.
        keepEmptyFolders:
          $ref: '#/components/schemas/KeepEmptyFolders'
          description: 'If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If true, a .gitkeep file is created for empty folders. The default is false.'
        conflictResolution:
          $ref: '#/components/schemas/ConflictResolution'
          description: 'If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge.'
    OverridePullRequestApprovalRulesInput:
      type: object
      required:
        - pullRequestId
        - revisionId
        - overrideStatus
      title: OverridePullRequestApprovalRulesInput
      properties:
        pullRequestId:
          $ref: '#/components/schemas/PullRequestId'
          description: 'The system-generated ID of the pull request for which you want to override all approval rule requirements. To get this information, use <a>GetPullRequest</a>.'
        revisionId:
          $ref: '#/components/schemas/RevisionId'
          description: 'The system-generated ID of the most recent revision of the pull request. You cannot override approval rules for anything but the most recent revision of a pull request. To get the revision ID, use GetPullRequest.'
        overrideStatus:
          $ref: '#/components/schemas/OverrideStatus'
          description: Whether you want to set aside approval rule requirements for the pull request (OVERRIDE) or revoke a previous override and apply approval rule requirements (REVOKE). REVOKE status is not stored.
    InvalidOverrideStatusException: {}
    OverrideStatusRequiredException: {}
    OverrideAlreadySetException: {}
    PostCommentForComparedCommitOutput:
      type: object
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository where you posted a comment on the comparison between commits.
        beforeCommitId:
          $ref: '#/components/schemas/CommitId'
          description: 'In the directionality you established, the full commit ID of the before commit.'
        afterCommitId:
          $ref: '#/components/schemas/CommitId'
          description: 'In the directionality you established, the full commit ID of the after commit.'
        beforeBlobId:
          $ref: '#/components/schemas/ObjectId'
          description: 'In the directionality you established, the blob ID of the before blob.'
        afterBlobId:
          $ref: '#/components/schemas/ObjectId'
          description: 'In the directionality you established, the blob ID of the after blob.'
        location:
          $ref: '#/components/schemas/Location'
          description: The location of the comment in the comparison between the two commits.
        comment:
          $ref: '#/components/schemas/Comment'
          description: The content of the comment you posted.
    PostCommentForComparedCommitInput:
      type: object
      required:
        - repositoryName
        - afterCommitId
        - content
      title: PostCommentForComparedCommitInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository where you want to post a comment on the comparison between commits.
        beforeCommitId:
          $ref: '#/components/schemas/CommitId'
          description: 'To establish the directionality of the comparison, the full commit ID of the before commit. Required for commenting on any commit unless that commit is the initial commit.'
        afterCommitId:
          $ref: '#/components/schemas/CommitId'
          description: 'To establish the directionality of the comparison, the full commit ID of the after commit.'
        location:
          $ref: '#/components/schemas/Location'
          description: The location of the comparison where you want to comment.
        content:
          $ref: '#/components/schemas/Content'
          description: The content of the comment you want to make.
        clientRequestToken:
          $ref: '#/components/schemas/ClientRequestToken'
          description: 'A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.'
    CommentContentRequiredException: {}
    CommentContentSizeLimitExceededException: {}
    InvalidFileLocationException: {}
    InvalidRelativeFileVersionEnumException: {}
    InvalidFilePositionException: {}
    BeforeCommitIdAndAfterCommitIdAreSameException: {}
    PostCommentForPullRequestOutput:
      type: object
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository where you posted a comment on a pull request.
        pullRequestId:
          $ref: '#/components/schemas/PullRequestId'
          description: 'The system-generated ID of the pull request. '
        beforeCommitId:
          $ref: '#/components/schemas/CommitId'
          description: 'The full commit ID of the commit in the source branch used to create the pull request, or in the case of an updated pull request, the full commit ID of the commit used to update the pull request.'
        afterCommitId:
          $ref: '#/components/schemas/CommitId'
          description: The full commit ID of the commit in the destination branch where the pull request is merged.
        beforeBlobId:
          $ref: '#/components/schemas/ObjectId'
          description: 'In the directionality of the pull request, the blob ID of the before blob.'
        afterBlobId:
          $ref: '#/components/schemas/ObjectId'
          description: 'In the directionality of the pull request, the blob ID of the after blob.'
        location:
          $ref: '#/components/schemas/Location'
          description: The location of the change where you posted your comment.
        comment:
          $ref: '#/components/schemas/Comment'
          description: The content of the comment you posted.
    PostCommentForPullRequestInput:
      type: object
      required:
        - pullRequestId
        - repositoryName
        - beforeCommitId
        - afterCommitId
        - content
      title: PostCommentForPullRequestInput
      properties:
        pullRequestId:
          $ref: '#/components/schemas/PullRequestId'
          description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository where you want to post a comment on a pull request.
        beforeCommitId:
          $ref: '#/components/schemas/CommitId'
          description: The full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was created.
        afterCommitId:
          $ref: '#/components/schemas/CommitId'
          description: The full commit ID of the commit in the source branch that is the current tip of the branch for the pull request when you post the comment.
        location:
          $ref: '#/components/schemas/Location'
          description: 'The location of the change where you want to post your comment. If no location is provided, the comment is posted as a general comment on the pull request difference between the before commit ID and the after commit ID.'
        content:
          $ref: '#/components/schemas/Content'
          description: The content of your comment on the change.
        clientRequestToken:
          $ref: '#/components/schemas/ClientRequestToken'
          description: 'A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.'
    PostCommentReplyOutput:
      type: object
      properties:
        comment:
          $ref: '#/components/schemas/Comment'
          description: Information about the reply to a comment.
    PostCommentReplyInput:
      type: object
      required:
        - inReplyTo
        - content
      title: PostCommentReplyInput
      properties:
        inReplyTo:
          $ref: '#/components/schemas/CommentId'
          description: 'The system-generated ID of the comment to which you want to reply. To get this ID, use <a>GetCommentsForComparedCommit</a> or <a>GetCommentsForPullRequest</a>.'
        clientRequestToken:
          $ref: '#/components/schemas/ClientRequestToken'
          description: 'A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.'
        content:
          $ref: '#/components/schemas/Content'
          description: The contents of your reply to a comment.
    PutCommentReactionInput:
      type: object
      required:
        - commentId
        - reactionValue
      title: PutCommentReactionInput
      properties:
        commentId:
          $ref: '#/components/schemas/CommentId'
          description: The ID of the comment to which you want to add or update a reaction.
        reactionValue:
          $ref: '#/components/schemas/ReactionValue'
          description: 'The emoji reaction you want to add or update. To remove a reaction, provide a value of blank or null. You can also provide the value of none. For information about emoji reaction values supported in AWS CodeCommit, see the <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/how-to-commit-comment.html#emoji-reaction-table">AWS CodeCommit User Guide</a>.'
    InvalidReactionValueException: {}
    ReactionValueRequiredException: {}
    ReactionLimitExceededException: {}
    PutFileOutput:
      type: object
      required:
        - commitId
        - blobId
        - treeId
      properties:
        commitId:
          $ref: '#/components/schemas/ObjectId'
          description: The full SHA ID of the commit that contains this file change.
        blobId:
          $ref: '#/components/schemas/ObjectId'
          description: 'The ID of the blob, which is its SHA-1 pointer.'
        treeId:
          $ref: '#/components/schemas/ObjectId'
          description: The full SHA-1 pointer of the tree information for the commit that contains this file change.
    PutFileInput:
      type: object
      required:
        - repositoryName
        - branchName
        - fileContent
        - filePath
      title: PutFileInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository where you want to add or update the file.
        branchName:
          $ref: '#/components/schemas/BranchName'
          description: 'The name of the branch where you want to add or update the file. If this is an empty repository, this branch is created.'
        fileContent:
          $ref: '#/components/schemas/FileContent'
          description: 'The content of the file, in binary object format. '
        filePath:
          $ref: '#/components/schemas/Path'
          description: '<p>The name of the file you want to add or update, including the relative path to the file in the repository.</p> <note> <p>If the path does not currently exist in the repository, the path is created as part of adding the file.</p> </note>'
        fileMode:
          $ref: '#/components/schemas/FileModeTypeEnum'
          description: The file mode permissions of the blob. Valid file mode permissions are listed here.
        parentCommitId:
          $ref: '#/components/schemas/CommitId'
          description: '<p>The full commit ID of the head commit in the branch where you want to add or update the file. If this is an empty repository, no commit ID is required. If this is not an empty repository, a commit ID is required. </p> <p>The commit ID must match the ID of the head commit at the time of the operation. Otherwise, an error occurs, and the file is not added or updated.</p>'
        commitMessage:
          $ref: '#/components/schemas/Message'
          description: 'A message about why this file was added or updated. Although it is optional, a message makes the commit history for your repository more useful.'
        name:
          $ref: '#/components/schemas/Name'
          description: 'The name of the person adding or updating the file. Although it is optional, a name makes the commit history for your repository more useful.'
        email:
          $ref: '#/components/schemas/Email'
          description: An email address for the person adding or updating the file.
    FileContentRequiredException: {}
    SameFileContentException: {}
    PutRepositoryTriggersOutput:
      type: object
      properties:
        configurationId:
          $ref: '#/components/schemas/RepositoryTriggersConfigurationId'
          description: The system-generated unique ID for the create or update operation.
      description: Represents the output of a put repository triggers operation.
    PutRepositoryTriggersInput:
      type: object
      required:
        - repositoryName
        - triggers
      title: PutRepositoryTriggersInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository where you want to create or update the trigger.
        triggers:
          $ref: '#/components/schemas/RepositoryTriggersList'
          description: The JSON block of configuration information for each trigger.
      description: Represents the input of a put repository triggers operation.
    RepositoryTriggersListRequiredException: {}
    MaximumRepositoryTriggersExceededException: {}
    InvalidRepositoryTriggerNameException: {}
    InvalidRepositoryTriggerDestinationArnException: {}
    InvalidRepositoryTriggerRegionException: {}
    InvalidRepositoryTriggerCustomDataException: {}
    MaximumBranchesExceededException: {}
    InvalidRepositoryTriggerBranchNameException: {}
    InvalidRepositoryTriggerEventsException: {}
    RepositoryTriggerNameRequiredException: {}
    RepositoryTriggerDestinationArnRequiredException: {}
    RepositoryTriggerBranchNameListRequiredException: {}
    RepositoryTriggerEventsListRequiredException: {}
    TagResourceInput:
      type: object
      required:
        - resourceArn
        - tags
      title: TagResourceInput
      properties:
        resourceArn:
          $ref: '#/components/schemas/ResourceArn'
          description: The Amazon Resource Name (ARN) of the resource to which you want to add or update tags.
        tags:
          $ref: '#/components/schemas/TagsMap'
          description: The key-value pair to use when tagging this repository.
    TagsMapRequiredException: {}
    TestRepositoryTriggersOutput:
      type: object
      properties:
        successfulExecutions:
          $ref: '#/components/schemas/RepositoryTriggerNameList'
          description: 'The list of triggers that were successfully tested. This list provides the names of the triggers that were successfully tested, separated by commas.'
        failedExecutions:
          $ref: '#/components/schemas/RepositoryTriggerExecutionFailureList'
          description: 'The list of triggers that were not tested. This list provides the names of the triggers that could not be tested, separated by commas.'
      description: Represents the output of a test repository triggers operation.
    TestRepositoryTriggersInput:
      type: object
      required:
        - repositoryName
        - triggers
      title: TestRepositoryTriggersInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository in which to test the triggers.
        triggers:
          $ref: '#/components/schemas/RepositoryTriggersList'
          description: The list of triggers to test.
      description: Represents the input of a test repository triggers operation.
    UntagResourceInput:
      type: object
      required:
        - resourceArn
        - tagKeys
      title: UntagResourceInput
      properties:
        resourceArn:
          $ref: '#/components/schemas/ResourceArn'
          description: The Amazon Resource Name (ARN) of the resource to which you want to remove tags.
        tagKeys:
          $ref: '#/components/schemas/TagKeysList'
          description: The tag key for each tag that you want to remove from the resource.
    TagKeysListRequiredException: {}
    InvalidTagKeysListException: {}
    UpdateApprovalRuleTemplateContentOutput:
      type: object
      required:
        - approvalRuleTemplate
      properties:
        approvalRuleTemplate:
          $ref: '#/components/schemas/ApprovalRuleTemplate'
    UpdateApprovalRuleTemplateContentInput:
      type: object
      required:
        - approvalRuleTemplateName
        - newRuleContent
      title: UpdateApprovalRuleTemplateContentInput
      properties:
        approvalRuleTemplateName:
          $ref: '#/components/schemas/ApprovalRuleTemplateName'
          description: 'The name of the approval rule template where you want to update the content of the rule. '
        newRuleContent:
          $ref: '#/components/schemas/ApprovalRuleTemplateContent'
          description: The content that replaces the existing content of the rule. Content statements must be complete. You cannot provide only the changes.
        existingRuleContentSha256:
          $ref: '#/components/schemas/RuleContentSha256'
          description: The SHA-256 hash signature for the content of the approval rule. You can retrieve this information by using <a>GetPullRequest</a>.
    InvalidRuleContentSha256Exception: {}
    UpdateApprovalRuleTemplateDescriptionOutput:
      type: object
      required:
        - approvalRuleTemplate
      properties:
        approvalRuleTemplate:
          $ref: '#/components/schemas/ApprovalRuleTemplate'
          description: The structure and content of the updated approval rule template.
    UpdateApprovalRuleTemplateDescriptionInput:
      type: object
      required:
        - approvalRuleTemplateName
        - approvalRuleTemplateDescription
      title: UpdateApprovalRuleTemplateDescriptionInput
      properties:
        approvalRuleTemplateName:
          $ref: '#/components/schemas/ApprovalRuleTemplateName'
          description: The name of the template for which you want to update the description.
        approvalRuleTemplateDescription:
          $ref: '#/components/schemas/ApprovalRuleTemplateDescription'
          description: The updated description of the approval rule template.
    UpdateApprovalRuleTemplateNameOutput:
      type: object
      required:
        - approvalRuleTemplate
      properties:
        approvalRuleTemplate:
          $ref: '#/components/schemas/ApprovalRuleTemplate'
          description: The structure and content of the updated approval rule template.
    UpdateApprovalRuleTemplateNameInput:
      type: object
      required:
        - oldApprovalRuleTemplateName
        - newApprovalRuleTemplateName
      title: UpdateApprovalRuleTemplateNameInput
      properties:
        oldApprovalRuleTemplateName:
          $ref: '#/components/schemas/ApprovalRuleTemplateName'
          description: The current name of the approval rule template.
        newApprovalRuleTemplateName:
          $ref: '#/components/schemas/ApprovalRuleTemplateName'
          description: The new name you want to apply to the approval rule template.
    UpdateCommentOutput:
      type: object
      properties:
        comment:
          $ref: '#/components/schemas/Comment'
          description: Information about the updated comment.
    UpdateCommentInput:
      type: object
      required:
        - commentId
        - content
      title: UpdateCommentInput
      properties:
        commentId:
          $ref: '#/components/schemas/CommentId'
          description: 'The system-generated ID of the comment you want to update. To get this ID, use <a>GetCommentsForComparedCommit</a> or <a>GetCommentsForPullRequest</a>.'
        content:
          $ref: '#/components/schemas/Content'
          description: The updated content to replace the existing content of the comment.
    CommentNotCreatedByCallerException: {}
    UpdateDefaultBranchInput:
      type: object
      required:
        - repositoryName
        - defaultBranchName
      title: UpdateDefaultBranchInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository to set or change the default branch for.
        defaultBranchName:
          $ref: '#/components/schemas/BranchName'
          description: The name of the branch to set as the default.
      description: Represents the input of an update default branch operation.
    UpdatePullRequestApprovalRuleContentOutput:
      type: object
      required:
        - approvalRule
      properties:
        approvalRule:
          $ref: '#/components/schemas/ApprovalRule'
          description: Information about the updated approval rule.
    UpdatePullRequestApprovalRuleContentInput:
      type: object
      required:
        - pullRequestId
        - approvalRuleName
        - newRuleContent
      title: UpdatePullRequestApprovalRuleContentInput
      properties:
        pullRequestId:
          $ref: '#/components/schemas/PullRequestId'
          description: The system-generated ID of the pull request.
        approvalRuleName:
          $ref: '#/components/schemas/ApprovalRuleName'
          description: The name of the approval rule you want to update.
        existingRuleContentSha256:
          $ref: '#/components/schemas/RuleContentSha256'
          description: The SHA-256 hash signature for the content of the approval rule. You can retrieve this information by using <a>GetPullRequest</a>.
        newRuleContent:
          $ref: '#/components/schemas/ApprovalRuleContent'
          description: '<p>The updated content for the approval rule.</p> <note> <p>When you update the content of the approval rule, you can specify approvers in an approval pool in one of two ways:</p> <ul> <li> <p> <b>CodeCommitApprovers</b>: This option only requires an AWS account and a resource. It can be used for both IAM users and federated access users whose name matches the provided resource name. This is a very powerful option that offers a great deal of flexibility. For example, if you specify the AWS account <i>123456789012</i> and <i>Mary_Major</i>, all of the following are counted as approvals coming from that user:</p> <ul> <li> <p>An IAM user in the account (arn:aws:iam::<i>123456789012</i>:user/<i>Mary_Major</i>)</p> </li> <li> <p>A federated user identified in IAM as Mary_Major (arn:aws:sts::<i>123456789012</i>:federated-user/<i>Mary_Major</i>)</p> </li> </ul> <p>This option does not recognize an active session of someone assuming the role of CodeCommitReview with a role session name of <i>Mary_Major</i> (arn:aws:sts::<i>123456789012</i>:assumed-role/CodeCommitReview/<i>Mary_Major</i>) unless you include a wildcard (*Mary_Major).</p> </li> <li> <p> <b>Fully qualified ARN</b>: This option allows you to specify the fully qualified Amazon Resource Name (ARN) of the IAM user or role. </p> </li> </ul> <p>For more information about IAM ARNs, wildcards, and formats, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> </note>'
    ApprovalRuleDoesNotExistException: {}
    CannotModifyApprovalRuleFromTemplateException: {}
    UpdatePullRequestApprovalStateInput:
      type: object
      required:
        - pullRequestId
        - revisionId
        - approvalState
      title: UpdatePullRequestApprovalStateInput
      properties:
        pullRequestId:
          $ref: '#/components/schemas/PullRequestId'
          description: The system-generated ID of the pull request.
        revisionId:
          $ref: '#/components/schemas/RevisionId'
          description: The system-generated ID of the revision.
        approvalState:
          $ref: '#/components/schemas/ApprovalState'
          description: The approval state to associate with the user on the pull request.
    InvalidApprovalStateException: {}
    ApprovalStateRequiredException: {}
    PullRequestCannotBeApprovedByAuthorException: {}
    MaximumNumberOfApprovalsExceededException: {}
    UpdatePullRequestDescriptionOutput:
      type: object
      required:
        - pullRequest
      properties:
        pullRequest:
          $ref: '#/components/schemas/PullRequest'
          description: Information about the updated pull request.
    UpdatePullRequestDescriptionInput:
      type: object
      required:
        - pullRequestId
        - description
      title: UpdatePullRequestDescriptionInput
      properties:
        pullRequestId:
          $ref: '#/components/schemas/PullRequestId'
          description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
        description:
          $ref: '#/components/schemas/Description'
          description: The updated content of the description for the pull request. This content replaces the existing description.
    UpdatePullRequestStatusOutput:
      type: object
      required:
        - pullRequest
      properties:
        pullRequest:
          $ref: '#/components/schemas/PullRequest'
          description: Information about the pull request.
    UpdatePullRequestStatusInput:
      type: object
      required:
        - pullRequestId
        - pullRequestStatus
      title: UpdatePullRequestStatusInput
      properties:
        pullRequestId:
          $ref: '#/components/schemas/PullRequestId'
          description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
        pullRequestStatus:
          $ref: '#/components/schemas/PullRequestStatusEnum'
          description: 'The status of the pull request. The only valid operations are to update the status from <code>OPEN</code> to <code>OPEN</code>, <code>OPEN</code> to <code>CLOSED</code> or from <code>CLOSED</code> to <code>CLOSED</code>.'
    InvalidPullRequestStatusUpdateException: {}
    PullRequestStatusRequiredException: {}
    UpdatePullRequestTitleOutput:
      type: object
      required:
        - pullRequest
      properties:
        pullRequest:
          $ref: '#/components/schemas/PullRequest'
          description: Information about the updated pull request.
    UpdatePullRequestTitleInput:
      type: object
      required:
        - pullRequestId
        - title
      title: UpdatePullRequestTitleInput
      properties:
        pullRequestId:
          $ref: '#/components/schemas/PullRequestId'
          description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
        title:
          $ref: '#/components/schemas/Title'
          description: The updated title of the pull request. This replaces the existing title.
    UpdateRepositoryDescriptionInput:
      type: object
      required:
        - repositoryName
      title: UpdateRepositoryDescriptionInput
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository to set or change the comment or description for.
        repositoryDescription:
          $ref: '#/components/schemas/RepositoryDescription'
          description: 'The new comment or description for the specified repository. Repository descriptions are limited to 1,000 characters.'
      description: Represents the input of an update repository description operation.
    UpdateRepositoryNameInput:
      type: object
      required:
        - oldName
        - newName
      title: UpdateRepositoryNameInput
      properties:
        oldName:
          $ref: '#/components/schemas/RepositoryName'
          description: The current name of the repository.
        newName:
          $ref: '#/components/schemas/RepositoryName'
          description: The new name for the repository.
      description: Represents the input of an update repository description operation.
    AccountId:
      type: string
    AdditionalData:
      type: string
    Arn:
      type: string
    ApprovalState:
      type: string
      enum:
        - APPROVE
        - REVOKE
    Approval:
      type: object
      properties:
        userArn:
          $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the user.
        approvalState:
          $ref: '#/components/schemas/ApprovalState'
          description: 'The state of the approval, APPROVE or REVOKE. REVOKE states are not stored.'
      description: Returns information about a specific approval on a pull request.
    ApprovalList:
      type: array
      items:
        $ref: '#/components/schemas/Approval'
    ApprovalRuleId:
      type: string
    ApprovalRuleName:
      type: string
      minLength: 1
      maxLength: 100
    ApprovalRuleContent:
      type: string
      minLength: 1
      maxLength: 3000
    RuleContentSha256:
      type: string
    LastModifiedDate:
      type: string
      format: date-time
    CreationDate:
      type: string
      format: date-time
    OriginApprovalRuleTemplate:
      type: object
      properties:
        approvalRuleTemplateId:
          $ref: '#/components/schemas/ApprovalRuleTemplateId'
          description: The ID of the template that created the approval rule.
        approvalRuleTemplateName:
          $ref: '#/components/schemas/ApprovalRuleTemplateName'
          description: The name of the template that created the approval rule.
      description: Returns information about the template that created the approval rule for a pull request.
    ApprovalRule:
      type: object
      properties:
        approvalRuleId:
          $ref: '#/components/schemas/ApprovalRuleId'
          description: The system-generated ID of the approval rule.
        approvalRuleName:
          $ref: '#/components/schemas/ApprovalRuleName'
          description: The name of the approval rule.
        approvalRuleContent:
          $ref: '#/components/schemas/ApprovalRuleContent'
          description: The content of the approval rule.
        ruleContentSha256:
          $ref: '#/components/schemas/RuleContentSha256'
          description: The SHA-256 hash signature for the content of the approval rule.
        lastModifiedDate:
          $ref: '#/components/schemas/LastModifiedDate'
          description: 'The date the approval rule was most recently changed, in timestamp format.'
        creationDate:
          $ref: '#/components/schemas/CreationDate'
          description: 'The date the approval rule was created, in timestamp format.'
        lastModifiedUser:
          $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the user who made the most recent changes to the approval rule.
        originApprovalRuleTemplate:
          $ref: '#/components/schemas/OriginApprovalRuleTemplate'
          description: The approval rule template used to create the rule.
      description: Returns information about an approval rule.
    ApprovalRuleEventMetadata:
      type: object
      properties:
        approvalRuleName:
          $ref: '#/components/schemas/ApprovalRuleName'
          description: The name of the approval rule.
        approvalRuleId:
          $ref: '#/components/schemas/ApprovalRuleId'
          description: The system-generated ID of the approval rule.
        approvalRuleContent:
          $ref: '#/components/schemas/ApprovalRuleContent'
          description: The content of the approval rule.
      description: Returns information about an event for an approval rule.
    RevisionId:
      type: string
    OverrideStatus:
      type: string
      enum:
        - OVERRIDE
        - REVOKE
    ApprovalRuleOverriddenEventMetadata:
      type: object
      properties:
        revisionId:
          $ref: '#/components/schemas/RevisionId'
          description: The revision ID of the pull request when the override event occurred.
        overrideStatus:
          $ref: '#/components/schemas/OverrideStatus'
          description: The status of the override event.
      description: Returns information about an override event for approval rules for a pull request.
    ApprovalRuleTemplateId:
      type: string
    ApprovalRuleTemplateName:
      type: string
      minLength: 1
      maxLength: 100
    ApprovalRuleTemplateDescription:
      type: string
      minLength: 0
      maxLength: 1000
    ApprovalRuleTemplateContent:
      type: string
      minLength: 1
      maxLength: 3000
    ApprovalRuleTemplate:
      type: object
      properties:
        approvalRuleTemplateId:
          $ref: '#/components/schemas/ApprovalRuleTemplateId'
          description: The system-generated ID of the approval rule template.
        approvalRuleTemplateName:
          $ref: '#/components/schemas/ApprovalRuleTemplateName'
          description: The name of the approval rule template.
        approvalRuleTemplateDescription:
          $ref: '#/components/schemas/ApprovalRuleTemplateDescription'
          description: The description of the approval rule template.
        approvalRuleTemplateContent:
          $ref: '#/components/schemas/ApprovalRuleTemplateContent'
          description: The content of the approval rule template.
        ruleContentSha256:
          $ref: '#/components/schemas/RuleContentSha256'
          description: The SHA-256 hash signature for the content of the approval rule template.
        lastModifiedDate:
          $ref: '#/components/schemas/LastModifiedDate'
          description: 'The date the approval rule template was most recently changed, in timestamp format.'
        creationDate:
          $ref: '#/components/schemas/CreationDate'
          description: 'The date the approval rule template was created, in timestamp format.'
        lastModifiedUser:
          $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the user who made the most recent changes to the approval rule template.
      description: Returns information about an approval rule template.
    ApprovalRuleTemplateNameList:
      type: array
      items:
        $ref: '#/components/schemas/ApprovalRuleTemplateName'
    ApprovalRulesList:
      type: array
      items:
        $ref: '#/components/schemas/ApprovalRule'
    ApprovalRulesNotSatisfiedList:
      type: array
      items:
        $ref: '#/components/schemas/ApprovalRuleName'
    ApprovalRulesSatisfiedList:
      type: array
      items:
        $ref: '#/components/schemas/ApprovalRuleName'
    ApprovalStateChangedEventMetadata:
      type: object
      properties:
        revisionId:
          $ref: '#/components/schemas/RevisionId'
          description: The revision ID of the pull request when the approval state changed.
        approvalStatus:
          $ref: '#/components/schemas/ApprovalState'
          description: The approval status for the pull request.
      description: Returns information about a change in the approval state for a pull request.
    Approved:
      type: boolean
    RepositoryName:
      type: string
      pattern: '[\w\.-]+'
      minLength: 1
      maxLength: 100
    ErrorCode:
      type: string
    ErrorMessage:
      type: string
    BatchAssociateApprovalRuleTemplateWithRepositoriesError:
      type: object
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository where the association was not made.
        errorCode:
          $ref: '#/components/schemas/ErrorCode'
          description: An error code that specifies whether the repository name was not valid or not found.
        errorMessage:
          $ref: '#/components/schemas/ErrorMessage'
          description: An error message that provides details about why the repository name was not found or not valid.
      description: Returns information about errors in a BatchAssociateApprovalRuleTemplateWithRepositories operation.
    BatchAssociateApprovalRuleTemplateWithRepositoriesErrorsList:
      type: array
      items:
        $ref: '#/components/schemas/BatchAssociateApprovalRuleTemplateWithRepositoriesError'
    RepositoryNameList:
      type: array
      items:
        $ref: '#/components/schemas/RepositoryName'
    Path:
      type: string
    ExceptionName:
      type: string
    Message:
      type: string
    BatchDescribeMergeConflictsError:
      type: object
      required:
        - filePath
        - exceptionName
        - message
      properties:
        filePath:
          $ref: '#/components/schemas/Path'
          description: The path to the file.
        exceptionName:
          $ref: '#/components/schemas/ExceptionName'
          description: The name of the exception.
        message:
          $ref: '#/components/schemas/Message'
          description: The message provided by the exception.
      description: Returns information about errors in a BatchDescribeMergeConflicts operation.
    BatchDescribeMergeConflictsErrors:
      type: array
      items:
        $ref: '#/components/schemas/BatchDescribeMergeConflictsError'
    CommitName:
      type: string
    MergeOptionTypeEnum:
      type: string
      enum:
        - FAST_FORWARD_MERGE
        - SQUASH_MERGE
        - THREE_WAY_MERGE
    MaxResults:
      type: integer
    FilePaths:
      type: array
      items:
        $ref: '#/components/schemas/Path'
    ConflictDetailLevelTypeEnum:
      type: string
      enum:
        - FILE_LEVEL
        - LINE_LEVEL
    ConflictResolutionStrategyTypeEnum:
      type: string
      enum:
        - NONE
        - ACCEPT_SOURCE
        - ACCEPT_DESTINATION
        - AUTOMERGE
    NextToken:
      type: string
    Conflicts:
      type: array
      items:
        $ref: '#/components/schemas/Conflict'
    ObjectId:
      type: string
    BatchDisassociateApprovalRuleTemplateFromRepositoriesError:
      type: object
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository where the association with the template was not able to be removed.
        errorCode:
          $ref: '#/components/schemas/ErrorCode'
          description: An error code that specifies whether the repository name was not valid or not found.
        errorMessage:
          $ref: '#/components/schemas/ErrorMessage'
          description: An error message that provides details about why the repository name was either not found or not valid.
      description: Returns information about errors in a BatchDisassociateApprovalRuleTemplateFromRepositories operation.
    BatchDisassociateApprovalRuleTemplateFromRepositoriesErrorsList:
      type: array
      items:
        $ref: '#/components/schemas/BatchDisassociateApprovalRuleTemplateFromRepositoriesError'
    BatchGetCommitsError:
      type: object
      properties:
        commitId:
          $ref: '#/components/schemas/ObjectId'
          description: A commit ID that either could not be found or was not in a valid format.
        errorCode:
          $ref: '#/components/schemas/ErrorCode'
          description: An error code that specifies whether the commit ID was not valid or not found.
        errorMessage:
          $ref: '#/components/schemas/ErrorMessage'
          description: An error message that provides detail about why the commit ID either was not found or was not valid.
      description: Returns information about errors in a BatchGetCommits operation.
    BatchGetCommitsErrorsList:
      type: array
      items:
        $ref: '#/components/schemas/BatchGetCommitsError'
    CommitIdsInputList:
      type: array
      items:
        $ref: '#/components/schemas/ObjectId'
    CommitObjectsList:
      type: array
      items:
        $ref: '#/components/schemas/Commit'
    RepositoryMetadataList:
      type: array
      items:
        $ref: '#/components/schemas/RepositoryMetadata'
    RepositoryNotFoundList:
      type: array
      items:
        $ref: '#/components/schemas/RepositoryName'
    Mode:
      type: string
    BlobMetadata:
      type: object
      properties:
        blobId:
          $ref: '#/components/schemas/ObjectId'
          description: The full ID of the blob.
        path:
          $ref: '#/components/schemas/Path'
          description: 'The path to the blob and associated file name, if any.'
        mode:
          $ref: '#/components/schemas/Mode'
          description: '<p>The file mode permissions of the blob. File mode permission codes include:</p> <ul> <li> <p> <code>100644</code> indicates read/write</p> </li> <li> <p> <code>100755</code> indicates read/write/execute</p> </li> <li> <p> <code>160000</code> indicates a submodule</p> </li> <li> <p> <code>120000</code> indicates a symlink</p> </li> </ul>'
      description: Returns information about a specific Git blob object.
    BranchName:
      type: string
      minLength: 1
      maxLength: 256
    CommitId:
      type: string
    BranchInfo:
      type: object
      properties:
        branchName:
          $ref: '#/components/schemas/BranchName'
          description: The name of the branch.
        commitId:
          $ref: '#/components/schemas/CommitId'
          description: The ID of the last commit made to the branch.
      description: Returns information about a branch.
    BranchNameList:
      type: array
      items:
        $ref: '#/components/schemas/BranchName'
    ReactionValue:
      type: string
    CallerReactions:
      type: array
      items:
        $ref: '#/components/schemas/ReactionValue'
    CapitalBoolean:
      type: boolean
    ChangeTypeEnum:
      type: string
      enum:
        - A
        - M
        - D
    ClientRequestToken:
      type: string
    CloneUrlHttp:
      type: string
    CloneUrlSsh:
      type: string
    CommentId:
      type: string
    Content:
      type: string
    IsCommentDeleted:
      type: boolean
    ReactionCountsMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Count'
    Comment:
      type: object
      properties:
        commentId:
          $ref: '#/components/schemas/CommentId'
          description: The system-generated comment ID.
        content:
          $ref: '#/components/schemas/Content'
          description: The content of the comment.
        inReplyTo:
          $ref: '#/components/schemas/CommentId'
          description: 'The ID of the comment for which this comment is a reply, if any.'
        creationDate:
          $ref: '#/components/schemas/CreationDate'
          description: 'The date and time the comment was created, in timestamp format.'
        lastModifiedDate:
          $ref: '#/components/schemas/LastModifiedDate'
          description: 'The date and time the comment was most recently modified, in timestamp format.'
        authorArn:
          $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the person who posted the comment.
        deleted:
          $ref: '#/components/schemas/IsCommentDeleted'
          description: A Boolean value indicating whether the comment has been deleted.
        clientRequestToken:
          $ref: '#/components/schemas/ClientRequestToken'
          description: 'A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.'
        callerReactions:
          $ref: '#/components/schemas/CallerReactions'
          description: 'The emoji reactions to a comment, if any, submitted by the user whose credentials are associated with the call to the API.'
        reactionCounts:
          $ref: '#/components/schemas/ReactionCountsMap'
          description: A string to integer map that represents the number of individual users who have responded to a comment with the specified reactions.
      description: Returns information about a specific comment.
    Comments:
      type: array
      items:
        $ref: '#/components/schemas/Comment'
    Location:
      type: object
      properties:
        filePath:
          $ref: '#/components/schemas/Path'
          description: 'The name of the file being compared, including its extension and subdirectory, if any.'
        filePosition:
          $ref: '#/components/schemas/Position'
          description: 'The position of a change in a compared file, in line number format.'
        relativeFileVersion:
          $ref: '#/components/schemas/RelativeFileVersionEnum'
          description: 'In a comparison of commits or a pull request, whether the change is in the before or after of that comparison.'
      description: Returns information about the location of a change or comment in the comparison between two commits or a pull request.
    CommentsForComparedCommit:
      type: object
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that contains the compared commits.
        beforeCommitId:
          $ref: '#/components/schemas/CommitId'
          description: The full commit ID of the commit used to establish the before of the comparison.
        afterCommitId:
          $ref: '#/components/schemas/CommitId'
          description: The full commit ID of the commit used to establish the after of the comparison.
        beforeBlobId:
          $ref: '#/components/schemas/ObjectId'
          description: The full blob ID of the commit used to establish the before of the comparison.
        afterBlobId:
          $ref: '#/components/schemas/ObjectId'
          description: The full blob ID of the commit used to establish the after of the comparison.
        location:
          $ref: '#/components/schemas/Location'
          description: 'Location information about the comment on the comparison, including the file name, line number, and whether the version of the file where the comment was made is BEFORE or AFTER.'
        comments:
          $ref: '#/components/schemas/Comments'
          description: An array of comment objects. Each comment object contains information about a comment on the comparison between commits.
      description: Returns information about comments on the comparison between two commits.
    CommentsForComparedCommitData:
      type: array
      items:
        $ref: '#/components/schemas/CommentsForComparedCommit'
    PullRequestId:
      type: string
    CommentsForPullRequest:
      type: object
      properties:
        pullRequestId:
          $ref: '#/components/schemas/PullRequestId'
          description: The system-generated ID of the pull request.
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that contains the pull request.
        beforeCommitId:
          $ref: '#/components/schemas/CommitId'
          description: The full commit ID of the commit that was the tip of the destination branch when the pull request was created. This commit is superceded by the after commit in the source branch when and if you merge the source branch into the destination branch.
        afterCommitId:
          $ref: '#/components/schemas/CommitId'
          description: 'The full commit ID of the commit that was the tip of the source branch at the time the comment was made. '
        beforeBlobId:
          $ref: '#/components/schemas/ObjectId'
          description: The full blob ID of the file on which you want to comment on the destination commit.
        afterBlobId:
          $ref: '#/components/schemas/ObjectId'
          description: The full blob ID of the file on which you want to comment on the source commit.
        location:
          $ref: '#/components/schemas/Location'
          description: 'Location information about the comment on the pull request, including the file name, line number, and whether the version of the file where the comment was made is BEFORE (destination branch) or AFTER (source branch).'
        comments:
          $ref: '#/components/schemas/Comments'
          description: An array of comment objects. Each comment object contains information about a comment on the pull request.
      description: Returns information about comments on a pull request.
    CommentsForPullRequestData:
      type: array
      items:
        $ref: '#/components/schemas/CommentsForPullRequest'
    ParentList:
      type: array
      items:
        $ref: '#/components/schemas/ObjectId'
    UserInfo:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
          description: The name of the user who made the specified commit.
        email:
          $ref: '#/components/schemas/Email'
          description: 'The email address associated with the user who made the commit, if any.'
        date:
          $ref: '#/components/schemas/Date'
          description: 'The date when the specified commit was commited, in timestamp format with GMT offset.'
      description: Information about the user who made a specified commit.
    Commit:
      type: object
      properties:
        commitId:
          $ref: '#/components/schemas/ObjectId'
          description: 'The full SHA ID of the specified commit. '
        treeId:
          $ref: '#/components/schemas/ObjectId'
          description: Tree information for the specified commit.
        parents:
          $ref: '#/components/schemas/ParentList'
          description: A list of parent commits for the specified commit. Each parent commit ID is the full commit ID.
        message:
          $ref: '#/components/schemas/Message'
          description: The commit message associated with the specified commit.
        author:
          $ref: '#/components/schemas/UserInfo'
          description: 'Information about the author of the specified commit. Information includes the date in timestamp format with GMT offset, the name of the author, and the email address for the author, as configured in Git.'
        committer:
          $ref: '#/components/schemas/UserInfo'
          description: '<p>Information about the person who committed the specified commit, also known as the committer. Information includes the date in timestamp format with GMT offset, the name of the committer, and the email address for the committer, as configured in Git.</p> <p>For more information about the difference between an author and a committer in Git, see <a href="http://git-scm.com/book/ch2-3.html">Viewing the Commit History</a> in Pro Git by Scott Chacon and Ben Straub.</p>'
        additionalData:
          $ref: '#/components/schemas/AdditionalData'
          description: Any other data associated with the specified commit.
      description: Returns information about a specific commit.
    ConflictMetadata:
      type: object
      properties:
        filePath:
          $ref: '#/components/schemas/Path'
          description: The path of the file that contains conflicts.
        fileSizes:
          $ref: '#/components/schemas/FileSizes'
          description: 'The file sizes of the file in the source, destination, and base of the merge.'
        fileModes:
          $ref: '#/components/schemas/FileModes'
          description: 'The file modes of the file in the source, destination, and base of the merge.'
        objectTypes:
          $ref: '#/components/schemas/ObjectTypes'
          description: Information about any object type conflicts in a merge operation.
        numberOfConflicts:
          $ref: '#/components/schemas/NumberOfConflicts'
          description: 'The number of conflicts, including both hunk conflicts and metadata conflicts.'
        isBinaryFile:
          $ref: '#/components/schemas/IsBinaryFile'
          description: 'A boolean value (true or false) indicating whether the file is binary or textual in the source, destination, and base of the merge.'
        contentConflict:
          $ref: '#/components/schemas/IsContentConflict'
          description: A boolean value indicating whether there are conflicts in the content of a file.
        fileModeConflict:
          $ref: '#/components/schemas/IsFileModeConflict'
          description: A boolean value indicating whether there are conflicts in the file mode of a file.
        objectTypeConflict:
          $ref: '#/components/schemas/IsObjectTypeConflict'
          description: 'A boolean value (true or false) indicating whether there are conflicts between the branches in the object type of a file, folder, or submodule.'
        mergeOperations:
          $ref: '#/components/schemas/MergeOperations'
          description: 'Whether an add, modify, or delete operation caused the conflict between the source and destination of the merge.'
      description: Information about the metadata for a conflict in a merge operation.
    MergeHunks:
      type: array
      items:
        $ref: '#/components/schemas/MergeHunk'
    Conflict:
      type: object
      properties:
        conflictMetadata:
          $ref: '#/components/schemas/ConflictMetadata'
          description: Metadata about a conflict in a merge operation.
        mergeHunks:
          $ref: '#/components/schemas/MergeHunks'
          description: A list of hunks that contain the differences between files or lines causing the conflict.
      description: Information about conflicts in a merge operation.
    FileSizes:
      type: object
      properties:
        source:
          $ref: '#/components/schemas/FileSize'
          description: The size of a file in the source of a merge or pull request.
        destination:
          $ref: '#/components/schemas/FileSize'
          description: The size of a file in the destination of a merge or pull request.
        base:
          $ref: '#/components/schemas/FileSize'
          description: The size of a file in the base of a merge or pull request.
      description: Information about the size of files in a merge or pull request.
    FileModes:
      type: object
      properties:
        source:
          $ref: '#/components/schemas/FileModeTypeEnum'
          description: The file mode of a file in the source of a merge or pull request.
        destination:
          $ref: '#/components/schemas/FileModeTypeEnum'
          description: The file mode of a file in the destination of a merge or pull request.
        base:
          $ref: '#/components/schemas/FileModeTypeEnum'
          description: The file mode of a file in the base of a merge or pull request.
      description: Information about file modes in a merge or pull request.
    ObjectTypes:
      type: object
      properties:
        source:
          $ref: '#/components/schemas/ObjectTypeEnum'
          description: The type of the object in the source branch.
        destination:
          $ref: '#/components/schemas/ObjectTypeEnum'
          description: The type of the object in the destination branch.
        base:
          $ref: '#/components/schemas/ObjectTypeEnum'
          description: The type of the object in the base commit of the merge.
      description: Information about the type of an object in a merge operation.
    NumberOfConflicts:
      type: integer
    IsBinaryFile:
      type: object
      properties:
        source:
          $ref: '#/components/schemas/CapitalBoolean'
          description: The binary or non-binary status of file in the source of a merge or pull request.
        destination:
          $ref: '#/components/schemas/CapitalBoolean'
          description: The binary or non-binary status of a file in the destination of a merge or pull request.
        base:
          $ref: '#/components/schemas/CapitalBoolean'
          description: The binary or non-binary status of a file in the base of a merge or pull request.
      description: Information about whether a file is binary or textual in a merge or pull request operation.
    IsContentConflict:
      type: boolean
    IsFileModeConflict:
      type: boolean
    IsObjectTypeConflict:
      type: boolean
    MergeOperations:
      type: object
      properties:
        source:
          $ref: '#/components/schemas/ChangeTypeEnum'
          description: 'The operation (add, modify, or delete) on a file in the source of a merge or pull request.'
        destination:
          $ref: '#/components/schemas/ChangeTypeEnum'
          description: The operation on a file in the destination of a merge or pull request.
      description: Information about the file operation conflicts in a merge operation.
    ConflictMetadataList:
      type: array
      items:
        $ref: '#/components/schemas/ConflictMetadata'
    ReplaceContentEntries:
      type: array
      items:
        $ref: '#/components/schemas/ReplaceContentEntry'
    DeleteFileEntries:
      type: array
      items:
        $ref: '#/components/schemas/DeleteFileEntry'
    SetFileModeEntries:
      type: array
      items:
        $ref: '#/components/schemas/SetFileModeEntry'
    ConflictResolution:
      type: object
      properties:
        replaceContents:
          $ref: '#/components/schemas/ReplaceContentEntries'
          description: Files to have content replaced as part of the merge conflict resolution.
        deleteFiles:
          $ref: '#/components/schemas/DeleteFileEntries'
          description: Files to be deleted as part of the merge conflict resolution.
        setFileModes:
          $ref: '#/components/schemas/SetFileModeEntries'
          description: File modes that are set as part of the merge conflict resolution.
      description: 'If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge.'
    Count:
      type: integer
    Name:
      type: string
    Email:
      type: string
    KeepEmptyFolders:
      type: boolean
    PutFileEntries:
      type: array
      items:
        $ref: '#/components/schemas/PutFileEntry'
    FilesMetadata:
      type: array
      items:
        $ref: '#/components/schemas/FileMetadata'
    Title:
      type: string
      maxLength: 150
    Description:
      type: string
      maxLength: 10240
    TargetList:
      type: array
      items:
        $ref: '#/components/schemas/Target'
    PullRequest:
      type: object
      properties:
        pullRequestId:
          $ref: '#/components/schemas/PullRequestId'
          description: 'The system-generated ID of the pull request. '
        title:
          $ref: '#/components/schemas/Title'
          description: The user-defined title of the pull request. This title is displayed in the list of pull requests to other repository users.
        description:
          $ref: '#/components/schemas/Description'
          description: The user-defined description of the pull request. This description can be used to clarify what should be reviewed and other details of the request.
        lastActivityDate:
          $ref: '#/components/schemas/LastModifiedDate'
          description: 'The day and time of the last user or system activity on the pull request, in timestamp format.'
        creationDate:
          $ref: '#/components/schemas/CreationDate'
          description: 'The date and time the pull request was originally created, in timestamp format.'
        pullRequestStatus:
          $ref: '#/components/schemas/PullRequestStatusEnum'
          description: The status of the pull request. Pull request status can only change from <code>OPEN</code> to <code>CLOSED</code>.
        authorArn:
          $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the user who created the pull request.
        pullRequestTargets:
          $ref: '#/components/schemas/PullRequestTargetList'
          description: 'The targets of the pull request, including the source branch and destination branch for the pull request.'
        clientRequestToken:
          $ref: '#/components/schemas/ClientRequestToken'
          description: 'A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.'
        revisionId:
          $ref: '#/components/schemas/RevisionId'
          description: The system-generated revision ID for the pull request.
        approvalRules:
          $ref: '#/components/schemas/ApprovalRulesList'
          description: The approval rules applied to the pull request.
      description: Returns information about a pull request.
    RepositoryDescription:
      type: string
      maxLength: 1000
    TagsMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    RepositoryMetadata:
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
          description: The ID of the AWS account associated with the repository.
        repositoryId:
          $ref: '#/components/schemas/RepositoryId'
          description: The ID of the repository.
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The repository's name.
        repositoryDescription:
          $ref: '#/components/schemas/RepositoryDescription'
          description: A comment or description about the repository.
        defaultBranch:
          $ref: '#/components/schemas/BranchName'
          description: The repository's default branch name.
        lastModifiedDate:
          $ref: '#/components/schemas/LastModifiedDate'
          description: 'The date and time the repository was last modified, in timestamp format.'
        creationDate:
          $ref: '#/components/schemas/CreationDate'
          description: 'The date and time the repository was created, in timestamp format.'
        cloneUrlHttp:
          $ref: '#/components/schemas/CloneUrlHttp'
          description: The URL to use for cloning the repository over HTTPS.
        cloneUrlSsh:
          $ref: '#/components/schemas/CloneUrlSsh'
          description: The URL to use for cloning the repository over SSH.
        Arn:
          $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the repository.
      description: Information about a repository.
    Date:
      type: string
    DeleteFileEntry:
      type: object
      required:
        - filePath
      properties:
        filePath:
          $ref: '#/components/schemas/Path'
          description: 'The full path of the file to be deleted, including the name of the file.'
      description: A file that is deleted as part of a commit.
    RepositoryId:
      type: string
    PullRequestEventType:
      type: string
      enum:
        - PULL_REQUEST_CREATED
        - PULL_REQUEST_STATUS_CHANGED
        - PULL_REQUEST_SOURCE_REFERENCE_UPDATED
        - PULL_REQUEST_MERGE_STATE_CHANGED
        - PULL_REQUEST_APPROVAL_RULE_CREATED
        - PULL_REQUEST_APPROVAL_RULE_UPDATED
        - PULL_REQUEST_APPROVAL_RULE_DELETED
        - PULL_REQUEST_APPROVAL_RULE_OVERRIDDEN
        - PULL_REQUEST_APPROVAL_STATE_CHANGED
    PullRequestEventList:
      type: array
      items:
        $ref: '#/components/schemas/PullRequestEvent'
    Difference:
      type: object
      properties:
        beforeBlob:
          $ref: '#/components/schemas/BlobMetadata'
          description: 'Information about a <code>beforeBlob</code> data type object, including the ID, the file mode permission code, and the path.'
        afterBlob:
          $ref: '#/components/schemas/BlobMetadata'
          description: 'Information about an <code>afterBlob</code> data type object, including the ID, the file mode permission code, and the path.'
        changeType:
          $ref: '#/components/schemas/ChangeTypeEnum'
          description: 'Whether the change type of the difference is an addition (A), deletion (D), or modification (M).'
      description: Returns information about a set of differences for a commit specifier.
    DifferenceList:
      type: array
      items:
        $ref: '#/components/schemas/Difference'
    Evaluation:
      type: object
      properties:
        approved:
          $ref: '#/components/schemas/Approved'
          description: Whether the state of the pull request is approved.
        overridden:
          $ref: '#/components/schemas/Overridden'
          description: Whether the approval rule requirements for the pull request have been overridden and no longer need to be met.
        approvalRulesSatisfied:
          $ref: '#/components/schemas/ApprovalRulesSatisfiedList'
          description: The names of the approval rules that have had their conditions met.
        approvalRulesNotSatisfied:
          $ref: '#/components/schemas/ApprovalRulesNotSatisfiedList'
          description: The names of the approval rules that have not had their conditions met.
      description: Returns information about the approval rules applied to a pull request and whether conditions have been met.
    Overridden:
      type: boolean
    EventDate:
      type: string
      format: date-time
    FileModeTypeEnum:
      type: string
      enum:
        - EXECUTABLE
        - NORMAL
        - SYMLINK
    File:
      type: object
      properties:
        blobId:
          $ref: '#/components/schemas/ObjectId'
          description: The blob ID that contains the file information.
        absolutePath:
          $ref: '#/components/schemas/Path'
          description: The fully qualified path to the file in the repository.
        relativePath:
          $ref: '#/components/schemas/Path'
          description: The relative path of the file from the folder where the query originated.
        fileMode:
          $ref: '#/components/schemas/FileModeTypeEnum'
          description: The extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.
      description: Returns information about a file in a repository.
    FileContent:
      type: string
      maxLength: 6291456
    FileList:
      type: array
      items:
        $ref: '#/components/schemas/File'
    FileMetadata:
      type: object
      properties:
        absolutePath:
          $ref: '#/components/schemas/Path'
          description: 'The full path to the file to be added or updated, including the name of the file.'
        blobId:
          $ref: '#/components/schemas/ObjectId'
          description: The blob ID that contains the file information.
        fileMode:
          $ref: '#/components/schemas/FileModeTypeEnum'
          description: The extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.
      description: 'A file to be added, updated, or deleted as part of a commit.'
    FileSize:
      type: integer
    Folder:
      type: object
      properties:
        treeId:
          $ref: '#/components/schemas/ObjectId'
          description: The full SHA-1 pointer of the tree information for the commit that contains the folder.
        absolutePath:
          $ref: '#/components/schemas/Path'
          description: The fully qualified path of the folder in the repository.
        relativePath:
          $ref: '#/components/schemas/Path'
          description: The relative path of the specified folder from the folder where the query originated.
      description: Returns information about a folder in a repository.
    FolderList:
      type: array
      items:
        $ref: '#/components/schemas/Folder'
    blob:
      type: string
    ReactionsForCommentList:
      type: array
      items:
        $ref: '#/components/schemas/ReactionForComment'
    Limit:
      type: integer
    ObjectSize:
      type: integer
    SymbolicLinkList:
      type: array
      items:
        $ref: '#/components/schemas/SymbolicLink'
    SubModuleList:
      type: array
      items:
        $ref: '#/components/schemas/SubModule'
    IsMergeable:
      type: boolean
    MergeOptions:
      type: array
      items:
        $ref: '#/components/schemas/MergeOptionTypeEnum'
    RepositoryTriggersConfigurationId:
      type: string
    RepositoryTriggersList:
      type: array
      items:
        $ref: '#/components/schemas/RepositoryTrigger'
    HunkContent:
      type: string
    IsHunkConflict:
      type: boolean
    IsMerged:
      type: boolean
    IsMove:
      type: boolean
    LineNumber:
      type: integer
    PullRequestStatusEnum:
      type: string
      enum:
        - OPEN
        - CLOSED
    PullRequestIdList:
      type: array
      items:
        $ref: '#/components/schemas/PullRequestId'
    SortByEnum:
      type: string
      enum:
        - repositoryName
        - lastModifiedDate
    OrderEnum:
      type: string
      enum:
        - ascending
        - descending
    RepositoryNameIdPairList:
      type: array
      items:
        $ref: '#/components/schemas/RepositoryNameIdPair'
    ResourceArn:
      type: string
    Position:
      type: integer
    RelativeFileVersionEnum:
      type: string
      enum:
        - BEFORE
        - AFTER
    MergeHunkDetail:
      type: object
      properties:
        startLine:
          $ref: '#/components/schemas/LineNumber'
          description: The start position of the hunk in the merge result.
        endLine:
          $ref: '#/components/schemas/LineNumber'
          description: The end position of the hunk in the merge result.
        hunkContent:
          $ref: '#/components/schemas/HunkContent'
          description: The base-64 encoded content of the hunk merged region that might contain a conflict.
      description: Information about the details of a merge hunk that contains a conflict in a merge or pull request operation.
    MergeHunk:
      type: object
      properties:
        isConflict:
          $ref: '#/components/schemas/IsHunkConflict'
          description: 'A Boolean value indicating whether a combination of hunks contains a conflict. Conflicts occur when the same file or the same lines in a file were modified in both the source and destination of a merge or pull request. Valid values include true, false, and null. True when the hunk represents a conflict and one or more files contains a line conflict. File mode conflicts in a merge do not set this to true.'
        source:
          $ref: '#/components/schemas/MergeHunkDetail'
          description: Information about the merge hunk in the source of a merge or pull request.
        destination:
          $ref: '#/components/schemas/MergeHunkDetail'
          description: Information about the merge hunk in the destination of a merge or pull request.
        base:
          $ref: '#/components/schemas/MergeHunkDetail'
          description: Information about the merge hunk in the base of a merge or pull request.
      description: Information about merge hunks in a merge or pull request operation.
    MergeMetadata:
      type: object
      properties:
        isMerged:
          $ref: '#/components/schemas/IsMerged'
          description: A Boolean value indicating whether the merge has been made.
        mergedBy:
          $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the user who merged the branches.
        mergeCommitId:
          $ref: '#/components/schemas/CommitId'
          description: 'The commit ID for the merge commit, if any.'
        mergeOption:
          $ref: '#/components/schemas/MergeOptionTypeEnum'
          description: The merge strategy used in the merge.
      description: Returns information about a merge or potential merge between a source reference and a destination reference in a pull request.
    ObjectTypeEnum:
      type: string
      enum:
        - FILE
        - DIRECTORY
        - GIT_LINK
        - SYMBOLIC_LINK
    PullRequestTargetList:
      type: array
      items:
        $ref: '#/components/schemas/PullRequestTarget'
    PullRequestCreatedEventMetadata:
      type: object
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository where the pull request was created.
        sourceCommitId:
          $ref: '#/components/schemas/CommitId'
          description: The commit ID on the source branch used when the pull request was created.
        destinationCommitId:
          $ref: '#/components/schemas/CommitId'
          description: The commit ID of the tip of the branch specified as the destination branch when the pull request was created.
        mergeBase:
          $ref: '#/components/schemas/CommitId'
          description: The commit ID of the most recent commit that the source branch and the destination branch have in common.
      description: Metadata about the pull request that is used when comparing the pull request source with its destination.
    PullRequestStatusChangedEventMetadata:
      type: object
      properties:
        pullRequestStatus:
          $ref: '#/components/schemas/PullRequestStatusEnum'
          description: The changed status of the pull request.
      description: Information about a change to the status of a pull request.
    PullRequestSourceReferenceUpdatedEventMetadata:
      type: object
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository where the pull request was updated.
        beforeCommitId:
          $ref: '#/components/schemas/CommitId'
          description: The full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was updated.
        afterCommitId:
          $ref: '#/components/schemas/CommitId'
          description: The full commit ID of the commit in the source branch that was the tip of the branch at the time the pull request was updated.
        mergeBase:
          $ref: '#/components/schemas/CommitId'
          description: The commit ID of the most recent commit that the source branch and the destination branch have in common.
      description: Information about an update to the source branch of a pull request.
    PullRequestMergedStateChangedEventMetadata:
      type: object
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository where the pull request was created.
        destinationReference:
          $ref: '#/components/schemas/ReferenceName'
          description: The name of the branch that the pull request is merged into.
        mergeMetadata:
          $ref: '#/components/schemas/MergeMetadata'
          description: Information about the merge state change event.
      description: 'Returns information about the change in the merge state for a pull request event. '
    PullRequestEvent:
      type: object
      properties:
        pullRequestId:
          $ref: '#/components/schemas/PullRequestId'
          description: The system-generated ID of the pull request.
        eventDate:
          $ref: '#/components/schemas/EventDate'
          description: 'The day and time of the pull request event, in timestamp format.'
        pullRequestEventType:
          $ref: '#/components/schemas/PullRequestEventType'
          description: 'The type of the pull request event (for example, a status change event (PULL_REQUEST_STATUS_CHANGED) or update event (PULL_REQUEST_SOURCE_REFERENCE_UPDATED)).'
        actorArn:
          $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the user whose actions resulted in the event. Examples include updating the pull request with more commits or changing the status of a pull request.
        pullRequestCreatedEventMetadata:
          $ref: '#/components/schemas/PullRequestCreatedEventMetadata'
          description: Information about the source and destination branches for the pull request.
        pullRequestStatusChangedEventMetadata:
          $ref: '#/components/schemas/PullRequestStatusChangedEventMetadata'
          description: Information about the change in status for the pull request event.
        pullRequestSourceReferenceUpdatedEventMetadata:
          $ref: '#/components/schemas/PullRequestSourceReferenceUpdatedEventMetadata'
          description: 'Information about the updated source branch for the pull request event. '
        pullRequestMergedStateChangedEventMetadata:
          $ref: '#/components/schemas/PullRequestMergedStateChangedEventMetadata'
          description: Information about the change in mergability state for the pull request event.
        approvalRuleEventMetadata:
          $ref: '#/components/schemas/ApprovalRuleEventMetadata'
          description: Information about a pull request event.
        approvalStateChangedEventMetadata:
          $ref: '#/components/schemas/ApprovalStateChangedEventMetadata'
          description: Information about an approval state change for a pull request.
        approvalRuleOverriddenEventMetadata:
          $ref: '#/components/schemas/ApprovalRuleOverriddenEventMetadata'
          description: Information about an approval rule override event for a pull request.
      description: Returns information about a pull request event.
    ReferenceName:
      type: string
    PullRequestTarget:
      type: object
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that contains the pull request source and destination branches.
        sourceReference:
          $ref: '#/components/schemas/ReferenceName'
          description: The branch of the repository that contains the changes for the pull request. Also known as the source branch.
        destinationReference:
          $ref: '#/components/schemas/ReferenceName'
          description: 'The branch of the repository where the pull request changes are merged. Also known as the destination branch. '
        destinationCommit:
          $ref: '#/components/schemas/CommitId'
          description: The full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged.
        sourceCommit:
          $ref: '#/components/schemas/CommitId'
          description: 'The full commit ID of the tip of the source branch used to create the pull request. If the pull request branch is updated by a push while the pull request is open, the commit ID changes to reflect the new tip of the branch.'
        mergeBase:
          $ref: '#/components/schemas/CommitId'
          description: The commit ID of the most recent commit that the source branch and the destination branch have in common.
        mergeMetadata:
          $ref: '#/components/schemas/MergeMetadata'
          description: 'Returns metadata about the state of the merge, including whether the merge has been made.'
      description: Returns information about a pull request target.
    PutFileEntry:
      type: object
      required:
        - filePath
      properties:
        filePath:
          $ref: '#/components/schemas/Path'
          description: 'The full path to the file in the repository, including the name of the file.'
        fileMode:
          $ref: '#/components/schemas/FileModeTypeEnum'
          description: The extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.
        fileContent:
          $ref: '#/components/schemas/FileContent'
          description: 'The content of the file, if a source file is not specified.'
        sourceFile:
          $ref: '#/components/schemas/SourceFileSpecifier'
          description: 'The name and full path of the file that contains the changes you want to make as part of the commit, if you are not providing the file content directly.'
      description: Information about a file added or updated as part of a commit.
    SourceFileSpecifier:
      type: object
      required:
        - filePath
      properties:
        filePath:
          $ref: '#/components/schemas/Path'
          description: 'The full path to the file, including the name of the file.'
        isMove:
          $ref: '#/components/schemas/IsMove'
          description: Whether to remove the source file from the parent commit.
      description: Information about a source file that is part of changes made in a commit.
    ReactionEmoji:
      type: string
    ReactionValueFormats:
      type: object
      properties:
        emoji:
          $ref: '#/components/schemas/ReactionEmoji'
          description: The Emoji Version 1.0 graphic of the reaction. These graphics are interpreted slightly differently on different operating systems.
        shortCode:
          $ref: '#/components/schemas/ReactionShortCode'
          description: 'The emoji short code for the reaction. Short codes are interpreted slightly differently on different operating systems. '
        unicode:
          $ref: '#/components/schemas/ReactionUnicode'
          description: The Unicode codepoint for the reaction.
      description: Information about the values for reactions to a comment. AWS CodeCommit supports a limited set of reactions.
    ReactionUsersList:
      type: array
      items:
        $ref: '#/components/schemas/Arn'
    ReactionForComment:
      type: object
      properties:
        reaction:
          $ref: '#/components/schemas/ReactionValueFormats'
          description: The reaction for a specified comment.
        reactionUsers:
          $ref: '#/components/schemas/ReactionUsersList'
          description: The Amazon Resource Names (ARNs) of users who have provided reactions to the comment.
        reactionsFromDeletedUsersCount:
          $ref: '#/components/schemas/Count'
          description: 'A numerical count of users who reacted with the specified emoji whose identities have been subsequently deleted from IAM. While these IAM users or roles no longer exist, the reactions might still appear in total reaction counts.'
      description: Information about the reaction values provided by users on a comment.
    ReactionShortCode:
      type: string
    ReactionUnicode:
      type: string
    ReplaceContentEntry:
      type: object
      required:
        - filePath
        - replacementType
      properties:
        filePath:
          $ref: '#/components/schemas/Path'
          description: The path of the conflicting file.
        replacementType:
          $ref: '#/components/schemas/ReplacementTypeEnum'
          description: The replacement type to use when determining how to resolve the conflict.
        content:
          $ref: '#/components/schemas/FileContent'
          description: The base-64 encoded content to use when the replacement type is USE_NEW_CONTENT.
        fileMode:
          $ref: '#/components/schemas/FileModeTypeEnum'
          description: The file mode to apply during conflict resoltion.
      description: Information about a replacement content entry in the conflict of a merge or pull request operation.
    ReplacementTypeEnum:
      type: string
      enum:
        - KEEP_BASE
        - KEEP_SOURCE
        - KEEP_DESTINATION
        - USE_NEW_CONTENT
    RepositoryNameIdPair:
      type: object
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name associated with the repository.
        repositoryId:
          $ref: '#/components/schemas/RepositoryId'
          description: The ID associated with the repository.
      description: Information about a repository name and ID.
    RepositoryTriggerName:
      type: string
    RepositoryTriggerCustomData:
      type: string
    RepositoryTriggerEventList:
      type: array
      items:
        $ref: '#/components/schemas/RepositoryTriggerEventEnum'
    RepositoryTrigger:
      type: object
      required:
        - name
        - destinationArn
        - events
      properties:
        name:
          $ref: '#/components/schemas/RepositoryTriggerName'
          description: The name of the trigger.
        destinationArn:
          $ref: '#/components/schemas/Arn'
          description: 'The ARN of the resource that is the target for a trigger (for example, the ARN of a topic in Amazon SNS).'
        customData:
          $ref: '#/components/schemas/RepositoryTriggerCustomData'
          description: Any custom data associated with the trigger to be included in the information sent to the target of the trigger.
        branches:
          $ref: '#/components/schemas/BranchNameList'
          description: '<p>The branches to be included in the trigger configuration. If you specify an empty array, the trigger applies to all branches.</p> <note> <p>Although no content is required in the array, you must include the array itself.</p> </note>'
        events:
          $ref: '#/components/schemas/RepositoryTriggerEventList'
          description: '<p>The repository events that cause the trigger to run actions in another service, such as sending a notification through Amazon SNS. </p> <note> <p>The valid value "all" cannot be used with any other values.</p> </note>'
      description: Information about a trigger for a repository.
    RepositoryTriggerEventEnum:
      type: string
      enum:
        - all
        - updateReference
        - createReference
        - deleteReference
    RepositoryTriggerExecutionFailureMessage:
      type: string
    RepositoryTriggerExecutionFailure:
      type: object
      properties:
        trigger:
          $ref: '#/components/schemas/RepositoryTriggerName'
          description: The name of the trigger that did not run.
        failureMessage:
          $ref: '#/components/schemas/RepositoryTriggerExecutionFailureMessage'
          description: Message information about the trigger that did not run.
      description: A trigger failed to run.
    RepositoryTriggerExecutionFailureList:
      type: array
      items:
        $ref: '#/components/schemas/RepositoryTriggerExecutionFailure'
    RepositoryTriggerNameList:
      type: array
      items:
        $ref: '#/components/schemas/RepositoryTriggerName'
    SetFileModeEntry:
      type: object
      required:
        - filePath
        - fileMode
      properties:
        filePath:
          $ref: '#/components/schemas/Path'
          description: 'The full path to the file, including the name of the file.'
        fileMode:
          $ref: '#/components/schemas/FileModeTypeEnum'
          description: The file mode for the file.
      description: Information about the file mode changes.
    SubModule:
      type: object
      properties:
        commitId:
          $ref: '#/components/schemas/ObjectId'
          description: The commit ID that contains the reference to the submodule.
        absolutePath:
          $ref: '#/components/schemas/Path'
          description: The fully qualified path to the folder that contains the reference to the submodule.
        relativePath:
          $ref: '#/components/schemas/Path'
          description: The relative path of the submodule from the folder where the query originated.
      description: Returns information about a submodule reference in a repository folder.
    SymbolicLink:
      type: object
      properties:
        blobId:
          $ref: '#/components/schemas/ObjectId'
          description: The blob ID that contains the information about the symbolic link.
        absolutePath:
          $ref: '#/components/schemas/Path'
          description: The fully qualified path to the folder that contains the symbolic link.
        relativePath:
          $ref: '#/components/schemas/Path'
          description: The relative path of the symbolic link from the folder where the query originated.
        fileMode:
          $ref: '#/components/schemas/FileModeTypeEnum'
          description: The file mode permissions of the blob that cotains information about the symbolic link.
      description: Returns information about a symbolic link in a repository folder.
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    TagKeysList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    Target:
      type: object
      required:
        - repositoryName
        - sourceReference
      properties:
        repositoryName:
          $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that contains the pull request.
        sourceReference:
          $ref: '#/components/schemas/ReferenceName'
          description: The branch of the repository that contains the changes for the pull request. Also known as the source branch.
        destinationReference:
          $ref: '#/components/schemas/ReferenceName'
          description: The branch of the repository where the pull request changes are merged. Also known as the destination branch.
      description: Returns information about a target for a pull request.
security:
  - hmac: []

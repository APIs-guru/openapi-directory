openapi: 3.0.0
info:
  version: '2014-06-30'
  x-release: v4
  title: Amazon Cognito Identity
  description: '<fullname>Amazon Cognito Federated Identities</fullname> <p>Amazon Cognito Federated Identities is a web service that delivers scoped temporary credentials to mobile devices and other untrusted environments. It uniquely identifies a device and supplies the user with a consistent identity over the lifetime of an application.</p> <p>Using Amazon Cognito Federated Identities, you can enable authentication with one or more third-party identity providers (Facebook, Google, or Login with Amazon) or an Amazon Cognito user pool, and you can also choose to support unauthenticated access from your app. Cognito delivers a unique identifier for each user and acts as an OpenID token provider trusted by AWS Security Token Service (STS) to access temporary, limited-privilege AWS credentials.</p> <p>For a description of the authentication flow from the Amazon Cognito Developer Guide see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html">Authentication Flow</a>.</p> <p>For more information see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html">Amazon Cognito Federated Identities</a>.</p>'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: cognito-identity
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/cognito-identity-2014-06-30.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/cognito-identity/'
servers:
  - url: 'http://cognito-identity.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Amazon Cognito Identity multi-region endpoint
  - url: 'https://cognito-identity.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Amazon Cognito Identity multi-region endpoint
  - url: 'http://cognito-identity.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon Cognito Identity endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://cognito-identity.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon Cognito Identity endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  /#X-Amz-Target=AWSCognitoIdentityService.CreateIdentityPool:
    post:
      operationId: CreateIdentityPool
      description: '<p>Creates a new identity pool. The identity pool is a store of user identity information that is specific to your AWS account. The keys for <code>SupportedLoginProviders</code> are as follows:</p> <ul> <li> <p>Facebook: <code>graph.facebook.com</code> </p> </li> <li> <p>Google: <code>accounts.google.com</code> </p> </li> <li> <p>Amazon: <code>www.amazon.com</code> </p> </li> <li> <p>Twitter: <code>api.twitter.com</code> </p> </li> <li> <p>Digits: <code>www.digits.com</code> </p> </li> </ul> <p>You must use AWS Developer credentials to call this API.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityPool'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '482':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '485':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIdentityPoolInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.CreateIdentityPool
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityService.DeleteIdentities:
    post:
      operationId: DeleteIdentities
      description: <p>Deletes identities from an identity pool. You can specify a list of 1-60 identities that you want to delete.</p> <p>You must use AWS Developer credentials to call this API.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteIdentitiesResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteIdentitiesInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.DeleteIdentities
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityService.DeleteIdentityPool:
    post:
      operationId: DeleteIdentityPool
      description: '<p>Deletes an identity pool. Once a pool is deleted, users will not be able to authenticate with the pool.</p> <p>You must use AWS Developer credentials to call this API.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteIdentityPoolInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.DeleteIdentityPool
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityService.DescribeIdentity:
    post:
      operationId: DescribeIdentity
      description: '<p>Returns metadata related to the given identity, including when the identity was created and any associated linked logins.</p> <p>You must use AWS Developer credentials to call this API.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityDescription'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeIdentityInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.DescribeIdentity
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityService.DescribeIdentityPool:
    post:
      operationId: DescribeIdentityPool
      description: '<p>Gets details about a particular identity pool, including the pool name, ID description, creation date, and current number of users.</p> <p>You must use AWS Developer credentials to call this API.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityPool'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeIdentityPoolInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.DescribeIdentityPool
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityService.GetCredentialsForIdentity:
    post:
      operationId: GetCredentialsForIdentity
      description: '<p>Returns credentials for the provided identity ID. Any provided logins will be validated against supported login providers. If the token is for cognito-identity.amazonaws.com, it will be passed through to AWS Security Token Service with the appropriate role for the token.</p> <p>This is a public API. You do not need any credentials to call this API.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCredentialsForIdentityResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: InvalidIdentityPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidIdentityPoolConfigurationException'
        '486':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '487':
          description: ExternalServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalServiceException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCredentialsForIdentityInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.GetCredentialsForIdentity
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityService.GetId:
    post:
      operationId: GetId
      description: <p>Generates (or retrieves) a Cognito ID. Supplying multiple logins will create an implicit linked account.</p> <p>This is a public API. You do not need any credentials to call this API.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIdResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '486':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '487':
          description: ExternalServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalServiceException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIdInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.GetId
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityService.GetIdentityPoolRoles:
    post:
      operationId: GetIdentityPoolRoles
      description: <p>Gets the roles for an identity pool.</p> <p>You must use AWS Developer credentials to call this API.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIdentityPoolRolesResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIdentityPoolRolesInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.GetIdentityPoolRoles
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityService.GetOpenIdToken:
    post:
      operationId: GetOpenIdToken
      description: '<p>Gets an OpenID token, using a known Cognito ID. This known Cognito ID is returned by <a>GetId</a>. You can optionally add additional logins for the identity. Supplying multiple logins creates an implicit link.</p> <p>The OpenID token is valid for 10 minutes.</p> <p>This is a public API. You do not need any credentials to call this API.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOpenIdTokenResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '486':
          description: ExternalServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalServiceException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetOpenIdTokenInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.GetOpenIdToken
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityService.GetOpenIdTokenForDeveloperIdentity:
    post:
      operationId: GetOpenIdTokenForDeveloperIdentity
      description: '<p>Registers (or retrieves) a Cognito <code>IdentityId</code> and an OpenID Connect token for a user authenticated by your backend authentication process. Supplying multiple logins will create an implicit linked account. You can only specify one developer provider as part of the <code>Logins</code> map, which is linked to the identity pool. The developer provider is the "domain" by which Cognito will refer to your users.</p> <p>You can use <code>GetOpenIdTokenForDeveloperIdentity</code> to create a new identity and to link new logins (that is, user credentials issued by a public provider or developer provider) to an existing identity. When you want to create a new identity, the <code>IdentityId</code> should be null. When you want to associate a new login with an existing authenticated/unauthenticated identity, you can do so by providing the existing <code>IdentityId</code>. This API will create the identity in the specified <code>IdentityPoolId</code>.</p> <p>You must use AWS Developer credentials to call this API.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOpenIdTokenForDeveloperIdentityResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '486':
          description: DeveloperUserAlreadyRegisteredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeveloperUserAlreadyRegisteredException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetOpenIdTokenForDeveloperIdentityInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.GetOpenIdTokenForDeveloperIdentity
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityService.GetPrincipalTagAttributeMap:
    post:
      operationId: GetPrincipalTagAttributeMap
      description: Use <code>GetPrincipalTagAttributeMap</code> to list all mappings between <code>PrincipalTags</code> and user attributes.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPrincipalTagAttributeMapResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPrincipalTagAttributeMapInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.GetPrincipalTagAttributeMap
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityService.ListIdentities:
    post:
      operationId: ListIdentities
      description: <p>Lists the identities in an identity pool.</p> <p>You must use AWS Developer credentials to call this API.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIdentitiesResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListIdentitiesInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.ListIdentities
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityService.ListIdentityPools:
    post:
      operationId: ListIdentityPools
      description: <p>Lists all of the Cognito identity pools registered for your account.</p> <p>You must use AWS Developer credentials to call this API.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIdentityPoolsResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListIdentityPoolsInput'
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.ListIdentityPools
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityService.ListTagsForResource:
    post:
      operationId: ListTagsForResource
      description: '<p>Lists the tags that are assigned to an Amazon Cognito identity pool.</p> <p>A tag is a label that you can apply to identity pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria.</p> <p>You can use this action up to 10 times per second, per account.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTagsForResourceInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.ListTagsForResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityService.LookupDeveloperIdentity:
    post:
      operationId: LookupDeveloperIdentity
      description: '<p>Retrieves the <code>IdentityID</code> associated with a <code>DeveloperUserIdentifier</code> or the list of <code>DeveloperUserIdentifier</code> values associated with an <code>IdentityId</code> for an existing identity. Either <code>IdentityID</code> or <code>DeveloperUserIdentifier</code> must not be null. If you supply only one of these values, the other value will be searched in the database and returned as a part of the response. If you supply both, <code>DeveloperUserIdentifier</code> will be matched against <code>IdentityID</code>. If the values are verified against the database, the response returns both values and is the same as the request. Otherwise a <code>ResourceConflictException</code> is thrown.</p> <p> <code>LookupDeveloperIdentity</code> is intended for low-throughput control plane operations: for example, to enable customer service to locate an identity ID by username. If you are using it for higher-volume operations such as user authentication, your requests are likely to be throttled. <a>GetOpenIdTokenForDeveloperIdentity</a> is a better option for higher-volume operations for user authentication.</p> <p>You must use AWS Developer credentials to call this API.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupDeveloperIdentityResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupDeveloperIdentityInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.LookupDeveloperIdentity
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityService.MergeDeveloperIdentities:
    post:
      operationId: MergeDeveloperIdentities
      description: '<p>Merges two users having different <code>IdentityId</code>s, existing in the same identity pool, and identified by the same developer provider. You can use this action to request that discrete users be merged and identified as a single user in the Cognito environment. Cognito associates the given source user (<code>SourceUserIdentifier</code>) with the <code>IdentityId</code> of the <code>DestinationUserIdentifier</code>. Only developer-authenticated users can be merged. If the users to be merged are associated with the same public provider, but as two different users, an exception will be thrown.</p> <p>The number of linked logins is limited to 20. So, the number of linked logins for the source user, <code>SourceUserIdentifier</code>, and the destination user, <code>DestinationUserIdentifier</code>, together should not be larger than 20. Otherwise, an exception will be thrown.</p> <p>You must use AWS Developer credentials to call this API.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeDeveloperIdentitiesResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergeDeveloperIdentitiesInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.MergeDeveloperIdentities
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityService.SetIdentityPoolRoles:
    post:
      operationId: SetIdentityPoolRoles
      description: <p>Sets the roles for an identity pool. These roles are used when making calls to <a>GetCredentialsForIdentity</a> action.</p> <p>You must use AWS Developer credentials to call this API.</p>
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '486':
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIdentityPoolRolesInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.SetIdentityPoolRoles
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityService.SetPrincipalTagAttributeMap:
    post:
      operationId: SetPrincipalTagAttributeMap
      description: You can use this operation to use default (username and clientID) attribute or custom attribute mappings.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetPrincipalTagAttributeMapResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPrincipalTagAttributeMapInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.SetPrincipalTagAttributeMap
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityService.TagResource:
    post:
      operationId: TagResource
      description: '<p>Assigns a set of tags to the specified Amazon Cognito identity pool. A tag is a label that you can use to categorize and manage identity pools in different ways, such as by purpose, owner, environment, or other criteria.</p> <p>Each tag consists of a key and value, both of which you define. A key is a general category for more specific values. For example, if you have two versions of an identity pool, one for testing and another for production, you might assign an <code>Environment</code> tag key to both identity pools. The value of this key might be <code>Test</code> for one identity pool and <code>Production</code> for the other.</p> <p>Tags are useful for cost tracking and access control. You can activate your tags so that they appear on the Billing and Cost Management console, where you can track the costs associated with your identity pools. In an IAM policy, you can constrain permissions for identity pools based on specific tags or tag values.</p> <p>You can use this action up to 5 times per second, per account. An identity pool can have as many as 50 tags.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResourceInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.TagResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityService.UnlinkDeveloperIdentity:
    post:
      operationId: UnlinkDeveloperIdentity
      description: '<p>Unlinks a <code>DeveloperUserIdentifier</code> from an existing identity. Unlinked developer users will be considered new identities next time they are seen. If, for a given Cognito identity, you remove all federated identities as well as the developer user identifier, the Cognito identity becomes inaccessible.</p> <p>You must use AWS Developer credentials to call this API.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlinkDeveloperIdentityInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.UnlinkDeveloperIdentity
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityService.UnlinkIdentity:
    post:
      operationId: UnlinkIdentity
      description: <p>Unlinks a federated identity from an existing account. Unlinked logins will be considered new identities next time they are seen. Removing the last linked login will make this identity inaccessible.</p> <p>This is a public API. You do not need any credentials to call this API.</p>
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '486':
          description: ExternalServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalServiceException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlinkIdentityInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.UnlinkIdentity
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityService.UntagResource:
    post:
      operationId: UntagResource
      description: 'Removes the specified tags from the specified Amazon Cognito identity pool. You can use this action up to 5 times per second, per account'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UntagResourceInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.UntagResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityService.UpdateIdentityPool:
    post:
      operationId: UpdateIdentityPool
      description: <p>Updates an identity pool.</p> <p>You must use AWS Developer credentials to call this API.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityPool'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '486':
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '487':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityPool'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.UpdateIdentityPool
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    IdentityPool:
      type: object
      required:
        - IdentityPoolId
        - IdentityPoolName
        - AllowUnauthenticatedIdentities
      title: IdentityPool
      properties:
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
          description: 'An identity pool ID in the format REGION:GUID.'
        IdentityPoolName:
          $ref: '#/components/schemas/IdentityPoolName'
          description: A string that you provide.
        AllowUnauthenticatedIdentities:
          $ref: '#/components/schemas/IdentityPoolUnauthenticated'
          description: TRUE if the identity pool supports unauthenticated logins.
        AllowClassicFlow:
          $ref: '#/components/schemas/ClassicFlow'
          description: 'Enables or disables the Basic (Classic) authentication flow. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html">Identity Pools (Federated Identities) Authentication Flow</a> in the <i>Amazon Cognito Developer Guide</i>.'
        SupportedLoginProviders:
          $ref: '#/components/schemas/IdentityProviders'
          description: 'Optional key:value pairs mapping provider names to provider app IDs.'
        DeveloperProviderName:
          $ref: '#/components/schemas/DeveloperProviderName'
          description: The "domain" by which Cognito will refer to your users.
        OpenIdConnectProviderARNs:
          $ref: '#/components/schemas/OIDCProviderList'
          description: The ARNs of the OpenID Connect providers.
        CognitoIdentityProviders:
          $ref: '#/components/schemas/CognitoIdentityProviderList'
          description: A list representing an Amazon Cognito user pool and its client ID.
        SamlProviderARNs:
          $ref: '#/components/schemas/SAMLProviderList'
          description: An array of Amazon Resource Names (ARNs) of the SAML provider for your identity pool.
        IdentityPoolTags:
          $ref: '#/components/schemas/IdentityPoolTagsType'
          description: 'The tags that are assigned to the identity pool. A tag is a label that you can apply to identity pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria.'
      description: An object representing an Amazon Cognito identity pool.
    CreateIdentityPoolInput:
      type: object
      required:
        - IdentityPoolName
        - AllowUnauthenticatedIdentities
      title: CreateIdentityPoolInput
      properties:
        IdentityPoolName:
          $ref: '#/components/schemas/IdentityPoolName'
          description: A string that you provide.
        AllowUnauthenticatedIdentities:
          $ref: '#/components/schemas/IdentityPoolUnauthenticated'
          description: TRUE if the identity pool supports unauthenticated logins.
        AllowClassicFlow:
          $ref: '#/components/schemas/ClassicFlow'
          description: 'Enables or disables the Basic (Classic) authentication flow. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html">Identity Pools (Federated Identities) Authentication Flow</a> in the <i>Amazon Cognito Developer Guide</i>.'
        SupportedLoginProviders:
          $ref: '#/components/schemas/IdentityProviders'
          description: 'Optional key:value pairs mapping provider names to provider app IDs.'
        DeveloperProviderName:
          $ref: '#/components/schemas/DeveloperProviderName'
          description: '<p>The "domain" by which Cognito will refer to your users. This name acts as a placeholder that allows your backend and the Cognito service to communicate about the developer provider. For the <code>DeveloperProviderName</code>, you can use letters as well as period (<code>.</code>), underscore (<code>_</code>), and dash (<code>-</code>).</p> <p>Once you have set a developer provider name, you cannot change it. Please take care in setting this parameter.</p>'
        OpenIdConnectProviderARNs:
          $ref: '#/components/schemas/OIDCProviderList'
          description: The Amazon Resource Names (ARN) of the OpenID Connect providers.
        CognitoIdentityProviders:
          $ref: '#/components/schemas/CognitoIdentityProviderList'
          description: An array of Amazon Cognito user pools and their client IDs.
        SamlProviderARNs:
          $ref: '#/components/schemas/SAMLProviderList'
          description: An array of Amazon Resource Names (ARNs) of the SAML provider for your identity pool.
        IdentityPoolTags:
          $ref: '#/components/schemas/IdentityPoolTagsType'
          description: 'Tags to assign to the identity pool. A tag is a label that you can apply to identity pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria.'
      description: Input to the CreateIdentityPool action.
    InvalidParameterException: {}
    NotAuthorizedException: {}
    ResourceConflictException: {}
    TooManyRequestsException: {}
    InternalErrorException: {}
    LimitExceededException: {}
    DeleteIdentitiesResponse:
      type: object
      properties:
        UnprocessedIdentityIds:
          $ref: '#/components/schemas/UnprocessedIdentityIdList'
          description: 'An array of UnprocessedIdentityId objects, each of which contains an ErrorCode and IdentityId.'
      description: Returned in response to a successful <code>DeleteIdentities</code> operation.
    DeleteIdentitiesInput:
      type: object
      required:
        - IdentityIdsToDelete
      title: DeleteIdentitiesInput
      properties:
        IdentityIdsToDelete:
          $ref: '#/components/schemas/IdentityIdList'
          description: A list of 1-60 identities that you want to delete.
      description: Input to the <code>DeleteIdentities</code> action.
    DeleteIdentityPoolInput:
      type: object
      required:
        - IdentityPoolId
      title: DeleteIdentityPoolInput
      properties:
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
          description: 'An identity pool ID in the format REGION:GUID.'
      description: Input to the DeleteIdentityPool action.
    ResourceNotFoundException: {}
    IdentityDescription:
      type: object
      properties:
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
          description: 'A unique identifier in the format REGION:GUID.'
        Logins:
          $ref: '#/components/schemas/LoginsList'
          description: The provider names.
        CreationDate:
          $ref: '#/components/schemas/DateType'
          description: Date on which the identity was created.
        LastModifiedDate:
          $ref: '#/components/schemas/DateType'
          description: Date on which the identity was last modified.
      description: A description of the identity.
    DescribeIdentityInput:
      type: object
      required:
        - IdentityId
      title: DescribeIdentityInput
      properties:
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
          description: 'A unique identifier in the format REGION:GUID.'
      description: Input to the <code>DescribeIdentity</code> action.
    DescribeIdentityPoolInput:
      type: object
      required:
        - IdentityPoolId
      title: DescribeIdentityPoolInput
      properties:
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
          description: 'An identity pool ID in the format REGION:GUID.'
      description: Input to the DescribeIdentityPool action.
    GetCredentialsForIdentityResponse:
      type: object
      properties:
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
          description: 'A unique identifier in the format REGION:GUID.'
        Credentials:
          $ref: '#/components/schemas/Credentials'
          description: Credentials for the provided identity ID.
      description: Returned in response to a successful <code>GetCredentialsForIdentity</code> operation.
    GetCredentialsForIdentityInput:
      type: object
      required:
        - IdentityId
      title: GetCredentialsForIdentityInput
      properties:
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
          description: 'A unique identifier in the format REGION:GUID.'
        Logins:
          $ref: '#/components/schemas/LoginsMap'
          description: '<p>A set of optional name-value pairs that map provider names to provider tokens. The name-value pair will follow the syntax "provider_name": "provider_user_identifier".</p> <p>Logins should not be specified when trying to get credentials for an unauthenticated identity.</p> <p>The Logins parameter is required when using identities associated with external identity providers such as Facebook. For examples of <code>Logins</code> maps, see the code examples in the <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/external-identity-providers.html">External Identity Providers</a> section of the Amazon Cognito Developer Guide.</p>'
        CustomRoleArn:
          $ref: '#/components/schemas/ARNString'
          description: 'The Amazon Resource Name (ARN) of the role to be assumed when multiple roles were received in the token from the identity provider. For example, a SAML-based identity provider. This parameter is optional for identity providers that do not support role customization.'
      description: Input to the <code>GetCredentialsForIdentity</code> action.
    InvalidIdentityPoolConfigurationException: {}
    ExternalServiceException: {}
    GetIdResponse:
      type: object
      properties:
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
          description: 'A unique identifier in the format REGION:GUID.'
      description: Returned in response to a GetId request.
    GetIdInput:
      type: object
      required:
        - IdentityPoolId
      title: GetIdInput
      properties:
        AccountId:
          $ref: '#/components/schemas/AccountId'
          description: A standard AWS account ID (9+ digits).
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
          description: 'An identity pool ID in the format REGION:GUID.'
        Logins:
          $ref: '#/components/schemas/LoginsMap'
          description: '<p>A set of optional name-value pairs that map provider names to provider tokens. The available provider names for <code>Logins</code> are as follows:</p> <ul> <li> <p>Facebook: <code>graph.facebook.com</code> </p> </li> <li> <p>Amazon Cognito user pool: <code>cognito-idp.&lt;region&gt;.amazonaws.com/&lt;YOUR_USER_POOL_ID&gt;</code>, for example, <code>cognito-idp.us-east-1.amazonaws.com/us-east-1_123456789</code>. </p> </li> <li> <p>Google: <code>accounts.google.com</code> </p> </li> <li> <p>Amazon: <code>www.amazon.com</code> </p> </li> <li> <p>Twitter: <code>api.twitter.com</code> </p> </li> <li> <p>Digits: <code>www.digits.com</code> </p> </li> </ul>'
      description: Input to the GetId action.
    GetIdentityPoolRolesResponse:
      type: object
      properties:
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
          description: 'An identity pool ID in the format REGION:GUID.'
        Roles:
          $ref: '#/components/schemas/RolesMap'
          description: The map of roles associated with this pool. Currently only authenticated and unauthenticated roles are supported.
        RoleMappings:
          $ref: '#/components/schemas/RoleMappingMap'
          description: 'How users for a specific identity provider are to mapped to roles. This is a String-to-<a>RoleMapping</a> object map. The string identifies the identity provider, for example, "graph.facebook.com" or "cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id".'
      description: Returned in response to a successful <code>GetIdentityPoolRoles</code> operation.
    GetIdentityPoolRolesInput:
      type: object
      required:
        - IdentityPoolId
      title: GetIdentityPoolRolesInput
      properties:
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
          description: 'An identity pool ID in the format REGION:GUID.'
      description: Input to the <code>GetIdentityPoolRoles</code> action.
    GetOpenIdTokenResponse:
      type: object
      properties:
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
          description: 'A unique identifier in the format REGION:GUID. Note that the IdentityId returned may not match the one passed on input.'
        Token:
          $ref: '#/components/schemas/OIDCToken'
          description: 'An OpenID token, valid for 10 minutes.'
      description: Returned in response to a successful GetOpenIdToken request.
    GetOpenIdTokenInput:
      type: object
      required:
        - IdentityId
      title: GetOpenIdTokenInput
      properties:
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
          description: 'A unique identifier in the format REGION:GUID.'
        Logins:
          $ref: '#/components/schemas/LoginsMap'
          description: 'A set of optional name-value pairs that map provider names to provider tokens. When using graph.facebook.com and www.amazon.com, supply the access_token returned from the provider''s authflow. For accounts.google.com, an Amazon Cognito user pool provider, or any other OpenID Connect provider, always include the <code>id_token</code>.'
      description: Input to the GetOpenIdToken action.
    GetOpenIdTokenForDeveloperIdentityResponse:
      type: object
      properties:
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
          description: 'A unique identifier in the format REGION:GUID.'
        Token:
          $ref: '#/components/schemas/OIDCToken'
          description: An OpenID token.
      description: Returned in response to a successful <code>GetOpenIdTokenForDeveloperIdentity</code> request.
    GetOpenIdTokenForDeveloperIdentityInput:
      type: object
      required:
        - IdentityPoolId
        - Logins
      title: GetOpenIdTokenForDeveloperIdentityInput
      properties:
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
          description: 'An identity pool ID in the format REGION:GUID.'
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
          description: 'A unique identifier in the format REGION:GUID.'
        Logins:
          $ref: '#/components/schemas/LoginsMap'
          description: 'A set of optional name-value pairs that map provider names to provider tokens. Each name-value pair represents a user from a public provider or developer provider. If the user is from a developer provider, the name-value pair will follow the syntax <code>"developer_provider_name": "developer_user_identifier"</code>. The developer provider is the "domain" by which Cognito will refer to your users; you provided this domain while creating/updating the identity pool. The developer user identifier is an identifier from your backend that uniquely identifies a user. When you create an identity pool, you can specify the supported logins.'
        PrincipalTags:
          $ref: '#/components/schemas/PrincipalTags'
          description: 'Use this operation to configure attribute mappings for custom providers. '
        TokenDuration:
          $ref: '#/components/schemas/TokenDuration'
          description: '<p>The expiration time of the token, in seconds. You can specify a custom expiration time for the token so that you can cache it. If you don''t provide an expiration time, the token is valid for 15 minutes. You can exchange the token with Amazon STS for temporary AWS credentials, which are valid for a maximum of one hour. The maximum token duration you can set is 24 hours. You should take care in setting the expiration time for a token, as there are significant security implications: an attacker could use a leaked token to access your AWS resources for the token''s duration.</p> <note> <p>Please provide for a small grace period, usually no more than 5 minutes, to account for clock skew.</p> </note>'
      description: Input to the <code>GetOpenIdTokenForDeveloperIdentity</code> action.
    DeveloperUserAlreadyRegisteredException: {}
    GetPrincipalTagAttributeMapResponse:
      type: object
      properties:
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
          description: You can use this operation to get the ID of the Identity Pool you setup attribute mappings for.
        IdentityProviderName:
          $ref: '#/components/schemas/IdentityProviderName'
          description: You can use this operation to get the provider name.
        UseDefaults:
          $ref: '#/components/schemas/UseDefaults'
          description: 'You can use this operation to list '
        PrincipalTags:
          $ref: '#/components/schemas/PrincipalTags'
          description: You can use this operation to add principal tags. The <code>PrincipalTags</code>operation enables you to reference user attributes in your IAM permissions policy.
    GetPrincipalTagAttributeMapInput:
      type: object
      required:
        - IdentityPoolId
        - IdentityProviderName
      title: GetPrincipalTagAttributeMapInput
      properties:
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
          description: You can use this operation to get the ID of the Identity Pool you setup attribute mappings for.
        IdentityProviderName:
          $ref: '#/components/schemas/IdentityProviderName'
          description: You can use this operation to get the provider name.
    ListIdentitiesResponse:
      type: object
      properties:
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
          description: 'An identity pool ID in the format REGION:GUID.'
        Identities:
          $ref: '#/components/schemas/IdentitiesList'
          description: An object containing a set of identities and associated mappings.
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
          description: A pagination token.
      description: The response to a ListIdentities request.
    ListIdentitiesInput:
      type: object
      required:
        - IdentityPoolId
        - MaxResults
      title: ListIdentitiesInput
      properties:
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
          description: 'An identity pool ID in the format REGION:GUID.'
        MaxResults:
          $ref: '#/components/schemas/QueryLimit'
          description: The maximum number of identities to return.
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
          description: A pagination token.
        HideDisabled:
          $ref: '#/components/schemas/HideDisabled'
          description: 'An optional boolean parameter that allows you to hide disabled identities. If omitted, the ListIdentities API will include disabled identities in the response.'
      description: Input to the ListIdentities action.
    ListIdentityPoolsResponse:
      type: object
      properties:
        IdentityPools:
          $ref: '#/components/schemas/IdentityPoolsList'
          description: The identity pools returned by the ListIdentityPools action.
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
          description: A pagination token.
      description: The result of a successful ListIdentityPools action.
    ListIdentityPoolsInput:
      type: object
      required:
        - MaxResults
      title: ListIdentityPoolsInput
      properties:
        MaxResults:
          $ref: '#/components/schemas/QueryLimit'
          description: The maximum number of identities to return.
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
          description: A pagination token.
      description: Input to the ListIdentityPools action.
    ListTagsForResourceResponse:
      type: object
      properties:
        Tags:
          $ref: '#/components/schemas/IdentityPoolTagsType'
          description: The tags that are assigned to the identity pool.
    ListTagsForResourceInput:
      type: object
      required:
        - ResourceArn
      title: ListTagsForResourceInput
      properties:
        ResourceArn:
          $ref: '#/components/schemas/ARNString'
          description: The Amazon Resource Name (ARN) of the identity pool that the tags are assigned to.
    LookupDeveloperIdentityResponse:
      type: object
      properties:
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
          description: 'A unique identifier in the format REGION:GUID.'
        DeveloperUserIdentifierList:
          $ref: '#/components/schemas/DeveloperUserIdentifierList'
          description: This is the list of developer user identifiers associated with an identity ID. Cognito supports the association of multiple developer user identifiers with an identity ID.
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
          description: 'A pagination token. The first call you make will have <code>NextToken</code> set to null. After that the service will return <code>NextToken</code> values as needed. For example, let''s say you make a request with <code>MaxResults</code> set to 10, and there are 20 matches in the database. The service will return a pagination token as a part of the response. This token can be used to call the API again and get results starting from the 11th match.'
      description: Returned in response to a successful <code>LookupDeveloperIdentity</code> action.
    LookupDeveloperIdentityInput:
      type: object
      required:
        - IdentityPoolId
      title: LookupDeveloperIdentityInput
      properties:
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
          description: 'An identity pool ID in the format REGION:GUID.'
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
          description: 'A unique identifier in the format REGION:GUID.'
        DeveloperUserIdentifier:
          $ref: '#/components/schemas/DeveloperUserIdentifier'
          description: 'A unique ID used by your backend authentication process to identify a user. Typically, a developer identity provider would issue many developer user identifiers, in keeping with the number of users.'
        MaxResults:
          $ref: '#/components/schemas/QueryLimit'
          description: The maximum number of identities to return.
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
          description: 'A pagination token. The first call you make will have <code>NextToken</code> set to null. After that the service will return <code>NextToken</code> values as needed. For example, let''s say you make a request with <code>MaxResults</code> set to 10, and there are 20 matches in the database. The service will return a pagination token as a part of the response. This token can be used to call the API again and get results starting from the 11th match.'
      description: Input to the <code>LookupDeveloperIdentityInput</code> action.
    MergeDeveloperIdentitiesResponse:
      type: object
      properties:
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
          description: 'A unique identifier in the format REGION:GUID.'
      description: Returned in response to a successful <code>MergeDeveloperIdentities</code> action.
    MergeDeveloperIdentitiesInput:
      type: object
      required:
        - SourceUserIdentifier
        - DestinationUserIdentifier
        - DeveloperProviderName
        - IdentityPoolId
      title: MergeDeveloperIdentitiesInput
      properties:
        SourceUserIdentifier:
          $ref: '#/components/schemas/DeveloperUserIdentifier'
          description: User identifier for the source user. The value should be a <code>DeveloperUserIdentifier</code>.
        DestinationUserIdentifier:
          $ref: '#/components/schemas/DeveloperUserIdentifier'
          description: User identifier for the destination user. The value should be a <code>DeveloperUserIdentifier</code>.
        DeveloperProviderName:
          $ref: '#/components/schemas/DeveloperProviderName'
          description: 'The "domain" by which Cognito will refer to your users. This is a (pseudo) domain name that you provide while creating an identity pool. This name acts as a placeholder that allows your backend and the Cognito service to communicate about the developer provider. For the <code>DeveloperProviderName</code>, you can use letters as well as period (.), underscore (_), and dash (-).'
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
          description: 'An identity pool ID in the format REGION:GUID.'
      description: Input to the <code>MergeDeveloperIdentities</code> action.
    SetIdentityPoolRolesInput:
      type: object
      required:
        - IdentityPoolId
        - Roles
      title: SetIdentityPoolRolesInput
      properties:
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
          description: 'An identity pool ID in the format REGION:GUID.'
        Roles:
          $ref: '#/components/schemas/RolesMap'
          description: 'The map of roles associated with this pool. For a given role, the key will be either "authenticated" or "unauthenticated" and the value will be the Role ARN.'
        RoleMappings:
          $ref: '#/components/schemas/RoleMappingMap'
          description: '<p>How users for a specific identity provider are to mapped to roles. This is a string to <a>RoleMapping</a> object map. The string identifies the identity provider, for example, "graph.facebook.com" or "cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id".</p> <p>Up to 25 rules can be specified per identity provider.</p>'
      description: Input to the <code>SetIdentityPoolRoles</code> action.
    ConcurrentModificationException: {}
    SetPrincipalTagAttributeMapResponse:
      type: object
      properties:
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
          description: The ID of the Identity Pool you want to set attribute mappings for.
        IdentityProviderName:
          $ref: '#/components/schemas/IdentityProviderName'
          description: The provider name you want to use for attribute mappings.
        UseDefaults:
          $ref: '#/components/schemas/UseDefaults'
          description: You can use this operation to select default (username and clientID) attribute mappings.
        PrincipalTags:
          $ref: '#/components/schemas/PrincipalTags'
          description: You can use this operation to add principal tags. The <code>PrincipalTags</code>operation enables you to reference user attributes in your IAM permissions policy.
    SetPrincipalTagAttributeMapInput:
      type: object
      required:
        - IdentityPoolId
        - IdentityProviderName
      title: SetPrincipalTagAttributeMapInput
      properties:
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
          description: The ID of the Identity Pool you want to set attribute mappings for.
        IdentityProviderName:
          $ref: '#/components/schemas/IdentityProviderName'
          description: The provider name you want to use for attribute mappings.
        UseDefaults:
          $ref: '#/components/schemas/UseDefaults'
          description: You can use this operation to use default (username and clientID) attribute mappings.
        PrincipalTags:
          $ref: '#/components/schemas/PrincipalTags'
          description: You can use this operation to add principal tags.
    TagResourceResponse:
      type: object
      properties: {}
    TagResourceInput:
      type: object
      required:
        - ResourceArn
        - Tags
      title: TagResourceInput
      properties:
        ResourceArn:
          $ref: '#/components/schemas/ARNString'
          description: The Amazon Resource Name (ARN) of the identity pool.
        Tags:
          $ref: '#/components/schemas/IdentityPoolTagsType'
          description: The tags to assign to the identity pool.
    UnlinkDeveloperIdentityInput:
      type: object
      required:
        - IdentityId
        - IdentityPoolId
        - DeveloperProviderName
        - DeveloperUserIdentifier
      title: UnlinkDeveloperIdentityInput
      properties:
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
          description: 'A unique identifier in the format REGION:GUID.'
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
          description: 'An identity pool ID in the format REGION:GUID.'
        DeveloperProviderName:
          $ref: '#/components/schemas/DeveloperProviderName'
          description: The "domain" by which Cognito will refer to your users.
        DeveloperUserIdentifier:
          $ref: '#/components/schemas/DeveloperUserIdentifier'
          description: A unique ID used by your backend authentication process to identify a user.
      description: Input to the <code>UnlinkDeveloperIdentity</code> action.
    UnlinkIdentityInput:
      type: object
      required:
        - IdentityId
        - Logins
        - LoginsToRemove
      title: UnlinkIdentityInput
      properties:
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
          description: 'A unique identifier in the format REGION:GUID.'
        Logins:
          $ref: '#/components/schemas/LoginsMap'
          description: A set of optional name-value pairs that map provider names to provider tokens.
        LoginsToRemove:
          $ref: '#/components/schemas/LoginsList'
          description: Provider names to unlink from this identity.
      description: Input to the UnlinkIdentity action.
    UntagResourceResponse:
      type: object
      properties: {}
    UntagResourceInput:
      type: object
      required:
        - ResourceArn
        - TagKeys
      title: UntagResourceInput
      properties:
        ResourceArn:
          $ref: '#/components/schemas/ARNString'
          description: The Amazon Resource Name (ARN) of the identity pool.
        TagKeys:
          $ref: '#/components/schemas/IdentityPoolTagsListType'
          description: The keys of the tags to remove from the user pool.
    ARNString:
      type: string
      minLength: 20
      maxLength: 2048
    AccessKeyString:
      type: string
    AccountId:
      type: string
      pattern: \d+
      minLength: 1
      maxLength: 15
    AmbiguousRoleResolutionType:
      type: string
      enum:
        - AuthenticatedRole
        - Deny
    ClaimName:
      type: string
      pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}]+'
      minLength: 1
      maxLength: 64
    ClaimValue:
      type: string
      minLength: 1
      maxLength: 128
    ClassicFlow:
      type: boolean
    CognitoIdentityProviderName:
      type: string
      pattern: '[\w._:/-]+'
      minLength: 1
      maxLength: 128
    CognitoIdentityProviderClientId:
      type: string
      pattern: '[\w_]+'
      minLength: 1
      maxLength: 128
    CognitoIdentityProviderTokenCheck:
      type: boolean
    CognitoIdentityProvider:
      type: object
      properties:
        ProviderName:
          $ref: '#/components/schemas/CognitoIdentityProviderName'
          description: 'The provider name for an Amazon Cognito user pool. For example, <code>cognito-idp.us-east-1.amazonaws.com/us-east-1_123456789</code>.'
        ClientId:
          $ref: '#/components/schemas/CognitoIdentityProviderClientId'
          description: The client ID for the Amazon Cognito user pool.
        ServerSideTokenCheck:
          $ref: '#/components/schemas/CognitoIdentityProviderTokenCheck'
          description: '<p>TRUE if server-side token validation is enabled for the identity provider’s token.</p> <p>Once you set <code>ServerSideTokenCheck</code> to TRUE for an identity pool, that identity pool will check with the integrated user pools to make sure that the user has not been globally signed out or deleted before the identity pool provides an OIDC token or AWS credentials for the user.</p> <p>If the user is signed out or deleted, the identity pool will return a 400 Not Authorized error.</p>'
      description: A provider representing an Amazon Cognito user pool and its client ID.
    CognitoIdentityProviderList:
      type: array
      items:
        $ref: '#/components/schemas/CognitoIdentityProvider'
    IdentityPoolName:
      type: string
      pattern: '[\w\s+=,.@-]+'
      minLength: 1
      maxLength: 128
    IdentityPoolUnauthenticated:
      type: boolean
    IdentityProviders:
      type: object
      maxProperties: 10
      additionalProperties:
        $ref: '#/components/schemas/IdentityProviderId'
    DeveloperProviderName:
      type: string
      pattern: '[\w._-]+'
      minLength: 1
      maxLength: 128
    OIDCProviderList:
      type: array
      items:
        $ref: '#/components/schemas/ARNString'
    SAMLProviderList:
      type: array
      items:
        $ref: '#/components/schemas/ARNString'
    IdentityPoolTagsType:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValueType'
    SecretKeyString:
      type: string
    SessionTokenString:
      type: string
    DateType:
      type: string
      format: date-time
    Credentials:
      type: object
      properties:
        AccessKeyId:
          $ref: '#/components/schemas/AccessKeyString'
          description: The Access Key portion of the credentials.
        SecretKey:
          $ref: '#/components/schemas/SecretKeyString'
          description: The Secret Access Key portion of the credentials
        SessionToken:
          $ref: '#/components/schemas/SessionTokenString'
          description: The Session Token portion of the credentials
        Expiration:
          $ref: '#/components/schemas/DateType'
          description: The date at which these credentials will expire.
      description: Credentials for the provided identity ID.
    IdentityIdList:
      type: array
      items:
        $ref: '#/components/schemas/IdentityId'
      minItems: 1
      maxItems: 60
    UnprocessedIdentityIdList:
      type: array
      items:
        $ref: '#/components/schemas/UnprocessedIdentityId'
      maxItems: 60
    IdentityPoolId:
      type: string
      pattern: '[\w-]+:[0-9a-f-]+'
      minLength: 1
      maxLength: 55
    IdentityId:
      type: string
      pattern: '[\w-]+:[0-9a-f-]+'
      minLength: 1
      maxLength: 55
    DeveloperUserIdentifier:
      type: string
      minLength: 1
      maxLength: 1024
    DeveloperUserIdentifierList:
      type: array
      items:
        $ref: '#/components/schemas/DeveloperUserIdentifier'
    ErrorCode:
      type: string
      enum:
        - AccessDenied
        - InternalServerError
    LoginsMap:
      type: object
      maxProperties: 10
      additionalProperties:
        $ref: '#/components/schemas/IdentityProviderToken'
    RolesMap:
      type: object
      maxProperties: 2
      additionalProperties:
        $ref: '#/components/schemas/ARNString'
    RoleMappingMap:
      type: object
      maxProperties: 10
      additionalProperties:
        $ref: '#/components/schemas/RoleMapping'
    PrincipalTags:
      type: object
      maxProperties: 50
      additionalProperties:
        $ref: '#/components/schemas/PrincipalTagValue'
    TokenDuration:
      type: integer
      minimum: 1
      maximum: 86400
    OIDCToken:
      type: string
    IdentityProviderName:
      type: string
      minLength: 1
      maxLength: 128
    UseDefaults:
      type: boolean
    HideDisabled:
      type: boolean
    IdentitiesList:
      type: array
      items:
        $ref: '#/components/schemas/IdentityDescription'
    LoginsList:
      type: array
      items:
        $ref: '#/components/schemas/IdentityProviderName'
    IdentityPoolShortDescription:
      type: object
      properties:
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
          description: 'An identity pool ID in the format REGION:GUID.'
        IdentityPoolName:
          $ref: '#/components/schemas/IdentityPoolName'
          description: A string that you provide.
      description: A description of the identity pool.
    TagKeysType:
      type: string
      minLength: 1
      maxLength: 128
    IdentityPoolTagsListType:
      type: array
      items:
        $ref: '#/components/schemas/TagKeysType'
    TagValueType:
      type: string
      minLength: 0
      maxLength: 256
    IdentityPoolsList:
      type: array
      items:
        $ref: '#/components/schemas/IdentityPoolShortDescription'
    IdentityProviderId:
      type: string
      pattern: '[\w.;_/-]+'
      minLength: 1
      maxLength: 128
    IdentityProviderToken:
      type: string
      minLength: 1
      maxLength: 50000
    QueryLimit:
      type: integer
      minimum: 1
      maximum: 60
    PaginationKey:
      type: string
      pattern: '[\S]+'
      minLength: 1
      maxLength: 65535
    MappingRuleMatchType:
      type: string
      enum:
        - Equals
        - Contains
        - StartsWith
        - NotEqual
    MappingRule:
      type: object
      required:
        - Claim
        - MatchType
        - Value
        - RoleARN
      properties:
        Claim:
          $ref: '#/components/schemas/ClaimName'
          description: 'The claim name that must be present in the token, for example, "isAdmin" or "paid".'
        MatchType:
          $ref: '#/components/schemas/MappingRuleMatchType'
          description: The match condition that specifies how closely the claim value in the IdP token must match <code>Value</code>.
        Value:
          $ref: '#/components/schemas/ClaimValue'
          description: 'A brief string that the claim must match, for example, "paid" or "yes".'
        RoleARN:
          $ref: '#/components/schemas/ARNString'
          description: The role ARN.
      description: 'A rule that maps a claim name, a claim value, and a match type to a role ARN.'
    MappingRulesList:
      type: array
      items:
        $ref: '#/components/schemas/MappingRule'
      minItems: 1
      maxItems: 400
    PrincipalTagID:
      type: string
      minLength: 1
      maxLength: 128
    PrincipalTagValue:
      type: string
      minLength: 1
      maxLength: 256
    RoleMappingType:
      type: string
      enum:
        - Token
        - Rules
    RulesConfigurationType:
      type: object
      required:
        - Rules
      properties:
        Rules:
          $ref: '#/components/schemas/MappingRulesList'
          description: <p>An array of rules. You can specify up to 25 rules per identity provider.</p> <p>Rules are evaluated in order. The first one to match specifies the role.</p>
      description: A container for rules.
    RoleMapping:
      type: object
      required:
        - Type
      properties:
        Type:
          $ref: '#/components/schemas/RoleMappingType'
          description: 'The role mapping type. Token will use <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims from the Cognito identity provider token to map groups to roles. Rules will attempt to match claims from the token to map to a role.'
        AmbiguousRoleResolution:
          $ref: '#/components/schemas/AmbiguousRoleResolutionType'
          description: '<p>If you specify Token or Rules as the <code>Type</code>, <code>AmbiguousRoleResolution</code> is required.</p> <p>Specifies the action to be taken if either no rules match the claim value for the <code>Rules</code> type, or there is no <code>cognito:preferred_role</code> claim and there are multiple <code>cognito:roles</code> matches for the <code>Token</code> type.</p>'
        RulesConfiguration:
          $ref: '#/components/schemas/RulesConfigurationType'
          description: '<p>The rules to be used for mapping users to roles.</p> <p>If you specify Rules as the role mapping type, <code>RulesConfiguration</code> is required.</p>'
      description: A role mapping.
    RoleType:
      type: string
      pattern: (un)?authenticated
      minLength: 1
      maxLength: 128
    UnprocessedIdentityId:
      type: object
      properties:
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
          description: 'A unique identifier in the format REGION:GUID.'
        ErrorCode:
          $ref: '#/components/schemas/ErrorCode'
          description: The error code indicating the type of error that occurred.
      description: 'An array of UnprocessedIdentityId objects, each of which contains an ErrorCode and IdentityId.'
security:
  - hmac: []

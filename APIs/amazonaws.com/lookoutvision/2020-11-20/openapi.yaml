openapi: 3.0.0
info:
  version: '2020-11-20'
  x-release: v4
  title: Amazon Lookout for Vision
  description: '<p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: lookoutvision
  x-aws-signingName: lookoutvision
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/lookoutvision-2020-11-20.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/lookoutvision/'
servers:
  - url: 'http://lookoutvision.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Amazon Lookout for Vision multi-region endpoint
  - url: 'https://lookoutvision.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Amazon Lookout for Vision multi-region endpoint
  - url: 'http://lookoutvision.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon Lookout for Vision endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://lookoutvision.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon Lookout for Vision endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  '/2020-11-20/projects/{projectName}/datasets':
    post:
      operationId: CreateDataset
      description: '<p>Creates a new dataset in an Amazon Lookout for Vision project. <code>CreateDataset</code> can create a training or a test dataset from a valid dataset source (<code>DatasetSource</code>).</p> <p>If you want a single dataset project, specify <code>train</code> for the value of <code>DatasetType</code>.</p> <p>To have a project with separate training and test datasets, call <code>CreateDataset</code> twice. On the first call, specify <code>train</code> for the value of <code>DatasetType</code>. On the second call, specify <code>test</code> for the value of <code>DatasetType</code>. </p> <p>This operation requires permissions to perform the <code>lookoutvision:CreateDataset</code> operation.</p>'
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDatasetResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '486':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
      parameters:
        - name: projectName
          in: path
          required: true
          description: The name of the project in which you want to create a dataset.
          schema:
            type: string
            pattern: '[a-zA-Z0-9][a-zA-Z0-9_\-]*'
            minLength: 1
            maxLength: 255
        - name: X-Amzn-Client-Token
          in: header
          required: false
          description: 'ClientToken is an idempotency token that ensures a call to <code>CreateDataset</code> completes only once. You choose the value to pass. For example, An issue, such as an network outage, might prevent you from getting a response from <code>CreateDataset</code>. In this case, safely retry your call to <code>CreateDataset</code> by using the same <code>ClientToken</code> parameter value. An error occurs if the other input parameters are not the same as in the first request. Using a different value for <code>ClientToken</code> is considered a new call to <code>CreateDataset</code>. An idempotency token is active for 8 hours. '
          schema:
            type: string
            pattern: '^[a-zA-Z0-9-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - DatasetType
              properties:
                DatasetType:
                  description: The type of the dataset. Specify <code>train</code> for a training dataset. Specify <code>test</code> for a test dataset.
                  type: string
                  pattern: train|test
                  minLength: 1
                  maxLength: 10
                DatasetSource:
                  description: Information about the location of a manifest file that Amazon Lookout for Vision uses to to create a dataset.
                  type: object
                  properties:
                    GroundTruthManifest:
                      $ref: '#/components/schemas/DatasetGroundTruthManifest'
                      description: Location information for the manifest file.
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/2020-11-20/projects/{projectName}/models':
    post:
      operationId: CreateModel
      description: '<p>Creates a new version of a model within an an Amazon Lookout for Vision project. <code>CreateModel</code> is an asynchronous operation in which Amazon Lookout for Vision trains, tests, and evaluates a new version of a model. </p> <p>To get the current status, check the <code>Status</code> field returned in the response from <a>DescribeModel</a>.</p> <p>If the project has a single dataset, Amazon Lookout for Vision internally splits the dataset to create a training and a test dataset. If the project has a training and a test dataset, Lookout for Vision uses the respective datasets to train and test the model. </p> <p>After training completes, the evaluation metrics are stored at the location specified in <code>OutputConfig</code>. </p> <p>This operation requires permissions to perform the <code>lookoutvision:CreateModel</code> operation. If you want to tag your model, you also require permission to the <code>lookoutvision:TagResource</code> operation.</p>'
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateModelResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '486':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
      parameters:
        - name: projectName
          in: path
          required: true
          description: The name of the project in which you want to create a model version.
          schema:
            type: string
            pattern: '[a-zA-Z0-9][a-zA-Z0-9_\-]*'
            minLength: 1
            maxLength: 255
        - name: X-Amzn-Client-Token
          in: header
          required: false
          description: 'ClientToken is an idempotency token that ensures a call to <code>CreateModel</code> completes only once. You choose the value to pass. For example, An issue, such as an network outage, might prevent you from getting a response from <code>CreateModel</code>. In this case, safely retry your call to <code>CreateModel</code> by using the same <code>ClientToken</code> parameter value. An error occurs if the other input parameters are not the same as in the first request. Using a different value for <code>ClientToken</code> is considered a new call to <code>CreateModel</code>. An idempotency token is active for 8 hours.'
          schema:
            type: string
            pattern: '^[a-zA-Z0-9-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - OutputConfig
              properties:
                Description:
                  description: A description for the version of the model.
                  type: string
                  pattern: '[0-9A-Za-z\.\-_]*'
                  minLength: 1
                  maxLength: 500
                OutputConfig:
                  description: The S3 location where Amazon Lookout for Vision saves model training files.
                  type: object
                  properties:
                    S3Location:
                      $ref: '#/components/schemas/S3Location'
                      description: The S3 location for the output.
                KmsKeyId:
                  description: 'The identifier for your AWS Key Management Service (AWS KMS) customer master key (CMK). The key is used to encrypt training and test images copied into the service for model training. Your source images are unaffected. If this parameter is not specified, the copied images are encrypted by a key that AWS owns and manages.'
                  type: string
                  pattern: '^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$'
                  minLength: 1
                  maxLength: 2048
                Tags:
                  description: A set of tags (key-value pairs) that you want to attach to the model.
                  type: array
                  items:
                    $ref: '#/components/schemas/Tag'
                  minItems: 0
                  maxItems: 200
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListModels
      description: '<p>Lists the versions of a model in an Amazon Lookout for Vision project.</p> <p>This operation requires permissions to perform the <code>lookoutvision:ListModels</code> operation.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListModelsResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: projectName
          in: path
          required: true
          description: The name of the project that contains the model versions that you want to list.
          schema:
            type: string
            pattern: '[a-zA-Z0-9][a-zA-Z0-9_\-]*'
            minLength: 1
            maxLength: 255
        - name: nextToken
          in: query
          required: false
          description: 'If the previous response was incomplete (because there is more data to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to retrieve the next set of models.'
          schema:
            type: string
            pattern: '^[a-zA-Z0-9\/\+\=]{0,2048}$'
            maxLength: 2048
        - name: maxResults
          in: query
          required: false
          description: 'The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100.'
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
  /2020-11-20/projects:
    post:
      operationId: CreateProject
      description: '<p>Creates an empty Amazon Lookout for Vision project. After you create the project, add a dataset by calling <a>CreateDataset</a>.</p> <p>This operation requires permissions to perform the <code>lookoutvision:CreateProject</code> operation.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProjectResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '486':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
      parameters:
        - name: X-Amzn-Client-Token
          in: header
          required: false
          description: 'ClientToken is an idempotency token that ensures a call to <code>CreateProject</code> completes only once. You choose the value to pass. For example, An issue, such as an network outage, might prevent you from getting a response from <code>CreateProject</code>. In this case, safely retry your call to <code>CreateProject</code> by using the same <code>ClientToken</code> parameter value. An error occurs if the other input parameters are not the same as in the first request. Using a different value for <code>ClientToken</code> is considered a new call to <code>CreateProject</code>. An idempotency token is active for 8 hours.'
          schema:
            type: string
            pattern: '^[a-zA-Z0-9-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ProjectName
              properties:
                ProjectName:
                  description: The name for the project.
                  type: string
                  pattern: '[a-zA-Z0-9][a-zA-Z0-9_\-]*'
                  minLength: 1
                  maxLength: 255
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListProjects
      description: '<p>Lists the Amazon Lookout for Vision projects in your AWS account.</p> <p>This operation requires permissions to perform the <code>lookoutvision:ListProjects</code> operation.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProjectsResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: nextToken
          in: query
          required: false
          description: 'If the previous response was incomplete (because there is more data to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to retrieve the next set of projects.'
          schema:
            type: string
            pattern: '^[a-zA-Z0-9\/\+\=]{0,2048}$'
            maxLength: 2048
        - name: maxResults
          in: query
          required: false
          description: 'The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100.'
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
  '/2020-11-20/projects/{projectName}/datasets/{datasetType}':
    delete:
      operationId: DeleteDataset
      description: '<p>Deletes an existing Amazon Lookout for Vision <code>dataset</code>. </p> <p>If your the project has a single dataset, you must create a new dataset before you can create a model.</p> <p>If you project has a training dataset and a test dataset consider the following. </p> <ul> <li> <p>If you delete the test dataset, your project reverts to a single dataset project. If you then train the model, Amazon Lookout for Vision internally splits the remaining dataset into a training and test dataset.</p> </li> <li> <p>If you delete the training dataset, you must create a training dataset before you can create a model.</p> </li> </ul> <p>This operation requires permissions to perform the <code>lookoutvision:DeleteDataset</code> operation.</p>'
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDatasetResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: projectName
          in: path
          required: true
          description: The name of the project that contains the dataset that you want to delete.
          schema:
            type: string
            pattern: '[a-zA-Z0-9][a-zA-Z0-9_\-]*'
            minLength: 1
            maxLength: 255
        - name: datasetType
          in: path
          required: true
          description: 'The type of the dataset to delete. Specify <code>train</code> to delete the training dataset. Specify <code>test</code> to delete the test dataset. To delete the dataset in a single dataset project, specify <code>train</code>.'
          schema:
            type: string
            pattern: train|test
            minLength: 1
            maxLength: 10
        - name: X-Amzn-Client-Token
          in: header
          required: false
          description: 'ClientToken is an idempotency token that ensures a call to <code>DeleteDataset</code> completes only once. You choose the value to pass. For example, An issue, such as an network outage, might prevent you from getting a response from <code>DeleteDataset</code>. In this case, safely retry your call to <code>DeleteDataset</code> by using the same <code>ClientToken</code> parameter value. An error occurs if the other input parameters are not the same as in the first request. Using a different value for <code>ClientToken</code> is considered a new call to <code>DeleteDataset</code>. An idempotency token is active for 8 hours.'
          schema:
            type: string
            pattern: '^[a-zA-Z0-9-]+$'
            minLength: 1
            maxLength: 64
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeDataset
      description: '<p>Describe an Amazon Lookout for Vision dataset.</p> <p>This operation requires permissions to perform the <code>lookoutvision:DescribeDataset</code> operation.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeDatasetResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: projectName
          in: path
          required: true
          description: The name of the project that contains the dataset that you want to describe.
          schema:
            type: string
            pattern: '[a-zA-Z0-9][a-zA-Z0-9_\-]*'
            minLength: 1
            maxLength: 255
        - name: datasetType
          in: path
          required: true
          description: 'The type of the dataset to describe. Specify <code>train</code> to describe the training dataset. Specify <code>test</code> to describe the test dataset. If you have a single dataset project, specify <code>train</code> '
          schema:
            type: string
            pattern: train|test
            minLength: 1
            maxLength: 10
  '/2020-11-20/projects/{projectName}/models/{modelVersion}':
    delete:
      operationId: DeleteModel
      description: '<p>Deletes an Amazon Lookout for Vision model. You can''t delete a running model. To stop a running model, use the <a>StopModel</a> operation.</p> <p>It might take a few seconds to delete a model. To determine if a model has been deleted, call <a>ListProjects</a> and check if the version of the model (<code>ModelVersion</code>) is in the <code>Models</code> array. </p> <p>This operation requires permissions to perform the <code>lookoutvision:DeleteModel</code> operation.</p>'
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteModelResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: projectName
          in: path
          required: true
          description: The name of the project that contains the model that you want to delete.
          schema:
            type: string
            pattern: '[a-zA-Z0-9][a-zA-Z0-9_\-]*'
            minLength: 1
            maxLength: 255
        - name: modelVersion
          in: path
          required: true
          description: The version of the model that you want to delete.
          schema:
            type: string
            pattern: '([1-9][0-9]*|latest)'
            minLength: 1
            maxLength: 10
        - name: X-Amzn-Client-Token
          in: header
          required: false
          description: 'ClientToken is an idempotency token that ensures a call to <code>DeleteModel</code> completes only once. You choose the value to pass. For example, An issue, such as an network outage, might prevent you from getting a response from <code>DeleteModel</code>. In this case, safely retry your call to <code>DeleteModel</code> by using the same <code>ClientToken</code> parameter value. An error occurs if the other input parameters are not the same as in the first request. Using a different value for <code>ClientToken</code> is considered a new call to <code>DeleteModel</code>. An idempotency token is active for 8 hours.'
          schema:
            type: string
            pattern: '^[a-zA-Z0-9-]+$'
            minLength: 1
            maxLength: 64
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeModel
      description: '<p>Describes a version of an Amazon Lookout for Vision model.</p> <p>This operation requires permissions to perform the <code>lookoutvision:DescribeModel</code> operation.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeModelResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: projectName
          in: path
          required: true
          description: The project that contains the version of a model that you want to describe.
          schema:
            type: string
            pattern: '[a-zA-Z0-9][a-zA-Z0-9_\-]*'
            minLength: 1
            maxLength: 255
        - name: modelVersion
          in: path
          required: true
          description: The version of the model that you want to describe.
          schema:
            type: string
            pattern: '([1-9][0-9]*|latest)'
            minLength: 1
            maxLength: 10
  '/2020-11-20/projects/{projectName}':
    delete:
      operationId: DeleteProject
      description: '<p>Deletes an Amazon Lookout for Vision project.</p> <p>To delete a project, you must first delete each version of the model associated with the project. To delete a model use the <a>DeleteModel</a> operation.</p> <p>You also have to delete the dataset(s) associated with the model. For more information, see <a>DeleteDataset</a>. The images referenced by the training and test datasets aren''t deleted. </p> <p>This operation requires permissions to perform the <code>lookoutvision:DeleteProject</code> operation.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteProjectResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: projectName
          in: path
          required: true
          description: The name of the project to delete.
          schema:
            type: string
            pattern: '[a-zA-Z0-9][a-zA-Z0-9_\-]*'
            minLength: 1
            maxLength: 255
        - name: X-Amzn-Client-Token
          in: header
          required: false
          description: 'ClientToken is an idempotency token that ensures a call to <code>DeleteProject</code> completes only once. You choose the value to pass. For example, An issue, such as an network outage, might prevent you from getting a response from <code>DeleteProject</code>. In this case, safely retry your call to <code>DeleteProject</code> by using the same <code>ClientToken</code> parameter value. An error occurs if the other input parameters are not the same as in the first request. Using a different value for <code>ClientToken</code> is considered a new call to <code>DeleteProject</code>. An idempotency token is active for 8 hours.'
          schema:
            type: string
            pattern: '^[a-zA-Z0-9-]+$'
            minLength: 1
            maxLength: 64
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeProject
      description: '<p>Describes an Amazon Lookout for Vision project.</p> <p>This operation requires permissions to perform the <code>lookoutvision:DescribeProject</code> operation.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeProjectResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: projectName
          in: path
          required: true
          description: The name of the project that you want to describe.
          schema:
            type: string
            pattern: '[a-zA-Z0-9][a-zA-Z0-9_\-]*'
            minLength: 1
            maxLength: 255
  '/2020-11-20/projects/{projectName}/models/{modelVersion}/detect#Content-Type':
    post:
      operationId: DetectAnomalies
      description: '<p>Detects anomalies in an image that you supply. </p> <p>The response from <code>DetectAnomalies</code> includes a boolean prediction that the image contains one or more anomalies and a confidence value for the prediction.</p> <note> <p>Before calling <code>DetectAnomalies</code>, you must first start your model with the <a>StartModel</a> operation. You are charged for the amount of time, in minutes, that a model runs and for the number of anomaly detection units that your model uses. If you are not using a model, use the <a>StopModel</a> operation to stop your model. </p> </note> <p>This operation requires permissions to perform the <code>lookoutvision:DetectAnomalies</code> operation.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetectAnomaliesResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: projectName
          in: path
          required: true
          description: The name of the project that contains the model version that you want to use.
          schema:
            type: string
            pattern: '[a-zA-Z0-9][a-zA-Z0-9_\-]*'
            minLength: 1
            maxLength: 255
        - name: modelVersion
          in: path
          required: true
          description: The version of the model that you want to use.
          schema:
            type: string
            pattern: '([1-9][0-9]*|latest)'
            minLength: 1
            maxLength: 10
        - name: Content-Type
          in: header
          required: true
          description: 'The type of the image passed in <code>Body</code>. Valid values are <code>image/png</code> (PNG format images) and <code>image/jpeg</code> (JPG format images). '
          schema:
            type: string
            pattern: .*
            minLength: 1
            maxLength: 255
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Body
              properties:
                Body:
                  description: 'The unencrypted image bytes that you want to analyze. '
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/2020-11-20/projects/{projectName}/datasets/{datasetType}/entries':
    get:
      operationId: ListDatasetEntries
      description: '<p>Lists the JSON Lines within a dataset. An Amazon Lookout for Vision JSON Line contains the anomaly information for a single image, including the image location and the assigned label.</p> <p>This operation requires permissions to perform the <code>lookoutvision:ListDatasetEntries</code> operation.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDatasetEntriesResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: projectName
          in: path
          required: true
          description: The name of the project that contains the dataset that you want to list.
          schema:
            type: string
            pattern: '[a-zA-Z0-9][a-zA-Z0-9_\-]*'
            minLength: 1
            maxLength: 255
        - name: datasetType
          in: path
          required: true
          description: 'The type of the dataset that you want to list. Specify <code>train</code> to list the training dataset. Specify <code>test</code> to list the test dataset. If you have a single dataset project, specify <code>train</code>.'
          schema:
            type: string
            pattern: train|test
            minLength: 1
            maxLength: 10
        - name: labeled
          in: query
          required: false
          description: 'Specify <code>true</code> to include labeled entries, otherwise specify <code>false</code>. If you don''t specify a value, Lookout for Vision returns all entries.'
          schema:
            type: boolean
        - name: anomalyClass
          in: query
          required: false
          description: 'Specify <code>normal</code> to include only normal images. Specify <code>anomaly</code> to only include anomalous entries. If you don''t specify a value, Amazon Lookout for Vision returns normal and anomalous images.'
          schema:
            type: string
            pattern: (normal|anomaly)
            minLength: 1
            maxLength: 10
        - name: createdBefore
          in: query
          required: false
          description: 'Only includes entries before the specified date in the response. For example, <code>2020-06-23T00:00:00</code>.'
          schema:
            type: string
            format: date-time
        - name: createdAfter
          in: query
          required: false
          description: 'Only includes entries after the specified date in the response. For example, <code>2020-06-23T00:00:00</code>.'
          schema:
            type: string
            format: date-time
        - name: nextToken
          in: query
          required: false
          description: 'If the previous response was incomplete (because there is more data to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to retrieve the next set of dataset entries.'
          schema:
            type: string
            pattern: '^[a-zA-Z0-9\/\+\=]{0,2048}$'
            maxLength: 2048
        - name: maxResults
          in: query
          required: false
          description: 'The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100.'
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: sourceRefContains
          in: query
          required: false
          description: Perform a "contains" search on the values of the <code>source-ref</code> key within the dataset. For example a value of "IMG_17" returns all JSON Lines where the <code>source-ref</code> key value matches <i>*IMG_17*</i>.
          schema:
            type: string
            pattern: .*\S.*
            minLength: 1
            maxLength: 2048
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    patch:
      operationId: UpdateDatasetEntries
      description: '<p>Adds one or more JSON Line entries to a dataset. A JSON Line includes information about an image used for training or testing an Amazon Lookout for Vision model. The following is an example JSON Line.</p> <p>Updating a dataset might take a while to complete. To check the current status, call <a>DescribeDataset</a> and check the <code>Status</code> field in the response.</p> <p>This operation requires permissions to perform the <code>lookoutvision:UpdateDatasetEntries</code> operation.</p>'
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDatasetEntriesResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: projectName
          in: path
          required: true
          description: The name of the project that contains the dataset that you want to update.
          schema:
            type: string
            pattern: '[a-zA-Z0-9][a-zA-Z0-9_\-]*'
            minLength: 1
            maxLength: 255
        - name: datasetType
          in: path
          required: true
          description: 'The type of the dataset that you want to update. Specify <code>train</code> to update the training dataset. Specify <code>test</code> to update the test dataset. If you have a single dataset project, specify <code>train</code>.'
          schema:
            type: string
            pattern: train|test
            minLength: 1
            maxLength: 10
        - name: X-Amzn-Client-Token
          in: header
          required: false
          description: 'ClientToken is an idempotency token that ensures a call to <code>UpdateDatasetEntries</code> completes only once. You choose the value to pass. For example, An issue, such as an network outage, might prevent you from getting a response from <code>UpdateDatasetEntries</code>. In this case, safely retry your call to <code>UpdateDatasetEntries</code> by using the same <code>ClientToken</code> parameter value. An error occurs if the other input parameters are not the same as in the first request. Using a different value for <code>ClientToken</code> is considered a new call to <code>UpdateDatasetEntries</code>. An idempotency token is active for 8 hours. '
          schema:
            type: string
            pattern: '^[a-zA-Z0-9-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Changes
              properties:
                Changes:
                  description: The entries to add to the dataset.
                  type: string
                  minLength: 1
                  maxLength: 10485760
  '/2020-11-20/tags/{resourceArn}':
    get:
      operationId: ListTagsForResource
      description: '<p>Returns a list of tags attached to the specified Amazon Lookout for Vision model.</p> <p>This operation requires permissions to perform the <code>lookoutvision:ListTagsForResource</code> operation.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: 'The Amazon Resource Name (ARN) of the model for which you want to list tags. '
          schema:
            type: string
            minLength: 1
            maxLength: 1011
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: TagResource
      description: '<p>Adds one or more key-value tags to an Amazon Lookout for Vision model. For more information, see <i>Tagging a model</i> in the <i>Amazon Lookout for Vision Developer Guide</i>. </p> <p>This operation requires permissions to perform the <code>lookoutvision:TagResource</code> operation.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '486':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The Amazon Resource Name (ARN) of the model to assign the tags.
          schema:
            type: string
            minLength: 1
            maxLength: 1011
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Tags
              properties:
                Tags:
                  description: The key-value tags to assign to the model.
                  type: array
                  items:
                    $ref: '#/components/schemas/Tag'
                  minItems: 0
                  maxItems: 200
  '/2020-11-20/projects/{projectName}/models/{modelVersion}/start':
    post:
      operationId: StartModel
      description: '<p>Starts the running of the version of an Amazon Lookout for Vision model. Starting a model takes a while to complete. To check the current state of the model, use <a>DescribeModel</a>.</p> <p>A model is ready to use when its status is <code>HOSTED</code>.</p> <p>Once the model is running, you can detect custom labels in new images by calling <a>DetectAnomalies</a>.</p> <note> <p>You are charged for the amount of time that the model is running. To stop a running model, call <a>StopModel</a>.</p> </note> <p>This operation requires permissions to perform the <code>lookoutvision:StartModel</code> operation.</p>'
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartModelResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '486':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
      parameters:
        - name: projectName
          in: path
          required: true
          description: The name of the project that contains the model that you want to start.
          schema:
            type: string
            pattern: '[a-zA-Z0-9][a-zA-Z0-9_\-]*'
            minLength: 1
            maxLength: 255
        - name: modelVersion
          in: path
          required: true
          description: The version of the model that you want to start.
          schema:
            type: string
            pattern: '([1-9][0-9]*|latest)'
            minLength: 1
            maxLength: 10
        - name: X-Amzn-Client-Token
          in: header
          required: false
          description: 'ClientToken is an idempotency token that ensures a call to <code>StartModel</code> completes only once. You choose the value to pass. For example, An issue, such as an network outage, might prevent you from getting a response from <code>StartModel</code>. In this case, safely retry your call to <code>StartModel</code> by using the same <code>ClientToken</code> parameter value. An error occurs if the other input parameters are not the same as in the first request. Using a different value for <code>ClientToken</code> is considered a new call to <code>StartModel</code>. An idempotency token is active for 8 hours. '
          schema:
            type: string
            pattern: '^[a-zA-Z0-9-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - MinInferenceUnits
              properties:
                MinInferenceUnits:
                  description: 'The minimum number of inference units to use. A single inference unit represents 1 hour of processing and can support up to 5 Transaction Pers Second (TPS). Use a higher number to increase the TPS throughput of your model. You are charged for the number of inference units that you use. '
                  type: integer
                  minimum: 1
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/2020-11-20/projects/{projectName}/models/{modelVersion}/stop':
    post:
      operationId: StopModel
      description: '<p>Stops the hosting of a running model. The operation might take a while to complete. To check the current status, call <a>DescribeModel</a>. </p> <p>After the model hosting stops, the <code>Status</code> of the model is <code>TRAINED</code>.</p> <p>This operation requires permissions to perform the <code>lookoutvision:StopModel</code> operation.</p>'
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StopModelResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: projectName
          in: path
          required: true
          description: The name of the project that contains the model that you want to stop.
          schema:
            type: string
            pattern: '[a-zA-Z0-9][a-zA-Z0-9_\-]*'
            minLength: 1
            maxLength: 255
        - name: modelVersion
          in: path
          required: true
          description: The version of the model that you want to stop.
          schema:
            type: string
            pattern: '([1-9][0-9]*|latest)'
            minLength: 1
            maxLength: 10
        - name: X-Amzn-Client-Token
          in: header
          required: false
          description: 'ClientToken is an idempotency token that ensures a call to <code>StopModel</code> completes only once. You choose the value to pass. For example, An issue, such as an network outage, might prevent you from getting a response from <code>StopModel</code>. In this case, safely retry your call to <code>StopModel</code> by using the same <code>ClientToken</code> parameter value. An error occurs if the other input parameters are not the same as in the first request. Using a different value for <code>ClientToken</code> is considered a new call to <code>StopModel</code>. An idempotency token is active for 8 hours. '
          schema:
            type: string
            pattern: '^[a-zA-Z0-9-]+$'
            minLength: 1
            maxLength: 64
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/2020-11-20/tags/{resourceArn}#tagKeys':
    delete:
      operationId: UntagResource
      description: '<p>Removes one or more tags from an Amazon Lookout for Vision model. For more information, see <i>Tagging a model</i> in the <i>Amazon Lookout for Vision Developer Guide</i>. </p> <p>This operation requires permissions to perform the <code>lookoutvision:UntagResource</code> operation.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: 'The Amazon Resource Name (ARN) of the model from which you want to remove tags. '
          schema:
            type: string
            minLength: 1
            maxLength: 1011
        - name: tagKeys
          in: query
          required: true
          description: A list of the keys of the tags that you want to remove.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TagKey'
            minItems: 0
            maxItems: 200
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    CreateDatasetResponse:
      type: object
      properties:
        DatasetMetadata:
          $ref: '#/components/schemas/DatasetMetadata'
          description: Information about the dataset.
    DatasetGroundTruthManifest:
      type: object
      properties:
        S3Object:
          $ref: '#/components/schemas/InputS3Object'
          description: The S3 bucket location for the manifest file.
      description: Location information about a manifest file. You can use a manifest file to create a dataset.
    AccessDeniedException: {}
    InternalServerException: {}
    ValidationException: {}
    ConflictException: {}
    ResourceNotFoundException: {}
    ThrottlingException: {}
    ServiceQuotaExceededException: {}
    CreateModelResponse:
      type: object
      properties:
        ModelMetadata:
          $ref: '#/components/schemas/ModelMetadata'
          description: The response from a call to <code>CreateModel</code>.
    S3Location:
      type: object
      required:
        - Bucket
      properties:
        Bucket:
          $ref: '#/components/schemas/S3BucketName'
          description: The S3 bucket that contains the training output.
        Prefix:
          $ref: '#/components/schemas/S3KeyPrefix'
          description: 'The path of the folder, within the S3 bucket, that contains the training output.'
      description: Information about the location training output.
    Tag:
      type: object
      required:
        - Key
        - Value
      properties:
        Key:
          $ref: '#/components/schemas/TagKey'
          description: The key of the tag that is attached to the specified model.
        Value:
          $ref: '#/components/schemas/TagValue'
          description: The value of the tag that is attached to the specified model.
      description: A key and value pair that is attached to the specified Amazon Lookout for Vision model.
    CreateProjectResponse:
      type: object
      properties:
        ProjectMetadata:
          $ref: '#/components/schemas/ProjectMetadata'
          description: Information about the project.
    DeleteDatasetResponse:
      type: object
      properties: {}
    DeleteModelResponse:
      type: object
      properties:
        ModelArn:
          $ref: '#/components/schemas/ModelArn'
          description: The Amazon Resource Name (ARN) of the model that was deleted.
    DeleteProjectResponse:
      type: object
      properties:
        ProjectArn:
          $ref: '#/components/schemas/ProjectArn'
          description: The Amazon Resource Name (ARN) of the project that was deleted.
    DescribeDatasetResponse:
      type: object
      properties:
        DatasetDescription:
          $ref: '#/components/schemas/DatasetDescription'
          description: 'The description of the requested dataset. '
    DescribeModelResponse:
      type: object
      properties:
        ModelDescription:
          $ref: '#/components/schemas/ModelDescription'
          description: Contains the description of the model.
    DescribeProjectResponse:
      type: object
      properties:
        ProjectDescription:
          $ref: '#/components/schemas/ProjectDescription'
          description: The description of the project.
    DetectAnomaliesResponse:
      type: object
      properties:
        DetectAnomalyResult:
          $ref: '#/components/schemas/DetectAnomalyResult'
          description: The results of the <code>DetectAnomalies</code> operation.
    ListDatasetEntriesResponse:
      type: object
      properties:
        DatasetEntries:
          $ref: '#/components/schemas/DatasetEntryList'
          description: A list of the entries (JSON Lines) within the dataset.
        NextToken:
          $ref: '#/components/schemas/PaginationToken'
          description: 'If the response is truncated, Amazon Lookout for Vision returns this token that you can use in the subsequent request to retrieve the next set ofdataset entries.'
    ListModelsResponse:
      type: object
      properties:
        Models:
          $ref: '#/components/schemas/ModelMetadataList'
          description: 'A list of model versions in the specified project. '
        NextToken:
          $ref: '#/components/schemas/PaginationToken'
          description: 'If the response is truncated, Amazon Lookout for Vision returns this token that you can use in the subsequent request to retrieve the next set of models. '
    ListProjectsResponse:
      type: object
      properties:
        Projects:
          $ref: '#/components/schemas/ProjectMetadataList'
          description: A list of projects in your AWS account.
        NextToken:
          $ref: '#/components/schemas/PaginationToken'
          description: 'If the response is truncated, Amazon Lookout for Vision returns this token that you can use in the subsequent request to retrieve the next set of projects.'
    ListTagsForResourceResponse:
      type: object
      properties:
        Tags:
          $ref: '#/components/schemas/TagList'
          description: A map of tag keys and values attached to the specified model.
    StartModelResponse:
      type: object
      properties:
        Status:
          $ref: '#/components/schemas/ModelHostingStatus'
          description: The current running status of the model.
    StopModelResponse:
      type: object
      properties:
        Status:
          $ref: '#/components/schemas/ModelHostingStatus'
          description: The status of the model.
    TagResourceResponse:
      type: object
      properties: {}
    UntagResourceResponse:
      type: object
      properties: {}
    TagKey:
      type: string
      pattern: '^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$'
      minLength: 1
      maxLength: 128
    UpdateDatasetEntriesResponse:
      type: object
      properties:
        Status:
          $ref: '#/components/schemas/DatasetStatus'
          description: The status of the dataset update.
    AnomalyClassFilter:
      type: string
      pattern: (normal|anomaly)
      minLength: 1
      maxLength: 10
    Boolean:
      type: boolean
    ClientToken:
      type: string
      pattern: '^[a-zA-Z0-9-]+$'
      minLength: 1
      maxLength: 64
    ContentType:
      type: string
      pattern: .*
      minLength: 1
      maxLength: 255
    ProjectName:
      type: string
      pattern: '[a-zA-Z0-9][a-zA-Z0-9_\-]*'
      minLength: 1
      maxLength: 255
    DatasetType:
      type: string
      pattern: train|test
      minLength: 1
      maxLength: 10
    DatasetSource:
      type: object
      properties:
        GroundTruthManifest:
          $ref: '#/components/schemas/DatasetGroundTruthManifest'
          description: Location information for the manifest file.
      description: Information about the location of a manifest file that Amazon Lookout for Vision uses to to create a dataset.
    CreateDatasetRequest:
      type: object
      required:
        - DatasetType
      title: CreateDatasetRequest
      properties:
        DatasetType:
          $ref: '#/components/schemas/DatasetType'
          description: The type of the dataset. Specify <code>train</code> for a training dataset. Specify <code>test</code> for a test dataset.
        DatasetSource:
          $ref: '#/components/schemas/DatasetSource'
          description: '<p>The location of the manifest file that Amazon Lookout for Vision uses to create the dataset.</p> <p>If you don''t specify <code>DatasetSource</code>, an empty dataset is created and the operation synchronously returns. Later, you can add JSON Lines by calling <a>UpdateDatasetEntries</a>. </p> <p>If you specify a value for <code>DataSource</code>, the manifest at the S3 location is validated and used to create the dataset. The call to <code>CreateDataset</code> is asynchronous and might take a while to complete. To find out the current status, Check the value of <code>Status</code> returned in a call to <a>DescribeDataset</a>.</p>'
    DatasetMetadata:
      type: object
      properties:
        DatasetType:
          $ref: '#/components/schemas/DatasetType'
          description: The type of the dataset.
        CreationTimestamp:
          $ref: '#/components/schemas/DateTime'
          description: 'The Unix timestamp for the date and time that the dataset was created. '
        Status:
          $ref: '#/components/schemas/DatasetStatus'
          description: The status for the dataset.
        StatusMessage:
          $ref: '#/components/schemas/DatasetStatusMessage'
          description: The status message for the dataset.
      description: Sumary information for an Amazon Lookout for Vision dataset.
    ModelDescriptionMessage:
      type: string
      pattern: '[0-9A-Za-z\.\-_]*'
      minLength: 1
      maxLength: 500
    OutputConfig:
      type: object
      required:
        - S3Location
      properties:
        S3Location:
          $ref: '#/components/schemas/S3Location'
          description: The S3 location for the output.
      description: The S3 location where Amazon Lookout for Vision saves model training files.
    KmsKeyId:
      type: string
      pattern: '^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$'
      minLength: 1
      maxLength: 2048
    TagList:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
      minItems: 0
      maxItems: 200
    CreateModelRequest:
      type: object
      required:
        - OutputConfig
      title: CreateModelRequest
      properties:
        Description:
          $ref: '#/components/schemas/ModelDescriptionMessage'
          description: A description for the version of the model.
        OutputConfig:
          $ref: '#/components/schemas/OutputConfig'
          description: The location where Amazon Lookout for Vision saves the training results.
        KmsKeyId:
          $ref: '#/components/schemas/KmsKeyId'
          description: 'The identifier for your AWS Key Management Service (AWS KMS) customer master key (CMK). The key is used to encrypt training and test images copied into the service for model training. Your source images are unaffected. If this parameter is not specified, the copied images are encrypted by a key that AWS owns and manages.'
        Tags:
          $ref: '#/components/schemas/TagList'
          description: A set of tags (key-value pairs) that you want to attach to the model.
    ModelMetadata:
      type: object
      properties:
        CreationTimestamp:
          $ref: '#/components/schemas/DateTime'
          description: 'The unix timestamp for the date and time that the model was created. '
        ModelVersion:
          $ref: '#/components/schemas/ModelVersion'
          description: The version of the model.
        ModelArn:
          $ref: '#/components/schemas/ModelArn'
          description: The Amazon Resource Name (ARN) of the model.
        Description:
          $ref: '#/components/schemas/ModelDescriptionMessage'
          description: The description for the model.
        Status:
          $ref: '#/components/schemas/ModelStatus'
          description: The status of the model.
        StatusMessage:
          $ref: '#/components/schemas/ModelStatusMessage'
          description: The status message for the model.
        Performance:
          $ref: '#/components/schemas/ModelPerformance'
          description: Performance metrics for the model. Not available until training has successfully completed.
      description: Describes an Amazon Lookout for Vision model.
    CreateProjectRequest:
      type: object
      required:
        - ProjectName
      title: CreateProjectRequest
      properties:
        ProjectName:
          $ref: '#/components/schemas/ProjectName'
          description: The name for the project.
    ProjectMetadata:
      type: object
      properties:
        ProjectArn:
          $ref: '#/components/schemas/ProjectArn'
          description: The Amazon Resource Name (ARN) of the project.
        ProjectName:
          $ref: '#/components/schemas/ProjectName'
          description: The name of the project.
        CreationTimestamp:
          $ref: '#/components/schemas/DateTime'
          description: 'The unix timestamp for the date and time that the project was created. '
      description: Metadata about an Amazon Lookout for Vision project.
    DatasetChanges:
      type: string
      minLength: 1
      maxLength: 10485760
    DateTime:
      type: string
      format: date-time
    DatasetStatus:
      type: string
      enum:
        - CREATE_IN_PROGRESS
        - CREATE_COMPLETE
        - CREATE_FAILED
        - UPDATE_IN_PROGRESS
        - UPDATE_COMPLETE
        - UPDATE_FAILED_ROLLBACK_IN_PROGRESS
        - UPDATE_FAILED_ROLLBACK_COMPLETE
        - DELETE_IN_PROGRESS
        - DELETE_COMPLETE
        - DELETE_FAILED
    DatasetStatusMessage:
      type: string
    DatasetImageStats:
      type: object
      properties:
        Total:
          $ref: '#/components/schemas/Integer'
          description: The total number of images in the dataset.
        Labeled:
          $ref: '#/components/schemas/Integer'
          description: The total number of labeled images.
        Normal:
          $ref: '#/components/schemas/Integer'
          description: The total number of images labeled as normal.
        Anomaly:
          $ref: '#/components/schemas/Integer'
          description: the total number of images labeled as an anomaly.
      description: Statistics about the images in a dataset.
    DatasetDescription:
      type: object
      properties:
        ProjectName:
          $ref: '#/components/schemas/ProjectName'
          description: The name of the project that contains the dataset.
        DatasetType:
          $ref: '#/components/schemas/DatasetType'
          description: The type of the dataset. The value <code>train</code> represents a training dataset or single dataset project. The value <code>test</code> represents a test dataset.
        CreationTimestamp:
          $ref: '#/components/schemas/DateTime'
          description: The Unix timestamp for the time and date that the dataset was created.
        LastUpdatedTimestamp:
          $ref: '#/components/schemas/DateTime'
          description: The Unix timestamp for the date and time that the dataset was last updated.
        Status:
          $ref: '#/components/schemas/DatasetStatus'
          description: The status of the dataset.
        StatusMessage:
          $ref: '#/components/schemas/DatasetStatusMessage'
          description: 'The status message for the dataset. '
        ImageStats:
          $ref: '#/components/schemas/DatasetImageStats'
          description: <p/>
      description: 'The description for a dataset. For more information, see <a>DescribeDataset</a>.'
    DatasetEntry:
      type: string
      pattern: '^\{.*\}$'
      minLength: 2
      maxLength: 8192
    DatasetEntryList:
      type: array
      items:
        $ref: '#/components/schemas/DatasetEntry'
    InputS3Object:
      type: object
      required:
        - Bucket
        - Key
      properties:
        Bucket:
          $ref: '#/components/schemas/S3BucketName'
          description: The Amazon S3 bucket that contains the manifest.
        Key:
          $ref: '#/components/schemas/S3ObjectKey'
          description: The name and location of the manifest file withiin the bucket.
        VersionId:
          $ref: '#/components/schemas/S3ObjectVersion'
          description: The version ID of the bucket.
      description: 'Amazon S3 Location information for an input manifest file. '
    Integer:
      type: integer
    DatasetMetadataList:
      type: array
      items:
        $ref: '#/components/schemas/DatasetMetadata'
    DeleteDatasetRequest:
      type: object
      title: DeleteDatasetRequest
      properties: {}
    ModelVersion:
      type: string
      pattern: '([1-9][0-9]*|latest)'
      minLength: 1
      maxLength: 10
    DeleteModelRequest:
      type: object
      title: DeleteModelRequest
      properties: {}
    ModelArn:
      type: string
    DeleteProjectRequest:
      type: object
      title: DeleteProjectRequest
      properties: {}
    ProjectArn:
      type: string
    DescribeDatasetRequest:
      type: object
      title: DescribeDatasetRequest
      properties: {}
    DescribeModelRequest:
      type: object
      title: DescribeModelRequest
      properties: {}
    ModelDescription:
      type: object
      properties:
        ModelVersion:
          $ref: '#/components/schemas/ModelVersion'
          description: The version of the model
        ModelArn:
          $ref: '#/components/schemas/ModelArn'
          description: The Amazon Resource Name (ARN) of the model.
        CreationTimestamp:
          $ref: '#/components/schemas/DateTime'
          description: 'The unix timestamp for the date and time that the model was created. '
        Description:
          $ref: '#/components/schemas/ModelDescriptionMessage'
          description: The description for the model.
        Status:
          $ref: '#/components/schemas/ModelStatus'
          description: The status of the model.
        StatusMessage:
          $ref: '#/components/schemas/ModelStatusMessage'
          description: The status message for the model.
        Performance:
          $ref: '#/components/schemas/ModelPerformance'
          description: Performance metrics for the model. Created during training.
        OutputConfig:
          $ref: '#/components/schemas/OutputConfig'
          description: The S3 location where Amazon Lookout for Vision saves model training files.
        EvaluationManifest:
          $ref: '#/components/schemas/OutputS3Object'
          description: The S3 location where Amazon Lookout for Vision saves the manifest file that was used to test the trained model and generate the performance scores.
        EvaluationResult:
          $ref: '#/components/schemas/OutputS3Object'
          description: The S3 location where Amazon Lookout for Vision saves the performance metrics.
        EvaluationEndTimestamp:
          $ref: '#/components/schemas/DateTime'
          description: 'The unix timestamp for the date and time that the evaluation ended. '
        KmsKeyId:
          $ref: '#/components/schemas/KmsKeyId'
          description: The identifer for the AWS Key Management Service (AWS KMS) key that was used to encrypt the model during training.
      description: Describes an Amazon Lookout for Vision model.
    DescribeProjectRequest:
      type: object
      title: DescribeProjectRequest
      properties: {}
    ProjectDescription:
      type: object
      properties:
        ProjectArn:
          $ref: '#/components/schemas/ProjectArn'
          description: The Amazon Resource Name (ARN) of the project.
        ProjectName:
          $ref: '#/components/schemas/ProjectName'
          description: The name of the project.
        CreationTimestamp:
          $ref: '#/components/schemas/DateTime'
          description: 'The unix timestamp for the date and time that the project was created. '
        Datasets:
          $ref: '#/components/schemas/DatasetMetadataList'
          description: A list of datasets in the project.
      description: 'Describe an Amazon Lookout for Vision project. For more information, see <a>DescribeProject</a>.'
    Stream:
      type: string
    DetectAnomaliesRequest:
      type: object
      required:
        - Body
      title: DetectAnomaliesRequest
      properties:
        Body:
          $ref: '#/components/schemas/Stream'
          description: 'The unencrypted image bytes that you want to analyze. '
    DetectAnomalyResult:
      type: object
      properties:
        Source:
          $ref: '#/components/schemas/ImageSource'
          description: The source of the image that was analyzed. <code>direct</code> means that the images was supplied from the local computer. No other values are supported.
        IsAnomalous:
          $ref: '#/components/schemas/Boolean'
          description: 'True if the image contains an anomaly, otherwise false.'
        Confidence:
          $ref: '#/components/schemas/Float'
          description: The confidence that Amazon Lookout for Vision has in the accuracy of the prediction.
      description: The prediction results from a call to <a>DetectAnomalies</a>.
    ImageSource:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/ImageSourceType'
          description: The type of the image.
      description: The source for an image.
    Float:
      type: number
      format: float
    ImageSourceType:
      type: string
      pattern: direct
    InferenceUnits:
      type: integer
      minimum: 1
    S3BucketName:
      type: string
      pattern: '[0-9A-Za-z\.\-_]*'
      minLength: 3
      maxLength: 63
    S3ObjectKey:
      type: string
      pattern: '^([a-zA-Z0-9!_.*''()-][/a-zA-Z0-9!_.*''()-]*)?$'
      minLength: 1
      maxLength: 1024
    S3ObjectVersion:
      type: string
      pattern: .*
      minLength: 1
      maxLength: 1024
    IsLabeled:
      type: boolean
    PaginationToken:
      type: string
      pattern: '^[a-zA-Z0-9\/\+\=]{0,2048}$'
      maxLength: 2048
    PageSize:
      type: integer
      minimum: 1
      maximum: 100
    QueryString:
      type: string
      pattern: .*\S.*
      minLength: 1
      maxLength: 2048
    ListDatasetEntriesRequest:
      type: object
      title: ListDatasetEntriesRequest
      properties: {}
    ListModelsRequest:
      type: object
      title: ListModelsRequest
      properties: {}
    ModelMetadataList:
      type: array
      items:
        $ref: '#/components/schemas/ModelMetadata'
    ListProjectsRequest:
      type: object
      title: ListProjectsRequest
      properties: {}
    ProjectMetadataList:
      type: array
      items:
        $ref: '#/components/schemas/ProjectMetadata'
    TagArn:
      type: string
      minLength: 1
      maxLength: 1011
    ListTagsForResourceRequest:
      type: object
      title: ListTagsForResourceRequest
      properties: {}
    ModelStatus:
      type: string
      enum:
        - TRAINING
        - TRAINED
        - TRAINING_FAILED
        - STARTING_HOSTING
        - HOSTED
        - HOSTING_FAILED
        - STOPPING_HOSTING
        - SYSTEM_UPDATING
        - DELETING
    ModelStatusMessage:
      type: string
    ModelPerformance:
      type: object
      properties:
        F1Score:
          $ref: '#/components/schemas/Float'
          description: The overall F1 score metric for the trained model.
        Recall:
          $ref: '#/components/schemas/Float'
          description: 'The overall recall metric value for the trained model. '
        Precision:
          $ref: '#/components/schemas/Float'
          description: The overall precision metric value for the trained model.
      description: 'Information about the evaluation performance of a trained model. '
    OutputS3Object:
      type: object
      required:
        - Bucket
        - Key
      properties:
        Bucket:
          $ref: '#/components/schemas/S3BucketName'
          description: The bucket that contains the training output.
        Key:
          $ref: '#/components/schemas/S3ObjectKey'
          description: The location of the training output in the bucket.
      description: The S3 location where Amazon Lookout for Vision saves training output.
    ModelHostingStatus:
      type: string
      enum:
        - STARTING_HOSTING
        - HOSTED
        - HOSTING_FAILED
        - STOPPING_HOSTING
        - SYSTEM_UPDATING
    S3KeyPrefix:
      type: string
      pattern: '^([a-zA-Z0-9!_.*''()-][/a-zA-Z0-9!_.*''()-]*)?$'
      maxLength: 1024
    StartModelRequest:
      type: object
      required:
        - MinInferenceUnits
      title: StartModelRequest
      properties:
        MinInferenceUnits:
          $ref: '#/components/schemas/InferenceUnits'
          description: 'The minimum number of inference units to use. A single inference unit represents 1 hour of processing and can support up to 5 Transaction Pers Second (TPS). Use a higher number to increase the TPS throughput of your model. You are charged for the number of inference units that you use. '
    StopModelRequest:
      type: object
      title: StopModelRequest
      properties: {}
    TagValue:
      type: string
      pattern: '^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$'
      minLength: 0
      maxLength: 256
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
      minItems: 0
      maxItems: 200
    TagResourceRequest:
      type: object
      required:
        - Tags
      title: TagResourceRequest
      properties:
        Tags:
          $ref: '#/components/schemas/TagList'
          description: The key-value tags to assign to the model.
    UntagResourceRequest:
      type: object
      title: UntagResourceRequest
      properties: {}
    UpdateDatasetEntriesRequest:
      type: object
      required:
        - Changes
      title: UpdateDatasetEntriesRequest
      properties:
        Changes:
          $ref: '#/components/schemas/DatasetChanges'
          description: The entries to add to the dataset.
security:
  - hmac: []

openapi: 3.0.0
info:
  version: '2016-05-01'
  x-release: v4
  title: Amazon WorkDocs
  description: '<p>The WorkDocs API is designed for the following use cases:</p> <ul> <li> <p>File Migration: File migration applications are supported for users who want to migrate their files from an on-premises or off-premises file system or service. Users can insert files into a user directory structure, as well as allow for basic metadata changes, such as modifications to the permissions of files.</p> </li> <li> <p>Security: Support security applications are supported for users who have additional security needs, such as antivirus or data loss prevention. The API actions, along with AWS CloudTrail, allow these applications to detect when changes occur in Amazon WorkDocs. Then, the application can take the necessary actions and replace the target file. If the target file violates the policy, the application can also choose to email the user.</p> </li> <li> <p>eDiscovery/Analytics: General administrative applications are supported, such as eDiscovery and analytics. These applications can choose to mimic or record the actions in an Amazon WorkDocs site, along with AWS CloudTrail, to replicate data for eDiscovery, backup, or analytical applications.</p> </li> </ul> <p>All Amazon WorkDocs API actions are Amazon authenticated and certificate-signed. They not only require the use of the AWS SDK, but also allow for the exclusive use of IAM users and roles to help facilitate access, trust, and permission policies. By creating a role and allowing an IAM user to access the Amazon WorkDocs site, the IAM user gains full administrative visibility into the entire Amazon WorkDocs site (or as set in the IAM policy). This includes, but is not limited to, the ability to modify file permissions and upload any file to any user. This allows developers to perform the three use cases above, as well as give users the ability to grant access on a selective basis using the IAM model.</p>'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: workdocs
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/workdocs-2016-05-01.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/workdocs/'
servers:
  - url: 'http://workdocs.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Amazon WorkDocs multi-region endpoint
  - url: 'https://workdocs.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Amazon WorkDocs multi-region endpoint
  - url: 'http://workdocs.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon WorkDocs endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://workdocs.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon WorkDocs endpoint for China (Beijing) and China (Ningxia)
paths:
  '/api/v1/documents/{DocumentId}/versions/{VersionId}':
    delete:
      operationId: AbortDocumentVersionUpload
      description: 'Aborts the upload of the specified document version that was previously initiated by <a>InitiateDocumentVersionUpload</a>. The client should make this call only when it no longer intends to upload the document version, or fails to do so.'
      responses:
        '204':
          description: Success
        '480':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '481':
          description: ProhibitedStateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProhibitedStateException'
        '482':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '483':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '484':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: DocumentId
          in: path
          required: true
          description: The ID of the document.
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
        - name: VersionId
          in: path
          required: true
          description: The ID of the version.
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDocumentVersion
      description: Retrieves version metadata for the specified document.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDocumentVersionResponse'
        '480':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '483':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: ProhibitedStateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProhibitedStateException'
        '486':
          description: InvalidPasswordException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPasswordException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: DocumentId
          in: path
          required: true
          description: The ID of the document.
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
        - name: VersionId
          in: path
          required: true
          description: The version ID of the document.
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
        - name: fields
          in: query
          required: false
          description: A comma-separated list of values. Specify "SOURCE" to include a URL for the source document.
          schema:
            type: string
            pattern: '[\w,]+'
            minLength: 1
            maxLength: 256
        - name: includeCustomMetadata
          in: query
          required: false
          description: Set this to TRUE to include custom metadata in the response.
          schema:
            type: boolean
    patch:
      operationId: UpdateDocumentVersion
      description: '<p>Changes the status of the document version to ACTIVE. </p> <p>Amazon WorkDocs also sets its document container to ACTIVE. This is the last step in a document upload, after the client uploads the document to an S3-presigned URL returned by <a>InitiateDocumentVersionUpload</a>. </p>'
      responses:
        '200':
          description: Success
        '480':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '481':
          description: ProhibitedStateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProhibitedStateException'
        '482':
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '483':
          description: InvalidOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidOperationException'
        '484':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '485':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '486':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '487':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: DocumentId
          in: path
          required: true
          description: The ID of the document.
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
        - name: VersionId
          in: path
          required: true
          description: The version ID of the document.
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                VersionStatus:
                  description: The status of the version.
                  type: string
                  enum:
                    - ACTIVE
  '/api/v1/users/{UserId}/activation':
    post:
      operationId: ActivateUser
      description: Activates the specified user. Only active users can access Amazon WorkDocs.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivateUserResponse'
        '480':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '483':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: UserId
          in: path
          required: true
          description: The ID of the user.
          schema:
            type: string
            pattern: '[&\w+-.@]+'
            minLength: 1
            maxLength: 256
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    delete:
      operationId: DeactivateUser
      description: 'Deactivates the specified user, which revokes the user''s access to Amazon WorkDocs.'
      responses:
        '204':
          description: Success
        '480':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '483':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: UserId
          in: path
          required: true
          description: The ID of the user.
          schema:
            type: string
            pattern: '[&\w+-.@]+'
            minLength: 1
            maxLength: 256
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
  '/api/v1/resources/{ResourceId}/permissions':
    post:
      operationId: AddResourcePermissions
      description: Creates a set of permissions for the specified folder or document. The resource permissions are overwritten if the principals already have different permissions.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddResourcePermissionsResponse'
        '480':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '481':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '482':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: ResourceId
          in: path
          required: true
          description: The ID of the resource.
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Principals
              properties:
                Principals:
                  description: 'The users, groups, or organization being granted permission.'
                  type: array
                  items:
                    $ref: '#/components/schemas/SharePrincipal'
                NotificationOptions:
                  description: Set of options which defines notification preferences of given action.
                  type: object
                  properties:
                    SendEmail:
                      $ref: '#/components/schemas/BooleanType'
                      description: Boolean value to indicate an email notification should be sent to the receipients.
                    EmailMessage:
                      $ref: '#/components/schemas/MessageType'
                      description: Text value to be included in the email body.
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeResourcePermissions
      description: Describes the permissions of a specified resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeResourcePermissionsResponse'
        '480':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '481':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '482':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: ResourceId
          in: path
          required: true
          description: The ID of the resource.
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
        - name: principalId
          in: query
          required: false
          description: The ID of the principal to filter permissions by.
          schema:
            type: string
            pattern: '[&\w+-.@]+'
            minLength: 1
            maxLength: 256
        - name: limit
          in: query
          required: false
          description: The maximum number of items to return with this call.
          schema:
            type: integer
            minimum: 1
            maximum: 999
        - name: marker
          in: query
          required: false
          description: The marker for the next set of results. (You received this marker from a previous call)
          schema:
            type: string
            minLength: 1
            maxLength: 2048
    delete:
      operationId: RemoveAllResourcePermissions
      description: Removes all the permissions from the specified resource.
      responses:
        '204':
          description: Success
        '480':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '481':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '482':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: ResourceId
          in: path
          required: true
          description: The ID of the resource.
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
  '/api/v1/documents/{DocumentId}/versions/{VersionId}/comment':
    post:
      operationId: CreateComment
      description: Adds a new comment to the specified document version.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCommentResponse'
        '480':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '481':
          description: ProhibitedStateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProhibitedStateException'
        '482':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '483':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '484':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: DocumentLockedForCommentsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentLockedForCommentsException'
        '487':
          description: InvalidCommentOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommentOperationException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: DocumentId
          in: path
          required: true
          description: The ID of the document.
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
        - name: VersionId
          in: path
          required: true
          description: The ID of the document version.
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Text
              properties:
                ParentId:
                  description: The ID of the parent comment.
                  type: string
                  pattern: '[\w+-.@]+'
                  minLength: 1
                  maxLength: 128
                ThreadId:
                  description: The ID of the root comment in the thread.
                  type: string
                  pattern: '[\w+-.@]+'
                  minLength: 1
                  maxLength: 128
                Text:
                  description: The text of the comment.
                  type: string
                  minLength: 1
                  maxLength: 2048
                  format: password
                Visibility:
                  description: 'The visibility of the comment. Options are either PRIVATE, where the comment is visible only to the comment author and document owner and co-owners, or PUBLIC, where the comment is visible to document owners, co-owners, and contributors.'
                  type: string
                  enum:
                    - PUBLIC
                    - PRIVATE
                NotifyCollaborators:
                  description: Set this parameter to TRUE to send an email out to the document collaborators after the comment is created.
                  type: boolean
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/api/v1/resources/{ResourceId}/customMetadata':
    put:
      operationId: CreateCustomMetadata
      description: 'Adds one or more custom properties to the specified resource (a folder, document, or version).'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCustomMetadataResponse'
        '480':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '483':
          description: ProhibitedStateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProhibitedStateException'
        '484':
          description: CustomMetadataLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomMetadataLimitExceededException'
        '485':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '486':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: ResourceId
          in: path
          required: true
          description: The ID of the resource.
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
        - name: versionid
          in: query
          required: false
          description: 'The ID of the version, if the custom metadata is being added to a document version.'
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - CustomMetadata
              properties:
                CustomMetadata:
                  description: Custom metadata in the form of name-value pairs.
                  type: object
                  minProperties: 1
                  maxProperties: 8
                  additionalProperties:
                    $ref: '#/components/schemas/CustomMetadataValueType'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    delete:
      operationId: DeleteCustomMetadata
      description: Deletes custom metadata from the specified resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCustomMetadataResponse'
        '480':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '483':
          description: ProhibitedStateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProhibitedStateException'
        '484':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: ResourceId
          in: path
          required: true
          description: 'The ID of the resource, either a document or folder.'
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
        - name: versionId
          in: query
          required: false
          description: 'The ID of the version, if the custom metadata is being deleted from a document version.'
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
        - name: keys
          in: query
          required: false
          description: List of properties to remove.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CustomMetadataKeyType'
            maxItems: 8
        - name: deleteAll
          in: query
          required: false
          description: Flag to indicate removal of all custom metadata properties from the specified resource.
          schema:
            type: boolean
  /api/v1/folders:
    post:
      operationId: CreateFolder
      description: Creates a folder with the specified name and parent folder.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFolderResponse'
        '480':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '481':
          description: EntityAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityAlreadyExistsException'
        '482':
          description: ProhibitedStateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProhibitedStateException'
        '483':
          description: ConflictingOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictingOperationException'
        '484':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '485':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '486':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '487':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '488':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ParentFolderId
              properties:
                Name:
                  description: The name of the new folder.
                  type: string
                  pattern: '[\u0020-\u202D\u202F-\uFFFF]+'
                  minLength: 1
                  maxLength: 255
                ParentFolderId:
                  description: The ID of the parent folder.
                  type: string
                  pattern: '[\w+-.@]+'
                  minLength: 1
                  maxLength: 128
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/api/v1/resources/{ResourceId}/labels':
    put:
      operationId: CreateLabels
      description: Adds the specified list of labels to the given resource (a document or folder)
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLabelsResponse'
        '480':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '483':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: TooManyLabelsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyLabelsException'
      parameters:
        - name: ResourceId
          in: path
          required: true
          description: The ID of the resource.
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Labels
              properties:
                Labels:
                  description: List of labels to add to the resource.
                  type: array
                  items:
                    $ref: '#/components/schemas/SharedLabel'
                  maxItems: 20
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    delete:
      operationId: DeleteLabels
      description: Deletes the specified list of labels from a resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteLabelsResponse'
        '480':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '483':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: ResourceId
          in: path
          required: true
          description: The ID of the resource.
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: labels
          in: query
          required: false
          description: List of labels to delete from the resource.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/SharedLabel'
            maxItems: 20
        - name: deleteAll
          in: query
          required: false
          description: Flag to request removal of all labels from the specified resource.
          schema:
            type: boolean
  '/api/v1/organizations/{OrganizationId}/subscriptions':
    post:
      operationId: CreateNotificationSubscription
      description: '<p>Configure Amazon WorkDocs to use Amazon SNS notifications. The endpoint receives a confirmation message, and must confirm the subscription.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/workdocs/latest/developerguide/subscribe-notifications.html">Subscribe to Notifications</a> in the <i>Amazon WorkDocs Developer Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateNotificationSubscriptionResponse'
        '480':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '481':
          description: TooManySubscriptionsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManySubscriptionsException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: OrganizationId
          in: path
          required: true
          description: The ID of the organization.
          schema:
            type: string
            pattern: '[&\w+-.@]+'
            minLength: 1
            maxLength: 256
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Endpoint
                - Protocol
                - SubscriptionType
              properties:
                Endpoint:
                  description: 'The endpoint to receive the notifications. If the protocol is HTTPS, the endpoint is a URL that begins with <code>https</code>.'
                  type: string
                  minLength: 1
                  maxLength: 256
                Protocol:
                  description: 'The protocol to use. The supported value is https, which delivers JSON-encoded messages using HTTPS POST.'
                  type: string
                  enum:
                    - HTTPS
                SubscriptionType:
                  description: The notification type.
                  type: string
                  enum:
                    - ALL
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeNotificationSubscriptions
      description: Lists the specified notification subscriptions.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeNotificationSubscriptionsResponse'
        '480':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '481':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: OrganizationId
          in: path
          required: true
          description: The ID of the organization.
          schema:
            type: string
            pattern: '[&\w+-.@]+'
            minLength: 1
            maxLength: 256
        - name: marker
          in: query
          required: false
          description: The marker for the next set of results. (You received this marker from a previous call.)
          schema:
            type: string
            minLength: 1
            maxLength: 2048
        - name: limit
          in: query
          required: false
          description: The maximum number of items to return with this call.
          schema:
            type: integer
            minimum: 1
            maximum: 999
  /api/v1/users:
    post:
      operationId: CreateUser
      description: Creates a user in a Simple AD or Microsoft AD directory. The status of a newly created user is "ACTIVE". New users can access Amazon WorkDocs.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        '480':
          description: EntityAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityAlreadyExistsException'
        '481':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '483':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Username
                - GivenName
                - Surname
                - Password
              properties:
                OrganizationId:
                  description: The ID of the organization.
                  type: string
                  pattern: '[&\w+-.@]+'
                  minLength: 1
                  maxLength: 256
                Username:
                  description: The login name of the user.
                  type: string
                  pattern: '[\w\-+.]+(@[a-zA-Z0-9.\-]+\.[a-zA-Z]+)?'
                  minLength: 1
                  maxLength: 256
                EmailAddress:
                  description: The email address of the user.
                  type: string
                  pattern: '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}'
                  minLength: 1
                  maxLength: 256
                GivenName:
                  description: The given name of the user.
                  type: string
                  minLength: 1
                  maxLength: 64
                Surname:
                  description: The surname of the user.
                  type: string
                  minLength: 1
                  maxLength: 64
                Password:
                  description: The password of the user.
                  type: string
                  pattern: '[\u0020-\u00FF]+'
                  minLength: 4
                  maxLength: 32
                  format: password
                TimeZoneId:
                  description: The time zone ID of the user.
                  type: string
                  minLength: 1
                  maxLength: 256
                StorageRule:
                  description: Describes the storage for a user.
                  type: object
                  properties:
                    StorageAllocatedInBytes:
                      $ref: '#/components/schemas/PositiveSizeType'
                      description: 'The amount of storage allocated, in bytes.'
                    StorageType:
                      $ref: '#/components/schemas/StorageType'
                      description: The type of storage.
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeUsers
      description: '<p>Describes the specified users. You can describe all users or filter the results (for example, by status or organization).</p> <p>By default, Amazon WorkDocs returns the first 24 active or pending users. If there are more results, the response includes a marker that you can use to request the next set of results.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeUsersResponse'
        '480':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '483':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArgumentException'
        '486':
          description: RequestedEntityTooLargeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestedEntityTooLargeException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: organizationId
          in: query
          required: false
          description: The ID of the organization.
          schema:
            type: string
            pattern: '[&\w+-.@]+'
            minLength: 1
            maxLength: 256
        - name: userIds
          in: query
          required: false
          description: The IDs of the users.
          schema:
            type: string
            pattern: '[&\w+-.@, ]+'
            minLength: 1
            maxLength: 2000
        - name: query
          in: query
          required: false
          description: A query to filter users by user name.
          schema:
            type: string
            pattern: '[\u0020-\uFFFF]+'
            minLength: 1
            maxLength: 512
            format: password
        - name: include
          in: query
          required: false
          description: The state of the users. Specify "ALL" to include inactive users.
          schema:
            type: string
            enum:
              - ALL
              - ACTIVE_PENDING
        - name: order
          in: query
          required: false
          description: The order for the results.
          schema:
            type: string
            enum:
              - ASCENDING
              - DESCENDING
        - name: sort
          in: query
          required: false
          description: The sorting criteria.
          schema:
            type: string
            enum:
              - USER_NAME
              - FULL_NAME
              - STORAGE_LIMIT
              - USER_STATUS
              - STORAGE_USED
        - name: marker
          in: query
          required: false
          description: The marker for the next set of results. (You received this marker from a previous call.)
          schema:
            type: string
            minLength: 1
            maxLength: 2048
        - name: limit
          in: query
          required: false
          description: The maximum number of items to return.
          schema:
            type: integer
            minimum: 1
            maximum: 999
        - name: fields
          in: query
          required: false
          description: A comma-separated list of values. Specify "STORAGE_METADATA" to include the user storage quota and utilization information.
          schema:
            type: string
            pattern: '[\w,]+'
            minLength: 1
            maxLength: 256
        - name: Limit
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: Marker
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
  '/api/v1/documents/{DocumentId}/versions/{VersionId}/comment/{CommentId}':
    delete:
      operationId: DeleteComment
      description: Deletes the specified comment from the document version.
      responses:
        '204':
          description: Success
        '480':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '481':
          description: ProhibitedStateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProhibitedStateException'
        '482':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '483':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '484':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: DocumentLockedForCommentsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentLockedForCommentsException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: DocumentId
          in: path
          required: true
          description: The ID of the document.
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
        - name: VersionId
          in: path
          required: true
          description: The ID of the document version.
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
        - name: CommentId
          in: path
          required: true
          description: The ID of the comment.
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/api/v1/documents/{DocumentId}':
    delete:
      operationId: DeleteDocument
      description: Permanently deletes the specified document and its associated metadata.
      responses:
        '204':
          description: Success
        '480':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '481':
          description: ProhibitedStateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProhibitedStateException'
        '482':
          description: ConflictingOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictingOperationException'
        '483':
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '484':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '485':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '486':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '487':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: DocumentId
          in: path
          required: true
          description: The ID of the document.
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDocument
      description: Retrieves details of a document.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDocumentResponse'
        '480':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '483':
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArgumentException'
        '484':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: InvalidPasswordException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPasswordException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: DocumentId
          in: path
          required: true
          description: The ID of the document.
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
        - name: includeCustomMetadata
          in: query
          required: false
          description: Set this to <code>TRUE</code> to include custom metadata in the response.
          schema:
            type: boolean
    patch:
      operationId: UpdateDocument
      description: 'Updates the specified attributes of a document. The user must have access to both the document and its parent folder, if applicable.'
      responses:
        '200':
          description: Success
        '480':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '481':
          description: EntityAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityAlreadyExistsException'
        '482':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: ProhibitedStateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProhibitedStateException'
        '484':
          description: ConflictingOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictingOperationException'
        '485':
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '486':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '487':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '488':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '489':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: DocumentId
          in: path
          required: true
          description: The ID of the document.
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  description: The name of the document.
                  type: string
                  pattern: '[\u0020-\u202D\u202F-\uFFFF]+'
                  minLength: 1
                  maxLength: 255
                ParentFolderId:
                  description: The ID of the parent folder.
                  type: string
                  pattern: '[\w+-.@]+'
                  minLength: 1
                  maxLength: 128
                ResourceState:
                  description: The resource state of the document. Only ACTIVE and RECYCLED are supported.
                  type: string
                  enum:
                    - ACTIVE
                    - RESTORING
                    - RECYCLING
                    - RECYCLED
  '/api/v1/folders/{FolderId}':
    delete:
      operationId: DeleteFolder
      description: Permanently deletes the specified folder and its contents.
      responses:
        '204':
          description: Success
        '480':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '481':
          description: ProhibitedStateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProhibitedStateException'
        '482':
          description: ConflictingOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictingOperationException'
        '483':
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '484':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '485':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '486':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '487':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: FolderId
          in: path
          required: true
          description: The ID of the folder.
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetFolder
      description: Retrieves the metadata of the specified folder.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFolderResponse'
        '480':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '483':
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArgumentException'
        '484':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: ProhibitedStateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProhibitedStateException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: FolderId
          in: path
          required: true
          description: The ID of the folder.
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
        - name: includeCustomMetadata
          in: query
          required: false
          description: Set to TRUE to include custom metadata in the response.
          schema:
            type: boolean
    patch:
      operationId: UpdateFolder
      description: 'Updates the specified attributes of the specified folder. The user must have access to both the folder and its parent folder, if applicable.'
      responses:
        '200':
          description: Success
        '480':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '481':
          description: EntityAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityAlreadyExistsException'
        '482':
          description: ProhibitedStateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProhibitedStateException'
        '483':
          description: ConflictingOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictingOperationException'
        '484':
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '485':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '486':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '487':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '488':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '489':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: FolderId
          in: path
          required: true
          description: The ID of the folder.
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  description: The name of the folder.
                  type: string
                  pattern: '[\u0020-\u202D\u202F-\uFFFF]+'
                  minLength: 1
                  maxLength: 255
                ParentFolderId:
                  description: The ID of the parent folder.
                  type: string
                  pattern: '[\w+-.@]+'
                  minLength: 1
                  maxLength: 128
                ResourceState:
                  description: The resource state of the folder. Only ACTIVE and RECYCLED are accepted values from the API.
                  type: string
                  enum:
                    - ACTIVE
                    - RESTORING
                    - RECYCLING
                    - RECYCLED
  '/api/v1/folders/{FolderId}/contents':
    delete:
      operationId: DeleteFolderContents
      description: Deletes the contents of the specified folder.
      responses:
        '204':
          description: Success
        '480':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '481':
          description: ProhibitedStateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProhibitedStateException'
        '482':
          description: ConflictingOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictingOperationException'
        '483':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '484':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '485':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '486':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: FolderId
          in: path
          required: true
          description: The ID of the folder.
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeFolderContents
      description: '<p>Describes the contents of the specified folder, including its documents and subfolders.</p> <p>By default, Amazon WorkDocs returns the first 100 active document and folder metadata items. If there are more results, the response includes a marker that you can use to request the next set of results. You can also request initialized documents.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeFolderContentsResponse'
        '480':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '481':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '482':
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArgumentException'
        '483':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: ProhibitedStateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProhibitedStateException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: FolderId
          in: path
          required: true
          description: The ID of the folder.
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
        - name: sort
          in: query
          required: false
          description: The sorting criteria.
          schema:
            type: string
            enum:
              - DATE
              - NAME
        - name: order
          in: query
          required: false
          description: The order for the contents of the folder.
          schema:
            type: string
            enum:
              - ASCENDING
              - DESCENDING
        - name: limit
          in: query
          required: false
          description: The maximum number of items to return with this call.
          schema:
            type: integer
            minimum: 1
            maximum: 999
        - name: marker
          in: query
          required: false
          description: The marker for the next set of results. This marker was received from a previous call.
          schema:
            type: string
            minLength: 1
            maxLength: 2048
        - name: type
          in: query
          required: false
          description: The type of items.
          schema:
            type: string
            enum:
              - ALL
              - DOCUMENT
              - FOLDER
        - name: include
          in: query
          required: false
          description: The contents to include. Specify "INITIALIZED" to include initialized documents.
          schema:
            type: string
            pattern: '[\w,]+'
            minLength: 1
            maxLength: 256
        - name: Limit
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: Marker
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
  '/api/v1/organizations/{OrganizationId}/subscriptions/{SubscriptionId}':
    delete:
      operationId: DeleteNotificationSubscription
      description: Deletes the specified subscription from the specified organization.
      responses:
        '200':
          description: Success
        '480':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '481':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '483':
          description: ProhibitedStateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProhibitedStateException'
      parameters:
        - name: SubscriptionId
          in: path
          required: true
          description: The ID of the subscription.
          schema:
            type: string
            pattern: '[&\w+-.@]+'
            minLength: 1
            maxLength: 256
        - name: OrganizationId
          in: path
          required: true
          description: The ID of the organization.
          schema:
            type: string
            pattern: '[&\w+-.@]+'
            minLength: 1
            maxLength: 256
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/api/v1/users/{UserId}':
    delete:
      operationId: DeleteUser
      description: Deletes the specified user from a Simple AD or Microsoft AD directory.
      responses:
        '204':
          description: Success
        '480':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '483':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: 'Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.'
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: UserId
          in: path
          required: true
          description: The ID of the user.
          schema:
            type: string
            pattern: '[&\w+-.@]+'
            minLength: 1
            maxLength: 256
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    patch:
      operationId: UpdateUser
      description: 'Updates the specified attributes of the specified user, and grants or revokes administrative privileges to the Amazon WorkDocs site.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserResponse'
        '480':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '483':
          description: IllegalUserStateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IllegalUserStateException'
        '484':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: DeactivatingLastSystemUserException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeactivatingLastSystemUserException'
        '487':
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArgumentException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: UserId
          in: path
          required: true
          description: The ID of the user.
          schema:
            type: string
            pattern: '[&\w+-.@]+'
            minLength: 1
            maxLength: 256
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                GivenName:
                  description: The given name of the user.
                  type: string
                  minLength: 1
                  maxLength: 64
                Surname:
                  description: The surname of the user.
                  type: string
                  minLength: 1
                  maxLength: 64
                Type:
                  description: The type of the user.
                  type: string
                  enum:
                    - USER
                    - ADMIN
                    - POWERUSER
                    - MINIMALUSER
                    - WORKSPACESUSER
                StorageRule:
                  description: Describes the storage for a user.
                  type: object
                  properties:
                    StorageAllocatedInBytes:
                      $ref: '#/components/schemas/PositiveSizeType'
                      description: 'The amount of storage allocated, in bytes.'
                    StorageType:
                      $ref: '#/components/schemas/StorageType'
                      description: The type of storage.
                TimeZoneId:
                  description: The time zone ID of the user.
                  type: string
                  minLength: 1
                  maxLength: 256
                Locale:
                  description: The locale of the user.
                  type: string
                  enum:
                    - en
                    - fr
                    - ko
                    - de
                    - es
                    - ja
                    - ru
                    - zh_CN
                    - zh_TW
                    - pt_BR
                    - default
                GrantPoweruserPrivileges:
                  description: Boolean value to determine whether the user is granted Poweruser privileges.
                  type: string
                  enum:
                    - 'TRUE'
                    - 'FALSE'
  /api/v1/activities:
    get:
      operationId: DescribeActivities
      description: Describes the user activities in a specified time period.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeActivitiesResponse'
        '480':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '481':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '482':
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArgumentException'
        '483':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: startTime
          in: query
          required: false
          description: The timestamp that determines the starting time of the activities. The response includes the activities performed after the specified timestamp.
          schema:
            type: string
            format: date-time
        - name: endTime
          in: query
          required: false
          description: The timestamp that determines the end time of the activities. The response includes the activities performed before the specified timestamp.
          schema:
            type: string
            format: date-time
        - name: organizationId
          in: query
          required: false
          description: The ID of the organization. This is a mandatory parameter when using administrative API (SigV4) requests.
          schema:
            type: string
            pattern: '[&\w+-.@]+'
            minLength: 1
            maxLength: 256
        - name: activityTypes
          in: query
          required: false
          description: 'Specifies which activity types to include in the response. If this field is left empty, all activity types are returned.'
          schema:
            type: string
            pattern: '[\w,]+'
            minLength: 1
            maxLength: 1024
        - name: resourceId
          in: query
          required: false
          description: The document or folder ID for which to describe activity types.
          schema:
            type: string
            pattern: '[&\w+-.@]+'
            minLength: 1
            maxLength: 256
        - name: userId
          in: query
          required: false
          description: The ID of the user who performed the action. The response includes activities pertaining to this user. This is an optional parameter and is only applicable for administrative API (SigV4) requests.
          schema:
            type: string
            pattern: '[&\w+-.@]+'
            minLength: 1
            maxLength: 256
        - name: includeIndirectActivities
          in: query
          required: false
          description: 'Includes indirect activities. An indirect activity results from a direct activity performed on a parent resource. For example, sharing a parent folder (the direct activity) shares all of the subfolders and documents within the parent folder (the indirect activity).'
          schema:
            type: boolean
        - name: limit
          in: query
          required: false
          description: The maximum number of items to return.
          schema:
            type: integer
            minimum: 1
            maximum: 999
        - name: marker
          in: query
          required: false
          description: The marker for the next set of results.
          schema:
            type: string
            pattern: '[\u0000-\u00FF]+'
            minLength: 1
            maxLength: 2048
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/api/v1/documents/{DocumentId}/versions/{VersionId}/comments':
    get:
      operationId: DescribeComments
      description: List all the comments for the specified document version.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeCommentsResponse'
        '480':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '481':
          description: ProhibitedStateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProhibitedStateException'
        '482':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '483':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '484':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: DocumentId
          in: path
          required: true
          description: The ID of the document.
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
        - name: VersionId
          in: path
          required: true
          description: The ID of the document version.
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
        - name: limit
          in: query
          required: false
          description: The maximum number of items to return.
          schema:
            type: integer
            minimum: 1
            maximum: 999
        - name: marker
          in: query
          required: false
          description: The marker for the next set of results. This marker was received from a previous call.
          schema:
            type: string
            pattern: '[\u0000-\u00FF]+'
            minLength: 1
            maxLength: 2048
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/api/v1/documents/{DocumentId}/versions':
    get:
      operationId: DescribeDocumentVersions
      description: '<p>Retrieves the document versions for the specified document.</p> <p>By default, only active versions are returned.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeDocumentVersionsResponse'
        '480':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '483':
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArgumentException'
        '484':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: ProhibitedStateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProhibitedStateException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: DocumentId
          in: path
          required: true
          description: The ID of the document.
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
        - name: marker
          in: query
          required: false
          description: The marker for the next set of results. (You received this marker from a previous call.)
          schema:
            type: string
            minLength: 1
            maxLength: 2048
        - name: limit
          in: query
          required: false
          description: The maximum number of versions to return with this call.
          schema:
            type: integer
            minimum: 1
            maximum: 999
        - name: include
          in: query
          required: false
          description: A comma-separated list of values. Specify "INITIALIZED" to include incomplete versions.
          schema:
            type: string
            pattern: '[\w,]+'
            minLength: 1
            maxLength: 256
        - name: fields
          in: query
          required: false
          description: Specify "SOURCE" to include initialized versions and a URL for the source document.
          schema:
            type: string
            pattern: '[\w,]+'
            minLength: 1
            maxLength: 256
        - name: Limit
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: Marker
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /api/v1/groups#searchQuery:
    get:
      operationId: DescribeGroups
      description: Describes the groups specified by the query. Groups are defined by the underlying Active Directory.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeGroupsResponse'
        '480':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '481':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '482':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: searchQuery
          in: query
          required: true
          description: A query to describe groups by group name.
          schema:
            type: string
            pattern: '[\u0020-\uFFFF]+'
            minLength: 1
            maxLength: 512
            format: password
        - name: organizationId
          in: query
          required: false
          description: The ID of the organization.
          schema:
            type: string
            pattern: '[&\w+-.@]+'
            minLength: 1
            maxLength: 256
        - name: marker
          in: query
          required: false
          description: The marker for the next set of results. (You received this marker from a previous call.)
          schema:
            type: string
            pattern: '[\u0000-\u00FF]+'
            minLength: 1
            maxLength: 2048
        - name: limit
          in: query
          required: false
          description: The maximum number of items to return with this call.
          schema:
            type: integer
            minimum: 1
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /api/v1/me/root#Authentication:
    get:
      operationId: DescribeRootFolders
      description: '<p>Describes the current user''s special folders; the <code>RootFolder</code> and the <code>RecycleBin</code>. <code>RootFolder</code> is the root of user''s files and folders and <code>RecycleBin</code> is the root of recycled items. This is not a valid action for SigV4 (administrative API) clients.</p> <p>This action requires an authentication token. To get an authentication token, register an application with Amazon WorkDocs. For more information, see <a href="https://docs.aws.amazon.com/workdocs/latest/developerguide/wd-auth-user.html">Authentication and Access Control for User Applications</a> in the <i>Amazon WorkDocs Developer Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeRootFoldersResponse'
        '480':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '481':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '482':
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArgumentException'
        '483':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: Authentication
          in: header
          required: true
          description: Amazon WorkDocs authentication token.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: limit
          in: query
          required: false
          description: The maximum number of items to return.
          schema:
            type: integer
            minimum: 1
            maximum: 999
        - name: marker
          in: query
          required: false
          description: The marker for the next set of results. (You received this marker from a previous call.)
          schema:
            type: string
            minLength: 1
            maxLength: 2048
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /api/v1/me#Authentication:
    get:
      operationId: GetCurrentUser
      description: '<p>Retrieves details of the current user for whom the authentication token was generated. This is not a valid action for SigV4 (administrative API) clients.</p> <p>This action requires an authentication token. To get an authentication token, register an application with Amazon WorkDocs. For more information, see <a href="https://docs.aws.amazon.com/workdocs/latest/developerguide/wd-auth-user.html">Authentication and Access Control for User Applications</a> in the <i>Amazon WorkDocs Developer Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCurrentUserResponse'
        '480':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '483':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: Authentication
          in: header
          required: true
          description: Amazon WorkDocs authentication token.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/api/v1/documents/{DocumentId}/path':
    get:
      operationId: GetDocumentPath
      description: '<p>Retrieves the path information (the hierarchy from the root folder) for the requested document.</p> <p>By default, Amazon WorkDocs returns a maximum of 100 levels upwards from the requested document and only includes the IDs of the parent folders in the path. You can limit the maximum number of levels. You can also request the names of the parent folders.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDocumentPathResponse'
        '480':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '483':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: DocumentId
          in: path
          required: true
          description: The ID of the document.
          schema:
            type: string
            pattern: '[&\w+-.@]+'
            minLength: 1
            maxLength: 256
        - name: limit
          in: query
          required: false
          description: The maximum number of levels in the hierarchy to return.
          schema:
            type: integer
            minimum: 1
            maximum: 999
        - name: fields
          in: query
          required: false
          description: A comma-separated list of values. Specify <code>NAME</code> to include the names of the parent folders.
          schema:
            type: string
            pattern: '[\w,]+'
            minLength: 1
            maxLength: 256
        - name: marker
          in: query
          required: false
          description: This value is not supported.
          schema:
            type: string
            minLength: 1
            maxLength: 2048
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/api/v1/folders/{FolderId}/path':
    get:
      operationId: GetFolderPath
      description: '<p>Retrieves the path information (the hierarchy from the root folder) for the specified folder.</p> <p>By default, Amazon WorkDocs returns a maximum of 100 levels upwards from the requested folder and only includes the IDs of the parent folders in the path. You can limit the maximum number of levels. You can also request the parent folder names.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFolderPathResponse'
        '480':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '483':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: FolderId
          in: path
          required: true
          description: The ID of the folder.
          schema:
            type: string
            pattern: '[&\w+-.@]+'
            minLength: 1
            maxLength: 256
        - name: limit
          in: query
          required: false
          description: The maximum number of levels in the hierarchy to return.
          schema:
            type: integer
            minimum: 1
            maximum: 999
        - name: fields
          in: query
          required: false
          description: A comma-separated list of values. Specify "NAME" to include the names of the parent folders.
          schema:
            type: string
            pattern: '[\w,]+'
            minLength: 1
            maxLength: 256
        - name: marker
          in: query
          required: false
          description: This value is not supported.
          schema:
            type: string
            minLength: 1
            maxLength: 2048
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /api/v1/resources:
    get:
      operationId: GetResources
      description: 'Retrieves a collection of resources, including folders and documents. The only <code>CollectionType</code> supported is <code>SHARED_WITH_ME</code>.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResourcesResponse'
        '480':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '481':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '482':
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArgumentException'
        '483':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: The Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: userId
          in: query
          required: false
          description: The user ID for the resource collection. This is a required field for accessing the API operation using IAM credentials.
          schema:
            type: string
            pattern: '[&\w+-.@]+'
            minLength: 1
            maxLength: 256
        - name: collectionType
          in: query
          required: false
          description: The collection type.
          schema:
            type: string
            enum:
              - SHARED_WITH_ME
        - name: limit
          in: query
          required: false
          description: The maximum number of resources to return.
          schema:
            type: integer
            minimum: 1
            maximum: 999
        - name: marker
          in: query
          required: false
          description: The marker for the next set of results. This marker was received from a previous call.
          schema:
            type: string
            minLength: 1
            maxLength: 2048
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /api/v1/documents:
    post:
      operationId: InitiateDocumentVersionUpload
      description: '<p>Creates a new document object and version object.</p> <p>The client specifies the parent folder ID and name of the document to upload. The ID is optionally specified when creating a new version of an existing document. This is the first step to upload a document. Next, upload the document to the URL returned from the call, and then call <a>UpdateDocumentVersion</a>.</p> <p>To cancel the document upload, call <a>AbortDocumentVersionUpload</a>.</p>'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitiateDocumentVersionUploadResponse'
        '480':
          description: EntityNotExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotExistsException'
        '481':
          description: EntityAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityAlreadyExistsException'
        '482':
          description: StorageLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageLimitExceededException'
        '483':
          description: StorageLimitWillExceedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageLimitWillExceedException'
        '484':
          description: ProhibitedStateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProhibitedStateException'
        '485':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '486':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '487':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '488':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '489':
          description: DraftUploadOutOfSyncException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DraftUploadOutOfSyncException'
        '490':
          description: ResourceAlreadyCheckedOutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAlreadyCheckedOutException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ParentFolderId
              properties:
                Id:
                  description: The ID of the document.
                  type: string
                  pattern: '[\w+-.@]+'
                  minLength: 1
                  maxLength: 128
                Name:
                  description: The name of the document.
                  type: string
                  pattern: '[\u0020-\u202D\u202F-\uFFFF]+'
                  minLength: 1
                  maxLength: 255
                ContentCreatedTimestamp:
                  description: The timestamp when the content of the document was originally created.
                  type: string
                  format: date-time
                ContentModifiedTimestamp:
                  description: The timestamp when the content of the document was modified.
                  type: string
                  format: date-time
                ContentType:
                  description: The content type of the document.
                  type: string
                  minLength: 1
                  maxLength: 128
                DocumentSizeInBytes:
                  description: 'The size of the document, in bytes.'
                  type: integer
                ParentFolderId:
                  description: The ID of the parent folder.
                  type: string
                  pattern: '[\w+-.@]+'
                  minLength: 1
                  maxLength: 128
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/api/v1/resources/{ResourceId}/permissions/{PrincipalId}':
    delete:
      operationId: RemoveResourcePermission
      description: Removes the permission for the specified principal from the specified resource.
      responses:
        '204':
          description: Success
        '480':
          description: UnauthorizedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedOperationException'
        '481':
          description: UnauthorizedResourceAccessException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResourceAccessException'
        '482':
          description: FailedDependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedDependencyException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      parameters:
        - name: Authentication
          in: header
          required: false
          description: Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.
          schema:
            type: string
            minLength: 1
            maxLength: 8199
            format: password
        - name: ResourceId
          in: path
          required: true
          description: The ID of the resource.
          schema:
            type: string
            pattern: '[\w+-.@]+'
            minLength: 1
            maxLength: 128
        - name: PrincipalId
          in: path
          required: true
          description: The principal ID of the resource.
          schema:
            type: string
            pattern: '[&\w+-.@]+'
            minLength: 1
            maxLength: 256
        - name: type
          in: query
          required: false
          description: The principal type of the resource.
          schema:
            type: string
            enum:
              - USER
              - GROUP
              - INVITE
              - ANONYMOUS
              - ORGANIZATION
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    EntityNotExistsException: {}
    ProhibitedStateException: {}
    UnauthorizedOperationException: {}
    UnauthorizedResourceAccessException: {}
    FailedDependencyException: {}
    ServiceUnavailableException: {}
    ActivateUserResponse:
      type: object
      properties:
        User:
          $ref: '#/components/schemas/User'
          description: The user information.
    AddResourcePermissionsResponse:
      type: object
      properties:
        ShareResults:
          $ref: '#/components/schemas/ShareResultsList'
          description: The share results.
    SharePrincipal:
      type: object
      required:
        - Id
        - Type
        - Role
      properties:
        Id:
          $ref: '#/components/schemas/IdType'
          description: The ID of the recipient.
        Type:
          $ref: '#/components/schemas/PrincipalType'
          description: The type of the recipient.
        Role:
          $ref: '#/components/schemas/RoleType'
          description: The role of the recipient.
      description: 'Describes the recipient type and ID, if available.'
    BooleanType:
      type: boolean
    MessageType:
      type: string
      minLength: 0
      maxLength: 2048
      format: password
    CreateCommentResponse:
      type: object
      properties:
        Comment:
          $ref: '#/components/schemas/Comment'
          description: The comment that has been created.
    DocumentLockedForCommentsException: {}
    InvalidCommentOperationException: {}
    CreateCustomMetadataResponse:
      type: object
      properties: {}
    CustomMetadataValueType:
      type: string
      pattern: '[a-zA-Z0-9._+-/=][a-zA-Z0-9 ._+-/=]*'
      minLength: 1
      maxLength: 256
    CustomMetadataLimitExceededException: {}
    CreateFolderResponse:
      type: object
      properties:
        Metadata:
          $ref: '#/components/schemas/FolderMetadata'
          description: The metadata of the folder.
    EntityAlreadyExistsException: {}
    ConflictingOperationException: {}
    LimitExceededException: {}
    CreateLabelsResponse:
      type: object
      properties: {}
    SharedLabel:
      type: string
      pattern: '[a-zA-Z0-9._+-/=][a-zA-Z0-9 ._+-/=]*'
      minLength: 1
      maxLength: 32
    TooManyLabelsException: {}
    CreateNotificationSubscriptionResponse:
      type: object
      properties:
        Subscription:
          $ref: '#/components/schemas/Subscription'
          description: The subscription.
    TooManySubscriptionsException: {}
    CreateUserResponse:
      type: object
      properties:
        User:
          $ref: '#/components/schemas/User'
          description: The user information.
    PositiveSizeType:
      type: integer
      minimum: 0
    StorageType:
      type: string
      enum:
        - UNLIMITED
        - QUOTA
    DeleteCustomMetadataResponse:
      type: object
      properties: {}
    CustomMetadataKeyType:
      type: string
      pattern: '[a-zA-Z0-9._+-/=][a-zA-Z0-9 ._+-/=]*'
      minLength: 1
      maxLength: 56
    ConcurrentModificationException: {}
    DeleteLabelsResponse:
      type: object
      properties: {}
    DescribeActivitiesResponse:
      type: object
      properties:
        UserActivities:
          $ref: '#/components/schemas/UserActivities'
          description: The list of activities for the specified user and time period.
        Marker:
          $ref: '#/components/schemas/MarkerType'
          description: The marker for the next set of results.
    InvalidArgumentException: {}
    DescribeCommentsResponse:
      type: object
      properties:
        Comments:
          $ref: '#/components/schemas/CommentList'
          description: The list of comments for the specified document version.
        Marker:
          $ref: '#/components/schemas/MarkerType'
          description: The marker for the next set of results. This marker was received from a previous call.
    DescribeDocumentVersionsResponse:
      type: object
      properties:
        DocumentVersions:
          $ref: '#/components/schemas/DocumentVersionMetadataList'
          description: The document versions.
        Marker:
          $ref: '#/components/schemas/PageMarkerType'
          description: 'The marker to use when requesting the next set of results. If there are no additional results, the string is empty.'
    DescribeFolderContentsResponse:
      type: object
      properties:
        Folders:
          $ref: '#/components/schemas/FolderMetadataList'
          description: The subfolders in the specified folder.
        Documents:
          $ref: '#/components/schemas/DocumentMetadataList'
          description: The documents in the specified folder.
        Marker:
          $ref: '#/components/schemas/PageMarkerType'
          description: 'The marker to use when requesting the next set of results. If there are no additional results, the string is empty.'
    DescribeGroupsResponse:
      type: object
      properties:
        Groups:
          $ref: '#/components/schemas/GroupMetadataList'
          description: The list of groups.
        Marker:
          $ref: '#/components/schemas/MarkerType'
          description: 'The marker to use when requesting the next set of results. If there are no additional results, the string is empty.'
    DescribeNotificationSubscriptionsResponse:
      type: object
      properties:
        Subscriptions:
          $ref: '#/components/schemas/SubscriptionList'
          description: The subscriptions.
        Marker:
          $ref: '#/components/schemas/PageMarkerType'
          description: 'The marker to use when requesting the next set of results. If there are no additional results, the string is empty.'
    DescribeResourcePermissionsResponse:
      type: object
      properties:
        Principals:
          $ref: '#/components/schemas/PrincipalList'
          description: The principals.
        Marker:
          $ref: '#/components/schemas/PageMarkerType'
          description: 'The marker to use when requesting the next set of results. If there are no additional results, the string is empty.'
    DescribeRootFoldersResponse:
      type: object
      properties:
        Folders:
          $ref: '#/components/schemas/FolderMetadataList'
          description: The user's special folders.
        Marker:
          $ref: '#/components/schemas/PageMarkerType'
          description: The marker for the next set of results.
    DescribeUsersResponse:
      type: object
      properties:
        Users:
          $ref: '#/components/schemas/OrganizationUserList'
          description: The users.
        TotalNumberOfUsers:
          allOf:
            - $ref: '#/components/schemas/SizeType'
            - deprecated: true
              description: The total number of users included in the results.
        Marker:
          $ref: '#/components/schemas/PageMarkerType'
          description: 'The marker to use when requesting the next set of results. If there are no additional results, the string is empty.'
    RequestedEntityTooLargeException: {}
    GetCurrentUserResponse:
      type: object
      properties:
        User:
          $ref: '#/components/schemas/User'
          description: Metadata of the user.
    GetDocumentResponse:
      type: object
      properties:
        Metadata:
          $ref: '#/components/schemas/DocumentMetadata'
          description: The metadata details of the document.
        CustomMetadata:
          $ref: '#/components/schemas/CustomMetadataMap'
          description: The custom metadata on the document.
    InvalidPasswordException: {}
    GetDocumentPathResponse:
      type: object
      properties:
        Path:
          $ref: '#/components/schemas/ResourcePath'
          description: The path information.
    GetDocumentVersionResponse:
      type: object
      properties:
        Metadata:
          $ref: '#/components/schemas/DocumentVersionMetadata'
          description: The version metadata.
        CustomMetadata:
          $ref: '#/components/schemas/CustomMetadataMap'
          description: The custom metadata on the document version.
    GetFolderResponse:
      type: object
      properties:
        Metadata:
          $ref: '#/components/schemas/FolderMetadata'
          description: The metadata of the folder.
        CustomMetadata:
          $ref: '#/components/schemas/CustomMetadataMap'
          description: The custom metadata on the folder.
    GetFolderPathResponse:
      type: object
      properties:
        Path:
          $ref: '#/components/schemas/ResourcePath'
          description: The path information.
    GetResourcesResponse:
      type: object
      properties:
        Folders:
          $ref: '#/components/schemas/FolderMetadataList'
          description: The folders in the specified folder.
        Documents:
          $ref: '#/components/schemas/DocumentMetadataList'
          description: The documents in the specified collection.
        Marker:
          $ref: '#/components/schemas/PageMarkerType'
          description: 'The marker to use when requesting the next set of results. If there are no additional results, the string is empty.'
    InitiateDocumentVersionUploadResponse:
      type: object
      properties:
        Metadata:
          $ref: '#/components/schemas/DocumentMetadata'
          description: The document metadata.
        UploadMetadata:
          $ref: '#/components/schemas/UploadMetadata'
          description: The upload metadata.
    StorageLimitExceededException: {}
    StorageLimitWillExceedException: {}
    DraftUploadOutOfSyncException: {}
    ResourceAlreadyCheckedOutException: {}
    InvalidOperationException: {}
    UpdateUserResponse:
      type: object
      properties:
        User:
          $ref: '#/components/schemas/User'
          description: The user information.
    IllegalUserStateException: {}
    DeactivatingLastSystemUserException: {}
    AuthenticationHeaderType:
      type: string
      minLength: 1
      maxLength: 8199
      format: password
    ResourceIdType:
      type: string
      pattern: '[\w+-.@]+'
      minLength: 1
      maxLength: 128
    DocumentVersionIdType:
      type: string
      pattern: '[\w+-.@]+'
      minLength: 1
      maxLength: 128
    AbortDocumentVersionUploadRequest:
      type: object
      title: AbortDocumentVersionUploadRequest
      properties: {}
    IdType:
      type: string
      pattern: '[&\w+-.@]+'
      minLength: 1
      maxLength: 256
    ActivateUserRequest:
      type: object
      title: ActivateUserRequest
      properties: {}
    User:
      type: object
      properties:
        Id:
          $ref: '#/components/schemas/IdType'
          description: The ID of the user.
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The login name of the user.
        EmailAddress:
          $ref: '#/components/schemas/EmailAddressType'
          description: The email address of the user.
        GivenName:
          $ref: '#/components/schemas/UserAttributeValueType'
          description: The given name of the user.
        Surname:
          $ref: '#/components/schemas/UserAttributeValueType'
          description: The surname of the user.
        OrganizationId:
          $ref: '#/components/schemas/IdType'
          description: The ID of the organization.
        RootFolderId:
          $ref: '#/components/schemas/ResourceIdType'
          description: The ID of the root folder.
        RecycleBinFolderId:
          $ref: '#/components/schemas/ResourceIdType'
          description: The ID of the recycle bin folder.
        Status:
          $ref: '#/components/schemas/UserStatusType'
          description: The status of the user.
        Type:
          $ref: '#/components/schemas/UserType'
          description: The type of user.
        CreatedTimestamp:
          $ref: '#/components/schemas/TimestampType'
          description: The time when the user was created.
        ModifiedTimestamp:
          $ref: '#/components/schemas/TimestampType'
          description: The time when the user was modified.
        TimeZoneId:
          $ref: '#/components/schemas/TimeZoneIdType'
          description: The time zone ID of the user.
        Locale:
          $ref: '#/components/schemas/LocaleType'
          description: The locale of the user.
        Storage:
          $ref: '#/components/schemas/UserStorageMetadata'
          description: The storage for the user.
      description: Describes a user.
    ActivityType:
      type: string
      enum:
        - DOCUMENT_CHECKED_IN
        - DOCUMENT_CHECKED_OUT
        - DOCUMENT_RENAMED
        - DOCUMENT_VERSION_UPLOADED
        - DOCUMENT_VERSION_DELETED
        - DOCUMENT_VERSION_VIEWED
        - DOCUMENT_VERSION_DOWNLOADED
        - DOCUMENT_RECYCLED
        - DOCUMENT_RESTORED
        - DOCUMENT_REVERTED
        - DOCUMENT_SHARED
        - DOCUMENT_UNSHARED
        - DOCUMENT_SHARE_PERMISSION_CHANGED
        - DOCUMENT_SHAREABLE_LINK_CREATED
        - DOCUMENT_SHAREABLE_LINK_REMOVED
        - DOCUMENT_SHAREABLE_LINK_PERMISSION_CHANGED
        - DOCUMENT_MOVED
        - DOCUMENT_COMMENT_ADDED
        - DOCUMENT_COMMENT_DELETED
        - DOCUMENT_ANNOTATION_ADDED
        - DOCUMENT_ANNOTATION_DELETED
        - FOLDER_CREATED
        - FOLDER_DELETED
        - FOLDER_RENAMED
        - FOLDER_RECYCLED
        - FOLDER_RESTORED
        - FOLDER_SHARED
        - FOLDER_UNSHARED
        - FOLDER_SHARE_PERMISSION_CHANGED
        - FOLDER_SHAREABLE_LINK_CREATED
        - FOLDER_SHAREABLE_LINK_REMOVED
        - FOLDER_SHAREABLE_LINK_PERMISSION_CHANGED
        - FOLDER_MOVED
    TimestampType:
      type: string
      format: date-time
    UserMetadata:
      type: object
      properties:
        Id:
          $ref: '#/components/schemas/IdType'
          description: The ID of the user.
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The name of the user.
        GivenName:
          $ref: '#/components/schemas/UserAttributeValueType'
          description: The given name of the user before a rename operation.
        Surname:
          $ref: '#/components/schemas/UserAttributeValueType'
          description: The surname of the user.
        EmailAddress:
          $ref: '#/components/schemas/EmailAddressType'
          description: The email address of the user.
      description: Describes the metadata of the user.
    Participants:
      type: object
      properties:
        Users:
          $ref: '#/components/schemas/UserMetadataList'
          description: The list of users.
        Groups:
          $ref: '#/components/schemas/GroupMetadataList'
          description: The list of user groups.
      description: Describes the users or user groups.
    ResourceMetadata:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/ResourceType'
          description: The type of resource.
        Name:
          $ref: '#/components/schemas/ResourceNameType'
          description: The name of the resource.
        OriginalName:
          $ref: '#/components/schemas/ResourceNameType'
          description: The original name of the resource before a rename operation.
        Id:
          $ref: '#/components/schemas/ResourceIdType'
          description: The ID of the resource.
        VersionId:
          $ref: '#/components/schemas/DocumentVersionIdType'
          description: The version ID of the resource. This is an optional field and is filled for action on document version.
        Owner:
          $ref: '#/components/schemas/UserMetadata'
          description: The owner of the resource.
        ParentId:
          $ref: '#/components/schemas/ResourceIdType'
          description: The parent ID of the resource before a rename operation.
      description: Describes the metadata of a resource.
    CommentMetadata:
      type: object
      properties:
        CommentId:
          $ref: '#/components/schemas/CommentIdType'
          description: The ID of the comment.
        Contributor:
          $ref: '#/components/schemas/User'
          description: The user who made the comment.
        CreatedTimestamp:
          $ref: '#/components/schemas/TimestampType'
          description: The timestamp that the comment was created.
        CommentStatus:
          $ref: '#/components/schemas/CommentStatusType'
          description: The status of the comment.
        RecipientId:
          $ref: '#/components/schemas/IdType'
          description: The ID of the user being replied to.
      description: Describes the metadata of a comment.
    Activity:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/ActivityType'
          description: The activity type.
        TimeStamp:
          $ref: '#/components/schemas/TimestampType'
          description: The timestamp when the action was performed.
        IsIndirectActivity:
          $ref: '#/components/schemas/BooleanType'
          description: 'Indicates whether an activity is indirect or direct. An indirect activity results from a direct activity performed on a parent resource. For example, sharing a parent folder (the direct activity) shares all of the subfolders and documents within the parent folder (the indirect activity).'
        OrganizationId:
          $ref: '#/components/schemas/IdType'
          description: The ID of the organization.
        Initiator:
          $ref: '#/components/schemas/UserMetadata'
          description: The user who performed the action.
        Participants:
          $ref: '#/components/schemas/Participants'
          description: 'The list of users or groups impacted by this action. This is an optional field and is filled for the following sharing activities: DOCUMENT_SHARED, DOCUMENT_SHARED, DOCUMENT_UNSHARED, FOLDER_SHARED, FOLDER_UNSHARED.'
        ResourceMetadata:
          $ref: '#/components/schemas/ResourceMetadata'
          description: The metadata of the resource involved in the user action.
        OriginalParent:
          $ref: '#/components/schemas/ResourceMetadata'
          description: The original parent of the resource. This is an optional field and is filled for move activities.
        CommentMetadata:
          $ref: '#/components/schemas/CommentMetadata'
          description: Metadata of the commenting activity. This is an optional field and is filled for commenting activities.
      description: Describes the activity information.
    ActivityNamesFilterType:
      type: string
      pattern: '[\w,]+'
      minLength: 1
      maxLength: 1024
    SharePrincipalList:
      type: array
      items:
        $ref: '#/components/schemas/SharePrincipal'
    NotificationOptions:
      type: object
      properties:
        SendEmail:
          $ref: '#/components/schemas/BooleanType'
          description: Boolean value to indicate an email notification should be sent to the receipients.
        EmailMessage:
          $ref: '#/components/schemas/MessageType'
          description: Text value to be included in the email body.
      description: Set of options which defines notification preferences of given action.
    AddResourcePermissionsRequest:
      type: object
      required:
        - Principals
      title: AddResourcePermissionsRequest
      properties:
        Principals:
          $ref: '#/components/schemas/SharePrincipalList'
          description: 'The users, groups, or organization being granted permission.'
        NotificationOptions:
          $ref: '#/components/schemas/NotificationOptions'
          description: The notification options.
    ShareResultsList:
      type: array
      items:
        $ref: '#/components/schemas/ShareResult'
    BooleanEnumType:
      type: string
      enum:
        - 'TRUE'
        - 'FALSE'
    CommentIdType:
      type: string
      pattern: '[\w+-.@]+'
      minLength: 1
      maxLength: 128
    CommentTextType:
      type: string
      minLength: 1
      maxLength: 2048
      format: password
    CommentStatusType:
      type: string
      enum:
        - DRAFT
        - PUBLISHED
        - DELETED
    CommentVisibilityType:
      type: string
      enum:
        - PUBLIC
        - PRIVATE
    Comment:
      type: object
      required:
        - CommentId
      properties:
        CommentId:
          $ref: '#/components/schemas/CommentIdType'
          description: The ID of the comment.
        ParentId:
          $ref: '#/components/schemas/CommentIdType'
          description: The ID of the parent comment.
        ThreadId:
          $ref: '#/components/schemas/CommentIdType'
          description: The ID of the root comment in the thread.
        Text:
          $ref: '#/components/schemas/CommentTextType'
          description: The text of the comment.
        Contributor:
          $ref: '#/components/schemas/User'
          description: The details of the user who made the comment.
        CreatedTimestamp:
          $ref: '#/components/schemas/TimestampType'
          description: The time that the comment was created.
        Status:
          $ref: '#/components/schemas/CommentStatusType'
          description: The status of the comment.
        Visibility:
          $ref: '#/components/schemas/CommentVisibilityType'
          description: 'The visibility of the comment. Options are either PRIVATE, where the comment is visible only to the comment author and document owner and co-owners, or PUBLIC, where the comment is visible to document owners, co-owners, and contributors.'
        RecipientId:
          $ref: '#/components/schemas/IdType'
          description: 'If the comment is a reply to another user''s comment, this field contains the user ID of the user being replied to.'
      description: Describes a comment.
    CommentList:
      type: array
      items:
        $ref: '#/components/schemas/Comment'
    CreateCommentRequest:
      type: object
      required:
        - Text
      title: CreateCommentRequest
      properties:
        ParentId:
          $ref: '#/components/schemas/CommentIdType'
          description: The ID of the parent comment.
        ThreadId:
          $ref: '#/components/schemas/CommentIdType'
          description: The ID of the root comment in the thread.
        Text:
          $ref: '#/components/schemas/CommentTextType'
          description: The text of the comment.
        Visibility:
          $ref: '#/components/schemas/CommentVisibilityType'
          description: 'The visibility of the comment. Options are either PRIVATE, where the comment is visible only to the comment author and document owner and co-owners, or PUBLIC, where the comment is visible to document owners, co-owners, and contributors.'
        NotifyCollaborators:
          $ref: '#/components/schemas/BooleanType'
          description: Set this parameter to TRUE to send an email out to the document collaborators after the comment is created.
    CustomMetadataMap:
      type: object
      minProperties: 1
      maxProperties: 8
      additionalProperties:
        $ref: '#/components/schemas/CustomMetadataValueType'
    CreateCustomMetadataRequest:
      type: object
      required:
        - CustomMetadata
      title: CreateCustomMetadataRequest
      properties:
        CustomMetadata:
          $ref: '#/components/schemas/CustomMetadataMap'
          description: Custom metadata in the form of name-value pairs.
    ResourceNameType:
      type: string
      pattern: '[\u0020-\u202D\u202F-\uFFFF]+'
      minLength: 1
      maxLength: 255
    CreateFolderRequest:
      type: object
      required:
        - ParentFolderId
      title: CreateFolderRequest
      properties:
        Name:
          $ref: '#/components/schemas/ResourceNameType'
          description: The name of the new folder.
        ParentFolderId:
          $ref: '#/components/schemas/ResourceIdType'
          description: The ID of the parent folder.
    FolderMetadata:
      type: object
      properties:
        Id:
          $ref: '#/components/schemas/ResourceIdType'
          description: The ID of the folder.
        Name:
          $ref: '#/components/schemas/ResourceNameType'
          description: The name of the folder.
        CreatorId:
          $ref: '#/components/schemas/IdType'
          description: The ID of the creator.
        ParentFolderId:
          $ref: '#/components/schemas/ResourceIdType'
          description: The ID of the parent folder.
        CreatedTimestamp:
          $ref: '#/components/schemas/TimestampType'
          description: The time when the folder was created.
        ModifiedTimestamp:
          $ref: '#/components/schemas/TimestampType'
          description: The time when the folder was updated.
        ResourceState:
          $ref: '#/components/schemas/ResourceStateType'
          description: The resource state of the folder.
        Signature:
          $ref: '#/components/schemas/HashType'
          description: The unique identifier created from the subfolders and documents of the folder.
        Labels:
          $ref: '#/components/schemas/SharedLabels'
          description: List of labels on the folder.
        Size:
          $ref: '#/components/schemas/SizeType'
          description: The size of the folder metadata.
        LatestVersionSize:
          $ref: '#/components/schemas/SizeType'
          description: The size of the latest version of the folder metadata.
      description: Describes a folder.
    SharedLabels:
      type: array
      items:
        $ref: '#/components/schemas/SharedLabel'
      maxItems: 20
    CreateLabelsRequest:
      type: object
      required:
        - Labels
      title: CreateLabelsRequest
      properties:
        Labels:
          $ref: '#/components/schemas/SharedLabels'
          description: List of labels to add to the resource.
    SubscriptionEndPointType:
      type: string
      minLength: 1
      maxLength: 256
    SubscriptionProtocolType:
      type: string
      enum:
        - HTTPS
    SubscriptionType:
      type: string
      enum:
        - ALL
    CreateNotificationSubscriptionRequest:
      type: object
      required:
        - Endpoint
        - Protocol
        - SubscriptionType
      title: CreateNotificationSubscriptionRequest
      properties:
        Endpoint:
          $ref: '#/components/schemas/SubscriptionEndPointType'
          description: 'The endpoint to receive the notifications. If the protocol is HTTPS, the endpoint is a URL that begins with <code>https</code>.'
        Protocol:
          $ref: '#/components/schemas/SubscriptionProtocolType'
          description: 'The protocol to use. The supported value is https, which delivers JSON-encoded messages using HTTPS POST.'
        SubscriptionType:
          $ref: '#/components/schemas/SubscriptionType'
          description: The notification type.
    Subscription:
      type: object
      properties:
        SubscriptionId:
          $ref: '#/components/schemas/IdType'
          description: The ID of the subscription.
        EndPoint:
          $ref: '#/components/schemas/SubscriptionEndPointType'
          description: The endpoint of the subscription.
        Protocol:
          $ref: '#/components/schemas/SubscriptionProtocolType'
          description: The protocol of the subscription.
      description: Describes a subscription.
    UsernameType:
      type: string
      pattern: '[\w\-+.]+(@[a-zA-Z0-9.\-]+\.[a-zA-Z]+)?'
      minLength: 1
      maxLength: 256
    EmailAddressType:
      type: string
      pattern: '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}'
      minLength: 1
      maxLength: 256
    UserAttributeValueType:
      type: string
      minLength: 1
      maxLength: 64
    PasswordType:
      type: string
      pattern: '[\u0020-\u00FF]+'
      minLength: 4
      maxLength: 32
      format: password
    TimeZoneIdType:
      type: string
      minLength: 1
      maxLength: 256
    StorageRuleType:
      type: object
      properties:
        StorageAllocatedInBytes:
          $ref: '#/components/schemas/PositiveSizeType'
          description: 'The amount of storage allocated, in bytes.'
        StorageType:
          $ref: '#/components/schemas/StorageType'
          description: The type of storage.
      description: Describes the storage for a user.
    CreateUserRequest:
      type: object
      required:
        - Username
        - GivenName
        - Surname
        - Password
      title: CreateUserRequest
      properties:
        OrganizationId:
          $ref: '#/components/schemas/IdType'
          description: The ID of the organization.
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The login name of the user.
        EmailAddress:
          $ref: '#/components/schemas/EmailAddressType'
          description: The email address of the user.
        GivenName:
          $ref: '#/components/schemas/UserAttributeValueType'
          description: The given name of the user.
        Surname:
          $ref: '#/components/schemas/UserAttributeValueType'
          description: The surname of the user.
        Password:
          $ref: '#/components/schemas/PasswordType'
          description: The password of the user.
        TimeZoneId:
          $ref: '#/components/schemas/TimeZoneIdType'
          description: The time zone ID of the user.
        StorageRule:
          $ref: '#/components/schemas/StorageRuleType'
          description: The amount of storage for the user.
    CustomMetadataKeyList:
      type: array
      items:
        $ref: '#/components/schemas/CustomMetadataKeyType'
      maxItems: 8
    DeactivateUserRequest:
      type: object
      title: DeactivateUserRequest
      properties: {}
    DeleteCommentRequest:
      type: object
      title: DeleteCommentRequest
      properties: {}
    DeleteCustomMetadataRequest:
      type: object
      title: DeleteCustomMetadataRequest
      properties: {}
    DeleteDocumentRequest:
      type: object
      title: DeleteDocumentRequest
      properties: {}
    DeleteFolderContentsRequest:
      type: object
      title: DeleteFolderContentsRequest
      properties: {}
    DeleteFolderRequest:
      type: object
      title: DeleteFolderRequest
      properties: {}
    DeleteLabelsRequest:
      type: object
      title: DeleteLabelsRequest
      properties: {}
    DeleteNotificationSubscriptionRequest:
      type: object
      title: DeleteNotificationSubscriptionRequest
      properties: {}
    DeleteUserRequest:
      type: object
      title: DeleteUserRequest
      properties: {}
    LimitType:
      type: integer
      minimum: 1
      maximum: 999
    MarkerType:
      type: string
      pattern: '[\u0000-\u00FF]+'
      minLength: 1
      maxLength: 2048
    DescribeActivitiesRequest:
      type: object
      title: DescribeActivitiesRequest
      properties: {}
    UserActivities:
      type: array
      items:
        $ref: '#/components/schemas/Activity'
    DescribeCommentsRequest:
      type: object
      title: DescribeCommentsRequest
      properties: {}
    PageMarkerType:
      type: string
      minLength: 1
      maxLength: 2048
    FieldNamesType:
      type: string
      pattern: '[\w,]+'
      minLength: 1
      maxLength: 256
    DescribeDocumentVersionsRequest:
      type: object
      title: DescribeDocumentVersionsRequest
      properties: {}
    DocumentVersionMetadataList:
      type: array
      items:
        $ref: '#/components/schemas/DocumentVersionMetadata'
    ResourceSortType:
      type: string
      enum:
        - DATE
        - NAME
    OrderType:
      type: string
      enum:
        - ASCENDING
        - DESCENDING
    FolderContentType:
      type: string
      enum:
        - ALL
        - DOCUMENT
        - FOLDER
    DescribeFolderContentsRequest:
      type: object
      title: DescribeFolderContentsRequest
      properties: {}
    FolderMetadataList:
      type: array
      items:
        $ref: '#/components/schemas/FolderMetadata'
    DocumentMetadataList:
      type: array
      items:
        $ref: '#/components/schemas/DocumentMetadata'
    SearchQueryType:
      type: string
      pattern: '[\u0020-\uFFFF]+'
      minLength: 1
      maxLength: 512
      format: password
    PositiveIntegerType:
      type: integer
      minimum: 1
    DescribeGroupsRequest:
      type: object
      title: DescribeGroupsRequest
      properties: {}
    GroupMetadataList:
      type: array
      items:
        $ref: '#/components/schemas/GroupMetadata'
    DescribeNotificationSubscriptionsRequest:
      type: object
      title: DescribeNotificationSubscriptionsRequest
      properties: {}
    SubscriptionList:
      type: array
      items:
        $ref: '#/components/schemas/Subscription'
      maxItems: 256
    DescribeResourcePermissionsRequest:
      type: object
      title: DescribeResourcePermissionsRequest
      properties: {}
    PrincipalList:
      type: array
      items:
        $ref: '#/components/schemas/Principal'
    DescribeRootFoldersRequest:
      type: object
      title: DescribeRootFoldersRequest
      properties: {}
    UserIdsType:
      type: string
      pattern: '[&\w+-.@, ]+'
      minLength: 1
      maxLength: 2000
    UserFilterType:
      type: string
      enum:
        - ALL
        - ACTIVE_PENDING
    UserSortType:
      type: string
      enum:
        - USER_NAME
        - FULL_NAME
        - STORAGE_LIMIT
        - USER_STATUS
        - STORAGE_USED
    DescribeUsersRequest:
      type: object
      title: DescribeUsersRequest
      properties: {}
    OrganizationUserList:
      type: array
      items:
        $ref: '#/components/schemas/User'
    SizeType:
      type: integer
    DocumentContentType:
      type: string
      minLength: 1
      maxLength: 128
    DocumentVersionMetadata:
      type: object
      properties:
        Id:
          $ref: '#/components/schemas/DocumentVersionIdType'
          description: The ID of the version.
        Name:
          $ref: '#/components/schemas/ResourceNameType'
          description: The name of the version.
        ContentType:
          $ref: '#/components/schemas/DocumentContentType'
          description: The content type of the document.
        Size:
          $ref: '#/components/schemas/SizeType'
          description: 'The size of the document, in bytes.'
        Signature:
          $ref: '#/components/schemas/HashType'
          description: The signature of the document.
        Status:
          $ref: '#/components/schemas/DocumentStatusType'
          description: The status of the document.
        CreatedTimestamp:
          $ref: '#/components/schemas/TimestampType'
          description: The timestamp when the document was first uploaded.
        ModifiedTimestamp:
          $ref: '#/components/schemas/TimestampType'
          description: The timestamp when the document was last uploaded.
        ContentCreatedTimestamp:
          $ref: '#/components/schemas/TimestampType'
          description: The timestamp when the content of the document was originally created.
        ContentModifiedTimestamp:
          $ref: '#/components/schemas/TimestampType'
          description: The timestamp when the content of the document was modified.
        CreatorId:
          $ref: '#/components/schemas/IdType'
          description: The ID of the creator.
        Thumbnail:
          $ref: '#/components/schemas/DocumentThumbnailUrlMap'
          description: The thumbnail of the document.
        Source:
          $ref: '#/components/schemas/DocumentSourceUrlMap'
          description: The source of the document.
      description: Describes a version of a document.
    ResourceStateType:
      type: string
      enum:
        - ACTIVE
        - RESTORING
        - RECYCLING
        - RECYCLED
    DocumentMetadata:
      type: object
      properties:
        Id:
          $ref: '#/components/schemas/ResourceIdType'
          description: The ID of the document.
        CreatorId:
          $ref: '#/components/schemas/IdType'
          description: The ID of the creator.
        ParentFolderId:
          $ref: '#/components/schemas/ResourceIdType'
          description: The ID of the parent folder.
        CreatedTimestamp:
          $ref: '#/components/schemas/TimestampType'
          description: The time when the document was created.
        ModifiedTimestamp:
          $ref: '#/components/schemas/TimestampType'
          description: The time when the document was updated.
        LatestVersionMetadata:
          $ref: '#/components/schemas/DocumentVersionMetadata'
          description: The latest version of the document.
        ResourceState:
          $ref: '#/components/schemas/ResourceStateType'
          description: The resource state.
        Labels:
          $ref: '#/components/schemas/SharedLabels'
          description: List of labels on the document.
      description: Describes the document.
    DocumentSourceType:
      type: string
      enum:
        - ORIGINAL
        - WITH_COMMENTS
    UrlType:
      type: string
      minLength: 1
      maxLength: 1024
      format: password
    DocumentSourceUrlMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/UrlType'
    DocumentStatusType:
      type: string
      enum:
        - INITIALIZED
        - ACTIVE
    DocumentThumbnailType:
      type: string
      enum:
        - SMALL
        - SMALL_HQ
        - LARGE
    DocumentThumbnailUrlMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/UrlType'
    HashType:
      type: string
      pattern: '[&\w+-.@]+'
      minLength: 0
      maxLength: 128
    DocumentVersionStatus:
      type: string
      enum:
        - ACTIVE
    GetCurrentUserRequest:
      type: object
      title: GetCurrentUserRequest
      properties: {}
    GetDocumentPathRequest:
      type: object
      title: GetDocumentPathRequest
      properties: {}
    ResourcePath:
      type: object
      properties:
        Components:
          $ref: '#/components/schemas/ResourcePathComponentList'
          description: The components of the resource path.
      description: Describes the path information of a resource.
    GetDocumentRequest:
      type: object
      title: GetDocumentRequest
      properties: {}
    GetDocumentVersionRequest:
      type: object
      title: GetDocumentVersionRequest
      properties: {}
    GetFolderPathRequest:
      type: object
      title: GetFolderPathRequest
      properties: {}
    GetFolderRequest:
      type: object
      title: GetFolderRequest
      properties: {}
    ResourceCollectionType:
      type: string
      enum:
        - SHARED_WITH_ME
    GetResourcesRequest:
      type: object
      title: GetResourcesRequest
      properties: {}
    GroupNameType:
      type: string
    GroupMetadata:
      type: object
      properties:
        Id:
          $ref: '#/components/schemas/IdType'
          description: The ID of the user group.
        Name:
          $ref: '#/components/schemas/GroupNameType'
          description: The name of the group.
      description: Describes the metadata of a user group.
    HeaderNameType:
      type: string
      pattern: '[\w-]+'
      minLength: 1
      maxLength: 256
    HeaderValueType:
      type: string
      minLength: 1
      maxLength: 1024
    InitiateDocumentVersionUploadRequest:
      type: object
      required:
        - ParentFolderId
      title: InitiateDocumentVersionUploadRequest
      properties:
        Id:
          $ref: '#/components/schemas/ResourceIdType'
          description: The ID of the document.
        Name:
          $ref: '#/components/schemas/ResourceNameType'
          description: The name of the document.
        ContentCreatedTimestamp:
          $ref: '#/components/schemas/TimestampType'
          description: The timestamp when the content of the document was originally created.
        ContentModifiedTimestamp:
          $ref: '#/components/schemas/TimestampType'
          description: The timestamp when the content of the document was modified.
        ContentType:
          $ref: '#/components/schemas/DocumentContentType'
          description: The content type of the document.
        DocumentSizeInBytes:
          $ref: '#/components/schemas/SizeType'
          description: 'The size of the document, in bytes.'
        ParentFolderId:
          $ref: '#/components/schemas/ResourceIdType'
          description: The ID of the parent folder.
    UploadMetadata:
      type: object
      properties:
        UploadUrl:
          $ref: '#/components/schemas/UrlType'
          description: The URL of the upload.
        SignedHeaders:
          $ref: '#/components/schemas/SignedHeaderMap'
          description: The signed headers.
      description: Describes the upload.
    LocaleType:
      type: string
      enum:
        - en
        - fr
        - ko
        - de
        - es
        - ja
        - ru
        - zh_CN
        - zh_TW
        - pt_BR
        - default
    UserMetadataList:
      type: array
      items:
        $ref: '#/components/schemas/UserMetadata'
    RoleType:
      type: string
      enum:
        - VIEWER
        - CONTRIBUTOR
        - OWNER
        - COOWNER
    RolePermissionType:
      type: string
      enum:
        - DIRECT
        - INHERITED
    PermissionInfo:
      type: object
      properties:
        Role:
          $ref: '#/components/schemas/RoleType'
          description: The role of the user.
        Type:
          $ref: '#/components/schemas/RolePermissionType'
          description: The type of permissions.
      description: Describes the permissions.
    PermissionInfoList:
      type: array
      items:
        $ref: '#/components/schemas/PermissionInfo'
    PrincipalType:
      type: string
      enum:
        - USER
        - GROUP
        - INVITE
        - ANONYMOUS
        - ORGANIZATION
    Principal:
      type: object
      properties:
        Id:
          $ref: '#/components/schemas/IdType'
          description: The ID of the resource.
        Type:
          $ref: '#/components/schemas/PrincipalType'
          description: The type of resource.
        Roles:
          $ref: '#/components/schemas/PermissionInfoList'
          description: The permission information for the resource.
      description: Describes a resource.
    RemoveAllResourcePermissionsRequest:
      type: object
      title: RemoveAllResourcePermissionsRequest
      properties: {}
    RemoveResourcePermissionRequest:
      type: object
      title: RemoveResourcePermissionRequest
      properties: {}
    ResourceType:
      type: string
      enum:
        - FOLDER
        - DOCUMENT
    ResourcePathComponentList:
      type: array
      items:
        $ref: '#/components/schemas/ResourcePathComponent'
    ResourcePathComponent:
      type: object
      properties:
        Id:
          $ref: '#/components/schemas/IdType'
          description: The ID of the resource path.
        Name:
          $ref: '#/components/schemas/ResourceNameType'
          description: The name of the resource path.
      description: Describes the resource path.
    ShareStatusType:
      type: string
      enum:
        - SUCCESS
        - FAILURE
    ShareResult:
      type: object
      properties:
        PrincipalId:
          $ref: '#/components/schemas/IdType'
          description: The ID of the principal.
        InviteePrincipalId:
          $ref: '#/components/schemas/IdType'
          description: The ID of the invited user.
        Role:
          $ref: '#/components/schemas/RoleType'
          description: The role.
        Status:
          $ref: '#/components/schemas/ShareStatusType'
          description: The status.
        ShareId:
          $ref: '#/components/schemas/ResourceIdType'
          description: The ID of the resource that was shared.
        StatusMessage:
          $ref: '#/components/schemas/MessageType'
          description: The status message.
      description: Describes the share results of a resource.
    SignedHeaderMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/HeaderValueType'
    UpdateDocumentRequest:
      type: object
      title: UpdateDocumentRequest
      properties:
        Name:
          $ref: '#/components/schemas/ResourceNameType'
          description: The name of the document.
        ParentFolderId:
          $ref: '#/components/schemas/ResourceIdType'
          description: The ID of the parent folder.
        ResourceState:
          $ref: '#/components/schemas/ResourceStateType'
          description: The resource state of the document. Only ACTIVE and RECYCLED are supported.
    UpdateDocumentVersionRequest:
      type: object
      title: UpdateDocumentVersionRequest
      properties:
        VersionStatus:
          $ref: '#/components/schemas/DocumentVersionStatus'
          description: The status of the version.
    UpdateFolderRequest:
      type: object
      title: UpdateFolderRequest
      properties:
        Name:
          $ref: '#/components/schemas/ResourceNameType'
          description: The name of the folder.
        ParentFolderId:
          $ref: '#/components/schemas/ResourceIdType'
          description: The ID of the parent folder.
        ResourceState:
          $ref: '#/components/schemas/ResourceStateType'
          description: The resource state of the folder. Only ACTIVE and RECYCLED are accepted values from the API.
    UserType:
      type: string
      enum:
        - USER
        - ADMIN
        - POWERUSER
        - MINIMALUSER
        - WORKSPACESUSER
    UpdateUserRequest:
      type: object
      title: UpdateUserRequest
      properties:
        GivenName:
          $ref: '#/components/schemas/UserAttributeValueType'
          description: The given name of the user.
        Surname:
          $ref: '#/components/schemas/UserAttributeValueType'
          description: The surname of the user.
        Type:
          $ref: '#/components/schemas/UserType'
          description: The type of the user.
        StorageRule:
          $ref: '#/components/schemas/StorageRuleType'
          description: The amount of storage for the user.
        TimeZoneId:
          $ref: '#/components/schemas/TimeZoneIdType'
          description: The time zone ID of the user.
        Locale:
          $ref: '#/components/schemas/LocaleType'
          description: The locale of the user.
        GrantPoweruserPrivileges:
          $ref: '#/components/schemas/BooleanEnumType'
          description: Boolean value to determine whether the user is granted Poweruser privileges.
    UserStatusType:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
        - PENDING
    UserStorageMetadata:
      type: object
      properties:
        StorageUtilizedInBytes:
          $ref: '#/components/schemas/SizeType'
          description: 'The amount of storage used, in bytes.'
        StorageRule:
          $ref: '#/components/schemas/StorageRuleType'
          description: The storage for a user.
      description: Describes the storage for a user.
security:
  - hmac: []

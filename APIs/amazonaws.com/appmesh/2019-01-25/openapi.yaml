openapi: 3.0.0
info:
  version: '2019-01-25'
  x-release: v4
  title: AWS App Mesh
  description: '<p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href="https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: appmesh
  x-aws-signingName: appmesh
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/appmesh-2019-01-25.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/appmesh/'
servers:
  - url: 'http://appmesh.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The AWS App Mesh multi-region endpoint
  - url: 'https://appmesh.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The AWS App Mesh multi-region endpoint
  - url: 'http://appmesh.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS App Mesh endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://appmesh.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS App Mesh endpoint for China (Beijing) and China (Ningxia)
paths:
  '/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes':
    put:
      operationId: CreateGatewayRoute
      description: '<p>Creates a gateway route.</p> <p>A gateway route is attached to a virtual gateway and routes traffic to an existing virtual service. If a route matches a request, it can distribute traffic to a target virtual service.</p> <p>For more information about gateway routes, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/gateway-routes.html">Gateway routes</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateGatewayRouteOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '487':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to create the gateway route in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: virtualGatewayName
          in: path
          required: true
          description: 'The name of the virtual gateway to associate the gateway route with. If the virtual gateway is in a shared mesh, then you must be the owner of the virtual gateway resource.'
          schema:
            type: string
            minLength: 1
            maxLength: 255
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - gatewayRouteName
                - spec
              properties:
                clientToken:
                  description: 'Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.'
                  type: string
                gatewayRouteName:
                  description: The name to use for the gateway route.
                  type: string
                  minLength: 1
                  maxLength: 255
                spec:
                  description: An object that represents a gateway route specification. Specify one gateway route type.
                  type: object
                  properties:
                    grpcRoute:
                      $ref: '#/components/schemas/GrpcGatewayRoute'
                      description: An object that represents the specification of a gRPC gateway route.
                    http2Route:
                      $ref: '#/components/schemas/HttpGatewayRoute'
                      description: An object that represents the specification of an HTTP/2 gateway route.
                    httpRoute:
                      $ref: '#/components/schemas/HttpGatewayRoute'
                      description: An object that represents the specification of an HTTP gateway route.
                    priority:
                      $ref: '#/components/schemas/GatewayRoutePriority'
                      description: The ordering of the gateway routes spec.
                tags:
                  description: 'Optional metadata that you can apply to the gateway route to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.'
                  type: array
                  items:
                    $ref: '#/components/schemas/TagRef'
                  minItems: 0
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListGatewayRoutes
      description: Returns a list of existing gateway routes that are associated to a virtual gateway.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGatewayRoutesOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: limit
          in: query
          required: false
          description: 'The maximum number of results returned by <code>ListGatewayRoutes</code> in paginated output. When you use this parameter, <code>ListGatewayRoutes</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListGatewayRoutes</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don''t use this parameter, <code>ListGatewayRoutes</code> returns up to 100 results and a <code>nextToken</code> value if applicable.'
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to list gateway routes in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: nextToken
          in: query
          required: false
          description: The <code>nextToken</code> value returned from a previous paginated <code>ListGatewayRoutes</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.
          schema:
            type: string
        - name: virtualGatewayName
          in: path
          required: true
          description: The name of the virtual gateway to list gateway routes in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
  /v20190125/meshes:
    put:
      operationId: CreateMesh
      description: '<p>Creates a service mesh.</p> <p> A service mesh is a logical boundary for network traffic between services that are represented by resources within the mesh. After you create your service mesh, you can create virtual services, virtual nodes, virtual routers, and routes to distribute traffic between the applications in your mesh.</p> <p>For more information about service meshes, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/meshes.html">Service meshes</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateMeshOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '487':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - meshName
              properties:
                clientToken:
                  description: 'Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.'
                  type: string
                meshName:
                  description: The name to use for the service mesh.
                  type: string
                  minLength: 1
                  maxLength: 255
                spec:
                  description: An object that represents the specification of a service mesh.
                  type: object
                  properties:
                    egressFilter:
                      $ref: '#/components/schemas/EgressFilter'
                      description: The egress filter rules for the service mesh.
                tags:
                  description: 'Optional metadata that you can apply to the service mesh to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.'
                  type: array
                  items:
                    $ref: '#/components/schemas/TagRef'
                  minItems: 0
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListMeshes
      description: Returns a list of existing service meshes.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMeshesOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: limit
          in: query
          required: false
          description: 'The maximum number of results returned by <code>ListMeshes</code> in paginated output. When you use this parameter, <code>ListMeshes</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListMeshes</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don''t use this parameter, <code>ListMeshes</code> returns up to 100 results and a <code>nextToken</code> value if applicable.'
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: nextToken
          in: query
          required: false
          description: <p>The <code>nextToken</code> value returned from a previous paginated <code>ListMeshes</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.</p> <note> <p>This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.</p> </note>
          schema:
            type: string
  '/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes':
    put:
      operationId: CreateRoute
      description: '<p>Creates a route that is associated with a virtual router.</p> <p> You can route several different protocols and define a retry policy for a route. Traffic can be routed to one or more virtual nodes.</p> <p>For more information about routes, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/routes.html">Routes</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRouteOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '487':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to create the route in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: virtualRouterName
          in: path
          required: true
          description: 'The name of the virtual router in which to create the route. If the virtual router is in a shared mesh, then you must be the owner of the virtual router resource.'
          schema:
            type: string
            minLength: 1
            maxLength: 255
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - routeName
                - spec
              properties:
                clientToken:
                  description: 'Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.'
                  type: string
                routeName:
                  description: The name to use for the route.
                  type: string
                  minLength: 1
                  maxLength: 255
                spec:
                  description: An object that represents a route specification. Specify one route type.
                  type: object
                  properties:
                    grpcRoute:
                      $ref: '#/components/schemas/GrpcRoute'
                      description: An object that represents the specification of a gRPC route.
                    http2Route:
                      $ref: '#/components/schemas/HttpRoute'
                      description: An object that represents the specification of an HTTP/2 route.
                    httpRoute:
                      $ref: '#/components/schemas/HttpRoute'
                      description: An object that represents the specification of an HTTP route.
                    priority:
                      $ref: '#/components/schemas/RoutePriority'
                      description: 'The priority for the route. Routes are matched based on the specified value, where 0 is the highest priority.'
                    tcpRoute:
                      $ref: '#/components/schemas/TcpRoute'
                      description: An object that represents the specification of a TCP route.
                tags:
                  description: 'Optional metadata that you can apply to the route to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.'
                  type: array
                  items:
                    $ref: '#/components/schemas/TagRef'
                  minItems: 0
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListRoutes
      description: Returns a list of existing routes in a service mesh.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRoutesOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: limit
          in: query
          required: false
          description: 'The maximum number of results returned by <code>ListRoutes</code> in paginated output. When you use this parameter, <code>ListRoutes</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListRoutes</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don''t use this parameter, <code>ListRoutes</code> returns up to 100 results and a <code>nextToken</code> value if applicable.'
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to list routes in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: nextToken
          in: query
          required: false
          description: The <code>nextToken</code> value returned from a previous paginated <code>ListRoutes</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.
          schema:
            type: string
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router to list routes in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
  '/v20190125/meshes/{meshName}/virtualGateways':
    put:
      operationId: CreateVirtualGateway
      description: '<p>Creates a virtual gateway.</p> <p>A virtual gateway allows resources outside your mesh to communicate to resources that are inside your mesh. The virtual gateway represents an Envoy proxy running in an Amazon ECS task, in a Kubernetes service, or on an Amazon EC2 instance. Unlike a virtual node, which represents an Envoy running with an application, a virtual gateway represents Envoy deployed by itself.</p> <p>For more information about virtual gateways, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_gateways.html">Virtual gateways</a>. </p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVirtualGatewayOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '487':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to create the virtual gateway in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - spec
                - virtualGatewayName
              properties:
                clientToken:
                  description: 'Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.'
                  type: string
                spec:
                  description: An object that represents the specification of a service mesh resource.
                  type: object
                  properties:
                    backendDefaults:
                      $ref: '#/components/schemas/VirtualGatewayBackendDefaults'
                      description: A reference to an object that represents the defaults for backends.
                    listeners:
                      $ref: '#/components/schemas/VirtualGatewayListeners'
                      description: The listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener.
                    logging:
                      $ref: '#/components/schemas/VirtualGatewayLogging'
                tags:
                  description: 'Optional metadata that you can apply to the virtual gateway to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.'
                  type: array
                  items:
                    $ref: '#/components/schemas/TagRef'
                  minItems: 0
                  maxItems: 50
                virtualGatewayName:
                  description: The name to use for the virtual gateway.
                  type: string
                  minLength: 1
                  maxLength: 255
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListVirtualGateways
      description: Returns a list of existing virtual gateways in a service mesh.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVirtualGatewaysOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: limit
          in: query
          required: false
          description: 'The maximum number of results returned by <code>ListVirtualGateways</code> in paginated output. When you use this parameter, <code>ListVirtualGateways</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListVirtualGateways</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don''t use this parameter, <code>ListVirtualGateways</code> returns up to 100 results and a <code>nextToken</code> value if applicable.'
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to list virtual gateways in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: nextToken
          in: query
          required: false
          description: The <code>nextToken</code> value returned from a previous paginated <code>ListVirtualGateways</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.
          schema:
            type: string
  '/v20190125/meshes/{meshName}/virtualNodes':
    put:
      operationId: CreateVirtualNode
      description: '<p>Creates a virtual node within a service mesh.</p> <p> A virtual node acts as a logical pointer to a particular task group, such as an Amazon ECS service or a Kubernetes deployment. When you create a virtual node, you can specify the service discovery information for your task group, and whether the proxy running in a task group will communicate with other proxies using Transport Layer Security (TLS).</p> <p>You define a <code>listener</code> for any inbound traffic that your virtual node expects. Any virtual service that your virtual node expects to communicate to is specified as a <code>backend</code>.</p> <p>The response metadata for your new virtual node contains the <code>arn</code> that is associated with the virtual node. Set this value to the full ARN; for example, <code>arn:aws:appmesh:us-west-2:123456789012:myMesh/default/virtualNode/myApp</code>) as the <code>APPMESH_RESOURCE_ARN</code> environment variable for your task group''s Envoy proxy container in your task definition or pod spec. This is then mapped to the <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p> <note> <p>By default, App Mesh uses the name of the resource you specified in <code>APPMESH_RESOURCE_ARN</code> when Envoy is referring to itself in metrics and traces. You can override this behavior by setting the <code>APPMESH_RESOURCE_CLUSTER</code> environment variable with your own name.</p> </note> <p>For more information about virtual nodes, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_nodes.html">Virtual nodes</a>. You must be using <code>1.15.0</code> or later of the Envoy image when setting these variables. For more information aboutApp Mesh Envoy variables, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/envoy.html">Envoy image</a> in the AWS App Mesh User Guide.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVirtualNodeOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '487':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to create the virtual node in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - spec
                - virtualNodeName
              properties:
                clientToken:
                  description: 'Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.'
                  type: string
                spec:
                  description: An object that represents the specification of a virtual node.
                  type: object
                  properties:
                    backendDefaults:
                      $ref: '#/components/schemas/BackendDefaults'
                      description: A reference to an object that represents the defaults for backends.
                    backends:
                      $ref: '#/components/schemas/Backends'
                      description: The backends that the virtual node is expected to send outbound traffic to.
                    listeners:
                      $ref: '#/components/schemas/Listeners'
                      description: The listener that the virtual node is expected to receive inbound traffic from. You can specify one listener.
                    logging:
                      $ref: '#/components/schemas/Logging'
                      description: The inbound and outbound access logging information for the virtual node.
                    serviceDiscovery:
                      $ref: '#/components/schemas/ServiceDiscovery'
                      description: 'The service discovery information for the virtual node. If your virtual node does not expect ingress traffic, you can omit this parameter. If you specify a <code>listener</code>, then you must specify service discovery information.'
                tags:
                  description: 'Optional metadata that you can apply to the virtual node to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.'
                  type: array
                  items:
                    $ref: '#/components/schemas/TagRef'
                  minItems: 0
                  maxItems: 50
                virtualNodeName:
                  description: The name to use for the virtual node.
                  type: string
                  minLength: 1
                  maxLength: 255
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListVirtualNodes
      description: Returns a list of existing virtual nodes.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVirtualNodesOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: limit
          in: query
          required: false
          description: 'The maximum number of results returned by <code>ListVirtualNodes</code> in paginated output. When you use this parameter, <code>ListVirtualNodes</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListVirtualNodes</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don''t use this parameter, <code>ListVirtualNodes</code> returns up to 100 results and a <code>nextToken</code> value if applicable.'
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to list virtual nodes in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: nextToken
          in: query
          required: false
          description: The <code>nextToken</code> value returned from a previous paginated <code>ListVirtualNodes</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.
          schema:
            type: string
  '/v20190125/meshes/{meshName}/virtualRouters':
    put:
      operationId: CreateVirtualRouter
      description: '<p>Creates a virtual router within a service mesh.</p> <p>Specify a <code>listener</code> for any inbound traffic that your virtual router receives. Create a virtual router for each protocol and port that you need to route. Virtual routers handle traffic for one or more virtual services within your mesh. After you create your virtual router, create and associate routes for your virtual router that direct incoming requests to different virtual nodes.</p> <p>For more information about virtual routers, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_routers.html">Virtual routers</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVirtualRouterOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '487':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to create the virtual router in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - spec
                - virtualRouterName
              properties:
                clientToken:
                  description: 'Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.'
                  type: string
                spec:
                  description: An object that represents the specification of a virtual router.
                  type: object
                  properties:
                    listeners:
                      $ref: '#/components/schemas/VirtualRouterListeners'
                      description: The listeners that the virtual router is expected to receive inbound traffic from. You can specify one listener.
                tags:
                  description: 'Optional metadata that you can apply to the virtual router to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.'
                  type: array
                  items:
                    $ref: '#/components/schemas/TagRef'
                  minItems: 0
                  maxItems: 50
                virtualRouterName:
                  description: The name to use for the virtual router.
                  type: string
                  minLength: 1
                  maxLength: 255
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListVirtualRouters
      description: Returns a list of existing virtual routers in a service mesh.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVirtualRoutersOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: limit
          in: query
          required: false
          description: 'The maximum number of results returned by <code>ListVirtualRouters</code> in paginated output. When you use this parameter, <code>ListVirtualRouters</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListVirtualRouters</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don''t use this parameter, <code>ListVirtualRouters</code> returns up to 100 results and a <code>nextToken</code> value if applicable.'
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to list virtual routers in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: nextToken
          in: query
          required: false
          description: The <code>nextToken</code> value returned from a previous paginated <code>ListVirtualRouters</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.
          schema:
            type: string
  '/v20190125/meshes/{meshName}/virtualServices':
    put:
      operationId: CreateVirtualService
      description: '<p>Creates a virtual service within a service mesh.</p> <p>A virtual service is an abstraction of a real service that is provided by a virtual node directly or indirectly by means of a virtual router. Dependent services call your virtual service by its <code>virtualServiceName</code>, and those requests are routed to the virtual node or virtual router that is specified as the provider for the virtual service.</p> <p>For more information about virtual services, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_services.html">Virtual services</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVirtualServiceOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '487':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to create the virtual service in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - spec
                - virtualServiceName
              properties:
                clientToken:
                  description: 'Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.'
                  type: string
                spec:
                  description: An object that represents the specification of a virtual service.
                  type: object
                  properties:
                    provider:
                      $ref: '#/components/schemas/VirtualServiceProvider'
                      description: The App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.
                tags:
                  description: 'Optional metadata that you can apply to the virtual service to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.'
                  type: array
                  items:
                    $ref: '#/components/schemas/TagRef'
                  minItems: 0
                  maxItems: 50
                virtualServiceName:
                  description: The name to use for the virtual service.
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListVirtualServices
      description: Returns a list of existing virtual services in a service mesh.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVirtualServicesOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: limit
          in: query
          required: false
          description: 'The maximum number of results returned by <code>ListVirtualServices</code> in paginated output. When you use this parameter, <code>ListVirtualServices</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListVirtualServices</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don''t use this parameter, <code>ListVirtualServices</code> returns up to 100 results and a <code>nextToken</code> value if applicable.'
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to list virtual services in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: nextToken
          in: query
          required: false
          description: The <code>nextToken</code> value returned from a previous paginated <code>ListVirtualServices</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.
          schema:
            type: string
  '/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes/{gatewayRouteName}':
    delete:
      operationId: DeleteGatewayRoute
      description: Deletes an existing gateway route.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteGatewayRouteOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '484':
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: gatewayRouteName
          in: path
          required: true
          description: The name of the gateway route to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to delete the gateway route from.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: virtualGatewayName
          in: path
          required: true
          description: The name of the virtual gateway to delete the route from.
          schema:
            type: string
            minLength: 1
            maxLength: 255
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeGatewayRoute
      description: Describes an existing gateway route.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeGatewayRouteOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: gatewayRouteName
          in: path
          required: true
          description: The name of the gateway route to describe.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh that the gateway route resides in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: virtualGatewayName
          in: path
          required: true
          description: The name of the virtual gateway that the gateway route is associated with.
          schema:
            type: string
            minLength: 1
            maxLength: 255
    put:
      operationId: UpdateGatewayRoute
      description: Updates an existing gateway route that is associated to a specified virtual gateway in a service mesh.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateGatewayRouteOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '487':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
      parameters:
        - name: gatewayRouteName
          in: path
          required: true
          description: The name of the gateway route to update.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh that the gateway route resides in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: virtualGatewayName
          in: path
          required: true
          description: The name of the virtual gateway that the gateway route is associated with.
          schema:
            type: string
            minLength: 1
            maxLength: 255
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - spec
              properties:
                clientToken:
                  description: 'Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.'
                  type: string
                spec:
                  description: An object that represents a gateway route specification. Specify one gateway route type.
                  type: object
                  properties:
                    grpcRoute:
                      $ref: '#/components/schemas/GrpcGatewayRoute'
                      description: An object that represents the specification of a gRPC gateway route.
                    http2Route:
                      $ref: '#/components/schemas/HttpGatewayRoute'
                      description: An object that represents the specification of an HTTP/2 gateway route.
                    httpRoute:
                      $ref: '#/components/schemas/HttpGatewayRoute'
                      description: An object that represents the specification of an HTTP gateway route.
                    priority:
                      $ref: '#/components/schemas/GatewayRoutePriority'
                      description: The ordering of the gateway routes spec.
  '/v20190125/meshes/{meshName}':
    delete:
      operationId: DeleteMesh
      description: '<p>Deletes an existing service mesh.</p> <p>You must delete all resources (virtual services, routes, virtual routers, and virtual nodes) in the service mesh before you can delete the mesh itself.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteMeshOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '484':
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 255
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeMesh
      description: Describes an existing service mesh.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeMeshOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to describe.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
    put:
      operationId: UpdateMesh
      description: Updates an existing service mesh.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateMeshOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to update.
          schema:
            type: string
            minLength: 1
            maxLength: 255
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  description: 'Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.'
                  type: string
                spec:
                  description: An object that represents the specification of a service mesh.
                  type: object
                  properties:
                    egressFilter:
                      $ref: '#/components/schemas/EgressFilter'
                      description: The egress filter rules for the service mesh.
  '/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}':
    delete:
      operationId: DeleteRoute
      description: Deletes an existing route.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRouteOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '484':
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to delete the route in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: routeName
          in: path
          required: true
          description: The name of the route to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router to delete the route in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeRoute
      description: Describes an existing route.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeRouteOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh that the route resides in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: routeName
          in: path
          required: true
          description: The name of the route to describe.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router that the route is associated with.
          schema:
            type: string
            minLength: 1
            maxLength: 255
    put:
      operationId: UpdateRoute
      description: Updates an existing route for a specified service mesh and virtual router.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRouteOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '487':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh that the route resides in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: routeName
          in: path
          required: true
          description: The name of the route to update.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router that the route is associated with.
          schema:
            type: string
            minLength: 1
            maxLength: 255
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - spec
              properties:
                clientToken:
                  description: 'Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.'
                  type: string
                spec:
                  description: An object that represents a route specification. Specify one route type.
                  type: object
                  properties:
                    grpcRoute:
                      $ref: '#/components/schemas/GrpcRoute'
                      description: An object that represents the specification of a gRPC route.
                    http2Route:
                      $ref: '#/components/schemas/HttpRoute'
                      description: An object that represents the specification of an HTTP/2 route.
                    httpRoute:
                      $ref: '#/components/schemas/HttpRoute'
                      description: An object that represents the specification of an HTTP route.
                    priority:
                      $ref: '#/components/schemas/RoutePriority'
                      description: 'The priority for the route. Routes are matched based on the specified value, where 0 is the highest priority.'
                    tcpRoute:
                      $ref: '#/components/schemas/TcpRoute'
                      description: An object that represents the specification of a TCP route.
  '/v20190125/meshes/{meshName}/virtualGateways/{virtualGatewayName}':
    delete:
      operationId: DeleteVirtualGateway
      description: Deletes an existing virtual gateway. You cannot delete a virtual gateway if any gateway routes are associated to it.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVirtualGatewayOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '484':
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to delete the virtual gateway from.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: virtualGatewayName
          in: path
          required: true
          description: The name of the virtual gateway to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 255
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeVirtualGateway
      description: Describes an existing virtual gateway.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeVirtualGatewayOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh that the gateway route resides in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: virtualGatewayName
          in: path
          required: true
          description: The name of the virtual gateway to describe.
          schema:
            type: string
            minLength: 1
            maxLength: 255
    put:
      operationId: UpdateVirtualGateway
      description: Updates an existing virtual gateway in a specified service mesh.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateVirtualGatewayOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '487':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh that the virtual gateway resides in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: virtualGatewayName
          in: path
          required: true
          description: The name of the virtual gateway to update.
          schema:
            type: string
            minLength: 1
            maxLength: 255
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - spec
              properties:
                clientToken:
                  description: 'Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.'
                  type: string
                spec:
                  description: An object that represents the specification of a service mesh resource.
                  type: object
                  properties:
                    backendDefaults:
                      $ref: '#/components/schemas/VirtualGatewayBackendDefaults'
                      description: A reference to an object that represents the defaults for backends.
                    listeners:
                      $ref: '#/components/schemas/VirtualGatewayListeners'
                      description: The listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener.
                    logging:
                      $ref: '#/components/schemas/VirtualGatewayLogging'
  '/v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}':
    delete:
      operationId: DeleteVirtualNode
      description: <p>Deletes an existing virtual node.</p> <p>You must delete any virtual services that list a virtual node as a service provider before you can delete the virtual node itself.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVirtualNodeOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '484':
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to delete the virtual node in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: virtualNodeName
          in: path
          required: true
          description: The name of the virtual node to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 255
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeVirtualNode
      description: Describes an existing virtual node.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeVirtualNodeOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh that the virtual node resides in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: virtualNodeName
          in: path
          required: true
          description: The name of the virtual node to describe.
          schema:
            type: string
            minLength: 1
            maxLength: 255
    put:
      operationId: UpdateVirtualNode
      description: Updates an existing virtual node in a specified service mesh.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateVirtualNodeOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '487':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh that the virtual node resides in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: virtualNodeName
          in: path
          required: true
          description: The name of the virtual node to update.
          schema:
            type: string
            minLength: 1
            maxLength: 255
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - spec
              properties:
                clientToken:
                  description: 'Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.'
                  type: string
                spec:
                  description: An object that represents the specification of a virtual node.
                  type: object
                  properties:
                    backendDefaults:
                      $ref: '#/components/schemas/BackendDefaults'
                      description: A reference to an object that represents the defaults for backends.
                    backends:
                      $ref: '#/components/schemas/Backends'
                      description: The backends that the virtual node is expected to send outbound traffic to.
                    listeners:
                      $ref: '#/components/schemas/Listeners'
                      description: The listener that the virtual node is expected to receive inbound traffic from. You can specify one listener.
                    logging:
                      $ref: '#/components/schemas/Logging'
                      description: The inbound and outbound access logging information for the virtual node.
                    serviceDiscovery:
                      $ref: '#/components/schemas/ServiceDiscovery'
                      description: 'The service discovery information for the virtual node. If your virtual node does not expect ingress traffic, you can omit this parameter. If you specify a <code>listener</code>, then you must specify service discovery information.'
  '/v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}':
    delete:
      operationId: DeleteVirtualRouter
      description: <p>Deletes an existing virtual router.</p> <p>You must delete any routes associated with the virtual router before you can delete the router itself.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVirtualRouterOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '484':
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to delete the virtual router in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 255
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeVirtualRouter
      description: Describes an existing virtual router.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeVirtualRouterOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh that the virtual router resides in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router to describe.
          schema:
            type: string
            minLength: 1
            maxLength: 255
    put:
      operationId: UpdateVirtualRouter
      description: Updates an existing virtual router in a specified service mesh.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateVirtualRouterOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '487':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh that the virtual router resides in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router to update.
          schema:
            type: string
            minLength: 1
            maxLength: 255
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - spec
              properties:
                clientToken:
                  description: 'Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.'
                  type: string
                spec:
                  description: An object that represents the specification of a virtual router.
                  type: object
                  properties:
                    listeners:
                      $ref: '#/components/schemas/VirtualRouterListeners'
                      description: The listeners that the virtual router is expected to receive inbound traffic from. You can specify one listener.
  '/v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}':
    delete:
      operationId: DeleteVirtualService
      description: Deletes an existing virtual service.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVirtualServiceOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '484':
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to delete the virtual service in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: virtualServiceName
          in: path
          required: true
          description: The name of the virtual service to delete.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeVirtualService
      description: Describes an existing virtual service.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeVirtualServiceOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh that the virtual service resides in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: virtualServiceName
          in: path
          required: true
          description: The name of the virtual service to describe.
          schema:
            type: string
    put:
      operationId: UpdateVirtualService
      description: Updates an existing virtual service in a specified service mesh.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateVirtualServiceOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '487':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh that the virtual service resides in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: virtualServiceName
          in: path
          required: true
          description: The name of the virtual service to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - spec
              properties:
                clientToken:
                  description: 'Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.'
                  type: string
                spec:
                  description: An object that represents the specification of a virtual service.
                  type: object
                  properties:
                    provider:
                      $ref: '#/components/schemas/VirtualServiceProvider'
                      description: The App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.
  /v20190125/tags#resourceArn:
    get:
      operationId: ListTagsForResource
      description: List the tags for an App Mesh resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: limit
          in: query
          required: false
          description: 'The maximum number of tag results returned by <code>ListTagsForResource</code> in paginated output. When this parameter is used, <code>ListTagsForResource</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListTagsForResource</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don''t use this parameter, <code>ListTagsForResource</code> returns up to 100 results and a <code>nextToken</code> value if applicable.'
          schema:
            type: integer
            minimum: 1
            maximum: 50
        - name: nextToken
          in: query
          required: false
          description: The <code>nextToken</code> value returned from a previous paginated <code>ListTagsForResource</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.
          schema:
            type: string
        - name: resourceArn
          in: query
          required: true
          description: The Amazon Resource Name (ARN) that identifies the resource to list the tags for.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /v20190125/tag#resourceArn:
    put:
      operationId: TagResource
      description: 'Associates the specified tags to a resource with the specified <code>resourceArn</code>. If existing tags on a resource aren''t specified in the request parameters, they aren''t changed. When a resource is deleted, the tags associated with that resource are also deleted.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: TooManyTagsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: resourceArn
          in: query
          required: true
          description: The Amazon Resource Name (ARN) of the resource to add tags to.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tags
              properties:
                tags:
                  description: 'The tags to add to the resource. A tag is an array of key-value pairs. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.'
                  type: array
                  items:
                    $ref: '#/components/schemas/TagRef'
                  minItems: 0
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /v20190125/untag#resourceArn:
    put:
      operationId: UntagResource
      description: Deletes specified tags from a resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceOutput'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: resourceArn
          in: query
          required: true
          description: The Amazon Resource Name (ARN) of the resource to delete tags from.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tagKeys
              properties:
                tagKeys:
                  description: The keys of the tags to be removed.
                  type: array
                  items:
                    $ref: '#/components/schemas/TagKey'
                  minItems: 0
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    CreateGatewayRouteOutput:
      type: object
      required:
        - gatewayRoute
      properties:
        gatewayRoute:
          $ref: '#/components/schemas/GatewayRouteData'
          description: The full description of your gateway route following the create call.
    GrpcGatewayRoute:
      type: object
      required:
        - action
        - match
      properties:
        action:
          $ref: '#/components/schemas/GrpcGatewayRouteAction'
          description: An object that represents the action to take if a match is determined.
        match:
          $ref: '#/components/schemas/GrpcGatewayRouteMatch'
          description: An object that represents the criteria for determining a request match.
      description: An object that represents a gRPC gateway route.
    HttpGatewayRoute:
      type: object
      required:
        - action
        - match
      properties:
        action:
          $ref: '#/components/schemas/HttpGatewayRouteAction'
          description: An object that represents the action to take if a match is determined.
        match:
          $ref: '#/components/schemas/HttpGatewayRouteMatch'
          description: An object that represents the criteria for determining a request match.
      description: An object that represents an HTTP gateway route.
    GatewayRoutePriority:
      type: integer
      minimum: 0
      maximum: 1000
    TagRef:
      type: object
      required:
        - key
        - value
      properties:
        key:
          $ref: '#/components/schemas/TagKey'
          description: One part of a key-value pair that make up a tag. A <code>key</code> is a general label that acts like a category for more specific tag values.
        value:
          $ref: '#/components/schemas/TagValue'
          description: The optional part of a key-value pair that make up a tag. A <code>value</code> acts as a descriptor within a tag category (key).
      description: 'Optional metadata that you apply to a resource to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.'
    NotFoundException: {}
    BadRequestException: {}
    ConflictException: {}
    TooManyRequestsException: {}
    ForbiddenException: {}
    ServiceUnavailableException: {}
    InternalServerErrorException: {}
    LimitExceededException: {}
    CreateMeshOutput:
      type: object
      required:
        - mesh
      properties:
        mesh:
          $ref: '#/components/schemas/MeshData'
          description: The full description of your service mesh following the create call.
      description: <zonbook></zonbook><xhtml></xhtml>
    EgressFilter:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/EgressFilterType'
          description: 'The egress filter type. By default, the type is <code>DROP_ALL</code>, which allows egress only from virtual nodes to other defined resources in the service mesh (and any traffic to <code>*.amazonaws.com</code> for Amazon Web Services API calls). You can set the egress filter type to <code>ALLOW_ALL</code> to allow egress to any endpoint inside or outside of the service mesh.'
      description: An object that represents the egress filter rules for a service mesh.
    CreateRouteOutput:
      type: object
      required:
        - route
      properties:
        route:
          $ref: '#/components/schemas/RouteData'
          description: The full description of your mesh following the create call.
      description: <zonbook></zonbook><xhtml></xhtml>
    GrpcRoute:
      type: object
      required:
        - action
        - match
      properties:
        action:
          $ref: '#/components/schemas/GrpcRouteAction'
          description: An object that represents the action to take if a match is determined.
        match:
          $ref: '#/components/schemas/GrpcRouteMatch'
          description: An object that represents the criteria for determining a request match.
        retryPolicy:
          $ref: '#/components/schemas/GrpcRetryPolicy'
          description: An object that represents a retry policy.
        timeout:
          $ref: '#/components/schemas/GrpcTimeout'
          description: 'An object that represents types of timeouts. '
      description: An object that represents a gRPC route type.
    HttpRoute:
      type: object
      required:
        - action
        - match
      properties:
        action:
          $ref: '#/components/schemas/HttpRouteAction'
          description: An object that represents the action to take if a match is determined.
        match:
          $ref: '#/components/schemas/HttpRouteMatch'
          description: An object that represents the criteria for determining a request match.
        retryPolicy:
          $ref: '#/components/schemas/HttpRetryPolicy'
          description: An object that represents a retry policy.
        timeout:
          $ref: '#/components/schemas/HttpTimeout'
          description: 'An object that represents types of timeouts. '
      description: An object that represents an HTTP or HTTP/2 route type.
    RoutePriority:
      type: integer
      minimum: 0
      maximum: 1000
    TcpRoute:
      type: object
      required:
        - action
      properties:
        action:
          $ref: '#/components/schemas/TcpRouteAction'
          description: The action to take if a match is determined.
        timeout:
          $ref: '#/components/schemas/TcpTimeout'
          description: 'An object that represents types of timeouts. '
      description: An object that represents a TCP route type.
    CreateVirtualGatewayOutput:
      type: object
      required:
        - virtualGateway
      properties:
        virtualGateway:
          $ref: '#/components/schemas/VirtualGatewayData'
          description: The full description of your virtual gateway following the create call.
    VirtualGatewayBackendDefaults:
      type: object
      properties:
        clientPolicy:
          $ref: '#/components/schemas/VirtualGatewayClientPolicy'
          description: A reference to an object that represents a client policy.
      description: An object that represents the default properties for a backend.
    VirtualGatewayListeners:
      type: array
      items:
        $ref: '#/components/schemas/VirtualGatewayListener'
      minItems: 0
      maxItems: 1
    VirtualGatewayLogging:
      type: object
      properties:
        accessLog:
          $ref: '#/components/schemas/VirtualGatewayAccessLog'
          description: The access log configuration.
      description: An object that represents logging information.
    CreateVirtualNodeOutput:
      type: object
      required:
        - virtualNode
      properties:
        virtualNode:
          $ref: '#/components/schemas/VirtualNodeData'
          description: The full description of your virtual node following the create call.
      description: <zonbook></zonbook><xhtml></xhtml>
    BackendDefaults:
      type: object
      properties:
        clientPolicy:
          $ref: '#/components/schemas/ClientPolicy'
          description: A reference to an object that represents a client policy.
      description: An object that represents the default properties for a backend.
    Backends:
      type: array
      items:
        $ref: '#/components/schemas/Backend'
    Listeners:
      type: array
      items:
        $ref: '#/components/schemas/Listener'
      minItems: 0
      maxItems: 1
    Logging:
      type: object
      properties:
        accessLog:
          $ref: '#/components/schemas/AccessLog'
          description: The access log configuration for a virtual node.
      description: An object that represents the logging information for a virtual node.
    ServiceDiscovery:
      type: object
      properties:
        awsCloudMap:
          $ref: '#/components/schemas/AwsCloudMapServiceDiscovery'
          description: Specifies any Cloud Map information for the virtual node.
        dns:
          $ref: '#/components/schemas/DnsServiceDiscovery'
          description: Specifies the DNS information for the virtual node.
      description: An object that represents the service discovery information for a virtual node.
    CreateVirtualRouterOutput:
      type: object
      required:
        - virtualRouter
      properties:
        virtualRouter:
          $ref: '#/components/schemas/VirtualRouterData'
          description: The full description of your virtual router following the create call.
      description: <zonbook></zonbook><xhtml></xhtml>
    VirtualRouterListeners:
      type: array
      items:
        $ref: '#/components/schemas/VirtualRouterListener'
      minItems: 1
      maxItems: 1
    CreateVirtualServiceOutput:
      type: object
      required:
        - virtualService
      properties:
        virtualService:
          $ref: '#/components/schemas/VirtualServiceData'
          description: The full description of your virtual service following the create call.
      description: <zonbook></zonbook><xhtml></xhtml>
    VirtualServiceProvider:
      type: object
      properties:
        virtualNode:
          $ref: '#/components/schemas/VirtualNodeServiceProvider'
          description: The virtual node associated with a virtual service.
        virtualRouter:
          $ref: '#/components/schemas/VirtualRouterServiceProvider'
          description: The virtual router associated with a virtual service.
      description: An object that represents the provider for a virtual service.
    DeleteGatewayRouteOutput:
      type: object
      required:
        - gatewayRoute
      properties:
        gatewayRoute:
          $ref: '#/components/schemas/GatewayRouteData'
          description: The gateway route that was deleted.
    ResourceInUseException: {}
    DeleteMeshOutput:
      type: object
      required:
        - mesh
      properties:
        mesh:
          $ref: '#/components/schemas/MeshData'
          description: The service mesh that was deleted.
      description: <zonbook></zonbook><xhtml></xhtml>
    DeleteRouteOutput:
      type: object
      required:
        - route
      properties:
        route:
          $ref: '#/components/schemas/RouteData'
          description: The route that was deleted.
      description: <zonbook></zonbook><xhtml></xhtml>
    DeleteVirtualGatewayOutput:
      type: object
      required:
        - virtualGateway
      properties:
        virtualGateway:
          $ref: '#/components/schemas/VirtualGatewayData'
          description: The virtual gateway that was deleted.
    DeleteVirtualNodeOutput:
      type: object
      required:
        - virtualNode
      properties:
        virtualNode:
          $ref: '#/components/schemas/VirtualNodeData'
          description: The virtual node that was deleted.
      description: <zonbook></zonbook><xhtml></xhtml>
    DeleteVirtualRouterOutput:
      type: object
      required:
        - virtualRouter
      properties:
        virtualRouter:
          $ref: '#/components/schemas/VirtualRouterData'
          description: The virtual router that was deleted.
      description: <zonbook></zonbook><xhtml></xhtml>
    DeleteVirtualServiceOutput:
      type: object
      required:
        - virtualService
      properties:
        virtualService:
          $ref: '#/components/schemas/VirtualServiceData'
          description: The virtual service that was deleted.
      description: <zonbook></zonbook><xhtml></xhtml>
    DescribeGatewayRouteOutput:
      type: object
      required:
        - gatewayRoute
      properties:
        gatewayRoute:
          $ref: '#/components/schemas/GatewayRouteData'
          description: The full description of your gateway route.
    DescribeMeshOutput:
      type: object
      required:
        - mesh
      properties:
        mesh:
          $ref: '#/components/schemas/MeshData'
          description: The full description of your service mesh.
      description: <zonbook></zonbook><xhtml></xhtml>
    DescribeRouteOutput:
      type: object
      required:
        - route
      properties:
        route:
          $ref: '#/components/schemas/RouteData'
          description: The full description of your route.
      description: <zonbook></zonbook><xhtml></xhtml>
    DescribeVirtualGatewayOutput:
      type: object
      required:
        - virtualGateway
      properties:
        virtualGateway:
          $ref: '#/components/schemas/VirtualGatewayData'
          description: The full description of your virtual gateway.
    DescribeVirtualNodeOutput:
      type: object
      required:
        - virtualNode
      properties:
        virtualNode:
          $ref: '#/components/schemas/VirtualNodeData'
          description: The full description of your virtual node.
      description: <zonbook></zonbook><xhtml></xhtml>
    DescribeVirtualRouterOutput:
      type: object
      required:
        - virtualRouter
      properties:
        virtualRouter:
          $ref: '#/components/schemas/VirtualRouterData'
          description: The full description of your virtual router.
      description: <zonbook></zonbook><xhtml></xhtml>
    DescribeVirtualServiceOutput:
      type: object
      required:
        - virtualService
      properties:
        virtualService:
          $ref: '#/components/schemas/VirtualServiceData'
          description: The full description of your virtual service.
      description: <zonbook></zonbook><xhtml></xhtml>
    ListGatewayRoutesOutput:
      type: object
      required:
        - gatewayRoutes
      properties:
        gatewayRoutes:
          $ref: '#/components/schemas/GatewayRouteList'
          description: The list of existing gateway routes for the specified service mesh and virtual gateway.
        nextToken:
          $ref: '#/components/schemas/String'
          description: 'The <code>nextToken</code> value to include in a future <code>ListGatewayRoutes</code> request. When the results of a <code>ListGatewayRoutes</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.'
    ListMeshesOutput:
      type: object
      required:
        - meshes
      properties:
        meshes:
          $ref: '#/components/schemas/MeshList'
          description: The list of existing service meshes.
        nextToken:
          $ref: '#/components/schemas/String'
          description: 'The <code>nextToken</code> value to include in a future <code>ListMeshes</code> request. When the results of a <code>ListMeshes</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.'
      description: <zonbook></zonbook><xhtml></xhtml>
    ListRoutesOutput:
      type: object
      required:
        - routes
      properties:
        nextToken:
          $ref: '#/components/schemas/String'
          description: 'The <code>nextToken</code> value to include in a future <code>ListRoutes</code> request. When the results of a <code>ListRoutes</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.'
        routes:
          $ref: '#/components/schemas/RouteList'
          description: The list of existing routes for the specified service mesh and virtual router.
      description: <zonbook></zonbook><xhtml></xhtml>
    ListTagsForResourceOutput:
      type: object
      required:
        - tags
      properties:
        nextToken:
          $ref: '#/components/schemas/String'
          description: 'The <code>nextToken</code> value to include in a future <code>ListTagsForResource</code> request. When the results of a <code>ListTagsForResource</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.'
        tags:
          $ref: '#/components/schemas/TagList'
          description: The tags for the resource.
      description: <zonbook></zonbook><xhtml></xhtml>
    ListVirtualGatewaysOutput:
      type: object
      required:
        - virtualGateways
      properties:
        nextToken:
          $ref: '#/components/schemas/String'
          description: 'The <code>nextToken</code> value to include in a future <code>ListVirtualGateways</code> request. When the results of a <code>ListVirtualGateways</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.'
        virtualGateways:
          $ref: '#/components/schemas/VirtualGatewayList'
          description: The list of existing virtual gateways for the specified service mesh.
    ListVirtualNodesOutput:
      type: object
      required:
        - virtualNodes
      properties:
        nextToken:
          $ref: '#/components/schemas/String'
          description: 'The <code>nextToken</code> value to include in a future <code>ListVirtualNodes</code> request. When the results of a <code>ListVirtualNodes</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.'
        virtualNodes:
          $ref: '#/components/schemas/VirtualNodeList'
          description: The list of existing virtual nodes for the specified service mesh.
      description: <zonbook></zonbook><xhtml></xhtml>
    ListVirtualRoutersOutput:
      type: object
      required:
        - virtualRouters
      properties:
        nextToken:
          $ref: '#/components/schemas/String'
          description: 'The <code>nextToken</code> value to include in a future <code>ListVirtualRouters</code> request. When the results of a <code>ListVirtualRouters</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.'
        virtualRouters:
          $ref: '#/components/schemas/VirtualRouterList'
          description: The list of existing virtual routers for the specified service mesh.
      description: <zonbook></zonbook><xhtml></xhtml>
    ListVirtualServicesOutput:
      type: object
      required:
        - virtualServices
      properties:
        nextToken:
          $ref: '#/components/schemas/String'
          description: 'The <code>nextToken</code> value to include in a future <code>ListVirtualServices</code> request. When the results of a <code>ListVirtualServices</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.'
        virtualServices:
          $ref: '#/components/schemas/VirtualServiceList'
          description: The list of existing virtual services for the specified service mesh.
      description: <zonbook></zonbook><xhtml></xhtml>
    TagResourceOutput:
      type: object
      properties: {}
      description: <zonbook></zonbook><xhtml></xhtml>
    TooManyTagsException: {}
    UntagResourceOutput:
      type: object
      properties: {}
      description: <zonbook></zonbook><xhtml></xhtml>
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    UpdateGatewayRouteOutput:
      type: object
      required:
        - gatewayRoute
      properties:
        gatewayRoute:
          $ref: '#/components/schemas/GatewayRouteData'
          description: A full description of the gateway route that was updated.
    UpdateMeshOutput:
      type: object
      required:
        - mesh
      properties:
        mesh:
          $ref: '#/components/schemas/MeshData'
      description: <zonbook></zonbook><xhtml></xhtml>
    UpdateRouteOutput:
      type: object
      required:
        - route
      properties:
        route:
          $ref: '#/components/schemas/RouteData'
          description: A full description of the route that was updated.
      description: <zonbook></zonbook><xhtml></xhtml>
    UpdateVirtualGatewayOutput:
      type: object
      required:
        - virtualGateway
      properties:
        virtualGateway:
          $ref: '#/components/schemas/VirtualGatewayData'
          description: A full description of the virtual gateway that was updated.
    UpdateVirtualNodeOutput:
      type: object
      required:
        - virtualNode
      properties:
        virtualNode:
          $ref: '#/components/schemas/VirtualNodeData'
          description: A full description of the virtual node that was updated.
      description: <zonbook></zonbook><xhtml></xhtml>
    UpdateVirtualRouterOutput:
      type: object
      required:
        - virtualRouter
      properties:
        virtualRouter:
          $ref: '#/components/schemas/VirtualRouterData'
          description: A full description of the virtual router that was updated.
      description: <zonbook></zonbook><xhtml></xhtml>
    UpdateVirtualServiceOutput:
      type: object
      required:
        - virtualService
      properties:
        virtualService:
          $ref: '#/components/schemas/VirtualServiceData'
          description: A full description of the virtual service that was updated.
      description: <zonbook></zonbook><xhtml></xhtml>
    FileAccessLog:
      type: object
      required:
        - path
      properties:
        path:
          $ref: '#/components/schemas/FilePath'
          description: '<p>The file path to write access logs to. You can use <code>/dev/stdout</code> to send access logs to standard out and configure your Envoy container to use a log driver, such as <code>awslogs</code>, to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container''s file system to write the files to disk.</p> <note> <p>The Envoy process must have write permissions to the path that you specify here. Otherwise, Envoy fails to bootstrap properly.</p> </note>'
      description: An object that represents an access log file.
    AccessLog:
      type: object
      properties:
        file:
          $ref: '#/components/schemas/FileAccessLog'
          description: The file object to send virtual node access logs to.
      description: An object that represents the access logging information for a virtual node.
    AccountId:
      type: string
      minLength: 12
      maxLength: 12
    Arn:
      type: string
    AwsCloudMapInstanceAttributeKey:
      type: string
      pattern: '^[a-zA-Z0-9!-~]+$'
      minLength: 1
      maxLength: 255
    AwsCloudMapInstanceAttributeValue:
      type: string
      pattern: '^([a-zA-Z0-9!-~][  a-zA-Z0-9!-~]*){0,1}[a-zA-Z0-9!-~]{0,1}$'
      minLength: 1
      maxLength: 1024
    AwsCloudMapInstanceAttribute:
      type: object
      required:
        - key
        - value
      properties:
        key:
          $ref: '#/components/schemas/AwsCloudMapInstanceAttributeKey'
          description: The name of an Cloud Map service instance attribute key. Any Cloud Map service instance that contains the specified key and value is returned.
        value:
          $ref: '#/components/schemas/AwsCloudMapInstanceAttributeValue'
          description: The value of an Cloud Map service instance attribute key. Any Cloud Map service instance that contains the specified key and value is returned.
      description: <p>An object that represents the Cloud Map attribute information for your virtual node.</p> <note> <p>AWS Cloud Map is not available in the eu-south-1 Region.</p> </note>
    AwsCloudMapInstanceAttributes:
      type: array
      items:
        $ref: '#/components/schemas/AwsCloudMapInstanceAttribute'
    AwsCloudMapName:
      type: string
      minLength: 1
      maxLength: 1024
    AwsCloudMapServiceDiscovery:
      type: object
      required:
        - namespaceName
        - serviceName
      properties:
        attributes:
          $ref: '#/components/schemas/AwsCloudMapInstanceAttributes'
          description: A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.
        namespaceName:
          $ref: '#/components/schemas/AwsCloudMapName'
          description: The name of the Cloud Map namespace to use.
        serviceName:
          $ref: '#/components/schemas/AwsCloudMapName'
          description: The name of the Cloud Map service to use.
      description: <p>An object that represents the Cloud Map service discovery information for your virtual node.</p> <note> <p>Cloud Map is not available in the eu-south-1 Region.</p> </note>
    VirtualServiceBackend:
      type: object
      required:
        - virtualServiceName
      properties:
        clientPolicy:
          $ref: '#/components/schemas/ClientPolicy'
          description: A reference to an object that represents the client policy for a backend.
        virtualServiceName:
          $ref: '#/components/schemas/ServiceName'
          description: The name of the virtual service that is acting as a virtual node backend.
      description: An object that represents a virtual service backend for a virtual node.
    Backend:
      type: object
      properties:
        virtualService:
          $ref: '#/components/schemas/VirtualServiceBackend'
          description: 'Specifies a virtual service to use as a backend. '
      description: An object that represents the backends that a virtual node is expected to send outbound traffic to.
    ClientPolicy:
      type: object
      properties:
        tls:
          $ref: '#/components/schemas/ClientPolicyTls'
          description: A reference to an object that represents a Transport Layer Security (TLS) client policy.
      description: An object that represents a client policy.
    Boolean:
      type: boolean
    CertificateAuthorityArns:
      type: array
      items:
        $ref: '#/components/schemas/Arn'
      minItems: 1
      maxItems: 3
    ClientPolicyTls:
      type: object
      required:
        - validation
      properties:
        certificate:
          $ref: '#/components/schemas/ClientTlsCertificate'
          description: A reference to an object that represents a client's TLS certificate.
        enforce:
          $ref: '#/components/schemas/Boolean'
          description: 'Whether the policy is enforced. The default is <code>True</code>, if a value isn''t specified.'
        ports:
          $ref: '#/components/schemas/PortSet'
          description: One or more ports that the policy is enforced for.
        validation:
          $ref: '#/components/schemas/TlsValidationContext'
          description: A reference to an object that represents a TLS validation context.
      description: A reference to an object that represents a Transport Layer Security (TLS) client policy.
    ClientTlsCertificate:
      type: object
      properties:
        file:
          $ref: '#/components/schemas/ListenerTlsFileCertificate'
          description: 'An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html">Transport Layer Security (TLS)</a>.'
        sds:
          $ref: '#/components/schemas/ListenerTlsSdsCertificate'
          description: A reference to an object that represents a client's TLS Secret Discovery Service certificate.
      description: An object that represents the client's certificate.
    PortSet:
      type: array
      items:
        $ref: '#/components/schemas/PortNumber'
    TlsValidationContext:
      type: object
      required:
        - trust
      properties:
        subjectAlternativeNames:
          $ref: '#/components/schemas/SubjectAlternativeNames'
          description: A reference to an object that represents the SANs for a Transport Layer Security (TLS) validation context.
        trust:
          $ref: '#/components/schemas/TlsValidationContextTrust'
          description: A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.
      description: An object that represents how the proxy will validate its peer during Transport Layer Security (TLS) negotiation.
    ListenerTlsFileCertificate:
      type: object
      required:
        - certificateChain
        - privateKey
      properties:
        certificateChain:
          $ref: '#/components/schemas/FilePath'
          description: The certificate chain for the certificate.
        privateKey:
          $ref: '#/components/schemas/FilePath'
          description: The private key for a certificate stored on the file system of the virtual node that the proxy is running on.
      description: 'An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites">Transport Layer Security (TLS)</a>.'
    ListenerTlsSdsCertificate:
      type: object
      required:
        - secretName
      properties:
        secretName:
          $ref: '#/components/schemas/SdsSecretName'
          description: A reference to an object that represents the name of the secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
      description: 'An object that represents the listener''s Secret Discovery Service certificate. The proxy must be configured with a local SDS provider via a Unix Domain Socket. See App Mesh <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html">TLS documentation</a> for more info.'
    String:
      type: string
    ResourceName:
      type: string
      minLength: 1
      maxLength: 255
    GatewayRouteSpec:
      type: object
      properties:
        grpcRoute:
          $ref: '#/components/schemas/GrpcGatewayRoute'
          description: An object that represents the specification of a gRPC gateway route.
        http2Route:
          $ref: '#/components/schemas/HttpGatewayRoute'
          description: An object that represents the specification of an HTTP/2 gateway route.
        httpRoute:
          $ref: '#/components/schemas/HttpGatewayRoute'
          description: An object that represents the specification of an HTTP gateway route.
        priority:
          $ref: '#/components/schemas/GatewayRoutePriority'
          description: The ordering of the gateway routes spec.
      description: An object that represents a gateway route specification. Specify one gateway route type.
    TagList:
      type: array
      items:
        $ref: '#/components/schemas/TagRef'
      minItems: 0
      maxItems: 50
    CreateGatewayRouteInput:
      type: object
      required:
        - gatewayRouteName
        - spec
      title: CreateGatewayRouteInput
      properties:
        clientToken:
          $ref: '#/components/schemas/String'
          description: 'Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.'
        gatewayRouteName:
          $ref: '#/components/schemas/ResourceName'
          description: The name to use for the gateway route.
        spec:
          $ref: '#/components/schemas/GatewayRouteSpec'
          description: The gateway route specification to apply.
        tags:
          $ref: '#/components/schemas/TagList'
          description: 'Optional metadata that you can apply to the gateway route to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.'
    GatewayRouteData:
      type: object
      required:
        - gatewayRouteName
        - meshName
        - metadata
        - spec
        - status
        - virtualGatewayName
      properties:
        gatewayRouteName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the gateway route.
        meshName:
          $ref: '#/components/schemas/ResourceName'
          description: 'The name of the service mesh that the resource resides in. '
        metadata:
          $ref: '#/components/schemas/ResourceMetadata'
        spec:
          $ref: '#/components/schemas/GatewayRouteSpec'
          description: The specifications of the gateway route.
        status:
          $ref: '#/components/schemas/GatewayRouteStatus'
          description: The status of the gateway route.
        virtualGatewayName:
          $ref: '#/components/schemas/ResourceName'
          description: The virtual gateway that the gateway route is associated with.
      description: An object that represents a gateway route returned by a describe operation.
    MeshSpec:
      type: object
      properties:
        egressFilter:
          $ref: '#/components/schemas/EgressFilter'
          description: The egress filter rules for the service mesh.
      description: An object that represents the specification of a service mesh.
    CreateMeshInput:
      type: object
      required:
        - meshName
      title: CreateMeshInput
      properties:
        clientToken:
          $ref: '#/components/schemas/String'
          description: 'Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.'
        meshName:
          $ref: '#/components/schemas/ResourceName'
          description: The name to use for the service mesh.
        spec:
          $ref: '#/components/schemas/MeshSpec'
          description: The service mesh specification to apply.
        tags:
          $ref: '#/components/schemas/TagList'
          description: 'Optional metadata that you can apply to the service mesh to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.'
      description: <zonbook></zonbook><xhtml></xhtml>
    MeshData:
      type: object
      required:
        - meshName
        - metadata
        - spec
        - status
      properties:
        meshName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh.
        metadata:
          $ref: '#/components/schemas/ResourceMetadata'
          description: The associated metadata for the service mesh.
        spec:
          $ref: '#/components/schemas/MeshSpec'
          description: The associated specification for the service mesh.
        status:
          $ref: '#/components/schemas/MeshStatus'
          description: The status of the service mesh.
      description: An object that represents a service mesh returned by a describe operation.
    RouteSpec:
      type: object
      properties:
        grpcRoute:
          $ref: '#/components/schemas/GrpcRoute'
          description: An object that represents the specification of a gRPC route.
        http2Route:
          $ref: '#/components/schemas/HttpRoute'
          description: An object that represents the specification of an HTTP/2 route.
        httpRoute:
          $ref: '#/components/schemas/HttpRoute'
          description: An object that represents the specification of an HTTP route.
        priority:
          $ref: '#/components/schemas/RoutePriority'
          description: 'The priority for the route. Routes are matched based on the specified value, where 0 is the highest priority.'
        tcpRoute:
          $ref: '#/components/schemas/TcpRoute'
          description: An object that represents the specification of a TCP route.
      description: An object that represents a route specification. Specify one route type.
    CreateRouteInput:
      type: object
      required:
        - routeName
        - spec
      title: CreateRouteInput
      properties:
        clientToken:
          $ref: '#/components/schemas/String'
          description: 'Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.'
        routeName:
          $ref: '#/components/schemas/ResourceName'
          description: The name to use for the route.
        spec:
          $ref: '#/components/schemas/RouteSpec'
          description: The route specification to apply.
        tags:
          $ref: '#/components/schemas/TagList'
          description: 'Optional metadata that you can apply to the route to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.'
      description: <zonbook></zonbook><xhtml></xhtml>
    RouteData:
      type: object
      required:
        - meshName
        - metadata
        - routeName
        - spec
        - status
        - virtualRouterName
      properties:
        meshName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the route resides in.
        metadata:
          $ref: '#/components/schemas/ResourceMetadata'
          description: The associated metadata for the route.
        routeName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the route.
        spec:
          $ref: '#/components/schemas/RouteSpec'
          description: The specifications of the route.
        status:
          $ref: '#/components/schemas/RouteStatus'
          description: The status of the route.
        virtualRouterName:
          $ref: '#/components/schemas/ResourceName'
          description: The virtual router that the route is associated with.
      description: An object that represents a route returned by a describe operation.
    VirtualGatewaySpec:
      type: object
      required:
        - listeners
      properties:
        backendDefaults:
          $ref: '#/components/schemas/VirtualGatewayBackendDefaults'
          description: A reference to an object that represents the defaults for backends.
        listeners:
          $ref: '#/components/schemas/VirtualGatewayListeners'
          description: The listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener.
        logging:
          $ref: '#/components/schemas/VirtualGatewayLogging'
      description: An object that represents the specification of a service mesh resource.
    CreateVirtualGatewayInput:
      type: object
      required:
        - spec
        - virtualGatewayName
      title: CreateVirtualGatewayInput
      properties:
        clientToken:
          $ref: '#/components/schemas/String'
          description: 'Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.'
        spec:
          $ref: '#/components/schemas/VirtualGatewaySpec'
          description: The virtual gateway specification to apply.
        tags:
          $ref: '#/components/schemas/TagList'
          description: 'Optional metadata that you can apply to the virtual gateway to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.'
        virtualGatewayName:
          $ref: '#/components/schemas/ResourceName'
          description: The name to use for the virtual gateway.
    VirtualGatewayData:
      type: object
      required:
        - meshName
        - metadata
        - spec
        - status
        - virtualGatewayName
      properties:
        meshName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the virtual gateway resides in.
        metadata:
          $ref: '#/components/schemas/ResourceMetadata'
        spec:
          $ref: '#/components/schemas/VirtualGatewaySpec'
          description: The specifications of the virtual gateway.
        status:
          $ref: '#/components/schemas/VirtualGatewayStatus'
          description: The current status of the virtual gateway.
        virtualGatewayName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual gateway.
      description: An object that represents a virtual gateway returned by a describe operation.
    VirtualNodeSpec:
      type: object
      properties:
        backendDefaults:
          $ref: '#/components/schemas/BackendDefaults'
          description: A reference to an object that represents the defaults for backends.
        backends:
          $ref: '#/components/schemas/Backends'
          description: The backends that the virtual node is expected to send outbound traffic to.
        listeners:
          $ref: '#/components/schemas/Listeners'
          description: The listener that the virtual node is expected to receive inbound traffic from. You can specify one listener.
        logging:
          $ref: '#/components/schemas/Logging'
          description: The inbound and outbound access logging information for the virtual node.
        serviceDiscovery:
          $ref: '#/components/schemas/ServiceDiscovery'
          description: 'The service discovery information for the virtual node. If your virtual node does not expect ingress traffic, you can omit this parameter. If you specify a <code>listener</code>, then you must specify service discovery information.'
      description: An object that represents the specification of a virtual node.
    CreateVirtualNodeInput:
      type: object
      required:
        - spec
        - virtualNodeName
      title: CreateVirtualNodeInput
      properties:
        clientToken:
          $ref: '#/components/schemas/String'
          description: 'Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.'
        spec:
          $ref: '#/components/schemas/VirtualNodeSpec'
          description: The virtual node specification to apply.
        tags:
          $ref: '#/components/schemas/TagList'
          description: 'Optional metadata that you can apply to the virtual node to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.'
        virtualNodeName:
          $ref: '#/components/schemas/ResourceName'
          description: The name to use for the virtual node.
      description: <zonbook></zonbook><xhtml></xhtml>
    VirtualNodeData:
      type: object
      required:
        - meshName
        - metadata
        - spec
        - status
        - virtualNodeName
      properties:
        meshName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the virtual node resides in.
        metadata:
          $ref: '#/components/schemas/ResourceMetadata'
          description: The associated metadata for the virtual node.
        spec:
          $ref: '#/components/schemas/VirtualNodeSpec'
          description: The specifications of the virtual node.
        status:
          $ref: '#/components/schemas/VirtualNodeStatus'
          description: The current status for the virtual node.
        virtualNodeName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual node.
      description: An object that represents a virtual node returned by a describe operation.
    VirtualRouterSpec:
      type: object
      properties:
        listeners:
          $ref: '#/components/schemas/VirtualRouterListeners'
          description: The listeners that the virtual router is expected to receive inbound traffic from. You can specify one listener.
      description: An object that represents the specification of a virtual router.
    CreateVirtualRouterInput:
      type: object
      required:
        - spec
        - virtualRouterName
      title: CreateVirtualRouterInput
      properties:
        clientToken:
          $ref: '#/components/schemas/String'
          description: 'Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.'
        spec:
          $ref: '#/components/schemas/VirtualRouterSpec'
          description: The virtual router specification to apply.
        tags:
          $ref: '#/components/schemas/TagList'
          description: 'Optional metadata that you can apply to the virtual router to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.'
        virtualRouterName:
          $ref: '#/components/schemas/ResourceName'
          description: The name to use for the virtual router.
      description: <zonbook></zonbook><xhtml></xhtml>
    VirtualRouterData:
      type: object
      required:
        - meshName
        - metadata
        - spec
        - status
        - virtualRouterName
      properties:
        meshName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the virtual router resides in.
        metadata:
          $ref: '#/components/schemas/ResourceMetadata'
          description: The associated metadata for the virtual router.
        spec:
          $ref: '#/components/schemas/VirtualRouterSpec'
          description: The specifications of the virtual router.
        status:
          $ref: '#/components/schemas/VirtualRouterStatus'
          description: The current status of the virtual router.
        virtualRouterName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual router.
      description: An object that represents a virtual router returned by a describe operation.
    VirtualServiceSpec:
      type: object
      properties:
        provider:
          $ref: '#/components/schemas/VirtualServiceProvider'
          description: The App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.
      description: An object that represents the specification of a virtual service.
    ServiceName:
      type: string
    CreateVirtualServiceInput:
      type: object
      required:
        - spec
        - virtualServiceName
      title: CreateVirtualServiceInput
      properties:
        clientToken:
          $ref: '#/components/schemas/String'
          description: 'Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.'
        spec:
          $ref: '#/components/schemas/VirtualServiceSpec'
          description: The virtual service specification to apply.
        tags:
          $ref: '#/components/schemas/TagList'
          description: 'Optional metadata that you can apply to the virtual service to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.'
        virtualServiceName:
          $ref: '#/components/schemas/ServiceName'
          description: The name to use for the virtual service.
      description: <zonbook></zonbook><xhtml></xhtml>
    VirtualServiceData:
      type: object
      required:
        - meshName
        - metadata
        - spec
        - status
        - virtualServiceName
      properties:
        meshName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the virtual service resides in.
        metadata:
          $ref: '#/components/schemas/ResourceMetadata'
        spec:
          $ref: '#/components/schemas/VirtualServiceSpec'
          description: The specifications of the virtual service.
        status:
          $ref: '#/components/schemas/VirtualServiceStatus'
          description: The current status of the virtual service.
        virtualServiceName:
          $ref: '#/components/schemas/ServiceName'
          description: The name of the virtual service.
      description: An object that represents a virtual service returned by a describe operation.
    DefaultGatewayRouteRewrite:
      type: string
      enum:
        - ENABLED
        - DISABLED
    DeleteGatewayRouteInput:
      type: object
      title: DeleteGatewayRouteInput
      properties: {}
    DeleteMeshInput:
      type: object
      title: DeleteMeshInput
      properties: {}
      description: <zonbook></zonbook><xhtml></xhtml>
    DeleteRouteInput:
      type: object
      title: DeleteRouteInput
      properties: {}
      description: <zonbook></zonbook><xhtml></xhtml>
    DeleteVirtualGatewayInput:
      type: object
      title: DeleteVirtualGatewayInput
      properties: {}
    DeleteVirtualNodeInput:
      type: object
      title: DeleteVirtualNodeInput
      properties: {}
      description: Deletes a virtual node input.
    DeleteVirtualRouterInput:
      type: object
      title: DeleteVirtualRouterInput
      properties: {}
      description: <zonbook></zonbook><xhtml></xhtml>
    DeleteVirtualServiceInput:
      type: object
      title: DeleteVirtualServiceInput
      properties: {}
      description: <zonbook></zonbook><xhtml></xhtml>
    DescribeGatewayRouteInput:
      type: object
      title: DescribeGatewayRouteInput
      properties: {}
    DescribeMeshInput:
      type: object
      title: DescribeMeshInput
      properties: {}
      description: <zonbook></zonbook><xhtml></xhtml>
    DescribeRouteInput:
      type: object
      title: DescribeRouteInput
      properties: {}
      description: <zonbook></zonbook><xhtml></xhtml>
    DescribeVirtualGatewayInput:
      type: object
      title: DescribeVirtualGatewayInput
      properties: {}
    DescribeVirtualNodeInput:
      type: object
      title: DescribeVirtualNodeInput
      properties: {}
      description: <zonbook></zonbook><xhtml></xhtml>
    DescribeVirtualRouterInput:
      type: object
      title: DescribeVirtualRouterInput
      properties: {}
      description: <zonbook></zonbook><xhtml></xhtml>
    DescribeVirtualServiceInput:
      type: object
      title: DescribeVirtualServiceInput
      properties: {}
      description: <zonbook></zonbook><xhtml></xhtml>
    DnsResponseType:
      type: string
      enum:
        - LOADBALANCER
        - ENDPOINTS
    Hostname:
      type: string
    DnsServiceDiscovery:
      type: object
      required:
        - hostname
      properties:
        hostname:
          $ref: '#/components/schemas/Hostname'
          description: 'Specifies the DNS service discovery hostname for the virtual node. '
        responseType:
          $ref: '#/components/schemas/DnsResponseType'
          description: Specifies the DNS response type for the virtual node.
      description: An object that represents the DNS service discovery information for your virtual node.
    DurationUnit:
      type: string
      enum:
        - s
        - ms
    DurationValue:
      type: integer
      minimum: 0
    Duration:
      type: object
      properties:
        unit:
          $ref: '#/components/schemas/DurationUnit'
          description: A unit of time.
        value:
          $ref: '#/components/schemas/DurationValue'
          description: A number of time units.
      description: An object that represents a duration of time.
    EgressFilterType:
      type: string
      enum:
        - ALLOW_ALL
        - DROP_ALL
    ExactHostName:
      type: string
      minLength: 1
      maxLength: 253
    FilePath:
      type: string
      minLength: 1
      maxLength: 255
    ResourceMetadata:
      type: object
      required:
        - arn
        - createdAt
        - lastUpdatedAt
        - meshOwner
        - resourceOwner
        - uid
        - version
      properties:
        arn:
          $ref: '#/components/schemas/Arn'
          description: The full Amazon Resource Name (ARN) for the resource.
        createdAt:
          $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was created.
        lastUpdatedAt:
          $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was last updated.
        meshOwner:
          $ref: '#/components/schemas/AccountId'
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
        resourceOwner:
          $ref: '#/components/schemas/AccountId'
          description: 'The AWS IAM account ID of the resource owner. If the account ID is not your own, then it''s the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
        uid:
          $ref: '#/components/schemas/String'
          description: The unique identifier for the resource.
        version:
          $ref: '#/components/schemas/Long'
          description: 'The version of the resource. Resources are created at version 1, and this version is incremented each time that they''re updated.'
      description: An object that represents metadata for a resource.
    GatewayRouteStatus:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/GatewayRouteStatusCode'
          description: The current status for the gateway route.
      description: An object that represents the current status of a gateway route.
    SuffixHostname:
      type: string
      minLength: 1
      maxLength: 253
    GatewayRouteHostnameMatch:
      type: object
      properties:
        exact:
          $ref: '#/components/schemas/ExactHostName'
          description: The exact host name to match on.
        suffix:
          $ref: '#/components/schemas/SuffixHostname'
          description: The specified ending characters of the host name to match on.
      description: An object representing the gateway route host name to match.
    GatewayRouteHostnameRewrite:
      type: object
      properties:
        defaultTargetHostname:
          $ref: '#/components/schemas/DefaultGatewayRouteRewrite'
          description: The default target host name to write to.
      description: An object representing the gateway route host name to rewrite.
    GatewayRouteRef:
      type: object
      required:
        - arn
        - createdAt
        - gatewayRouteName
        - lastUpdatedAt
        - meshName
        - meshOwner
        - resourceOwner
        - version
        - virtualGatewayName
      properties:
        arn:
          $ref: '#/components/schemas/Arn'
          description: The full Amazon Resource Name (ARN) for the gateway route.
        createdAt:
          $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was created.
        gatewayRouteName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the gateway route.
        lastUpdatedAt:
          $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was last updated.
        meshName:
          $ref: '#/components/schemas/ResourceName'
          description: 'The name of the service mesh that the resource resides in. '
        meshOwner:
          $ref: '#/components/schemas/AccountId'
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
        resourceOwner:
          $ref: '#/components/schemas/AccountId'
          description: 'The AWS IAM account ID of the resource owner. If the account ID is not your own, then it''s the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
        version:
          $ref: '#/components/schemas/Long'
          description: 'The version of the resource. Resources are created at version 1, and this version is incremented each time that they''re updated.'
        virtualGatewayName:
          $ref: '#/components/schemas/ResourceName'
          description: The virtual gateway that the gateway route is associated with.
      description: An object that represents a gateway route returned by a list operation.
    GatewayRouteList:
      type: array
      items:
        $ref: '#/components/schemas/GatewayRouteRef'
    Timestamp:
      type: string
      format: date-time
    Long:
      type: integer
    GatewayRouteStatusCode:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
        - DELETED
    GatewayRouteVirtualService:
      type: object
      required:
        - virtualServiceName
      properties:
        virtualServiceName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual service that traffic is routed to.
      description: An object that represents the virtual service that traffic is routed to.
    GatewayRouteTarget:
      type: object
      required:
        - virtualService
      properties:
        virtualService:
          $ref: '#/components/schemas/GatewayRouteVirtualService'
          description: An object that represents a virtual service gateway route target.
      description: An object that represents a gateway route target.
    GrpcGatewayRouteAction:
      type: object
      required:
        - target
      properties:
        rewrite:
          $ref: '#/components/schemas/GrpcGatewayRouteRewrite'
          description: The gateway route action to rewrite.
        target:
          $ref: '#/components/schemas/GatewayRouteTarget'
          description: An object that represents the target that traffic is routed to when a request matches the gateway route.
      description: An object that represents the action to take if a match is determined.
    GrpcGatewayRouteMatch:
      type: object
      properties:
        hostname:
          $ref: '#/components/schemas/GatewayRouteHostnameMatch'
          description: The gateway route host name to be matched on.
        metadata:
          $ref: '#/components/schemas/GrpcGatewayRouteMetadataList'
          description: The gateway route metadata to be matched on.
        serviceName:
          $ref: '#/components/schemas/ServiceName'
          description: The fully qualified domain name for the service to match from the request.
      description: An object that represents the criteria for determining a request match.
    GrpcGatewayRouteRewrite:
      type: object
      properties:
        hostname:
          $ref: '#/components/schemas/GatewayRouteHostnameRewrite'
          description: The host name of the gateway route to rewrite.
      description: An object that represents the gateway route to rewrite.
    GrpcGatewayRouteMetadataList:
      type: array
      items:
        $ref: '#/components/schemas/GrpcGatewayRouteMetadata'
      minItems: 1
      maxItems: 10
    GrpcMetadataMatchMethod:
      type: object
      properties:
        exact:
          $ref: '#/components/schemas/HeaderMatch'
          description: The exact method header to be matched on.
        prefix:
          $ref: '#/components/schemas/HeaderMatch'
          description: The specified beginning characters of the method header to be matched on.
        range:
          $ref: '#/components/schemas/MatchRange'
        regex:
          $ref: '#/components/schemas/HeaderMatch'
          description: The regex used to match the method header.
        suffix:
          $ref: '#/components/schemas/HeaderMatch'
          description: The specified ending characters of the method header to match on.
      description: An object representing the method header to be matched.
    HeaderName:
      type: string
      minLength: 1
      maxLength: 50
    GrpcGatewayRouteMetadata:
      type: object
      required:
        - name
      properties:
        invert:
          $ref: '#/components/schemas/Boolean'
          description: Specify <code>True</code> to match anything except the match criteria. The default value is <code>False</code>.
        match:
          $ref: '#/components/schemas/GrpcMetadataMatchMethod'
          description: The criteria for determining a metadata match.
        name:
          $ref: '#/components/schemas/HeaderName'
          description: A name for the gateway route metadata.
      description: An object representing the metadata of the gateway route.
    HeaderMatch:
      type: string
      minLength: 1
      maxLength: 255
    MatchRange:
      type: object
      required:
        - end
        - start
      properties:
        end:
          $ref: '#/components/schemas/Long'
          description: The end of the range.
        start:
          $ref: '#/components/schemas/Long'
          description: The start of the range.
      description: 'An object that represents the range of values to match on. The first character of the range is included in the range, though the last character is not. For example, if the range specified were 1-100, only values 1-99 would be matched.'
    GrpcRetryPolicyEvents:
      type: array
      items:
        $ref: '#/components/schemas/GrpcRetryPolicyEvent'
      minItems: 1
      maxItems: 5
    HttpRetryPolicyEvents:
      type: array
      items:
        $ref: '#/components/schemas/HttpRetryPolicyEvent'
      minItems: 1
      maxItems: 25
    MaxRetries:
      type: integer
      minimum: 0
    TcpRetryPolicyEvents:
      type: array
      items:
        $ref: '#/components/schemas/TcpRetryPolicyEvent'
      minItems: 1
      maxItems: 1
    GrpcRetryPolicy:
      type: object
      required:
        - maxRetries
        - perRetryTimeout
      properties:
        grpcRetryEvents:
          $ref: '#/components/schemas/GrpcRetryPolicyEvents'
          description: Specify at least one of the valid values.
        httpRetryEvents:
          $ref: '#/components/schemas/HttpRetryPolicyEvents'
          description: '<p>Specify at least one of the following values.</p> <ul> <li> <p> <b>server-error</b> – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511</p> </li> <li> <p> <b>gateway-error</b> – HTTP status codes 502, 503, and 504</p> </li> <li> <p> <b>client-error</b> – HTTP status code 409</p> </li> <li> <p> <b>stream-error</b> – Retry on refused stream</p> </li> </ul>'
        maxRetries:
          $ref: '#/components/schemas/MaxRetries'
          description: The maximum number of retry attempts.
        perRetryTimeout:
          $ref: '#/components/schemas/Duration'
          description: The timeout for each retry attempt.
        tcpRetryEvents:
          $ref: '#/components/schemas/TcpRetryPolicyEvents'
          description: Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable.
      description: 'An object that represents a retry policy. Specify at least one value for at least one of the types of <code>RetryEvents</code>, a value for <code>maxRetries</code>, and a value for <code>perRetryTimeout</code>. Both <code>server-error</code> and <code>gateway-error</code> under <code>httpRetryEvents</code> include the Envoy <code>reset</code> policy. For more information on the <code>reset</code> policy, see the <a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-on">Envoy documentation</a>.'
    GrpcRetryPolicyEvent:
      type: string
      enum:
        - cancelled
        - deadline-exceeded
        - internal
        - resource-exhausted
        - unavailable
    GrpcRouteAction:
      type: object
      required:
        - weightedTargets
      properties:
        weightedTargets:
          $ref: '#/components/schemas/WeightedTargets'
          description: An object that represents the targets that traffic is routed to when a request matches the route.
      description: An object that represents the action to take if a match is determined.
    GrpcRouteMatch:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/GrpcRouteMetadataList'
          description: An object that represents the data to match from the request.
        methodName:
          $ref: '#/components/schemas/MethodName'
          description: 'The method name to match from the request. If you specify a name, you must also specify a <code>serviceName</code>.'
        serviceName:
          $ref: '#/components/schemas/ServiceName'
          description: The fully qualified domain name for the service to match from the request.
      description: An object that represents the criteria for determining a request match.
    GrpcTimeout:
      type: object
      properties:
        idle:
          $ref: '#/components/schemas/Duration'
          description: An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.
        perRequest:
          $ref: '#/components/schemas/Duration'
          description: 'An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.'
      description: 'An object that represents types of timeouts. '
    WeightedTargets:
      type: array
      items:
        $ref: '#/components/schemas/WeightedTarget'
      minItems: 1
      maxItems: 10
    GrpcRouteMetadataList:
      type: array
      items:
        $ref: '#/components/schemas/GrpcRouteMetadata'
      minItems: 1
      maxItems: 10
    MethodName:
      type: string
      minLength: 1
      maxLength: 50
    GrpcRouteMetadataMatchMethod:
      type: object
      properties:
        exact:
          $ref: '#/components/schemas/HeaderMatch'
          description: The value sent by the client must match the specified value exactly.
        prefix:
          $ref: '#/components/schemas/HeaderMatch'
          description: The value sent by the client must begin with the specified characters.
        range:
          $ref: '#/components/schemas/MatchRange'
          description: An object that represents the range of values to match on.
        regex:
          $ref: '#/components/schemas/HeaderMatch'
          description: The value sent by the client must include the specified characters.
        suffix:
          $ref: '#/components/schemas/HeaderMatch'
          description: The value sent by the client must end with the specified characters.
      description: An object that represents the match method. Specify one of the match values.
    GrpcRouteMetadata:
      type: object
      required:
        - name
      properties:
        invert:
          $ref: '#/components/schemas/Boolean'
          description: Specify <code>True</code> to match anything except the match criteria. The default value is <code>False</code>.
        match:
          $ref: '#/components/schemas/GrpcRouteMetadataMatchMethod'
          description: An object that represents the data to match from the request.
        name:
          $ref: '#/components/schemas/HeaderName'
          description: The name of the route.
      description: An object that represents the match metadata for the route.
    HeaderMatchMethod:
      type: object
      properties:
        exact:
          $ref: '#/components/schemas/HeaderMatch'
          description: The value sent by the client must match the specified value exactly.
        prefix:
          $ref: '#/components/schemas/HeaderMatch'
          description: The value sent by the client must begin with the specified characters.
        range:
          $ref: '#/components/schemas/MatchRange'
          description: An object that represents the range of values to match on.
        regex:
          $ref: '#/components/schemas/HeaderMatch'
          description: The value sent by the client must include the specified characters.
        suffix:
          $ref: '#/components/schemas/HeaderMatch'
          description: The value sent by the client must end with the specified characters.
      description: An object that represents the method and value to match with the header value sent in a request. Specify one match method.
    HealthCheckIntervalMillis:
      type: integer
      minimum: 5000
      maximum: 300000
    HealthCheckThreshold:
      type: integer
      minimum: 2
      maximum: 10
    PortNumber:
      type: integer
      minimum: 1
      maximum: 65535
    PortProtocol:
      type: string
      enum:
        - http
        - tcp
        - http2
        - grpc
    HealthCheckTimeoutMillis:
      type: integer
      minimum: 2000
      maximum: 60000
    HealthCheckPolicy:
      type: object
      required:
        - healthyThreshold
        - intervalMillis
        - protocol
        - timeoutMillis
        - unhealthyThreshold
      properties:
        healthyThreshold:
          $ref: '#/components/schemas/HealthCheckThreshold'
          description: The number of consecutive successful health checks that must occur before declaring listener healthy.
        intervalMillis:
          $ref: '#/components/schemas/HealthCheckIntervalMillis'
          description: The time period in milliseconds between each health check execution.
        path:
          $ref: '#/components/schemas/String'
          description: 'The destination path for the health check request. This value is only used if the specified protocol is HTTP or HTTP/2. For any other protocol, this value is ignored.'
        port:
          $ref: '#/components/schemas/PortNumber'
          description: The destination port for the health check request. This port must match the port defined in the <a>PortMapping</a> for the listener.
        protocol:
          $ref: '#/components/schemas/PortProtocol'
          description: 'The protocol for the health check request. If you specify <code>grpc</code>, then your service must conform to the <a href="https://github.com/grpc/grpc/blob/master/doc/health-checking.md">GRPC Health Checking Protocol</a>.'
        timeoutMillis:
          $ref: '#/components/schemas/HealthCheckTimeoutMillis'
          description: 'The amount of time to wait when receiving a response from the health check, in milliseconds.'
        unhealthyThreshold:
          $ref: '#/components/schemas/HealthCheckThreshold'
          description: 'The number of consecutive failed health checks that must occur before declaring a virtual node unhealthy. '
      description: An object that represents the health check policy for a virtual node's listener.
    HttpGatewayRouteAction:
      type: object
      required:
        - target
      properties:
        rewrite:
          $ref: '#/components/schemas/HttpGatewayRouteRewrite'
          description: The gateway route action to rewrite.
        target:
          $ref: '#/components/schemas/GatewayRouteTarget'
          description: An object that represents the target that traffic is routed to when a request matches the gateway route.
      description: An object that represents the action to take if a match is determined.
    HttpGatewayRouteMatch:
      type: object
      properties:
        headers:
          $ref: '#/components/schemas/HttpGatewayRouteHeaders'
          description: The client request headers to match on.
        hostname:
          $ref: '#/components/schemas/GatewayRouteHostnameMatch'
          description: The host name to match on.
        method:
          $ref: '#/components/schemas/HttpMethod'
          description: The method to match on.
        path:
          $ref: '#/components/schemas/HttpPathMatch'
          description: The path to match on.
        prefix:
          $ref: '#/components/schemas/String'
          description: 'Specifies the path to match requests with. This parameter must always start with <code>/</code>, which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is <code>my-service.local</code> and you want the route to match requests to <code>my-service.local/metrics</code>, your prefix should be <code>/metrics</code>.'
        queryParameters:
          $ref: '#/components/schemas/HttpQueryParameters'
          description: The query parameter to match on.
      description: An object that represents the criteria for determining a request match.
    HttpGatewayRouteRewrite:
      type: object
      properties:
        hostname:
          $ref: '#/components/schemas/GatewayRouteHostnameRewrite'
          description: The host name to rewrite.
        path:
          $ref: '#/components/schemas/HttpGatewayRoutePathRewrite'
          description: The path to rewrite.
        prefix:
          $ref: '#/components/schemas/HttpGatewayRoutePrefixRewrite'
          description: The specified beginning characters to rewrite.
      description: An object representing the gateway route to rewrite.
    HttpGatewayRouteHeader:
      type: object
      required:
        - name
      properties:
        invert:
          $ref: '#/components/schemas/Boolean'
          description: Specify <code>True</code> to match anything except the match criteria. The default value is <code>False</code>.
        match:
          $ref: '#/components/schemas/HeaderMatchMethod'
        name:
          $ref: '#/components/schemas/HeaderName'
          description: A name for the HTTP header in the gateway route that will be matched on.
      description: An object that represents the HTTP header in the gateway route.
    HttpGatewayRouteHeaders:
      type: array
      items:
        $ref: '#/components/schemas/HttpGatewayRouteHeader'
      minItems: 1
      maxItems: 10
    HttpMethod:
      type: string
      enum:
        - GET
        - HEAD
        - POST
        - PUT
        - DELETE
        - CONNECT
        - OPTIONS
        - TRACE
        - PATCH
    HttpPathMatch:
      type: object
      properties:
        exact:
          $ref: '#/components/schemas/HttpPathExact'
          description: The exact path to match on.
        regex:
          $ref: '#/components/schemas/HttpPathRegex'
          description: The regex used to match the path.
      description: An object representing the path to match in the request.
    HttpQueryParameters:
      type: array
      items:
        $ref: '#/components/schemas/HttpQueryParameter'
      minItems: 1
      maxItems: 10
    HttpPathExact:
      type: string
      minLength: 1
      maxLength: 255
    HttpGatewayRoutePathRewrite:
      type: object
      properties:
        exact:
          $ref: '#/components/schemas/HttpPathExact'
          description: The exact path to rewrite.
      description: An object that represents the path to rewrite.
    HttpGatewayRoutePrefix:
      type: string
      minLength: 1
      maxLength: 255
    HttpGatewayRoutePrefixRewrite:
      type: object
      properties:
        defaultPrefix:
          $ref: '#/components/schemas/DefaultGatewayRouteRewrite'
          description: The default prefix used to replace the incoming route prefix when rewritten.
        value:
          $ref: '#/components/schemas/HttpGatewayRoutePrefix'
          description: The value used to replace the incoming route prefix when rewritten.
      description: An object representing the beginning characters of the route to rewrite.
    HttpPathRegex:
      type: string
      minLength: 1
      maxLength: 255
    QueryParameterMatch:
      type: object
      properties:
        exact:
          $ref: '#/components/schemas/String'
          description: The exact query parameter to match on.
      description: An object representing the query parameter to match.
    QueryParameterName:
      type: string
    HttpQueryParameter:
      type: object
      required:
        - name
      properties:
        match:
          $ref: '#/components/schemas/QueryParameterMatch'
          description: The query parameter to match on.
        name:
          $ref: '#/components/schemas/QueryParameterName'
          description: A name for the query parameter that will be matched on.
      description: An object that represents the query parameter in the request.
    HttpRetryPolicy:
      type: object
      required:
        - maxRetries
        - perRetryTimeout
      properties:
        httpRetryEvents:
          $ref: '#/components/schemas/HttpRetryPolicyEvents'
          description: '<p>Specify at least one of the following values.</p> <ul> <li> <p> <b>server-error</b> – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511</p> </li> <li> <p> <b>gateway-error</b> – HTTP status codes 502, 503, and 504</p> </li> <li> <p> <b>client-error</b> – HTTP status code 409</p> </li> <li> <p> <b>stream-error</b> – Retry on refused stream</p> </li> </ul>'
        maxRetries:
          $ref: '#/components/schemas/MaxRetries'
          description: The maximum number of retry attempts.
        perRetryTimeout:
          $ref: '#/components/schemas/Duration'
          description: The timeout for each retry attempt.
        tcpRetryEvents:
          $ref: '#/components/schemas/TcpRetryPolicyEvents'
          description: Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable.
      description: 'An object that represents a retry policy. Specify at least one value for at least one of the types of <code>RetryEvents</code>, a value for <code>maxRetries</code>, and a value for <code>perRetryTimeout</code>. Both <code>server-error</code> and <code>gateway-error</code> under <code>httpRetryEvents</code> include the Envoy <code>reset</code> policy. For more information on the <code>reset</code> policy, see the <a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-on">Envoy documentation</a>.'
    HttpRetryPolicyEvent:
      type: string
      minLength: 1
      maxLength: 25
    HttpRouteAction:
      type: object
      required:
        - weightedTargets
      properties:
        weightedTargets:
          $ref: '#/components/schemas/WeightedTargets'
          description: An object that represents the targets that traffic is routed to when a request matches the route.
      description: An object that represents the action to take if a match is determined.
    HttpRouteMatch:
      type: object
      properties:
        headers:
          $ref: '#/components/schemas/HttpRouteHeaders'
          description: The client request headers to match on.
        method:
          $ref: '#/components/schemas/HttpMethod'
          description: The client request method to match on. Specify only one.
        path:
          $ref: '#/components/schemas/HttpPathMatch'
          description: The client request path to match on.
        prefix:
          $ref: '#/components/schemas/String'
          description: 'Specifies the path to match requests with. This parameter must always start with <code>/</code>, which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is <code>my-service.local</code> and you want the route to match requests to <code>my-service.local/metrics</code>, your prefix should be <code>/metrics</code>.'
        queryParameters:
          $ref: '#/components/schemas/HttpQueryParameters'
          description: The client request query parameters to match on.
        scheme:
          $ref: '#/components/schemas/HttpScheme'
          description: The client request scheme to match on. Specify only one. Applicable only for HTTP2 routes.
      description: An object that represents the requirements for a route to match HTTP requests for a virtual router.
    HttpTimeout:
      type: object
      properties:
        idle:
          $ref: '#/components/schemas/Duration'
          description: An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.
        perRequest:
          $ref: '#/components/schemas/Duration'
          description: 'An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.'
      description: 'An object that represents types of timeouts. '
    HttpRouteHeader:
      type: object
      required:
        - name
      properties:
        invert:
          $ref: '#/components/schemas/Boolean'
          description: Specify <code>True</code> to match anything except the match criteria. The default value is <code>False</code>.
        match:
          $ref: '#/components/schemas/HeaderMatchMethod'
          description: The <code>HeaderMatchMethod</code> object.
        name:
          $ref: '#/components/schemas/HeaderName'
          description: A name for the HTTP header in the client request that will be matched on.
      description: An object that represents the HTTP header in the request.
    HttpRouteHeaders:
      type: array
      items:
        $ref: '#/components/schemas/HttpRouteHeader'
      minItems: 1
      maxItems: 10
    HttpScheme:
      type: string
      enum:
        - http
        - https
    ListGatewayRoutesLimit:
      type: integer
      minimum: 1
      maximum: 100
    ListGatewayRoutesInput:
      type: object
      title: ListGatewayRoutesInput
      properties: {}
    ListMeshesLimit:
      type: integer
      minimum: 1
      maximum: 100
    ListMeshesInput:
      type: object
      title: ListMeshesInput
      properties: {}
      description: <zonbook></zonbook><xhtml></xhtml>
    MeshList:
      type: array
      items:
        $ref: '#/components/schemas/MeshRef'
    ListRoutesLimit:
      type: integer
      minimum: 1
      maximum: 100
    ListRoutesInput:
      type: object
      title: ListRoutesInput
      properties: {}
      description: <zonbook></zonbook><xhtml></xhtml>
    RouteList:
      type: array
      items:
        $ref: '#/components/schemas/RouteRef'
    TagsLimit:
      type: integer
      minimum: 1
      maximum: 50
    ListTagsForResourceInput:
      type: object
      title: ListTagsForResourceInput
      properties: {}
      description: <zonbook></zonbook><xhtml></xhtml>
    ListVirtualGatewaysLimit:
      type: integer
      minimum: 1
      maximum: 100
    ListVirtualGatewaysInput:
      type: object
      title: ListVirtualGatewaysInput
      properties: {}
    VirtualGatewayList:
      type: array
      items:
        $ref: '#/components/schemas/VirtualGatewayRef'
    ListVirtualNodesLimit:
      type: integer
      minimum: 1
      maximum: 100
    ListVirtualNodesInput:
      type: object
      title: ListVirtualNodesInput
      properties: {}
      description: <zonbook></zonbook><xhtml></xhtml>
    VirtualNodeList:
      type: array
      items:
        $ref: '#/components/schemas/VirtualNodeRef'
    ListVirtualRoutersLimit:
      type: integer
      minimum: 1
      maximum: 100
    ListVirtualRoutersInput:
      type: object
      title: ListVirtualRoutersInput
      properties: {}
      description: <zonbook></zonbook><xhtml></xhtml>
    VirtualRouterList:
      type: array
      items:
        $ref: '#/components/schemas/VirtualRouterRef'
    ListVirtualServicesLimit:
      type: integer
      minimum: 1
      maximum: 100
    ListVirtualServicesInput:
      type: object
      title: ListVirtualServicesInput
      properties: {}
      description: <zonbook></zonbook><xhtml></xhtml>
    VirtualServiceList:
      type: array
      items:
        $ref: '#/components/schemas/VirtualServiceRef'
    VirtualNodeConnectionPool:
      type: object
      properties:
        grpc:
          $ref: '#/components/schemas/VirtualNodeGrpcConnectionPool'
          description: An object that represents a type of connection pool.
        http:
          $ref: '#/components/schemas/VirtualNodeHttpConnectionPool'
          description: An object that represents a type of connection pool.
        http2:
          $ref: '#/components/schemas/VirtualNodeHttp2ConnectionPool'
          description: An object that represents a type of connection pool.
        tcp:
          $ref: '#/components/schemas/VirtualNodeTcpConnectionPool'
          description: An object that represents a type of connection pool.
      description: <p>An object that represents the type of virtual node connection pool.</p> <p>Only one protocol is used at a time and should be the same protocol as the one chosen under port mapping.</p> <p>If not present the default value for <code>maxPendingRequests</code> is <code>2147483647</code>.</p> <p/>
    OutlierDetection:
      type: object
      required:
        - baseEjectionDuration
        - interval
        - maxEjectionPercent
        - maxServerErrors
      properties:
        baseEjectionDuration:
          $ref: '#/components/schemas/Duration'
          description: The base amount of time for which a host is ejected.
        interval:
          $ref: '#/components/schemas/Duration'
          description: The time interval between ejection sweep analysis.
        maxEjectionPercent:
          $ref: '#/components/schemas/OutlierDetectionMaxEjectionPercent'
          description: Maximum percentage of hosts in load balancing pool for upstream service that can be ejected. Will eject at least one host regardless of the value.
        maxServerErrors:
          $ref: '#/components/schemas/OutlierDetectionMaxServerErrors'
          description: 'Number of consecutive <code>5xx</code> errors required for ejection. '
      description: An object that represents the outlier detection for a virtual node's listener.
    PortMapping:
      type: object
      required:
        - port
        - protocol
      properties:
        port:
          $ref: '#/components/schemas/PortNumber'
          description: The port used for the port mapping.
        protocol:
          $ref: '#/components/schemas/PortProtocol'
          description: The protocol used for the port mapping. Specify one protocol.
      description: An object that represents a port mapping.
    ListenerTimeout:
      type: object
      properties:
        grpc:
          $ref: '#/components/schemas/GrpcTimeout'
          description: 'An object that represents types of timeouts. '
        http:
          $ref: '#/components/schemas/HttpTimeout'
          description: 'An object that represents types of timeouts. '
        http2:
          $ref: '#/components/schemas/HttpTimeout'
          description: 'An object that represents types of timeouts. '
        tcp:
          $ref: '#/components/schemas/TcpTimeout'
          description: 'An object that represents types of timeouts. '
      description: An object that represents timeouts for different protocols.
    ListenerTls:
      type: object
      required:
        - certificate
        - mode
      properties:
        certificate:
          $ref: '#/components/schemas/ListenerTlsCertificate'
          description: A reference to an object that represents a listener's Transport Layer Security (TLS) certificate.
        mode:
          $ref: '#/components/schemas/ListenerTlsMode'
          description: <p>Specify one of the following modes.</p> <ul> <li> <p> <b/>STRICT – Listener only accepts connections with TLS enabled. </p> </li> <li> <p> <b/>PERMISSIVE – Listener accepts connections with or without TLS enabled.</p> </li> <li> <p> <b/>DISABLED – Listener only accepts connections without TLS. </p> </li> </ul>
        validation:
          $ref: '#/components/schemas/ListenerTlsValidationContext'
          description: A reference to an object that represents a listener's Transport Layer Security (TLS) validation context.
      description: An object that represents the Transport Layer Security (TLS) properties for a listener.
    Listener:
      type: object
      required:
        - portMapping
      properties:
        connectionPool:
          $ref: '#/components/schemas/VirtualNodeConnectionPool'
          description: The connection pool information for the listener.
        healthCheck:
          $ref: '#/components/schemas/HealthCheckPolicy'
          description: The health check information for the listener.
        outlierDetection:
          $ref: '#/components/schemas/OutlierDetection'
          description: The outlier detection information for the listener.
        portMapping:
          $ref: '#/components/schemas/PortMapping'
          description: The port mapping information for the listener.
        timeout:
          $ref: '#/components/schemas/ListenerTimeout'
          description: An object that represents timeouts for different protocols.
        tls:
          $ref: '#/components/schemas/ListenerTls'
          description: A reference to an object that represents the Transport Layer Security (TLS) properties for a listener.
      description: An object that represents a listener for a virtual node.
    TcpTimeout:
      type: object
      properties:
        idle:
          $ref: '#/components/schemas/Duration'
          description: An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.
      description: 'An object that represents types of timeouts. '
    ListenerTlsCertificate:
      type: object
      properties:
        acm:
          $ref: '#/components/schemas/ListenerTlsAcmCertificate'
          description: A reference to an object that represents an AWS Certicate Manager (ACM) certificate.
        file:
          $ref: '#/components/schemas/ListenerTlsFileCertificate'
          description: A reference to an object that represents a local file certificate.
        sds:
          $ref: '#/components/schemas/ListenerTlsSdsCertificate'
          description: A reference to an object that represents a listener's Secret Discovery Service certificate.
      description: An object that represents a listener's Transport Layer Security (TLS) certificate.
    ListenerTlsMode:
      type: string
      enum:
        - STRICT
        - PERMISSIVE
        - DISABLED
    ListenerTlsValidationContext:
      type: object
      required:
        - trust
      properties:
        subjectAlternativeNames:
          $ref: '#/components/schemas/SubjectAlternativeNames'
          description: A reference to an object that represents the SANs for a listener's Transport Layer Security (TLS) validation context.
        trust:
          $ref: '#/components/schemas/ListenerTlsValidationContextTrust'
          description: A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.
      description: An object that represents a listener's Transport Layer Security (TLS) validation context.
    ListenerTlsAcmCertificate:
      type: object
      required:
        - certificateArn
      properties:
        certificateArn:
          $ref: '#/components/schemas/Arn'
          description: 'The Amazon Resource Name (ARN) for the certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites">Transport Layer Security (TLS)</a>.'
      description: An object that represents an AWS Certicate Manager (ACM) certificate.
    SdsSecretName:
      type: string
    SubjectAlternativeNames:
      type: object
      required:
        - match
      properties:
        match:
          $ref: '#/components/schemas/SubjectAlternativeNameMatchers'
          description: An object that represents the criteria for determining a SANs match.
      description: An object that represents the subject alternative names secured by the certificate.
    ListenerTlsValidationContextTrust:
      type: object
      properties:
        file:
          $ref: '#/components/schemas/TlsValidationContextFileTrust'
          description: An object that represents a Transport Layer Security (TLS) validation context trust for a local file.
        sds:
          $ref: '#/components/schemas/TlsValidationContextSdsTrust'
          description: A reference to an object that represents a listener's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
      description: An object that represents a listener's Transport Layer Security (TLS) validation context trust.
    TlsValidationContextFileTrust:
      type: object
      required:
        - certificateChain
      properties:
        certificateChain:
          $ref: '#/components/schemas/FilePath'
          description: The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.
      description: An object that represents a Transport Layer Security (TLS) validation context trust for a local file.
    TlsValidationContextSdsTrust:
      type: object
      required:
        - secretName
      properties:
        secretName:
          $ref: '#/components/schemas/SdsSecretName'
          description: A reference to an object that represents the name of the secret for a Transport Layer Security (TLS) Secret Discovery Service validation context trust.
      description: 'An object that represents a Transport Layer Security (TLS) Secret Discovery Service validation context trust. The proxy must be configured with a local SDS provider via a Unix Domain Socket. See App Mesh <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html">TLS documentation</a> for more info.'
    MaxConnections:
      type: integer
      minimum: 1
    MaxPendingRequests:
      type: integer
      minimum: 1
    MaxRequests:
      type: integer
      minimum: 1
    MeshStatus:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/MeshStatusCode'
          description: The current mesh status.
      description: An object that represents the status of a service mesh.
    MeshRef:
      type: object
      required:
        - arn
        - createdAt
        - lastUpdatedAt
        - meshName
        - meshOwner
        - resourceOwner
        - version
      properties:
        arn:
          $ref: '#/components/schemas/Arn'
          description: The full Amazon Resource Name (ARN) of the service mesh.
        createdAt:
          $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was created.
        lastUpdatedAt:
          $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was last updated.
        meshName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh.
        meshOwner:
          $ref: '#/components/schemas/AccountId'
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
        resourceOwner:
          $ref: '#/components/schemas/AccountId'
          description: 'The AWS IAM account ID of the resource owner. If the account ID is not your own, then it''s the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
        version:
          $ref: '#/components/schemas/Long'
          description: 'The version of the resource. Resources are created at version 1, and this version is incremented each time that they''re updated.'
      description: An object that represents a service mesh returned by a list operation.
    MeshStatusCode:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
        - DELETED
    OutlierDetectionMaxEjectionPercent:
      type: integer
      minimum: 0
      maximum: 100
    OutlierDetectionMaxServerErrors:
      type: integer
      minimum: 1
    PercentInt:
      type: integer
      minimum: 0
      maximum: 100
    RouteStatus:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/RouteStatusCode'
          description: The current status for the route.
      description: An object that represents the current status of a route.
    RouteRef:
      type: object
      required:
        - arn
        - createdAt
        - lastUpdatedAt
        - meshName
        - meshOwner
        - resourceOwner
        - routeName
        - version
        - virtualRouterName
      properties:
        arn:
          $ref: '#/components/schemas/Arn'
          description: The full Amazon Resource Name (ARN) for the route.
        createdAt:
          $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was created.
        lastUpdatedAt:
          $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was last updated.
        meshName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the route resides in.
        meshOwner:
          $ref: '#/components/schemas/AccountId'
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
        resourceOwner:
          $ref: '#/components/schemas/AccountId'
          description: 'The AWS IAM account ID of the resource owner. If the account ID is not your own, then it''s the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
        routeName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the route.
        version:
          $ref: '#/components/schemas/Long'
          description: 'The version of the resource. Resources are created at version 1, and this version is incremented each time that they''re updated.'
        virtualRouterName:
          $ref: '#/components/schemas/ResourceName'
          description: The virtual router that the route is associated with.
      description: An object that represents a route returned by a list operation.
    RouteStatusCode:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
        - DELETED
    SubjectAlternativeName:
      type: string
      minLength: 1
      maxLength: 254
    SubjectAlternativeNameList:
      type: array
      items:
        $ref: '#/components/schemas/SubjectAlternativeName'
    SubjectAlternativeNameMatchers:
      type: object
      required:
        - exact
      properties:
        exact:
          $ref: '#/components/schemas/SubjectAlternativeNameList'
          description: The values sent must match the specified values exactly.
      description: An object that represents the methods by which a subject alternative name on a peer Transport Layer Security (TLS) certificate can be matched.
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
      minItems: 0
      maxItems: 50
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    TagResourceInput:
      type: object
      required:
        - tags
      title: TagResourceInput
      properties:
        tags:
          $ref: '#/components/schemas/TagList'
          description: 'The tags to add to the resource. A tag is an array of key-value pairs. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.'
      description: <zonbook></zonbook><xhtml></xhtml>
    TcpRetryPolicyEvent:
      type: string
      enum:
        - connection-error
    TcpRouteAction:
      type: object
      required:
        - weightedTargets
      properties:
        weightedTargets:
          $ref: '#/components/schemas/WeightedTargets'
          description: An object that represents the targets that traffic is routed to when a request matches the route.
      description: An object that represents the action to take if a match is determined.
    TlsValidationContextTrust:
      type: object
      properties:
        acm:
          $ref: '#/components/schemas/TlsValidationContextAcmTrust'
          description: A reference to an object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate.
        file:
          $ref: '#/components/schemas/TlsValidationContextFileTrust'
          description: An object that represents a Transport Layer Security (TLS) validation context trust for a local file.
        sds:
          $ref: '#/components/schemas/TlsValidationContextSdsTrust'
          description: A reference to an object that represents a Transport Layer Security (TLS) Secret Discovery Service validation context trust.
      description: An object that represents a Transport Layer Security (TLS) validation context trust.
    TlsValidationContextAcmTrust:
      type: object
      required:
        - certificateAuthorityArns
      properties:
        certificateAuthorityArns:
          $ref: '#/components/schemas/CertificateAuthorityArns'
          description: One or more ACM Amazon Resource Name (ARN)s.
      description: An object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate.
    UntagResourceInput:
      type: object
      required:
        - tagKeys
      title: UntagResourceInput
      properties:
        tagKeys:
          $ref: '#/components/schemas/TagKeyList'
          description: The keys of the tags to be removed.
      description: <zonbook></zonbook><xhtml></xhtml>
    UpdateGatewayRouteInput:
      type: object
      required:
        - spec
      title: UpdateGatewayRouteInput
      properties:
        clientToken:
          $ref: '#/components/schemas/String'
          description: 'Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.'
        spec:
          $ref: '#/components/schemas/GatewayRouteSpec'
          description: The new gateway route specification to apply. This overwrites the existing data.
    UpdateMeshInput:
      type: object
      title: UpdateMeshInput
      properties:
        clientToken:
          $ref: '#/components/schemas/String'
          description: 'Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.'
        spec:
          $ref: '#/components/schemas/MeshSpec'
          description: The service mesh specification to apply.
      description: <zonbook></zonbook><xhtml></xhtml>
    UpdateRouteInput:
      type: object
      required:
        - spec
      title: UpdateRouteInput
      properties:
        clientToken:
          $ref: '#/components/schemas/String'
          description: 'Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.'
        spec:
          $ref: '#/components/schemas/RouteSpec'
          description: The new route specification to apply. This overwrites the existing data.
      description: <zonbook></zonbook><xhtml></xhtml>
    UpdateVirtualGatewayInput:
      type: object
      required:
        - spec
      title: UpdateVirtualGatewayInput
      properties:
        clientToken:
          $ref: '#/components/schemas/String'
          description: 'Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.'
        spec:
          $ref: '#/components/schemas/VirtualGatewaySpec'
          description: The new virtual gateway specification to apply. This overwrites the existing data.
    UpdateVirtualNodeInput:
      type: object
      required:
        - spec
      title: UpdateVirtualNodeInput
      properties:
        clientToken:
          $ref: '#/components/schemas/String'
          description: 'Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.'
        spec:
          $ref: '#/components/schemas/VirtualNodeSpec'
          description: The new virtual node specification to apply. This overwrites the existing data.
      description: <zonbook></zonbook><xhtml></xhtml>
    UpdateVirtualRouterInput:
      type: object
      required:
        - spec
      title: UpdateVirtualRouterInput
      properties:
        clientToken:
          $ref: '#/components/schemas/String'
          description: 'Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.'
        spec:
          $ref: '#/components/schemas/VirtualRouterSpec'
          description: The new virtual router specification to apply. This overwrites the existing data.
      description: <zonbook></zonbook><xhtml></xhtml>
    UpdateVirtualServiceInput:
      type: object
      required:
        - spec
      title: UpdateVirtualServiceInput
      properties:
        clientToken:
          $ref: '#/components/schemas/String'
          description: 'Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.'
        spec:
          $ref: '#/components/schemas/VirtualServiceSpec'
          description: The new virtual service specification to apply. This overwrites the existing data.
      description: <zonbook></zonbook><xhtml></xhtml>
    VirtualGatewayFileAccessLog:
      type: object
      required:
        - path
      properties:
        path:
          $ref: '#/components/schemas/FilePath'
          description: 'The file path to write access logs to. You can use <code>/dev/stdout</code> to send access logs to standard out and configure your Envoy container to use a log driver, such as <code>awslogs</code>, to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container''s file system to write the files to disk.'
      description: An object that represents an access log file.
    VirtualGatewayAccessLog:
      type: object
      properties:
        file:
          $ref: '#/components/schemas/VirtualGatewayFileAccessLog'
          description: The file object to send virtual gateway access logs to.
      description: The access log configuration for a virtual gateway.
    VirtualGatewayClientPolicy:
      type: object
      properties:
        tls:
          $ref: '#/components/schemas/VirtualGatewayClientPolicyTls'
          description: A reference to an object that represents a Transport Layer Security (TLS) client policy.
      description: An object that represents a client policy.
    VirtualGatewayCertificateAuthorityArns:
      type: array
      items:
        $ref: '#/components/schemas/Arn'
      minItems: 1
      maxItems: 3
    VirtualGatewayClientPolicyTls:
      type: object
      required:
        - validation
      properties:
        certificate:
          $ref: '#/components/schemas/VirtualGatewayClientTlsCertificate'
          description: A reference to an object that represents a virtual gateway's client's Transport Layer Security (TLS) certificate.
        enforce:
          $ref: '#/components/schemas/Boolean'
          description: 'Whether the policy is enforced. The default is <code>True</code>, if a value isn''t specified.'
        ports:
          $ref: '#/components/schemas/PortSet'
          description: One or more ports that the policy is enforced for.
        validation:
          $ref: '#/components/schemas/VirtualGatewayTlsValidationContext'
          description: A reference to an object that represents a Transport Layer Security (TLS) validation context.
      description: An object that represents a Transport Layer Security (TLS) client policy.
    VirtualGatewayClientTlsCertificate:
      type: object
      properties:
        file:
          $ref: '#/components/schemas/VirtualGatewayListenerTlsFileCertificate'
          description: 'An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html"> Transport Layer Security (TLS) </a>.'
        sds:
          $ref: '#/components/schemas/VirtualGatewayListenerTlsSdsCertificate'
          description: A reference to an object that represents a virtual gateway's client's Secret Discovery Service certificate.
      description: An object that represents the virtual gateway's client's Transport Layer Security (TLS) certificate.
    VirtualGatewayTlsValidationContext:
      type: object
      required:
        - trust
      properties:
        subjectAlternativeNames:
          $ref: '#/components/schemas/SubjectAlternativeNames'
          description: A reference to an object that represents the SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
        trust:
          $ref: '#/components/schemas/VirtualGatewayTlsValidationContextTrust'
          description: A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.
      description: An object that represents a Transport Layer Security (TLS) validation context.
    VirtualGatewayListenerTlsFileCertificate:
      type: object
      required:
        - certificateChain
        - privateKey
      properties:
        certificateChain:
          $ref: '#/components/schemas/FilePath'
          description: The certificate chain for the certificate.
        privateKey:
          $ref: '#/components/schemas/FilePath'
          description: The private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
      description: 'An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites">Transport Layer Security (TLS)</a>.'
    VirtualGatewayListenerTlsSdsCertificate:
      type: object
      required:
        - secretName
      properties:
        secretName:
          $ref: '#/components/schemas/VirtualGatewaySdsSecretName'
          description: A reference to an object that represents the name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
      description: 'An object that represents the virtual gateway''s listener''s Secret Discovery Service certificate.The proxy must be configured with a local SDS provider via a Unix Domain Socket. See App Mesh<a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html">TLS documentation</a> for more info. '
    VirtualGatewayGrpcConnectionPool:
      type: object
      required:
        - maxRequests
      properties:
        maxRequests:
          $ref: '#/components/schemas/MaxRequests'
          description: Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster.
      description: An object that represents a type of connection pool.
    VirtualGatewayHttpConnectionPool:
      type: object
      required:
        - maxConnections
      properties:
        maxConnections:
          $ref: '#/components/schemas/MaxConnections'
          description: Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster.
        maxPendingRequests:
          $ref: '#/components/schemas/MaxPendingRequests'
          description: Number of overflowing requests after <code>max_connections</code> Envoy will queue to upstream cluster.
      description: An object that represents a type of connection pool.
    VirtualGatewayHttp2ConnectionPool:
      type: object
      required:
        - maxRequests
      properties:
        maxRequests:
          $ref: '#/components/schemas/MaxRequests'
          description: Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster.
      description: An object that represents a type of connection pool.
    VirtualGatewayConnectionPool:
      type: object
      properties:
        grpc:
          $ref: '#/components/schemas/VirtualGatewayGrpcConnectionPool'
          description: 'An object that represents a type of connection pool. '
        http:
          $ref: '#/components/schemas/VirtualGatewayHttpConnectionPool'
          description: An object that represents a type of connection pool.
        http2:
          $ref: '#/components/schemas/VirtualGatewayHttp2ConnectionPool'
          description: An object that represents a type of connection pool.
      description: <p>An object that represents the type of virtual gateway connection pool.</p> <p>Only one protocol is used at a time and should be the same protocol as the one chosen under port mapping.</p> <p>If not present the default value for <code>maxPendingRequests</code> is <code>2147483647</code>.</p>
    VirtualGatewayStatus:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/VirtualGatewayStatusCode'
          description: The current status.
      description: An object that represents the status of the mesh resource.
    VirtualGatewayHealthCheckIntervalMillis:
      type: integer
      minimum: 5000
      maximum: 300000
    VirtualGatewayHealthCheckThreshold:
      type: integer
      minimum: 2
      maximum: 10
    VirtualGatewayPortProtocol:
      type: string
      enum:
        - http
        - http2
        - grpc
    VirtualGatewayHealthCheckTimeoutMillis:
      type: integer
      minimum: 2000
      maximum: 60000
    VirtualGatewayHealthCheckPolicy:
      type: object
      required:
        - healthyThreshold
        - intervalMillis
        - protocol
        - timeoutMillis
        - unhealthyThreshold
      properties:
        healthyThreshold:
          $ref: '#/components/schemas/VirtualGatewayHealthCheckThreshold'
          description: The number of consecutive successful health checks that must occur before declaring the listener healthy.
        intervalMillis:
          $ref: '#/components/schemas/VirtualGatewayHealthCheckIntervalMillis'
          description: The time period in milliseconds between each health check execution.
        path:
          $ref: '#/components/schemas/String'
          description: 'The destination path for the health check request. This value is only used if the specified protocol is HTTP or HTTP/2. For any other protocol, this value is ignored.'
        port:
          $ref: '#/components/schemas/PortNumber'
          description: The destination port for the health check request. This port must match the port defined in the <a>PortMapping</a> for the listener.
        protocol:
          $ref: '#/components/schemas/VirtualGatewayPortProtocol'
          description: 'The protocol for the health check request. If you specify <code>grpc</code>, then your service must conform to the <a href="https://github.com/grpc/grpc/blob/master/doc/health-checking.md">GRPC Health Checking Protocol</a>.'
        timeoutMillis:
          $ref: '#/components/schemas/VirtualGatewayHealthCheckTimeoutMillis'
          description: 'The amount of time to wait when receiving a response from the health check, in milliseconds.'
        unhealthyThreshold:
          $ref: '#/components/schemas/VirtualGatewayHealthCheckThreshold'
          description: The number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.
      description: An object that represents the health check policy for a virtual gateway's listener.
    VirtualGatewayRef:
      type: object
      required:
        - arn
        - createdAt
        - lastUpdatedAt
        - meshName
        - meshOwner
        - resourceOwner
        - version
        - virtualGatewayName
      properties:
        arn:
          $ref: '#/components/schemas/Arn'
          description: The full Amazon Resource Name (ARN) for the resource.
        createdAt:
          $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was created.
        lastUpdatedAt:
          $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was last updated.
        meshName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the resource resides in.
        meshOwner:
          $ref: '#/components/schemas/AccountId'
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
        resourceOwner:
          $ref: '#/components/schemas/AccountId'
          description: 'The AWS IAM account ID of the resource owner. If the account ID is not your own, then it''s the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
        version:
          $ref: '#/components/schemas/Long'
          description: 'The version of the resource. Resources are created at version 1, and this version is incremented each time that they''re updated.'
        virtualGatewayName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the resource.
      description: An object that represents a virtual gateway returned by a list operation.
    VirtualGatewayPortMapping:
      type: object
      required:
        - port
        - protocol
      properties:
        port:
          $ref: '#/components/schemas/PortNumber'
          description: The port used for the port mapping. Specify one protocol.
        protocol:
          $ref: '#/components/schemas/VirtualGatewayPortProtocol'
          description: The protocol used for the port mapping.
      description: An object that represents a port mapping.
    VirtualGatewayListenerTls:
      type: object
      required:
        - certificate
        - mode
      properties:
        certificate:
          $ref: '#/components/schemas/VirtualGatewayListenerTlsCertificate'
          description: An object that represents a Transport Layer Security (TLS) certificate.
        mode:
          $ref: '#/components/schemas/VirtualGatewayListenerTlsMode'
          description: <p>Specify one of the following modes.</p> <ul> <li> <p> <b/>STRICT – Listener only accepts connections with TLS enabled. </p> </li> <li> <p> <b/>PERMISSIVE – Listener accepts connections with or without TLS enabled.</p> </li> <li> <p> <b/>DISABLED – Listener only accepts connections without TLS. </p> </li> </ul>
        validation:
          $ref: '#/components/schemas/VirtualGatewayListenerTlsValidationContext'
          description: A reference to an object that represents a virtual gateway's listener's Transport Layer Security (TLS) validation context.
      description: An object that represents the Transport Layer Security (TLS) properties for a listener.
    VirtualGatewayListener:
      type: object
      required:
        - portMapping
      properties:
        connectionPool:
          $ref: '#/components/schemas/VirtualGatewayConnectionPool'
          description: The connection pool information for the virtual gateway listener.
        healthCheck:
          $ref: '#/components/schemas/VirtualGatewayHealthCheckPolicy'
          description: The health check information for the listener.
        portMapping:
          $ref: '#/components/schemas/VirtualGatewayPortMapping'
          description: The port mapping information for the listener.
        tls:
          $ref: '#/components/schemas/VirtualGatewayListenerTls'
          description: A reference to an object that represents the Transport Layer Security (TLS) properties for the listener.
      description: An object that represents a listener for a virtual gateway.
    VirtualGatewayListenerTlsCertificate:
      type: object
      properties:
        acm:
          $ref: '#/components/schemas/VirtualGatewayListenerTlsAcmCertificate'
          description: A reference to an object that represents an Certificate Manager certificate.
        file:
          $ref: '#/components/schemas/VirtualGatewayListenerTlsFileCertificate'
          description: A reference to an object that represents a local file certificate.
        sds:
          $ref: '#/components/schemas/VirtualGatewayListenerTlsSdsCertificate'
          description: A reference to an object that represents a virtual gateway's listener's Secret Discovery Service certificate.
      description: An object that represents a listener's Transport Layer Security (TLS) certificate.
    VirtualGatewayListenerTlsMode:
      type: string
      enum:
        - STRICT
        - PERMISSIVE
        - DISABLED
    VirtualGatewayListenerTlsValidationContext:
      type: object
      required:
        - trust
      properties:
        subjectAlternativeNames:
          $ref: '#/components/schemas/SubjectAlternativeNames'
          description: A reference to an object that represents the SANs for a virtual gateway listener's Transport Layer Security (TLS) validation context.
        trust:
          $ref: '#/components/schemas/VirtualGatewayListenerTlsValidationContextTrust'
          description: A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.
      description: An object that represents a virtual gateway's listener's Transport Layer Security (TLS) validation context.
    VirtualGatewayListenerTlsAcmCertificate:
      type: object
      required:
        - certificateArn
      properties:
        certificateArn:
          $ref: '#/components/schemas/Arn'
          description: 'The Amazon Resource Name (ARN) for the certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites">Transport Layer Security (TLS)</a>.'
      description: An object that represents an Certificate Manager certificate.
    VirtualGatewaySdsSecretName:
      type: string
    VirtualGatewayListenerTlsValidationContextTrust:
      type: object
      properties:
        file:
          $ref: '#/components/schemas/VirtualGatewayTlsValidationContextFileTrust'
          description: An object that represents a Transport Layer Security (TLS) validation context trust for a local file.
        sds:
          $ref: '#/components/schemas/VirtualGatewayTlsValidationContextSdsTrust'
          description: A reference to an object that represents a virtual gateway's listener's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
      description: An object that represents a virtual gateway's listener's Transport Layer Security (TLS) validation context trust.
    VirtualGatewayTlsValidationContextFileTrust:
      type: object
      required:
        - certificateChain
      properties:
        certificateChain:
          $ref: '#/components/schemas/FilePath'
          description: The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.
      description: An object that represents a Transport Layer Security (TLS) validation context trust for a local file.
    VirtualGatewayTlsValidationContextSdsTrust:
      type: object
      required:
        - secretName
      properties:
        secretName:
          $ref: '#/components/schemas/VirtualGatewaySdsSecretName'
          description: A reference to an object that represents the name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
      description: 'An object that represents a virtual gateway''s listener''s Transport Layer Security (TLS) Secret Discovery Service validation context trust. The proxy must be configured with a local SDS provider via a Unix Domain Socket. See App Mesh <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html">TLS documentation</a> for more info.'
    VirtualGatewayStatusCode:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
        - DELETED
    VirtualGatewayTlsValidationContextTrust:
      type: object
      properties:
        acm:
          $ref: '#/components/schemas/VirtualGatewayTlsValidationContextAcmTrust'
          description: A reference to an object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate.
        file:
          $ref: '#/components/schemas/VirtualGatewayTlsValidationContextFileTrust'
          description: An object that represents a Transport Layer Security (TLS) validation context trust for a local file.
        sds:
          $ref: '#/components/schemas/VirtualGatewayTlsValidationContextSdsTrust'
          description: A reference to an object that represents a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
      description: An object that represents a Transport Layer Security (TLS) validation context trust.
    VirtualGatewayTlsValidationContextAcmTrust:
      type: object
      required:
        - certificateAuthorityArns
      properties:
        certificateAuthorityArns:
          $ref: '#/components/schemas/VirtualGatewayCertificateAuthorityArns'
          description: One or more ACM Amazon Resource Name (ARN)s.
      description: An object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate.
    VirtualNodeGrpcConnectionPool:
      type: object
      required:
        - maxRequests
      properties:
        maxRequests:
          $ref: '#/components/schemas/MaxRequests'
          description: Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster.
      description: An object that represents a type of connection pool.
    VirtualNodeHttpConnectionPool:
      type: object
      required:
        - maxConnections
      properties:
        maxConnections:
          $ref: '#/components/schemas/MaxConnections'
          description: Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster.
        maxPendingRequests:
          $ref: '#/components/schemas/MaxPendingRequests'
          description: Number of overflowing requests after <code>max_connections</code> Envoy will queue to upstream cluster.
      description: An object that represents a type of connection pool.
    VirtualNodeHttp2ConnectionPool:
      type: object
      required:
        - maxRequests
      properties:
        maxRequests:
          $ref: '#/components/schemas/MaxRequests'
          description: Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster.
      description: An object that represents a type of connection pool.
    VirtualNodeTcpConnectionPool:
      type: object
      required:
        - maxConnections
      properties:
        maxConnections:
          $ref: '#/components/schemas/MaxConnections'
          description: Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster.
      description: An object that represents a type of connection pool.
    VirtualNodeStatus:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/VirtualNodeStatusCode'
          description: The current status of the virtual node.
      description: An object that represents the current status of the virtual node.
    VirtualNodeRef:
      type: object
      required:
        - arn
        - createdAt
        - lastUpdatedAt
        - meshName
        - meshOwner
        - resourceOwner
        - version
        - virtualNodeName
      properties:
        arn:
          $ref: '#/components/schemas/Arn'
          description: The full Amazon Resource Name (ARN) for the virtual node.
        createdAt:
          $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was created.
        lastUpdatedAt:
          $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was last updated.
        meshName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the virtual node resides in.
        meshOwner:
          $ref: '#/components/schemas/AccountId'
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
        resourceOwner:
          $ref: '#/components/schemas/AccountId'
          description: 'The AWS IAM account ID of the resource owner. If the account ID is not your own, then it''s the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
        version:
          $ref: '#/components/schemas/Long'
          description: 'The version of the resource. Resources are created at version 1, and this version is incremented each time that they''re updated.'
        virtualNodeName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual node.
      description: An object that represents a virtual node returned by a list operation.
    VirtualNodeServiceProvider:
      type: object
      required:
        - virtualNodeName
      properties:
        virtualNodeName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual node that is acting as a service provider.
      description: An object that represents a virtual node service provider.
    VirtualNodeStatusCode:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
        - DELETED
    VirtualRouterStatus:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/VirtualRouterStatusCode'
          description: The current status of the virtual router.
      description: 'An object that represents the status of a virtual router. '
    VirtualRouterRef:
      type: object
      required:
        - arn
        - createdAt
        - lastUpdatedAt
        - meshName
        - meshOwner
        - resourceOwner
        - version
        - virtualRouterName
      properties:
        arn:
          $ref: '#/components/schemas/Arn'
          description: The full Amazon Resource Name (ARN) for the virtual router.
        createdAt:
          $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was created.
        lastUpdatedAt:
          $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was last updated.
        meshName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the virtual router resides in.
        meshOwner:
          $ref: '#/components/schemas/AccountId'
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
        resourceOwner:
          $ref: '#/components/schemas/AccountId'
          description: 'The AWS IAM account ID of the resource owner. If the account ID is not your own, then it''s the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
        version:
          $ref: '#/components/schemas/Long'
          description: 'The version of the resource. Resources are created at version 1, and this version is incremented each time that they''re updated.'
        virtualRouterName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual router.
      description: An object that represents a virtual router returned by a list operation.
    VirtualRouterListener:
      type: object
      required:
        - portMapping
      properties:
        portMapping:
          $ref: '#/components/schemas/PortMapping'
      description: An object that represents a virtual router listener.
    VirtualRouterServiceProvider:
      type: object
      required:
        - virtualRouterName
      properties:
        virtualRouterName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual router that is acting as a service provider.
      description: An object that represents a virtual node service provider.
    VirtualRouterStatusCode:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
        - DELETED
    VirtualServiceStatus:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/VirtualServiceStatusCode'
          description: The current status of the virtual service.
      description: An object that represents the status of a virtual service.
    VirtualServiceRef:
      type: object
      required:
        - arn
        - createdAt
        - lastUpdatedAt
        - meshName
        - meshOwner
        - resourceOwner
        - version
        - virtualServiceName
      properties:
        arn:
          $ref: '#/components/schemas/Arn'
          description: The full Amazon Resource Name (ARN) for the virtual service.
        createdAt:
          $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was created.
        lastUpdatedAt:
          $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was last updated.
        meshName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the virtual service resides in.
        meshOwner:
          $ref: '#/components/schemas/AccountId'
          description: 'The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it''s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
        resourceOwner:
          $ref: '#/components/schemas/AccountId'
          description: 'The AWS IAM account ID of the resource owner. If the account ID is not your own, then it''s the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.'
        version:
          $ref: '#/components/schemas/Long'
          description: 'The version of the resource. Resources are created at version 1, and this version is incremented each time that they''re updated.'
        virtualServiceName:
          $ref: '#/components/schemas/ServiceName'
          description: The name of the virtual service.
      description: An object that represents a virtual service returned by a list operation.
    VirtualServiceStatusCode:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
        - DELETED
    WeightedTarget:
      type: object
      required:
        - virtualNode
        - weight
      properties:
        virtualNode:
          $ref: '#/components/schemas/ResourceName'
          description: The virtual node to associate with the weighted target.
        weight:
          $ref: '#/components/schemas/PercentInt'
          description: The relative weight of the weighted target.
      description: 'An object that represents a target and its relative weight. Traffic is distributed across targets according to their relative weight. For example, a weighted target with a relative weight of 50 receives five times as much traffic as one with a relative weight of 10. The total weight for all targets combined must be less than or equal to 100.'
security:
  - hmac: []

openapi: 3.0.0
info:
  version: '2020-08-07'
  x-release: v4
  title: Amazon Lex Runtime V2
  description: <p/>
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: runtime.lex.v2
  x-aws-signingName: lex
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/runtime.lex.v2-2020-08-07.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/runtime-v2-lex/'
servers:
  - url: 'http://runtime-v2-lex.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Lex Runtime V2 multi-region endpoint
  - url: 'https://runtime-v2-lex.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Lex Runtime V2 multi-region endpoint
  - url: 'http://runtime-v2-lex.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Lex Runtime V2 endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://runtime-v2-lex.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Lex Runtime V2 endpoint for China (Beijing) and China (Ningxia)
paths:
  '/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}':
    delete:
      operationId: DeleteSession
      description: '<p>Removes session information for a specified bot, alias, and user ID. </p> <p>You can use this operation to restart a conversation with a bot. When you remove a session, the entire history of the session is removed so that you can start again.</p> <p>You don''t need to delete a session. Sessions have a time limit and will expire. Set the session time limit when you create the bot. The default is 5 minutes, but you can specify anything between 1 minute and 24 hours.</p> <p>If you specify a bot or alias ID that doesn''t exist, you receive a <code>BadRequestException.</code> </p> <p>If the locale doesn''t exist in the bot, or if the locale hasn''t been enables for the alias, you receive a <code>BadRequestException</code>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSessionResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '485':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: botId
          in: path
          required: true
          description: The identifier of the bot that contains the session data.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botAliasId
          in: path
          required: true
          description: The alias identifier in use for the bot that contains the session data.
          schema:
            type: string
        - name: localeId
          in: path
          required: true
          description: The locale where the session is in use.
          schema:
            type: string
            minLength: 1
        - name: sessionId
          in: path
          required: true
          description: The identifier of the session to delete.
          schema:
            type: string
            pattern: '[0-9a-zA-Z._:-]+'
            minLength: 2
            maxLength: 100
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetSession
      description: '<p>Returns session information for a specified bot, alias, and user.</p> <p>For example, you can use this operation to retrieve session information for a user that has left a long-running session in use.</p> <p>If the bot, alias, or session identifier doesn''t exist, Amazon Lex V2 returns a <code>BadRequestException</code>. If the locale doesn''t exist or is not enabled for the alias, you receive a <code>BadRequestException</code>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSessionResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: botId
          in: path
          required: true
          description: The identifier of the bot that contains the session data.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botAliasId
          in: path
          required: true
          description: The alias identifier in use for the bot that contains the session data.
          schema:
            type: string
        - name: localeId
          in: path
          required: true
          description: The locale where the session is in use.
          schema:
            type: string
            minLength: 1
        - name: sessionId
          in: path
          required: true
          description: The identifier of the session to return.
          schema:
            type: string
            pattern: '[0-9a-zA-Z._:-]+'
            minLength: 2
            maxLength: 100
    post:
      operationId: PutSession
      description: Creates a new session or modifies an existing session with an Amazon Lex V2 bot. Use this operation to enable your application to set the state of the bot.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutSessionResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '485':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '486':
          description: DependencyFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyFailedException'
        '487':
          description: BadGatewayException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGatewayException'
      parameters:
        - name: botId
          in: path
          required: true
          description: The identifier of the bot that receives the session data.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botAliasId
          in: path
          required: true
          description: The alias identifier of the bot that receives the session data.
          schema:
            type: string
        - name: localeId
          in: path
          required: true
          description: The locale where the session is in use.
          schema:
            type: string
            minLength: 1
        - name: sessionId
          in: path
          required: true
          description: The identifier of the session that receives the session data.
          schema:
            type: string
            pattern: '[0-9a-zA-Z._:-]+'
            minLength: 2
            maxLength: 100
        - name: ResponseContentType
          in: header
          required: false
          description: '<p>The message that Amazon Lex V2 returns in the response can be either text or speech depending on the value of this parameter. </p> <ul> <li> <p>If the value is <code>text/plain; charset=utf-8</code>, Amazon Lex V2 returns text in the response.</p> </li> </ul>'
          schema:
            type: string
            minLength: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - sessionState
              properties:
                messages:
                  description: A list of messages to send to the user. Messages are sent in the order that they are defined in the list.
                  type: array
                  items:
                    $ref: '#/components/schemas/Message'
                  maxItems: 10
                sessionState:
                  description: The state of the user's session with Amazon Lex V2.
                  type: object
                  properties:
                    dialogAction:
                      $ref: '#/components/schemas/DialogAction'
                      description: The next step that Amazon Lex V2 should take in the conversation with a user.
                    intent:
                      $ref: '#/components/schemas/Intent'
                      description: The active intent that Amazon Lex V2 is processing.
                    activeContexts:
                      $ref: '#/components/schemas/ActiveContextsList'
                      description: 'One or more contexts that indicate to Amazon Lex V2 the context of a request. When a context is active, Amazon Lex V2 considers intents with the matching context as a trigger as the next intent in a session.'
                    sessionAttributes:
                      $ref: '#/components/schemas/StringMap'
                      description: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex V2 and a client application.
                    originatingRequestId:
                      $ref: '#/components/schemas/NonEmptyString'
                      description: <p/>
                requestAttributes:
                  description: '<p>Request-specific information passed between Amazon Lex V2 and the client application.</p> <p>The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don''t create any request attributes with the prefix <code>x-amz-lex:</code>.</p>'
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
  '/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}/text':
    post:
      operationId: RecognizeText
      description: '<p>Sends user input to Amazon Lex V2. Client applications use this API to send requests to Amazon Lex V2 at runtime. Amazon Lex V2 then interprets the user input using the machine learning model that it build for the bot.</p> <p>In response, Amazon Lex V2 returns the next message to convey to the user and an optional response card to display.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecognizeTextResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '485':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '486':
          description: DependencyFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyFailedException'
        '487':
          description: BadGatewayException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGatewayException'
      parameters:
        - name: botId
          in: path
          required: true
          description: The identifier of the bot that processes the request.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botAliasId
          in: path
          required: true
          description: The alias identifier in use for the bot that processes the request.
          schema:
            type: string
        - name: localeId
          in: path
          required: true
          description: The locale where the session is in use.
          schema:
            type: string
            minLength: 1
        - name: sessionId
          in: path
          required: true
          description: The identifier of the user session that is having the conversation.
          schema:
            type: string
            pattern: '[0-9a-zA-Z._:-]+'
            minLength: 2
            maxLength: 100
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  description: The text that the user entered. Amazon Lex V2 interprets this text.
                  type: string
                  minLength: 1
                  maxLength: 1024
                  format: password
                sessionState:
                  description: The state of the user's session with Amazon Lex V2.
                  type: object
                  properties:
                    dialogAction:
                      $ref: '#/components/schemas/DialogAction'
                      description: The next step that Amazon Lex V2 should take in the conversation with a user.
                    intent:
                      $ref: '#/components/schemas/Intent'
                      description: The active intent that Amazon Lex V2 is processing.
                    activeContexts:
                      $ref: '#/components/schemas/ActiveContextsList'
                      description: 'One or more contexts that indicate to Amazon Lex V2 the context of a request. When a context is active, Amazon Lex V2 considers intents with the matching context as a trigger as the next intent in a session.'
                    sessionAttributes:
                      $ref: '#/components/schemas/StringMap'
                      description: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex V2 and a client application.
                    originatingRequestId:
                      $ref: '#/components/schemas/NonEmptyString'
                      description: <p/>
                requestAttributes:
                  description: '<p>Request-specific information passed between the client application and Amazon Lex V2 </p> <p>The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don''t create any request attributes with the prefix <code>x-amz-lex:</code>.</p>'
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}/utterance#Content-Type':
    post:
      operationId: RecognizeUtterance
      description: '<p>Sends user input to Amazon Lex V2. You can send text or speech. Clients use this API to send text and audio requests to Amazon Lex V2 at runtime. Amazon Lex V2 interprets the user input using the machine learning model built for the bot.</p> <p>The following request fields must be compressed with gzip and then base64 encoded before you send them to Amazon Lex V2. </p> <ul> <li> <p>requestAttributes</p> </li> <li> <p>sessionState</p> </li> </ul> <p>The following response fields are compressed using gzip and then base64 encoded by Amazon Lex V2. Before you can use these fields, you must decode and decompress them. </p> <ul> <li> <p>inputTranscript</p> </li> <li> <p>interpretations</p> </li> <li> <p>messages</p> </li> <li> <p>requestAttributes</p> </li> <li> <p>sessionState</p> </li> </ul> <p>The example contains a Java application that compresses and encodes a Java object to send to Amazon Lex V2, and a second that decodes and decompresses a response from Amazon Lex V2.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecognizeUtteranceResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '485':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '486':
          description: DependencyFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyFailedException'
        '487':
          description: BadGatewayException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGatewayException'
      parameters:
        - name: botId
          in: path
          required: true
          description: The identifier of the bot that should receive the request.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botAliasId
          in: path
          required: true
          description: The alias identifier in use for the bot that should receive the request.
          schema:
            type: string
        - name: localeId
          in: path
          required: true
          description: The locale where the session is in use.
          schema:
            type: string
            minLength: 1
        - name: sessionId
          in: path
          required: true
          description: The identifier of the session in use.
          schema:
            type: string
            pattern: '[0-9a-zA-Z._:-]+'
            minLength: 2
            maxLength: 100
        - name: x-amz-lex-session-state
          in: header
          required: false
          description: '<p>Sets the state of the session with the user. You can use this to set the current intent, attributes, context, and dialog action. Use the dialog action to determine the next step that Amazon Lex V2 should use in the conversation with the user.</p> <p>The <code>sessionState</code> field must be compressed using gzip and then base64 encoded before sending to Amazon Lex V2.</p>'
          schema:
            type: string
            format: password
        - name: x-amz-lex-request-attributes
          in: header
          required: false
          description: '<p>Request-specific information passed between the client application and Amazon Lex V2 </p> <p>The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don''t create any request attributes for prefix <code>x-amz-lex:</code>.</p> <p>The <code>requestAttributes</code> field must be compressed using gzip and then base64 encoded before sending to Amazon Lex V2.</p>'
          schema:
            type: string
            format: password
        - name: Content-Type
          in: header
          required: true
          description: '<p>Indicates the format for audio input or that the content is text. The header must start with one of the following prefixes:</p> <ul> <li> <p>PCM format, audio data must be in little-endian byte order.</p> <ul> <li> <p>audio/l16; rate=16000; channels=1</p> </li> <li> <p>audio/x-l16; sample-rate=16000; channel-count=1</p> </li> <li> <p>audio/lpcm; sample-rate=8000; sample-size-bits=16; channel-count=1; is-big-endian=false</p> </li> </ul> </li> <li> <p>Opus format</p> <ul> <li> <p>audio/x-cbr-opus-with-preamble;preamble-size=0;bit-rate=256000;frame-size-milliseconds=4</p> </li> </ul> </li> <li> <p>Text format</p> <ul> <li> <p>text/plain; charset=utf-8</p> </li> </ul> </li> </ul>'
          schema:
            type: string
            minLength: 1
        - name: Response-Content-Type
          in: header
          required: false
          description: '<p>The message that Amazon Lex V2 returns in the response can be either text or speech based on the <code>responseContentType</code> value.</p> <ul> <li> <p>If the value is <code>text/plain;charset=utf-8</code>, Amazon Lex V2 returns text in the response.</p> </li> <li> <p>If the value begins with <code>audio/</code>, Amazon Lex V2 returns speech in the response. Amazon Lex V2 uses Amazon Polly to generate the speech using the configuration that you specified in the <code>requestContentType</code> parameter. For example, if you specify <code>audio/mpeg</code> as the value, Amazon Lex V2 returns speech in the MPEG format.</p> </li> <li> <p>If the value is <code>audio/pcm</code>, the speech returned is <code>audio/pcm</code> at 16 KHz in 16-bit, little-endian format.</p> </li> <li> <p>The following are the accepted values:</p> <ul> <li> <p>audio/mpeg</p> </li> <li> <p>audio/ogg</p> </li> <li> <p>audio/pcm (16 KHz)</p> </li> <li> <p>audio/* (defaults to mpeg)</p> </li> <li> <p>text/plain; charset=utf-8</p> </li> </ul> </li> </ul>'
          schema:
            type: string
            minLength: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                inputStream:
                  description: User input in PCM or Opus audio format or text format as described in the <code>requestContentType</code> parameter.
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    DeleteSessionResponse:
      type: object
      properties:
        botId:
          $ref: '#/components/schemas/BotIdentifier'
          description: The identifier of the bot that contained the session data.
        botAliasId:
          $ref: '#/components/schemas/BotAliasIdentifier'
          description: The alias identifier in use for the bot that contained the session data.
        localeId:
          $ref: '#/components/schemas/LocaleId'
          description: The locale where the session was used.
        sessionId:
          $ref: '#/components/schemas/SessionId'
          description: The identifier of the deleted session.
    AccessDeniedException: {}
    ResourceNotFoundException: {}
    ValidationException: {}
    ThrottlingException: {}
    InternalServerException: {}
    ConflictException: {}
    GetSessionResponse:
      type: object
      properties:
        sessionId:
          $ref: '#/components/schemas/NonEmptyString'
          description: The identifier of the returned session.
        messages:
          $ref: '#/components/schemas/Messages'
          description: 'A list of messages that were last sent to the user. The messages are ordered based on the order that your returned the messages from your Lambda function or the order that messages are defined in the bot. '
        interpretations:
          $ref: '#/components/schemas/Interpretations'
          description: '<p>A list of intents that Amazon Lex V2 determined might satisfy the user''s utterance. </p> <p>Each interpretation includes the intent, a score that indicates how confident Amazon Lex V2 is that the interpretation is the correct one, and an optional sentiment response that indicates the sentiment expressed in the utterance.</p>'
        sessionState:
          $ref: '#/components/schemas/SessionState'
          description: <p>Represents the current state of the dialog between the user and the bot.</p> <p>You can use this to determine the progress of the conversation and what the next action might be.</p>
    PutSessionResponse:
      type: object
      properties:
        audioStream:
          $ref: '#/components/schemas/BlobStream'
          description: 'If the requested content type was audio, the audio version of the message to convey to the user.'
    Message:
      type: object
      required:
        - contentType
      properties:
        content:
          $ref: '#/components/schemas/Text'
          description: The text of the message.
        contentType:
          $ref: '#/components/schemas/MessageContentType'
          description: Indicates the type of response.
        imageResponseCard:
          $ref: '#/components/schemas/ImageResponseCard'
      description: Container for text that is returned to the customer..
    DialogAction:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/DialogActionType'
          description: '<p>The next action that the bot should take in its interaction with the user. The possible values are:</p> <ul> <li> <p> <code>Close</code> - Indicates that there will not be a response from the user. For example, the statement "Your order has been placed" does not require a response.</p> </li> <li> <p> <code>ConfirmIntent</code> - The next action is asking the user if the intent is complete and ready to be fulfilled. This is a yes/no question such as "Place the order?"</p> </li> <li> <p> <code>Delegate</code> - The next action is determined by Amazon Lex V2.</p> </li> <li> <p> <code>ElicitSlot</code> - The next action is to elicit a slot value from the user.</p> </li> </ul>'
        slotToElicit:
          $ref: '#/components/schemas/NonEmptyString'
          description: The name of the slot that should be elicited from the user.
      description: The next action that Amazon Lex V2 should take.
    Intent:
      type: object
      required:
        - name
      properties:
        name:
          $ref: '#/components/schemas/NonEmptyString'
          description: The name of the intent.
        slots:
          $ref: '#/components/schemas/Slots'
          description: 'A map of all of the slots for the intent. The name of the slot maps to the value of the slot. If a slot has not been filled, the value is null.'
        state:
          $ref: '#/components/schemas/IntentState'
          description: 'Contains fulfillment information for the intent. '
        confirmationState:
          $ref: '#/components/schemas/ConfirmationState'
          description: Contains information about whether fulfillment of the intent has been confirmed.
      description: The current intent that Amazon Lex V2 is attempting to fulfill.
    ActiveContextsList:
      type: array
      items:
        $ref: '#/components/schemas/ActiveContext'
      minItems: 0
      maxItems: 20
    StringMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    NonEmptyString:
      type: string
      minLength: 1
    String:
      type: string
    DependencyFailedException: {}
    BadGatewayException: {}
    RecognizeTextResponse:
      type: object
      properties:
        messages:
          $ref: '#/components/schemas/Messages'
          description: A list of messages last sent to the user. The messages are ordered based on the order that you returned the messages from your Lambda function or the order that the messages are defined in the bot.
        sessionState:
          $ref: '#/components/schemas/SessionState'
          description: <p>Represents the current state of the dialog between the user and the bot. </p> <p>Use this to determine the progress of the conversation and what the next action may be.</p>
        interpretations:
          $ref: '#/components/schemas/Interpretations'
          description: '<p>A list of intents that Amazon Lex V2 determined might satisfy the user''s utterance. </p> <p>Each interpretation includes the intent, a score that indicates now confident Amazon Lex V2 is that the interpretation is the correct one, and an optional sentiment response that indicates the sentiment expressed in the utterance.</p>'
        requestAttributes:
          $ref: '#/components/schemas/StringMap'
          description: The attributes sent in the request.
        sessionId:
          $ref: '#/components/schemas/SessionId'
          description: The identifier of the session in use.
    RecognizeUtteranceResponse:
      type: object
      properties:
        audioStream:
          $ref: '#/components/schemas/BlobStream'
          description: 'The prompt or statement to send to the user. This is based on the bot configuration and context. For example, if Amazon Lex V2 did not understand the user intent, it sends the <code>clarificationPrompt</code> configured for the bot. If the intent requires confirmation before taking the fulfillment action, it sends the <code>confirmationPrompt</code>. Another example: Suppose that the Lambda function successfully fulfilled the intent, and sent a message to convey to the user. Then Amazon Lex V2 sends that message in the response.'
    ActiveContextName:
      type: string
      pattern: '^([A-Za-z]_?)+$'
      minLength: 1
      maxLength: 100
    ActiveContextTimeToLive:
      type: object
      required:
        - timeToLiveInSeconds
        - turnsToLive
      properties:
        timeToLiveInSeconds:
          $ref: '#/components/schemas/ActiveContextTimeToLiveInSeconds'
          description: The number of seconds that the context is active. You can specify between 5 and 86400 seconds (24 hours).
        turnsToLive:
          $ref: '#/components/schemas/ActiveContextTurnsToLive'
          description: The number of turns that the context is active. You can specify up to 20 turns. Each request and response from the bot is a turn.
      description: The time that a context is active. You can specify the time to live in seconds or in conversation turns.
    ActiveContextParametersMap:
      type: object
      minProperties: 0
      maxProperties: 10
      additionalProperties:
        $ref: '#/components/schemas/Text'
    ActiveContext:
      type: object
      required:
        - name
        - timeToLive
        - contextAttributes
      properties:
        name:
          $ref: '#/components/schemas/ActiveContextName'
          description: The name of the context.
        timeToLive:
          $ref: '#/components/schemas/ActiveContextTimeToLive'
          description: 'Indicates the number of turns or seconds that the context is active. Once the time to live expires, the context is no longer returned in a response.'
        contextAttributes:
          $ref: '#/components/schemas/ActiveContextParametersMap'
          description: '<p>A lis tof contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request.</p> <p>If you don''t specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared. </p>'
      description: '<p>Contains information about the contexts that a user is using in a session. You can configure Amazon Lex V2 to set a context when an intent is fulfilled, or you can set a context using the , , or operations.</p> <p>Use a context to indicate to Amazon Lex V2 intents that should be used as follow-up intents. For example, if the active context is <code>order-fulfilled</code>, only intents that have <code>order-fulfilled</code> configured as a trigger are considered for follow up.</p>'
    Text:
      type: string
      minLength: 1
      maxLength: 1024
      format: password
    ActiveContextTimeToLiveInSeconds:
      type: integer
      minimum: 5
      maximum: 86400
    ActiveContextTurnsToLive:
      type: integer
      minimum: 1
      maximum: 20
    AttachmentTitle:
      type: string
      minLength: 1
      maxLength: 250
    AttachmentUrl:
      type: string
      minLength: 1
      maxLength: 250
    BlobStream:
      type: string
    BotAliasIdentifier:
      type: string
    BotIdentifier:
      type: string
      pattern: '^[0-9a-zA-Z]+$'
      minLength: 10
      maxLength: 10
    ButtonText:
      type: string
      minLength: 1
      maxLength: 50
    ButtonValue:
      type: string
      minLength: 1
      maxLength: 50
    Button:
      type: object
      required:
        - text
        - value
      properties:
        text:
          $ref: '#/components/schemas/ButtonText'
          description: The text that is displayed on the button.
        value:
          $ref: '#/components/schemas/ButtonValue'
          description: The value returned to Amazon Lex V2 when a user chooses the button.
      description: A button that appears on a response card show to the user.
    ButtonsList:
      type: array
      items:
        $ref: '#/components/schemas/Button'
      minItems: 0
      maxItems: 5
    Double:
      type: number
      format: double
    ConfidenceScore:
      type: object
      properties:
        score:
          $ref: '#/components/schemas/Double'
          description: A score that indicates how confident Amazon Lex V2 is that an intent satisfies the user's intent. Ranges between 0.00 and 1.00. Higher scores indicate higher confidence.
      description: Provides a score that indicates the confidence that Amazon Lex V2 has that an intent is the one that satisfies the user's intent.
    ConfirmationState:
      type: string
      enum:
        - Confirmed
        - Denied
        - None
    LocaleId:
      type: string
      minLength: 1
    SessionId:
      type: string
      pattern: '[0-9a-zA-Z._:-]+'
      minLength: 2
      maxLength: 100
    DeleteSessionRequest:
      type: object
      title: DeleteSessionRequest
      properties: {}
    DialogActionType:
      type: string
      enum:
        - Close
        - ConfirmIntent
        - Delegate
        - ElicitIntent
        - ElicitSlot
    GetSessionRequest:
      type: object
      title: GetSessionRequest
      properties: {}
    Messages:
      type: array
      items:
        $ref: '#/components/schemas/Message'
      maxItems: 10
    Interpretations:
      type: array
      items:
        $ref: '#/components/schemas/Interpretation'
      maxItems: 5
    SessionState:
      type: object
      properties:
        dialogAction:
          $ref: '#/components/schemas/DialogAction'
          description: The next step that Amazon Lex V2 should take in the conversation with a user.
        intent:
          $ref: '#/components/schemas/Intent'
          description: The active intent that Amazon Lex V2 is processing.
        activeContexts:
          $ref: '#/components/schemas/ActiveContextsList'
          description: 'One or more contexts that indicate to Amazon Lex V2 the context of a request. When a context is active, Amazon Lex V2 considers intents with the matching context as a trigger as the next intent in a session.'
        sessionAttributes:
          $ref: '#/components/schemas/StringMap'
          description: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex V2 and a client application.
        originatingRequestId:
          $ref: '#/components/schemas/NonEmptyString'
          description: <p/>
      description: The state of the user's session with Amazon Lex V2.
    ImageResponseCard:
      type: object
      required:
        - title
      properties:
        title:
          $ref: '#/components/schemas/AttachmentTitle'
          description: The title to display on the response card. The format of the title is determined by the platform displaying the response card.
        subtitle:
          $ref: '#/components/schemas/AttachmentTitle'
          description: The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        imageUrl:
          $ref: '#/components/schemas/AttachmentUrl'
          description: The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        buttons:
          $ref: '#/components/schemas/ButtonsList'
          description: A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.
      description: '<p>A card that is shown to the user by a messaging platform. You define the contents of the card, the card is displayed by the platform. </p> <p>When you use a response card, the response from the user is constrained to the text associated with a button on the card.</p>'
    Slots:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Slot'
    IntentState:
      type: string
      enum:
        - Failed
        - Fulfilled
        - InProgress
        - ReadyForFulfillment
        - Waiting
    SentimentResponse:
      type: object
      properties:
        sentiment:
          $ref: '#/components/schemas/SentimentType'
          description: The overall sentiment expressed in the user's response. This is the sentiment most likely expressed by the user based on the analysis by Amazon Comprehend.
        sentimentScore:
          $ref: '#/components/schemas/SentimentScore'
      description: '<p>Provides information about the sentiment expressed in a user''s response in a conversation. Sentiments are determined using Amazon Comprehend. Sentiments are only returned if they are enabled for the bot.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-sentiment.html"> Determine Sentiment </a> in the <i>Amazon Comprehend developer guide</i>.</p>'
    Interpretation:
      type: object
      properties:
        nluConfidence:
          $ref: '#/components/schemas/ConfidenceScore'
          description: 'Determines the threshold where Amazon Lex V2 will insert the <code>AMAZON.FallbackIntent</code>, <code>AMAZON.KendraSearchIntent</code>, or both when returning alternative intents in a response. <code>AMAZON.FallbackIntent</code> and <code>AMAZON.KendraSearchIntent</code> are only inserted if they are configured for the bot.'
        sentimentResponse:
          $ref: '#/components/schemas/SentimentResponse'
          description: '<p>The sentiment expressed in an utterance. </p> <p>When the bot is configured to send utterances to Amazon Comprehend for sentiment analysis, this field contains the result of the analysis.</p>'
        intent:
          $ref: '#/components/schemas/Intent'
          description: A list of intents that might satisfy the user's utterance. The intents are ordered by the confidence score.
      description: 'An intent that Amazon Lex V2 determined might satisfy the user''s utterance. The intents are ordered by the confidence score. '
    MessageContentType:
      type: string
      enum:
        - CustomPayload
        - ImageResponseCard
        - PlainText
        - SSML
    ParameterName:
      type: string
      minLength: 1
      maxLength: 100
    PutSessionRequest:
      type: object
      required:
        - sessionState
      title: PutSessionRequest
      properties:
        messages:
          $ref: '#/components/schemas/Messages'
          description: A list of messages to send to the user. Messages are sent in the order that they are defined in the list.
        sessionState:
          $ref: '#/components/schemas/SessionState'
          description: 'Sets the state of the session with the user. You can use this to set the current intent, attributes, context, and dialog action. Use the dialog action to determine the next step that Amazon Lex V2 should use in the conversation with the user.'
        requestAttributes:
          $ref: '#/components/schemas/StringMap'
          description: '<p>Request-specific information passed between Amazon Lex V2 and the client application.</p> <p>The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don''t create any request attributes with the prefix <code>x-amz-lex:</code>.</p>'
    RecognizeTextRequest:
      type: object
      required:
        - text
      title: RecognizeTextRequest
      properties:
        text:
          $ref: '#/components/schemas/Text'
          description: The text that the user entered. Amazon Lex V2 interprets this text.
        sessionState:
          $ref: '#/components/schemas/SessionState'
          description: The current state of the dialog between the user and the bot.
        requestAttributes:
          $ref: '#/components/schemas/StringMap'
          description: '<p>Request-specific information passed between the client application and Amazon Lex V2 </p> <p>The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don''t create any request attributes with the prefix <code>x-amz-lex:</code>.</p>'
    SensitiveNonEmptyString:
      type: string
      format: password
    RecognizeUtteranceRequest:
      type: object
      title: RecognizeUtteranceRequest
      properties:
        inputStream:
          $ref: '#/components/schemas/BlobStream'
          description: User input in PCM or Opus audio format or text format as described in the <code>requestContentType</code> parameter.
    SentimentType:
      type: string
      enum:
        - MIXED
        - NEGATIVE
        - NEUTRAL
        - POSITIVE
    SentimentScore:
      type: object
      properties:
        positive:
          $ref: '#/components/schemas/Double'
          description: The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>POSITIVE</code> sentiment.
        negative:
          $ref: '#/components/schemas/Double'
          description: The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>NEGATIVE</code> sentiment.
        neutral:
          $ref: '#/components/schemas/Double'
          description: The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>NEUTRAL</code> sentiment.
        mixed:
          $ref: '#/components/schemas/Double'
          description: The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>MIXED</code> sentiment.
      description: The individual sentiment responses for the utterance.
    Shape:
      type: string
      enum:
        - Scalar
        - List
    Value:
      type: object
      required:
        - interpretedValue
      properties:
        originalValue:
          $ref: '#/components/schemas/NonEmptyString'
          description: The text of the utterance from the user that was entered for the slot.
        interpretedValue:
          $ref: '#/components/schemas/NonEmptyString'
          description: 'The value that Amazon Lex V2 determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex V2 choose the first value in the <code>resolvedValues</code> list.'
        resolvedValues:
          $ref: '#/components/schemas/StringList'
          description: A list of additional values that have been recognized for the slot.
      description: The value of a slot.
    Values:
      type: array
      items:
        $ref: '#/components/schemas/Slot'
    Slot:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/Value'
          description: The current value of the slot.
        values:
          $ref: '#/components/schemas/Values'
          description: 'A list of one or more values that the user provided for the slot. For example, if a for a slot that elicits pizza toppings, the values might be "pepperoni" and "pineapple." '
      description: 'A value that Amazon Lex V2 uses to fulfill an intent. '
    StringList:
      type: array
      items:
        $ref: '#/components/schemas/NonEmptyString'
security:
  - hmac: []

openapi: 3.0.0
info:
  version: '2017-09-01'
  x-release: v4
  title: AWS Elemental MediaStore Data Plane
  description: 'An AWS Elemental MediaStore asset is an object, similar to an object in the Amazon S3 service. Objects are the fundamental entities that are stored in AWS Elemental MediaStore.'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: mediastore-data
  x-aws-signingName: mediastore
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/mediastore-data-2017-09-01.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/mediastore/'
servers:
  - url: 'http://data.mediastore.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The MediaStore Data multi-region endpoint
  - url: 'https://data.mediastore.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The MediaStore Data multi-region endpoint
  - url: 'http://data.mediastore.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The MediaStore Data endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://data.mediastore.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The MediaStore Data endpoint for China (Beijing) and China (Ningxia)
paths:
  '/{Path}':
    delete:
      operationId: DeleteObject
      description: Deletes an object at the specified path.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteObjectResponse'
        '480':
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
        '481':
          description: ObjectNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundException'
        '482':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      parameters:
        - name: Path
          in: path
          required: true
          description: 'The path (including the file name) where the object is stored in the container. Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file name&gt;'
          schema:
            type: string
            pattern: '(?:[A-Za-z0-9_\.\-\~]+/){0,10}[A-Za-z0-9_\.\-\~]+'
            minLength: 1
            maxLength: 900
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    head:
      operationId: DescribeObject
      description: Gets the headers for an object at the specified path.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeObjectResponse'
        '480':
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
        '481':
          description: ObjectNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundException'
        '482':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      parameters:
        - name: Path
          in: path
          required: true
          description: 'The path (including the file name) where the object is stored in the container. Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file name&gt;'
          schema:
            type: string
            pattern: '(?:[A-Za-z0-9_\.\-\~]+/){0,10}[A-Za-z0-9_\.\-\~]+'
            minLength: 1
            maxLength: 900
    get:
      operationId: GetObject
      description: 'Downloads the object at the specified path. If the object’s upload availability is set to <code>streaming</code>, AWS Elemental MediaStore downloads the object even if it’s still uploading the object.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetObjectResponse'
        '480':
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
        '481':
          description: ObjectNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundException'
        '482':
          description: RequestedRangeNotSatisfiableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestedRangeNotSatisfiableException'
        '483':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      parameters:
        - name: Path
          in: path
          required: true
          description: '<p>The path (including the file name) where the object is stored in the container. Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file name&gt;</p> <p>For example, to upload the file <code>mlaw.avi</code> to the folder path <code>premium\canada</code> in the container <code>movies</code>, enter the path <code>premium/canada/mlaw.avi</code>.</p> <p>Do not include the container name in this path.</p> <p>If the path includes any folders that don''t exist yet, the service creates them. For example, suppose you have an existing <code>premium/usa</code> subfolder. If you specify <code>premium/canada</code>, the service creates a <code>canada</code> subfolder in the <code>premium</code> folder. You then have two subfolders, <code>usa</code> and <code>canada</code>, in the <code>premium</code> folder. </p> <p>There is no correlation between the path to the source and the path (folders) in the container in AWS Elemental MediaStore.</p> <p>For more information about folders and how they exist in a container, see the <a href="http://docs.aws.amazon.com/mediastore/latest/ug/">AWS Elemental MediaStore User Guide</a>.</p> <p>The file name is the name that is assigned to the file that you upload. The file can have the same name inside and outside of AWS Elemental MediaStore, or it can have the same name. The file name can include or omit an extension. </p>'
          schema:
            type: string
            pattern: '(?:[A-Za-z0-9_\.\-\~]+/){0,10}[A-Za-z0-9_\.\-\~]+'
            minLength: 1
            maxLength: 900
        - name: Range
          in: header
          required: false
          description: 'The range bytes of an object to retrieve. For more information about the <code>Range</code> header, see <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35</a>. AWS Elemental MediaStore ignores this header for partially uploaded objects that have streaming upload availability.'
          schema:
            type: string
            pattern: '^bytes=(?:\d+\-\d*|\d*\-\d+)$'
    put:
      operationId: PutObject
      description: Uploads an object to the specified path. Object sizes are limited to 25 MB for standard upload availability and 10 MB for streaming upload availability.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutObjectResponse'
        '480':
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
        '481':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      parameters:
        - name: Path
          in: path
          required: true
          description: '<p>The path (including the file name) where the object is stored in the container. Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file name&gt;</p> <p>For example, to upload the file <code>mlaw.avi</code> to the folder path <code>premium\canada</code> in the container <code>movies</code>, enter the path <code>premium/canada/mlaw.avi</code>.</p> <p>Do not include the container name in this path.</p> <p>If the path includes any folders that don''t exist yet, the service creates them. For example, suppose you have an existing <code>premium/usa</code> subfolder. If you specify <code>premium/canada</code>, the service creates a <code>canada</code> subfolder in the <code>premium</code> folder. You then have two subfolders, <code>usa</code> and <code>canada</code>, in the <code>premium</code> folder. </p> <p>There is no correlation between the path to the source and the path (folders) in the container in AWS Elemental MediaStore.</p> <p>For more information about folders and how they exist in a container, see the <a href="http://docs.aws.amazon.com/mediastore/latest/ug/">AWS Elemental MediaStore User Guide</a>.</p> <p>The file name is the name that is assigned to the file that you upload. The file can have the same name inside and outside of AWS Elemental MediaStore, or it can have the same name. The file name can include or omit an extension. </p>'
          schema:
            type: string
            pattern: '(?:[A-Za-z0-9_\.\-\~]+/){0,10}[A-Za-z0-9_\.\-\~]+'
            minLength: 1
            maxLength: 900
        - name: Content-Type
          in: header
          required: false
          description: The content type of the object.
          schema:
            type: string
            pattern: '^[\w\-\/\.\+]{1,255}$'
        - name: Cache-Control
          in: header
          required: false
          description: '<p>An optional <code>CacheControl</code> header that allows the caller to control the object''s cache behavior. Headers can be passed in as specified in the HTTP at <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9">https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.</p> <p>Headers with a custom user-defined value are also accepted.</p>'
          schema:
            type: string
        - name: x-amz-storage-class
          in: header
          required: false
          description: 'Indicates the storage class of a <code>Put</code> request. Defaults to high-performance temporal storage class, and objects are persisted into durable storage shortly after being received.'
          schema:
            type: string
            enum:
              - TEMPORAL
            minLength: 1
            maxLength: 16
        - name: x-amz-upload-availability
          in: header
          required: false
          description: '<p>Indicates the availability of an object while it is still uploading. If the value is set to <code>streaming</code>, the object is available for downloading after some initial buffering but before the object is uploaded completely. If the value is set to <code>standard</code>, the object is available for downloading only when it is uploaded completely. The default value for this header is <code>standard</code>.</p> <p>To use this header, you must also set the HTTP <code>Transfer-Encoding</code> header to <code>chunked</code>.</p>'
          schema:
            type: string
            enum:
              - STANDARD
              - STREAMING
            minLength: 1
            maxLength: 16
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Body
              properties:
                Body:
                  description: 'The bytes to be stored. '
                  type: string
  /:
    get:
      operationId: ListItems
      description: Provides a list of metadata entries about folders and objects in the specified folder.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListItemsResponse'
        '480':
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
        '481':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      parameters:
        - name: Path
          in: query
          required: false
          description: 'The path in the container from which to retrieve items. Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file name&gt;'
          schema:
            type: string
            pattern: '/?(?:[A-Za-z0-9_\.\-\~]+/){0,10}(?:[A-Za-z0-9_\.\-\~]+)?/?'
            minLength: 0
            maxLength: 900
        - name: MaxResults
          in: query
          required: false
          description: '<p>The maximum number of results to return per API request. For example, you submit a <code>ListItems</code> request with <code>MaxResults</code> set at 500. Although 2,000 items match your request, the service returns no more than the first 500 items. (The service also returns a <code>NextToken</code> value that you can use to fetch the next batch of results.) The service might return fewer results than the <code>MaxResults</code> value.</p> <p>If <code>MaxResults</code> is not included in the request, the service defaults to pagination with a maximum of 1,000 results per page.</p>'
          schema:
            type: integer
            minimum: 1
            maximum: 1000
        - name: NextToken
          in: query
          required: false
          description: '<p>The token that identifies which batch of results that you want to see. For example, you submit a <code>ListItems</code> request with <code>MaxResults</code> set at 500. The service returns the first batch of results (up to 500) and a <code>NextToken</code> value. To see the next batch of results, you can submit the <code>ListItems</code> request a second time and specify the <code>NextToken</code> value.</p> <p>Tokens expire after 15 minutes.</p>'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    DeleteObjectResponse:
      type: object
      properties: {}
    ContainerNotFoundException: {}
    ObjectNotFoundException: {}
    InternalServerError: {}
    DescribeObjectResponse:
      type: object
      properties: {}
    GetObjectResponse:
      type: object
      properties:
        Body:
          $ref: '#/components/schemas/PayloadBlob'
          description: 'The bytes of the object. '
        StatusCode:
          $ref: '#/components/schemas/statusCode'
          description: The HTML status code of the request. Status codes ranging from 200 to 299 indicate success. All other status codes indicate the type of error that occurred.
    RequestedRangeNotSatisfiableException: {}
    ListItemsResponse:
      type: object
      properties:
        Items:
          $ref: '#/components/schemas/ItemList'
          description: The metadata entries for the folders and objects at the requested path.
        NextToken:
          $ref: '#/components/schemas/PaginationToken'
          description: 'The token that can be used in a request to view the next set of results. For example, you submit a <code>ListItems</code> request that matches 2,000 items with <code>MaxResults</code> set at 500. The service returns the first batch of results (up to 500) and a <code>NextToken</code> value that can be used to fetch the next batch of results.'
    PutObjectResponse:
      type: object
      properties:
        ContentSHA256:
          $ref: '#/components/schemas/SHA256Hash'
          description: The SHA256 digest of the object that is persisted.
        ETag:
          $ref: '#/components/schemas/ETag'
          description: Unique identifier of the object in the container.
        StorageClass:
          $ref: '#/components/schemas/StorageClass'
          description: The storage class where the object was persisted. The class should be “Temporal”.
    ContentRangePattern:
      type: string
      pattern: ^bytes=\d+\-\d+/\d+$
    ContentType:
      type: string
      pattern: '^[\w\-\/\.\+]{1,255}$'
    PathNaming:
      type: string
      pattern: '(?:[A-Za-z0-9_\.\-\~]+/){0,10}[A-Za-z0-9_\.\-\~]+'
      minLength: 1
      maxLength: 900
    DeleteObjectRequest:
      type: object
      title: DeleteObjectRequest
      properties: {}
    DescribeObjectRequest:
      type: object
      title: DescribeObjectRequest
      properties: {}
    ETag:
      type: string
      pattern: '[0-9A-Fa-f]+'
      minLength: 1
      maxLength: 64
    NonNegativeLong:
      type: integer
      minimum: 0
    StringPrimitive:
      type: string
    TimeStamp:
      type: string
      format: date-time
    RangePattern:
      type: string
      pattern: '^bytes=(?:\d+\-\d*|\d*\-\d+)$'
    GetObjectRequest:
      type: object
      title: GetObjectRequest
      properties: {}
    PayloadBlob:
      type: string
    statusCode:
      type: integer
    ItemName:
      type: string
      pattern: '[A-Za-z0-9_\.\-\~]+'
    ItemType:
      type: string
      enum:
        - OBJECT
        - FOLDER
    Item:
      type: object
      properties:
        Name:
          $ref: '#/components/schemas/ItemName'
          description: The name of the item.
        Type:
          $ref: '#/components/schemas/ItemType'
          description: The item type (folder or object).
        ETag:
          $ref: '#/components/schemas/ETag'
          description: The ETag that represents a unique instance of the item.
        LastModified:
          $ref: '#/components/schemas/TimeStamp'
          description: The date and time that the item was last modified.
        ContentType:
          $ref: '#/components/schemas/ContentType'
          description: The content type of the item.
        ContentLength:
          $ref: '#/components/schemas/NonNegativeLong'
          description: The length of the item in bytes.
      description: A metadata entry for a folder or object.
    ItemList:
      type: array
      items:
        $ref: '#/components/schemas/Item'
    ListPathNaming:
      type: string
      pattern: '/?(?:[A-Za-z0-9_\.\-\~]+/){0,10}(?:[A-Za-z0-9_\.\-\~]+)?/?'
      minLength: 0
      maxLength: 900
    ListLimit:
      type: integer
      minimum: 1
      maximum: 1000
    PaginationToken:
      type: string
    ListItemsRequest:
      type: object
      title: ListItemsRequest
      properties: {}
    StorageClass:
      type: string
      enum:
        - TEMPORAL
      minLength: 1
      maxLength: 16
    UploadAvailability:
      type: string
      enum:
        - STANDARD
        - STREAMING
      minLength: 1
      maxLength: 16
    PutObjectRequest:
      type: object
      required:
        - Body
      title: PutObjectRequest
      properties:
        Body:
          $ref: '#/components/schemas/PayloadBlob'
          description: 'The bytes to be stored. '
    SHA256Hash:
      type: string
      pattern: '[0-9A-Fa-f]{64}'
      minLength: 64
      maxLength: 64
security:
  - hmac: []

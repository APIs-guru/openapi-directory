openapi: 3.0.0
info:
  version: '2009-04-15'
  x-release: v2
  title: Amazon SimpleDB
  description: 'Amazon SimpleDB is a web service providing the core database functions of data indexing and querying in the cloud. By offloading the time and effort associated with building and operating a web-scale database, SimpleDB provides developers the freedom to focus on application development. <p> A traditional, clustered relational database requires a sizable upfront capital outlay, is complex to design, and often requires extensive and repetitive database administration. Amazon SimpleDB is dramatically simpler, requiring no schema, automatically indexing your data and providing a simple API for storage and access. This approach eliminates the administrative burden of data modeling, index maintenance, and performance tuning. Developers gain access to this functionality within Amazon''s proven computing environment, are able to scale instantly, and pay only for what they use. </p> <p> Visit <a href="http://aws.amazon.com/simpledb/">http://aws.amazon.com/simpledb/</a> for more information. </p>'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: sdb
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/sdb-2009-04-15.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/sdb/'
servers:
  - url: 'http://sdb.amazonaws.com'
    variables: {}
    description: The general Amazon SimpleDB endpoint for US East (N. Virginia)
  - url: 'https://sdb.amazonaws.com'
    variables: {}
    description: The general Amazon SimpleDB endpoint for US East (N. Virginia)
  - url: 'http://sdb.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-2
    description: The Amazon SimpleDB multi-region endpoint
  - url: 'https://sdb.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-2
    description: The Amazon SimpleDB multi-region endpoint
  - url: 'http://sdb.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon SimpleDB endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://sdb.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon SimpleDB endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  /#Action=BatchDeleteAttributes:
    get:
      x-aws-operation-name: BatchDeleteAttributes
      operationId: GET_BatchDeleteAttributes
      description: '<p> Performs multiple DeleteAttributes operations in a single call, which reduces round trips and latencies. This enables Amazon SimpleDB to optimize requests, which generally yields better throughput. </p> <note> <p> If you specify BatchDeleteAttributes without attributes or values, all the attributes for the item are deleted. </p> <p> BatchDeleteAttributes is an idempotent operation; running it multiple times on the same item or attribute doesn''t result in an error. </p> <p> The BatchDeleteAttributes operation succeeds or fails in its entirety. There are no partial deletes. You can execute multiple BatchDeleteAttributes operations and other operations in parallel. However, large numbers of concurrent BatchDeleteAttributes calls can result in Service Unavailable (503) responses. </p> <p> This operation is vulnerable to exceeding the maximum URL size when making a REST request using the HTTP GET method. </p> <p> This operation does not support conditions using Expected.X.Name, Expected.X.Value, or Expected.X.Exists. </p> </note> <p> The following limitations are enforced for this operation: <ul> <li>1 MB request size</li> <li>25 item limit per BatchDeleteAttributes operation</li> </ul> </p>'
      responses:
        '200':
          description: Success
      parameters:
        - name: DomainName
          in: query
          required: true
          description: The name of the domain in which the attributes are being deleted.
          schema:
            type: string
        - name: Items
          in: query
          required: true
          description: A list of items on which to perform the operation.
          schema:
            type: array
            items:
              allOf:
                - $ref: '#/components/schemas/DeletableItem'
                - xml:
                    name: Item
            xml:
              wrapped: false
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - BatchDeleteAttributes
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - '2009-04-15'
    parameters:
      - $ref: '#/components/parameters/AWSAccessKeyId'
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/SignatureMethod'
      - $ref: '#/components/parameters/SignatureVersion'
      - $ref: '#/components/parameters/Timestamp'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/Signature'
    post:
      x-aws-operation-name: BatchDeleteAttributes
      operationId: POST_BatchDeleteAttributes
      description: '<p> Performs multiple DeleteAttributes operations in a single call, which reduces round trips and latencies. This enables Amazon SimpleDB to optimize requests, which generally yields better throughput. </p> <note> <p> If you specify BatchDeleteAttributes without attributes or values, all the attributes for the item are deleted. </p> <p> BatchDeleteAttributes is an idempotent operation; running it multiple times on the same item or attribute doesn''t result in an error. </p> <p> The BatchDeleteAttributes operation succeeds or fails in its entirety. There are no partial deletes. You can execute multiple BatchDeleteAttributes operations and other operations in parallel. However, large numbers of concurrent BatchDeleteAttributes calls can result in Service Unavailable (503) responses. </p> <p> This operation is vulnerable to exceeding the maximum URL size when making a REST request using the HTTP GET method. </p> <p> This operation does not support conditions using Expected.X.Name, Expected.X.Value, or Expected.X.Exists. </p> </note> <p> The following limitations are enforced for this operation: <ul> <li>1 MB request size</li> <li>25 item limit per BatchDeleteAttributes operation</li> </ul> </p>'
      responses:
        '200':
          description: Success
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/BatchDeleteAttributesRequest'
      parameters:
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - BatchDeleteAttributes
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - '2009-04-15'
  /#Action=BatchPutAttributes:
    get:
      x-aws-operation-name: BatchPutAttributes
      operationId: GET_BatchPutAttributes
      description: '<p> The <code>BatchPutAttributes</code> operation creates or replaces attributes within one or more items. By using this operation, the client can perform multiple <a>PutAttribute</a> operation with a single call. This helps yield savings in round trips and latencies, enabling Amazon SimpleDB to optimize requests and generally produce better throughput. </p> <p> The client may specify the item name with the <code>Item.X.ItemName</code> parameter. The client may specify new attributes using a combination of the <code>Item.X.Attribute.Y.Name</code> and <code>Item.X.Attribute.Y.Value</code> parameters. The client may specify the first attribute for the first item using the parameters <code>Item.0.Attribute.0.Name</code> and <code>Item.0.Attribute.0.Value</code>, and for the second attribute for the first item by the parameters <code>Item.0.Attribute.1.Name</code> and <code>Item.0.Attribute.1.Value</code>, and so on. </p> <p> Attributes are uniquely identified within an item by their name/value combination. For example, a single item can have the attributes <code>{ "first_name", "first_value" }</code> and <code>{ "first_name", "second_value" }</code>. However, it cannot have two attribute instances where both the <code>Item.X.Attribute.Y.Name</code> and <code>Item.X.Attribute.Y.Value</code> are the same. </p> <p> Optionally, the requester can supply the <code>Replace</code> parameter for each individual value. Setting this value to <code>true</code> will cause the new attribute values to replace the existing attribute values. For example, if an item <code>I</code> has the attributes <code>{ ''a'', ''1'' }, { ''b'', ''2''}</code> and <code>{ ''b'', ''3'' }</code> and the requester does a BatchPutAttributes of <code>{''I'', ''b'', ''4'' }</code> with the Replace parameter set to true, the final attributes of the item will be <code>{ ''a'', ''1'' }</code> and <code>{ ''b'', ''4'' }</code>, replacing the previous values of the ''b'' attribute with the new value. </p> <note> You cannot specify an empty string as an item or as an attribute name. The <code>BatchPutAttributes</code> operation succeeds or fails in its entirety. There are no partial puts. </note> <important> This operation is vulnerable to exceeding the maximum URL size when making a REST request using the HTTP GET method. This operation does not support conditions using <code>Expected.X.Name</code>, <code>Expected.X.Value</code>, or <code>Expected.X.Exists</code>. </important> <p> You can execute multiple <code>BatchPutAttributes</code> operations and other operations in parallel. However, large numbers of concurrent <code>BatchPutAttributes</code> calls can result in Service Unavailable (503) responses. </p> <p> The following limitations are enforced for this operation: <ul> <li>256 attribute name-value pairs per item</li> <li>1 MB request size</li> <li>1 billion attributes per domain</li> <li>10 GB of total user data storage per domain</li> <li>25 item limit per <code>BatchPutAttributes</code> operation</li> </ul> </p>'
      responses:
        '200':
          description: Success
        '400':
          description: NoSuchDomain
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchDomain'
        '409':
          description: NumberSubmittedAttributesExceeded
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NumberSubmittedAttributesExceeded'
      parameters:
        - name: DomainName
          in: query
          required: true
          description: The name of the domain in which the attributes are being stored.
          schema:
            type: string
        - name: Items
          in: query
          required: true
          description: A list of items on which to perform the operation.
          schema:
            type: array
            items:
              allOf:
                - $ref: '#/components/schemas/ReplaceableItem'
                - xml:
                    name: Item
            xml:
              wrapped: false
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - BatchPutAttributes
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - '2009-04-15'
    parameters:
      - $ref: '#/components/parameters/AWSAccessKeyId'
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/SignatureMethod'
      - $ref: '#/components/parameters/SignatureVersion'
      - $ref: '#/components/parameters/Timestamp'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/Signature'
    post:
      x-aws-operation-name: BatchPutAttributes
      operationId: POST_BatchPutAttributes
      description: '<p> The <code>BatchPutAttributes</code> operation creates or replaces attributes within one or more items. By using this operation, the client can perform multiple <a>PutAttribute</a> operation with a single call. This helps yield savings in round trips and latencies, enabling Amazon SimpleDB to optimize requests and generally produce better throughput. </p> <p> The client may specify the item name with the <code>Item.X.ItemName</code> parameter. The client may specify new attributes using a combination of the <code>Item.X.Attribute.Y.Name</code> and <code>Item.X.Attribute.Y.Value</code> parameters. The client may specify the first attribute for the first item using the parameters <code>Item.0.Attribute.0.Name</code> and <code>Item.0.Attribute.0.Value</code>, and for the second attribute for the first item by the parameters <code>Item.0.Attribute.1.Name</code> and <code>Item.0.Attribute.1.Value</code>, and so on. </p> <p> Attributes are uniquely identified within an item by their name/value combination. For example, a single item can have the attributes <code>{ "first_name", "first_value" }</code> and <code>{ "first_name", "second_value" }</code>. However, it cannot have two attribute instances where both the <code>Item.X.Attribute.Y.Name</code> and <code>Item.X.Attribute.Y.Value</code> are the same. </p> <p> Optionally, the requester can supply the <code>Replace</code> parameter for each individual value. Setting this value to <code>true</code> will cause the new attribute values to replace the existing attribute values. For example, if an item <code>I</code> has the attributes <code>{ ''a'', ''1'' }, { ''b'', ''2''}</code> and <code>{ ''b'', ''3'' }</code> and the requester does a BatchPutAttributes of <code>{''I'', ''b'', ''4'' }</code> with the Replace parameter set to true, the final attributes of the item will be <code>{ ''a'', ''1'' }</code> and <code>{ ''b'', ''4'' }</code>, replacing the previous values of the ''b'' attribute with the new value. </p> <note> You cannot specify an empty string as an item or as an attribute name. The <code>BatchPutAttributes</code> operation succeeds or fails in its entirety. There are no partial puts. </note> <important> This operation is vulnerable to exceeding the maximum URL size when making a REST request using the HTTP GET method. This operation does not support conditions using <code>Expected.X.Name</code>, <code>Expected.X.Value</code>, or <code>Expected.X.Exists</code>. </important> <p> You can execute multiple <code>BatchPutAttributes</code> operations and other operations in parallel. However, large numbers of concurrent <code>BatchPutAttributes</code> calls can result in Service Unavailable (503) responses. </p> <p> The following limitations are enforced for this operation: <ul> <li>256 attribute name-value pairs per item</li> <li>1 MB request size</li> <li>1 billion attributes per domain</li> <li>10 GB of total user data storage per domain</li> <li>25 item limit per <code>BatchPutAttributes</code> operation</li> </ul> </p>'
      responses:
        '200':
          description: Success
        '400':
          description: NoSuchDomain
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchDomain'
        '409':
          description: NumberSubmittedAttributesExceeded
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NumberSubmittedAttributesExceeded'
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/BatchPutAttributesRequest'
      parameters:
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - BatchPutAttributes
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - '2009-04-15'
  /#Action=CreateDomain:
    get:
      x-aws-operation-name: CreateDomain
      operationId: GET_CreateDomain
      description: '<p> The <code>CreateDomain</code> operation creates a new domain. The domain name should be unique among the domains associated with the Access Key ID provided in the request. The <code>CreateDomain</code> operation may take 10 or more seconds to complete. </p> <note> CreateDomain is an idempotent operation; running it multiple times using the same domain name will not result in an error response. </note> <p> The client can create up to 100 domains per account. </p> <p> If the client requires additional domains, go to <a href="http://aws.amazon.com/contact-us/simpledb-limit-request/"> http://aws.amazon.com/contact-us/simpledb-limit-request/</a>. </p>'
      responses:
        '200':
          description: Success
        '400':
          description: MissingParameter
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/MissingParameter'
        '409':
          description: NumberDomainsExceeded
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NumberDomainsExceeded'
      parameters:
        - name: DomainName
          in: query
          required: true
          description: 'The name of the domain to create. The name can range between 3 and 255 characters and can contain the following characters: a-z, A-Z, 0-9, ''_'', ''-'', and ''.''.'
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - CreateDomain
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - '2009-04-15'
    parameters:
      - $ref: '#/components/parameters/AWSAccessKeyId'
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/SignatureMethod'
      - $ref: '#/components/parameters/SignatureVersion'
      - $ref: '#/components/parameters/Timestamp'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/Signature'
    post:
      x-aws-operation-name: CreateDomain
      operationId: POST_CreateDomain
      description: '<p> The <code>CreateDomain</code> operation creates a new domain. The domain name should be unique among the domains associated with the Access Key ID provided in the request. The <code>CreateDomain</code> operation may take 10 or more seconds to complete. </p> <note> CreateDomain is an idempotent operation; running it multiple times using the same domain name will not result in an error response. </note> <p> The client can create up to 100 domains per account. </p> <p> If the client requires additional domains, go to <a href="http://aws.amazon.com/contact-us/simpledb-limit-request/"> http://aws.amazon.com/contact-us/simpledb-limit-request/</a>. </p>'
      responses:
        '200':
          description: Success
        '400':
          description: MissingParameter
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/MissingParameter'
        '409':
          description: NumberDomainsExceeded
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NumberDomainsExceeded'
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/CreateDomainRequest'
      parameters:
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - CreateDomain
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - '2009-04-15'
  /#Action=DeleteAttributes:
    get:
      x-aws-operation-name: DeleteAttributes
      operationId: GET_DeleteAttributes
      description: '<p> Deletes one or more attributes associated with an item. If all attributes of the item are deleted, the item is deleted. </p> <note> If <code>DeleteAttributes</code> is called without being passed any attributes or values specified, all the attributes for the item are deleted. </note> <p> <code>DeleteAttributes</code> is an idempotent operation; running it multiple times on the same item or attribute does not result in an error response. </p> <p> Because Amazon SimpleDB makes multiple copies of item data and uses an eventual consistency update model, performing a <a>GetAttributes</a> or <a>Select</a> operation (read) immediately after a <code>DeleteAttributes</code> or <a>PutAttributes</a> operation (write) might not return updated item data. </p>'
      responses:
        '200':
          description: Success
        '400':
          description: NoSuchDomain
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchDomain'
        '404':
          description: AttributeDoesNotExist
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/AttributeDoesNotExist'
      parameters:
        - name: DomainName
          in: query
          required: true
          description: The name of the domain in which to perform the operation.
          schema:
            type: string
        - name: ItemName
          in: query
          required: true
          description: 'The name of the item. Similar to rows on a spreadsheet, items represent individual objects that contain one or more value-attribute pairs.'
          schema:
            type: string
        - name: Attributes
          in: query
          required: false
          description: 'A list of Attributes. Similar to columns on a spreadsheet, attributes represent categories of data that can be assigned to items.'
          schema:
            type: array
            items:
              allOf:
                - $ref: '#/components/schemas/DeletableAttribute'
                - xml:
                    name: Attribute
            xml:
              wrapped: false
        - name: Expected
          in: query
          required: false
          description: 'The update condition which, if specified, determines whether the specified attributes will be deleted or not. The update condition must be satisfied in order for this request to be processed and the attributes to be deleted.'
          schema:
            type: object
            properties:
              Name:
                $ref: '#/components/schemas/String'
                description: The name of the attribute involved in the condition.
              Value:
                $ref: '#/components/schemas/String'
                description: The value of an attribute. This value can only be specified when the <code>Exists</code> parameter is equal to <code>true</code>.
              Exists:
                $ref: '#/components/schemas/Boolean'
                description: A value specifying whether or not the specified attribute must exist with the specified value in order for the update condition to be satisfied. Specify <code>true</code> if the attribute must exist for the update condition to be satisfied. Specify <code>false</code> if the attribute should not exist in order for the update condition to be satisfied.
            description: ' Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn''t exist. '
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - DeleteAttributes
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - '2009-04-15'
    parameters:
      - $ref: '#/components/parameters/AWSAccessKeyId'
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/SignatureMethod'
      - $ref: '#/components/parameters/SignatureVersion'
      - $ref: '#/components/parameters/Timestamp'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/Signature'
    post:
      x-aws-operation-name: DeleteAttributes
      operationId: POST_DeleteAttributes
      description: '<p> Deletes one or more attributes associated with an item. If all attributes of the item are deleted, the item is deleted. </p> <note> If <code>DeleteAttributes</code> is called without being passed any attributes or values specified, all the attributes for the item are deleted. </note> <p> <code>DeleteAttributes</code> is an idempotent operation; running it multiple times on the same item or attribute does not result in an error response. </p> <p> Because Amazon SimpleDB makes multiple copies of item data and uses an eventual consistency update model, performing a <a>GetAttributes</a> or <a>Select</a> operation (read) immediately after a <code>DeleteAttributes</code> or <a>PutAttributes</a> operation (write) might not return updated item data. </p>'
      responses:
        '200':
          description: Success
        '400':
          description: NoSuchDomain
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchDomain'
        '404':
          description: AttributeDoesNotExist
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/AttributeDoesNotExist'
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/DeleteAttributesRequest'
      parameters:
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - DeleteAttributes
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - '2009-04-15'
  /#Action=DeleteDomain:
    get:
      x-aws-operation-name: DeleteDomain
      operationId: GET_DeleteDomain
      description: <p> The <code>DeleteDomain</code> operation deletes a domain. Any items (and their attributes) in the domain are deleted as well. The <code>DeleteDomain</code> operation might take 10 or more seconds to complete. </p> <note> Running <code>DeleteDomain</code> on a domain that does not exist or running the function multiple times using the same domain name will not result in an error response. </note>
      responses:
        '200':
          description: Success
        '400':
          description: MissingParameter
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/MissingParameter'
      parameters:
        - name: DomainName
          in: query
          required: true
          description: The name of the domain to delete.
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - DeleteDomain
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - '2009-04-15'
    parameters:
      - $ref: '#/components/parameters/AWSAccessKeyId'
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/SignatureMethod'
      - $ref: '#/components/parameters/SignatureVersion'
      - $ref: '#/components/parameters/Timestamp'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/Signature'
    post:
      x-aws-operation-name: DeleteDomain
      operationId: POST_DeleteDomain
      description: <p> The <code>DeleteDomain</code> operation deletes a domain. Any items (and their attributes) in the domain are deleted as well. The <code>DeleteDomain</code> operation might take 10 or more seconds to complete. </p> <note> Running <code>DeleteDomain</code> on a domain that does not exist or running the function multiple times using the same domain name will not result in an error response. </note>
      responses:
        '200':
          description: Success
        '400':
          description: MissingParameter
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/MissingParameter'
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/DeleteDomainRequest'
      parameters:
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - DeleteDomain
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - '2009-04-15'
  /#Action=DomainMetadata:
    get:
      x-aws-operation-name: DomainMetadata
      operationId: GET_DomainMetadata
      description: ' Returns information about the domain, including when the domain was created, the number of items and attributes in the domain, and the size of the attribute names and values. '
      responses:
        '200':
          description: Success
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/DomainMetadataResult'
        '400':
          description: NoSuchDomain
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchDomain'
      parameters:
        - name: DomainName
          in: query
          required: true
          description: The name of the domain for which to display the metadata of.
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - DomainMetadata
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - '2009-04-15'
    parameters:
      - $ref: '#/components/parameters/AWSAccessKeyId'
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/SignatureMethod'
      - $ref: '#/components/parameters/SignatureVersion'
      - $ref: '#/components/parameters/Timestamp'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/Signature'
    post:
      x-aws-operation-name: DomainMetadata
      operationId: POST_DomainMetadata
      description: ' Returns information about the domain, including when the domain was created, the number of items and attributes in the domain, and the size of the attribute names and values. '
      responses:
        '200':
          description: Success
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/DomainMetadataResult'
        '400':
          description: NoSuchDomain
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchDomain'
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/DomainMetadataRequest'
      parameters:
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - DomainMetadata
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - '2009-04-15'
  /#Action=GetAttributes:
    get:
      x-aws-operation-name: GetAttributes
      operationId: GET_GetAttributes
      description: '<p> Returns all of the attributes associated with the specified item. Optionally, the attributes returned can be limited to one or more attributes by specifying an attribute name parameter. </p> <p> If the item does not exist on the replica that was accessed for this operation, an empty set is returned. The system does not return an error as it cannot guarantee the item does not exist on other replicas. </p> <note> If GetAttributes is called without being passed any attribute names, all the attributes for the item are returned. </note>'
      responses:
        '200':
          description: Success
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/GetAttributesResult'
        '400':
          description: NoSuchDomain
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchDomain'
      parameters:
        - name: DomainName
          in: query
          required: true
          description: The name of the domain in which to perform the operation.
          schema:
            type: string
        - name: ItemName
          in: query
          required: true
          description: The name of the item.
          schema:
            type: string
        - name: AttributeNames
          in: query
          required: false
          description: The names of the attributes.
          schema:
            type: array
            items:
              allOf:
                - $ref: '#/components/schemas/String'
                - xml:
                    name: AttributeName
            xml:
              wrapped: false
        - name: ConsistentRead
          in: query
          required: false
          description: 'Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If <code>true</code>, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read.'
          schema:
            type: boolean
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - GetAttributes
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - '2009-04-15'
    parameters:
      - $ref: '#/components/parameters/AWSAccessKeyId'
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/SignatureMethod'
      - $ref: '#/components/parameters/SignatureVersion'
      - $ref: '#/components/parameters/Timestamp'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/Signature'
    post:
      x-aws-operation-name: GetAttributes
      operationId: POST_GetAttributes
      description: '<p> Returns all of the attributes associated with the specified item. Optionally, the attributes returned can be limited to one or more attributes by specifying an attribute name parameter. </p> <p> If the item does not exist on the replica that was accessed for this operation, an empty set is returned. The system does not return an error as it cannot guarantee the item does not exist on other replicas. </p> <note> If GetAttributes is called without being passed any attribute names, all the attributes for the item are returned. </note>'
      responses:
        '200':
          description: Success
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/GetAttributesResult'
        '400':
          description: NoSuchDomain
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchDomain'
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/GetAttributesRequest'
      parameters:
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - GetAttributes
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - '2009-04-15'
  /#Action=ListDomains:
    get:
      x-aws-operation-name: ListDomains
      operationId: GET_ListDomains
      description: ' The <code>ListDomains</code> operation lists all domains associated with the Access Key ID. It returns domain names up to the limit set by <a href="#MaxNumberOfDomains">MaxNumberOfDomains</a>. A <a href="#NextToken">NextToken</a> is returned if there are more than <code>MaxNumberOfDomains</code> domains. Calling <code>ListDomains</code> successive times with the <code>NextToken</code> provided by the operation returns up to <code>MaxNumberOfDomains</code> more domain names with each successive operation call. '
      responses:
        '200':
          description: Success
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ListDomainsResult'
        '400':
          description: InvalidNextToken
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/InvalidNextToken'
      parameters:
        - name: MaxNumberOfDomains
          in: query
          required: false
          description: The maximum number of domain names you want returned. The range is 1 to 100. The default setting is 100.
          schema:
            type: integer
        - name: NextToken
          in: query
          required: false
          description: A string informing Amazon SimpleDB where to start the next list of domain names.
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - ListDomains
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - '2009-04-15'
    parameters:
      - $ref: '#/components/parameters/AWSAccessKeyId'
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/SignatureMethod'
      - $ref: '#/components/parameters/SignatureVersion'
      - $ref: '#/components/parameters/Timestamp'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/Signature'
    post:
      x-aws-operation-name: ListDomains
      operationId: POST_ListDomains
      description: ' The <code>ListDomains</code> operation lists all domains associated with the Access Key ID. It returns domain names up to the limit set by <a href="#MaxNumberOfDomains">MaxNumberOfDomains</a>. A <a href="#NextToken">NextToken</a> is returned if there are more than <code>MaxNumberOfDomains</code> domains. Calling <code>ListDomains</code> successive times with the <code>NextToken</code> provided by the operation returns up to <code>MaxNumberOfDomains</code> more domain names with each successive operation call. '
      responses:
        '200':
          description: Success
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ListDomainsResult'
        '400':
          description: InvalidNextToken
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/InvalidNextToken'
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/ListDomainsRequest'
      parameters:
        - name: MaxNumberOfDomains
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - ListDomains
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - '2009-04-15'
  /#Action=PutAttributes:
    get:
      x-aws-operation-name: PutAttributes
      operationId: GET_PutAttributes
      description: '<p> The PutAttributes operation creates or replaces attributes in an item. The client may specify new attributes using a combination of the <code>Attribute.X.Name</code> and <code>Attribute.X.Value</code> parameters. The client specifies the first attribute by the parameters <code>Attribute.0.Name</code> and <code>Attribute.0.Value</code>, the second attribute by the parameters <code>Attribute.1.Name</code> and <code>Attribute.1.Value</code>, and so on. </p> <p> Attributes are uniquely identified in an item by their name/value combination. For example, a single item can have the attributes <code>{ "first_name", "first_value" }</code> and <code>{ "first_name", second_value" }</code>. However, it cannot have two attribute instances where both the <code>Attribute.X.Name</code> and <code>Attribute.X.Value</code> are the same. </p> <p> Optionally, the requestor can supply the <code>Replace</code> parameter for each individual attribute. Setting this value to <code>true</code> causes the new attribute value to replace the existing attribute value(s). For example, if an item has the attributes <code>{ ''a'', ''1'' }</code>, <code>{ ''b'', ''2''}</code> and <code>{ ''b'', ''3'' }</code> and the requestor calls <code>PutAttributes</code> using the attributes <code>{ ''b'', ''4'' }</code> with the <code>Replace</code> parameter set to true, the final attributes of the item are changed to <code>{ ''a'', ''1'' }</code> and <code>{ ''b'', ''4'' }</code>, which replaces the previous values of the ''b'' attribute with the new value. </p> <note> Using <code>PutAttributes</code> to replace attribute values that do not exist will not result in an error response. </note> <p> You cannot specify an empty string as an attribute name. </p> <p> Because Amazon SimpleDB makes multiple copies of client data and uses an eventual consistency update model, an immediate <a>GetAttributes</a> or <a>Select</a> operation (read) immediately after a <a>PutAttributes</a> or <a>DeleteAttributes</a> operation (write) might not return the updated data. </p> <p> The following limitations are enforced for this operation: <ul> <li>256 total attribute name-value pairs per item</li> <li>One billion attributes per domain</li> <li>10 GB of total user data storage per domain</li> </ul> </p>'
      responses:
        '200':
          description: Success
        '400':
          description: NoSuchDomain
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchDomain'
        '404':
          description: AttributeDoesNotExist
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/AttributeDoesNotExist'
        '409':
          description: NumberItemAttributesExceeded
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NumberItemAttributesExceeded'
      parameters:
        - name: DomainName
          in: query
          required: true
          description: The name of the domain in which to perform the operation.
          schema:
            type: string
        - name: ItemName
          in: query
          required: true
          description: The name of the item.
          schema:
            type: string
        - name: Attributes
          in: query
          required: true
          description: The list of attributes.
          schema:
            type: array
            items:
              allOf:
                - $ref: '#/components/schemas/ReplaceableAttribute'
                - xml:
                    name: Attribute
            xml:
              wrapped: false
        - name: Expected
          in: query
          required: false
          description: 'The update condition which, if specified, determines whether the specified attributes will be updated or not. The update condition must be satisfied in order for this request to be processed and the attributes to be updated.'
          schema:
            type: object
            properties:
              Name:
                $ref: '#/components/schemas/String'
                description: The name of the attribute involved in the condition.
              Value:
                $ref: '#/components/schemas/String'
                description: The value of an attribute. This value can only be specified when the <code>Exists</code> parameter is equal to <code>true</code>.
              Exists:
                $ref: '#/components/schemas/Boolean'
                description: A value specifying whether or not the specified attribute must exist with the specified value in order for the update condition to be satisfied. Specify <code>true</code> if the attribute must exist for the update condition to be satisfied. Specify <code>false</code> if the attribute should not exist in order for the update condition to be satisfied.
            description: ' Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn''t exist. '
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - PutAttributes
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - '2009-04-15'
    parameters:
      - $ref: '#/components/parameters/AWSAccessKeyId'
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/SignatureMethod'
      - $ref: '#/components/parameters/SignatureVersion'
      - $ref: '#/components/parameters/Timestamp'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/Signature'
    post:
      x-aws-operation-name: PutAttributes
      operationId: POST_PutAttributes
      description: '<p> The PutAttributes operation creates or replaces attributes in an item. The client may specify new attributes using a combination of the <code>Attribute.X.Name</code> and <code>Attribute.X.Value</code> parameters. The client specifies the first attribute by the parameters <code>Attribute.0.Name</code> and <code>Attribute.0.Value</code>, the second attribute by the parameters <code>Attribute.1.Name</code> and <code>Attribute.1.Value</code>, and so on. </p> <p> Attributes are uniquely identified in an item by their name/value combination. For example, a single item can have the attributes <code>{ "first_name", "first_value" }</code> and <code>{ "first_name", second_value" }</code>. However, it cannot have two attribute instances where both the <code>Attribute.X.Name</code> and <code>Attribute.X.Value</code> are the same. </p> <p> Optionally, the requestor can supply the <code>Replace</code> parameter for each individual attribute. Setting this value to <code>true</code> causes the new attribute value to replace the existing attribute value(s). For example, if an item has the attributes <code>{ ''a'', ''1'' }</code>, <code>{ ''b'', ''2''}</code> and <code>{ ''b'', ''3'' }</code> and the requestor calls <code>PutAttributes</code> using the attributes <code>{ ''b'', ''4'' }</code> with the <code>Replace</code> parameter set to true, the final attributes of the item are changed to <code>{ ''a'', ''1'' }</code> and <code>{ ''b'', ''4'' }</code>, which replaces the previous values of the ''b'' attribute with the new value. </p> <note> Using <code>PutAttributes</code> to replace attribute values that do not exist will not result in an error response. </note> <p> You cannot specify an empty string as an attribute name. </p> <p> Because Amazon SimpleDB makes multiple copies of client data and uses an eventual consistency update model, an immediate <a>GetAttributes</a> or <a>Select</a> operation (read) immediately after a <a>PutAttributes</a> or <a>DeleteAttributes</a> operation (write) might not return the updated data. </p> <p> The following limitations are enforced for this operation: <ul> <li>256 total attribute name-value pairs per item</li> <li>One billion attributes per domain</li> <li>10 GB of total user data storage per domain</li> </ul> </p>'
      responses:
        '200':
          description: Success
        '400':
          description: NoSuchDomain
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchDomain'
        '404':
          description: AttributeDoesNotExist
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/AttributeDoesNotExist'
        '409':
          description: NumberItemAttributesExceeded
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NumberItemAttributesExceeded'
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/PutAttributesRequest'
      parameters:
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - PutAttributes
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - '2009-04-15'
  /#Action=Select:
    get:
      x-aws-operation-name: Select
      operationId: GET_Select
      description: '<p> The <code>Select</code> operation returns a set of attributes for <code>ItemNames</code> that match the select expression. <code>Select</code> is similar to the standard SQL SELECT statement. </p> <p> The total size of the response cannot exceed 1 MB in total size. Amazon SimpleDB automatically adjusts the number of items returned per page to enforce this limit. For example, if the client asks to retrieve 2500 items, but each individual item is 10 kB in size, the system returns 100 items and an appropriate <code>NextToken</code> so the client can access the next page of results. </p> <p> For information on how to construct select expressions, see Using Select to Create Amazon SimpleDB Queries in the Developer Guide. </p>'
      responses:
        '200':
          description: Success
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/SelectResult'
        '400':
          description: TooManyRequestedAttributes
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/TooManyRequestedAttributes'
        '408':
          description: RequestTimeout
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
      parameters:
        - name: SelectExpression
          in: query
          required: true
          description: The expression used to query the domain.
          schema:
            type: string
        - name: NextToken
          in: query
          required: false
          description: A string informing Amazon SimpleDB where to start the next list of <code>ItemNames</code>.
          schema:
            type: string
        - name: ConsistentRead
          in: query
          required: false
          description: 'Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If <code>true</code>, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read.'
          schema:
            type: boolean
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - Select
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - '2009-04-15'
    parameters:
      - $ref: '#/components/parameters/AWSAccessKeyId'
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/SignatureMethod'
      - $ref: '#/components/parameters/SignatureVersion'
      - $ref: '#/components/parameters/Timestamp'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/Signature'
    post:
      x-aws-operation-name: Select
      operationId: POST_Select
      description: '<p> The <code>Select</code> operation returns a set of attributes for <code>ItemNames</code> that match the select expression. <code>Select</code> is similar to the standard SQL SELECT statement. </p> <p> The total size of the response cannot exceed 1 MB in total size. Amazon SimpleDB automatically adjusts the number of items returned per page to enforce this limit. For example, if the client asks to retrieve 2500 items, but each individual item is 10 kB in size, the system returns 100 items and an appropriate <code>NextToken</code> so the client can access the next page of results. </p> <p> For information on how to construct select expressions, see Using Select to Create Amazon SimpleDB Queries in the Developer Guide. </p>'
      responses:
        '200':
          description: Success
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/SelectResult'
        '400':
          description: TooManyRequestedAttributes
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/TooManyRequestedAttributes'
        '408':
          description: RequestTimeout
          x-aws-exception: true
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/SelectRequest'
      parameters:
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - Select
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - '2009-04-15'
components:
  parameters:
    AWSAccessKeyId:
      name: AWSAccessKeyId
      in: query
      schema:
        type: string
      required: true
    Action:
      name: Action
      in: query
      schema:
        type: string
      required: true
    SignatureMethod:
      name: SignatureMethod
      in: query
      schema:
        type: string
      required: true
    SignatureVersion:
      name: SignatureVersion
      in: query
      schema:
        type: string
      required: true
    Timestamp:
      name: Timestamp
      in: query
      schema:
        type: string
      required: true
    Version:
      name: Version
      in: query
      schema:
        type: string
      required: true
    Signature:
      name: Signature
      in: query
      schema:
        type: string
      required: true
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v2
      x-amazon-apigateway-authtype: awsSigv2
  schemas:
    DeletableItem:
      type: object
      required:
        - Name
      properties:
        Name:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: ItemName
        Attributes:
          $ref: '#/components/schemas/DeletableAttributeList'
    ReplaceableItem:
      type: object
      required:
        - Name
        - Attributes
      properties:
        Name:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: ItemName
              description: The name of the replaceable item.
        Attributes:
          $ref: '#/components/schemas/ReplaceableAttributeList'
          description: The list of attributes for a replaceable item.
      description: ''
    DuplicateItemName:
      type: object
      properties:
        BoxUsage:
          $ref: '#/components/schemas/Float'
      description: 'The item name was specified more than once. '
    InvalidParameterValue:
      type: object
      properties:
        BoxUsage:
          $ref: '#/components/schemas/Float'
      description: The value for a parameter is invalid.
    MissingParameter:
      type: object
      properties:
        BoxUsage:
          $ref: '#/components/schemas/Float'
      description: The request must contain the specified missing parameter.
    NoSuchDomain:
      type: object
      properties:
        BoxUsage:
          $ref: '#/components/schemas/Float'
      description: The specified domain does not exist.
    NumberItemAttributesExceeded:
      type: object
      properties:
        BoxUsage:
          $ref: '#/components/schemas/Float'
      description: Too many attributes in this item.
    NumberDomainAttributesExceeded:
      type: object
      properties:
        BoxUsage:
          $ref: '#/components/schemas/Float'
      description: Too many attributes in this domain.
    NumberDomainBytesExceeded:
      type: object
      properties:
        BoxUsage:
          $ref: '#/components/schemas/Float'
      description: Too many bytes in this domain.
    NumberSubmittedItemsExceeded:
      type: object
      properties:
        BoxUsage:
          $ref: '#/components/schemas/Float'
      description: Too many items exist in a single call.
    NumberSubmittedAttributesExceeded:
      type: object
      properties:
        BoxUsage:
          $ref: '#/components/schemas/Float'
      description: Too many attributes exist in a single call.
    NumberDomainsExceeded:
      type: object
      properties:
        BoxUsage:
          $ref: '#/components/schemas/Float'
      description: Too many domains exist per this account.
    DeletableAttribute:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: '#/components/schemas/String'
          description: The name of the attribute.
        Value:
          $ref: '#/components/schemas/String'
          description: The value of the attribute.
      description: ''
    String:
      type: string
    Boolean:
      type: boolean
    AttributeDoesNotExist:
      type: object
      properties:
        BoxUsage:
          $ref: '#/components/schemas/Float'
      description: The specified attribute does not exist.
    DomainMetadataResult:
      type: object
      properties:
        ItemCount:
          $ref: '#/components/schemas/Integer'
          description: The number of all items in the domain.
        ItemNamesSizeBytes:
          $ref: '#/components/schemas/Long'
          description: 'The total size of all item names in the domain, in bytes.'
        AttributeNameCount:
          $ref: '#/components/schemas/Integer'
          description: The number of unique attribute names in the domain.
        AttributeNamesSizeBytes:
          $ref: '#/components/schemas/Long'
          description: 'The total size of all unique attribute names in the domain, in bytes.'
        AttributeValueCount:
          $ref: '#/components/schemas/Integer'
          description: The number of all attribute name/value pairs in the domain.
        AttributeValuesSizeBytes:
          $ref: '#/components/schemas/Long'
          description: 'The total size of all attribute values in the domain, in bytes.'
        Timestamp:
          $ref: '#/components/schemas/Integer'
          description: 'The data and time when metadata was calculated, in Epoch (UNIX) seconds.'
    GetAttributesResult:
      type: object
      properties:
        Attributes:
          $ref: '#/components/schemas/AttributeList'
          description: The list of attributes returned by the operation.
    ListDomainsResult:
      type: object
      properties:
        DomainNames:
          $ref: '#/components/schemas/DomainNameList'
          description: A list of domain names that match the expression.
        NextToken:
          $ref: '#/components/schemas/String'
          description: An opaque token indicating that there are more domains than the specified <code>MaxNumberOfDomains</code> still available.
    InvalidNextToken:
      type: object
      properties:
        BoxUsage:
          $ref: '#/components/schemas/Float'
      description: 'The specified NextToken is not valid. '
    ReplaceableAttribute:
      type: object
      required:
        - Name
        - Value
      properties:
        Name:
          $ref: '#/components/schemas/String'
          description: The name of the replaceable attribute.
        Value:
          $ref: '#/components/schemas/String'
          description: The value of the replaceable attribute.
        Replace:
          $ref: '#/components/schemas/Boolean'
          description: A flag specifying whether or not to replace the attribute/value pair or to add a new attribute/value pair. The default setting is <code>false</code>.
      description: ''
    SelectResult:
      type: object
      properties:
        Items:
          $ref: '#/components/schemas/ItemList'
          description: A list of items that match the select expression.
        NextToken:
          $ref: '#/components/schemas/String'
          description: 'An opaque token indicating that more items than <code>MaxNumberOfItems</code> were matched, the response size exceeded 1 megabyte, or the execution time exceeded 5 seconds.'
    InvalidNumberPredicates:
      type: object
      properties:
        BoxUsage:
          $ref: '#/components/schemas/Float'
      description: Too many predicates exist in the query expression.
    InvalidNumberValueTests:
      type: object
      properties:
        BoxUsage:
          $ref: '#/components/schemas/Float'
      description: Too many predicates exist in the query expression.
    InvalidQueryExpression:
      type: object
      properties:
        BoxUsage:
          $ref: '#/components/schemas/Float'
      description: The specified query expression syntax is not valid.
    RequestTimeout:
      type: object
      properties:
        BoxUsage:
          $ref: '#/components/schemas/Float'
      description: A timeout occurred when attempting to query the specified domain with specified query expression.
    TooManyRequestedAttributes:
      type: object
      properties:
        BoxUsage:
          $ref: '#/components/schemas/Float'
      description: Too many attributes requested.
    Attribute:
      type: object
      required:
        - Name
        - Value
      properties:
        Name:
          $ref: '#/components/schemas/String'
          description: The name of the attribute.
        AlternateNameEncoding:
          $ref: '#/components/schemas/String'
          description: ''
        Value:
          $ref: '#/components/schemas/String'
          description: The value of the attribute.
        AlternateValueEncoding:
          $ref: '#/components/schemas/String'
          description: ''
      description: ''
    Float:
      type: number
      format: float
    AttributeList:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/Attribute'
          - xml:
              name: Attribute
      xml:
        wrapped: false
    AttributeNameList:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/String'
          - xml:
              name: AttributeName
      xml:
        wrapped: false
    DeletableItemList:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/DeletableItem'
          - xml:
              name: Item
      xml:
        wrapped: false
    BatchDeleteAttributesRequest:
      type: object
      required:
        - DomainName
        - Items
      title: BatchDeleteAttributesRequest
      properties:
        DomainName:
          $ref: '#/components/schemas/String'
          description: The name of the domain in which the attributes are being deleted.
        Items:
          $ref: '#/components/schemas/DeletableItemList'
          description: A list of items on which to perform the operation.
    ReplaceableItemList:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/ReplaceableItem'
          - xml:
              name: Item
      xml:
        wrapped: false
    BatchPutAttributesRequest:
      type: object
      required:
        - DomainName
        - Items
      title: BatchPutAttributesRequest
      properties:
        DomainName:
          $ref: '#/components/schemas/String'
          description: The name of the domain in which the attributes are being stored.
        Items:
          $ref: '#/components/schemas/ReplaceableItemList'
          description: A list of items on which to perform the operation.
    CreateDomainRequest:
      type: object
      required:
        - DomainName
      title: CreateDomainRequest
      properties:
        DomainName:
          $ref: '#/components/schemas/String'
          description: 'The name of the domain to create. The name can range between 3 and 255 characters and can contain the following characters: a-z, A-Z, 0-9, ''_'', ''-'', and ''.''.'
    DeletableAttributeList:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/DeletableAttribute'
          - xml:
              name: Attribute
      xml:
        wrapped: false
    UpdateCondition:
      type: object
      properties:
        Name:
          $ref: '#/components/schemas/String'
          description: The name of the attribute involved in the condition.
        Value:
          $ref: '#/components/schemas/String'
          description: The value of an attribute. This value can only be specified when the <code>Exists</code> parameter is equal to <code>true</code>.
        Exists:
          $ref: '#/components/schemas/Boolean'
          description: A value specifying whether or not the specified attribute must exist with the specified value in order for the update condition to be satisfied. Specify <code>true</code> if the attribute must exist for the update condition to be satisfied. Specify <code>false</code> if the attribute should not exist in order for the update condition to be satisfied.
      description: ' Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn''t exist. '
    DeleteAttributesRequest:
      type: object
      required:
        - DomainName
        - ItemName
      title: DeleteAttributesRequest
      properties:
        DomainName:
          $ref: '#/components/schemas/String'
          description: The name of the domain in which to perform the operation.
        ItemName:
          $ref: '#/components/schemas/String'
          description: 'The name of the item. Similar to rows on a spreadsheet, items represent individual objects that contain one or more value-attribute pairs.'
        Attributes:
          $ref: '#/components/schemas/DeletableAttributeList'
          description: 'A list of Attributes. Similar to columns on a spreadsheet, attributes represent categories of data that can be assigned to items.'
        Expected:
          $ref: '#/components/schemas/UpdateCondition'
          description: 'The update condition which, if specified, determines whether the specified attributes will be deleted or not. The update condition must be satisfied in order for this request to be processed and the attributes to be deleted.'
    DeleteDomainRequest:
      type: object
      required:
        - DomainName
      title: DeleteDomainRequest
      properties:
        DomainName:
          $ref: '#/components/schemas/String'
          description: The name of the domain to delete.
    DomainMetadataRequest:
      type: object
      required:
        - DomainName
      title: DomainMetadataRequest
      properties:
        DomainName:
          $ref: '#/components/schemas/String'
          description: The name of the domain for which to display the metadata of.
    Integer:
      type: integer
    Long:
      type: integer
    DomainNameList:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/String'
          - xml:
              name: DomainName
      xml:
        wrapped: false
    GetAttributesRequest:
      type: object
      required:
        - DomainName
        - ItemName
      title: GetAttributesRequest
      properties:
        DomainName:
          $ref: '#/components/schemas/String'
          description: The name of the domain in which to perform the operation.
        ItemName:
          $ref: '#/components/schemas/String'
          description: The name of the item.
        AttributeNames:
          $ref: '#/components/schemas/AttributeNameList'
          description: The names of the attributes.
        ConsistentRead:
          $ref: '#/components/schemas/Boolean'
          description: 'Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If <code>true</code>, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read.'
    Item:
      type: object
      required:
        - Name
        - Attributes
      properties:
        Name:
          $ref: '#/components/schemas/String'
          description: The name of the item.
        AlternateNameEncoding:
          $ref: '#/components/schemas/String'
          description: ''
        Attributes:
          $ref: '#/components/schemas/AttributeList'
          description: A list of attributes.
      description: ''
    ItemList:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/Item'
          - xml:
              name: Item
      xml:
        wrapped: false
    ListDomainsRequest:
      type: object
      title: ListDomainsRequest
      properties:
        MaxNumberOfDomains:
          $ref: '#/components/schemas/Integer'
          description: The maximum number of domain names you want returned. The range is 1 to 100. The default setting is 100.
        NextToken:
          $ref: '#/components/schemas/String'
          description: A string informing Amazon SimpleDB where to start the next list of domain names.
    ReplaceableAttributeList:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/ReplaceableAttribute'
          - xml:
              name: Attribute
      xml:
        wrapped: false
    PutAttributesRequest:
      type: object
      required:
        - DomainName
        - ItemName
        - Attributes
      title: PutAttributesRequest
      properties:
        DomainName:
          $ref: '#/components/schemas/String'
          description: The name of the domain in which to perform the operation.
        ItemName:
          $ref: '#/components/schemas/String'
          description: The name of the item.
        Attributes:
          $ref: '#/components/schemas/ReplaceableAttributeList'
          description: The list of attributes.
        Expected:
          $ref: '#/components/schemas/UpdateCondition'
          description: 'The update condition which, if specified, determines whether the specified attributes will be updated or not. The update condition must be satisfied in order for this request to be processed and the attributes to be updated.'
    SelectRequest:
      type: object
      required:
        - SelectExpression
      title: SelectRequest
      properties:
        SelectExpression:
          $ref: '#/components/schemas/String'
          description: The expression used to query the domain.
        NextToken:
          $ref: '#/components/schemas/String'
          description: A string informing Amazon SimpleDB where to start the next list of <code>ItemNames</code>.
        ConsistentRead:
          $ref: '#/components/schemas/Boolean'
          description: 'Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If <code>true</code>, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read.'
security:
  - hmac: []

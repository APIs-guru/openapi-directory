openapi: 3.0.0
info:
  version: '2019-12-20'
  x-release: v4
  title: Redshift Data API Service
  description: '<p>You can use the Amazon Redshift Data API to run queries on Amazon Redshift tables. You can run SQL statements, which are committed if the statement succeeds. </p> <p>For more information about the Amazon Redshift Data API, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/data-api.html">Using the Amazon Redshift Data API</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: redshift-data
  x-aws-signingName: redshift-data
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/redshift-data-2019-12-20.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/redshift-data/'
servers:
  - url: 'http://redshift-data.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Redshift Data API Service multi-region endpoint
  - url: 'https://redshift-data.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Redshift Data API Service multi-region endpoint
  - url: 'http://redshift-data.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Redshift Data API Service endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://redshift-data.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Redshift Data API Service endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  /#X-Amz-Target=RedshiftData.BatchExecuteStatement:
    post:
      operationId: BatchExecuteStatement
      description: '<p>Runs one or more SQL statements, which can be data manipulation language (DML) or data definition language (DDL). Depending on the authorization method, use one of the following combinations of request parameters: </p> <ul> <li> <p>Secrets Manager - specify the Amazon Resource Name (ARN) of the secret, the database name, and the cluster identifier that matches the cluster in the secret. </p> </li> <li> <p>Temporary credentials - specify the cluster identifier, the database name, and the database user name. Permission to call the <code>redshift:GetClusterCredentials</code> operation is required to use this method. </p> </li> </ul>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchExecuteStatementOutput'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: ActiveStatementsExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActiveStatementsExceededException'
        '482':
          description: BatchExecuteStatementException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchExecuteStatementException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchExecuteStatementInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftData.BatchExecuteStatement
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftData.CancelStatement:
    post:
      operationId: CancelStatement
      description: 'Cancels a running query. To be canceled, a query must be running. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelStatementResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelStatementRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftData.CancelStatement
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftData.DescribeStatement:
    post:
      operationId: DescribeStatement
      description: 'Describes the details about a specific instance when a query was run by the Amazon Redshift Data API. The information includes when the query started, when it finished, the query status, the number of rows returned, and the SQL statement. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeStatementResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeStatementRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftData.DescribeStatement
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftData.DescribeTable:
    post:
      operationId: DescribeTable
      description: '<p>Describes the detailed information about a table from metadata in the cluster. The information includes its columns. A token is returned to page through the column list. Depending on the authorization method, use one of the following combinations of request parameters: </p> <ul> <li> <p>Secrets Manager - specify the Amazon Resource Name (ARN) of the secret, the database name, and the cluster identifier that matches the cluster in the secret. </p> </li> <li> <p>Temporary credentials - specify the cluster identifier, the database name, and the database user name. Permission to call the <code>redshift:GetClusterCredentials</code> operation is required to use this method. </p> </li> </ul>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeTableResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeTableRequest'
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftData.DescribeTable
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftData.ExecuteStatement:
    post:
      operationId: ExecuteStatement
      description: '<p>Runs an SQL statement, which can be data manipulation language (DML) or data definition language (DDL). This statement must be a single SQL statement. Depending on the authorization method, use one of the following combinations of request parameters: </p> <ul> <li> <p>Secrets Manager - specify the Amazon Resource Name (ARN) of the secret, the database name, and the cluster identifier that matches the cluster in the secret. </p> </li> <li> <p>Temporary credentials - specify the cluster identifier, the database name, and the database user name. Permission to call the <code>redshift:GetClusterCredentials</code> operation is required to use this method. </p> </li> </ul>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecuteStatementOutput'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: ExecuteStatementException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecuteStatementException'
        '482':
          description: ActiveStatementsExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActiveStatementsExceededException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteStatementInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftData.ExecuteStatement
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftData.GetStatementResult:
    post:
      operationId: GetStatementResult
      description: 'Fetches the temporarily cached result of an SQL statement. A token is returned to page through the statement results. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStatementResultResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetStatementResultRequest'
      parameters:
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftData.GetStatementResult
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftData.ListDatabases:
    post:
      operationId: ListDatabases
      description: '<p>List the databases in a cluster. A token is returned to page through the database list. Depending on the authorization method, use one of the following combinations of request parameters: </p> <ul> <li> <p>Secrets Manager - specify the Amazon Resource Name (ARN) of the secret, the database name, and the cluster identifier that matches the cluster in the secret. </p> </li> <li> <p>Temporary credentials - specify the cluster identifier, the database name, and the database user name. Permission to call the <code>redshift:GetClusterCredentials</code> operation is required to use this method. </p> </li> </ul>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDatabasesResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListDatabasesRequest'
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftData.ListDatabases
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftData.ListSchemas:
    post:
      operationId: ListSchemas
      description: '<p>Lists the schemas in a database. A token is returned to page through the schema list. Depending on the authorization method, use one of the following combinations of request parameters: </p> <ul> <li> <p>Secrets Manager - specify the Amazon Resource Name (ARN) of the secret, the database name, and the cluster identifier that matches the cluster in the secret. </p> </li> <li> <p>Temporary credentials - specify the cluster identifier, the database name, and the database user name. Permission to call the <code>redshift:GetClusterCredentials</code> operation is required to use this method. </p> </li> </ul>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSchemasResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListSchemasRequest'
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftData.ListSchemas
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftData.ListStatements:
    post:
      operationId: ListStatements
      description: 'List of SQL statements. By default, only finished statements are shown. A token is returned to page through the statement list. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListStatementsResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListStatementsRequest'
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftData.ListStatements
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftData.ListTables:
    post:
      operationId: ListTables
      description: '<p>List the tables in a database. If neither <code>SchemaPattern</code> nor <code>TablePattern</code> are specified, then all tables in the database are returned. A token is returned to page through the table list. Depending on the authorization method, use one of the following combinations of request parameters: </p> <ul> <li> <p>Secrets Manager - specify the Amazon Resource Name (ARN) of the secret, the database name, and the cluster identifier that matches the cluster in the secret. </p> </li> <li> <p>Temporary credentials - specify the cluster identifier, the database name, and the database user name. Permission to call the <code>redshift:GetClusterCredentials</code> operation is required to use this method. </p> </li> </ul>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTablesResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTablesRequest'
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftData.ListTables
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    BatchExecuteStatementOutput:
      type: object
      properties:
        ClusterIdentifier:
          $ref: '#/components/schemas/Location'
          description: 'The cluster identifier. '
        CreatedAt:
          $ref: '#/components/schemas/Timestamp'
          description: 'The date and time (UTC) the statement was created. '
        Database:
          $ref: '#/components/schemas/String'
          description: The name of the database.
        DbUser:
          $ref: '#/components/schemas/String'
          description: The database user name.
        Id:
          $ref: '#/components/schemas/StatementId'
          description: 'The identifier of the SQL statement whose results are to be fetched. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. This identifier is returned by <code>BatchExecuteStatment</code>. '
        SecretArn:
          $ref: '#/components/schemas/SecretArn'
          description: 'The name or ARN of the secret that enables access to the database. '
    BatchExecuteStatementInput:
      type: object
      required:
        - ClusterIdentifier
        - Database
        - Sqls
      title: BatchExecuteStatementInput
      properties:
        ClusterIdentifier:
          $ref: '#/components/schemas/Location'
          description: 'The cluster identifier. This parameter is required when authenticating using either Secrets Manager or temporary credentials. '
        Database:
          $ref: '#/components/schemas/String'
          description: 'The name of the database. This parameter is required when authenticating using either Secrets Manager or temporary credentials. '
        DbUser:
          $ref: '#/components/schemas/String'
          description: 'The database user name. This parameter is required when authenticating using temporary credentials. '
        SecretArn:
          $ref: '#/components/schemas/SecretArn'
          description: 'The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. '
        Sqls:
          $ref: '#/components/schemas/SqlList'
          description: 'One or more SQL statements to run. '
        StatementName:
          $ref: '#/components/schemas/StatementNameString'
          description: 'The name of the SQL statements. You can name the SQL statements when you create them to identify the query. '
        WithEvent:
          $ref: '#/components/schemas/Boolean'
          description: 'A value that indicates whether to send an event to the Amazon EventBridge event bus after the SQL statements run. '
    ValidationException: {}
    ActiveStatementsExceededException: {}
    BatchExecuteStatementException: {}
    CancelStatementResponse:
      type: object
      properties:
        Status:
          $ref: '#/components/schemas/Boolean'
          description: 'A value that indicates whether the cancel statement succeeded (true). '
    CancelStatementRequest:
      type: object
      required:
        - Id
      title: CancelStatementRequest
      properties:
        Id:
          $ref: '#/components/schemas/StatementId'
          description: 'The identifier of the SQL statement to cancel. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. This identifier is returned by <code>BatchExecuteStatment</code>, <code>ExecuteStatment</code>, and <code>ListStatements</code>. '
    ResourceNotFoundException: {}
    InternalServerException: {}
    DescribeStatementResponse:
      type: object
      required:
        - Id
      properties:
        ClusterIdentifier:
          $ref: '#/components/schemas/String'
          description: 'The cluster identifier. '
        CreatedAt:
          $ref: '#/components/schemas/Timestamp'
          description: 'The date and time (UTC) when the SQL statement was submitted to run. '
        Database:
          $ref: '#/components/schemas/String'
          description: 'The name of the database. '
        DbUser:
          $ref: '#/components/schemas/String'
          description: 'The database user name. '
        Duration:
          $ref: '#/components/schemas/Long'
          description: 'The amount of time in nanoseconds that the statement ran. '
        Error:
          $ref: '#/components/schemas/String'
          description: 'The error message from the cluster if the SQL statement encountered an error while running. '
        HasResultSet:
          $ref: '#/components/schemas/Boolean'
          description: 'A value that indicates whether the statement has a result set. The result set can be empty. '
        Id:
          $ref: '#/components/schemas/StatementId'
          description: 'The identifier of the SQL statement described. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. '
        QueryParameters:
          $ref: '#/components/schemas/SqlParametersList'
          description: The parameters for the SQL statement.
        QueryString:
          $ref: '#/components/schemas/StatementString'
          description: 'The SQL statement text. '
        RedshiftPid:
          $ref: '#/components/schemas/Long'
          description: 'The process identifier from Amazon Redshift. '
        RedshiftQueryId:
          $ref: '#/components/schemas/Long'
          description: 'The identifier of the query generated by Amazon Redshift. These identifiers are also available in the <code>query</code> column of the <code>STL_QUERY</code> system view. '
        ResultRows:
          $ref: '#/components/schemas/Long'
          description: 'Either the number of rows returned from the SQL statement or the number of rows affected. If result size is greater than zero, the result rows can be the number of rows affected by SQL statements such as INSERT, UPDATE, DELETE, COPY, and others. A <code>-1</code> indicates the value is null.'
        ResultSize:
          $ref: '#/components/schemas/Long'
          description: The size in bytes of the returned results. A <code>-1</code> indicates the value is null.
        SecretArn:
          $ref: '#/components/schemas/SecretArn'
          description: 'The name or Amazon Resource Name (ARN) of the secret that enables access to the database. '
        Status:
          $ref: '#/components/schemas/StatusString'
          description: '<p>The status of the SQL statement being described. Status values are defined as follows: </p> <ul> <li> <p>ABORTED - The query run was stopped by the user. </p> </li> <li> <p>ALL - A status value that includes all query statuses. This value can be used to filter results. </p> </li> <li> <p>FAILED - The query run failed. </p> </li> <li> <p>FINISHED - The query has finished running. </p> </li> <li> <p>PICKED - The query has been chosen to be run. </p> </li> <li> <p>STARTED - The query run has started. </p> </li> <li> <p>SUBMITTED - The query was submitted, but not yet processed. </p> </li> </ul>'
        SubStatements:
          $ref: '#/components/schemas/SubStatementList'
          description: The SQL statements from a multiple statement run.
        UpdatedAt:
          $ref: '#/components/schemas/Timestamp'
          description: 'The date and time (UTC) that the metadata for the SQL statement was last updated. An example is the time the status last changed. '
    DescribeStatementRequest:
      type: object
      required:
        - Id
      title: DescribeStatementRequest
      properties:
        Id:
          $ref: '#/components/schemas/StatementId'
          description: 'The identifier of the SQL statement to describe. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. A suffix indicates the number of the SQL statement. For example, <code>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</code> has a suffix of <code>:2</code> that indicates the second SQL statement of a batch query. This identifier is returned by <code>BatchExecuteStatment</code>, <code>ExecuteStatement</code>, and <code>ListStatements</code>. '
    DescribeTableResponse:
      type: object
      properties:
        ColumnList:
          $ref: '#/components/schemas/ColumnList'
          description: 'A list of columns in the table. '
        NextToken:
          $ref: '#/components/schemas/String'
          description: 'A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. '
        TableName:
          $ref: '#/components/schemas/String'
          description: 'The table name. '
    DescribeTableRequest:
      type: object
      required:
        - ClusterIdentifier
        - Database
      title: DescribeTableRequest
      properties:
        ClusterIdentifier:
          $ref: '#/components/schemas/Location'
          description: 'The cluster identifier. This parameter is required when authenticating using either Secrets Manager or temporary credentials. '
        ConnectedDatabase:
          $ref: '#/components/schemas/String'
          description: 'A database name. The connected database is specified when you connect with your authentication credentials. '
        Database:
          $ref: '#/components/schemas/String'
          description: 'The name of the database that contains the tables to be described. If <code>ConnectedDatabase</code> is not specified, this is also the database to connect to with your authentication credentials.'
        DbUser:
          $ref: '#/components/schemas/String'
          description: 'The database user name. This parameter is required when authenticating using temporary credentials. '
        MaxResults:
          $ref: '#/components/schemas/PageSize'
          description: 'The maximum number of tables to return in the response. If more tables exist than fit in one response, then <code>NextToken</code> is returned to page through the results. '
        NextToken:
          $ref: '#/components/schemas/String'
          description: 'A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. '
        Schema:
          $ref: '#/components/schemas/String'
          description: 'The schema that contains the table. If no schema is specified, then matching tables for all schemas are returned. '
        SecretArn:
          $ref: '#/components/schemas/SecretArn'
          description: 'The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. '
        Table:
          $ref: '#/components/schemas/String'
          description: 'The table name. If no table is specified, then all tables for all matching schemas are returned. If no table and no schema is specified, then all tables for all schemas in the database are returned'
    ExecuteStatementOutput:
      type: object
      properties:
        ClusterIdentifier:
          $ref: '#/components/schemas/Location'
          description: 'The cluster identifier. '
        CreatedAt:
          $ref: '#/components/schemas/Timestamp'
          description: 'The date and time (UTC) the statement was created. '
        Database:
          $ref: '#/components/schemas/String'
          description: The name of the database.
        DbUser:
          $ref: '#/components/schemas/String'
          description: The database user name.
        Id:
          $ref: '#/components/schemas/StatementId'
          description: 'The identifier of the SQL statement whose results are to be fetched. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. '
        SecretArn:
          $ref: '#/components/schemas/SecretArn'
          description: 'The name or ARN of the secret that enables access to the database. '
    ExecuteStatementInput:
      type: object
      required:
        - ClusterIdentifier
        - Database
        - Sql
      title: ExecuteStatementInput
      properties:
        ClusterIdentifier:
          $ref: '#/components/schemas/Location'
          description: 'The cluster identifier. This parameter is required when authenticating using either Secrets Manager or temporary credentials. '
        Database:
          $ref: '#/components/schemas/String'
          description: 'The name of the database. This parameter is required when authenticating using either Secrets Manager or temporary credentials. '
        DbUser:
          $ref: '#/components/schemas/String'
          description: 'The database user name. This parameter is required when authenticating using temporary credentials. '
        Parameters:
          $ref: '#/components/schemas/SqlParametersList'
          description: The parameters for the SQL statement.
        SecretArn:
          $ref: '#/components/schemas/SecretArn'
          description: 'The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. '
        Sql:
          $ref: '#/components/schemas/StatementString'
          description: 'The SQL statement text to run. '
        StatementName:
          $ref: '#/components/schemas/StatementNameString'
          description: 'The name of the SQL statement. You can name the SQL statement when you create it to identify the query. '
        WithEvent:
          $ref: '#/components/schemas/Boolean'
          description: 'A value that indicates whether to send an event to the Amazon EventBridge event bus after the SQL statement runs. '
    ExecuteStatementException: {}
    GetStatementResultResponse:
      type: object
      required:
        - Records
      properties:
        ColumnMetadata:
          $ref: '#/components/schemas/ColumnMetadataList'
          description: 'The properties (metadata) of a column. '
        NextToken:
          $ref: '#/components/schemas/String'
          description: 'A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. '
        Records:
          $ref: '#/components/schemas/SqlRecords'
          description: The results of the SQL statement.
        TotalNumRows:
          $ref: '#/components/schemas/Long'
          description: 'The total number of rows in the result set returned from a query. You can use this number to estimate the number of calls to the <code>GetStatementResult</code> operation needed to page through the results. '
    GetStatementResultRequest:
      type: object
      required:
        - Id
      title: GetStatementResultRequest
      properties:
        Id:
          $ref: '#/components/schemas/StatementId'
          description: 'The identifier of the SQL statement whose results are to be fetched. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. A suffix indicates then number of the SQL statement. For example, <code>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</code> has a suffix of <code>:2</code> that indicates the second SQL statement of a batch query. This identifier is returned by <code>BatchExecuteStatment</code>, <code>ExecuteStatment</code>, and <code>ListStatements</code>. '
        NextToken:
          $ref: '#/components/schemas/String'
          description: 'A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. '
    ListDatabasesResponse:
      type: object
      properties:
        Databases:
          $ref: '#/components/schemas/DatabaseList'
          description: 'The names of databases. '
        NextToken:
          $ref: '#/components/schemas/String'
          description: 'A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. '
    ListDatabasesRequest:
      type: object
      required:
        - ClusterIdentifier
        - Database
      title: ListDatabasesRequest
      properties:
        ClusterIdentifier:
          $ref: '#/components/schemas/Location'
          description: 'The cluster identifier. This parameter is required when authenticating using either Secrets Manager or temporary credentials. '
        Database:
          $ref: '#/components/schemas/String'
          description: 'The name of the database. This parameter is required when authenticating using either Secrets Manager or temporary credentials. '
        DbUser:
          $ref: '#/components/schemas/String'
          description: 'The database user name. This parameter is required when authenticating using temporary credentials. '
        MaxResults:
          $ref: '#/components/schemas/PageSize'
          description: 'The maximum number of databases to return in the response. If more databases exist than fit in one response, then <code>NextToken</code> is returned to page through the results. '
        NextToken:
          $ref: '#/components/schemas/String'
          description: 'A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. '
        SecretArn:
          $ref: '#/components/schemas/SecretArn'
          description: 'The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. '
    ListSchemasResponse:
      type: object
      properties:
        NextToken:
          $ref: '#/components/schemas/String'
          description: 'A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. '
        Schemas:
          $ref: '#/components/schemas/SchemaList'
          description: 'The schemas that match the request pattern. '
    ListSchemasRequest:
      type: object
      required:
        - ClusterIdentifier
        - Database
      title: ListSchemasRequest
      properties:
        ClusterIdentifier:
          $ref: '#/components/schemas/Location'
          description: 'The cluster identifier. This parameter is required when authenticating using either Secrets Manager or temporary credentials. '
        ConnectedDatabase:
          $ref: '#/components/schemas/String'
          description: 'A database name. The connected database is specified when you connect with your authentication credentials. '
        Database:
          $ref: '#/components/schemas/String'
          description: 'The name of the database that contains the schemas to list. If <code>ConnectedDatabase</code> is not specified, this is also the database to connect to with your authentication credentials.'
        DbUser:
          $ref: '#/components/schemas/String'
          description: 'The database user name. This parameter is required when authenticating using temporary credentials. '
        MaxResults:
          $ref: '#/components/schemas/PageSize'
          description: 'The maximum number of schemas to return in the response. If more schemas exist than fit in one response, then <code>NextToken</code> is returned to page through the results. '
        NextToken:
          $ref: '#/components/schemas/String'
          description: 'A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. '
        SchemaPattern:
          $ref: '#/components/schemas/String'
          description: 'A pattern to filter results by schema name. Within a schema pattern, "%" means match any substring of 0 or more characters and "_" means match any one character. Only schema name entries matching the search pattern are returned. '
        SecretArn:
          $ref: '#/components/schemas/SecretArn'
          description: 'The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. '
    ListStatementsResponse:
      type: object
      required:
        - Statements
      properties:
        NextToken:
          $ref: '#/components/schemas/String'
          description: 'A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. '
        Statements:
          $ref: '#/components/schemas/StatementList'
          description: 'The SQL statements. '
    ListStatementsRequest:
      type: object
      title: ListStatementsRequest
      properties:
        MaxResults:
          $ref: '#/components/schemas/ListStatementsLimit'
          description: 'The maximum number of SQL statements to return in the response. If more SQL statements exist than fit in one response, then <code>NextToken</code> is returned to page through the results. '
        NextToken:
          $ref: '#/components/schemas/String'
          description: 'A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. '
        RoleLevel:
          $ref: '#/components/schemas/Boolean'
          description: 'A value that filters which statements to return in the response. If true, all statements run by the caller''s IAM role are returned. If false, only statements run by the caller''s IAM role in the current IAM session are returned. The default is true. '
        StatementName:
          $ref: '#/components/schemas/StatementNameString'
          description: 'The name of the SQL statement specified as input to <code>BatchExecuteStatement</code> or <code>ExecuteStatement</code> to identify the query. You can list multiple statements by providing a prefix that matches the beginning of the statement name. For example, to list myStatement1, myStatement2, myStatement3, and so on, then provide the a value of <code>myStatement</code>. Data API does a case-sensitive match of SQL statement names to the prefix value you provide. '
        Status:
          $ref: '#/components/schemas/StatusString'
          description: '<p>The status of the SQL statement to list. Status values are defined as follows: </p> <ul> <li> <p>ABORTED - The query run was stopped by the user. </p> </li> <li> <p>ALL - A status value that includes all query statuses. This value can be used to filter results. </p> </li> <li> <p>FAILED - The query run failed. </p> </li> <li> <p>FINISHED - The query has finished running. </p> </li> <li> <p>PICKED - The query has been chosen to be run. </p> </li> <li> <p>STARTED - The query run has started. </p> </li> <li> <p>SUBMITTED - The query was submitted, but not yet processed. </p> </li> </ul>'
    ListTablesResponse:
      type: object
      properties:
        NextToken:
          $ref: '#/components/schemas/String'
          description: 'A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. '
        Tables:
          $ref: '#/components/schemas/TableList'
          description: 'The tables that match the request pattern. '
    ListTablesRequest:
      type: object
      required:
        - ClusterIdentifier
        - Database
      title: ListTablesRequest
      properties:
        ClusterIdentifier:
          $ref: '#/components/schemas/Location'
          description: 'The cluster identifier. This parameter is required when authenticating using either Secrets Manager or temporary credentials. '
        ConnectedDatabase:
          $ref: '#/components/schemas/String'
          description: 'A database name. The connected database is specified when you connect with your authentication credentials. '
        Database:
          $ref: '#/components/schemas/String'
          description: 'The name of the database that contains the tables to list. If <code>ConnectedDatabase</code> is not specified, this is also the database to connect to with your authentication credentials.'
        DbUser:
          $ref: '#/components/schemas/String'
          description: 'The database user name. This parameter is required when authenticating using temporary credentials. '
        MaxResults:
          $ref: '#/components/schemas/PageSize'
          description: 'The maximum number of tables to return in the response. If more tables exist than fit in one response, then <code>NextToken</code> is returned to page through the results. '
        NextToken:
          $ref: '#/components/schemas/String'
          description: 'A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. '
        SchemaPattern:
          $ref: '#/components/schemas/String'
          description: 'A pattern to filter results by schema name. Within a schema pattern, "%" means match any substring of 0 or more characters and "_" means match any one character. Only schema name entries matching the search pattern are returned. If <code>SchemaPattern</code> is not specified, then all tables that match <code>TablePattern</code> are returned. If neither <code>SchemaPattern</code> or <code>TablePattern</code> are specified, then all tables are returned. '
        SecretArn:
          $ref: '#/components/schemas/SecretArn'
          description: 'The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. '
        TablePattern:
          $ref: '#/components/schemas/String'
          description: 'A pattern to filter results by table name. Within a table pattern, "%" means match any substring of 0 or more characters and "_" means match any one character. Only table name entries matching the search pattern are returned. If <code>TablePattern</code> is not specified, then all tables that match <code>SchemaPattern</code>are returned. If neither <code>SchemaPattern</code> or <code>TablePattern</code> are specified, then all tables are returned. '
    Location:
      type: string
    String:
      type: string
    SecretArn:
      type: string
    SqlList:
      type: array
      items:
        $ref: '#/components/schemas/StatementString'
      minItems: 1
      maxItems: 40
    StatementNameString:
      type: string
      minLength: 0
      maxLength: 500
    Boolean:
      type: boolean
    Timestamp:
      type: string
      format: date-time
    StatementId:
      type: string
      pattern: '^[a-z0-9]{8}(-[a-z0-9]{4}){3}-[a-z0-9]{12}(:\d+)?$'
    Blob:
      type: string
    BoxedBoolean:
      type: boolean
    BoxedDouble:
      type: number
      format: double
    BoxedLong:
      type: integer
    ColumnMetadata:
      type: object
      properties:
        columnDefault:
          $ref: '#/components/schemas/String'
          description: 'The default value of the column. '
        isCaseSensitive:
          $ref: '#/components/schemas/bool'
          description: 'A value that indicates whether the column is case-sensitive. '
        isCurrency:
          $ref: '#/components/schemas/bool'
          description: A value that indicates whether the column contains currency values.
        isSigned:
          $ref: '#/components/schemas/bool'
          description: A value that indicates whether an integer column is signed.
        label:
          $ref: '#/components/schemas/String'
          description: 'The label for the column. '
        length:
          $ref: '#/components/schemas/Integer'
          description: The length of the column.
        name:
          $ref: '#/components/schemas/String'
          description: 'The name of the column. '
        nullable:
          $ref: '#/components/schemas/Integer'
          description: 'A value that indicates whether the column is nullable. '
        precision:
          $ref: '#/components/schemas/Integer'
          description: 'The precision value of a decimal number column. '
        scale:
          $ref: '#/components/schemas/Integer'
          description: 'The scale value of a decimal number column. '
        schemaName:
          $ref: '#/components/schemas/String'
          description: The name of the schema that contains the table that includes the column.
        tableName:
          $ref: '#/components/schemas/String'
          description: 'The name of the table that includes the column. '
        typeName:
          $ref: '#/components/schemas/String'
          description: 'The database-specific data type of the column. '
      description: 'The properties (metadata) of a column. '
    ColumnList:
      type: array
      items:
        $ref: '#/components/schemas/ColumnMetadata'
    bool:
      type: boolean
    Integer:
      type: integer
    ColumnMetadataList:
      type: array
      items:
        $ref: '#/components/schemas/ColumnMetadata'
    DatabaseList:
      type: array
      items:
        $ref: '#/components/schemas/String'
    Long:
      type: integer
    SqlParametersList:
      type: array
      items:
        $ref: '#/components/schemas/SqlParameter'
      minItems: 1
    StatementString:
      type: string
    StatusString:
      type: string
      enum:
        - SUBMITTED
        - PICKED
        - STARTED
        - FINISHED
        - ABORTED
        - FAILED
        - ALL
    SubStatementList:
      type: array
      items:
        $ref: '#/components/schemas/SubStatementData'
    PageSize:
      type: integer
      minimum: 0
      maximum: 1000
    Field:
      type: object
      properties:
        blobValue:
          $ref: '#/components/schemas/Blob'
          description: 'A value of the BLOB data type. '
        booleanValue:
          $ref: '#/components/schemas/BoxedBoolean'
          description: 'A value of the Boolean data type. '
        doubleValue:
          $ref: '#/components/schemas/BoxedDouble'
          description: 'A value of the double data type. '
        isNull:
          $ref: '#/components/schemas/BoxedBoolean'
          description: 'A value that indicates whether the data is NULL. '
        longValue:
          $ref: '#/components/schemas/BoxedLong'
          description: 'A value of the long data type. '
        stringValue:
          $ref: '#/components/schemas/String'
          description: 'A value of the string data type. '
      description: 'A data value in a column. '
    FieldList:
      type: array
      items:
        $ref: '#/components/schemas/Field'
    SqlRecords:
      type: array
      items:
        $ref: '#/components/schemas/FieldList'
    SchemaList:
      type: array
      items:
        $ref: '#/components/schemas/String'
    ListStatementsLimit:
      type: integer
      minimum: 0
      maximum: 100
    StatementList:
      type: array
      items:
        $ref: '#/components/schemas/StatementData'
    TableList:
      type: array
      items:
        $ref: '#/components/schemas/TableMember'
    ParameterName:
      type: string
      pattern: '^[0-9a-zA-Z_]+$'
    ParameterValue:
      type: string
      minLength: 1
    SqlParameter:
      type: object
      required:
        - name
        - value
      properties:
        name:
          $ref: '#/components/schemas/ParameterName'
          description: The name of the parameter.
        value:
          $ref: '#/components/schemas/ParameterValue'
          description: 'The value of the parameter. Amazon Redshift implicitly converts to the proper data type. For more inforation, see <a href="https://docs.aws.amazon.com/redshift/latest/dg/c_Supported_data_types.html">Data types</a> in the <i>Amazon Redshift Database Developer Guide</i>. '
      description: A parameter used in a SQL statement.
    StatementStringList:
      type: array
      items:
        $ref: '#/components/schemas/StatementString'
    StatementData:
      type: object
      required:
        - Id
      properties:
        CreatedAt:
          $ref: '#/components/schemas/Timestamp'
          description: 'The date and time (UTC) the statement was created. '
        Id:
          $ref: '#/components/schemas/StatementId'
          description: 'The SQL statement identifier. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. '
        IsBatchStatement:
          $ref: '#/components/schemas/Boolean'
          description: A value that indicates whether the statement is a batch query request.
        QueryParameters:
          $ref: '#/components/schemas/SqlParametersList'
          description: The parameters used in a SQL statement.
        QueryString:
          $ref: '#/components/schemas/StatementString'
          description: The SQL statement.
        QueryStrings:
          $ref: '#/components/schemas/StatementStringList'
          description: One or more SQL statements. Each query string in the array corresponds to one of the queries in a batch query request.
        SecretArn:
          $ref: '#/components/schemas/SecretArn'
          description: 'The name or Amazon Resource Name (ARN) of the secret that enables access to the database. '
        StatementName:
          $ref: '#/components/schemas/StatementNameString'
          description: 'The name of the SQL statement. '
        Status:
          $ref: '#/components/schemas/StatusString'
          description: 'The status of the SQL statement. An example is the that the SQL statement finished. '
        UpdatedAt:
          $ref: '#/components/schemas/Timestamp'
          description: The date and time (UTC) that the statement metadata was last updated.
      description: The SQL statement to run.
    StatementStatusString:
      type: string
      enum:
        - SUBMITTED
        - PICKED
        - STARTED
        - FINISHED
        - ABORTED
        - FAILED
    SubStatementData:
      type: object
      required:
        - Id
      properties:
        CreatedAt:
          $ref: '#/components/schemas/Timestamp'
          description: 'The date and time (UTC) the statement was created. '
        Duration:
          $ref: '#/components/schemas/Long'
          description: The amount of time in nanoseconds that the statement ran.
        Error:
          $ref: '#/components/schemas/String'
          description: The error message from the cluster if the SQL statement encountered an error while running.
        HasResultSet:
          $ref: '#/components/schemas/Boolean'
          description: A value that indicates whether the statement has a result set. The result set can be empty.
        Id:
          $ref: '#/components/schemas/StatementId'
          description: 'The identifier of the SQL statement. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. A suffix indicates the number of the SQL statement. For example, <code>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</code> has a suffix of <code>:2</code> that indicates the second SQL statement of a batch query.'
        QueryString:
          $ref: '#/components/schemas/StatementString'
          description: The SQL statement text.
        RedshiftQueryId:
          $ref: '#/components/schemas/Long'
          description: 'The SQL statement identifier. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. '
        ResultRows:
          $ref: '#/components/schemas/Long'
          description: 'Either the number of rows returned from the SQL statement or the number of rows affected. If result size is greater than zero, the result rows can be the number of rows affected by SQL statements such as INSERT, UPDATE, DELETE, COPY, and others. A <code>-1</code> indicates the value is null.'
        ResultSize:
          $ref: '#/components/schemas/Long'
          description: The size in bytes of the returned results. A <code>-1</code> indicates the value is null.
        Status:
          $ref: '#/components/schemas/StatementStatusString'
          description: 'The status of the SQL statement. An example is the that the SQL statement finished. '
        UpdatedAt:
          $ref: '#/components/schemas/Timestamp'
          description: The date and time (UTC) that the statement metadata was last updated.
      description: Information about an SQL statement.
    TableMember:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/String'
          description: 'The name of the table. '
        schema:
          $ref: '#/components/schemas/String'
          description: 'The schema containing the table. '
        type:
          $ref: '#/components/schemas/String'
          description: 'The type of the table. Possible values include TABLE, VIEW, SYSTEM TABLE, GLOBAL TEMPORARY, LOCAL TEMPORARY, ALIAS, and SYNONYM. '
      description: 'The properties of a table. '
security:
  - hmac: []

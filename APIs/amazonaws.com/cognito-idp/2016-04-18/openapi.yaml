openapi: 3.0.0
info:
  version: '2016-04-18'
  x-release: v4
  title: Amazon Cognito Identity Provider
  description: '<p>Using the Amazon Cognito User Pools API, you can create a user pool to manage directories and users. You can authenticate a user to obtain tokens related to user identity and access policies.</p> <p>This API reference provides information about user pools in Amazon Cognito User Pools.</p> <p>For more information, see the <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/what-is-amazon-cognito.html">Amazon Cognito Documentation</a>.</p>'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: cognito-idp
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/cognito-idp-2016-04-18.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/cognito-idp/'
servers:
  - url: 'http://cognito-idp.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Amazon Cognito Identity Provider multi-region endpoint
  - url: 'https://cognito-idp.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Amazon Cognito Identity Provider multi-region endpoint
  - url: 'http://cognito-idp.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon Cognito Identity Provider endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://cognito-idp.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon Cognito Identity Provider endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AddCustomAttributes:
    post:
      operationId: AddCustomAttributes
      description: Adds additional user attributes to the user pool schema.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCustomAttributesResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserImportInProgressException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserImportInProgressException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCustomAttributesRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AddCustomAttributes
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminAddUserToGroup:
    post:
      operationId: AdminAddUserToGroup
      description: <p>Adds the specified user to the specified group.</p> <p>Calling this action requires developer credentials.</p>
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminAddUserToGroupRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminAddUserToGroup
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminConfirmSignUp:
    post:
      operationId: AdminConfirmSignUp
      description: <p>Confirms user registration as an admin without using a confirmation code. Works on any user.</p> <p>Calling this action requires developer credentials.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminConfirmSignUpResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '483':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '484':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '485':
          description: TooManyFailedAttemptsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyFailedAttemptsException'
        '486':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '487':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '488':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '489':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '490':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminConfirmSignUpRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminConfirmSignUp
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminCreateUser:
    post:
      operationId: AdminCreateUser
      description: '<p>Creates a new user in the specified user pool.</p> <p>If <code>MessageAction</code> is not set, the default is to send a welcome message via email or phone (SMS).</p> <note> <p>This action might generate an SMS text message. Starting June 1, 2021, U.S. telecom carriers require that you register an origination phone number before you can send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>. Cognito will use the the registered number automatically. Otherwise, Cognito users that must receive SMS messages might be unable to sign up, activate their accounts, or sign in.</p> <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In <i> <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox mode</a> </i>, you’ll have limitations, such as sending messages to only verified phone numbers. After testing in the sandbox environment, you can move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools</a> in the <i>Amazon Cognito Developer Guide</i>. </p> </note> <p>This message is based on a template that you configured in your call to create or update a user pool. This template includes your custom sign-up instructions and placeholders for user name and temporary password.</p> <p>Alternatively, you can call <code>AdminCreateUser</code> with “SUPPRESS” for the <code>MessageAction</code> parameter, and Amazon Cognito will not send any email. </p> <p>In either case, the user will be in the <code>FORCE_CHANGE_PASSWORD</code> state until they sign in and change their password.</p> <p> <code>AdminCreateUser</code> requires developer credentials.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminCreateUserResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '483':
          description: UsernameExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameExistsException'
        '484':
          description: InvalidPasswordException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPasswordException'
        '485':
          description: CodeDeliveryFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeDeliveryFailureException'
        '486':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '487':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '488':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '489':
          description: PreconditionNotMetException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionNotMetException'
        '490':
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleAccessPolicyException'
        '491':
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleTrustRelationshipException'
        '492':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '493':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '494':
          description: UnsupportedUserStateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedUserStateException'
        '495':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminCreateUserRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminCreateUser
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminDeleteUser:
    post:
      operationId: AdminDeleteUser
      description: <p>Deletes a user as an administrator. Works on any user.</p> <p>Calling this action requires developer credentials.</p>
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminDeleteUserRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminDeleteUser
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminDeleteUserAttributes:
    post:
      operationId: AdminDeleteUserAttributes
      description: <p>Deletes the user attributes in a user pool as an administrator. Works on any user.</p> <p>Calling this action requires developer credentials.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminDeleteUserAttributesResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminDeleteUserAttributesRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminDeleteUserAttributes
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminDisableProviderForUser:
    post:
      operationId: AdminDisableProviderForUser
      description: '<p>Disables the user from signing in with the specified external (SAML or social) identity provider. If the user to disable is a Cognito User Pools native username + password user, they are not permitted to use their password to sign-in. If the user to disable is a linked external IdP user, any link between that user and an existing user is removed. The next time the external user (no longer attached to the previously linked <code>DestinationUser</code>) signs in, they must create a new user account. See <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminLinkProviderForUser.html">AdminLinkProviderForUser</a>.</p> <p>This action is enabled only for admin access and requires developer credentials.</p> <p>The <code>ProviderName</code> must match the value specified when creating an IdP for the pool. </p> <p>To disable a native username + password user, the <code>ProviderName</code> value must be <code>Cognito</code> and the <code>ProviderAttributeName</code> must be <code>Cognito_Subject</code>, with the <code>ProviderAttributeValue</code> being the name that is used in the user pool for the user.</p> <p>The <code>ProviderAttributeName</code> must always be <code>Cognito_Subject</code> for social identity providers. The <code>ProviderAttributeValue</code> must always be the exact subject that was used when the user was originally linked as a source user.</p> <p>For de-linking a SAML identity, there are two scenarios. If the linked identity has not yet been used to sign-in, the <code>ProviderAttributeName</code> and <code>ProviderAttributeValue</code> must be the same values that were used for the <code>SourceUser</code> when the identities were originally linked using <code> AdminLinkProviderForUser</code> call. (If the linking was done with <code>ProviderAttributeName</code> set to <code>Cognito_Subject</code>, the same applies here). However, if the user has already signed in, the <code>ProviderAttributeName</code> must be <code>Cognito_Subject</code> and <code>ProviderAttributeValue</code> must be the subject of the SAML assertion.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminDisableProviderForUserResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '485':
          description: AliasExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasExistsException'
        '486':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminDisableProviderForUserRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminDisableProviderForUser
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminDisableUser:
    post:
      operationId: AdminDisableUser
      description: <p>Disables the specified user.</p> <p>Calling this action requires developer credentials.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminDisableUserResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminDisableUserRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminDisableUser
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminEnableUser:
    post:
      operationId: AdminEnableUser
      description: <p>Enables the specified user as an administrator. Works on any user.</p> <p>Calling this action requires developer credentials.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminEnableUserResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminEnableUserRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminEnableUser
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminForgetDevice:
    post:
      operationId: AdminForgetDevice
      description: '<p>Forgets the device, as an administrator.</p> <p>Calling this action requires developer credentials.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUserPoolConfigurationException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '485':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '486':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminForgetDeviceRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminForgetDevice
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminGetDevice:
    post:
      operationId: AdminGetDevice
      description: '<p>Gets the device, as an administrator.</p> <p>Calling this action requires developer credentials.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminGetDeviceResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUserPoolConfigurationException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '485':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminGetDeviceRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminGetDevice
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminGetUser:
    post:
      operationId: AdminGetUser
      description: <p>Gets the specified user by user name in a user pool as an administrator. Works on any user.</p> <p>Calling this action requires developer credentials.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminGetUserResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminGetUserRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminGetUser
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminInitiateAuth:
    post:
      operationId: AdminInitiateAuth
      description: '<p>Initiates the authentication flow, as an administrator.</p> <note> <p>This action might generate an SMS text message. Starting June 1, 2021, U.S. telecom carriers require that you register an origination phone number before you can send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>. Cognito will use the the registered number automatically. Otherwise, Cognito users that must receive SMS messages might be unable to sign up, activate their accounts, or sign in.</p> <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In <i> <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox mode</a> </i>, you’ll have limitations, such as sending messages to only verified phone numbers. After testing in the sandbox environment, you can move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools</a> in the <i>Amazon Cognito Developer Guide</i>. </p> </note> <p>Calling this action requires developer credentials.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminInitiateAuthResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '485':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '486':
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUserPoolConfigurationException'
        '487':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '488':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '489':
          description: MFAMethodNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MFAMethodNotFoundException'
        '490':
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleAccessPolicyException'
        '491':
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleTrustRelationshipException'
        '492':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '493':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '494':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminInitiateAuthRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminInitiateAuth
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminLinkProviderForUser:
    post:
      operationId: AdminLinkProviderForUser
      description: '<p>Links an existing user account in a user pool (<code>DestinationUser</code>) to an identity from an external identity provider (<code>SourceUser</code>) based on a specified attribute name and value from the external identity provider. This allows you to create a link from the existing user account to an external federated user identity that has not yet been used to sign in, so that the federated user identity can be used to sign in as the existing user account. </p> <p> For example, if there is an existing user with a username and password, this API links that user to a federated user identity, so that when the federated user identity is used, the user signs in as the existing user account. </p> <note> <p>The maximum number of federated identities linked to a user is 5.</p> </note> <important> <p>Because this API allows a user with an external federated identity to sign in as an existing user in the user pool, it is critical that it only be used with external identity providers and provider attributes that have been trusted by the application owner.</p> </important> <p>This action is enabled only for admin access and requires developer credentials.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminLinkProviderForUserResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '485':
          description: AliasExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasExistsException'
        '486':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '487':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLinkProviderForUserRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminLinkProviderForUser
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminListDevices:
    post:
      operationId: AdminListDevices
      description: '<p>Lists devices, as an administrator.</p> <p>Calling this action requires developer credentials.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminListDevicesResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUserPoolConfigurationException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '485':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminListDevicesRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminListDevices
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminListGroupsForUser:
    post:
      operationId: AdminListGroupsForUser
      description: <p>Lists the groups that the user belongs to.</p> <p>Calling this action requires developer credentials.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminListGroupsForUserResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminListGroupsForUserRequest'
      parameters:
        - name: Limit
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminListGroupsForUser
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminListUserAuthEvents:
    post:
      operationId: AdminListUserAuthEvents
      description: Lists a history of user activity and any risks detected as part of Amazon Cognito advanced security.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminListUserAuthEventsResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '485':
          description: UserPoolAddOnNotEnabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPoolAddOnNotEnabledException'
        '486':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminListUserAuthEventsRequest'
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminListUserAuthEvents
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminRemoveUserFromGroup:
    post:
      operationId: AdminRemoveUserFromGroup
      description: <p>Removes the specified user from the specified group.</p> <p>Calling this action requires developer credentials.</p>
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminRemoveUserFromGroupRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminRemoveUserFromGroup
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminResetUserPassword:
    post:
      operationId: AdminResetUserPassword
      description: '<p>Resets the specified user''s password in a user pool as an administrator. Works on any user.</p> <p>When a developer calls this API, the current password is invalidated, so it must be changed. If a user tries to sign in after the API is called, the app will get a PasswordResetRequiredException exception back and should direct the user down the flow to reset the password, which is the same as the forgot password flow. In addition, if the user pool has phone verification selected and a verified phone number exists for the user, or if email verification is selected and a verified email exists for the user, calling this API will also result in sending a message to the end user with the code to change their password.</p> <note> <p>This action might generate an SMS text message. Starting June 1, 2021, U.S. telecom carriers require that you register an origination phone number before you can send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>. Cognito will use the the registered number automatically. Otherwise, Cognito users that must receive SMS messages might be unable to sign up, activate their accounts, or sign in.</p> <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In <i> <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox mode</a> </i>, you’ll have limitations, such as sending messages to only verified phone numbers. After testing in the sandbox environment, you can move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools</a> in the <i>Amazon Cognito Developer Guide</i>. </p> </note> <p>Calling this action requires developer credentials.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminResetUserPasswordResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '483':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '484':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '485':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '486':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '487':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '488':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '489':
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleAccessPolicyException'
        '490':
          description: InvalidEmailRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailRoleAccessPolicyException'
        '491':
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleTrustRelationshipException'
        '492':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminResetUserPasswordRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminResetUserPassword
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminRespondToAuthChallenge:
    post:
      operationId: AdminRespondToAuthChallenge
      description: '<p>Responds to an authentication challenge, as an administrator.</p> <note> <p>This action might generate an SMS text message. Starting June 1, 2021, U.S. telecom carriers require that you register an origination phone number before you can send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>. Cognito will use the the registered number automatically. Otherwise, Cognito users that must receive SMS messages might be unable to sign up, activate their accounts, or sign in.</p> <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In <i> <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox mode</a> </i>, you’ll have limitations, such as sending messages to only verified phone numbers. After testing in the sandbox environment, you can move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools</a> in the <i>Amazon Cognito Developer Guide</i>. </p> </note> <p>Calling this action requires developer credentials.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminRespondToAuthChallengeResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: CodeMismatchException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeMismatchException'
        '484':
          description: ExpiredCodeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredCodeException'
        '485':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '486':
          description: InvalidPasswordException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPasswordException'
        '487':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '488':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '489':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '490':
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUserPoolConfigurationException'
        '491':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '492':
          description: MFAMethodNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MFAMethodNotFoundException'
        '493':
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleAccessPolicyException'
        '494':
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleTrustRelationshipException'
        '495':
          description: AliasExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasExistsException'
        '496':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '497':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '498':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '499':
          description: SoftwareTokenMFANotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SoftwareTokenMFANotFoundException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminRespondToAuthChallengeRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminRespondToAuthChallenge
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminSetUserMFAPreference:
    post:
      operationId: AdminSetUserMFAPreference
      description: 'Sets the user''s multi-factor authentication (MFA) preference, including which MFA options are enabled and if any are preferred. Only one factor can be set as preferred. The preferred MFA factor will be used to authenticate a user if multiple factors are enabled. If multiple options are enabled and no preference is set, a challenge to choose an MFA option will be returned during sign in.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminSetUserMFAPreferenceResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '484':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '485':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '486':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminSetUserMFAPreferenceRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminSetUserMFAPreference
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminSetUserPassword:
    post:
      operationId: AdminSetUserPassword
      description: '<p>Sets the specified user''s password in a user pool as an administrator. Works on any user. </p> <p>The password can be temporary or permanent. If it is temporary, the user status will be placed into the <code>FORCE_CHANGE_PASSWORD</code> state. When the user next tries to sign in, the InitiateAuth/AdminInitiateAuth response will contain the <code>NEW_PASSWORD_REQUIRED</code> challenge. If the user does not sign in before it expires, the user will not be able to sign in and their password will need to be reset by an administrator. </p> <p>Once the user has set a new password, or the password is permanent, the user status will be set to <code>Confirmed</code>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminSetUserPasswordResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '482':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '483':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '486':
          description: InvalidPasswordException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPasswordException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminSetUserPasswordRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminSetUserPassword
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminSetUserSettings:
    post:
      operationId: AdminSetUserSettings
      description: ' <i>This action is no longer supported.</i> You can use it to configure only SMS MFA. You can''t use it to configure TOTP software token MFA. To configure either type of MFA, use <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminSetUserMFAPreference.html">AdminSetUserMFAPreference</a> instead.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminSetUserSettingsResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminSetUserSettingsRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminSetUserSettings
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminUpdateAuthEventFeedback:
    post:
      operationId: AdminUpdateAuthEventFeedback
      description: Provides feedback for an authentication event as to whether it was from a valid user. This feedback is used for improving the risk evaluation decision for the user pool as part of Amazon Cognito advanced security.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUpdateAuthEventFeedbackResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '485':
          description: UserPoolAddOnNotEnabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPoolAddOnNotEnabledException'
        '486':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUpdateAuthEventFeedbackRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminUpdateAuthEventFeedback
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminUpdateDeviceStatus:
    post:
      operationId: AdminUpdateDeviceStatus
      description: <p>Updates the device status as an administrator.</p> <p>Calling this action requires developer credentials.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUpdateDeviceStatusResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUserPoolConfigurationException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '485':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '486':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUpdateDeviceStatusRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminUpdateDeviceStatus
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminUpdateUserAttributes:
    post:
      operationId: AdminUpdateUserAttributes
      description: '<p>Updates the specified user''s attributes, including developer attributes, as an administrator. Works on any user.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p> <p>In addition to updating user attributes, this API can also be used to mark phone and email as verified.</p> <note> <p>This action might generate an SMS text message. Starting June 1, 2021, U.S. telecom carriers require that you register an origination phone number before you can send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>. Cognito will use the the registered number automatically. Otherwise, Cognito users that must receive SMS messages might be unable to sign up, activate their accounts, or sign in.</p> <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In <i> <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox mode</a> </i>, you’ll have limitations, such as sending messages to only verified phone numbers. After testing in the sandbox environment, you can move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools</a> in the <i>Amazon Cognito Developer Guide</i>. </p> </note> <p>Calling this action requires developer credentials.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUpdateUserAttributesResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '483':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '484':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '485':
          description: AliasExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasExistsException'
        '486':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '487':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '488':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '489':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '490':
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleAccessPolicyException'
        '491':
          description: InvalidEmailRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailRoleAccessPolicyException'
        '492':
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleTrustRelationshipException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUpdateUserAttributesRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminUpdateUserAttributes
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminUserGlobalSignOut:
    post:
      operationId: AdminUserGlobalSignOut
      description: '<p>Signs out users from all devices, as an administrator. It also invalidates all refresh tokens issued to a user. The user''s current access and Id tokens remain valid until their expiry. Access and Id tokens expire one hour after they are issued.</p> <p>Calling this action requires developer credentials.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUserGlobalSignOutResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUserGlobalSignOutRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminUserGlobalSignOut
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AssociateSoftwareToken:
    post:
      operationId: AssociateSoftwareToken
      description: '<p>Returns a unique generated shared secret key code for the user account. The request takes an access token or a session string, but not both.</p> <note> <p>Calling AssociateSoftwareToken immediately disassociates the existing software token from the user account. If the user doesn''t subsequently verify the software token, their account is essentially set up to authenticate without MFA. If MFA config is set to Optional at the user pool level, the user can then login without MFA. However, if MFA is set to Required for the user pool, the user will be asked to setup a new software token MFA during sign in.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssociateSoftwareTokenResponse'
        '480':
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '485':
          description: SoftwareTokenMFANotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SoftwareTokenMFANotFoundException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssociateSoftwareTokenRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AssociateSoftwareToken
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ChangePassword:
    post:
      operationId: ChangePassword
      description: Changes the password for a specified user in a user pool.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePasswordResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: InvalidPasswordException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPasswordException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '486':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '487':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '488':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '489':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ChangePassword
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ConfirmDevice:
    post:
      operationId: ConfirmDevice
      description: Confirms tracking of the device. This API call is the call that begins device tracking.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfirmDeviceResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: InvalidPasswordException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPasswordException'
        '484':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '485':
          description: UsernameExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameExistsException'
        '486':
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUserPoolConfigurationException'
        '487':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '488':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '489':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '490':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '491':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmDeviceRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ConfirmDevice
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ConfirmForgotPassword:
    post:
      operationId: ConfirmForgotPassword
      description: Allows a user to enter a confirmation code to reset a forgotten password.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfirmForgotPasswordResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '482':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '483':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '484':
          description: InvalidPasswordException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPasswordException'
        '485':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '486':
          description: CodeMismatchException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeMismatchException'
        '487':
          description: ExpiredCodeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredCodeException'
        '488':
          description: TooManyFailedAttemptsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyFailedAttemptsException'
        '489':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '490':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '491':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '492':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '493':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '494':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmForgotPasswordRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ConfirmForgotPassword
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ConfirmSignUp:
    post:
      operationId: ConfirmSignUp
      description: Confirms registration of a user and handles the existing alias from a previous user.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfirmSignUpResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '483':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '484':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '485':
          description: TooManyFailedAttemptsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyFailedAttemptsException'
        '486':
          description: CodeMismatchException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeMismatchException'
        '487':
          description: ExpiredCodeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredCodeException'
        '488':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '489':
          description: AliasExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasExistsException'
        '490':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '491':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '492':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '493':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmSignUpRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ConfirmSignUp
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.CreateGroup:
    post:
      operationId: CreateGroup
      description: <p>Creates a new group in the specified user pool.</p> <p>Calling this action requires developer credentials.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateGroupResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: GroupExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupExistsException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '485':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '486':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.CreateGroup
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.CreateIdentityProvider:
    post:
      operationId: CreateIdentityProvider
      description: Creates an identity provider for a user pool.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateIdentityProviderResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: DuplicateProviderException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DuplicateProviderException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '486':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIdentityProviderRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.CreateIdentityProvider
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.CreateResourceServer:
    post:
      operationId: CreateResourceServer
      description: Creates a new OAuth2.0 resource server and defines custom scopes in it.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResourceServerResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResourceServerRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.CreateResourceServer
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.CreateUserImportJob:
    post:
      operationId: CreateUserImportJob
      description: Creates the user import job.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserImportJobResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: PreconditionNotMetException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionNotMetException'
        '484':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '485':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '486':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserImportJobRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.CreateUserImportJob
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.CreateUserPool:
    post:
      operationId: CreateUserPool
      description: '<p>Creates a new Amazon Cognito user pool and sets the password policy for the pool.</p> <note> <p>This action might generate an SMS text message. Starting June 1, 2021, U.S. telecom carriers require that you register an origination phone number before you can send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>. Cognito will use the the registered number automatically. Otherwise, Cognito users that must receive SMS messages might be unable to sign up, activate their accounts, or sign in.</p> <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In <i> <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox mode</a> </i>, you’ll have limitations, such as sending messages to only verified phone numbers. After testing in the sandbox environment, you can move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools</a> in the <i>Amazon Cognito Developer Guide</i>. </p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserPoolResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleAccessPolicyException'
        '484':
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleTrustRelationshipException'
        '485':
          description: InvalidEmailRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailRoleAccessPolicyException'
        '486':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '487':
          description: UserPoolTaggingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPoolTaggingException'
        '488':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserPoolRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.CreateUserPool
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.CreateUserPoolClient:
    post:
      operationId: CreateUserPoolClient
      description: '<p>Creates the user pool client.</p> <p>When you create a new user pool client, token revocation is automatically enabled. For more information about revoking tokens, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html">RevokeToken</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserPoolClientResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '484':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '485':
          description: ScopeDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeDoesNotExistException'
        '486':
          description: InvalidOAuthFlowException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidOAuthFlowException'
        '487':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserPoolClientRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.CreateUserPoolClient
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.CreateUserPoolDomain:
    post:
      operationId: CreateUserPoolDomain
      description: Creates a new domain for a user pool.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserPoolDomainResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserPoolDomainRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.CreateUserPoolDomain
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteGroup:
    post:
      operationId: DeleteGroup
      description: <p>Deletes a group.</p> <p>Calling this action requires developer credentials.</p>
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteGroupRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DeleteGroup
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteIdentityProvider:
    post:
      operationId: DeleteIdentityProvider
      description: Deletes an identity provider for a user pool.
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: UnsupportedIdentityProviderException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedIdentityProviderException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteIdentityProviderRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DeleteIdentityProvider
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteResourceServer:
    post:
      operationId: DeleteResourceServer
      description: Deletes a resource server.
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteResourceServerRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DeleteResourceServer
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUser:
    post:
      operationId: DeleteUser
      description: Allows a user to delete himself or herself.
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '485':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '486':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '487':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUserRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DeleteUser
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUserAttributes:
    post:
      operationId: DeleteUserAttributes
      description: Deletes the attributes for a user.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUserAttributesResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '485':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '486':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '487':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUserAttributesRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DeleteUserAttributes
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUserPool:
    post:
      operationId: DeleteUserPool
      description: Deletes the specified Amazon Cognito user pool.
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserImportInProgressException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserImportInProgressException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUserPoolRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DeleteUserPool
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUserPoolClient:
    post:
      operationId: DeleteUserPoolClient
      description: Allows the developer to delete the user pool client.
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUserPoolClientRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DeleteUserPoolClient
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUserPoolDomain:
    post:
      operationId: DeleteUserPoolDomain
      description: Deletes a domain for a user pool.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUserPoolDomainResponse'
        '480':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUserPoolDomainRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DeleteUserPoolDomain
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeIdentityProvider:
    post:
      operationId: DescribeIdentityProvider
      description: Gets information about a specific identity provider.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeIdentityProviderResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeIdentityProviderRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DescribeIdentityProvider
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeResourceServer:
    post:
      operationId: DescribeResourceServer
      description: Describes a resource server.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeResourceServerResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeResourceServerRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DescribeResourceServer
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeRiskConfiguration:
    post:
      operationId: DescribeRiskConfiguration
      description: Describes the risk configuration.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeRiskConfigurationResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserPoolAddOnNotEnabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPoolAddOnNotEnabledException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeRiskConfigurationRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DescribeRiskConfiguration
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeUserImportJob:
    post:
      operationId: DescribeUserImportJob
      description: Describes the user import job.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeUserImportJobResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeUserImportJobRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DescribeUserImportJob
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeUserPool:
    post:
      operationId: DescribeUserPool
      description: Returns the configuration information and metadata of the specified user pool.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeUserPoolResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserPoolTaggingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPoolTaggingException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeUserPoolRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DescribeUserPool
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeUserPoolClient:
    post:
      operationId: DescribeUserPoolClient
      description: Client method for returning the configuration information and metadata of the specified user pool app client.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeUserPoolClientResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeUserPoolClientRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DescribeUserPoolClient
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeUserPoolDomain:
    post:
      operationId: DescribeUserPoolDomain
      description: Gets information about a domain.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeUserPoolDomainResponse'
        '480':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeUserPoolDomainRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DescribeUserPoolDomain
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ForgetDevice:
    post:
      operationId: ForgetDevice
      description: Forgets the specified device.
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUserPoolConfigurationException'
        '485':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '486':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '487':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '488':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgetDeviceRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ForgetDevice
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ForgotPassword:
    post:
      operationId: ForgotPassword
      description: '<p>Calling this API causes a message to be sent to the end user with a confirmation code that is required to change the user''s password. For the <code>Username</code> parameter, you can use the username or user alias. The method used to send the confirmation code is sent according to the specified AccountRecoverySetting. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-recover-a-user-account.html">Recovering User Accounts</a> in the <i>Amazon Cognito Developer Guide</i>. If neither a verified phone number nor a verified email exists, an <code>InvalidParameterException</code> is thrown. To use the confirmation code for resetting the password, call <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ConfirmForgotPassword.html">ConfirmForgotPassword</a>.</p> <note> <p>This action might generate an SMS text message. Starting June 1, 2021, U.S. telecom carriers require that you register an origination phone number before you can send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>. Cognito will use the the registered number automatically. Otherwise, Cognito users that must receive SMS messages might be unable to sign up, activate their accounts, or sign in.</p> <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In <i> <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox mode</a> </i>, you’ll have limitations, such as sending messages to only verified phone numbers. After testing in the sandbox environment, you can move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools</a> in the <i>Amazon Cognito Developer Guide</i>. </p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForgotPasswordResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '483':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '484':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '485':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '486':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '487':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '488':
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleAccessPolicyException'
        '489':
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleTrustRelationshipException'
        '490':
          description: InvalidEmailRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailRoleAccessPolicyException'
        '491':
          description: CodeDeliveryFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeDeliveryFailureException'
        '492':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '493':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '494':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ForgotPassword
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.GetCSVHeader:
    post:
      operationId: GetCSVHeader
      description: Gets the header information for the .csv file to be used as input for the user import job.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCSVHeaderResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCSVHeaderRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.GetCSVHeader
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.GetDevice:
    post:
      operationId: GetDevice
      description: Gets the device.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeviceResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUserPoolConfigurationException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '486':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '487':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '488':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetDeviceRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.GetDevice
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.GetGroup:
    post:
      operationId: GetGroup
      description: <p>Gets a group.</p> <p>Calling this action requires developer credentials.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetGroupResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetGroupRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.GetGroup
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.GetIdentityProviderByIdentifier:
    post:
      operationId: GetIdentityProviderByIdentifier
      description: Gets the specified identity provider.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIdentityProviderByIdentifierResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIdentityProviderByIdentifierRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.GetIdentityProviderByIdentifier
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.GetSigningCertificate:
    post:
      operationId: GetSigningCertificate
      description: 'This method takes a user pool ID, and returns the signing certificate.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSigningCertificateResponse'
        '480':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetSigningCertificateRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.GetSigningCertificate
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.GetUICustomization:
    post:
      operationId: GetUICustomization
      description: 'Gets the UI Customization information for a particular app client''s app UI, if there is something set. If nothing is set for the particular client, but there is an existing pool level customization (app <code>clientId</code> will be <code>ALL</code>), then that is returned. If nothing is present, then an empty shape is returned.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUICustomizationResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetUICustomizationRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.GetUICustomization
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.GetUser:
    post:
      operationId: GetUser
      description: Gets the user attributes and metadata for a user.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '485':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '486':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '487':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetUserRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.GetUser
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.GetUserAttributeVerificationCode:
    post:
      operationId: GetUserAttributeVerificationCode
      description: '<p>Gets the user attribute verification code for the specified attribute name.</p> <note> <p>This action might generate an SMS text message. Starting June 1, 2021, U.S. telecom carriers require that you register an origination phone number before you can send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>. Cognito will use the the registered number automatically. Otherwise, Cognito users that must receive SMS messages might be unable to sign up, activate their accounts, or sign in.</p> <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In <i> <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox mode</a> </i>, you’ll have limitations, such as sending messages to only verified phone numbers. After testing in the sandbox environment, you can move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools</a> in the <i>Amazon Cognito Developer Guide</i>. </p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserAttributeVerificationCodeResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '485':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '486':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '487':
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleAccessPolicyException'
        '488':
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleTrustRelationshipException'
        '489':
          description: InvalidEmailRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailRoleAccessPolicyException'
        '490':
          description: CodeDeliveryFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeDeliveryFailureException'
        '491':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '492':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '493':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '494':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '495':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetUserAttributeVerificationCodeRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.GetUserAttributeVerificationCode
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.GetUserPoolMfaConfig:
    post:
      operationId: GetUserPoolMfaConfig
      description: Gets the user pool multi-factor authentication (MFA) configuration.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserPoolMfaConfigResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetUserPoolMfaConfigRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.GetUserPoolMfaConfig
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.GlobalSignOut:
    post:
      operationId: GlobalSignOut
      description: Signs out users from all devices. It also invalidates all refresh tokens issued to a user. The user's current access and Id tokens remain valid until their expiry. Access and Id tokens expire one hour after they are issued.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalSignOutResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '485':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '486':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalSignOutRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.GlobalSignOut
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.InitiateAuth:
    post:
      operationId: InitiateAuth
      description: '<p>Initiates the authentication flow.</p> <note> <p>This action might generate an SMS text message. Starting June 1, 2021, U.S. telecom carriers require that you register an origination phone number before you can send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>. Cognito will use the the registered number automatically. Otherwise, Cognito users that must receive SMS messages might be unable to sign up, activate their accounts, or sign in.</p> <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In <i> <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox mode</a> </i>, you’ll have limitations, such as sending messages to only verified phone numbers. After testing in the sandbox environment, you can move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools</a> in the <i>Amazon Cognito Developer Guide</i>. </p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitiateAuthResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '485':
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUserPoolConfigurationException'
        '486':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '487':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '488':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '489':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '490':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '491':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '492':
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleAccessPolicyException'
        '493':
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleTrustRelationshipException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitiateAuthRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.InitiateAuth
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ListDevices:
    post:
      operationId: ListDevices
      description: Lists the devices.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDevicesResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUserPoolConfigurationException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '486':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '487':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '488':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListDevicesRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ListDevices
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ListGroups:
    post:
      operationId: ListGroups
      description: <p>Lists the groups associated with a user pool.</p> <p>Calling this action requires developer credentials.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGroupsResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListGroupsRequest'
      parameters:
        - name: Limit
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ListGroups
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ListIdentityProviders:
    post:
      operationId: ListIdentityProviders
      description: Lists information about all identity providers for a user pool.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIdentityProvidersResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListIdentityProvidersRequest'
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ListIdentityProviders
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ListResourceServers:
    post:
      operationId: ListResourceServers
      description: Lists the resource servers for a user pool.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResourceServersResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListResourceServersRequest'
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ListResourceServers
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ListTagsForResource:
    post:
      operationId: ListTagsForResource
      description: '<p>Lists the tags that are assigned to an Amazon Cognito user pool.</p> <p>A tag is a label that you can apply to user pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria.</p> <p>You can use this action up to 10 times per second, per account.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTagsForResourceRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ListTagsForResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ListUserImportJobs:
    post:
      operationId: ListUserImportJobs
      description: Lists the user import jobs.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserImportJobsResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListUserImportJobsRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ListUserImportJobs
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ListUserPoolClients:
    post:
      operationId: ListUserPoolClients
      description: Lists the clients that have been created for the specified user pool.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserPoolClientsResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListUserPoolClientsRequest'
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ListUserPoolClients
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ListUserPools:
    post:
      operationId: ListUserPools
      description: Lists the user pools associated with an account.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserPoolsResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListUserPoolsRequest'
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ListUserPools
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ListUsers:
    post:
      operationId: ListUsers
      description: Lists the users in the Amazon Cognito user pool.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListUsersRequest'
      parameters:
        - name: Limit
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: PaginationToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ListUsers
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ListUsersInGroup:
    post:
      operationId: ListUsersInGroup
      description: <p>Lists the users in the specified group.</p> <p>Calling this action requires developer credentials.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersInGroupResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListUsersInGroupRequest'
      parameters:
        - name: Limit
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ListUsersInGroup
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ResendConfirmationCode:
    post:
      operationId: ResendConfirmationCode
      description: '<p>Resends the confirmation (for confirmation of registration) to a specific user in the user pool.</p> <note> <p>This action might generate an SMS text message. Starting June 1, 2021, U.S. telecom carriers require that you register an origination phone number before you can send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>. Cognito will use the the registered number automatically. Otherwise, Cognito users that must receive SMS messages might be unable to sign up, activate their accounts, or sign in.</p> <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In <i> <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox mode</a> </i>, you’ll have limitations, such as sending messages to only verified phone numbers. After testing in the sandbox environment, you can move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools</a> in the <i>Amazon Cognito Developer Guide</i>. </p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResendConfirmationCodeResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '483':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '484':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '485':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '486':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '487':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '488':
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleAccessPolicyException'
        '489':
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleTrustRelationshipException'
        '490':
          description: InvalidEmailRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailRoleAccessPolicyException'
        '491':
          description: CodeDeliveryFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeDeliveryFailureException'
        '492':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '493':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendConfirmationCodeRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ResendConfirmationCode
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.RespondToAuthChallenge:
    post:
      operationId: RespondToAuthChallenge
      description: '<p>Responds to the authentication challenge.</p> <note> <p>This action might generate an SMS text message. Starting June 1, 2021, U.S. telecom carriers require that you register an origination phone number before you can send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>. Cognito will use the the registered number automatically. Otherwise, Cognito users that must receive SMS messages might be unable to sign up, activate their accounts, or sign in.</p> <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In <i> <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox mode</a> </i>, you’ll have limitations, such as sending messages to only verified phone numbers. After testing in the sandbox environment, you can move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools</a> in the <i>Amazon Cognito Developer Guide</i>. </p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespondToAuthChallengeResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: CodeMismatchException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeMismatchException'
        '484':
          description: ExpiredCodeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredCodeException'
        '485':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '486':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '487':
          description: InvalidPasswordException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPasswordException'
        '488':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '489':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '490':
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUserPoolConfigurationException'
        '491':
          description: MFAMethodNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MFAMethodNotFoundException'
        '492':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '493':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '494':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '495':
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleAccessPolicyException'
        '496':
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleTrustRelationshipException'
        '497':
          description: AliasExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasExistsException'
        '498':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '499':
          description: SoftwareTokenMFANotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SoftwareTokenMFANotFoundException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RespondToAuthChallengeRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.RespondToAuthChallenge
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.RevokeToken:
    post:
      operationId: RevokeToken
      description: 'Revokes all of the access tokens generated by the specified refresh token. After the token is revoked, you can not use the revoked token to access Cognito authenticated APIs.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevokeTokenResponse'
        '480':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '481':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '482':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '483':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '484':
          description: UnsupportedOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedOperationException'
        '485':
          description: UnsupportedTokenTypeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedTokenTypeException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeTokenRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.RevokeToken
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.SetRiskConfiguration:
    post:
      operationId: SetRiskConfiguration
      description: '<p>Configures actions on detected risks. To delete the risk configuration for <code>UserPoolId</code> or <code>ClientId</code>, pass null values for all four configuration types.</p> <p>To enable Amazon Cognito advanced security features, update the user pool to include the <code>UserPoolAddOns</code> key<code>AdvancedSecurityMode</code>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetRiskConfigurationResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserPoolAddOnNotEnabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPoolAddOnNotEnabledException'
        '485':
          description: CodeDeliveryFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeDeliveryFailureException'
        '486':
          description: InvalidEmailRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailRoleAccessPolicyException'
        '487':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetRiskConfigurationRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.SetRiskConfiguration
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.SetUICustomization:
    post:
      operationId: SetUICustomization
      description: '<p>Sets the UI customization information for a user pool''s built-in app UI.</p> <p>You can specify app UI customization settings for a single client (with a specific <code>clientId</code>) or for all clients (by setting the <code>clientId</code> to <code>ALL</code>). If you specify <code>ALL</code>, the default configuration will be used for every client that has no UI customization set previously. If you specify UI customization settings for a particular client, it will no longer fall back to the <code>ALL</code> configuration. </p> <note> <p>To use this API, your user pool must have a domain associated with it. Otherwise, there is no place to host the app''s pages, and the service will throw an error.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetUICustomizationResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUICustomizationRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.SetUICustomization
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.SetUserMFAPreference:
    post:
      operationId: SetUserMFAPreference
      description: 'Set the user''s multi-factor authentication (MFA) method preference, including which MFA factors are enabled and if any are preferred. Only one factor can be set as preferred. The preferred MFA factor will be used to authenticate a user if multiple factors are enabled. If multiple options are enabled and no preference is set, a challenge to choose an MFA option will be returned during sign in. If an MFA type is enabled for a user, the user will be prompted for MFA during all sign in attempts, unless device tracking is turned on and the device has been trusted. If you would like MFA to be applied selectively based on the assessed risk level of sign in attempts, disable MFA for users and turn on Adaptive Authentication for the user pool.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetUserMFAPreferenceResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '484':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '485':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '486':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUserMFAPreferenceRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.SetUserMFAPreference
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.SetUserPoolMfaConfig:
    post:
      operationId: SetUserPoolMfaConfig
      description: '<p>Set the user pool multi-factor authentication (MFA) configuration.</p> <note> <p>This action might generate an SMS text message. Starting June 1, 2021, U.S. telecom carriers require that you register an origination phone number before you can send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>. Cognito will use the the registered number automatically. Otherwise, Cognito users that must receive SMS messages might be unable to sign up, activate their accounts, or sign in.</p> <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In <i> <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox mode</a> </i>, you’ll have limitations, such as sending messages to only verified phone numbers. After testing in the sandbox environment, you can move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools</a> in the <i>Amazon Cognito Developer Guide</i>. </p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetUserPoolMfaConfigResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleAccessPolicyException'
        '484':
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleTrustRelationshipException'
        '485':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '486':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUserPoolMfaConfigRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.SetUserPoolMfaConfig
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.SetUserSettings:
    post:
      operationId: SetUserSettings
      description: ' <i>This action is no longer supported.</i> You can use it to configure only SMS MFA. You can''t use it to configure TOTP software token MFA. To configure either type of MFA, use <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SetUserMFAPreference.html">SetUserMFAPreference</a> instead.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetUserSettingsResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '484':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '485':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '486':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUserSettingsRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.SetUserSettings
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.SignUp:
    post:
      operationId: SignUp
      description: '<p>Registers the user in the specified user pool and creates a user name, password, and user attributes.</p> <note> <p>This action might generate an SMS text message. Starting June 1, 2021, U.S. telecom carriers require that you register an origination phone number before you can send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>. Cognito will use the the registered number automatically. Otherwise, Cognito users that must receive SMS messages might be unable to sign up, activate their accounts, or sign in.</p> <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In <i> <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox mode</a> </i>, you’ll have limitations, such as sending messages to only verified phone numbers. After testing in the sandbox environment, you can move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools</a> in the <i>Amazon Cognito Developer Guide</i>. </p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '483':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '484':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '485':
          description: InvalidPasswordException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPasswordException'
        '486':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '487':
          description: UsernameExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameExistsException'
        '488':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '489':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '490':
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleAccessPolicyException'
        '491':
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleTrustRelationshipException'
        '492':
          description: InvalidEmailRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailRoleAccessPolicyException'
        '493':
          description: CodeDeliveryFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeDeliveryFailureException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.SignUp
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.StartUserImportJob:
    post:
      operationId: StartUserImportJob
      description: Starts the user import.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartUserImportJobResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '484':
          description: PreconditionNotMetException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionNotMetException'
        '485':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartUserImportJobRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.StartUserImportJob
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.StopUserImportJob:
    post:
      operationId: StopUserImportJob
      description: Stops the user import job.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StopUserImportJobResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '484':
          description: PreconditionNotMetException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionNotMetException'
        '485':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StopUserImportJobRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.StopUserImportJob
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.TagResource:
    post:
      operationId: TagResource
      description: '<p>Assigns a set of tags to an Amazon Cognito user pool. A tag is a label that you can use to categorize and manage user pools in different ways, such as by purpose, owner, environment, or other criteria.</p> <p>Each tag consists of a key and value, both of which you define. A key is a general category for more specific values. For example, if you have two versions of a user pool, one for testing and another for production, you might assign an <code>Environment</code> tag key to both user pools. The value of this key might be <code>Test</code> for one user pool and <code>Production</code> for the other.</p> <p>Tags are useful for cost tracking and access control. You can activate your tags so that they appear on the Billing and Cost Management console, where you can track the costs associated with your user pools. In an IAM policy, you can constrain permissions for user pools based on specific tags or tag values.</p> <p>You can use this action up to 5 times per second, per account. A user pool can have as many as 50 tags.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResourceRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.TagResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.UntagResource:
    post:
      operationId: UntagResource
      description: 'Removes the specified tags from an Amazon Cognito user pool. You can use this action up to 5 times per second, per account'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UntagResourceRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.UntagResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateAuthEventFeedback:
    post:
      operationId: UpdateAuthEventFeedback
      description: Provides the feedback for an authentication event whether it was from a valid user or not. This feedback is used for improving the risk evaluation decision for the user pool as part of Amazon Cognito advanced security.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAuthEventFeedbackResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '485':
          description: UserPoolAddOnNotEnabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPoolAddOnNotEnabledException'
        '486':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAuthEventFeedbackRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.UpdateAuthEventFeedback
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateDeviceStatus:
    post:
      operationId: UpdateDeviceStatus
      description: Updates the device status.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDeviceStatusResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUserPoolConfigurationException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '486':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '487':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '488':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDeviceStatusRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.UpdateDeviceStatus
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateGroup:
    post:
      operationId: UpdateGroup
      description: <p>Updates the specified group with the specified attributes.</p> <p>Calling this action requires developer credentials.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateGroupResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.UpdateGroup
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateIdentityProvider:
    post:
      operationId: UpdateIdentityProvider
      description: Updates identity provider information for a user pool.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateIdentityProviderResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: UnsupportedIdentityProviderException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedIdentityProviderException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateIdentityProviderRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.UpdateIdentityProvider
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateResourceServer:
    post:
      operationId: UpdateResourceServer
      description: '<p>Updates the name and scopes of resource server. All other fields are read-only.</p> <important> <p>If you don''t provide a value for an attribute, it will be set to the default value.</p> </important>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateResourceServerResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateResourceServerRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.UpdateResourceServer
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateUserAttributes:
    post:
      operationId: UpdateUserAttributes
      description: '<p>Allows a user to update a specific attribute (one at a time).</p> <note> <p>This action might generate an SMS text message. Starting June 1, 2021, U.S. telecom carriers require that you register an origination phone number before you can send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>. Cognito will use the the registered number automatically. Otherwise, Cognito users that must receive SMS messages might be unable to sign up, activate their accounts, or sign in.</p> <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In <i> <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox mode</a> </i>, you’ll have limitations, such as sending messages to only verified phone numbers. After testing in the sandbox environment, you can move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools</a> in the <i>Amazon Cognito Developer Guide</i>. </p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserAttributesResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: CodeMismatchException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeMismatchException'
        '483':
          description: ExpiredCodeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredCodeException'
        '484':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '485':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '486':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '487':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '488':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '489':
          description: AliasExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasExistsException'
        '490':
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleAccessPolicyException'
        '491':
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleTrustRelationshipException'
        '492':
          description: InvalidEmailRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailRoleAccessPolicyException'
        '493':
          description: CodeDeliveryFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeDeliveryFailureException'
        '494':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '495':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '496':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '497':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserAttributesRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.UpdateUserAttributes
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateUserPool:
    post:
      operationId: UpdateUserPool
      description: '<p>Updates the specified user pool with the specified attributes. You can get a list of the current user pool settings using <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_DescribeUserPool.html">DescribeUserPool</a>. If you don''t provide a value for an attribute, it will be set to the default value.</p> <note> <p>This action might generate an SMS text message. Starting June 1, 2021, U.S. telecom carriers require that you register an origination phone number before you can send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>. Cognito will use the the registered number automatically. Otherwise, Cognito users that must receive SMS messages might be unable to sign up, activate their accounts, or sign in.</p> <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In <i> <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox mode</a> </i>, you’ll have limitations, such as sending messages to only verified phone numbers. After testing in the sandbox environment, you can move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools</a> in the <i>Amazon Cognito Developer Guide</i>. </p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserPoolResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '485':
          description: UserImportInProgressException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserImportInProgressException'
        '486':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '487':
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleAccessPolicyException'
        '488':
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleTrustRelationshipException'
        '489':
          description: UserPoolTaggingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPoolTaggingException'
        '490':
          description: InvalidEmailRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailRoleAccessPolicyException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserPoolRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.UpdateUserPool
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateUserPoolClient:
    post:
      operationId: UpdateUserPoolClient
      description: '<p>Updates the specified user pool app client with the specified attributes. You can get a list of the current user pool app client settings using <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_DescribeUserPoolClient.html">DescribeUserPoolClient</a>.</p> <important> <p>If you don''t provide a value for an attribute, it will be set to the default value.</p> </important> <p>You can also use this operation to enable token revocation for user pool clients. For more information about revoking tokens, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html">RevokeToken</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserPoolClientResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '485':
          description: ScopeDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeDoesNotExistException'
        '486':
          description: InvalidOAuthFlowException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidOAuthFlowException'
        '487':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserPoolClientRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.UpdateUserPoolClient
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateUserPoolDomain:
    post:
      operationId: UpdateUserPoolDomain
      description: '<p>Updates the Secure Sockets Layer (SSL) certificate for the custom domain for your user pool.</p> <p>You can use this operation to provide the Amazon Resource Name (ARN) of a new certificate to Amazon Cognito. You cannot use it to change the domain for a user pool.</p> <p>A custom domain is used to host the Amazon Cognito hosted UI, which provides sign-up and sign-in pages for your application. When you set up a custom domain, you provide a certificate that you manage with Certificate Manager (ACM). When necessary, you can use this operation to change the certificate that you applied to your custom domain.</p> <p>Usually, this is unnecessary following routine certificate renewal with ACM. When you renew your existing certificate in ACM, the ARN for your certificate remains the same, and your custom domain uses the new certificate automatically.</p> <p>However, if you replace your existing certificate with a new one, ACM gives the new certificate a new ARN. To apply the new certificate to your custom domain, you must provide this ARN to Amazon Cognito.</p> <p>When you add your new certificate in ACM, you must choose US East (N. Virginia) as the Region.</p> <p>After you submit your request, Amazon Cognito requires up to 1 hour to distribute your new certificate to your custom domain.</p> <p>For more information about adding a custom domain to your user pool, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html">Using Your Own Domain for the Hosted UI</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserPoolDomainResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserPoolDomainRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.UpdateUserPoolDomain
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.VerifySoftwareToken:
    post:
      operationId: VerifySoftwareToken
      description: 'Use this API to register a user''s entered TOTP code and mark the user''s software token MFA status as "verified" if successful. The request takes an access token or a session string, but not both.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifySoftwareTokenResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUserPoolConfigurationException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '486':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '487':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '488':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '489':
          description: EnableSoftwareTokenMFAException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnableSoftwareTokenMFAException'
        '490':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '491':
          description: SoftwareTokenMFANotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SoftwareTokenMFANotFoundException'
        '492':
          description: CodeMismatchException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeMismatchException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifySoftwareTokenRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.VerifySoftwareToken
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=AWSCognitoIdentityProviderService.VerifyUserAttribute:
    post:
      operationId: VerifyUserAttribute
      description: Verifies the specified user attributes in the user pool.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyUserAttributeResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: CodeMismatchException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeMismatchException'
        '483':
          description: ExpiredCodeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredCodeException'
        '484':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '485':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '486':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '487':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '488':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '489':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '490':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyUserAttributeRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.VerifyUserAttribute
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    AddCustomAttributesResponse:
      type: object
      properties: {}
      description: Represents the response from the server for the request to add custom attributes.
    AddCustomAttributesRequest:
      type: object
      required:
        - UserPoolId
        - CustomAttributes
      title: AddCustomAttributesRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool where you want to add custom attributes.
        CustomAttributes:
          $ref: '#/components/schemas/CustomAttributesListType'
          description: 'An array of custom attributes, such as Mutable and Name.'
      description: Represents the request to add custom attributes.
    ResourceNotFoundException: {}
    InvalidParameterException: {}
    TooManyRequestsException: {}
    NotAuthorizedException: {}
    UserImportInProgressException: {}
    InternalErrorException: {}
    AdminAddUserToGroupRequest:
      type: object
      required:
        - UserPoolId
        - Username
        - GroupName
      title: AdminAddUserToGroupRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool.
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The username for the user.
        GroupName:
          $ref: '#/components/schemas/GroupNameType'
          description: The group name.
    UserNotFoundException: {}
    AdminConfirmSignUpResponse:
      type: object
      properties: {}
      description: Represents the response from the server for the request to confirm registration.
    AdminConfirmSignUpRequest:
      type: object
      required:
        - UserPoolId
        - Username
      title: AdminConfirmSignUpRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for which you want to confirm user registration.
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The user name for which you want to confirm user registration.
        ClientMetadata:
          $ref: '#/components/schemas/ClientMetadataType'
          description: '<p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. </p> <p>If your user pool configuration includes triggers, the AdminConfirmSignUp API action invokes the Lambda function that is specified for the <i>post confirmation</i> trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. In this payload, the <code>clientMetadata</code> attribute provides the data that you assigned to the ClientMetadata parameter in your AdminConfirmSignUp request. In your function code in Lambda, you can process the ClientMetadata value to enhance your workflow for your specific needs.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <note> <p>Take the following limitations into consideration when you use the ClientMetadata parameter:</p> <ul> <li> <p>Amazon Cognito does not store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration does not include triggers, the ClientMetadata parameter serves no purpose.</p> </li> <li> <p>Amazon Cognito does not validate the ClientMetadata value.</p> </li> <li> <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don''t use it to provide sensitive information.</p> </li> </ul> </note>'
      description: Represents the request to confirm user registration.
    UnexpectedLambdaException: {}
    UserLambdaValidationException: {}
    TooManyFailedAttemptsException: {}
    InvalidLambdaResponseException: {}
    LimitExceededException: {}
    AdminCreateUserResponse:
      type: object
      properties:
        User:
          $ref: '#/components/schemas/UserType'
          description: The newly created user.
      description: Represents the response from the server to the request to create the user.
    AdminCreateUserRequest:
      type: object
      required:
        - UserPoolId
        - Username
      title: AdminCreateUserRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool where the user will be created.
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: 'The username for the user. Must be unique within the user pool. Must be a UTF-8 string between 1 and 128 characters. After the user is created, the username cannot be changed.'
        UserAttributes:
          $ref: '#/components/schemas/AttributeListType'
          description: '<p>An array of name-value pairs that contain user attributes and attribute values to be set for the user to be created. You can create a user without specifying any attributes other than <code>Username</code>. However, any attributes that you specify as required (when creating a user pool or in the <b>Attributes</b> tab of the console) must be supplied either by you (in your call to <code>AdminCreateUser</code>) or by the user (when he or she signs up in response to your welcome message).</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p> <p>To send a message inviting the user to sign up, you must specify the user''s email address or phone number. This can be done in your call to AdminCreateUser or in the <b>Users</b> tab of the Amazon Cognito console for managing your user pools.</p> <p>In your call to <code>AdminCreateUser</code>, you can set the <code>email_verified</code> attribute to <code>True</code>, and you can set the <code>phone_number_verified</code> attribute to <code>True</code>. (You can also do this by calling <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminUpdateUserAttributes.html">AdminUpdateUserAttributes</a>.)</p> <ul> <li> <p> <b>email</b>: The email address of the user to whom the message that contains the code and username will be sent. Required if the <code>email_verified</code> attribute is set to <code>True</code>, or if <code>"EMAIL"</code> is specified in the <code>DesiredDeliveryMediums</code> parameter.</p> </li> <li> <p> <b>phone_number</b>: The phone number of the user to whom the message that contains the code and username will be sent. Required if the <code>phone_number_verified</code> attribute is set to <code>True</code>, or if <code>"SMS"</code> is specified in the <code>DesiredDeliveryMediums</code> parameter.</p> </li> </ul>'
        ValidationData:
          $ref: '#/components/schemas/AttributeListType'
          description: '<p>The user''s validation data. This is an array of name-value pairs that contain user attributes and attribute values that you can use for custom validation, such as restricting the types of user accounts that can be registered. For example, you might choose to allow or disallow user sign-up based on the user''s domain.</p> <p>To configure custom validation, you must create a Pre Sign-up Lambda trigger for the user pool as described in the Amazon Cognito Developer Guide. The Lambda trigger receives the validation data and uses it in the validation process.</p> <p>The user''s validation data is not persisted.</p>'
        TemporaryPassword:
          $ref: '#/components/schemas/PasswordType'
          description: '<p>The user''s temporary password. This password must conform to the password policy that you specified when you created the user pool.</p> <p>The temporary password is valid only once. To complete the Admin Create User flow, the user must enter the temporary password in the sign-in page along with a new password to be used in all future sign-ins.</p> <p>This parameter is not required. If you do not specify a value, Amazon Cognito generates one for you.</p> <p>The temporary password can only be used until the user account expiration limit that you specified when you created the user pool. To reset the account after that time limit, you must call <code>AdminCreateUser</code> again, specifying <code>"RESEND"</code> for the <code>MessageAction</code> parameter.</p>'
        ForceAliasCreation:
          $ref: '#/components/schemas/ForceAliasCreation'
          description: '<p>This parameter is only used if the <code>phone_number_verified</code> or <code>email_verified</code> attribute is set to <code>True</code>. Otherwise, it is ignored.</p> <p>If this parameter is set to <code>True</code> and the phone number or email address specified in the UserAttributes parameter already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user. The previous user will no longer be able to log in using that alias.</p> <p>If this parameter is set to <code>False</code>, the API throws an <code>AliasExistsException</code> error if the alias already exists. The default value is <code>False</code>.</p>'
        MessageAction:
          $ref: '#/components/schemas/MessageActionType'
          description: Set to <code>"RESEND"</code> to resend the invitation message to a user that already exists and reset the expiration limit on the user's account. Set to <code>"SUPPRESS"</code> to suppress sending the message. Only one value can be specified.
        DesiredDeliveryMediums:
          $ref: '#/components/schemas/DeliveryMediumListType'
          description: Specify <code>"EMAIL"</code> if email will be used to send the welcome message. Specify <code>"SMS"</code> if the phone number will be used. The default value is <code>"SMS"</code>. More than one value can be specified.
        ClientMetadata:
          $ref: '#/components/schemas/ClientMetadataType'
          description: '<p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. </p> <p>You create custom workflows by assigning Lambda functions to user pool triggers. When you use the AdminCreateUser API action, Amazon Cognito invokes the function that is assigned to the <i>pre sign-up</i> trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a <code>clientMetadata</code> attribute, which provides the data that you assigned to the ClientMetadata parameter in your AdminCreateUser request. In your function code in Lambda, you can process the <code>clientMetadata</code> value to enhance your workflow for your specific needs.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <note> <p>Take the following limitations into consideration when you use the ClientMetadata parameter:</p> <ul> <li> <p>Amazon Cognito does not store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration does not include triggers, the ClientMetadata parameter serves no purpose.</p> </li> <li> <p>Amazon Cognito does not validate the ClientMetadata value.</p> </li> <li> <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don''t use it to provide sensitive information.</p> </li> </ul> </note>'
      description: Represents the request to create a user in the specified user pool.
    UsernameExistsException: {}
    InvalidPasswordException: {}
    CodeDeliveryFailureException: {}
    PreconditionNotMetException: {}
    InvalidSmsRoleAccessPolicyException: {}
    InvalidSmsRoleTrustRelationshipException: {}
    UnsupportedUserStateException: {}
    AdminDeleteUserRequest:
      type: object
      required:
        - UserPoolId
        - Username
      title: AdminDeleteUserRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool where you want to delete the user.
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The user name of the user you wish to delete.
      description: Represents the request to delete a user as an administrator.
    AdminDeleteUserAttributesResponse:
      type: object
      properties: {}
      description: Represents the response received from the server for a request to delete user attributes.
    AdminDeleteUserAttributesRequest:
      type: object
      required:
        - UserPoolId
        - Username
        - UserAttributeNames
      title: AdminDeleteUserAttributesRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool where you want to delete user attributes.
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The user name of the user from which you would like to delete attributes.
        UserAttributeNames:
          $ref: '#/components/schemas/AttributeNameListType'
          description: '<p>An array of strings representing the user attribute names you wish to delete.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>'
      description: Represents the request to delete user attributes as an administrator.
    AdminDisableProviderForUserResponse:
      type: object
      properties: {}
    AdminDisableProviderForUserRequest:
      type: object
      required:
        - UserPoolId
        - User
      title: AdminDisableProviderForUserRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/StringType'
          description: The user pool ID for the user pool.
        User:
          $ref: '#/components/schemas/ProviderUserIdentifierType'
          description: The user to be disabled.
    AliasExistsException: {}
    AdminDisableUserResponse:
      type: object
      properties: {}
      description: Represents the response received from the server to disable the user as an administrator.
    AdminDisableUserRequest:
      type: object
      required:
        - UserPoolId
        - Username
      title: AdminDisableUserRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool where you want to disable the user.
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The user name of the user you wish to disable.
      description: Represents the request to disable the user as an administrator.
    AdminEnableUserResponse:
      type: object
      properties: {}
      description: Represents the response from the server for the request to enable a user as an administrator.
    AdminEnableUserRequest:
      type: object
      required:
        - UserPoolId
        - Username
      title: AdminEnableUserRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool where you want to enable the user.
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The user name of the user you wish to enable.
      description: Represents the request that enables the user as an administrator.
    AdminForgetDeviceRequest:
      type: object
      required:
        - UserPoolId
        - Username
        - DeviceKey
      title: AdminForgetDeviceRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID.
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The user name.
        DeviceKey:
          $ref: '#/components/schemas/DeviceKeyType'
          description: The device key.
      description: 'Sends the forgot device request, as an administrator.'
    InvalidUserPoolConfigurationException: {}
    AdminGetDeviceResponse:
      type: object
      required:
        - Device
      properties:
        Device:
          $ref: '#/components/schemas/DeviceType'
          description: The device.
      description: 'Gets the device response, as an administrator.'
    AdminGetDeviceRequest:
      type: object
      required:
        - DeviceKey
        - UserPoolId
        - Username
      title: AdminGetDeviceRequest
      properties:
        DeviceKey:
          $ref: '#/components/schemas/DeviceKeyType'
          description: The device key.
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID.
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The user name.
      description: 'Represents the request to get the device, as an administrator.'
    AdminGetUserResponse:
      type: object
      required:
        - Username
      properties:
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The user name of the user about whom you are receiving information.
        UserAttributes:
          $ref: '#/components/schemas/AttributeListType'
          description: An array of name-value pairs representing user attributes.
        UserCreateDate:
          $ref: '#/components/schemas/DateType'
          description: The date the user was created.
        UserLastModifiedDate:
          $ref: '#/components/schemas/DateType'
          description: The date the user was last modified.
        Enabled:
          $ref: '#/components/schemas/BooleanType'
          description: Indicates that the status is enabled.
        UserStatus:
          $ref: '#/components/schemas/UserStatusType'
          description: '<p>The user status. Can be one of the following:</p> <ul> <li> <p>UNCONFIRMED - User has been created but not confirmed.</p> </li> <li> <p>CONFIRMED - User has been confirmed.</p> </li> <li> <p>ARCHIVED - User is no longer active.</p> </li> <li> <p>COMPROMISED - User is disabled due to a potential security threat.</p> </li> <li> <p>UNKNOWN - User status is not known.</p> </li> <li> <p>RESET_REQUIRED - User is confirmed, but the user must request a code and reset his or her password before he or she can sign in.</p> </li> <li> <p>FORCE_CHANGE_PASSWORD - The user is confirmed and the user can sign in using a temporary password, but on first sign-in, the user must change his or her password to a new value before doing anything else. </p> </li> </ul>'
        MFAOptions:
          $ref: '#/components/schemas/MFAOptionListType'
          description: ' <i>This response parameter is no longer supported.</i> It provides information only about SMS MFA configurations. It doesn''t provide information about TOTP software token MFA configurations. To look up information about either type of MFA configuration, use UserMFASettingList instead.'
        PreferredMfaSetting:
          $ref: '#/components/schemas/StringType'
          description: The user's preferred MFA setting.
        UserMFASettingList:
          $ref: '#/components/schemas/UserMFASettingListType'
          description: The MFA options that are enabled for the user. The possible values in this list are <code>SMS_MFA</code> and <code>SOFTWARE_TOKEN_MFA</code>.
      description: Represents the response from the server from the request to get the specified user as an administrator.
    AdminGetUserRequest:
      type: object
      required:
        - UserPoolId
        - Username
      title: AdminGetUserRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool where you want to get information about the user.
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The user name of the user you wish to retrieve.
      description: Represents the request to get the specified user as an administrator.
    AdminInitiateAuthResponse:
      type: object
      properties:
        ChallengeName:
          $ref: '#/components/schemas/ChallengeNameType'
          description: '<p>The name of the challenge which you are responding to with this call. This is returned to you in the <code>AdminInitiateAuth</code> response if you need to pass another challenge.</p> <ul> <li> <p> <code>MFA_SETUP</code>: If MFA is required, users who do not have at least one of the MFA methods set up are presented with an <code>MFA_SETUP</code> challenge. The user must set up at least one MFA type to continue to authenticate.</p> </li> <li> <p> <code>SELECT_MFA_TYPE</code>: Selects the MFA type. Valid MFA options are <code>SMS_MFA</code> for text SMS MFA, and <code>SOFTWARE_TOKEN_MFA</code> for TOTP software token MFA.</p> </li> <li> <p> <code>SMS_MFA</code>: Next challenge is to supply an <code>SMS_MFA_CODE</code>, delivered via SMS.</p> </li> <li> <p> <code>PASSWORD_VERIFIER</code>: Next challenge is to supply <code>PASSWORD_CLAIM_SIGNATURE</code>, <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, and <code>TIMESTAMP</code> after the client-side SRP calculations.</p> </li> <li> <p> <code>CUSTOM_CHALLENGE</code>: This is returned if your custom authentication flow determines that the user should pass another challenge before tokens are issued.</p> </li> <li> <p> <code>DEVICE_SRP_AUTH</code>: If device tracking was enabled on your user pool and the previous challenges were passed, this challenge is returned so that Amazon Cognito can start tracking this device.</p> </li> <li> <p> <code>DEVICE_PASSWORD_VERIFIER</code>: Similar to <code>PASSWORD_VERIFIER</code>, but for devices only.</p> </li> <li> <p> <code>ADMIN_NO_SRP_AUTH</code>: This is returned if you need to authenticate with <code>USERNAME</code> and <code>PASSWORD</code> directly. An app client must be enabled to use this flow.</p> </li> <li> <p> <code>NEW_PASSWORD_REQUIRED</code>: For users who are required to change their passwords after successful first login. This challenge should be passed with <code>NEW_PASSWORD</code> and any other required attributes.</p> </li> <li> <p> <code>MFA_SETUP</code>: For users who are required to setup an MFA factor before they can sign-in. The MFA types enabled for the user pool will be listed in the challenge parameters <code>MFA_CAN_SETUP</code> value. </p> <p> To setup software token MFA, use the session returned here from <code>InitiateAuth</code> as an input to <code>AssociateSoftwareToken</code>, and use the session returned by <code>VerifySoftwareToken</code> as an input to <code>RespondToAuthChallenge</code> with challenge name <code>MFA_SETUP</code> to complete sign-in. To setup SMS MFA, users will need help from an administrator to add a phone number to their account and then call <code>InitiateAuth</code> again to restart sign-in.</p> </li> </ul>'
        Session:
          $ref: '#/components/schemas/SessionType'
          description: 'The session which should be passed both ways in challenge-response calls to the service. If <code>AdminInitiateAuth</code> or <code>AdminRespondToAuthChallenge</code> API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>AdminRespondToAuthChallenge</code> API call.'
        ChallengeParameters:
          $ref: '#/components/schemas/ChallengeParametersType'
          description: '<p>The challenge parameters. These are returned to you in the <code>AdminInitiateAuth</code> response if you need to pass another challenge. The responses in this parameter should be used to compute inputs to the next call (<code>AdminRespondToAuthChallenge</code>).</p> <p>All challenges require <code>USERNAME</code> and <code>SECRET_HASH</code> (if applicable).</p> <p>The value of the <code>USER_ID_FOR_SRP</code> attribute will be the user''s actual username, not an alias (such as email address or phone number), even if you specified an alias in your call to <code>AdminInitiateAuth</code>. This is because, in the <code>AdminRespondToAuthChallenge</code> API <code>ChallengeResponses</code>, the <code>USERNAME</code> attribute cannot be an alias.</p>'
        AuthenticationResult:
          $ref: '#/components/schemas/AuthenticationResultType'
          description: 'The result of the authentication response. This is only returned if the caller does not need to pass another challenge. If the caller does need to pass another challenge before it gets tokens, <code>ChallengeName</code>, <code>ChallengeParameters</code>, and <code>Session</code> are returned.'
      description: 'Initiates the authentication response, as an administrator.'
    AdminInitiateAuthRequest:
      type: object
      required:
        - UserPoolId
        - ClientId
        - AuthFlow
      title: AdminInitiateAuthRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The ID of the Amazon Cognito user pool.
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
          description: The app client ID.
        AuthFlow:
          $ref: '#/components/schemas/AuthFlowType'
          description: '<p>The authentication flow for this call to execute. The API action will depend on this value. For example:</p> <ul> <li> <p> <code>REFRESH_TOKEN_AUTH</code> will take in a valid refresh token and return new tokens.</p> </li> <li> <p> <code>USER_SRP_AUTH</code> will take in <code>USERNAME</code> and <code>SRP_A</code> and return the SRP variables to be used for next challenge execution.</p> </li> <li> <p> <code>USER_PASSWORD_AUTH</code> will take in <code>USERNAME</code> and <code>PASSWORD</code> and return the next challenge or tokens.</p> </li> </ul> <p>Valid values include:</p> <ul> <li> <p> <code>USER_SRP_AUTH</code>: Authentication flow for the Secure Remote Password (SRP) protocol.</p> </li> <li> <p> <code>REFRESH_TOKEN_AUTH</code>/<code>REFRESH_TOKEN</code>: Authentication flow for refreshing the access token and ID token by supplying a valid refresh token.</p> </li> <li> <p> <code>CUSTOM_AUTH</code>: Custom authentication flow.</p> </li> <li> <p> <code>ADMIN_NO_SRP_AUTH</code>: Non-SRP authentication flow; you can pass in the USERNAME and PASSWORD directly if the flow is enabled for calling the app client.</p> </li> <li> <p> <code>USER_PASSWORD_AUTH</code>: Non-SRP authentication flow; USERNAME and PASSWORD are passed directly. If a user migration Lambda trigger is set, this flow will invoke the user migration Lambda if the USERNAME is not found in the user pool. </p> </li> <li> <p> <code>ADMIN_USER_PASSWORD_AUTH</code>: Admin-based user password authentication. This replaces the <code>ADMIN_NO_SRP_AUTH</code> authentication flow. In this flow, Cognito receives the password in the request instead of using the SRP process to verify passwords.</p> </li> </ul>'
        AuthParameters:
          $ref: '#/components/schemas/AuthParametersType'
          description: '<p>The authentication parameters. These are inputs corresponding to the <code>AuthFlow</code> that you are invoking. The required values depend on the value of <code>AuthFlow</code>:</p> <ul> <li> <p>For <code>USER_SRP_AUTH</code>: <code>USERNAME</code> (required), <code>SRP_A</code> (required), <code>SECRET_HASH</code> (required if the app client is configured with a client secret), <code>DEVICE_KEY</code>.</p> </li> <li> <p>For <code>REFRESH_TOKEN_AUTH/REFRESH_TOKEN</code>: <code>REFRESH_TOKEN</code> (required), <code>SECRET_HASH</code> (required if the app client is configured with a client secret), <code>DEVICE_KEY</code>.</p> </li> <li> <p>For <code>ADMIN_NO_SRP_AUTH</code>: <code>USERNAME</code> (required), <code>SECRET_HASH</code> (if app client is configured with client secret), <code>PASSWORD</code> (required), <code>DEVICE_KEY</code>.</p> </li> <li> <p>For <code>CUSTOM_AUTH</code>: <code>USERNAME</code> (required), <code>SECRET_HASH</code> (if app client is configured with client secret), <code>DEVICE_KEY</code>. To start the authentication flow with password verification, include <code>ChallengeName: SRP_A</code> and <code>SRP_A: (The SRP_A Value)</code>.</p> </li> </ul>'
        ClientMetadata:
          $ref: '#/components/schemas/ClientMetadataType'
          description: '<p>A map of custom key-value pairs that you can provide as input for certain custom workflows that this action triggers.</p> <p>You create custom workflows by assigning Lambda functions to user pool triggers. When you use the AdminInitiateAuth API action, Amazon Cognito invokes the Lambda functions that are specified for various triggers. The ClientMetadata value is passed as input to the functions for only the following triggers:</p> <ul> <li> <p>Pre signup</p> </li> <li> <p>Pre authentication</p> </li> <li> <p>User migration</p> </li> </ul> <p>When Amazon Cognito invokes the functions for these triggers, it passes a JSON payload, which the function receives as input. This payload contains a <code>validationData</code> attribute, which provides the data that you assigned to the ClientMetadata parameter in your AdminInitiateAuth request. In your function code in Lambda, you can process the <code>validationData</code> value to enhance your workflow for your specific needs.</p> <p>When you use the AdminInitiateAuth API action, Amazon Cognito also invokes the functions for the following triggers, but it does not provide the ClientMetadata value as input:</p> <ul> <li> <p>Post authentication</p> </li> <li> <p>Custom message</p> </li> <li> <p>Pre token generation</p> </li> <li> <p>Create auth challenge</p> </li> <li> <p>Define auth challenge</p> </li> <li> <p>Verify auth challenge</p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <note> <p>Take the following limitations into consideration when you use the ClientMetadata parameter:</p> <ul> <li> <p>Amazon Cognito does not store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration does not include triggers, the ClientMetadata parameter serves no purpose.</p> </li> <li> <p>Amazon Cognito does not validate the ClientMetadata value.</p> </li> <li> <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don''t use it to provide sensitive information.</p> </li> </ul> </note>'
        AnalyticsMetadata:
          $ref: '#/components/schemas/AnalyticsMetadataType'
          description: The analytics metadata for collecting Amazon Pinpoint metrics for <code>AdminInitiateAuth</code> calls.
        ContextData:
          $ref: '#/components/schemas/ContextDataType'
          description: 'Contextual data such as the user''s device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.'
      description: 'Initiates the authorization request, as an administrator.'
    MFAMethodNotFoundException: {}
    PasswordResetRequiredException: {}
    UserNotConfirmedException: {}
    AdminLinkProviderForUserResponse:
      type: object
      properties: {}
    AdminLinkProviderForUserRequest:
      type: object
      required:
        - UserPoolId
        - DestinationUser
        - SourceUser
      title: AdminLinkProviderForUserRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/StringType'
          description: The user pool ID for the user pool.
        DestinationUser:
          $ref: '#/components/schemas/ProviderUserIdentifierType'
          description: '<p>The existing user in the user pool to be linked to the external identity provider user account. Can be a native (Username + Password) Cognito User Pools user or a federated user (for example, a SAML or Facebook user). If the user doesn''t exist, an exception is thrown. This is the user that is returned when the new user (with the linked identity provider attribute) signs in.</p> <p>For a native username + password user, the <code>ProviderAttributeValue</code> for the <code>DestinationUser</code> should be the username in the user pool. For a federated user, it should be the provider-specific <code>user_id</code>.</p> <p>The <code>ProviderAttributeName</code> of the <code>DestinationUser</code> is ignored.</p> <p>The <code>ProviderName</code> should be set to <code>Cognito</code> for users in Cognito user pools.</p>'
        SourceUser:
          $ref: '#/components/schemas/ProviderUserIdentifierType'
          description: '<p>An external identity provider account for a user who does not currently exist yet in the user pool. This user must be a federated user (for example, a SAML or Facebook user), not another native user.</p> <p>If the <code>SourceUser</code> is a federated social identity provider user (Facebook, Google, or Login with Amazon), you must set the <code>ProviderAttributeName</code> to <code>Cognito_Subject</code>. For social identity providers, the <code>ProviderName</code> will be <code>Facebook</code>, <code>Google</code>, or <code>LoginWithAmazon</code>, and Cognito will automatically parse the Facebook, Google, and Login with Amazon tokens for <code>id</code>, <code>sub</code>, and <code>user_id</code>, respectively. The <code>ProviderAttributeValue</code> for the user must be the same value as the <code>id</code>, <code>sub</code>, or <code>user_id</code> value found in the social identity provider token.</p> <p/> <p>For SAML, the <code>ProviderAttributeName</code> can be any value that matches a claim in the SAML assertion. If you wish to link SAML users based on the subject of the SAML assertion, you should map the subject to a claim through the SAML identity provider and submit that claim name as the <code>ProviderAttributeName</code>. If you set <code>ProviderAttributeName</code> to <code>Cognito_Subject</code>, Cognito will automatically parse the default unique identifier found in the subject from the SAML token.</p>'
    AdminListDevicesResponse:
      type: object
      properties:
        Devices:
          $ref: '#/components/schemas/DeviceListType'
          description: The devices in the list of devices response.
        PaginationToken:
          $ref: '#/components/schemas/SearchPaginationTokenType'
          description: The pagination token.
      description: 'Lists the device''s response, as an administrator.'
    AdminListDevicesRequest:
      type: object
      required:
        - UserPoolId
        - Username
      title: AdminListDevicesRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID.
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The user name.
        Limit:
          $ref: '#/components/schemas/QueryLimitType'
          description: The limit of the devices request.
        PaginationToken:
          $ref: '#/components/schemas/SearchPaginationTokenType'
          description: The pagination token.
      description: 'Represents the request to list devices, as an administrator.'
    AdminListGroupsForUserResponse:
      type: object
      properties:
        Groups:
          $ref: '#/components/schemas/GroupListType'
          description: The groups that the user belongs to.
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
          description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.'
    AdminListGroupsForUserRequest:
      type: object
      required:
        - Username
        - UserPoolId
      title: AdminListGroupsForUserRequest
      properties:
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The username for the user.
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool.
        Limit:
          $ref: '#/components/schemas/QueryLimitType'
          description: The limit of the request to list groups.
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
          description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.'
    AdminListUserAuthEventsResponse:
      type: object
      properties:
        AuthEvents:
          $ref: '#/components/schemas/AuthEventsType'
          description: 'The response object. It includes the <code>EventID</code>, <code>EventType</code>, <code>CreationDate</code>, <code>EventRisk</code>, and <code>EventResponse</code>.'
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
          description: A pagination token.
    AdminListUserAuthEventsRequest:
      type: object
      required:
        - UserPoolId
        - Username
      title: AdminListUserAuthEventsRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID.
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The user pool username or an alias.
        MaxResults:
          $ref: '#/components/schemas/QueryLimitType'
          description: The maximum number of authentication events to return.
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
          description: A pagination token.
    UserPoolAddOnNotEnabledException: {}
    AdminRemoveUserFromGroupRequest:
      type: object
      required:
        - UserPoolId
        - Username
        - GroupName
      title: AdminRemoveUserFromGroupRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool.
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The username for the user.
        GroupName:
          $ref: '#/components/schemas/GroupNameType'
          description: The group name.
    AdminResetUserPasswordResponse:
      type: object
      properties: {}
      description: Represents the response from the server to reset a user password as an administrator.
    AdminResetUserPasswordRequest:
      type: object
      required:
        - UserPoolId
        - Username
      title: AdminResetUserPasswordRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool where you want to reset the user's password.
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The user name of the user whose password you wish to reset.
        ClientMetadata:
          $ref: '#/components/schemas/ClientMetadataType'
          description: '<p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. </p> <p>You create custom workflows by assigning Lambda functions to user pool triggers. When you use the AdminResetUserPassword API action, Amazon Cognito invokes the function that is assigned to the <i>custom message</i> trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a <code>clientMetadata</code> attribute, which provides the data that you assigned to the ClientMetadata parameter in your AdminResetUserPassword request. In your function code in Lambda, you can process the <code>clientMetadata</code> value to enhance your workflow for your specific needs.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <note> <p>Take the following limitations into consideration when you use the ClientMetadata parameter:</p> <ul> <li> <p>Amazon Cognito does not store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration does not include triggers, the ClientMetadata parameter serves no purpose.</p> </li> <li> <p>Amazon Cognito does not validate the ClientMetadata value.</p> </li> <li> <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don''t use it to provide sensitive information.</p> </li> </ul> </note>'
      description: Represents the request to reset a user's password as an administrator.
    InvalidEmailRoleAccessPolicyException: {}
    AdminRespondToAuthChallengeResponse:
      type: object
      properties:
        ChallengeName:
          $ref: '#/components/schemas/ChallengeNameType'
          description: 'The name of the challenge. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminInitiateAuth.html">AdminInitiateAuth</a>.'
        Session:
          $ref: '#/components/schemas/SessionType'
          description: 'The session which should be passed both ways in challenge-response calls to the service. If the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>RespondToAuthChallenge</code> API call.'
        ChallengeParameters:
          $ref: '#/components/schemas/ChallengeParametersType'
          description: 'The challenge parameters. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminInitiateAuth.html">AdminInitiateAuth</a>.'
        AuthenticationResult:
          $ref: '#/components/schemas/AuthenticationResultType'
          description: The result returned by the server in response to the authentication request.
      description: 'Responds to the authentication challenge, as an administrator.'
    AdminRespondToAuthChallengeRequest:
      type: object
      required:
        - UserPoolId
        - ClientId
        - ChallengeName
      title: AdminRespondToAuthChallengeRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The ID of the Amazon Cognito user pool.
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
          description: The app client ID.
        ChallengeName:
          $ref: '#/components/schemas/ChallengeNameType'
          description: 'The challenge name. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminInitiateAuth.html">AdminInitiateAuth</a>.'
        ChallengeResponses:
          $ref: '#/components/schemas/ChallengeResponsesType'
          description: '<p>The challenge responses. These are inputs corresponding to the value of <code>ChallengeName</code>, for example:</p> <ul> <li> <p> <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret).</p> </li> <li> <p> <code>PASSWORD_VERIFIER</code>: <code>PASSWORD_CLAIM_SIGNATURE</code>, <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, <code>TIMESTAMP</code>, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret).</p> </li> <li> <p> <code>ADMIN_NO_SRP_AUTH</code>: <code>PASSWORD</code>, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret). </p> </li> <li> <p> <code>NEW_PASSWORD_REQUIRED</code>: <code>NEW_PASSWORD</code>, any other required attributes, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret). </p> </li> <li> <p> <code>MFA_SETUP</code> requires <code>USERNAME</code>, plus you need to use the session value returned by <code>VerifySoftwareToken</code> in the <code>Session</code> parameter.</p> </li> </ul> <p>The value of the <code>USERNAME</code> attribute must be the user''s actual username, not an alias (such as email address or phone number). To make this easier, the <code>AdminInitiateAuth</code> response includes the actual username value in the <code>USERNAMEUSER_ID_FOR_SRP</code> attribute, even if you specified an alias in your call to <code>AdminInitiateAuth</code>.</p>'
        Session:
          $ref: '#/components/schemas/SessionType'
          description: 'The session which should be passed both ways in challenge-response calls to the service. If <code>InitiateAuth</code> or <code>RespondToAuthChallenge</code> API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>RespondToAuthChallenge</code> API call.'
        AnalyticsMetadata:
          $ref: '#/components/schemas/AnalyticsMetadataType'
          description: The analytics metadata for collecting Amazon Pinpoint metrics for <code>AdminRespondToAuthChallenge</code> calls.
        ContextData:
          $ref: '#/components/schemas/ContextDataType'
          description: 'Contextual data such as the user''s device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.'
        ClientMetadata:
          $ref: '#/components/schemas/ClientMetadataType'
          description: '<p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. </p> <p>You create custom workflows by assigning Lambda functions to user pool triggers. When you use the AdminRespondToAuthChallenge API action, Amazon Cognito invokes any functions that are assigned to the following triggers: <i>pre sign-up</i>, <i>custom message</i>, <i>post authentication</i>, <i>user migration</i>, <i>pre token generation</i>, <i>define auth challenge</i>, <i>create auth challenge</i>, and <i>verify auth challenge response</i>. When Amazon Cognito invokes any of these functions, it passes a JSON payload, which the function receives as input. This payload contains a <code>clientMetadata</code> attribute, which provides the data that you assigned to the ClientMetadata parameter in your AdminRespondToAuthChallenge request. In your function code in Lambda, you can process the <code>clientMetadata</code> value to enhance your workflow for your specific needs.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <note> <p>Take the following limitations into consideration when you use the ClientMetadata parameter:</p> <ul> <li> <p>Amazon Cognito does not store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration does not include triggers, the ClientMetadata parameter serves no purpose.</p> </li> <li> <p>Amazon Cognito does not validate the ClientMetadata value.</p> </li> <li> <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don''t use it to provide sensitive information.</p> </li> </ul> </note>'
      description: 'The request to respond to the authentication challenge, as an administrator.'
    CodeMismatchException: {}
    ExpiredCodeException: {}
    SoftwareTokenMFANotFoundException: {}
    AdminSetUserMFAPreferenceResponse:
      type: object
      properties: {}
    AdminSetUserMFAPreferenceRequest:
      type: object
      required:
        - Username
        - UserPoolId
      title: AdminSetUserMFAPreferenceRequest
      properties:
        SMSMfaSettings:
          $ref: '#/components/schemas/SMSMfaSettingsType'
          description: The SMS text message MFA settings.
        SoftwareTokenMfaSettings:
          $ref: '#/components/schemas/SoftwareTokenMfaSettingsType'
          description: The time-based one-time password software token MFA settings.
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The user pool username or alias.
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID.
    AdminSetUserPasswordResponse:
      type: object
      properties: {}
    AdminSetUserPasswordRequest:
      type: object
      required:
        - UserPoolId
        - Username
        - Password
      title: AdminSetUserPasswordRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool where you want to set the user's password.
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The user name of the user whose password you wish to set.
        Password:
          $ref: '#/components/schemas/PasswordType'
          description: The password for the user.
        Permanent:
          $ref: '#/components/schemas/BooleanType'
          description: ' <code>True</code> if the password is permanent, <code>False</code> if it is temporary.'
    AdminSetUserSettingsResponse:
      type: object
      properties: {}
      description: Represents the response from the server to set user settings as an administrator.
    AdminSetUserSettingsRequest:
      type: object
      required:
        - UserPoolId
        - Username
        - MFAOptions
      title: AdminSetUserSettingsRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The ID of the user pool that contains the user that you are setting options for.
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The user name of the user that you are setting options for.
        MFAOptions:
          $ref: '#/components/schemas/MFAOptionListType'
          description: You can use this parameter only to set an SMS configuration that uses SMS for delivery.
      description: You can use this parameter to set an MFA configuration that uses the SMS delivery medium.
    AdminUpdateAuthEventFeedbackResponse:
      type: object
      properties: {}
    AdminUpdateAuthEventFeedbackRequest:
      type: object
      required:
        - UserPoolId
        - Username
        - EventId
        - FeedbackValue
      title: AdminUpdateAuthEventFeedbackRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID.
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The user pool username.
        EventId:
          $ref: '#/components/schemas/EventIdType'
          description: The authentication event ID.
        FeedbackValue:
          $ref: '#/components/schemas/FeedbackValueType'
          description: The authentication event feedback value.
    AdminUpdateDeviceStatusResponse:
      type: object
      properties: {}
      description: 'The status response from the request to update the device, as an administrator.'
    AdminUpdateDeviceStatusRequest:
      type: object
      required:
        - UserPoolId
        - Username
        - DeviceKey
      title: AdminUpdateDeviceStatusRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID.
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The user name.
        DeviceKey:
          $ref: '#/components/schemas/DeviceKeyType'
          description: The device key.
        DeviceRememberedStatus:
          $ref: '#/components/schemas/DeviceRememberedStatusType'
          description: The status indicating whether a device has been remembered or not.
      description: 'The request to update the device status, as an administrator.'
    AdminUpdateUserAttributesResponse:
      type: object
      properties: {}
      description: Represents the response from the server for the request to update user attributes as an administrator.
    AdminUpdateUserAttributesRequest:
      type: object
      required:
        - UserPoolId
        - Username
        - UserAttributes
      title: AdminUpdateUserAttributesRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool where you want to update user attributes.
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The user name of the user for whom you want to update user attributes.
        UserAttributes:
          $ref: '#/components/schemas/AttributeListType'
          description: '<p>An array of name-value pairs representing user attributes.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>'
        ClientMetadata:
          $ref: '#/components/schemas/ClientMetadataType'
          description: '<p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. </p> <p>You create custom workflows by assigning Lambda functions to user pool triggers. When you use the AdminUpdateUserAttributes API action, Amazon Cognito invokes the function that is assigned to the <i>custom message</i> trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a <code>clientMetadata</code> attribute, which provides the data that you assigned to the ClientMetadata parameter in your AdminUpdateUserAttributes request. In your function code in Lambda, you can process the <code>clientMetadata</code> value to enhance your workflow for your specific needs.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <note> <p>Take the following limitations into consideration when you use the ClientMetadata parameter:</p> <ul> <li> <p>Amazon Cognito does not store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration does not include triggers, the ClientMetadata parameter serves no purpose.</p> </li> <li> <p>Amazon Cognito does not validate the ClientMetadata value.</p> </li> <li> <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don''t use it to provide sensitive information.</p> </li> </ul> </note>'
      description: Represents the request to update the user's attributes as an administrator.
    AdminUserGlobalSignOutResponse:
      type: object
      properties: {}
      description: 'The global sign-out response, as an administrator.'
    AdminUserGlobalSignOutRequest:
      type: object
      required:
        - UserPoolId
        - Username
      title: AdminUserGlobalSignOutRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID.
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The user name.
      description: 'The request to sign out of all devices, as an administrator.'
    AssociateSoftwareTokenResponse:
      type: object
      properties:
        SecretCode:
          $ref: '#/components/schemas/SecretCodeType'
          description: A unique generated shared secret code that is used in the TOTP algorithm to generate a one time code.
        Session:
          $ref: '#/components/schemas/SessionType'
          description: The session which should be passed both ways in challenge-response calls to the service. This allows authentication of the user as part of the MFA setup process.
    AssociateSoftwareTokenRequest:
      type: object
      title: AssociateSoftwareTokenRequest
      properties:
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
          description: The access token.
        Session:
          $ref: '#/components/schemas/SessionType'
          description: The session which should be passed both ways in challenge-response calls to the service. This allows authentication of the user as part of the MFA setup process.
    ConcurrentModificationException: {}
    ChangePasswordResponse:
      type: object
      properties: {}
      description: The response from the server to the change password request.
    ChangePasswordRequest:
      type: object
      required:
        - PreviousPassword
        - ProposedPassword
        - AccessToken
      title: ChangePasswordRequest
      properties:
        PreviousPassword:
          $ref: '#/components/schemas/PasswordType'
          description: The old password.
        ProposedPassword:
          $ref: '#/components/schemas/PasswordType'
          description: The new password.
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
          description: The access token.
      description: Represents the request to change a user password.
    ConfirmDeviceResponse:
      type: object
      properties:
        UserConfirmationNecessary:
          $ref: '#/components/schemas/BooleanType'
          description: Indicates whether the user confirmation is necessary to confirm the device response.
      description: Confirms the device response.
    ConfirmDeviceRequest:
      type: object
      required:
        - AccessToken
        - DeviceKey
      title: ConfirmDeviceRequest
      properties:
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
          description: The access token.
        DeviceKey:
          $ref: '#/components/schemas/DeviceKeyType'
          description: The device key.
        DeviceSecretVerifierConfig:
          $ref: '#/components/schemas/DeviceSecretVerifierConfigType'
          description: The configuration of the device secret verifier.
        DeviceName:
          $ref: '#/components/schemas/DeviceNameType'
          description: The device name.
      description: Confirms the device request.
    ConfirmForgotPasswordResponse:
      type: object
      properties: {}
      description: The response from the server that results from a user's request to retrieve a forgotten password.
    ConfirmForgotPasswordRequest:
      type: object
      required:
        - ClientId
        - Username
        - ConfirmationCode
        - Password
      title: ConfirmForgotPasswordRequest
      properties:
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
          description: The app client ID of the app associated with the user pool.
        SecretHash:
          $ref: '#/components/schemas/SecretHashType'
          description: A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The user name of the user for whom you want to enter a code to retrieve a forgotten password.
        ConfirmationCode:
          $ref: '#/components/schemas/ConfirmationCodeType'
          description: 'The confirmation code sent by a user''s request to retrieve a forgotten password. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ForgotPassword.html">ForgotPassword</a>.'
        Password:
          $ref: '#/components/schemas/PasswordType'
          description: The password sent by a user's request to retrieve a forgotten password.
        AnalyticsMetadata:
          $ref: '#/components/schemas/AnalyticsMetadataType'
          description: The Amazon Pinpoint analytics metadata for collecting metrics for <code>ConfirmForgotPassword</code> calls.
        UserContextData:
          $ref: '#/components/schemas/UserContextDataType'
          description: 'Contextual data such as the user''s device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.'
        ClientMetadata:
          $ref: '#/components/schemas/ClientMetadataType'
          description: '<p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. </p> <p>You create custom workflows by assigning Lambda functions to user pool triggers. When you use the ConfirmForgotPassword API action, Amazon Cognito invokes the function that is assigned to the <i>post confirmation</i> trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a <code>clientMetadata</code> attribute, which provides the data that you assigned to the ClientMetadata parameter in your ConfirmForgotPassword request. In your function code in Lambda, you can process the <code>clientMetadata</code> value to enhance your workflow for your specific needs.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <note> <p>Take the following limitations into consideration when you use the ClientMetadata parameter:</p> <ul> <li> <p>Amazon Cognito does not store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration does not include triggers, the ClientMetadata parameter serves no purpose.</p> </li> <li> <p>Amazon Cognito does not validate the ClientMetadata value.</p> </li> <li> <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don''t use it to provide sensitive information.</p> </li> </ul> </note>'
      description: The request representing the confirmation for a password reset.
    ConfirmSignUpResponse:
      type: object
      properties: {}
      description: Represents the response from the server for the registration confirmation.
    ConfirmSignUpRequest:
      type: object
      required:
        - ClientId
        - Username
        - ConfirmationCode
      title: ConfirmSignUpRequest
      properties:
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
          description: The ID of the app client associated with the user pool.
        SecretHash:
          $ref: '#/components/schemas/SecretHashType'
          description: A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The user name of the user whose registration you wish to confirm.
        ConfirmationCode:
          $ref: '#/components/schemas/ConfirmationCodeType'
          description: The confirmation code sent by a user's request to confirm registration.
        ForceAliasCreation:
          $ref: '#/components/schemas/ForceAliasCreation'
          description: 'Boolean to be specified to force user confirmation irrespective of existing alias. By default set to <code>False</code>. If this parameter is set to <code>True</code> and the phone number/email used for sign up confirmation already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user being confirmed. If set to <code>False</code>, the API will throw an <b>AliasExistsException</b> error.'
        AnalyticsMetadata:
          $ref: '#/components/schemas/AnalyticsMetadataType'
          description: The Amazon Pinpoint analytics metadata for collecting metrics for <code>ConfirmSignUp</code> calls.
        UserContextData:
          $ref: '#/components/schemas/UserContextDataType'
          description: 'Contextual data such as the user''s device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.'
        ClientMetadata:
          $ref: '#/components/schemas/ClientMetadataType'
          description: '<p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. </p> <p>You create custom workflows by assigning Lambda functions to user pool triggers. When you use the ConfirmSignUp API action, Amazon Cognito invokes the function that is assigned to the <i>post confirmation</i> trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a <code>clientMetadata</code> attribute, which provides the data that you assigned to the ClientMetadata parameter in your ConfirmSignUp request. In your function code in Lambda, you can process the <code>clientMetadata</code> value to enhance your workflow for your specific needs.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <note> <p>Take the following limitations into consideration when you use the ClientMetadata parameter:</p> <ul> <li> <p>Amazon Cognito does not store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration does not include triggers, the ClientMetadata parameter serves no purpose.</p> </li> <li> <p>Amazon Cognito does not validate the ClientMetadata value.</p> </li> <li> <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don''t use it to provide sensitive information.</p> </li> </ul> </note>'
      description: Represents the request to confirm registration of a user.
    CreateGroupResponse:
      type: object
      properties:
        Group:
          $ref: '#/components/schemas/GroupType'
          description: The group object for the group.
    CreateGroupRequest:
      type: object
      required:
        - GroupName
        - UserPoolId
      title: CreateGroupRequest
      properties:
        GroupName:
          $ref: '#/components/schemas/GroupNameType'
          description: The name of the group. Must be unique.
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool.
        Description:
          $ref: '#/components/schemas/DescriptionType'
          description: A string containing the description of the group.
        RoleArn:
          $ref: '#/components/schemas/ArnType'
          description: The role ARN for the group.
        Precedence:
          $ref: '#/components/schemas/PrecedenceType'
          description: '<p>A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. Zero is the highest precedence value. Groups with lower <code>Precedence</code> values take precedence over groups with higher or null <code>Precedence</code> values. If a user belongs to two or more groups, it is the group with the lowest precedence value whose role ARN will be used in the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the user''s tokens.</p> <p>Two groups can have the same <code>Precedence</code> value. If this happens, neither group takes precedence over the other. If two groups with the same <code>Precedence</code> have the same role ARN, that role is used in the <code>cognito:preferred_role</code> claim in tokens for users in each group. If the two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is not set in users'' tokens.</p> <p>The default <code>Precedence</code> value is null.</p>'
    GroupExistsException: {}
    CreateIdentityProviderResponse:
      type: object
      required:
        - IdentityProvider
      properties:
        IdentityProvider:
          $ref: '#/components/schemas/IdentityProviderType'
          description: The newly created identity provider object.
    CreateIdentityProviderRequest:
      type: object
      required:
        - UserPoolId
        - ProviderName
        - ProviderType
        - ProviderDetails
      title: CreateIdentityProviderRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID.
        ProviderName:
          $ref: '#/components/schemas/ProviderNameTypeV1'
          description: The identity provider name.
        ProviderType:
          $ref: '#/components/schemas/IdentityProviderTypeType'
          description: The identity provider type.
        ProviderDetails:
          $ref: '#/components/schemas/ProviderDetailsType'
          description: '<p>The identity provider details. The following list describes the provider detail keys for each identity provider type.</p> <ul> <li> <p>For Google and Login with Amazon:</p> <ul> <li> <p>client_id</p> </li> <li> <p>client_secret</p> </li> <li> <p>authorize_scopes</p> </li> </ul> </li> <li> <p>For Facebook:</p> <ul> <li> <p>client_id</p> </li> <li> <p>client_secret</p> </li> <li> <p>authorize_scopes</p> </li> <li> <p>api_version</p> </li> </ul> </li> <li> <p>For Sign in with Apple:</p> <ul> <li> <p>client_id</p> </li> <li> <p>team_id</p> </li> <li> <p>key_id</p> </li> <li> <p>private_key</p> </li> <li> <p>authorize_scopes</p> </li> </ul> </li> <li> <p>For OIDC providers:</p> <ul> <li> <p>client_id</p> </li> <li> <p>client_secret</p> </li> <li> <p>attributes_request_method</p> </li> <li> <p>oidc_issuer</p> </li> <li> <p>authorize_scopes</p> </li> <li> <p>authorize_url <i>if not available from discovery URL specified by oidc_issuer key</i> </p> </li> <li> <p>token_url <i>if not available from discovery URL specified by oidc_issuer key</i> </p> </li> <li> <p>attributes_url <i>if not available from discovery URL specified by oidc_issuer key</i> </p> </li> <li> <p>jwks_uri <i>if not available from discovery URL specified by oidc_issuer key</i> </p> </li> </ul> </li> <li> <p>For SAML providers:</p> <ul> <li> <p>MetadataFile OR MetadataURL</p> </li> <li> <p>IDPSignout <i>optional</i> </p> </li> </ul> </li> </ul>'
        AttributeMapping:
          $ref: '#/components/schemas/AttributeMappingType'
          description: A mapping of identity provider attributes to standard and custom user pool attributes.
        IdpIdentifiers:
          $ref: '#/components/schemas/IdpIdentifiersListType'
          description: A list of identity provider identifiers.
    DuplicateProviderException: {}
    CreateResourceServerResponse:
      type: object
      required:
        - ResourceServer
      properties:
        ResourceServer:
          $ref: '#/components/schemas/ResourceServerType'
          description: The newly created resource server.
    CreateResourceServerRequest:
      type: object
      required:
        - UserPoolId
        - Identifier
        - Name
      title: CreateResourceServerRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool.
        Identifier:
          $ref: '#/components/schemas/ResourceServerIdentifierType'
          description: 'A unique resource server identifier for the resource server. This could be an HTTPS endpoint where the resource server is located. For example, <code>https://my-weather-api.example.com</code>.'
        Name:
          $ref: '#/components/schemas/ResourceServerNameType'
          description: A friendly name for the resource server.
        Scopes:
          $ref: '#/components/schemas/ResourceServerScopeListType'
          description: 'A list of scopes. Each scope is map, where the keys are <code>name</code> and <code>description</code>.'
    CreateUserImportJobResponse:
      type: object
      properties:
        UserImportJob:
          $ref: '#/components/schemas/UserImportJobType'
          description: The job object that represents the user import job.
      description: Represents the response from the server to the request to create the user import job.
    CreateUserImportJobRequest:
      type: object
      required:
        - JobName
        - UserPoolId
        - CloudWatchLogsRoleArn
      title: CreateUserImportJobRequest
      properties:
        JobName:
          $ref: '#/components/schemas/UserImportJobNameType'
          description: The job name for the user import job.
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool that the users are being imported into.
        CloudWatchLogsRoleArn:
          $ref: '#/components/schemas/ArnType'
          description: The role ARN for the Amazon CloudWatch Logging role for the user import job.
      description: Represents the request to create the user import job.
    CreateUserPoolResponse:
      type: object
      properties:
        UserPool:
          $ref: '#/components/schemas/UserPoolType'
          description: A container for the user pool details.
      description: Represents the response from the server for the request to create a user pool.
    CreateUserPoolRequest:
      type: object
      required:
        - PoolName
      title: CreateUserPoolRequest
      properties:
        PoolName:
          $ref: '#/components/schemas/UserPoolNameType'
          description: A string used to name the user pool.
        Policies:
          $ref: '#/components/schemas/UserPoolPolicyType'
          description: The policies associated with the new user pool.
        LambdaConfig:
          $ref: '#/components/schemas/LambdaConfigType'
          description: '<p>The Lambda trigger configuration information for the new user pool.</p> <note> <p>In a push model, event sources (such as Amazon S3 and custom applications) need permission to invoke a function. So you will need to make an extra call to add permission for these event sources to invoke your Lambda function.</p> <p/> <p>For more information on using the Lambda API to add permission, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/API_AddPermission.html"> AddPermission </a>. </p> <p>For adding permission using the CLI, see <a href="https://docs.aws.amazon.com/cli/latest/reference/lambda/add-permission.html"> add-permission </a>.</p> </note>'
        AutoVerifiedAttributes:
          $ref: '#/components/schemas/VerifiedAttributesListType'
          description: 'The attributes to be auto-verified. Possible values: <b>email</b>, <b>phone_number</b>.'
        AliasAttributes:
          $ref: '#/components/schemas/AliasAttributesListType'
          description: 'Attributes supported as an alias for this user pool. Possible values: <b>phone_number</b>, <b>email</b>, or <b>preferred_username</b>.'
        UsernameAttributes:
          $ref: '#/components/schemas/UsernameAttributesListType'
          description: Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up.
        SmsVerificationMessage:
          $ref: '#/components/schemas/SmsVerificationMessageType'
          description: A string representing the SMS verification message.
        EmailVerificationMessage:
          $ref: '#/components/schemas/EmailVerificationMessageType'
          description: 'A string representing the email verification message. EmailVerificationMessage is allowed only if <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount">EmailSendingAccount</a> is DEVELOPER. '
        EmailVerificationSubject:
          $ref: '#/components/schemas/EmailVerificationSubjectType'
          description: 'A string representing the email verification subject. EmailVerificationSubject is allowed only if <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount">EmailSendingAccount</a> is DEVELOPER. '
        VerificationMessageTemplate:
          $ref: '#/components/schemas/VerificationMessageTemplateType'
          description: The template for the verification message that the user sees when the app requests permission to access the user's information.
        SmsAuthenticationMessage:
          $ref: '#/components/schemas/SmsVerificationMessageType'
          description: A string representing the SMS authentication message.
        MfaConfiguration:
          $ref: '#/components/schemas/UserPoolMfaType'
          description: Specifies MFA configuration details.
        DeviceConfiguration:
          $ref: '#/components/schemas/DeviceConfigurationType'
          description: The device configuration.
        EmailConfiguration:
          $ref: '#/components/schemas/EmailConfigurationType'
          description: The email configuration.
        SmsConfiguration:
          $ref: '#/components/schemas/SmsConfigurationType'
          description: The SMS configuration.
        UserPoolTags:
          $ref: '#/components/schemas/UserPoolTagsType'
          description: 'The tag keys and values to assign to the user pool. A tag is a label that you can use to categorize and manage user pools in different ways, such as by purpose, owner, environment, or other criteria.'
        AdminCreateUserConfig:
          $ref: '#/components/schemas/AdminCreateUserConfigType'
          description: The configuration for <code>AdminCreateUser</code> requests.
        Schema:
          $ref: '#/components/schemas/SchemaAttributesListType'
          description: An array of schema attributes for the new user pool. These attributes can be standard or custom attributes.
        UserPoolAddOns:
          $ref: '#/components/schemas/UserPoolAddOnsType'
          description: Used to enable advanced security risk detection. Set the key <code>AdvancedSecurityMode</code> to the value "AUDIT".
        UsernameConfiguration:
          $ref: '#/components/schemas/UsernameConfigurationType'
          description: 'You can choose to set case sensitivity on the username input for the selected sign-in option. For example, when this is set to <code>False</code>, users will be able to sign in using either "username" or "Username". This configuration is immutable once it has been set. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UsernameConfigurationType.html">UsernameConfigurationType</a>.'
        AccountRecoverySetting:
          $ref: '#/components/schemas/AccountRecoverySettingType'
          description: 'Use this setting to define which verified available method a user can use to recover their password when they call <code>ForgotPassword</code>. It allows you to define a preferred method when a user has more than one method available. With this setting, SMS does not qualify for a valid password recovery mechanism if the user also has SMS MFA enabled. In the absence of this setting, Cognito uses the legacy behavior to determine the recovery method where SMS is preferred over email.'
      description: Represents the request to create a user pool.
    UserPoolTaggingException: {}
    CreateUserPoolClientResponse:
      type: object
      properties:
        UserPoolClient:
          $ref: '#/components/schemas/UserPoolClientType'
          description: The user pool client that was just created.
      description: Represents the response from the server to create a user pool client.
    CreateUserPoolClientRequest:
      type: object
      required:
        - UserPoolId
        - ClientName
      title: CreateUserPoolClientRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool where you want to create a user pool client.
        ClientName:
          $ref: '#/components/schemas/ClientNameType'
          description: The client name for the user pool client you would like to create.
        GenerateSecret:
          $ref: '#/components/schemas/GenerateSecret'
          description: Boolean to specify whether you want to generate a secret for the user pool client being created.
        RefreshTokenValidity:
          $ref: '#/components/schemas/RefreshTokenValidityType'
          description: 'The time limit, in days, after which the refresh token is no longer valid and cannot be used.'
        AccessTokenValidity:
          $ref: '#/components/schemas/AccessTokenValidityType'
          description: 'The time limit, between 5 minutes and 1 day, after which the access token is no longer valid and cannot be used. This value will be overridden if you have entered a value in TokenValidityUnits.'
        IdTokenValidity:
          $ref: '#/components/schemas/IdTokenValidityType'
          description: 'The time limit, between 5 minutes and 1 day, after which the ID token is no longer valid and cannot be used. This value will be overridden if you have entered a value in TokenValidityUnits.'
        TokenValidityUnits:
          $ref: '#/components/schemas/TokenValidityUnitsType'
          description: 'The units in which the validity times are represented in. Default for RefreshToken is days, and default for ID and access tokens are hours.'
        ReadAttributes:
          $ref: '#/components/schemas/ClientPermissionListType'
          description: The read attributes.
        WriteAttributes:
          $ref: '#/components/schemas/ClientPermissionListType'
          description: '<p>The user pool attributes that the app client can write to.</p> <p>If your app client allows users to sign in through an identity provider, this array must include all attributes that are mapped to identity provider attributes. Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider. If your app client lacks write access to a mapped attribute, Amazon Cognito throws an error when it attempts to update the attribute. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html">Specifying Identity Provider Attribute Mappings for Your User Pool</a>.</p>'
        ExplicitAuthFlows:
          $ref: '#/components/schemas/ExplicitAuthFlowsListType'
          description: '<p>The authentication flows that are supported by the user pool clients. Flow names without the <code>ALLOW_</code> prefix are deprecated in favor of new names with the <code>ALLOW_</code> prefix. Note that values with <code>ALLOW_</code> prefix cannot be used along with values without <code>ALLOW_</code> prefix.</p> <p>Valid values include:</p> <ul> <li> <p> <code>ALLOW_ADMIN_USER_PASSWORD_AUTH</code>: Enable admin based user password authentication flow <code>ADMIN_USER_PASSWORD_AUTH</code>. This setting replaces the <code>ADMIN_NO_SRP_AUTH</code> setting. With this authentication flow, Cognito receives the password in the request instead of using the SRP (Secure Remote Password protocol) protocol to verify passwords.</p> </li> <li> <p> <code>ALLOW_CUSTOM_AUTH</code>: Enable Lambda trigger based authentication.</p> </li> <li> <p> <code>ALLOW_USER_PASSWORD_AUTH</code>: Enable user password-based authentication. In this flow, Cognito receives the password in the request instead of using the SRP protocol to verify passwords.</p> </li> <li> <p> <code>ALLOW_USER_SRP_AUTH</code>: Enable SRP based authentication.</p> </li> <li> <p> <code>ALLOW_REFRESH_TOKEN_AUTH</code>: Enable authflow to refresh tokens.</p> </li> </ul>'
        SupportedIdentityProviders:
          $ref: '#/components/schemas/SupportedIdentityProvidersListType'
          description: 'A list of provider names for the identity providers that are supported on this client. The following are supported: <code>COGNITO</code>, <code>Facebook</code>, <code>Google</code> and <code>LoginWithAmazon</code>.'
        CallbackURLs:
          $ref: '#/components/schemas/CallbackURLsListType'
          description: '<p>A list of allowed redirect (callback) URLs for the identity providers.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href="https://tools.ietf.org/html/rfc6749#section-3.1.2">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>'
        LogoutURLs:
          $ref: '#/components/schemas/LogoutURLsListType'
          description: A list of allowed logout URLs for the identity providers.
        DefaultRedirectURI:
          $ref: '#/components/schemas/RedirectUrlType'
          description: '<p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href="https://tools.ietf.org/html/rfc6749#section-3.1.2">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>'
        AllowedOAuthFlows:
          $ref: '#/components/schemas/OAuthFlowsType'
          description: '<p>The allowed OAuth flows.</p> <p>Set to <code>code</code> to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint.</p> <p>Set to <code>implicit</code> to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.</p> <p>Set to <code>client_credentials</code> to specify that the client should get the access token (and, optionally, ID token, based on scopes) from the token endpoint using a combination of client and client_secret.</p>'
        AllowedOAuthScopes:
          $ref: '#/components/schemas/ScopeListType'
          description: 'The allowed OAuth scopes. Possible values provided by OAuth are: <code>phone</code>, <code>email</code>, <code>openid</code>, and <code>profile</code>. Possible values provided by Amazon Web Services are: <code>aws.cognito.signin.user.admin</code>. Custom scopes created in Resource Servers are also supported.'
        AllowedOAuthFlowsUserPoolClient:
          $ref: '#/components/schemas/BooleanType'
          description: Set to true if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.
        AnalyticsConfiguration:
          $ref: '#/components/schemas/AnalyticsConfigurationType'
          description: '<p>The Amazon Pinpoint analytics configuration for collecting metrics for this user pool.</p> <note> <p>In regions where Pinpoint is not available, Cognito User Pools only supports sending events to Amazon Pinpoint projects in us-east-1. In regions where Pinpoint is available, Cognito User Pools will support sending events to Amazon Pinpoint projects within that same region. </p> </note>'
        PreventUserExistenceErrors:
          $ref: '#/components/schemas/PreventUserExistenceErrorTypes'
          description: '<p>Use this setting to choose which errors and responses are returned by Cognito APIs during authentication, account confirmation, and password recovery when the user does not exist in the user pool. When set to <code>ENABLED</code> and the user does not exist, authentication returns an error indicating either the username or password was incorrect, and account confirmation and password recovery return a response indicating a code was sent to a simulated destination. When set to <code>LEGACY</code>, those APIs will return a <code>UserNotFoundException</code> exception if the user does not exist in the user pool.</p> <p>Valid values include:</p> <ul> <li> <p> <code>ENABLED</code> - This prevents user existence-related errors.</p> </li> <li> <p> <code>LEGACY</code> - This represents the old behavior of Cognito where user existence related errors are not prevented.</p> </li> </ul> <note> <p>After February 15th 2020, the value of <code>PreventUserExistenceErrors</code> will default to <code>ENABLED</code> for newly created user pool clients if no value is provided.</p> </note>'
        EnableTokenRevocation:
          $ref: '#/components/schemas/WrappedBooleanType'
          description: '<p>Enables or disables token revocation. For more information about revoking tokens, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html">RevokeToken</a>.</p> <p>If you don''t include this parameter, token revocation is automatically enabled for the new user pool client.</p>'
      description: Represents the request to create a user pool client.
    ScopeDoesNotExistException: {}
    InvalidOAuthFlowException: {}
    CreateUserPoolDomainResponse:
      type: object
      properties:
        CloudFrontDomain:
          $ref: '#/components/schemas/DomainType'
          description: The Amazon CloudFront endpoint that you use as the target of the alias that you set up with your Domain Name Service (DNS) provider.
    CreateUserPoolDomainRequest:
      type: object
      required:
        - Domain
        - UserPoolId
      title: CreateUserPoolDomainRequest
      properties:
        Domain:
          $ref: '#/components/schemas/DomainType'
          description: The domain string.
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID.
        CustomDomainConfig:
          $ref: '#/components/schemas/CustomDomainConfigType'
          description: '<p>The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application.</p> <p>Provide this parameter only if you want to use a custom domain for your user pool. Otherwise, you can exclude this parameter and use the Amazon Cognito hosted domain instead.</p> <p>For more information about the hosted domain and custom domains, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-assign-domain.html">Configuring a User Pool Domain</a>.</p>'
    DeleteGroupRequest:
      type: object
      required:
        - GroupName
        - UserPoolId
      title: DeleteGroupRequest
      properties:
        GroupName:
          $ref: '#/components/schemas/GroupNameType'
          description: The name of the group.
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool.
    DeleteIdentityProviderRequest:
      type: object
      required:
        - UserPoolId
        - ProviderName
      title: DeleteIdentityProviderRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID.
        ProviderName:
          $ref: '#/components/schemas/ProviderNameType'
          description: The identity provider name.
    UnsupportedIdentityProviderException: {}
    DeleteResourceServerRequest:
      type: object
      required:
        - UserPoolId
        - Identifier
      title: DeleteResourceServerRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool that hosts the resource server.
        Identifier:
          $ref: '#/components/schemas/ResourceServerIdentifierType'
          description: The identifier for the resource server.
    DeleteUserRequest:
      type: object
      required:
        - AccessToken
      title: DeleteUserRequest
      properties:
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
          description: The access token from a request to delete a user.
      description: Represents the request to delete a user.
    DeleteUserAttributesResponse:
      type: object
      properties: {}
      description: Represents the response from the server to delete user attributes.
    DeleteUserAttributesRequest:
      type: object
      required:
        - UserAttributeNames
        - AccessToken
      title: DeleteUserAttributesRequest
      properties:
        UserAttributeNames:
          $ref: '#/components/schemas/AttributeNameListType'
          description: '<p>An array of strings representing the user attribute names you wish to delete.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>'
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
          description: The access token used in the request to delete user attributes.
      description: Represents the request to delete user attributes.
    DeleteUserPoolRequest:
      type: object
      required:
        - UserPoolId
      title: DeleteUserPoolRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool you want to delete.
      description: Represents the request to delete a user pool.
    DeleteUserPoolClientRequest:
      type: object
      required:
        - UserPoolId
        - ClientId
      title: DeleteUserPoolClientRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool where you want to delete the client.
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
          description: The app client ID of the app associated with the user pool.
      description: Represents the request to delete a user pool client.
    DeleteUserPoolDomainResponse:
      type: object
      properties: {}
    DeleteUserPoolDomainRequest:
      type: object
      required:
        - Domain
        - UserPoolId
      title: DeleteUserPoolDomainRequest
      properties:
        Domain:
          $ref: '#/components/schemas/DomainType'
          description: The domain string.
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID.
    DescribeIdentityProviderResponse:
      type: object
      required:
        - IdentityProvider
      properties:
        IdentityProvider:
          $ref: '#/components/schemas/IdentityProviderType'
          description: The identity provider that was deleted.
    DescribeIdentityProviderRequest:
      type: object
      required:
        - UserPoolId
        - ProviderName
      title: DescribeIdentityProviderRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID.
        ProviderName:
          $ref: '#/components/schemas/ProviderNameType'
          description: The identity provider name.
    DescribeResourceServerResponse:
      type: object
      required:
        - ResourceServer
      properties:
        ResourceServer:
          $ref: '#/components/schemas/ResourceServerType'
          description: The resource server.
    DescribeResourceServerRequest:
      type: object
      required:
        - UserPoolId
        - Identifier
      title: DescribeResourceServerRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool that hosts the resource server.
        Identifier:
          $ref: '#/components/schemas/ResourceServerIdentifierType'
          description: The identifier for the resource server
    DescribeRiskConfigurationResponse:
      type: object
      required:
        - RiskConfiguration
      properties:
        RiskConfiguration:
          $ref: '#/components/schemas/RiskConfigurationType'
          description: The risk configuration.
    DescribeRiskConfigurationRequest:
      type: object
      required:
        - UserPoolId
      title: DescribeRiskConfigurationRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID.
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
          description: The app client ID.
    DescribeUserImportJobResponse:
      type: object
      properties:
        UserImportJob:
          $ref: '#/components/schemas/UserImportJobType'
          description: The job object that represents the user import job.
      description: Represents the response from the server to the request to describe the user import job.
    DescribeUserImportJobRequest:
      type: object
      required:
        - UserPoolId
        - JobId
      title: DescribeUserImportJobRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool that the users are being imported into.
        JobId:
          $ref: '#/components/schemas/UserImportJobIdType'
          description: The job ID for the user import job.
      description: Represents the request to describe the user import job.
    DescribeUserPoolResponse:
      type: object
      properties:
        UserPool:
          $ref: '#/components/schemas/UserPoolType'
          description: The container of metadata returned by the server to describe the pool.
      description: Represents the response to describe the user pool.
    DescribeUserPoolRequest:
      type: object
      required:
        - UserPoolId
      title: DescribeUserPoolRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool you want to describe.
      description: Represents the request to describe the user pool.
    DescribeUserPoolClientResponse:
      type: object
      properties:
        UserPoolClient:
          $ref: '#/components/schemas/UserPoolClientType'
          description: The user pool client from a server response to describe the user pool client.
      description: Represents the response from the server from a request to describe the user pool client.
    DescribeUserPoolClientRequest:
      type: object
      required:
        - UserPoolId
        - ClientId
      title: DescribeUserPoolClientRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool you want to describe.
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
          description: The app client ID of the app associated with the user pool.
      description: Represents the request to describe a user pool client.
    DescribeUserPoolDomainResponse:
      type: object
      properties:
        DomainDescription:
          $ref: '#/components/schemas/DomainDescriptionType'
          description: A domain description object containing information about the domain.
    DescribeUserPoolDomainRequest:
      type: object
      required:
        - Domain
      title: DescribeUserPoolDomainRequest
      properties:
        Domain:
          $ref: '#/components/schemas/DomainType'
          description: The domain string.
    ForgetDeviceRequest:
      type: object
      required:
        - DeviceKey
      title: ForgetDeviceRequest
      properties:
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
          description: The access token for the forgotten device request.
        DeviceKey:
          $ref: '#/components/schemas/DeviceKeyType'
          description: The device key.
      description: Represents the request to forget the device.
    ForgotPasswordResponse:
      type: object
      properties:
        CodeDeliveryDetails:
          $ref: '#/components/schemas/CodeDeliveryDetailsType'
          description: The code delivery details returned by the server in response to the request to reset a password.
      description: Respresents the response from the server regarding the request to reset a password.
    ForgotPasswordRequest:
      type: object
      required:
        - ClientId
        - Username
      title: ForgotPasswordRequest
      properties:
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
          description: The ID of the client associated with the user pool.
        SecretHash:
          $ref: '#/components/schemas/SecretHashType'
          description: A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        UserContextData:
          $ref: '#/components/schemas/UserContextDataType'
          description: 'Contextual data such as the user''s device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.'
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The user name of the user for whom you want to enter a code to reset a forgotten password.
        AnalyticsMetadata:
          $ref: '#/components/schemas/AnalyticsMetadataType'
          description: The Amazon Pinpoint analytics metadata for collecting metrics for <code>ForgotPassword</code> calls.
        ClientMetadata:
          $ref: '#/components/schemas/ClientMetadataType'
          description: '<p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. </p> <p>You create custom workflows by assigning Lambda functions to user pool triggers. When you use the ForgotPassword API action, Amazon Cognito invokes any functions that are assigned to the following triggers: <i>pre sign-up</i>, <i>custom message</i>, and <i>user migration</i>. When Amazon Cognito invokes any of these functions, it passes a JSON payload, which the function receives as input. This payload contains a <code>clientMetadata</code> attribute, which provides the data that you assigned to the ClientMetadata parameter in your ForgotPassword request. In your function code in Lambda, you can process the <code>clientMetadata</code> value to enhance your workflow for your specific needs.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <note> <p>Take the following limitations into consideration when you use the ClientMetadata parameter:</p> <ul> <li> <p>Amazon Cognito does not store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration does not include triggers, the ClientMetadata parameter serves no purpose.</p> </li> <li> <p>Amazon Cognito does not validate the ClientMetadata value.</p> </li> <li> <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don''t use it to provide sensitive information.</p> </li> </ul> </note>'
      description: Represents the request to reset a user's password.
    GetCSVHeaderResponse:
      type: object
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool that the users are to be imported into.
        CSVHeader:
          $ref: '#/components/schemas/ListOfStringTypes'
          description: The header information for the .csv file for the user import job.
      description: Represents the response from the server to the request to get the header information for the .csv file for the user import job.
    GetCSVHeaderRequest:
      type: object
      required:
        - UserPoolId
      title: GetCSVHeaderRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool that the users are to be imported into.
      description: Represents the request to get the header information for the .csv file for the user import job.
    GetDeviceResponse:
      type: object
      required:
        - Device
      properties:
        Device:
          $ref: '#/components/schemas/DeviceType'
          description: The device.
      description: Gets the device response.
    GetDeviceRequest:
      type: object
      required:
        - DeviceKey
      title: GetDeviceRequest
      properties:
        DeviceKey:
          $ref: '#/components/schemas/DeviceKeyType'
          description: The device key.
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
          description: The access token.
      description: Represents the request to get the device.
    GetGroupResponse:
      type: object
      properties:
        Group:
          $ref: '#/components/schemas/GroupType'
          description: The group object for the group.
    GetGroupRequest:
      type: object
      required:
        - GroupName
        - UserPoolId
      title: GetGroupRequest
      properties:
        GroupName:
          $ref: '#/components/schemas/GroupNameType'
          description: The name of the group.
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool.
    GetIdentityProviderByIdentifierResponse:
      type: object
      required:
        - IdentityProvider
      properties:
        IdentityProvider:
          $ref: '#/components/schemas/IdentityProviderType'
          description: The identity provider object.
    GetIdentityProviderByIdentifierRequest:
      type: object
      required:
        - UserPoolId
        - IdpIdentifier
      title: GetIdentityProviderByIdentifierRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID.
        IdpIdentifier:
          $ref: '#/components/schemas/IdpIdentifierType'
          description: The identity provider ID.
    GetSigningCertificateResponse:
      type: object
      properties:
        Certificate:
          $ref: '#/components/schemas/StringType'
          description: The signing certificate.
      description: Response from Cognito for a signing certificate request.
    GetSigningCertificateRequest:
      type: object
      required:
        - UserPoolId
      title: GetSigningCertificateRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID.
      description: Request to get a signing certificate from Cognito.
    GetUICustomizationResponse:
      type: object
      required:
        - UICustomization
      properties:
        UICustomization:
          $ref: '#/components/schemas/UICustomizationType'
          description: The UI customization information.
    GetUICustomizationRequest:
      type: object
      required:
        - UserPoolId
      title: GetUICustomizationRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool.
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
          description: The client ID for the client app.
    GetUserResponse:
      type: object
      required:
        - Username
        - UserAttributes
      properties:
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The user name of the user you wish to retrieve from the get user request.
        UserAttributes:
          $ref: '#/components/schemas/AttributeListType'
          description: '<p>An array of name-value pairs representing user attributes.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>'
        MFAOptions:
          $ref: '#/components/schemas/MFAOptionListType'
          description: ' <i>This response parameter is no longer supported.</i> It provides information only about SMS MFA configurations. It doesn''t provide information about TOTP software token MFA configurations. To look up information about either type of MFA configuration, use UserMFASettingList instead.'
        PreferredMfaSetting:
          $ref: '#/components/schemas/StringType'
          description: The user's preferred MFA setting.
        UserMFASettingList:
          $ref: '#/components/schemas/UserMFASettingListType'
          description: The MFA options that are enabled for the user. The possible values in this list are <code>SMS_MFA</code> and <code>SOFTWARE_TOKEN_MFA</code>.
      description: Represents the response from the server from the request to get information about the user.
    GetUserRequest:
      type: object
      required:
        - AccessToken
      title: GetUserRequest
      properties:
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
          description: The access token returned by the server response to get information about the user.
      description: Represents the request to get information about the user.
    GetUserAttributeVerificationCodeResponse:
      type: object
      properties:
        CodeDeliveryDetails:
          $ref: '#/components/schemas/CodeDeliveryDetailsType'
          description: The code delivery details returned by the server in response to the request to get the user attribute verification code.
      description: The verification code response returned by the server response to get the user attribute verification code.
    GetUserAttributeVerificationCodeRequest:
      type: object
      required:
        - AccessToken
        - AttributeName
      title: GetUserAttributeVerificationCodeRequest
      properties:
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
          description: The access token returned by the server response to get the user attribute verification code.
        AttributeName:
          $ref: '#/components/schemas/AttributeNameType'
          description: The attribute name returned by the server response to get the user attribute verification code.
        ClientMetadata:
          $ref: '#/components/schemas/ClientMetadataType'
          description: '<p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. </p> <p>You create custom workflows by assigning Lambda functions to user pool triggers. When you use the GetUserAttributeVerificationCode API action, Amazon Cognito invokes the function that is assigned to the <i>custom message</i> trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a <code>clientMetadata</code> attribute, which provides the data that you assigned to the ClientMetadata parameter in your GetUserAttributeVerificationCode request. In your function code in Lambda, you can process the <code>clientMetadata</code> value to enhance your workflow for your specific needs.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <note> <p>Take the following limitations into consideration when you use the ClientMetadata parameter:</p> <ul> <li> <p>Amazon Cognito does not store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration does not include triggers, the ClientMetadata parameter serves no purpose.</p> </li> <li> <p>Amazon Cognito does not validate the ClientMetadata value.</p> </li> <li> <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don''t use it to provide sensitive information.</p> </li> </ul> </note>'
      description: Represents the request to get user attribute verification.
    GetUserPoolMfaConfigResponse:
      type: object
      properties:
        SmsMfaConfiguration:
          $ref: '#/components/schemas/SmsMfaConfigType'
          description: The SMS text message multi-factor (MFA) configuration.
        SoftwareTokenMfaConfiguration:
          $ref: '#/components/schemas/SoftwareTokenMfaConfigType'
          description: The software token multi-factor (MFA) configuration.
        MfaConfiguration:
          $ref: '#/components/schemas/UserPoolMfaType'
          description: '<p>The multi-factor (MFA) configuration. Valid values include:</p> <ul> <li> <p> <code>OFF</code> MFA will not be used for any users.</p> </li> <li> <p> <code>ON</code> MFA is required for all users to sign in.</p> </li> <li> <p> <code>OPTIONAL</code> MFA will be required only for individual users who have an MFA factor enabled.</p> </li> </ul>'
    GetUserPoolMfaConfigRequest:
      type: object
      required:
        - UserPoolId
      title: GetUserPoolMfaConfigRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID.
    GlobalSignOutResponse:
      type: object
      properties: {}
      description: The response to the request to sign out all devices.
    GlobalSignOutRequest:
      type: object
      required:
        - AccessToken
      title: GlobalSignOutRequest
      properties:
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
          description: The access token.
      description: Represents the request to sign out all devices.
    InitiateAuthResponse:
      type: object
      properties:
        ChallengeName:
          $ref: '#/components/schemas/ChallengeNameType'
          description: '<p>The name of the challenge which you are responding to with this call. This is returned to you in the <code>AdminInitiateAuth</code> response if you need to pass another challenge.</p> <p>Valid values include the following. Note that all of these challenges require <code>USERNAME</code> and <code>SECRET_HASH</code> (if applicable) in the parameters.</p> <ul> <li> <p> <code>SMS_MFA</code>: Next challenge is to supply an <code>SMS_MFA_CODE</code>, delivered via SMS.</p> </li> <li> <p> <code>PASSWORD_VERIFIER</code>: Next challenge is to supply <code>PASSWORD_CLAIM_SIGNATURE</code>, <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, and <code>TIMESTAMP</code> after the client-side SRP calculations.</p> </li> <li> <p> <code>CUSTOM_CHALLENGE</code>: This is returned if your custom authentication flow determines that the user should pass another challenge before tokens are issued.</p> </li> <li> <p> <code>DEVICE_SRP_AUTH</code>: If device tracking was enabled on your user pool and the previous challenges were passed, this challenge is returned so that Amazon Cognito can start tracking this device.</p> </li> <li> <p> <code>DEVICE_PASSWORD_VERIFIER</code>: Similar to <code>PASSWORD_VERIFIER</code>, but for devices only.</p> </li> <li> <p> <code>NEW_PASSWORD_REQUIRED</code>: For users who are required to change their passwords after successful first login. This challenge should be passed with <code>NEW_PASSWORD</code> and any other required attributes.</p> </li> <li> <p> <code>MFA_SETUP</code>: For users who are required to setup an MFA factor before they can sign-in. The MFA types enabled for the user pool will be listed in the challenge parameters <code>MFA_CAN_SETUP</code> value. </p> <p> To setup software token MFA, use the session returned here from <code>InitiateAuth</code> as an input to <code>AssociateSoftwareToken</code>, and use the session returned by <code>VerifySoftwareToken</code> as an input to <code>RespondToAuthChallenge</code> with challenge name <code>MFA_SETUP</code> to complete sign-in. To setup SMS MFA, users will need help from an administrator to add a phone number to their account and then call <code>InitiateAuth</code> again to restart sign-in.</p> </li> </ul>'
        Session:
          $ref: '#/components/schemas/SessionType'
          description: 'The session which should be passed both ways in challenge-response calls to the service. If the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>RespondToAuthChallenge</code> API call.'
        ChallengeParameters:
          $ref: '#/components/schemas/ChallengeParametersType'
          description: <p>The challenge parameters. These are returned to you in the <code>InitiateAuth</code> response if you need to pass another challenge. The responses in this parameter should be used to compute inputs to the next call (<code>RespondToAuthChallenge</code>). </p> <p>All challenges require <code>USERNAME</code> and <code>SECRET_HASH</code> (if applicable).</p>
        AuthenticationResult:
          $ref: '#/components/schemas/AuthenticationResultType'
          description: 'The result of the authentication response. This is only returned if the caller does not need to pass another challenge. If the caller does need to pass another challenge before it gets tokens, <code>ChallengeName</code>, <code>ChallengeParameters</code>, and <code>Session</code> are returned.'
      description: Initiates the authentication response.
    InitiateAuthRequest:
      type: object
      required:
        - AuthFlow
        - ClientId
      title: InitiateAuthRequest
      properties:
        AuthFlow:
          $ref: '#/components/schemas/AuthFlowType'
          description: '<p>The authentication flow for this call to execute. The API action will depend on this value. For example: </p> <ul> <li> <p> <code>REFRESH_TOKEN_AUTH</code> will take in a valid refresh token and return new tokens.</p> </li> <li> <p> <code>USER_SRP_AUTH</code> will take in <code>USERNAME</code> and <code>SRP_A</code> and return the SRP variables to be used for next challenge execution.</p> </li> <li> <p> <code>USER_PASSWORD_AUTH</code> will take in <code>USERNAME</code> and <code>PASSWORD</code> and return the next challenge or tokens.</p> </li> </ul> <p>Valid values include:</p> <ul> <li> <p> <code>USER_SRP_AUTH</code>: Authentication flow for the Secure Remote Password (SRP) protocol.</p> </li> <li> <p> <code>REFRESH_TOKEN_AUTH</code>/<code>REFRESH_TOKEN</code>: Authentication flow for refreshing the access token and ID token by supplying a valid refresh token.</p> </li> <li> <p> <code>CUSTOM_AUTH</code>: Custom authentication flow.</p> </li> <li> <p> <code>USER_PASSWORD_AUTH</code>: Non-SRP authentication flow; USERNAME and PASSWORD are passed directly. If a user migration Lambda trigger is set, this flow will invoke the user migration Lambda if the USERNAME is not found in the user pool. </p> </li> <li> <p> <code>ADMIN_USER_PASSWORD_AUTH</code>: Admin-based user password authentication. This replaces the <code>ADMIN_NO_SRP_AUTH</code> authentication flow. In this flow, Cognito receives the password in the request instead of using the SRP process to verify passwords.</p> </li> </ul> <p> <code>ADMIN_NO_SRP_AUTH</code> is not a valid value.</p>'
        AuthParameters:
          $ref: '#/components/schemas/AuthParametersType'
          description: '<p>The authentication parameters. These are inputs corresponding to the <code>AuthFlow</code> that you are invoking. The required values depend on the value of <code>AuthFlow</code>:</p> <ul> <li> <p>For <code>USER_SRP_AUTH</code>: <code>USERNAME</code> (required), <code>SRP_A</code> (required), <code>SECRET_HASH</code> (required if the app client is configured with a client secret), <code>DEVICE_KEY</code>.</p> </li> <li> <p>For <code>REFRESH_TOKEN_AUTH/REFRESH_TOKEN</code>: <code>REFRESH_TOKEN</code> (required), <code>SECRET_HASH</code> (required if the app client is configured with a client secret), <code>DEVICE_KEY</code>.</p> </li> <li> <p>For <code>CUSTOM_AUTH</code>: <code>USERNAME</code> (required), <code>SECRET_HASH</code> (if app client is configured with client secret), <code>DEVICE_KEY</code>. To start the authentication flow with password verification, include <code>ChallengeName: SRP_A</code> and <code>SRP_A: (The SRP_A Value)</code>.</p> </li> </ul>'
        ClientMetadata:
          $ref: '#/components/schemas/ClientMetadataType'
          description: '<p>A map of custom key-value pairs that you can provide as input for certain custom workflows that this action triggers.</p> <p>You create custom workflows by assigning Lambda functions to user pool triggers. When you use the InitiateAuth API action, Amazon Cognito invokes the Lambda functions that are specified for various triggers. The ClientMetadata value is passed as input to the functions for only the following triggers:</p> <ul> <li> <p>Pre signup</p> </li> <li> <p>Pre authentication</p> </li> <li> <p>User migration</p> </li> </ul> <p>When Amazon Cognito invokes the functions for these triggers, it passes a JSON payload, which the function receives as input. This payload contains a <code>validationData</code> attribute, which provides the data that you assigned to the ClientMetadata parameter in your InitiateAuth request. In your function code in Lambda, you can process the <code>validationData</code> value to enhance your workflow for your specific needs.</p> <p>When you use the InitiateAuth API action, Amazon Cognito also invokes the functions for the following triggers, but it does not provide the ClientMetadata value as input:</p> <ul> <li> <p>Post authentication</p> </li> <li> <p>Custom message</p> </li> <li> <p>Pre token generation</p> </li> <li> <p>Create auth challenge</p> </li> <li> <p>Define auth challenge</p> </li> <li> <p>Verify auth challenge</p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <note> <p>Take the following limitations into consideration when you use the ClientMetadata parameter:</p> <ul> <li> <p>Amazon Cognito does not store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration does not include triggers, the ClientMetadata parameter serves no purpose.</p> </li> <li> <p>Amazon Cognito does not validate the ClientMetadata value.</p> </li> <li> <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don''t use it to provide sensitive information.</p> </li> </ul> </note>'
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
          description: The app client ID.
        AnalyticsMetadata:
          $ref: '#/components/schemas/AnalyticsMetadataType'
          description: The Amazon Pinpoint analytics metadata for collecting metrics for <code>InitiateAuth</code> calls.
        UserContextData:
          $ref: '#/components/schemas/UserContextDataType'
          description: 'Contextual data such as the user''s device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.'
      description: Initiates the authentication request.
    ListDevicesResponse:
      type: object
      properties:
        Devices:
          $ref: '#/components/schemas/DeviceListType'
          description: The devices returned in the list devices response.
        PaginationToken:
          $ref: '#/components/schemas/SearchPaginationTokenType'
          description: The pagination token for the list device response.
      description: Represents the response to list devices.
    ListDevicesRequest:
      type: object
      required:
        - AccessToken
      title: ListDevicesRequest
      properties:
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
          description: The access tokens for the request to list devices.
        Limit:
          $ref: '#/components/schemas/QueryLimitType'
          description: The limit of the device request.
        PaginationToken:
          $ref: '#/components/schemas/SearchPaginationTokenType'
          description: The pagination token for the list request.
      description: Represents the request to list the devices.
    ListGroupsResponse:
      type: object
      properties:
        Groups:
          $ref: '#/components/schemas/GroupListType'
          description: The group objects for the groups.
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
          description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.'
    ListGroupsRequest:
      type: object
      required:
        - UserPoolId
      title: ListGroupsRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool.
        Limit:
          $ref: '#/components/schemas/QueryLimitType'
          description: The limit of the request to list groups.
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
          description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.'
    ListIdentityProvidersResponse:
      type: object
      required:
        - Providers
      properties:
        Providers:
          $ref: '#/components/schemas/ProvidersListType'
          description: A list of identity provider objects.
        NextToken:
          $ref: '#/components/schemas/PaginationKeyType'
          description: A pagination token.
    ListIdentityProvidersRequest:
      type: object
      required:
        - UserPoolId
      title: ListIdentityProvidersRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID.
        MaxResults:
          $ref: '#/components/schemas/ListProvidersLimitType'
          description: The maximum number of identity providers to return.
        NextToken:
          $ref: '#/components/schemas/PaginationKeyType'
          description: A pagination token.
    ListResourceServersResponse:
      type: object
      required:
        - ResourceServers
      properties:
        ResourceServers:
          $ref: '#/components/schemas/ResourceServersListType'
          description: The resource servers.
        NextToken:
          $ref: '#/components/schemas/PaginationKeyType'
          description: A pagination token.
    ListResourceServersRequest:
      type: object
      required:
        - UserPoolId
      title: ListResourceServersRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool.
        MaxResults:
          $ref: '#/components/schemas/ListResourceServersLimitType'
          description: The maximum number of resource servers to return.
        NextToken:
          $ref: '#/components/schemas/PaginationKeyType'
          description: A pagination token.
    ListTagsForResourceResponse:
      type: object
      properties:
        Tags:
          $ref: '#/components/schemas/UserPoolTagsType'
          description: The tags that are assigned to the user pool.
    ListTagsForResourceRequest:
      type: object
      required:
        - ResourceArn
      title: ListTagsForResourceRequest
      properties:
        ResourceArn:
          $ref: '#/components/schemas/ArnType'
          description: The Amazon Resource Name (ARN) of the user pool that the tags are assigned to.
    ListUserImportJobsResponse:
      type: object
      properties:
        UserImportJobs:
          $ref: '#/components/schemas/UserImportJobsListType'
          description: The user import jobs.
        PaginationToken:
          $ref: '#/components/schemas/PaginationKeyType'
          description: An identifier that can be used to return the next set of user import jobs in the list.
      description: Represents the response from the server to the request to list the user import jobs.
    ListUserImportJobsRequest:
      type: object
      required:
        - UserPoolId
        - MaxResults
      title: ListUserImportJobsRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool that the users are being imported into.
        MaxResults:
          $ref: '#/components/schemas/PoolQueryLimitType'
          description: The maximum number of import jobs you want the request to return.
        PaginationToken:
          $ref: '#/components/schemas/PaginationKeyType'
          description: 'An identifier that was returned from the previous call to <code>ListUserImportJobs</code>, which can be used to return the next set of import jobs in the list.'
      description: Represents the request to list the user import jobs.
    ListUserPoolClientsResponse:
      type: object
      properties:
        UserPoolClients:
          $ref: '#/components/schemas/UserPoolClientListType'
          description: The user pool clients in the response that lists user pool clients.
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
          description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.'
      description: Represents the response from the server that lists user pool clients.
    ListUserPoolClientsRequest:
      type: object
      required:
        - UserPoolId
      title: ListUserPoolClientsRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool where you want to list user pool clients.
        MaxResults:
          $ref: '#/components/schemas/QueryLimit'
          description: The maximum number of results you want the request to return when listing the user pool clients.
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
          description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.'
      description: Represents the request to list the user pool clients.
    ListUserPoolsResponse:
      type: object
      properties:
        UserPools:
          $ref: '#/components/schemas/UserPoolListType'
          description: The user pools from the response to list users.
        NextToken:
          $ref: '#/components/schemas/PaginationKeyType'
          description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.'
      description: Represents the response to list user pools.
    ListUserPoolsRequest:
      type: object
      required:
        - MaxResults
      title: ListUserPoolsRequest
      properties:
        NextToken:
          $ref: '#/components/schemas/PaginationKeyType'
          description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.'
        MaxResults:
          $ref: '#/components/schemas/PoolQueryLimitType'
          description: The maximum number of results you want the request to return when listing the user pools.
      description: Represents the request to list user pools.
    ListUsersResponse:
      type: object
      properties:
        Users:
          $ref: '#/components/schemas/UsersListType'
          description: The users returned in the request to list users.
        PaginationToken:
          $ref: '#/components/schemas/SearchPaginationTokenType'
          description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.'
      description: The response from the request to list users.
    ListUsersRequest:
      type: object
      required:
        - UserPoolId
      title: ListUsersRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool on which the search should be performed.
        AttributesToGet:
          $ref: '#/components/schemas/SearchedAttributeNamesListType'
          description: 'An array of strings, where each string is the name of a user attribute to be returned for each user in the search results. If the array is null, all attributes are returned.'
        Limit:
          $ref: '#/components/schemas/QueryLimitType'
          description: Maximum number of users to be returned.
        PaginationToken:
          $ref: '#/components/schemas/SearchPaginationTokenType'
          description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.'
        Filter:
          $ref: '#/components/schemas/UserFilterType'
          description: '<p>A filter string of the form "<i>AttributeName</i> <i>Filter-Type</i> "<i>AttributeValue</i>"". Quotation marks within the filter string must be escaped using the backslash (\) character. For example, "<code>family_name</code> = \"Reddy\"".</p> <ul> <li> <p> <i>AttributeName</i>: The name of the attribute to search for. You can only search for one attribute at a time.</p> </li> <li> <p> <i>Filter-Type</i>: For an exact match, use =, for example, "<code>given_name</code> = \"Jon\"". For a prefix ("starts with") match, use ^=, for example, "<code>given_name</code> ^= \"Jon\"". </p> </li> <li> <p> <i>AttributeValue</i>: The attribute value that must be matched for each user.</p> </li> </ul> <p>If the filter string is empty, <code>ListUsers</code> returns all users in the user pool.</p> <p>You can only search for the following standard attributes:</p> <ul> <li> <p> <code>username</code> (case-sensitive)</p> </li> <li> <p> <code>email</code> </p> </li> <li> <p> <code>phone_number</code> </p> </li> <li> <p> <code>name</code> </p> </li> <li> <p> <code>given_name</code> </p> </li> <li> <p> <code>family_name</code> </p> </li> <li> <p> <code>preferred_username</code> </p> </li> <li> <p> <code>cognito:user_status</code> (called <b>Status</b> in the Console) (case-insensitive)</p> </li> <li> <p> <code>status (called <b>Enabled</b> in the Console) (case-sensitive)</code> </p> </li> <li> <p> <code>sub</code> </p> </li> </ul> <p>Custom attributes are not searchable.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-using-listusers-api">Searching for Users Using the ListUsers API</a> and <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-listusers-api-examples">Examples of Using the ListUsers API</a> in the <i>Amazon Cognito Developer Guide</i>.</p>'
      description: Represents the request to list users.
    ListUsersInGroupResponse:
      type: object
      properties:
        Users:
          $ref: '#/components/schemas/UsersListType'
          description: The users returned in the request to list users.
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
          description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.'
    ListUsersInGroupRequest:
      type: object
      required:
        - UserPoolId
        - GroupName
      title: ListUsersInGroupRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool.
        GroupName:
          $ref: '#/components/schemas/GroupNameType'
          description: The name of the group.
        Limit:
          $ref: '#/components/schemas/QueryLimitType'
          description: The limit of the request to list users.
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
          description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.'
    ResendConfirmationCodeResponse:
      type: object
      properties:
        CodeDeliveryDetails:
          $ref: '#/components/schemas/CodeDeliveryDetailsType'
          description: The code delivery details returned by the server in response to the request to resend the confirmation code.
      description: The response from the server when the Amazon Cognito Your User Pools service makes the request to resend a confirmation code.
    ResendConfirmationCodeRequest:
      type: object
      required:
        - ClientId
        - Username
      title: ResendConfirmationCodeRequest
      properties:
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
          description: The ID of the client associated with the user pool.
        SecretHash:
          $ref: '#/components/schemas/SecretHashType'
          description: A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        UserContextData:
          $ref: '#/components/schemas/UserContextDataType'
          description: 'Contextual data such as the user''s device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.'
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The user name of the user to whom you wish to resend a confirmation code.
        AnalyticsMetadata:
          $ref: '#/components/schemas/AnalyticsMetadataType'
          description: The Amazon Pinpoint analytics metadata for collecting metrics for <code>ResendConfirmationCode</code> calls.
        ClientMetadata:
          $ref: '#/components/schemas/ClientMetadataType'
          description: '<p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. </p> <p>You create custom workflows by assigning Lambda functions to user pool triggers. When you use the ResendConfirmationCode API action, Amazon Cognito invokes the function that is assigned to the <i>custom message</i> trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a <code>clientMetadata</code> attribute, which provides the data that you assigned to the ClientMetadata parameter in your ResendConfirmationCode request. In your function code in Lambda, you can process the <code>clientMetadata</code> value to enhance your workflow for your specific needs.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <note> <p>Take the following limitations into consideration when you use the ClientMetadata parameter:</p> <ul> <li> <p>Amazon Cognito does not store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration does not include triggers, the ClientMetadata parameter serves no purpose.</p> </li> <li> <p>Amazon Cognito does not validate the ClientMetadata value.</p> </li> <li> <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don''t use it to provide sensitive information.</p> </li> </ul> </note>'
      description: Represents the request to resend the confirmation code.
    RespondToAuthChallengeResponse:
      type: object
      properties:
        ChallengeName:
          $ref: '#/components/schemas/ChallengeNameType'
          description: 'The challenge name. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_InitiateAuth.html">InitiateAuth</a>.'
        Session:
          $ref: '#/components/schemas/SessionType'
          description: 'The session which should be passed both ways in challenge-response calls to the service. If the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>RespondToAuthChallenge</code> API call.'
        ChallengeParameters:
          $ref: '#/components/schemas/ChallengeParametersType'
          description: 'The challenge parameters. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_InitiateAuth.html">InitiateAuth</a>.'
        AuthenticationResult:
          $ref: '#/components/schemas/AuthenticationResultType'
          description: The result returned by the server in response to the request to respond to the authentication challenge.
      description: The response to respond to the authentication challenge.
    RespondToAuthChallengeRequest:
      type: object
      required:
        - ClientId
        - ChallengeName
      title: RespondToAuthChallengeRequest
      properties:
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
          description: The app client ID.
        ChallengeName:
          $ref: '#/components/schemas/ChallengeNameType'
          description: '<p>The challenge name. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_InitiateAuth.html">InitiateAuth</a>.</p> <p> <code>ADMIN_NO_SRP_AUTH</code> is not a valid value.</p>'
        Session:
          $ref: '#/components/schemas/SessionType'
          description: 'The session which should be passed both ways in challenge-response calls to the service. If <code>InitiateAuth</code> or <code>RespondToAuthChallenge</code> API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>RespondToAuthChallenge</code> API call.'
        ChallengeResponses:
          $ref: '#/components/schemas/ChallengeResponsesType'
          description: '<p>The challenge responses. These are inputs corresponding to the value of <code>ChallengeName</code>, for example:</p> <note> <p> <code>SECRET_HASH</code> (if app client is configured with client secret) applies to all inputs below (including <code>SOFTWARE_TOKEN_MFA</code>).</p> </note> <ul> <li> <p> <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>.</p> </li> <li> <p> <code>PASSWORD_VERIFIER</code>: <code>PASSWORD_CLAIM_SIGNATURE</code>, <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, <code>TIMESTAMP</code>, <code>USERNAME</code>.</p> </li> <li> <p> <code>NEW_PASSWORD_REQUIRED</code>: <code>NEW_PASSWORD</code>, any other required attributes, <code>USERNAME</code>. </p> </li> <li> <p> <code>SOFTWARE_TOKEN_MFA</code>: <code>USERNAME</code> and <code>SOFTWARE_TOKEN_MFA_CODE</code> are required attributes.</p> </li> <li> <p> <code>DEVICE_SRP_AUTH</code> requires <code>USERNAME</code>, <code>DEVICE_KEY</code>, <code>SRP_A</code> (and <code>SECRET_HASH</code>).</p> </li> <li> <p> <code>DEVICE_PASSWORD_VERIFIER</code> requires everything that <code>PASSWORD_VERIFIER</code> requires plus <code>DEVICE_KEY</code>.</p> </li> <li> <p> <code>MFA_SETUP</code> requires <code>USERNAME</code>, plus you need to use the session value returned by <code>VerifySoftwareToken</code> in the <code>Session</code> parameter.</p> </li> </ul>'
        AnalyticsMetadata:
          $ref: '#/components/schemas/AnalyticsMetadataType'
          description: The Amazon Pinpoint analytics metadata for collecting metrics for <code>RespondToAuthChallenge</code> calls.
        UserContextData:
          $ref: '#/components/schemas/UserContextDataType'
          description: 'Contextual data such as the user''s device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.'
        ClientMetadata:
          $ref: '#/components/schemas/ClientMetadataType'
          description: '<p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. </p> <p>You create custom workflows by assigning Lambda functions to user pool triggers. When you use the RespondToAuthChallenge API action, Amazon Cognito invokes any functions that are assigned to the following triggers: <i>post authentication</i>, <i>pre token generation</i>, <i>define auth challenge</i>, <i>create auth challenge</i>, and <i>verify auth challenge</i>. When Amazon Cognito invokes any of these functions, it passes a JSON payload, which the function receives as input. This payload contains a <code>clientMetadata</code> attribute, which provides the data that you assigned to the ClientMetadata parameter in your RespondToAuthChallenge request. In your function code in Lambda, you can process the <code>clientMetadata</code> value to enhance your workflow for your specific needs.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <note> <p>Take the following limitations into consideration when you use the ClientMetadata parameter:</p> <ul> <li> <p>Amazon Cognito does not store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration does not include triggers, the ClientMetadata parameter serves no purpose.</p> </li> <li> <p>Amazon Cognito does not validate the ClientMetadata value.</p> </li> <li> <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don''t use it to provide sensitive information.</p> </li> </ul> </note>'
      description: The request to respond to an authentication challenge.
    RevokeTokenResponse:
      type: object
      properties: {}
    RevokeTokenRequest:
      type: object
      required:
        - Token
        - ClientId
      title: RevokeTokenRequest
      properties:
        Token:
          $ref: '#/components/schemas/TokenModelType'
          description: The token that you want to revoke.
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
          description: The client ID for the token that you want to revoke.
        ClientSecret:
          $ref: '#/components/schemas/ClientSecretType'
          description: The secret for the client ID. This is required only if the client ID has a secret.
    UnauthorizedException: {}
    UnsupportedOperationException: {}
    UnsupportedTokenTypeException: {}
    SetRiskConfigurationResponse:
      type: object
      required:
        - RiskConfiguration
      properties:
        RiskConfiguration:
          $ref: '#/components/schemas/RiskConfigurationType'
          description: The risk configuration.
    SetRiskConfigurationRequest:
      type: object
      required:
        - UserPoolId
      title: SetRiskConfigurationRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: 'The user pool ID. '
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
          description: '<p>The app client ID. If <code>ClientId</code> is null, then the risk configuration is mapped to <code>userPoolId</code>. When the client ID is null, the same risk configuration is applied to all the clients in the userPool.</p> <p>Otherwise, <code>ClientId</code> is mapped to the client. When the client ID is not null, the user pool configuration is overridden and the risk configuration for the client is used instead.</p>'
        CompromisedCredentialsRiskConfiguration:
          $ref: '#/components/schemas/CompromisedCredentialsRiskConfigurationType'
          description: The compromised credentials risk configuration.
        AccountTakeoverRiskConfiguration:
          $ref: '#/components/schemas/AccountTakeoverRiskConfigurationType'
          description: The account takeover risk configuration.
        RiskExceptionConfiguration:
          $ref: '#/components/schemas/RiskExceptionConfigurationType'
          description: The configuration to override the risk decision.
    SetUICustomizationResponse:
      type: object
      required:
        - UICustomization
      properties:
        UICustomization:
          $ref: '#/components/schemas/UICustomizationType'
          description: The UI customization information.
    SetUICustomizationRequest:
      type: object
      required:
        - UserPoolId
      title: SetUICustomizationRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool.
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
          description: The client ID for the client app.
        CSS:
          $ref: '#/components/schemas/CSSType'
          description: The CSS values in the UI customization.
        ImageFile:
          $ref: '#/components/schemas/ImageFileType'
          description: The uploaded logo image for the UI customization.
    SetUserMFAPreferenceResponse:
      type: object
      properties: {}
    SetUserMFAPreferenceRequest:
      type: object
      required:
        - AccessToken
      title: SetUserMFAPreferenceRequest
      properties:
        SMSMfaSettings:
          $ref: '#/components/schemas/SMSMfaSettingsType'
          description: The SMS text message multi-factor authentication (MFA) settings.
        SoftwareTokenMfaSettings:
          $ref: '#/components/schemas/SoftwareTokenMfaSettingsType'
          description: The time-based one-time password software token MFA settings.
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
          description: The access token for the user.
    SetUserPoolMfaConfigResponse:
      type: object
      properties:
        SmsMfaConfiguration:
          $ref: '#/components/schemas/SmsMfaConfigType'
          description: The SMS text message MFA configuration.
        SoftwareTokenMfaConfiguration:
          $ref: '#/components/schemas/SoftwareTokenMfaConfigType'
          description: The software token MFA configuration.
        MfaConfiguration:
          $ref: '#/components/schemas/UserPoolMfaType'
          description: '<p>The MFA configuration. Valid values include:</p> <ul> <li> <p> <code>OFF</code> MFA will not be used for any users.</p> </li> <li> <p> <code>ON</code> MFA is required for all users to sign in.</p> </li> <li> <p> <code>OPTIONAL</code> MFA will be required only for individual users who have an MFA factor enabled.</p> </li> </ul>'
    SetUserPoolMfaConfigRequest:
      type: object
      required:
        - UserPoolId
      title: SetUserPoolMfaConfigRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID.
        SmsMfaConfiguration:
          $ref: '#/components/schemas/SmsMfaConfigType'
          description: The SMS text message MFA configuration.
        SoftwareTokenMfaConfiguration:
          $ref: '#/components/schemas/SoftwareTokenMfaConfigType'
          description: The software token MFA configuration.
        MfaConfiguration:
          $ref: '#/components/schemas/UserPoolMfaType'
          description: '<p>The MFA configuration. Users who don''t have an MFA factor set up won''t be able to sign-in if you set the MfaConfiguration value to ‘ON’. See <a href="cognito/latest/developerguide/user-pool-settings-mfa.html">Adding Multi-Factor Authentication (MFA) to a User Pool</a> to learn more. Valid values include:</p> <ul> <li> <p> <code>OFF</code> MFA will not be used for any users.</p> </li> <li> <p> <code>ON</code> MFA is required for all users to sign in.</p> </li> <li> <p> <code>OPTIONAL</code> MFA will be required only for individual users who have an MFA factor enabled.</p> </li> </ul>'
    SetUserSettingsResponse:
      type: object
      properties: {}
      description: The response from the server for a set user settings request.
    SetUserSettingsRequest:
      type: object
      required:
        - AccessToken
        - MFAOptions
      title: SetUserSettingsRequest
      properties:
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
          description: The access token for the set user settings request.
        MFAOptions:
          $ref: '#/components/schemas/MFAOptionListType'
          description: You can use this parameter only to set an SMS configuration that uses SMS for delivery.
      description: Represents the request to set user settings.
    SignUpResponse:
      type: object
      required:
        - UserConfirmed
        - UserSub
      properties:
        UserConfirmed:
          $ref: '#/components/schemas/BooleanType'
          description: A response from the server indicating that a user registration has been confirmed.
        CodeDeliveryDetails:
          $ref: '#/components/schemas/CodeDeliveryDetailsType'
          description: The code delivery details returned by the server response to the user registration request.
        UserSub:
          $ref: '#/components/schemas/StringType'
          description: The UUID of the authenticated user. This is not the same as <code>username</code>.
      description: The response from the server for a registration request.
    SignUpRequest:
      type: object
      required:
        - ClientId
        - Username
        - Password
      title: SignUpRequest
      properties:
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
          description: The ID of the client associated with the user pool.
        SecretHash:
          $ref: '#/components/schemas/SecretHashType'
          description: A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The user name of the user you wish to register.
        Password:
          $ref: '#/components/schemas/PasswordType'
          description: The password of the user you wish to register.
        UserAttributes:
          $ref: '#/components/schemas/AttributeListType'
          description: '<p>An array of name-value pairs representing user attributes.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>'
        ValidationData:
          $ref: '#/components/schemas/AttributeListType'
          description: The validation data in the request to register a user.
        AnalyticsMetadata:
          $ref: '#/components/schemas/AnalyticsMetadataType'
          description: The Amazon Pinpoint analytics metadata for collecting metrics for <code>SignUp</code> calls.
        UserContextData:
          $ref: '#/components/schemas/UserContextDataType'
          description: 'Contextual data such as the user''s device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.'
        ClientMetadata:
          $ref: '#/components/schemas/ClientMetadataType'
          description: '<p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. </p> <p>You create custom workflows by assigning Lambda functions to user pool triggers. When you use the SignUp API action, Amazon Cognito invokes any functions that are assigned to the following triggers: <i>pre sign-up</i>, <i>custom message</i>, and <i>post confirmation</i>. When Amazon Cognito invokes any of these functions, it passes a JSON payload, which the function receives as input. This payload contains a <code>clientMetadata</code> attribute, which provides the data that you assigned to the ClientMetadata parameter in your SignUp request. In your function code in Lambda, you can process the <code>clientMetadata</code> value to enhance your workflow for your specific needs.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <note> <p>Take the following limitations into consideration when you use the ClientMetadata parameter:</p> <ul> <li> <p>Amazon Cognito does not store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration does not include triggers, the ClientMetadata parameter serves no purpose.</p> </li> <li> <p>Amazon Cognito does not validate the ClientMetadata value.</p> </li> <li> <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don''t use it to provide sensitive information.</p> </li> </ul> </note>'
      description: Represents the request to register a user.
    StartUserImportJobResponse:
      type: object
      properties:
        UserImportJob:
          $ref: '#/components/schemas/UserImportJobType'
          description: The job object that represents the user import job.
      description: Represents the response from the server to the request to start the user import job.
    StartUserImportJobRequest:
      type: object
      required:
        - UserPoolId
        - JobId
      title: StartUserImportJobRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool that the users are being imported into.
        JobId:
          $ref: '#/components/schemas/UserImportJobIdType'
          description: The job ID for the user import job.
      description: Represents the request to start the user import job.
    StopUserImportJobResponse:
      type: object
      properties:
        UserImportJob:
          $ref: '#/components/schemas/UserImportJobType'
          description: The job object that represents the user import job.
      description: Represents the response from the server to the request to stop the user import job.
    StopUserImportJobRequest:
      type: object
      required:
        - UserPoolId
        - JobId
      title: StopUserImportJobRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool that the users are being imported into.
        JobId:
          $ref: '#/components/schemas/UserImportJobIdType'
          description: The job ID for the user import job.
      description: Represents the request to stop the user import job.
    TagResourceResponse:
      type: object
      properties: {}
    TagResourceRequest:
      type: object
      required:
        - ResourceArn
        - Tags
      title: TagResourceRequest
      properties:
        ResourceArn:
          $ref: '#/components/schemas/ArnType'
          description: The Amazon Resource Name (ARN) of the user pool to assign the tags to.
        Tags:
          $ref: '#/components/schemas/UserPoolTagsType'
          description: The tags to assign to the user pool.
    UntagResourceResponse:
      type: object
      properties: {}
    UntagResourceRequest:
      type: object
      required:
        - ResourceArn
        - TagKeys
      title: UntagResourceRequest
      properties:
        ResourceArn:
          $ref: '#/components/schemas/ArnType'
          description: The Amazon Resource Name (ARN) of the user pool that the tags are assigned to.
        TagKeys:
          $ref: '#/components/schemas/UserPoolTagsListType'
          description: The keys of the tags to remove from the user pool.
    UpdateAuthEventFeedbackResponse:
      type: object
      properties: {}
    UpdateAuthEventFeedbackRequest:
      type: object
      required:
        - UserPoolId
        - Username
        - EventId
        - FeedbackToken
        - FeedbackValue
      title: UpdateAuthEventFeedbackRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID.
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The user pool username.
        EventId:
          $ref: '#/components/schemas/EventIdType'
          description: The event ID.
        FeedbackToken:
          $ref: '#/components/schemas/TokenModelType'
          description: The feedback token.
        FeedbackValue:
          $ref: '#/components/schemas/FeedbackValueType'
          description: The authentication event feedback value.
    UpdateDeviceStatusResponse:
      type: object
      properties: {}
      description: The response to the request to update the device status.
    UpdateDeviceStatusRequest:
      type: object
      required:
        - AccessToken
        - DeviceKey
      title: UpdateDeviceStatusRequest
      properties:
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
          description: The access token.
        DeviceKey:
          $ref: '#/components/schemas/DeviceKeyType'
          description: The device key.
        DeviceRememberedStatus:
          $ref: '#/components/schemas/DeviceRememberedStatusType'
          description: The status of whether a device is remembered.
      description: Represents the request to update the device status.
    UpdateGroupResponse:
      type: object
      properties:
        Group:
          $ref: '#/components/schemas/GroupType'
          description: The group object for the group.
    UpdateGroupRequest:
      type: object
      required:
        - GroupName
        - UserPoolId
      title: UpdateGroupRequest
      properties:
        GroupName:
          $ref: '#/components/schemas/GroupNameType'
          description: The name of the group.
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool.
        Description:
          $ref: '#/components/schemas/DescriptionType'
          description: A string containing the new description of the group.
        RoleArn:
          $ref: '#/components/schemas/ArnType'
          description: 'The new role ARN for the group. This is used for setting the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the token.'
        Precedence:
          $ref: '#/components/schemas/PrecedenceType'
          description: 'The new precedence value for the group. For more information about this parameter, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_CreateGroup.html">CreateGroup</a>.'
    UpdateIdentityProviderResponse:
      type: object
      required:
        - IdentityProvider
      properties:
        IdentityProvider:
          $ref: '#/components/schemas/IdentityProviderType'
          description: The identity provider object.
    UpdateIdentityProviderRequest:
      type: object
      required:
        - UserPoolId
        - ProviderName
      title: UpdateIdentityProviderRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID.
        ProviderName:
          $ref: '#/components/schemas/ProviderNameType'
          description: The identity provider name.
        ProviderDetails:
          $ref: '#/components/schemas/ProviderDetailsType'
          description: 'The identity provider details to be updated, such as <code>MetadataURL</code> and <code>MetadataFile</code>.'
        AttributeMapping:
          $ref: '#/components/schemas/AttributeMappingType'
          description: The identity provider attribute mapping to be changed.
        IdpIdentifiers:
          $ref: '#/components/schemas/IdpIdentifiersListType'
          description: A list of identity provider identifiers.
    UpdateResourceServerResponse:
      type: object
      required:
        - ResourceServer
      properties:
        ResourceServer:
          $ref: '#/components/schemas/ResourceServerType'
          description: The resource server.
    UpdateResourceServerRequest:
      type: object
      required:
        - UserPoolId
        - Identifier
        - Name
      title: UpdateResourceServerRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool.
        Identifier:
          $ref: '#/components/schemas/ResourceServerIdentifierType'
          description: The identifier for the resource server.
        Name:
          $ref: '#/components/schemas/ResourceServerNameType'
          description: The name of the resource server.
        Scopes:
          $ref: '#/components/schemas/ResourceServerScopeListType'
          description: The scope values to be set for the resource server.
    UpdateUserAttributesResponse:
      type: object
      properties:
        CodeDeliveryDetailsList:
          $ref: '#/components/schemas/CodeDeliveryDetailsListType'
          description: The code delivery details list from the server for the request to update user attributes.
      description: Represents the response from the server for the request to update user attributes.
    UpdateUserAttributesRequest:
      type: object
      required:
        - UserAttributes
        - AccessToken
      title: UpdateUserAttributesRequest
      properties:
        UserAttributes:
          $ref: '#/components/schemas/AttributeListType'
          description: '<p>An array of name-value pairs representing user attributes.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>'
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
          description: The access token for the request to update user attributes.
        ClientMetadata:
          $ref: '#/components/schemas/ClientMetadataType'
          description: '<p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. </p> <p>You create custom workflows by assigning Lambda functions to user pool triggers. When you use the UpdateUserAttributes API action, Amazon Cognito invokes the function that is assigned to the <i>custom message</i> trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a <code>clientMetadata</code> attribute, which provides the data that you assigned to the ClientMetadata parameter in your UpdateUserAttributes request. In your function code in Lambda, you can process the <code>clientMetadata</code> value to enhance your workflow for your specific needs.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <note> <p>Take the following limitations into consideration when you use the ClientMetadata parameter:</p> <ul> <li> <p>Amazon Cognito does not store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration does not include triggers, the ClientMetadata parameter serves no purpose.</p> </li> <li> <p>Amazon Cognito does not validate the ClientMetadata value.</p> </li> <li> <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don''t use it to provide sensitive information.</p> </li> </ul> </note>'
      description: Represents the request to update user attributes.
    UpdateUserPoolResponse:
      type: object
      properties: {}
      description: Represents the response from the server when you make a request to update the user pool.
    UpdateUserPoolRequest:
      type: object
      required:
        - UserPoolId
      title: UpdateUserPoolRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool you want to update.
        Policies:
          $ref: '#/components/schemas/UserPoolPolicyType'
          description: A container with the policies you wish to update in a user pool.
        LambdaConfig:
          $ref: '#/components/schemas/LambdaConfigType'
          description: The Lambda configuration information from the request to update the user pool.
        AutoVerifiedAttributes:
          $ref: '#/components/schemas/VerifiedAttributesListType'
          description: The attributes that are automatically verified when the Amazon Cognito service makes a request to update user pools.
        SmsVerificationMessage:
          $ref: '#/components/schemas/SmsVerificationMessageType'
          description: A container with information about the SMS verification message.
        EmailVerificationMessage:
          $ref: '#/components/schemas/EmailVerificationMessageType'
          description: The contents of the email verification message.
        EmailVerificationSubject:
          $ref: '#/components/schemas/EmailVerificationSubjectType'
          description: The subject of the email verification message.
        VerificationMessageTemplate:
          $ref: '#/components/schemas/VerificationMessageTemplateType'
          description: The template for verification messages.
        SmsAuthenticationMessage:
          $ref: '#/components/schemas/SmsVerificationMessageType'
          description: The contents of the SMS authentication message.
        MfaConfiguration:
          $ref: '#/components/schemas/UserPoolMfaType'
          description: '<p>Can be one of the following values:</p> <ul> <li> <p> <code>OFF</code> - MFA tokens are not required and cannot be specified during user registration.</p> </li> <li> <p> <code>ON</code> - MFA tokens are required for all user registrations. You can only specify ON when you are initially creating a user pool. You can use the <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SetUserPoolMfaConfig.html">SetUserPoolMfaConfig</a> API operation to turn MFA "ON" for existing user pools. </p> </li> <li> <p> <code>OPTIONAL</code> - Users have the option when registering to create an MFA token.</p> </li> </ul>'
        DeviceConfiguration:
          $ref: '#/components/schemas/DeviceConfigurationType'
          description: Device configuration.
        EmailConfiguration:
          $ref: '#/components/schemas/EmailConfigurationType'
          description: Email configuration.
        SmsConfiguration:
          $ref: '#/components/schemas/SmsConfigurationType'
          description: SMS configuration.
        UserPoolTags:
          $ref: '#/components/schemas/UserPoolTagsType'
          description: 'The tag keys and values to assign to the user pool. A tag is a label that you can use to categorize and manage user pools in different ways, such as by purpose, owner, environment, or other criteria.'
        AdminCreateUserConfig:
          $ref: '#/components/schemas/AdminCreateUserConfigType'
          description: The configuration for <code>AdminCreateUser</code> requests.
        UserPoolAddOns:
          $ref: '#/components/schemas/UserPoolAddOnsType'
          description: Used to enable advanced security risk detection. Set the key <code>AdvancedSecurityMode</code> to the value "AUDIT".
        AccountRecoverySetting:
          $ref: '#/components/schemas/AccountRecoverySettingType'
          description: 'Use this setting to define which verified available method a user can use to recover their password when they call <code>ForgotPassword</code>. It allows you to define a preferred method when a user has more than one method available. With this setting, SMS does not qualify for a valid password recovery mechanism if the user also has SMS MFA enabled. In the absence of this setting, Cognito uses the legacy behavior to determine the recovery method where SMS is preferred over email.'
      description: Represents the request to update the user pool.
    UpdateUserPoolClientResponse:
      type: object
      properties:
        UserPoolClient:
          $ref: '#/components/schemas/UserPoolClientType'
          description: The user pool client value from the response from the server when an update user pool client request is made.
      description: Represents the response from the server to the request to update the user pool client.
    UpdateUserPoolClientRequest:
      type: object
      required:
        - UserPoolId
        - ClientId
      title: UpdateUserPoolClientRequest
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool where you want to update the user pool client.
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
          description: The ID of the client associated with the user pool.
        ClientName:
          $ref: '#/components/schemas/ClientNameType'
          description: The client name from the update user pool client request.
        RefreshTokenValidity:
          $ref: '#/components/schemas/RefreshTokenValidityType'
          description: 'The time limit, in days, after which the refresh token is no longer valid and cannot be used.'
        AccessTokenValidity:
          $ref: '#/components/schemas/AccessTokenValidityType'
          description: 'The time limit, after which the access token is no longer valid and cannot be used.'
        IdTokenValidity:
          $ref: '#/components/schemas/IdTokenValidityType'
          description: 'The time limit, after which the ID token is no longer valid and cannot be used.'
        TokenValidityUnits:
          $ref: '#/components/schemas/TokenValidityUnitsType'
          description: 'The units in which the validity times are represented in. Default for RefreshToken is days, and default for ID and access tokens are hours.'
        ReadAttributes:
          $ref: '#/components/schemas/ClientPermissionListType'
          description: The read-only attributes of the user pool.
        WriteAttributes:
          $ref: '#/components/schemas/ClientPermissionListType'
          description: The writeable attributes of the user pool.
        ExplicitAuthFlows:
          $ref: '#/components/schemas/ExplicitAuthFlowsListType'
          description: '<p>The authentication flows that are supported by the user pool clients. Flow names without the <code>ALLOW_</code> prefix are deprecated in favor of new names with the <code>ALLOW_</code> prefix. Note that values with <code>ALLOW_</code> prefix cannot be used along with values without <code>ALLOW_</code> prefix.</p> <p>Valid values include:</p> <ul> <li> <p> <code>ALLOW_ADMIN_USER_PASSWORD_AUTH</code>: Enable admin based user password authentication flow <code>ADMIN_USER_PASSWORD_AUTH</code>. This setting replaces the <code>ADMIN_NO_SRP_AUTH</code> setting. With this authentication flow, Cognito receives the password in the request instead of using the SRP (Secure Remote Password protocol) protocol to verify passwords.</p> </li> <li> <p> <code>ALLOW_CUSTOM_AUTH</code>: Enable Lambda trigger based authentication.</p> </li> <li> <p> <code>ALLOW_USER_PASSWORD_AUTH</code>: Enable user password-based authentication. In this flow, Cognito receives the password in the request instead of using the SRP protocol to verify passwords.</p> </li> <li> <p> <code>ALLOW_USER_SRP_AUTH</code>: Enable SRP based authentication.</p> </li> <li> <p> <code>ALLOW_REFRESH_TOKEN_AUTH</code>: Enable authflow to refresh tokens.</p> </li> </ul>'
        SupportedIdentityProviders:
          $ref: '#/components/schemas/SupportedIdentityProvidersListType'
          description: A list of provider names for the identity providers that are supported on this client.
        CallbackURLs:
          $ref: '#/components/schemas/CallbackURLsListType'
          description: '<p>A list of allowed redirect (callback) URLs for the identity providers.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href="https://tools.ietf.org/html/rfc6749#section-3.1.2">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>'
        LogoutURLs:
          $ref: '#/components/schemas/LogoutURLsListType'
          description: A list of allowed logout URLs for the identity providers.
        DefaultRedirectURI:
          $ref: '#/components/schemas/RedirectUrlType'
          description: '<p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href="https://tools.ietf.org/html/rfc6749#section-3.1.2">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>'
        AllowedOAuthFlows:
          $ref: '#/components/schemas/OAuthFlowsType'
          description: '<p>The allowed OAuth flows.</p> <p>Set to <code>code</code> to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint.</p> <p>Set to <code>implicit</code> to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.</p> <p>Set to <code>client_credentials</code> to specify that the client should get the access token (and, optionally, ID token, based on scopes) from the token endpoint using a combination of client and client_secret.</p>'
        AllowedOAuthScopes:
          $ref: '#/components/schemas/ScopeListType'
          description: 'The allowed OAuth scopes. Possible values provided by OAuth are: <code>phone</code>, <code>email</code>, <code>openid</code>, and <code>profile</code>. Possible values provided by Amazon Web Services are: <code>aws.cognito.signin.user.admin</code>. Custom scopes created in Resource Servers are also supported.'
        AllowedOAuthFlowsUserPoolClient:
          $ref: '#/components/schemas/BooleanType'
          description: Set to true if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.
        AnalyticsConfiguration:
          $ref: '#/components/schemas/AnalyticsConfigurationType'
          description: '<p>The Amazon Pinpoint analytics configuration for collecting metrics for this user pool.</p> <note> <p>In regions where Pinpoint is not available, Cognito User Pools only supports sending events to Amazon Pinpoint projects in us-east-1. In regions where Pinpoint is available, Cognito User Pools will support sending events to Amazon Pinpoint projects within that same region. </p> </note>'
        PreventUserExistenceErrors:
          $ref: '#/components/schemas/PreventUserExistenceErrorTypes'
          description: '<p>Use this setting to choose which errors and responses are returned by Cognito APIs during authentication, account confirmation, and password recovery when the user does not exist in the user pool. When set to <code>ENABLED</code> and the user does not exist, authentication returns an error indicating either the username or password was incorrect, and account confirmation and password recovery return a response indicating a code was sent to a simulated destination. When set to <code>LEGACY</code>, those APIs will return a <code>UserNotFoundException</code> exception if the user does not exist in the user pool.</p> <p>Valid values include:</p> <ul> <li> <p> <code>ENABLED</code> - This prevents user existence-related errors.</p> </li> <li> <p> <code>LEGACY</code> - This represents the old behavior of Cognito where user existence related errors are not prevented.</p> </li> </ul> <note> <p>After February 15th 2020, the value of <code>PreventUserExistenceErrors</code> will default to <code>ENABLED</code> for newly created user pool clients if no value is provided.</p> </note>'
        EnableTokenRevocation:
          $ref: '#/components/schemas/WrappedBooleanType'
          description: 'Enables or disables token revocation. For more information about revoking tokens, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html">RevokeToken</a>.'
      description: Represents the request to update the user pool client.
    UpdateUserPoolDomainResponse:
      type: object
      properties:
        CloudFrontDomain:
          $ref: '#/components/schemas/DomainType'
          description: The Amazon CloudFront endpoint that Amazon Cognito set up when you added the custom domain to your user pool.
      description: The UpdateUserPoolDomain response output.
    UpdateUserPoolDomainRequest:
      type: object
      required:
        - Domain
        - UserPoolId
        - CustomDomainConfig
      title: UpdateUserPoolDomainRequest
      properties:
        Domain:
          $ref: '#/components/schemas/DomainType'
          description: '<p>The domain name for the custom domain that hosts the sign-up and sign-in pages for your application. For example: <code>auth.example.com</code>. </p> <p>This string can include only lowercase letters, numbers, and hyphens. Do not use a hyphen for the first or last character. Use periods to separate subdomain names.</p>'
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The ID of the user pool that is associated with the custom domain that you are updating the certificate for.
        CustomDomainConfig:
          $ref: '#/components/schemas/CustomDomainConfigType'
          description: The configuration for a custom domain that hosts the sign-up and sign-in pages for your application. Use this object to specify an SSL certificate that is managed by ACM.
      description: The UpdateUserPoolDomain request input.
    VerifySoftwareTokenResponse:
      type: object
      properties:
        Status:
          $ref: '#/components/schemas/VerifySoftwareTokenResponseType'
          description: The status of the verify software token.
        Session:
          $ref: '#/components/schemas/SessionType'
          description: The session which should be passed both ways in challenge-response calls to the service.
    VerifySoftwareTokenRequest:
      type: object
      required:
        - UserCode
      title: VerifySoftwareTokenRequest
      properties:
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
          description: The access token.
        Session:
          $ref: '#/components/schemas/SessionType'
          description: The session which should be passed both ways in challenge-response calls to the service.
        UserCode:
          $ref: '#/components/schemas/SoftwareTokenMFAUserCodeType'
          description: 'The one time password computed using the secret code returned by <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AssociateSoftwareToken.html">AssociateSoftwareToken"</a>.'
        FriendlyDeviceName:
          $ref: '#/components/schemas/StringType'
          description: The friendly device name.
    EnableSoftwareTokenMFAException: {}
    VerifyUserAttributeResponse:
      type: object
      properties: {}
      description: A container representing the response from the server from the request to verify user attributes.
    VerifyUserAttributeRequest:
      type: object
      required:
        - AccessToken
        - AttributeName
        - Code
      title: VerifyUserAttributeRequest
      properties:
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
          description: Represents the access token of the request to verify user attributes.
        AttributeName:
          $ref: '#/components/schemas/AttributeNameType'
          description: The attribute name in the request to verify user attributes.
        Code:
          $ref: '#/components/schemas/ConfirmationCodeType'
          description: The verification code in the request to verify user attributes.
      description: Represents the request to verify user attributes.
    AWSAccountIdType:
      type: string
    AccessTokenValidityType:
      type: integer
      minimum: 1
      maximum: 86400
    RecoveryMechanismsType:
      type: array
      items:
        $ref: '#/components/schemas/RecoveryOptionType'
      minItems: 1
      maxItems: 2
    AccountRecoverySettingType:
      type: object
      properties:
        RecoveryMechanisms:
          $ref: '#/components/schemas/RecoveryMechanismsType'
          description: The list of <code>RecoveryOptionTypes</code>.
      description: The data type for <code>AccountRecoverySetting</code>.
    AccountTakeoverActionNotifyType:
      type: boolean
    AccountTakeoverEventActionType:
      type: string
      enum:
        - BLOCK
        - MFA_IF_CONFIGURED
        - MFA_REQUIRED
        - NO_ACTION
    AccountTakeoverActionType:
      type: object
      required:
        - Notify
        - EventAction
      properties:
        Notify:
          $ref: '#/components/schemas/AccountTakeoverActionNotifyType'
          description: Flag specifying whether to send a notification.
        EventAction:
          $ref: '#/components/schemas/AccountTakeoverEventActionType'
          description: '<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>'
      description: Account takeover action type.
    AccountTakeoverActionsType:
      type: object
      properties:
        LowAction:
          $ref: '#/components/schemas/AccountTakeoverActionType'
          description: Action to take for a low risk.
        MediumAction:
          $ref: '#/components/schemas/AccountTakeoverActionType'
          description: Action to take for a medium risk.
        HighAction:
          $ref: '#/components/schemas/AccountTakeoverActionType'
          description: Action to take for a high risk.
      description: Account takeover actions type.
    NotifyConfigurationType:
      type: object
      required:
        - SourceArn
      properties:
        From:
          $ref: '#/components/schemas/StringType'
          description: 'The email address that is sending the email. It must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.'
        ReplyTo:
          $ref: '#/components/schemas/StringType'
          description: The destination to which the receiver of an email should reply to.
        SourceArn:
          $ref: '#/components/schemas/ArnType'
          description: The Amazon Resource Name (ARN) of the identity that is associated with the sending authorization policy. It permits Amazon Cognito to send for the email address specified in the <code>From</code> parameter.
        BlockEmail:
          $ref: '#/components/schemas/NotifyEmailType'
          description: Email template used when a detected risk event is blocked.
        NoActionEmail:
          $ref: '#/components/schemas/NotifyEmailType'
          description: The email template used when a detected risk event is allowed.
        MfaEmail:
          $ref: '#/components/schemas/NotifyEmailType'
          description: The MFA email template used when MFA is challenged as part of a detected risk.
      description: The notify configuration type.
    AccountTakeoverRiskConfigurationType:
      type: object
      required:
        - Actions
      properties:
        NotifyConfiguration:
          $ref: '#/components/schemas/NotifyConfigurationType'
          description: The notify configuration used to construct email notifications.
        Actions:
          $ref: '#/components/schemas/AccountTakeoverActionsType'
          description: Account takeover risk configuration actions
      description: Configuration for mitigation actions and notification for different levels of risk detected for a potential account takeover.
    UserPoolIdType:
      type: string
      pattern: '[\w-]+_[0-9a-zA-Z]+'
      minLength: 1
      maxLength: 55
    CustomAttributesListType:
      type: array
      items:
        $ref: '#/components/schemas/SchemaAttributeType'
      minItems: 1
      maxItems: 25
    UsernameType:
      type: string
      pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}]+'
      minLength: 1
      maxLength: 128
      format: password
    GroupNameType:
      type: string
      pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}]+'
      minLength: 1
      maxLength: 128
    ClientMetadataType:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/StringType'
    BooleanType:
      type: boolean
    AdminCreateUserUnusedAccountValidityDaysType:
      type: integer
      minimum: 0
      maximum: 365
    MessageTemplateType:
      type: object
      properties:
        SMSMessage:
          $ref: '#/components/schemas/SmsVerificationMessageType'
          description: The message template for SMS messages.
        EmailMessage:
          $ref: '#/components/schemas/EmailVerificationMessageType'
          description: 'The message template for email messages. EmailMessage is allowed only if <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount">EmailSendingAccount</a> is DEVELOPER. '
        EmailSubject:
          $ref: '#/components/schemas/EmailVerificationSubjectType'
          description: 'The subject line for email messages. EmailSubject is allowed only if <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount">EmailSendingAccount</a> is DEVELOPER. '
      description: The message template structure.
    AdminCreateUserConfigType:
      type: object
      properties:
        AllowAdminCreateUserOnly:
          $ref: '#/components/schemas/BooleanType'
          description: Set to <code>True</code> if only the administrator is allowed to create user profiles. Set to <code>False</code> if users can sign themselves up via an app.
        UnusedAccountValidityDays:
          $ref: '#/components/schemas/AdminCreateUserUnusedAccountValidityDaysType'
          description: '<p>The user account expiration limit, in days, after which the account is no longer usable. To reset the account after that time limit, you must call <code>AdminCreateUser</code> again, specifying <code>"RESEND"</code> for the <code>MessageAction</code> parameter. The default value for this parameter is 7. </p> <note> <p>If you set a value for <code>TemporaryPasswordValidityDays</code> in <code>PasswordPolicy</code>, that value will be used and <code>UnusedAccountValidityDays</code> will be deprecated for that user pool. </p> </note>'
        InviteMessageTemplate:
          $ref: '#/components/schemas/MessageTemplateType'
          description: '<p>The message template to be used for the welcome message to new users.</p> <p>See also <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization">Customizing User Invitation Messages</a>.</p>'
      description: The configuration for creating a new user profile.
    AttributeListType:
      type: array
      items:
        $ref: '#/components/schemas/AttributeType'
    PasswordType:
      type: string
      pattern: '[\S]+'
      minLength: 6
      maxLength: 256
      format: password
    ForceAliasCreation:
      type: boolean
    MessageActionType:
      type: string
      enum:
        - RESEND
        - SUPPRESS
    DeliveryMediumListType:
      type: array
      items:
        $ref: '#/components/schemas/DeliveryMediumType'
    UserType:
      type: object
      properties:
        Username:
          $ref: '#/components/schemas/UsernameType'
          description: The user name of the user you wish to describe.
        Attributes:
          $ref: '#/components/schemas/AttributeListType'
          description: A container with information about the user type attributes.
        UserCreateDate:
          $ref: '#/components/schemas/DateType'
          description: The creation date of the user.
        UserLastModifiedDate:
          $ref: '#/components/schemas/DateType'
          description: The last modified date of the user.
        Enabled:
          $ref: '#/components/schemas/BooleanType'
          description: Specifies whether the user is enabled.
        UserStatus:
          $ref: '#/components/schemas/UserStatusType'
          description: '<p>The user status. Can be one of the following:</p> <ul> <li> <p>UNCONFIRMED - User has been created but not confirmed.</p> </li> <li> <p>CONFIRMED - User has been confirmed.</p> </li> <li> <p>ARCHIVED - User is no longer active.</p> </li> <li> <p>COMPROMISED - User is disabled due to a potential security threat.</p> </li> <li> <p>UNKNOWN - User status is not known.</p> </li> <li> <p>RESET_REQUIRED - User is confirmed, but the user must request a code and reset his or her password before he or she can sign in.</p> </li> <li> <p>FORCE_CHANGE_PASSWORD - The user is confirmed and the user can sign in using a temporary password, but on first sign-in, the user must change his or her password to a new value before doing anything else. </p> </li> </ul>'
        MFAOptions:
          $ref: '#/components/schemas/MFAOptionListType'
          description: The MFA options for the user.
      description: The user type.
    AttributeNameListType:
      type: array
      items:
        $ref: '#/components/schemas/AttributeNameType'
    StringType:
      type: string
    ProviderUserIdentifierType:
      type: object
      properties:
        ProviderName:
          $ref: '#/components/schemas/ProviderNameType'
          description: 'The name of the provider, for example, Facebook, Google, or Login with Amazon.'
        ProviderAttributeName:
          $ref: '#/components/schemas/StringType'
          description: 'The name of the provider attribute to link to, for example, <code>NameID</code>.'
        ProviderAttributeValue:
          $ref: '#/components/schemas/StringType'
          description: 'The value of the provider attribute to link to, for example, <code>xxxxx_account</code>.'
      description: A container for information about an identity provider for a user pool.
    DeviceKeyType:
      type: string
      pattern: '[\w-]+_[0-9a-f-]+'
      minLength: 1
      maxLength: 55
    DeviceType:
      type: object
      properties:
        DeviceKey:
          $ref: '#/components/schemas/DeviceKeyType'
          description: The device key.
        DeviceAttributes:
          $ref: '#/components/schemas/AttributeListType'
          description: The device attributes.
        DeviceCreateDate:
          $ref: '#/components/schemas/DateType'
          description: The creation date of the device.
        DeviceLastModifiedDate:
          $ref: '#/components/schemas/DateType'
          description: The last modified date of the device.
        DeviceLastAuthenticatedDate:
          $ref: '#/components/schemas/DateType'
          description: The date in which the device was last authenticated.
      description: The device type.
    DateType:
      type: string
      format: date-time
    UserStatusType:
      type: string
      enum:
        - UNCONFIRMED
        - CONFIRMED
        - ARCHIVED
        - COMPROMISED
        - UNKNOWN
        - RESET_REQUIRED
        - FORCE_CHANGE_PASSWORD
    MFAOptionListType:
      type: array
      items:
        $ref: '#/components/schemas/MFAOptionType'
    UserMFASettingListType:
      type: array
      items:
        $ref: '#/components/schemas/StringType'
    ClientIdType:
      type: string
      pattern: '[\w+]+'
      minLength: 1
      maxLength: 128
      format: password
    AuthFlowType:
      type: string
      enum:
        - USER_SRP_AUTH
        - REFRESH_TOKEN_AUTH
        - REFRESH_TOKEN
        - CUSTOM_AUTH
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH
        - ADMIN_USER_PASSWORD_AUTH
    AuthParametersType:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/StringType'
    AnalyticsMetadataType:
      type: object
      properties:
        AnalyticsEndpointId:
          $ref: '#/components/schemas/StringType'
          description: The endpoint ID.
      description: '<p>An Amazon Pinpoint analytics endpoint.</p> <p>An endpoint uniquely identifies a mobile device, email address, or phone number that can receive messages from Amazon Pinpoint analytics.</p> <note> <p>Cognito User Pools only supports sending events to Amazon Pinpoint projects in the US East (N. Virginia) us-east-1 Region, regardless of the region in which the user pool resides.</p> </note>'
    ContextDataType:
      type: object
      required:
        - IpAddress
        - ServerName
        - ServerPath
        - HttpHeaders
      properties:
        IpAddress:
          $ref: '#/components/schemas/StringType'
          description: Source IP address of your user.
        ServerName:
          $ref: '#/components/schemas/StringType'
          description: Your server endpoint where this API is invoked.
        ServerPath:
          $ref: '#/components/schemas/StringType'
          description: 'Your server path where this API is invoked. '
        HttpHeaders:
          $ref: '#/components/schemas/HttpHeaderList'
          description: HttpHeaders received on your server in same order.
        EncodedData:
          $ref: '#/components/schemas/StringType'
          description: 'Encoded data containing device fingerprinting details, collected using the Amazon Cognito context data collection library.'
      description: Contextual user data type used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
    ChallengeNameType:
      type: string
      enum:
        - SMS_MFA
        - SOFTWARE_TOKEN_MFA
        - SELECT_MFA_TYPE
        - MFA_SETUP
        - PASSWORD_VERIFIER
        - CUSTOM_CHALLENGE
        - DEVICE_SRP_AUTH
        - DEVICE_PASSWORD_VERIFIER
        - ADMIN_NO_SRP_AUTH
        - NEW_PASSWORD_REQUIRED
    SessionType:
      type: string
      minLength: 20
      maxLength: 2048
    ChallengeParametersType:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/StringType'
    AuthenticationResultType:
      type: object
      properties:
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
          description: The access token.
        ExpiresIn:
          $ref: '#/components/schemas/IntegerType'
          description: The expiration period of the authentication result in seconds.
        TokenType:
          $ref: '#/components/schemas/StringType'
          description: The token type.
        RefreshToken:
          $ref: '#/components/schemas/TokenModelType'
          description: The refresh token.
        IdToken:
          $ref: '#/components/schemas/TokenModelType'
          description: The ID token.
        NewDeviceMetadata:
          $ref: '#/components/schemas/NewDeviceMetadataType'
          description: The new device metadata from an authentication result.
      description: The authentication result.
    QueryLimitType:
      type: integer
      minimum: 0
      maximum: 60
    SearchPaginationTokenType:
      type: string
      pattern: '[\S]+'
      minLength: 1
    DeviceListType:
      type: array
      items:
        $ref: '#/components/schemas/DeviceType'
    PaginationKey:
      type: string
      pattern: '[\S]+'
      minLength: 1
    GroupListType:
      type: array
      items:
        $ref: '#/components/schemas/GroupType'
    AuthEventsType:
      type: array
      items:
        $ref: '#/components/schemas/AuthEventType'
    ChallengeResponsesType:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/StringType'
    SMSMfaSettingsType:
      type: object
      properties:
        Enabled:
          $ref: '#/components/schemas/BooleanType'
          description: 'Specifies whether SMS text message MFA is enabled. If an MFA type is enabled for a user, the user will be prompted for MFA during all sign in attempts, unless device tracking is turned on and the device has been trusted.'
        PreferredMfa:
          $ref: '#/components/schemas/BooleanType'
          description: Specifies whether SMS is the preferred MFA method.
      description: 'The type used for enabling SMS MFA at the user level. Phone numbers don''t need to be verified to be used for SMS MFA. If an MFA type is enabled for a user, the user will be prompted for MFA during all sign in attempts, unless device tracking is turned on and the device has been trusted. If you would like MFA to be applied selectively based on the assessed risk level of sign in attempts, disable MFA for users and turn on Adaptive Authentication for the user pool.'
    SoftwareTokenMfaSettingsType:
      type: object
      properties:
        Enabled:
          $ref: '#/components/schemas/BooleanType'
          description: 'Specifies whether software token MFA is enabled. If an MFA type is enabled for a user, the user will be prompted for MFA during all sign in attempts, unless device tracking is turned on and the device has been trusted.'
        PreferredMfa:
          $ref: '#/components/schemas/BooleanType'
          description: Specifies whether software token MFA is the preferred MFA method.
      description: 'The type used for enabling software token MFA at the user level. If an MFA type is enabled for a user, the user will be prompted for MFA during all sign in attempts, unless device tracking is turned on and the device has been trusted. If you would like MFA to be applied selectively based on the assessed risk level of sign in attempts, disable MFA for users and turn on Adaptive Authentication for the user pool.'
    EventIdType:
      type: string
      pattern: '[\w+-]+'
      minLength: 1
      maxLength: 50
    FeedbackValueType:
      type: string
      enum:
        - Valid
        - Invalid
    DeviceRememberedStatusType:
      type: string
      enum:
        - remembered
        - not_remembered
    AdvancedSecurityModeType:
      type: string
      enum:
        - 'OFF'
        - AUDIT
        - ENFORCED
    AliasAttributeType:
      type: string
      enum:
        - phone_number
        - email
        - preferred_username
    AliasAttributesListType:
      type: array
      items:
        $ref: '#/components/schemas/AliasAttributeType'
    HexStringType:
      type: string
      pattern: '^[0-9a-fA-F]+$'
    ArnType:
      type: string
      pattern: 'arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?'
      minLength: 20
      maxLength: 2048
    AnalyticsConfigurationType:
      type: object
      properties:
        ApplicationId:
          $ref: '#/components/schemas/HexStringType'
          description: The application ID for an Amazon Pinpoint application.
        ApplicationArn:
          $ref: '#/components/schemas/ArnType'
          description: The Amazon Resource Name (ARN) of an Amazon Pinpoint project. You can use the Amazon Pinpoint project for Pinpoint integration with the chosen User Pool Client. Amazon Cognito publishes events to the pinpoint project declared by the app ARN.
        RoleArn:
          $ref: '#/components/schemas/ArnType'
          description: The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics.
        ExternalId:
          $ref: '#/components/schemas/StringType'
          description: The external ID.
        UserDataShared:
          $ref: '#/components/schemas/BooleanType'
          description: 'If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.'
      description: '<p>The Amazon Pinpoint analytics configuration for collecting metrics for a user pool.</p> <note> <p>In regions where Pinpoint is not available, Cognito User Pools only supports sending events to Amazon Pinpoint projects in us-east-1. In regions where Pinpoint is available, Cognito User Pools will support sending events to Amazon Pinpoint projects within that same region. </p> </note>'
    TokenModelType:
      type: string
      pattern: '[A-Za-z0-9-_=.]+'
      format: password
    SecretCodeType:
      type: string
      pattern: '[A-Za-z0-9]+'
      minLength: 16
      format: password
    AttributeDataType:
      type: string
      enum:
        - String
        - Number
        - DateTime
        - Boolean
    AttributeType:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: '#/components/schemas/AttributeNameType'
          description: The name of the attribute.
        Value:
          $ref: '#/components/schemas/AttributeValueType'
          description: The value of the attribute.
      description: Specifies whether the attribute is standard or custom.
    AttributeMappingKeyType:
      type: string
      minLength: 1
      maxLength: 32
    AttributeMappingType:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/StringType'
    AttributeNameType:
      type: string
      pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}]+'
      minLength: 1
      maxLength: 32
    AttributeValueType:
      type: string
      maxLength: 2048
      format: password
    EventType:
      type: string
      enum:
        - SignIn
        - SignUp
        - ForgotPassword
    EventResponseType:
      type: string
      enum:
        - Success
        - Failure
    EventRiskType:
      type: object
      properties:
        RiskDecision:
          $ref: '#/components/schemas/RiskDecisionType'
          description: The risk decision.
        RiskLevel:
          $ref: '#/components/schemas/RiskLevelType'
          description: The risk level.
        CompromisedCredentialsDetected:
          $ref: '#/components/schemas/WrappedBooleanType'
          description: Indicates whether compromised credentials were detected during an authentication event.
      description: The event risk type.
    ChallengeResponseListType:
      type: array
      items:
        $ref: '#/components/schemas/ChallengeResponseType'
    EventContextDataType:
      type: object
      properties:
        IpAddress:
          $ref: '#/components/schemas/StringType'
          description: The user's IP address.
        DeviceName:
          $ref: '#/components/schemas/StringType'
          description: The user's device name.
        Timezone:
          $ref: '#/components/schemas/StringType'
          description: The user's time zone.
        City:
          $ref: '#/components/schemas/StringType'
          description: The user's city.
        Country:
          $ref: '#/components/schemas/StringType'
          description: The user's country.
      description: Specifies the user context data captured at the time of an event request.
    EventFeedbackType:
      type: object
      required:
        - FeedbackValue
        - Provider
      properties:
        FeedbackValue:
          $ref: '#/components/schemas/FeedbackValueType'
          description: The event feedback value.
        Provider:
          $ref: '#/components/schemas/StringType'
          description: The provider.
        FeedbackDate:
          $ref: '#/components/schemas/DateType'
          description: The event feedback date.
      description: Specifies the event feedback type.
    AuthEventType:
      type: object
      properties:
        EventId:
          $ref: '#/components/schemas/StringType'
          description: The event ID.
        EventType:
          $ref: '#/components/schemas/EventType'
          description: The event type.
        CreationDate:
          $ref: '#/components/schemas/DateType'
          description: The creation date
        EventResponse:
          $ref: '#/components/schemas/EventResponseType'
          description: The event response.
        EventRisk:
          $ref: '#/components/schemas/EventRiskType'
          description: The event risk.
        ChallengeResponses:
          $ref: '#/components/schemas/ChallengeResponseListType'
          description: The challenge responses.
        EventContextData:
          $ref: '#/components/schemas/EventContextDataType'
          description: The user context data captured at the time of an event request. It provides additional information about the client from which event the request is received.
        EventFeedback:
          $ref: '#/components/schemas/EventFeedbackType'
          description: 'A flag specifying the user feedback captured at the time of an event request is good or bad. '
      description: The authentication event type.
    IntegerType:
      type: integer
    NewDeviceMetadataType:
      type: object
      properties:
        DeviceKey:
          $ref: '#/components/schemas/DeviceKeyType'
          description: The device key.
        DeviceGroupKey:
          $ref: '#/components/schemas/StringType'
          description: The device group key.
      description: The new device metadata type.
    BlockedIPRangeListType:
      type: array
      items:
        $ref: '#/components/schemas/StringType'
      maxItems: 20
    CSSType:
      type: string
    CSSVersionType:
      type: string
    RedirectUrlType:
      type: string
      pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}]+'
      minLength: 1
      maxLength: 1024
    CallbackURLsListType:
      type: array
      items:
        $ref: '#/components/schemas/RedirectUrlType'
      minItems: 0
      maxItems: 100
    ChallengeName:
      type: string
      enum:
        - Password
        - Mfa
    ChallengeResponse:
      type: string
      enum:
        - Success
        - Failure
    ChallengeResponseType:
      type: object
      properties:
        ChallengeName:
          $ref: '#/components/schemas/ChallengeName'
          description: The challenge name
        ChallengeResponse:
          $ref: '#/components/schemas/ChallengeResponse'
          description: The challenge response.
      description: The challenge response type.
    ClientNameType:
      type: string
      pattern: '[\w\s+=,.@-]+'
      minLength: 1
      maxLength: 128
    ClientPermissionType:
      type: string
      minLength: 1
      maxLength: 2048
    ClientPermissionListType:
      type: array
      items:
        $ref: '#/components/schemas/ClientPermissionType'
    ClientSecretType:
      type: string
      pattern: '[\w+]+'
      minLength: 1
      maxLength: 64
      format: password
    CodeDeliveryDetailsType:
      type: object
      properties:
        Destination:
          $ref: '#/components/schemas/StringType'
          description: The destination for the code delivery details.
        DeliveryMedium:
          $ref: '#/components/schemas/DeliveryMediumType'
          description: The delivery medium (email message or phone number).
        AttributeName:
          $ref: '#/components/schemas/AttributeNameType'
          description: The attribute name.
      description: The code delivery details being returned from the server.
    CodeDeliveryDetailsListType:
      type: array
      items:
        $ref: '#/components/schemas/CodeDeliveryDetailsType'
    DeliveryMediumType:
      type: string
      enum:
        - SMS
        - EMAIL
    CompletionMessageType:
      type: string
      pattern: '[\w]+'
      minLength: 1
      maxLength: 128
    CompromisedCredentialsEventActionType:
      type: string
      enum:
        - BLOCK
        - NO_ACTION
    CompromisedCredentialsActionsType:
      type: object
      required:
        - EventAction
      properties:
        EventAction:
          $ref: '#/components/schemas/CompromisedCredentialsEventActionType'
          description: The event action.
      description: The compromised credentials actions type
    EventFiltersType:
      type: array
      items:
        $ref: '#/components/schemas/EventFilterType'
    CompromisedCredentialsRiskConfigurationType:
      type: object
      required:
        - Actions
      properties:
        EventFilter:
          $ref: '#/components/schemas/EventFiltersType'
          description: Perform the action for these events. The default is to perform all events if no event filter is specified.
        Actions:
          $ref: '#/components/schemas/CompromisedCredentialsActionsType'
          description: The compromised credentials risk configuration actions.
      description: The compromised credentials risk configuration type.
    DeviceSecretVerifierConfigType:
      type: object
      properties:
        PasswordVerifier:
          $ref: '#/components/schemas/StringType'
          description: The password verifier.
        Salt:
          $ref: '#/components/schemas/StringType'
          description: The salt.
      description: The device verifier against which it will be authenticated.
    DeviceNameType:
      type: string
      minLength: 1
      maxLength: 1024
    SecretHashType:
      type: string
      pattern: '[\w+=/]+'
      minLength: 1
      maxLength: 128
      format: password
    ConfirmationCodeType:
      type: string
      pattern: '[\S]+'
      minLength: 1
      maxLength: 2048
    UserContextDataType:
      type: object
      properties:
        EncodedData:
          $ref: '#/components/schemas/StringType'
          description: 'Contextual data such as the user''s device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.'
      description: 'Contextual data such as the user''s device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.'
    HttpHeaderList:
      type: array
      items:
        $ref: '#/components/schemas/HttpHeader'
    DescriptionType:
      type: string
      maxLength: 2048
    PrecedenceType:
      type: integer
      minimum: 0
    GroupType:
      type: object
      properties:
        GroupName:
          $ref: '#/components/schemas/GroupNameType'
          description: The name of the group.
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool.
        Description:
          $ref: '#/components/schemas/DescriptionType'
          description: A string containing the description of the group.
        RoleArn:
          $ref: '#/components/schemas/ArnType'
          description: The role ARN for the group.
        Precedence:
          $ref: '#/components/schemas/PrecedenceType'
          description: '<p>A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. If a user belongs to two or more groups, it is the group with the highest precedence whose role ARN will be used in the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the user''s tokens. Groups with higher <code>Precedence</code> values take precedence over groups with lower <code>Precedence</code> values or with null <code>Precedence</code> values.</p> <p>Two groups can have the same <code>Precedence</code> value. If this happens, neither group takes precedence over the other. If two groups with the same <code>Precedence</code> have the same role ARN, that role is used in the <code>cognito:preferred_role</code> claim in tokens for users in each group. If the two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is not set in users'' tokens.</p> <p>The default <code>Precedence</code> value is null.</p>'
        LastModifiedDate:
          $ref: '#/components/schemas/DateType'
          description: The date the group was last modified.
        CreationDate:
          $ref: '#/components/schemas/DateType'
          description: The date the group was created.
      description: The group type.
    ProviderNameTypeV1:
      type: string
      pattern: '[^_][\p{L}\p{M}\p{S}\p{N}\p{P}][^_]+'
      minLength: 1
      maxLength: 32
    IdentityProviderTypeType:
      type: string
      enum:
        - SAML
        - Facebook
        - Google
        - LoginWithAmazon
        - SignInWithApple
        - OIDC
    ProviderDetailsType:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/StringType'
    IdpIdentifiersListType:
      type: array
      items:
        $ref: '#/components/schemas/IdpIdentifierType'
      minItems: 0
      maxItems: 50
    IdentityProviderType:
      type: object
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID.
        ProviderName:
          $ref: '#/components/schemas/ProviderNameType'
          description: The identity provider name.
        ProviderType:
          $ref: '#/components/schemas/IdentityProviderTypeType'
          description: The identity provider type.
        ProviderDetails:
          $ref: '#/components/schemas/ProviderDetailsType'
          description: '<p>The identity provider details. The following list describes the provider detail keys for each identity provider type.</p> <ul> <li> <p>For Google and Login with Amazon:</p> <ul> <li> <p>client_id</p> </li> <li> <p>client_secret</p> </li> <li> <p>authorize_scopes</p> </li> </ul> </li> <li> <p>For Facebook:</p> <ul> <li> <p>client_id</p> </li> <li> <p>client_secret</p> </li> <li> <p>authorize_scopes</p> </li> <li> <p>api_version</p> </li> </ul> </li> <li> <p>For Sign in with Apple:</p> <ul> <li> <p>client_id</p> </li> <li> <p>team_id</p> </li> <li> <p>key_id</p> </li> <li> <p>private_key</p> </li> <li> <p>authorize_scopes</p> </li> </ul> </li> <li> <p>For OIDC providers:</p> <ul> <li> <p>client_id</p> </li> <li> <p>client_secret</p> </li> <li> <p>attributes_request_method</p> </li> <li> <p>oidc_issuer</p> </li> <li> <p>authorize_scopes</p> </li> <li> <p>authorize_url <i>if not available from discovery URL specified by oidc_issuer key</i> </p> </li> <li> <p>token_url <i>if not available from discovery URL specified by oidc_issuer key</i> </p> </li> <li> <p>attributes_url <i>if not available from discovery URL specified by oidc_issuer key</i> </p> </li> <li> <p>jwks_uri <i>if not available from discovery URL specified by oidc_issuer key</i> </p> </li> </ul> </li> <li> <p>For SAML providers:</p> <ul> <li> <p>MetadataFile OR MetadataURL</p> </li> <li> <p>IDPSignOut <i>optional</i> </p> </li> </ul> </li> </ul>'
        AttributeMapping:
          $ref: '#/components/schemas/AttributeMappingType'
          description: A mapping of identity provider attributes to standard and custom user pool attributes.
        IdpIdentifiers:
          $ref: '#/components/schemas/IdpIdentifiersListType'
          description: A list of identity provider identifiers.
        LastModifiedDate:
          $ref: '#/components/schemas/DateType'
          description: The date the identity provider was last modified.
        CreationDate:
          $ref: '#/components/schemas/DateType'
          description: The date the identity provider was created.
      description: A container for information about an identity provider.
    ResourceServerIdentifierType:
      type: string
      pattern: '[\x21\x23-\x5B\x5D-\x7E]+'
      minLength: 1
      maxLength: 256
    ResourceServerNameType:
      type: string
      pattern: '[\w\s+=,.@-]+'
      minLength: 1
      maxLength: 256
    ResourceServerScopeListType:
      type: array
      items:
        $ref: '#/components/schemas/ResourceServerScopeType'
      maxItems: 100
    ResourceServerType:
      type: object
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool that hosts the resource server.
        Identifier:
          $ref: '#/components/schemas/ResourceServerIdentifierType'
          description: The identifier for the resource server.
        Name:
          $ref: '#/components/schemas/ResourceServerNameType'
          description: The name of the resource server.
        Scopes:
          $ref: '#/components/schemas/ResourceServerScopeListType'
          description: A list of scopes that are defined for the resource server.
      description: A container for information about a resource server for a user pool.
    UserImportJobNameType:
      type: string
      pattern: '[\w\s+=,.@-]+'
      minLength: 1
      maxLength: 128
    UserImportJobType:
      type: object
      properties:
        JobName:
          $ref: '#/components/schemas/UserImportJobNameType'
          description: The job name for the user import job.
        JobId:
          $ref: '#/components/schemas/UserImportJobIdType'
          description: The job ID for the user import job.
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool that the users are being imported into.
        PreSignedUrl:
          $ref: '#/components/schemas/PreSignedUrlType'
          description: The pre-signed URL to be used to upload the <code>.csv</code> file.
        CreationDate:
          $ref: '#/components/schemas/DateType'
          description: The date the user import job was created.
        StartDate:
          $ref: '#/components/schemas/DateType'
          description: The date when the user import job was started.
        CompletionDate:
          $ref: '#/components/schemas/DateType'
          description: The date when the user import job was completed.
        Status:
          $ref: '#/components/schemas/UserImportJobStatusType'
          description: '<p>The status of the user import job. One of the following:</p> <ul> <li> <p> <code>Created</code> - The job was created but not started.</p> </li> <li> <p> <code>Pending</code> - A transition state. You have started the job, but it has not begun importing users yet.</p> </li> <li> <p> <code>InProgress</code> - The job has started, and users are being imported.</p> </li> <li> <p> <code>Stopping</code> - You have stopped the job, but the job has not stopped importing users yet.</p> </li> <li> <p> <code>Stopped</code> - You have stopped the job, and the job has stopped importing users.</p> </li> <li> <p> <code>Succeeded</code> - The job has completed successfully.</p> </li> <li> <p> <code>Failed</code> - The job has stopped due to an error.</p> </li> <li> <p> <code>Expired</code> - You created a job, but did not start the job within 24-48 hours. All data associated with the job was deleted, and the job cannot be started.</p> </li> </ul>'
        CloudWatchLogsRoleArn:
          $ref: '#/components/schemas/ArnType'
          description: 'The role ARN for the Amazon CloudWatch Logging role for the user import job. For more information, see "Creating the CloudWatch Logs IAM Role" in the Amazon Cognito Developer Guide.'
        ImportedUsers:
          $ref: '#/components/schemas/LongType'
          description: The number of users that were successfully imported.
        SkippedUsers:
          $ref: '#/components/schemas/LongType'
          description: The number of users that were skipped.
        FailedUsers:
          $ref: '#/components/schemas/LongType'
          description: The number of users that could not be imported.
        CompletionMessage:
          $ref: '#/components/schemas/CompletionMessageType'
          description: The message returned when the user import job is completed.
      description: The user import job type.
    GenerateSecret:
      type: boolean
    RefreshTokenValidityType:
      type: integer
      minimum: 0
      maximum: 315360000
    IdTokenValidityType:
      type: integer
      minimum: 1
      maximum: 86400
    TokenValidityUnitsType:
      type: object
      properties:
        AccessToken:
          $ref: '#/components/schemas/TimeUnitsType'
          description: ' A time unit in “seconds”, “minutes”, “hours” or “days” for the value in AccessTokenValidity, defaults to hours.'
        IdToken:
          $ref: '#/components/schemas/TimeUnitsType'
          description: 'A time unit in “seconds”, “minutes”, “hours” or “days” for the value in IdTokenValidity, defaults to hours.'
        RefreshToken:
          $ref: '#/components/schemas/TimeUnitsType'
          description: 'A time unit in “seconds”, “minutes”, “hours” or “days” for the value in RefreshTokenValidity, defaults to days.'
      description: The data type for TokenValidityUnits that specifics the time measurements for token validity.
    ExplicitAuthFlowsListType:
      type: array
      items:
        $ref: '#/components/schemas/ExplicitAuthFlowsType'
    SupportedIdentityProvidersListType:
      type: array
      items:
        $ref: '#/components/schemas/ProviderNameType'
    LogoutURLsListType:
      type: array
      items:
        $ref: '#/components/schemas/RedirectUrlType'
      minItems: 0
      maxItems: 100
    OAuthFlowsType:
      type: array
      items:
        $ref: '#/components/schemas/OAuthFlowType'
      minItems: 0
      maxItems: 3
    ScopeListType:
      type: array
      items:
        $ref: '#/components/schemas/ScopeType'
      maxItems: 50
    PreventUserExistenceErrorTypes:
      type: string
      enum:
        - LEGACY
        - ENABLED
    WrappedBooleanType:
      type: boolean
    UserPoolClientType:
      type: object
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool client.
        ClientName:
          $ref: '#/components/schemas/ClientNameType'
          description: The client name from the user pool request of the client type.
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
          description: The ID of the client associated with the user pool.
        ClientSecret:
          $ref: '#/components/schemas/ClientSecretType'
          description: The client secret from the user pool request of the client type.
        LastModifiedDate:
          $ref: '#/components/schemas/DateType'
          description: The date the user pool client was last modified.
        CreationDate:
          $ref: '#/components/schemas/DateType'
          description: The date the user pool client was created.
        RefreshTokenValidity:
          $ref: '#/components/schemas/RefreshTokenValidityType'
          description: 'The time limit, in days, after which the refresh token is no longer valid and cannot be used.'
        AccessTokenValidity:
          $ref: '#/components/schemas/AccessTokenValidityType'
          description: 'The time limit, specified by tokenValidityUnits, defaulting to hours, after which the access token is no longer valid and cannot be used.'
        IdTokenValidity:
          $ref: '#/components/schemas/IdTokenValidityType'
          description: 'The time limit, specified by tokenValidityUnits, defaulting to hours, after which the refresh token is no longer valid and cannot be used.'
        TokenValidityUnits:
          $ref: '#/components/schemas/TokenValidityUnitsType'
          description: The time units used to specify the token validity times of their respective token.
        ReadAttributes:
          $ref: '#/components/schemas/ClientPermissionListType'
          description: The Read-only attributes.
        WriteAttributes:
          $ref: '#/components/schemas/ClientPermissionListType'
          description: The writeable attributes.
        ExplicitAuthFlows:
          $ref: '#/components/schemas/ExplicitAuthFlowsListType'
          description: '<p>The authentication flows that are supported by the user pool clients. Flow names without the <code>ALLOW_</code> prefix are deprecated in favor of new names with the <code>ALLOW_</code> prefix. Note that values with <code>ALLOW_</code> prefix cannot be used along with values without <code>ALLOW_</code> prefix.</p> <p>Valid values include:</p> <ul> <li> <p> <code>ALLOW_ADMIN_USER_PASSWORD_AUTH</code>: Enable admin based user password authentication flow <code>ADMIN_USER_PASSWORD_AUTH</code>. This setting replaces the <code>ADMIN_NO_SRP_AUTH</code> setting. With this authentication flow, Cognito receives the password in the request instead of using the SRP (Secure Remote Password protocol) protocol to verify passwords.</p> </li> <li> <p> <code>ALLOW_CUSTOM_AUTH</code>: Enable Lambda trigger based authentication.</p> </li> <li> <p> <code>ALLOW_USER_PASSWORD_AUTH</code>: Enable user password-based authentication. In this flow, Cognito receives the password in the request instead of using the SRP protocol to verify passwords.</p> </li> <li> <p> <code>ALLOW_USER_SRP_AUTH</code>: Enable SRP based authentication.</p> </li> <li> <p> <code>ALLOW_REFRESH_TOKEN_AUTH</code>: Enable authflow to refresh tokens.</p> </li> </ul>'
        SupportedIdentityProviders:
          $ref: '#/components/schemas/SupportedIdentityProvidersListType'
          description: A list of provider names for the identity providers that are supported on this client.
        CallbackURLs:
          $ref: '#/components/schemas/CallbackURLsListType'
          description: '<p>A list of allowed redirect (callback) URLs for the identity providers.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href="https://tools.ietf.org/html/rfc6749#section-3.1.2">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>'
        LogoutURLs:
          $ref: '#/components/schemas/LogoutURLsListType'
          description: A list of allowed logout URLs for the identity providers.
        DefaultRedirectURI:
          $ref: '#/components/schemas/RedirectUrlType'
          description: '<p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href="https://tools.ietf.org/html/rfc6749#section-3.1.2">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>'
        AllowedOAuthFlows:
          $ref: '#/components/schemas/OAuthFlowsType'
          description: '<p>The allowed OAuth flows.</p> <p>Set to <code>code</code> to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint.</p> <p>Set to <code>implicit</code> to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.</p> <p>Set to <code>client_credentials</code> to specify that the client should get the access token (and, optionally, ID token, based on scopes) from the token endpoint using a combination of client and client_secret.</p>'
        AllowedOAuthScopes:
          $ref: '#/components/schemas/ScopeListType'
          description: 'The allowed OAuth scopes. Possible values provided by OAuth are: <code>phone</code>, <code>email</code>, <code>openid</code>, and <code>profile</code>. Possible values provided by Amazon Web Services are: <code>aws.cognito.signin.user.admin</code>. Custom scopes created in Resource Servers are also supported.'
        AllowedOAuthFlowsUserPoolClient:
          $ref: '#/components/schemas/BooleanType'
          description: Set to true if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.
        AnalyticsConfiguration:
          $ref: '#/components/schemas/AnalyticsConfigurationType'
          description: '<p>The Amazon Pinpoint analytics configuration for the user pool client.</p> <note> <p>Cognito User Pools only supports sending events to Amazon Pinpoint projects in the US East (N. Virginia) us-east-1 Region, regardless of the region in which the user pool resides.</p> </note>'
        PreventUserExistenceErrors:
          $ref: '#/components/schemas/PreventUserExistenceErrorTypes'
          description: '<p>Use this setting to choose which errors and responses are returned by Cognito APIs during authentication, account confirmation, and password recovery when the user does not exist in the user pool. When set to <code>ENABLED</code> and the user does not exist, authentication returns an error indicating either the username or password was incorrect, and account confirmation and password recovery return a response indicating a code was sent to a simulated destination. When set to <code>LEGACY</code>, those APIs will return a <code>UserNotFoundException</code> exception if the user does not exist in the user pool.</p> <p>Valid values include:</p> <ul> <li> <p> <code>ENABLED</code> - This prevents user existence-related errors.</p> </li> <li> <p> <code>LEGACY</code> - This represents the old behavior of Cognito where user existence related errors are not prevented.</p> </li> </ul> <note> <p>After February 15th 2020, the value of <code>PreventUserExistenceErrors</code> will default to <code>ENABLED</code> for newly created user pool clients if no value is provided.</p> </note>'
        EnableTokenRevocation:
          $ref: '#/components/schemas/WrappedBooleanType'
          description: 'Indicates whether token revocation is enabled for the user pool client. When you create a new user pool client, token revocation is enabled by default. For more information about revoking tokens, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html">RevokeToken</a>.'
      description: Contains information about a user pool client.
    DomainType:
      type: string
      pattern: '^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$'
      minLength: 1
      maxLength: 63
    CustomDomainConfigType:
      type: object
      required:
        - CertificateArn
      properties:
        CertificateArn:
          $ref: '#/components/schemas/ArnType'
          description: The Amazon Resource Name (ARN) of an Certificate Manager SSL certificate. You use this certificate for the subdomain of your custom domain.
      description: The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application.
    UserPoolNameType:
      type: string
      pattern: '[\w\s+=,.@-]+'
      minLength: 1
      maxLength: 128
    UserPoolPolicyType:
      type: object
      properties:
        PasswordPolicy:
          $ref: '#/components/schemas/PasswordPolicyType'
          description: The password policy.
      description: The policy associated with a user pool.
    LambdaConfigType:
      type: object
      properties:
        PreSignUp:
          $ref: '#/components/schemas/ArnType'
          description: A pre-registration Lambda trigger.
        CustomMessage:
          $ref: '#/components/schemas/ArnType'
          description: A custom Message Lambda trigger.
        PostConfirmation:
          $ref: '#/components/schemas/ArnType'
          description: A post-confirmation Lambda trigger.
        PreAuthentication:
          $ref: '#/components/schemas/ArnType'
          description: A pre-authentication Lambda trigger.
        PostAuthentication:
          $ref: '#/components/schemas/ArnType'
          description: A post-authentication Lambda trigger.
        DefineAuthChallenge:
          $ref: '#/components/schemas/ArnType'
          description: Defines the authentication challenge.
        CreateAuthChallenge:
          $ref: '#/components/schemas/ArnType'
          description: Creates an authentication challenge.
        VerifyAuthChallengeResponse:
          $ref: '#/components/schemas/ArnType'
          description: Verifies the authentication challenge response.
        PreTokenGeneration:
          $ref: '#/components/schemas/ArnType'
          description: A Lambda trigger that is invoked before token generation.
        UserMigration:
          $ref: '#/components/schemas/ArnType'
          description: The user migration Lambda config type.
        CustomSMSSender:
          $ref: '#/components/schemas/CustomSMSLambdaVersionConfigType'
          description: A custom SMS sender Lambda trigger.
        CustomEmailSender:
          $ref: '#/components/schemas/CustomEmailLambdaVersionConfigType'
          description: A custom email sender Lambda trigger.
        KMSKeyID:
          $ref: '#/components/schemas/ArnType'
          description: The Amazon Resource Name of Key Management Service <a href="/kms/latest/developerguide/concepts.html#master_keys">Customer master keys</a> . Amazon Cognito uses the key to encrypt codes and temporary passwords sent to <code>CustomEmailSender</code> and <code>CustomSMSSender</code>.
      description: Specifies the configuration for Lambda triggers.
    VerifiedAttributesListType:
      type: array
      items:
        $ref: '#/components/schemas/VerifiedAttributeType'
    UsernameAttributesListType:
      type: array
      items:
        $ref: '#/components/schemas/UsernameAttributeType'
    SmsVerificationMessageType:
      type: string
      pattern: '.*\{####\}.*'
      minLength: 6
      maxLength: 140
    EmailVerificationMessageType:
      type: string
      pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}\s*]*\{####\}[\p{L}\p{M}\p{S}\p{N}\p{P}\s*]*'
      minLength: 6
      maxLength: 20000
    EmailVerificationSubjectType:
      type: string
      pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}\s]+'
      minLength: 1
      maxLength: 140
    VerificationMessageTemplateType:
      type: object
      properties:
        SmsMessage:
          $ref: '#/components/schemas/SmsVerificationMessageType'
          description: The SMS message template.
        EmailMessage:
          $ref: '#/components/schemas/EmailVerificationMessageType'
          description: 'The email message template. EmailMessage is allowed only if <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount"> EmailSendingAccount</a> is DEVELOPER. '
        EmailSubject:
          $ref: '#/components/schemas/EmailVerificationSubjectType'
          description: 'The subject line for the email message template. EmailSubject is allowed only if <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount">EmailSendingAccount</a> is DEVELOPER. '
        EmailMessageByLink:
          $ref: '#/components/schemas/EmailVerificationMessageByLinkType'
          description: 'The email message template for sending a confirmation link to the user. EmailMessageByLink is allowed only if <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount"> EmailSendingAccount</a> is DEVELOPER.'
        EmailSubjectByLink:
          $ref: '#/components/schemas/EmailVerificationSubjectByLinkType'
          description: 'The subject line for the email message template for sending a confirmation link to the user. EmailSubjectByLink is allowed only <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount"> EmailSendingAccount</a> is DEVELOPER.'
        DefaultEmailOption:
          $ref: '#/components/schemas/DefaultEmailOptionType'
          description: The default email option.
      description: The template for verification messages.
    UserPoolMfaType:
      type: string
      enum:
        - 'OFF'
        - 'ON'
        - OPTIONAL
    DeviceConfigurationType:
      type: object
      properties:
        ChallengeRequiredOnNewDevice:
          $ref: '#/components/schemas/BooleanType'
          description: Indicates whether a challenge is required on a new device. Only applicable to a new device.
        DeviceOnlyRememberedOnUserPrompt:
          $ref: '#/components/schemas/BooleanType'
          description: 'If true, a device is only remembered on user prompt.'
      description: The configuration for the user pool's device tracking.
    EmailConfigurationType:
      type: object
      properties:
        SourceArn:
          $ref: '#/components/schemas/ArnType'
          description: '<p>The Amazon Resource Name (ARN) of a verified email address in Amazon SES. This email address is used in one of the following ways, depending on the value that you specify for the <code>EmailSendingAccount</code> parameter:</p> <ul> <li> <p>If you specify <code>COGNITO_DEFAULT</code>, Amazon Cognito uses this address as the custom FROM address when it emails your users by using its built-in email account.</p> </li> <li> <p>If you specify <code>DEVELOPER</code>, Amazon Cognito emails your users with this address by calling Amazon SES on your behalf.</p> </li> </ul>'
        ReplyToEmailAddress:
          $ref: '#/components/schemas/EmailAddressType'
          description: The destination to which the receiver of the email should reply to.
        EmailSendingAccount:
          $ref: '#/components/schemas/EmailSendingAccountType'
          description: '<p>Specifies whether Amazon Cognito emails your users by using its built-in email functionality or your Amazon SES email configuration. Specify one of the following values:</p> <dl> <dt>COGNITO_DEFAULT</dt> <dd> <p>When Amazon Cognito emails your users, it uses its built-in email functionality. When you use the default option, Amazon Cognito allows only a limited number of emails each day for your user pool. For typical production environments, the default email limit is below the required delivery volume. To achieve a higher delivery volume, specify DEVELOPER to use your Amazon SES email configuration.</p> <p>To look up the email delivery limit for the default option, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/limits.html">Limits in Amazon Cognito</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <p>The default FROM address is no-reply@verificationemail.com. To customize the FROM address, provide the ARN of an Amazon SES verified email address for the <code>SourceArn</code> parameter.</p> <p> If EmailSendingAccount is COGNITO_DEFAULT, the following parameters aren''t allowed:</p> <ul> <li> <p>EmailVerificationMessage</p> </li> <li> <p>EmailVerificationSubject</p> </li> <li> <p>InviteMessageTemplate.EmailMessage</p> </li> <li> <p>InviteMessageTemplate.EmailSubject</p> </li> <li> <p>VerificationMessageTemplate.EmailMessage</p> </li> <li> <p>VerificationMessageTemplate.EmailMessageByLink</p> </li> <li> <p>VerificationMessageTemplate.EmailSubject,</p> </li> <li> <p>VerificationMessageTemplate.EmailSubjectByLink</p> </li> </ul> <note> <p>DEVELOPER EmailSendingAccount is required.</p> </note> </dd> <dt>DEVELOPER</dt> <dd> <p>When Amazon Cognito emails your users, it uses your Amazon SES configuration. Amazon Cognito calls Amazon SES on your behalf to send email from your verified email address. When you use this option, the email delivery limits are the same limits that apply to your Amazon SES verified email address in your account.</p> <p>If you use this option, you must provide the ARN of an Amazon SES verified email address for the <code>SourceArn</code> parameter.</p> <p>Before Amazon Cognito can email your users, it requires additional permissions to call Amazon SES on your behalf. When you update your user pool with this option, Amazon Cognito creates a <i>service-linked role</i>, which is a type of IAM role, in your account. This role contains the permissions that allow Amazon Cognito to access Amazon SES and send email messages with your address. For more information about the service-linked role that Amazon Cognito creates, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/using-service-linked-roles.html">Using Service-Linked Roles for Amazon Cognito</a> in the <i>Amazon Cognito Developer Guide</i>.</p> </dd> </dl>'
        From:
          $ref: '#/components/schemas/StringType'
          description: 'Identifies either the sender’s email address or the sender’s name with their email address. For example, <code>testuser@example.com</code> or <code>Test User &lt;testuser@example.com&gt;</code>. This address will appear before the body of the email.'
        ConfigurationSet:
          $ref: '#/components/schemas/SESConfigurationSet'
          description: '<p>The set of configuration rules that can be applied to emails sent using Amazon SES. A configuration set is applied to an email by including a reference to the configuration set in the headers of the email. Once applied, all of the rules in that configuration set are applied to the email. Configuration sets can be used to apply the following types of rules to emails: </p> <ul> <li> <p>Event publishing – Amazon SES can track the number of send, delivery, open, click, bounce, and complaint events for each email sent. Use event publishing to send information about these events to other Amazon Web Services services such as SNS and CloudWatch.</p> </li> <li> <p>IP pool management – When leasing dedicated IP addresses with Amazon SES, you can create groups of IP addresses, called dedicated IP pools. You can then associate the dedicated IP pools with configuration sets.</p> </li> </ul>'
      description: '<p>The email configuration type. </p> <note> <p>Amazon Cognito has specific regions for use with Amazon SES. For more information on the supported regions, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-email.html">Email Settings for Amazon Cognito User Pools</a>.</p> </note>'
    SmsConfigurationType:
      type: object
      required:
        - SnsCallerArn
      properties:
        SnsCallerArn:
          $ref: '#/components/schemas/ArnType'
          description: 'The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) caller. This is the ARN of the IAM role in your account which Cognito will use to send SMS messages. SMS messages are subject to a <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html">spending limit</a>. '
        ExternalId:
          $ref: '#/components/schemas/StringType'
          description: '<p>The external ID is a value that we recommend you use to add security to your IAM role which is used to call Amazon SNS to send SMS messages for your user pool. If you provide an <code>ExternalId</code>, the Cognito User Pool will include it when attempting to assume your IAM role, so that you can set your roles trust policy to require the <code>ExternalID</code>. If you use the Cognito Management Console to create a role for SMS MFA, Cognito will create a role with the required permissions and a trust policy that demonstrates use of the <code>ExternalId</code>.</p> <p>For more information about the <code>ExternalId</code> of a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html">How to use an external ID when granting access to your Amazon Web Services resources to a third party</a> </p>'
      description: The SMS configuration type that includes the settings the Cognito User Pool needs to call for the Amazon SNS service to send an SMS message from your account. The Cognito User Pool makes the request to the Amazon SNS Service by using an IAM role that you provide for your account.
    UserPoolTagsType:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValueType'
    SchemaAttributesListType:
      type: array
      items:
        $ref: '#/components/schemas/SchemaAttributeType'
      minItems: 1
      maxItems: 50
    UserPoolAddOnsType:
      type: object
      required:
        - AdvancedSecurityMode
      properties:
        AdvancedSecurityMode:
          $ref: '#/components/schemas/AdvancedSecurityModeType'
          description: The advanced security mode.
      description: The user pool add-ons type.
    UsernameConfigurationType:
      type: object
      required:
        - CaseSensitive
      properties:
        CaseSensitive:
          $ref: '#/components/schemas/WrappedBooleanType'
          description: '<p>Specifies whether username case sensitivity will be applied for all users in the user pool through Cognito APIs.</p> <p>Valid values include:</p> <ul> <li> <p> <b> <code>True</code> </b>: Enables case sensitivity for all username input. When this option is set to <code>True</code>, users must sign in using the exact capitalization of their given username. For example, “UserName”. This is the default value.</p> </li> <li> <p> <b> <code>False</code> </b>: Enables case insensitivity for all username input. For example, when this option is set to <code>False</code>, users will be able to sign in using either "username" or "Username". This option also enables both <code>preferred_username</code> and <code>email</code> alias to be case insensitive, in addition to the <code>username</code> attribute.</p> </li> </ul>'
      description: 'The username configuration type. '
    UserPoolType:
      type: object
      properties:
        Id:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The ID of the user pool.
        Name:
          $ref: '#/components/schemas/UserPoolNameType'
          description: The name of the user pool.
        Policies:
          $ref: '#/components/schemas/UserPoolPolicyType'
          description: The policies associated with the user pool.
        LambdaConfig:
          $ref: '#/components/schemas/LambdaConfigType'
          description: The Lambda triggers associated with the user pool.
        Status:
          $ref: '#/components/schemas/StatusType'
          description: The status of a user pool.
        LastModifiedDate:
          $ref: '#/components/schemas/DateType'
          description: The date the user pool was last modified.
        CreationDate:
          $ref: '#/components/schemas/DateType'
          description: The date the user pool was created.
        SchemaAttributes:
          $ref: '#/components/schemas/SchemaAttributesListType'
          description: A container with the schema attributes of a user pool.
        AutoVerifiedAttributes:
          $ref: '#/components/schemas/VerifiedAttributesListType'
          description: Specifies the attributes that are auto-verified in a user pool.
        AliasAttributes:
          $ref: '#/components/schemas/AliasAttributesListType'
          description: Specifies the attributes that are aliased in a user pool.
        UsernameAttributes:
          $ref: '#/components/schemas/UsernameAttributesListType'
          description: Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up.
        SmsVerificationMessage:
          $ref: '#/components/schemas/SmsVerificationMessageType'
          description: The contents of the SMS verification message.
        EmailVerificationMessage:
          $ref: '#/components/schemas/EmailVerificationMessageType'
          description: The contents of the email verification message.
        EmailVerificationSubject:
          $ref: '#/components/schemas/EmailVerificationSubjectType'
          description: The subject of the email verification message.
        VerificationMessageTemplate:
          $ref: '#/components/schemas/VerificationMessageTemplateType'
          description: The template for verification messages.
        SmsAuthenticationMessage:
          $ref: '#/components/schemas/SmsVerificationMessageType'
          description: The contents of the SMS authentication message.
        MfaConfiguration:
          $ref: '#/components/schemas/UserPoolMfaType'
          description: '<p>Can be one of the following values:</p> <ul> <li> <p> <code>OFF</code> - MFA tokens are not required and cannot be specified during user registration.</p> </li> <li> <p> <code>ON</code> - MFA tokens are required for all user registrations. You can only specify required when you are initially creating a user pool.</p> </li> <li> <p> <code>OPTIONAL</code> - Users have the option when registering to create an MFA token.</p> </li> </ul>'
        DeviceConfiguration:
          $ref: '#/components/schemas/DeviceConfigurationType'
          description: The device configuration.
        EstimatedNumberOfUsers:
          $ref: '#/components/schemas/IntegerType'
          description: A number estimating the size of the user pool.
        EmailConfiguration:
          $ref: '#/components/schemas/EmailConfigurationType'
          description: The email configuration.
        SmsConfiguration:
          $ref: '#/components/schemas/SmsConfigurationType'
          description: The SMS configuration.
        UserPoolTags:
          $ref: '#/components/schemas/UserPoolTagsType'
          description: 'The tags that are assigned to the user pool. A tag is a label that you can apply to user pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria.'
        SmsConfigurationFailure:
          $ref: '#/components/schemas/StringType'
          description: '<p>The reason why the SMS configuration cannot send the messages to your users.</p> <p>This message might include comma-separated values to describe why your SMS configuration can''t send messages to user pool end users.</p> <ul> <li> <p>InvalidSmsRoleAccessPolicyException - The IAM role which Cognito uses to send SMS messages is not properly configured. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SmsConfigurationType.html">SmsConfigurationType</a>.</p> </li> <li> <p>SNSSandbox - The account is in SNS Sandbox and messages won’t reach unverified end users. This parameter won’t get populated with SNSSandbox if the IAM user creating the user pool doesn’t have SNS permissions. To learn how to move your account out of the sandbox, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox-moving-to-production.html">Moving out of the SMS sandbox</a>.</p> </li> </ul>'
        EmailConfigurationFailure:
          $ref: '#/components/schemas/StringType'
          description: The reason why the email configuration cannot send the messages to your users.
        Domain:
          $ref: '#/components/schemas/DomainType'
          description: Holds the domain prefix if the user pool has a domain associated with it.
        CustomDomain:
          $ref: '#/components/schemas/DomainType'
          description: '<p>A custom domain name that you provide to Amazon Cognito. This parameter applies only if you use a custom domain to host the sign-up and sign-in pages for your application. For example: <code>auth.example.com</code>.</p> <p>For more information about adding a custom domain to your user pool, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html">Using Your Own Domain for the Hosted UI</a>.</p>'
        AdminCreateUserConfig:
          $ref: '#/components/schemas/AdminCreateUserConfigType'
          description: The configuration for <code>AdminCreateUser</code> requests.
        UserPoolAddOns:
          $ref: '#/components/schemas/UserPoolAddOnsType'
          description: The user pool add-ons.
        UsernameConfiguration:
          $ref: '#/components/schemas/UsernameConfigurationType'
          description: 'You can choose to enable case sensitivity on the username input for the selected sign-in option. For example, when this is set to <code>False</code>, users will be able to sign in using either "username" or "Username". This configuration is immutable once it has been set. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UsernameConfigurationType.html">UsernameConfigurationType</a>.'
        Arn:
          $ref: '#/components/schemas/ArnType'
          description: The Amazon Resource Name (ARN) for the user pool.
        AccountRecoverySetting:
          $ref: '#/components/schemas/AccountRecoverySettingType'
          description: 'Use this setting to define which verified available method a user can use to recover their password when they call <code>ForgotPassword</code>. It allows you to define a preferred method when a user has more than one method available. With this setting, SMS does not qualify for a valid password recovery mechanism if the user also has SMS MFA enabled. In the absence of this setting, Cognito uses the legacy behavior to determine the recovery method where SMS is preferred over email.'
      description: A container for information about the user pool.
    CustomAttributeNameType:
      type: string
      pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}]+'
      minLength: 1
      maxLength: 20
    SchemaAttributeType:
      type: object
      properties:
        Name:
          $ref: '#/components/schemas/CustomAttributeNameType'
          description: A schema attribute of the name type.
        AttributeDataType:
          $ref: '#/components/schemas/AttributeDataType'
          description: The attribute data type.
        DeveloperOnlyAttribute:
          $ref: '#/components/schemas/BooleanType'
          description: '<note> <p>We recommend that you use <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UserPoolClientType.html#CognitoUserPools-Type-UserPoolClientType-WriteAttributes">WriteAttributes</a> in the user pool client to control how attributes can be mutated for new use cases instead of using <code>DeveloperOnlyAttribute</code>.</p> </note> <p>Specifies whether the attribute type is developer only. This attribute can only be modified by an administrator. Users will not be able to modify this attribute using their access token. For example, <code>DeveloperOnlyAttribute</code> can be modified using AdminUpdateUserAttributes but cannot be updated using UpdateUserAttributes.</p>'
        Mutable:
          $ref: '#/components/schemas/BooleanType'
          description: '<p>Specifies whether the value of the attribute can be changed.</p> <p>For any user pool attribute that''s mapped to an identity provider attribute, you must set this parameter to <code>true</code>. Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html">Specifying Identity Provider Attribute Mappings for Your User Pool</a>.</p>'
        Required:
          $ref: '#/components/schemas/BooleanType'
          description: 'Specifies whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.'
        NumberAttributeConstraints:
          $ref: '#/components/schemas/NumberAttributeConstraintsType'
          description: Specifies the constraints for an attribute of the number type.
        StringAttributeConstraints:
          $ref: '#/components/schemas/StringAttributeConstraintsType'
          description: Specifies the constraints for an attribute of the string type.
      description: Contains information about the schema attribute.
    CustomEmailSenderLambdaVersionType:
      type: string
      enum:
        - V1_0
    CustomEmailLambdaVersionConfigType:
      type: object
      required:
        - LambdaVersion
        - LambdaArn
      properties:
        LambdaVersion:
          $ref: '#/components/schemas/CustomEmailSenderLambdaVersionType'
          description: The Lambda version represents the signature of the "request" attribute in the "event" information Amazon Cognito passes to your custom email Lambda function. The only supported value is <code>V1_0</code>.
        LambdaArn:
          $ref: '#/components/schemas/ArnType'
          description: The Lambda Amazon Resource Name of the Lambda function that Amazon Cognito triggers to send email notifications to users.
      description: A custom email sender Lambda configuration type.
    CustomSMSSenderLambdaVersionType:
      type: string
      enum:
        - V1_0
    CustomSMSLambdaVersionConfigType:
      type: object
      required:
        - LambdaVersion
        - LambdaArn
      properties:
        LambdaVersion:
          $ref: '#/components/schemas/CustomSMSSenderLambdaVersionType'
          description: The Lambda version represents the signature of the "request" attribute in the "event" information Amazon Cognito passes to your custom SMS Lambda function. The only supported value is <code>V1_0</code>.
        LambdaArn:
          $ref: '#/components/schemas/ArnType'
          description: The Lambda Amazon Resource Name of the Lambda function that Amazon Cognito triggers to send SMS notifications to users.
      description: A custom SMS sender Lambda configuration type.
    DefaultEmailOptionType:
      type: string
      enum:
        - CONFIRM_WITH_LINK
        - CONFIRM_WITH_CODE
    ProviderNameType:
      type: string
      pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}]+'
      minLength: 1
      maxLength: 32
    RiskConfigurationType:
      type: object
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID.
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
          description: The app client ID.
        CompromisedCredentialsRiskConfiguration:
          $ref: '#/components/schemas/CompromisedCredentialsRiskConfigurationType'
          description: 'The compromised credentials risk configuration object including the <code>EventFilter</code> and the <code>EventAction</code> '
        AccountTakeoverRiskConfiguration:
          $ref: '#/components/schemas/AccountTakeoverRiskConfigurationType'
          description: The account takeover risk configuration object including the <code>NotifyConfiguration</code> object and <code>Actions</code> to take in the case of an account takeover.
        RiskExceptionConfiguration:
          $ref: '#/components/schemas/RiskExceptionConfigurationType'
          description: The configuration to override the risk decision.
        LastModifiedDate:
          $ref: '#/components/schemas/DateType'
          description: The last modified date.
      description: The risk configuration type.
    UserImportJobIdType:
      type: string
      pattern: 'import-[0-9a-zA-Z-]+'
      minLength: 1
      maxLength: 55
    DomainDescriptionType:
      type: object
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID.
        AWSAccountId:
          $ref: '#/components/schemas/AWSAccountIdType'
          description: The account ID for the user pool owner.
        Domain:
          $ref: '#/components/schemas/DomainType'
          description: The domain string.
        S3Bucket:
          $ref: '#/components/schemas/S3BucketType'
          description: The S3 bucket where the static files for this domain are stored.
        CloudFrontDistribution:
          $ref: '#/components/schemas/StringType'
          description: The ARN of the CloudFront distribution.
        Version:
          $ref: '#/components/schemas/DomainVersionType'
          description: The app version.
        Status:
          $ref: '#/components/schemas/DomainStatusType'
          description: The domain status.
        CustomDomainConfig:
          $ref: '#/components/schemas/CustomDomainConfigType'
          description: The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application.
      description: A container for information about a domain.
    S3BucketType:
      type: string
      pattern: '^[0-9A-Za-z\.\-_]*(?<!\.)$'
      minLength: 3
      maxLength: 1024
    DomainVersionType:
      type: string
      minLength: 1
      maxLength: 20
    DomainStatusType:
      type: string
      enum:
        - CREATING
        - DELETING
        - UPDATING
        - ACTIVE
        - FAILED
    EmailAddressType:
      type: string
      pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}]+@[\p{L}\p{M}\p{S}\p{N}\p{P}]+'
    EmailSendingAccountType:
      type: string
      enum:
        - COGNITO_DEFAULT
        - DEVELOPER
    SESConfigurationSet:
      type: string
      pattern: '^[a-zA-Z0-9_-]+$'
      minLength: 1
      maxLength: 64
    EmailNotificationBodyType:
      type: string
      pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}\s*]+'
      minLength: 6
      maxLength: 20000
    EmailNotificationSubjectType:
      type: string
      pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}\s]+'
      minLength: 1
      maxLength: 140
    EmailVerificationMessageByLinkType:
      type: string
      pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}\s*]*\{##[\p{L}\p{M}\p{S}\p{N}\p{P}\s*]*##\}[\p{L}\p{M}\p{S}\p{N}\p{P}\s*]*'
      minLength: 6
      maxLength: 20000
    EmailVerificationSubjectByLinkType:
      type: string
      pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}\s]+'
      minLength: 1
      maxLength: 140
    EventFilterType:
      type: string
      enum:
        - SIGN_IN
        - PASSWORD_CHANGE
        - SIGN_UP
    RiskDecisionType:
      type: string
      enum:
        - NoRisk
        - AccountTakeover
        - Block
    RiskLevelType:
      type: string
      enum:
        - Low
        - Medium
        - High
    ExplicitAuthFlowsType:
      type: string
      enum:
        - ADMIN_NO_SRP_AUTH
        - CUSTOM_AUTH_FLOW_ONLY
        - USER_PASSWORD_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
    ListOfStringTypes:
      type: array
      items:
        $ref: '#/components/schemas/StringType'
    IdpIdentifierType:
      type: string
      pattern: '[\w\s+=.@-]+'
      minLength: 1
      maxLength: 40
    UICustomizationType:
      type: object
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool.
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
          description: The client ID for the client app.
        ImageUrl:
          $ref: '#/components/schemas/ImageUrlType'
          description: The logo image for the UI customization.
        CSS:
          $ref: '#/components/schemas/CSSType'
          description: The CSS values in the UI customization.
        CSSVersion:
          $ref: '#/components/schemas/CSSVersionType'
          description: The CSS version number.
        LastModifiedDate:
          $ref: '#/components/schemas/DateType'
          description: The last-modified date for the UI customization.
        CreationDate:
          $ref: '#/components/schemas/DateType'
          description: The creation date for the UI customization.
      description: A container for the UI customization information for a user pool's built-in app UI.
    SmsMfaConfigType:
      type: object
      properties:
        SmsAuthenticationMessage:
          $ref: '#/components/schemas/SmsVerificationMessageType'
          description: 'The SMS authentication message that will be sent to users with the code they need to sign in. The message must contain the ‘{####}’ placeholder, which will be replaced with the code. If the message is not included, and default message will be used.'
        SmsConfiguration:
          $ref: '#/components/schemas/SmsConfigurationType'
          description: The SMS configuration.
      description: The SMS text message multi-factor authentication (MFA) configuration type.
    SoftwareTokenMfaConfigType:
      type: object
      properties:
        Enabled:
          $ref: '#/components/schemas/BooleanType'
          description: Specifies whether software token MFA is enabled.
      description: The type used for enabling software token MFA at the user pool level.
    HttpHeader:
      type: object
      properties:
        headerName:
          $ref: '#/components/schemas/StringType'
          description: The header name
        headerValue:
          $ref: '#/components/schemas/StringType'
          description: The header value.
      description: The HTTP header.
    ImageFileType:
      type: string
    ImageUrlType:
      type: string
    ListProvidersLimitType:
      type: integer
      minimum: 0
      maximum: 60
    PaginationKeyType:
      type: string
      pattern: '[\S]+'
      minLength: 1
    ProvidersListType:
      type: array
      items:
        $ref: '#/components/schemas/ProviderDescription'
      minItems: 0
      maxItems: 50
    ListResourceServersLimitType:
      type: integer
      minimum: 1
      maximum: 50
    ResourceServersListType:
      type: array
      items:
        $ref: '#/components/schemas/ResourceServerType'
    PoolQueryLimitType:
      type: integer
      minimum: 1
      maximum: 60
    UserImportJobsListType:
      type: array
      items:
        $ref: '#/components/schemas/UserImportJobType'
      minItems: 1
      maxItems: 50
    QueryLimit:
      type: integer
      minimum: 1
      maximum: 60
    UserPoolClientListType:
      type: array
      items:
        $ref: '#/components/schemas/UserPoolClientDescription'
    UserPoolListType:
      type: array
      items:
        $ref: '#/components/schemas/UserPoolDescriptionType'
    UsersListType:
      type: array
      items:
        $ref: '#/components/schemas/UserType'
    SearchedAttributeNamesListType:
      type: array
      items:
        $ref: '#/components/schemas/AttributeNameType'
    UserFilterType:
      type: string
      maxLength: 256
    LongType:
      type: integer
    MFAOptionType:
      type: object
      properties:
        DeliveryMedium:
          $ref: '#/components/schemas/DeliveryMediumType'
          description: The delivery medium to send the MFA code. You can use this parameter to set only the <code>SMS</code> delivery medium value.
        AttributeName:
          $ref: '#/components/schemas/AttributeNameType'
          description: The attribute name of the MFA option type. The only valid value is <code>phone_number</code>.
      description: ' <i>This data type is no longer supported.</i> You can use it only for SMS MFA configurations. You can''t use it for TOTP software token MFA configurations.'
    NotifyEmailType:
      type: object
      required:
        - Subject
      properties:
        Subject:
          $ref: '#/components/schemas/EmailNotificationSubjectType'
          description: The subject.
        HtmlBody:
          $ref: '#/components/schemas/EmailNotificationBodyType'
          description: The HTML body.
        TextBody:
          $ref: '#/components/schemas/EmailNotificationBodyType'
          description: The text body.
      description: The notify email type.
    NumberAttributeConstraintsType:
      type: object
      properties:
        MinValue:
          $ref: '#/components/schemas/StringType'
          description: The minimum value of an attribute that is of the number data type.
        MaxValue:
          $ref: '#/components/schemas/StringType'
          description: The maximum value of an attribute that is of the number data type.
      description: The minimum and maximum value of an attribute that is of the number data type.
    OAuthFlowType:
      type: string
      enum:
        - code
        - implicit
        - client_credentials
    PasswordPolicyMinLengthType:
      type: integer
      minimum: 6
      maximum: 99
    TemporaryPasswordValidityDaysType:
      type: integer
      minimum: 0
      maximum: 365
    PasswordPolicyType:
      type: object
      properties:
        MinimumLength:
          $ref: '#/components/schemas/PasswordPolicyMinLengthType'
          description: The minimum length of the password policy that you have set. Cannot be less than 6.
        RequireUppercase:
          $ref: '#/components/schemas/BooleanType'
          description: 'In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password.'
        RequireLowercase:
          $ref: '#/components/schemas/BooleanType'
          description: 'In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password.'
        RequireNumbers:
          $ref: '#/components/schemas/BooleanType'
          description: 'In the password policy that you have set, refers to whether you have required users to use at least one number in their password.'
        RequireSymbols:
          $ref: '#/components/schemas/BooleanType'
          description: 'In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password.'
        TemporaryPasswordValidityDays:
          $ref: '#/components/schemas/TemporaryPasswordValidityDaysType'
          description: '<p>In the password policy you have set, refers to the number of days a temporary password is valid. If the user does not sign-in during this time, their password will need to be reset by an administrator.</p> <note> <p>When you set <code>TemporaryPasswordValidityDays</code> for a user pool, you will no longer be able to set the deprecated <code>UnusedAccountValidityDays</code> value for that user pool.</p> </note>'
      description: The password policy type.
    PreSignedUrlType:
      type: string
      minLength: 0
      maxLength: 2048
    PriorityType:
      type: integer
      minimum: 1
      maximum: 2
    ProviderDescription:
      type: object
      properties:
        ProviderName:
          $ref: '#/components/schemas/ProviderNameType'
          description: The identity provider name.
        ProviderType:
          $ref: '#/components/schemas/IdentityProviderTypeType'
          description: The identity provider type.
        LastModifiedDate:
          $ref: '#/components/schemas/DateType'
          description: The date the provider was last modified.
        CreationDate:
          $ref: '#/components/schemas/DateType'
          description: The date the provider was added to the user pool.
      description: A container for identity provider details.
    RecoveryOptionType:
      type: object
      required:
        - Priority
        - Name
      properties:
        Priority:
          $ref: '#/components/schemas/PriorityType'
          description: A positive integer specifying priority of a method with 1 being the highest priority.
        Name:
          $ref: '#/components/schemas/RecoveryOptionNameType'
          description: Specifies the recovery method for a user.
      description: 'A map containing a priority as a key, and recovery method name as a value.'
    RecoveryOptionNameType:
      type: string
      enum:
        - verified_email
        - verified_phone_number
        - admin_only
    ResourceServerScopeDescriptionType:
      type: string
      minLength: 1
      maxLength: 256
    ResourceServerScopeType:
      type: object
      required:
        - ScopeName
        - ScopeDescription
      properties:
        ScopeName:
          $ref: '#/components/schemas/ResourceServerScopeNameType'
          description: The name of the scope.
        ScopeDescription:
          $ref: '#/components/schemas/ResourceServerScopeDescriptionType'
          description: A description of the scope.
      description: A resource server scope.
    ResourceServerScopeNameType:
      type: string
      pattern: '[\x21\x23-\x2E\x30-\x5B\x5D-\x7E]+'
      minLength: 1
      maxLength: 256
    RiskExceptionConfigurationType:
      type: object
      properties:
        BlockedIPRangeList:
          $ref: '#/components/schemas/BlockedIPRangeListType'
          description: 'Overrides the risk decision to always block the pre-authentication requests. The IP range is in CIDR notation: a compact representation of an IP address and its associated routing prefix.'
        SkippedIPRangeList:
          $ref: '#/components/schemas/SkippedIPRangeListType'
          description: Risk detection is not performed on the IP addresses in the range list. The IP range is in CIDR notation.
      description: The type of the configuration to override the risk decision.
    SkippedIPRangeListType:
      type: array
      items:
        $ref: '#/components/schemas/StringType'
      maxItems: 20
    StringAttributeConstraintsType:
      type: object
      properties:
        MinLength:
          $ref: '#/components/schemas/StringType'
          description: The minimum length.
        MaxLength:
          $ref: '#/components/schemas/StringType'
          description: The maximum length.
      description: The constraints associated with a string attribute.
    ScopeType:
      type: string
      pattern: '[\x21\x23-\x5B\x5D-\x7E]+'
      minLength: 1
      maxLength: 256
    SoftwareTokenMFAUserCodeType:
      type: string
      pattern: '[0-9]+'
      minLength: 6
      maxLength: 6
    StatusType:
      type: string
      enum:
        - Enabled
        - Disabled
    TagKeysType:
      type: string
      minLength: 1
      maxLength: 128
    TagValueType:
      type: string
      minLength: 0
      maxLength: 256
    TimeUnitsType:
      type: string
      enum:
        - seconds
        - minutes
        - hours
        - days
    UserPoolTagsListType:
      type: array
      items:
        $ref: '#/components/schemas/TagKeysType'
    UserImportJobStatusType:
      type: string
      enum:
        - Created
        - Pending
        - InProgress
        - Stopping
        - Expired
        - Stopped
        - Failed
        - Succeeded
    UserPoolClientDescription:
      type: object
      properties:
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
          description: The ID of the client associated with the user pool.
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The user pool ID for the user pool where you want to describe the user pool client.
        ClientName:
          $ref: '#/components/schemas/ClientNameType'
          description: The client name from the user pool client description.
      description: The description of the user pool client.
    UserPoolDescriptionType:
      type: object
      properties:
        Id:
          $ref: '#/components/schemas/UserPoolIdType'
          description: The ID in a user pool description.
        Name:
          $ref: '#/components/schemas/UserPoolNameType'
          description: The name in a user pool description.
        LambdaConfig:
          $ref: '#/components/schemas/LambdaConfigType'
          description: The Lambda configuration information in a user pool description.
        Status:
          $ref: '#/components/schemas/StatusType'
          description: The user pool status in a user pool description.
        LastModifiedDate:
          $ref: '#/components/schemas/DateType'
          description: The date the user pool description was last modified.
        CreationDate:
          $ref: '#/components/schemas/DateType'
          description: The date the user pool description was created.
      description: A user pool description.
    UsernameAttributeType:
      type: string
      enum:
        - phone_number
        - email
    VerifiedAttributeType:
      type: string
      enum:
        - phone_number
        - email
    VerifySoftwareTokenResponseType:
      type: string
      enum:
        - SUCCESS
        - ERROR
security:
  - hmac: []

openapi: 3.0.0
info:
  version: '2019-05-23'
  x-release: v4
  title: AWS Ground Station
  description: 'Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: groundstation
  x-aws-signingName: groundstation
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/groundstation-2019-05-23.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/groundstation/'
servers:
  - url: 'http://groundstation.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The AWS Ground Station multi-region endpoint
  - url: 'https://groundstation.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The AWS Ground Station multi-region endpoint
  - url: 'http://groundstation.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS Ground Station endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://groundstation.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS Ground Station endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  '/contact/{contactId}':
    delete:
      operationId: CancelContact
      description: Cancels a contact with a specified contact ID.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactIdResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: DependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: contactId
          in: path
          required: true
          description: UUID of a contact.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeContact
      description: Describes an existing contact.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeContactResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: DependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: contactId
          in: path
          required: true
          description: UUID of a contact.
          schema:
            type: string
  /config:
    post:
      operationId: CreateConfig
      description: <p>Creates a <code>Config</code> with the specified <code>configData</code> parameters.</p> <p>Only one type of <code>configData</code> can be specified.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigIdResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: DependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
        '482':
          description: ResourceLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceLimitExceededException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - configData
                - name
              properties:
                configData:
                  description: <p>Object containing the parameters of a <code>Config</code>.</p> <p>See the subtype definitions for what each type of <code>Config</code> contains.</p>
                  type: object
                  properties:
                    antennaDownlinkConfig:
                      $ref: '#/components/schemas/AntennaDownlinkConfig'
                      description: Information about how AWS Ground Station should configure an antenna for downlink during a contact.
                    antennaDownlinkDemodDecodeConfig:
                      $ref: '#/components/schemas/AntennaDownlinkDemodDecodeConfig'
                      description: Information about how AWS Ground Station should conﬁgure an antenna for downlink demod decode during a contact.
                    antennaUplinkConfig:
                      $ref: '#/components/schemas/AntennaUplinkConfig'
                      description: Information about how AWS Ground Station should conﬁgure an antenna for uplink during a contact.
                    dataflowEndpointConfig:
                      $ref: '#/components/schemas/DataflowEndpointConfig'
                      description: Information about the dataflow endpoint <code>Config</code>.
                    s3RecordingConfig:
                      $ref: '#/components/schemas/S3RecordingConfig'
                      description: Information about an S3 recording <code>Config</code>.
                    trackingConfig:
                      $ref: '#/components/schemas/TrackingConfig'
                      description: 'Object that determines whether tracking should be used during a contact executed with this <code>Config</code> in the mission profile. '
                    uplinkEchoConfig:
                      $ref: '#/components/schemas/UplinkEchoConfig'
                      description: '<p>Information about an uplink echo <code>Config</code>.</p> <p>Parameters from the <code>AntennaUplinkConfig</code>, corresponding to the specified <code>AntennaUplinkConfigArn</code>, are used when this <code>UplinkEchoConfig</code> is used in a contact.</p>'
                name:
                  description: Name of a <code>Config</code>.
                  type: string
                  pattern: '^[ a-zA-Z0-9_:-]{1,256}$'
                  minLength: 1
                  maxLength: 256
                tags:
                  description: Tags assigned to a <code>Config</code>.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListConfigs
      description: Returns a list of <code>Config</code> objects.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConfigsResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: DependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: Maximum number of <code>Configs</code> returned.
          schema:
            type: integer
        - name: nextToken
          in: query
          required: false
          description: Next token returned in the request of a previous <code>ListConfigs</code> call. Used to get the next page of results.
          schema:
            type: string
  /dataflowEndpointGroup:
    post:
      operationId: CreateDataflowEndpointGroup
      description: '<p>Creates a <code>DataflowEndpoint</code> group containing the specified list of <code>DataflowEndpoint</code> objects.</p> <p>The <code>name</code> field in each endpoint is used in your mission profile <code>DataflowEndpointConfig</code> to specify which endpoints to use during a contact.</p> <p>When a contact uses multiple <code>DataflowEndpointConfig</code> objects, each <code>Config</code> must match a <code>DataflowEndpoint</code> in the same group.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataflowEndpointGroupIdResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: DependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - endpointDetails
              properties:
                endpointDetails:
                  description: Endpoint details of each endpoint in the dataflow endpoint group.
                  type: array
                  items:
                    $ref: '#/components/schemas/EndpointDetails'
                tags:
                  description: Tags of a dataflow endpoint group.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListDataflowEndpointGroups
      description: Returns a list of <code>DataflowEndpoint</code> groups.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDataflowEndpointGroupsResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: DependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: Maximum number of dataflow endpoint groups returned.
          schema:
            type: integer
        - name: nextToken
          in: query
          required: false
          description: Next token returned in the request of a previous <code>ListDataflowEndpointGroups</code> call. Used to get the next page of results.
          schema:
            type: string
  /missionprofile:
    post:
      operationId: CreateMissionProfile
      description: '<p>Creates a mission profile.</p> <p> <code>dataflowEdges</code> is a list of lists of strings. Each lower level list of strings has two elements: a <i>from</i> ARN and a <i>to</i> ARN.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissionProfileIdResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: DependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - dataflowEdges
                - minimumViableContactDurationSeconds
                - name
                - trackingConfigArn
              properties:
                contactPostPassDurationSeconds:
                  description: Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.
                  type: integer
                  minimum: 1
                  maximum: 21600
                contactPrePassDurationSeconds:
                  description: Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.
                  type: integer
                  minimum: 1
                  maximum: 21600
                dataflowEdges:
                  description: 'A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>.'
                  type: array
                  items:
                    $ref: '#/components/schemas/DataflowEdge'
                minimumViableContactDurationSeconds:
                  description: Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.
                  type: integer
                  minimum: 1
                  maximum: 21600
                name:
                  description: Name of a mission profile.
                  type: string
                  pattern: '^[ a-zA-Z0-9_:-]{1,256}$'
                  minLength: 1
                  maxLength: 256
                tags:
                  description: Tags assigned to a mission profile.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
                trackingConfigArn:
                  description: ARN of a tracking <code>Config</code>.
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListMissionProfiles
      description: Returns a list of mission profiles.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMissionProfilesResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: DependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: Maximum number of mission profiles returned.
          schema:
            type: integer
        - name: nextToken
          in: query
          required: false
          description: Next token returned in the request of a previous <code>ListMissionProfiles</code> call. Used to get the next page of results.
          schema:
            type: string
  '/config/{configType}/{configId}':
    delete:
      operationId: DeleteConfig
      description: Deletes a <code>Config</code>.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigIdResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: DependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: configId
          in: path
          required: true
          description: UUID of a <code>Config</code>.
          schema:
            type: string
        - name: configType
          in: path
          required: true
          description: Type of a <code>Config</code>.
          schema:
            type: string
            enum:
              - antenna-downlink
              - antenna-downlink-demod-decode
              - antenna-uplink
              - dataflow-endpoint
              - tracking
              - uplink-echo
              - s3-recording
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetConfig
      description: <p>Returns <code>Config</code> information.</p> <p>Only one <code>Config</code> response can be returned.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConfigResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: DependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: configId
          in: path
          required: true
          description: UUID of a <code>Config</code>.
          schema:
            type: string
        - name: configType
          in: path
          required: true
          description: Type of a <code>Config</code>.
          schema:
            type: string
            enum:
              - antenna-downlink
              - antenna-downlink-demod-decode
              - antenna-uplink
              - dataflow-endpoint
              - tracking
              - uplink-echo
              - s3-recording
    put:
      operationId: UpdateConfig
      description: <p>Updates the <code>Config</code> used when scheduling contacts.</p> <p>Updating a <code>Config</code> will not update the execution parameters for existing future contacts scheduled with this <code>Config</code>.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigIdResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: DependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: configId
          in: path
          required: true
          description: UUID of a <code>Config</code>.
          schema:
            type: string
        - name: configType
          in: path
          required: true
          description: Type of a <code>Config</code>.
          schema:
            type: string
            enum:
              - antenna-downlink
              - antenna-downlink-demod-decode
              - antenna-uplink
              - dataflow-endpoint
              - tracking
              - uplink-echo
              - s3-recording
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - configData
                - name
              properties:
                configData:
                  description: <p>Object containing the parameters of a <code>Config</code>.</p> <p>See the subtype definitions for what each type of <code>Config</code> contains.</p>
                  type: object
                  properties:
                    antennaDownlinkConfig:
                      $ref: '#/components/schemas/AntennaDownlinkConfig'
                      description: Information about how AWS Ground Station should configure an antenna for downlink during a contact.
                    antennaDownlinkDemodDecodeConfig:
                      $ref: '#/components/schemas/AntennaDownlinkDemodDecodeConfig'
                      description: Information about how AWS Ground Station should conﬁgure an antenna for downlink demod decode during a contact.
                    antennaUplinkConfig:
                      $ref: '#/components/schemas/AntennaUplinkConfig'
                      description: Information about how AWS Ground Station should conﬁgure an antenna for uplink during a contact.
                    dataflowEndpointConfig:
                      $ref: '#/components/schemas/DataflowEndpointConfig'
                      description: Information about the dataflow endpoint <code>Config</code>.
                    s3RecordingConfig:
                      $ref: '#/components/schemas/S3RecordingConfig'
                      description: Information about an S3 recording <code>Config</code>.
                    trackingConfig:
                      $ref: '#/components/schemas/TrackingConfig'
                      description: 'Object that determines whether tracking should be used during a contact executed with this <code>Config</code> in the mission profile. '
                    uplinkEchoConfig:
                      $ref: '#/components/schemas/UplinkEchoConfig'
                      description: '<p>Information about an uplink echo <code>Config</code>.</p> <p>Parameters from the <code>AntennaUplinkConfig</code>, corresponding to the specified <code>AntennaUplinkConfigArn</code>, are used when this <code>UplinkEchoConfig</code> is used in a contact.</p>'
                name:
                  description: Name of a <code>Config</code>.
                  type: string
                  pattern: '^[ a-zA-Z0-9_:-]{1,256}$'
                  minLength: 1
                  maxLength: 256
  '/dataflowEndpointGroup/{dataflowEndpointGroupId}':
    delete:
      operationId: DeleteDataflowEndpointGroup
      description: Deletes a dataflow endpoint group.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataflowEndpointGroupIdResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: DependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: dataflowEndpointGroupId
          in: path
          required: true
          description: UUID of a dataflow endpoint group.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDataflowEndpointGroup
      description: Returns the dataflow endpoint group.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDataflowEndpointGroupResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: DependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: dataflowEndpointGroupId
          in: path
          required: true
          description: UUID of a dataflow endpoint group.
          schema:
            type: string
  '/missionprofile/{missionProfileId}':
    delete:
      operationId: DeleteMissionProfile
      description: Deletes a mission profile.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissionProfileIdResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: DependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: missionProfileId
          in: path
          required: true
          description: UUID of a mission profile.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetMissionProfile
      description: Returns a mission profile.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMissionProfileResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: DependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: missionProfileId
          in: path
          required: true
          description: UUID of a mission profile.
          schema:
            type: string
    put:
      operationId: UpdateMissionProfile
      description: <p>Updates a mission profile.</p> <p>Updating a mission profile will not update the execution parameters for existing future contacts.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissionProfileIdResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: DependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: missionProfileId
          in: path
          required: true
          description: UUID of a mission profile.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contactPostPassDurationSeconds:
                  description: Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.
                  type: integer
                  minimum: 1
                  maximum: 21600
                contactPrePassDurationSeconds:
                  description: Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.
                  type: integer
                  minimum: 1
                  maximum: 21600
                dataflowEdges:
                  description: 'A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>.'
                  type: array
                  items:
                    $ref: '#/components/schemas/DataflowEdge'
                minimumViableContactDurationSeconds:
                  description: Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.
                  type: integer
                  minimum: 1
                  maximum: 21600
                name:
                  description: Name of a mission profile.
                  type: string
                  pattern: '^[ a-zA-Z0-9_:-]{1,256}$'
                  minLength: 1
                  maxLength: 256
                trackingConfigArn:
                  description: ARN of a tracking <code>Config</code>.
                  type: string
  /minute-usage:
    post:
      operationId: GetMinuteUsage
      description: Returns the number of minutes used by account.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMinuteUsageResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: DependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - month
                - year
              properties:
                month:
                  description: 'The month being requested, with a value of 1-12.'
                  type: integer
                year:
                  description: 'The year being requested, in the format of YYYY.'
                  type: integer
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/satellite/{satelliteId}':
    get:
      operationId: GetSatellite
      description: Returns a satellite.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSatelliteResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: DependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: satelliteId
          in: path
          required: true
          description: UUID of a satellite.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /contacts:
    post:
      operationId: ListContacts
      description: '<p>Returns a list of contacts.</p> <p>If <code>statusList</code> contains AVAILABLE, the request must include <code>groundStation</code>, <code>missionprofileArn</code>, and <code>satelliteArn</code>. </p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListContactsResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: DependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - endTime
                - startTime
                - statusList
              properties:
                endTime:
                  description: End time of a contact.
                  type: string
                  format: date-time
                groundStation:
                  description: Name of a ground station.
                  type: string
                maxResults:
                  description: Maximum number of contacts returned.
                  type: integer
                missionProfileArn:
                  description: ARN of a mission profile.
                  type: string
                nextToken:
                  description: Next token returned in the request of a previous <code>ListContacts</code> call. Used to get the next page of results.
                  type: string
                satelliteArn:
                  description: ARN of a satellite.
                  type: string
                startTime:
                  description: Start time of a contact.
                  type: string
                  format: date-time
                statusList:
                  description: Status of a contact reservation.
                  type: array
                  items:
                    $ref: '#/components/schemas/ContactStatus'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /groundstation:
    get:
      operationId: ListGroundStations
      description: 'Returns a list of ground stations. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGroundStationsResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: DependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: Maximum number of ground stations returned.
          schema:
            type: integer
        - name: nextToken
          in: query
          required: false
          description: Next token that can be supplied in the next call to get the next page of ground stations.
          schema:
            type: string
        - name: satelliteId
          in: query
          required: false
          description: Satellite ID to retrieve on-boarded ground stations.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /satellite:
    get:
      operationId: ListSatellites
      description: Returns a list of satellites.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSatellitesResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: DependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: Maximum number of satellites returned.
          schema:
            type: integer
        - name: nextToken
          in: query
          required: false
          description: Next token that can be supplied in the next call to get the next page of satellites.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/tags/{resourceArn}':
    get:
      operationId: ListTagsForResource
      description: Returns a list of tags for a specified resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: DependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: ARN of a resource.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: TagResource
      description: Assigns a tag to a resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: DependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: ARN of a resource tag.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tags
              properties:
                tags:
                  description: Tags assigned to a resource.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
  /contact:
    post:
      operationId: ReserveContact
      description: Reserves a contact using specified parameters.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactIdResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: DependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - endTime
                - groundStation
                - missionProfileArn
                - satelliteArn
                - startTime
              properties:
                endTime:
                  description: End time of a contact.
                  type: string
                  format: date-time
                groundStation:
                  description: Name of a ground station.
                  type: string
                missionProfileArn:
                  description: ARN of a mission profile.
                  type: string
                satelliteArn:
                  description: ARN of a satellite
                  type: string
                startTime:
                  description: Start time of a contact.
                  type: string
                  format: date-time
                tags:
                  description: Tags assigned to a contact.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/tags/{resourceArn}#tagKeys':
    delete:
      operationId: UntagResource
      description: Deassigns a resource tag.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: DependencyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: ARN of a resource.
          schema:
            type: string
        - name: tagKeys
          in: query
          required: true
          description: Keys of a resource tag.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/String'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    ContactIdResponse:
      type: object
      properties:
        contactId:
          $ref: '#/components/schemas/String'
          description: UUID of a contact.
      description: <p/>
    InvalidParameterException: {}
    DependencyException: {}
    ResourceNotFoundException: {}
    ConfigIdResponse:
      type: object
      properties:
        configArn:
          $ref: '#/components/schemas/ConfigArn'
          description: ARN of a <code>Config</code>.
        configId:
          $ref: '#/components/schemas/String'
          description: UUID of a <code>Config</code>.
        configType:
          $ref: '#/components/schemas/ConfigCapabilityType'
          description: Type of a <code>Config</code>.
      description: <p/>
    AntennaDownlinkConfig:
      type: object
      required:
        - spectrumConfig
      properties:
        spectrumConfig:
          $ref: '#/components/schemas/SpectrumConfig'
          description: Object that describes a spectral <code>Config</code>.
      description: Information about how AWS Ground Station should configure an antenna for downlink during a contact.
    AntennaDownlinkDemodDecodeConfig:
      type: object
      required:
        - decodeConfig
        - demodulationConfig
        - spectrumConfig
      properties:
        decodeConfig:
          $ref: '#/components/schemas/DecodeConfig'
          description: Information about the decode <code>Config</code>.
        demodulationConfig:
          $ref: '#/components/schemas/DemodulationConfig'
          description: Information about the demodulation <code>Config</code>.
        spectrumConfig:
          $ref: '#/components/schemas/SpectrumConfig'
          description: Information about the spectral <code>Config</code>.
      description: Information about how AWS Ground Station should conﬁgure an antenna for downlink demod decode during a contact.
    AntennaUplinkConfig:
      type: object
      required:
        - spectrumConfig
        - targetEirp
      properties:
        spectrumConfig:
          $ref: '#/components/schemas/UplinkSpectrumConfig'
          description: Information about the uplink spectral <code>Config</code>.
        targetEirp:
          $ref: '#/components/schemas/Eirp'
          description: EIRP of the target.
        transmitDisabled:
          $ref: '#/components/schemas/Boolean'
          description: Whether or not uplink transmit is disabled.
      description: Information about the uplink <code>Config</code> of an antenna.
    DataflowEndpointConfig:
      type: object
      required:
        - dataflowEndpointName
      properties:
        dataflowEndpointName:
          $ref: '#/components/schemas/String'
          description: Name of a dataflow endpoint.
        dataflowEndpointRegion:
          $ref: '#/components/schemas/String'
          description: Region of a dataflow endpoint.
      description: Information about the dataflow endpoint <code>Config</code>.
    S3RecordingConfig:
      type: object
      required:
        - bucketArn
        - roleArn
      properties:
        bucketArn:
          $ref: '#/components/schemas/BucketArn'
          description: ARN of the bucket to record to.
        prefix:
          $ref: '#/components/schemas/S3KeyPrefix'
          description: S3 Key prefix to prefice data files.
        roleArn:
          $ref: '#/components/schemas/RoleArn'
          description: ARN of the role Ground Station assumes to write data to the bucket.
      description: Information about an S3 recording <code>Config</code>.
    TrackingConfig:
      type: object
      required:
        - autotrack
      properties:
        autotrack:
          $ref: '#/components/schemas/Criticality'
          description: Current setting for autotrack.
      description: Object that determines whether tracking should be used during a contact executed with this <code>Config</code> in the mission profile.
    UplinkEchoConfig:
      type: object
      required:
        - antennaUplinkConfigArn
        - enabled
      properties:
        antennaUplinkConfigArn:
          $ref: '#/components/schemas/ConfigArn'
          description: ARN of an uplink <code>Config</code>.
        enabled:
          $ref: '#/components/schemas/Boolean'
          description: Whether or not an uplink <code>Config</code> is enabled.
      description: '<p>Information about an uplink echo <code>Config</code>.</p> <p>Parameters from the <code>AntennaUplinkConfig</code>, corresponding to the specified <code>AntennaUplinkConfigArn</code>, are used when this <code>UplinkEchoConfig</code> is used in a contact.</p>'
    String:
      type: string
    ResourceLimitExceededException: {}
    DataflowEndpointGroupIdResponse:
      type: object
      properties:
        dataflowEndpointGroupId:
          $ref: '#/components/schemas/String'
          description: UUID of a dataflow endpoint group.
      description: <p/>
    EndpointDetails:
      type: object
      properties:
        endpoint:
          $ref: '#/components/schemas/DataflowEndpoint'
          description: A dataflow endpoint.
        securityDetails:
          $ref: '#/components/schemas/SecurityDetails'
          description: Endpoint security details.
      description: Information about the endpoint details.
    MissionProfileIdResponse:
      type: object
      properties:
        missionProfileId:
          $ref: '#/components/schemas/String'
          description: UUID of a mission profile.
      description: <p/>
    DataflowEdge:
      type: array
      items:
        $ref: '#/components/schemas/ConfigArn'
      minItems: 2
      maxItems: 2
    DescribeContactResponse:
      type: object
      properties:
        contactId:
          $ref: '#/components/schemas/String'
          description: UUID of a contact.
        contactStatus:
          $ref: '#/components/schemas/ContactStatus'
          description: Status of a contact.
        dataflowList:
          $ref: '#/components/schemas/DataflowList'
          description: List describing source and destination details for each dataflow edge.
        endTime:
          $ref: '#/components/schemas/Timestamp'
          description: End time of a contact.
        errorMessage:
          $ref: '#/components/schemas/String'
          description: Error message for a contact.
        groundStation:
          $ref: '#/components/schemas/String'
          description: Ground station for a contact.
        maximumElevation:
          $ref: '#/components/schemas/Elevation'
          description: Maximum elevation angle of a contact.
        missionProfileArn:
          $ref: '#/components/schemas/MissionProfileArn'
          description: ARN of a mission profile.
        postPassEndTime:
          $ref: '#/components/schemas/Timestamp'
          description: Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.
        prePassStartTime:
          $ref: '#/components/schemas/Timestamp'
          description: Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.
        region:
          $ref: '#/components/schemas/String'
          description: Region of a contact.
        satelliteArn:
          $ref: '#/components/schemas/satelliteArn'
          description: ARN of a satellite.
        startTime:
          $ref: '#/components/schemas/Timestamp'
          description: Start time of a contact.
        tags:
          $ref: '#/components/schemas/TagsMap'
          description: Tags assigned to a contact.
      description: <p/>
    GetConfigResponse:
      type: object
      required:
        - configArn
        - configData
        - configId
        - name
      properties:
        configArn:
          $ref: '#/components/schemas/ConfigArn'
          description: 'ARN of a <code>Config</code> '
        configData:
          $ref: '#/components/schemas/ConfigTypeData'
          description: Data elements in a <code>Config</code>.
        configId:
          $ref: '#/components/schemas/String'
          description: UUID of a <code>Config</code>.
        configType:
          $ref: '#/components/schemas/ConfigCapabilityType'
          description: Type of a <code>Config</code>.
        name:
          $ref: '#/components/schemas/String'
          description: Name of a <code>Config</code>.
        tags:
          $ref: '#/components/schemas/TagsMap'
          description: Tags assigned to a <code>Config</code>.
      description: <p/>
    GetDataflowEndpointGroupResponse:
      type: object
      properties:
        dataflowEndpointGroupArn:
          $ref: '#/components/schemas/DataflowEndpointGroupArn'
          description: ARN of a dataflow endpoint group.
        dataflowEndpointGroupId:
          $ref: '#/components/schemas/String'
          description: UUID of a dataflow endpoint group.
        endpointsDetails:
          $ref: '#/components/schemas/EndpointDetailsList'
          description: Details of a dataflow endpoint.
        tags:
          $ref: '#/components/schemas/TagsMap'
          description: Tags assigned to a dataflow endpoint group.
      description: <p/>
    GetMinuteUsageResponse:
      type: object
      properties:
        estimatedMinutesRemaining:
          $ref: '#/components/schemas/Integer'
          description: 'Estimated number of minutes remaining for an account, specific to the month being requested.'
        isReservedMinutesCustomer:
          $ref: '#/components/schemas/Boolean'
          description: 'Returns whether or not an account has signed up for the reserved minutes pricing plan, specific to the month being requested.'
        totalReservedMinuteAllocation:
          $ref: '#/components/schemas/Integer'
          description: 'Total number of reserved minutes allocated, specific to the month being requested.'
        totalScheduledMinutes:
          $ref: '#/components/schemas/Integer'
          description: 'Total scheduled minutes for an account, specific to the month being requested.'
        upcomingMinutesScheduled:
          $ref: '#/components/schemas/Integer'
          description: 'Upcoming minutes scheduled for an account, specific to the month being requested.'
      description: <p/>
    GetMissionProfileResponse:
      type: object
      properties:
        contactPostPassDurationSeconds:
          $ref: '#/components/schemas/DurationInSeconds'
          description: Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.
        contactPrePassDurationSeconds:
          $ref: '#/components/schemas/DurationInSeconds'
          description: Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.
        dataflowEdges:
          $ref: '#/components/schemas/DataflowEdgeList'
          description: 'A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>.'
        minimumViableContactDurationSeconds:
          $ref: '#/components/schemas/DurationInSeconds'
          description: Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.
        missionProfileArn:
          $ref: '#/components/schemas/MissionProfileArn'
          description: ARN of a mission profile.
        missionProfileId:
          $ref: '#/components/schemas/String'
          description: UUID of a mission profile.
        name:
          $ref: '#/components/schemas/String'
          description: Name of a mission profile.
        region:
          $ref: '#/components/schemas/String'
          description: Region of a mission profile.
        tags:
          $ref: '#/components/schemas/TagsMap'
          description: Tags assigned to a mission profile.
        trackingConfigArn:
          $ref: '#/components/schemas/ConfigArn'
          description: ARN of a tracking <code>Config</code>.
      description: <p/>
    GetSatelliteResponse:
      type: object
      properties:
        groundStations:
          $ref: '#/components/schemas/GroundStationIdList'
          description: A list of ground stations to which the satellite is on-boarded.
        noradSatelliteID:
          $ref: '#/components/schemas/noradSatelliteID'
          description: NORAD satellite ID number.
        satelliteArn:
          $ref: '#/components/schemas/satelliteArn'
          description: ARN of a satellite.
        satelliteId:
          $ref: '#/components/schemas/Uuid'
          description: UUID of a satellite.
      description: <p/>
    ListConfigsResponse:
      type: object
      properties:
        configList:
          $ref: '#/components/schemas/ConfigList'
          description: List of <code>Config</code> items.
        nextToken:
          $ref: '#/components/schemas/String'
          description: Next token returned in the response of a previous <code>ListConfigs</code> call. Used to get the next page of results.
      description: <p/>
    ListContactsResponse:
      type: object
      properties:
        contactList:
          $ref: '#/components/schemas/ContactList'
          description: List of contacts.
        nextToken:
          $ref: '#/components/schemas/String'
          description: Next token returned in the response of a previous <code>ListContacts</code> call. Used to get the next page of results.
      description: <p/>
    ContactStatus:
      type: string
      enum:
        - AVAILABLE
        - AWS_CANCELLED
        - AWS_FAILED
        - CANCELLED
        - CANCELLING
        - COMPLETED
        - FAILED
        - FAILED_TO_SCHEDULE
        - PASS
        - POSTPASS
        - PREPASS
        - SCHEDULED
        - SCHEDULING
    ListDataflowEndpointGroupsResponse:
      type: object
      properties:
        dataflowEndpointGroupList:
          $ref: '#/components/schemas/DataflowEndpointGroupList'
          description: A list of dataflow endpoint groups.
        nextToken:
          $ref: '#/components/schemas/String'
          description: Next token returned in the response of a previous <code>ListDataflowEndpointGroups</code> call. Used to get the next page of results.
      description: <p/>
    ListGroundStationsResponse:
      type: object
      properties:
        groundStationList:
          $ref: '#/components/schemas/GroundStationList'
          description: List of ground stations.
        nextToken:
          $ref: '#/components/schemas/String'
          description: Next token that can be supplied in the next call to get the next page of ground stations.
      description: <p/>
    ListMissionProfilesResponse:
      type: object
      properties:
        missionProfileList:
          $ref: '#/components/schemas/MissionProfileList'
          description: List of mission profiles.
        nextToken:
          $ref: '#/components/schemas/String'
          description: Next token returned in the response of a previous <code>ListMissionProfiles</code> call. Used to get the next page of results.
      description: <p/>
    ListSatellitesResponse:
      type: object
      properties:
        nextToken:
          $ref: '#/components/schemas/String'
          description: Next token that can be supplied in the next call to get the next page of satellites.
        satellites:
          $ref: '#/components/schemas/SatelliteList'
          description: List of satellites.
      description: <p/>
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          $ref: '#/components/schemas/TagsMap'
          description: Tags assigned to a resource.
      description: <p/>
    TagResourceResponse:
      type: object
      properties: {}
      description: <p/>
    UntagResourceResponse:
      type: object
      properties: {}
      description: <p/>
    AngleUnits:
      type: string
      enum:
        - DEGREE_ANGLE
        - RADIAN
    AntennaDemodDecodeDetails:
      type: object
      properties:
        outputNode:
          $ref: '#/components/schemas/String'
          description: Name of an antenna demod decode output node used in a contact.
      description: Details about an antenna demod decode <code>Config</code> used in a contact.
    SpectrumConfig:
      type: object
      required:
        - bandwidth
        - centerFrequency
      properties:
        bandwidth:
          $ref: '#/components/schemas/FrequencyBandwidth'
          description: '<p>Bandwidth of a spectral <code>Config</code>. AWS Ground Station currently has the following bandwidth limitations:</p> <ul> <li> <p>For <code>AntennaDownlinkDemodDecodeconfig</code>, valid values are between 125 kHz to 650 MHz.</p> </li> <li> <p>For <code>AntennaDownlinkconfig</code> valid values are between 10 kHz to 54 MHz.</p> </li> <li> <p>For <code>AntennaUplinkConfig</code>, valid values are between 10 kHz to 54 MHz.</p> </li> </ul>'
        centerFrequency:
          $ref: '#/components/schemas/Frequency'
          description: Center frequency of a spectral <code>Config</code>. Valid values are between 2200 to 2300 MHz and 7750 to 8400 MHz for downlink and 2025 to 2120 MHz for uplink.
        polarization:
          $ref: '#/components/schemas/Polarization'
          description: Polarization of a spectral <code>Config</code>. Capturing both <code>"RIGHT_HAND"</code> and <code>"LEFT_HAND"</code> polarization requires two separate configs.
      description: Object that describes a spectral <code>Config</code>.
    DecodeConfig:
      type: object
      required:
        - unvalidatedJSON
      properties:
        unvalidatedJSON:
          $ref: '#/components/schemas/JsonString'
          description: Unvalidated JSON of a decode <code>Config</code>.
      description: Information about the decode <code>Config</code>.
    DemodulationConfig:
      type: object
      required:
        - unvalidatedJSON
      properties:
        unvalidatedJSON:
          $ref: '#/components/schemas/JsonString'
          description: Unvalidated JSON of a demodulation <code>Config</code>.
      description: Information about the demodulation <code>Config</code>.
    UplinkSpectrumConfig:
      type: object
      required:
        - centerFrequency
      properties:
        centerFrequency:
          $ref: '#/components/schemas/Frequency'
          description: Center frequency of an uplink spectral <code>Config</code>. Valid values are between 2025 to 2120 MHz.
        polarization:
          $ref: '#/components/schemas/Polarization'
          description: Polarization of an uplink spectral <code>Config</code>. Capturing both <code>"RIGHT_HAND"</code> and <code>"LEFT_HAND"</code> polarization requires two separate configs.
      description: Information about the uplink spectral <code>Config</code>.
    Eirp:
      type: object
      required:
        - units
        - value
      properties:
        units:
          $ref: '#/components/schemas/EirpUnits'
          description: Units of an EIRP.
        value:
          $ref: '#/components/schemas/Double'
          description: Value of an EIRP. Valid values are between 20.0 to 50.0 dBW.
      description: Object that represents EIRP.
    Boolean:
      type: boolean
    BandwidthUnits:
      type: string
      enum:
        - GHz
        - MHz
        - kHz
    BucketArn:
      type: string
    CancelContactRequest:
      type: object
      title: CancelContactRequest
      properties: {}
      description: <p/>
    ConfigArn:
      type: string
    ConfigCapabilityType:
      type: string
      enum:
        - antenna-downlink
        - antenna-downlink-demod-decode
        - antenna-uplink
        - dataflow-endpoint
        - tracking
        - uplink-echo
        - s3-recording
    S3RecordingDetails:
      type: object
      properties:
        bucketArn:
          $ref: '#/components/schemas/BucketArn'
          description: ARN of the bucket used.
        keyTemplate:
          $ref: '#/components/schemas/String'
          description: Template of the S3 key used.
      description: Details about an S3 recording <code>Config</code> used in a contact.
    ConfigDetails:
      type: object
      properties:
        antennaDemodDecodeDetails:
          $ref: '#/components/schemas/AntennaDemodDecodeDetails'
          description: Details for antenna demod decode <code>Config</code> in a contact.
        endpointDetails:
          $ref: '#/components/schemas/EndpointDetails'
        s3RecordingDetails:
          $ref: '#/components/schemas/S3RecordingDetails'
          description: Details for an S3 recording <code>Config</code> in a contact.
      description: Details for certain <code>Config</code> object types in a contact.
    ConfigListItem:
      type: object
      properties:
        configArn:
          $ref: '#/components/schemas/ConfigArn'
          description: ARN of a <code>Config</code>.
        configId:
          $ref: '#/components/schemas/String'
          description: UUID of a <code>Config</code>.
        configType:
          $ref: '#/components/schemas/ConfigCapabilityType'
          description: Type of a <code>Config</code>.
        name:
          $ref: '#/components/schemas/String'
          description: Name of a <code>Config</code>.
      description: An item in a list of <code>Config</code> objects.
    ConfigList:
      type: array
      items:
        $ref: '#/components/schemas/ConfigListItem'
    ConfigTypeData:
      type: object
      properties:
        antennaDownlinkConfig:
          $ref: '#/components/schemas/AntennaDownlinkConfig'
          description: Information about how AWS Ground Station should configure an antenna for downlink during a contact.
        antennaDownlinkDemodDecodeConfig:
          $ref: '#/components/schemas/AntennaDownlinkDemodDecodeConfig'
          description: Information about how AWS Ground Station should conﬁgure an antenna for downlink demod decode during a contact.
        antennaUplinkConfig:
          $ref: '#/components/schemas/AntennaUplinkConfig'
          description: Information about how AWS Ground Station should conﬁgure an antenna for uplink during a contact.
        dataflowEndpointConfig:
          $ref: '#/components/schemas/DataflowEndpointConfig'
          description: Information about the dataflow endpoint <code>Config</code>.
        s3RecordingConfig:
          $ref: '#/components/schemas/S3RecordingConfig'
          description: Information about an S3 recording <code>Config</code>.
        trackingConfig:
          $ref: '#/components/schemas/TrackingConfig'
          description: 'Object that determines whether tracking should be used during a contact executed with this <code>Config</code> in the mission profile. '
        uplinkEchoConfig:
          $ref: '#/components/schemas/UplinkEchoConfig'
          description: '<p>Information about an uplink echo <code>Config</code>.</p> <p>Parameters from the <code>AntennaUplinkConfig</code>, corresponding to the specified <code>AntennaUplinkConfigArn</code>, are used when this <code>UplinkEchoConfig</code> is used in a contact.</p>'
      description: <p>Object containing the parameters of a <code>Config</code>.</p> <p>See the subtype definitions for what each type of <code>Config</code> contains.</p>
    Timestamp:
      type: string
      format: date-time
    Elevation:
      type: object
      required:
        - unit
        - value
      properties:
        unit:
          $ref: '#/components/schemas/AngleUnits'
          description: Elevation angle units.
        value:
          $ref: '#/components/schemas/Double'
          description: Elevation angle value.
      description: Elevation angle of the satellite in the sky during a contact.
    MissionProfileArn:
      type: string
    satelliteArn:
      type: string
    TagsMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    ContactData:
      type: object
      properties:
        contactId:
          $ref: '#/components/schemas/String'
          description: UUID of a contact.
        contactStatus:
          $ref: '#/components/schemas/ContactStatus'
          description: Status of a contact.
        endTime:
          $ref: '#/components/schemas/Timestamp'
          description: End time of a contact.
        errorMessage:
          $ref: '#/components/schemas/String'
          description: Error message of a contact.
        groundStation:
          $ref: '#/components/schemas/String'
          description: Name of a ground station.
        maximumElevation:
          $ref: '#/components/schemas/Elevation'
          description: Maximum elevation angle of a contact.
        missionProfileArn:
          $ref: '#/components/schemas/MissionProfileArn'
          description: ARN of a mission profile.
        postPassEndTime:
          $ref: '#/components/schemas/Timestamp'
          description: Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.
        prePassStartTime:
          $ref: '#/components/schemas/Timestamp'
          description: Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.
        region:
          $ref: '#/components/schemas/String'
          description: Region of a contact.
        satelliteArn:
          $ref: '#/components/schemas/satelliteArn'
          description: ARN of a satellite.
        startTime:
          $ref: '#/components/schemas/Timestamp'
          description: Start time of a contact.
        tags:
          $ref: '#/components/schemas/TagsMap'
          description: Tags assigned to a contact.
      description: Data describing a contact.
    ContactList:
      type: array
      items:
        $ref: '#/components/schemas/ContactData'
    SafeName:
      type: string
      pattern: '^[ a-zA-Z0-9_:-]{1,256}$'
      minLength: 1
      maxLength: 256
    CreateConfigRequest:
      type: object
      required:
        - configData
        - name
      title: CreateConfigRequest
      properties:
        configData:
          $ref: '#/components/schemas/ConfigTypeData'
          description: Parameters of a <code>Config</code>.
        name:
          $ref: '#/components/schemas/SafeName'
          description: Name of a <code>Config</code>.
        tags:
          $ref: '#/components/schemas/TagsMap'
          description: Tags assigned to a <code>Config</code>.
      description: <p/>
    EndpointDetailsList:
      type: array
      items:
        $ref: '#/components/schemas/EndpointDetails'
    CreateDataflowEndpointGroupRequest:
      type: object
      required:
        - endpointDetails
      title: CreateDataflowEndpointGroupRequest
      properties:
        endpointDetails:
          $ref: '#/components/schemas/EndpointDetailsList'
          description: Endpoint details of each endpoint in the dataflow endpoint group.
        tags:
          $ref: '#/components/schemas/TagsMap'
          description: Tags of a dataflow endpoint group.
      description: <p/>
    DurationInSeconds:
      type: integer
      minimum: 1
      maximum: 21600
    DataflowEdgeList:
      type: array
      items:
        $ref: '#/components/schemas/DataflowEdge'
    CreateMissionProfileRequest:
      type: object
      required:
        - dataflowEdges
        - minimumViableContactDurationSeconds
        - name
        - trackingConfigArn
      title: CreateMissionProfileRequest
      properties:
        contactPostPassDurationSeconds:
          $ref: '#/components/schemas/DurationInSeconds'
          description: Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.
        contactPrePassDurationSeconds:
          $ref: '#/components/schemas/DurationInSeconds'
          description: Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.
        dataflowEdges:
          $ref: '#/components/schemas/DataflowEdgeList'
          description: 'A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>.'
        minimumViableContactDurationSeconds:
          $ref: '#/components/schemas/DurationInSeconds'
          description: Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.
        name:
          $ref: '#/components/schemas/SafeName'
          description: Name of a mission profile.
        tags:
          $ref: '#/components/schemas/TagsMap'
          description: Tags assigned to a mission profile.
        trackingConfigArn:
          $ref: '#/components/schemas/ConfigArn'
          description: ARN of a tracking <code>Config</code>.
      description: <p/>
    Criticality:
      type: string
      enum:
        - PREFERRED
        - REMOVED
        - REQUIRED
    Destination:
      type: object
      properties:
        configDetails:
          $ref: '#/components/schemas/ConfigDetails'
          description: 'Additional details for a <code>Config</code>, if type is dataflow endpoint or antenna demod decode.'
        configId:
          $ref: '#/components/schemas/String'
          description: UUID of a <code>Config</code>.
        configType:
          $ref: '#/components/schemas/ConfigCapabilityType'
          description: Type of a <code>Config</code>.
        dataflowDestinationRegion:
          $ref: '#/components/schemas/String'
          description: Region of a dataflow destination.
      description: Dataflow details for the destination side.
    Source:
      type: object
      properties:
        configDetails:
          $ref: '#/components/schemas/ConfigDetails'
          description: 'Additional details for a <code>Config</code>, if type is dataflow endpoint or antenna demod decode.'
        configId:
          $ref: '#/components/schemas/String'
          description: UUID of a <code>Config</code>.
        configType:
          $ref: '#/components/schemas/ConfigCapabilityType'
          description: Type of a <code>Config</code>.
        dataflowSourceRegion:
          $ref: '#/components/schemas/String'
          description: Region of a dataflow source.
      description: Dataflow details for the source side.
    DataflowDetail:
      type: object
      properties:
        destination:
          $ref: '#/components/schemas/Destination'
        errorMessage:
          $ref: '#/components/schemas/String'
          description: Error message for a dataflow.
        source:
          $ref: '#/components/schemas/Source'
      description: Information about a dataflow edge used in a contact.
    SocketAddress:
      type: object
      required:
        - name
        - port
      properties:
        name:
          $ref: '#/components/schemas/String'
          description: Name of a socket address.
        port:
          $ref: '#/components/schemas/Integer'
          description: Port of a socket address.
      description: Information about the socket address.
    DataflowEndpointMtuInteger:
      type: integer
      minimum: 1400
      maximum: 1500
    EndpointStatus:
      type: string
      enum:
        - created
        - creating
        - deleted
        - deleting
        - failed
    DataflowEndpoint:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/SocketAddress'
          description: Socket address of a dataflow endpoint.
        mtu:
          $ref: '#/components/schemas/DataflowEndpointMtuInteger'
          description: Maximum transmission unit (MTU) size in bytes of a dataflow endpoint.
        name:
          $ref: '#/components/schemas/SafeName'
          description: Name of a dataflow endpoint.
        status:
          $ref: '#/components/schemas/EndpointStatus'
          description: Status of a dataflow endpoint.
      description: Information about a dataflow endpoint.
    DataflowEndpointGroupArn:
      type: string
    DataflowEndpointListItem:
      type: object
      properties:
        dataflowEndpointGroupArn:
          $ref: '#/components/schemas/DataflowEndpointGroupArn'
          description: ARN of a dataflow endpoint group.
        dataflowEndpointGroupId:
          $ref: '#/components/schemas/String'
          description: UUID of a dataflow endpoint group.
      description: Item in a list of <code>DataflowEndpoint</code> groups.
    DataflowEndpointGroupList:
      type: array
      items:
        $ref: '#/components/schemas/DataflowEndpointListItem'
    DataflowList:
      type: array
      items:
        $ref: '#/components/schemas/DataflowDetail'
    JsonString:
      type: string
      pattern: '^[{}\[\]:.,"0-9A-z\-_\s]{2,8192}$'
      minLength: 2
      maxLength: 8192
    DeleteConfigRequest:
      type: object
      title: DeleteConfigRequest
      properties: {}
      description: <p/>
    DeleteDataflowEndpointGroupRequest:
      type: object
      title: DeleteDataflowEndpointGroupRequest
      properties: {}
      description: <p/>
    DeleteMissionProfileRequest:
      type: object
      title: DeleteMissionProfileRequest
      properties: {}
      description: <p/>
    DescribeContactRequest:
      type: object
      title: DescribeContactRequest
      properties: {}
      description: <p/>
    Double:
      type: number
      format: double
    EirpUnits:
      type: string
      enum:
        - dBW
    SecurityDetails:
      type: object
      required:
        - roleArn
        - securityGroupIds
        - subnetIds
      properties:
        roleArn:
          $ref: '#/components/schemas/RoleArn'
          description: 'ARN to a role needed for connecting streams to your instances. '
        securityGroupIds:
          $ref: '#/components/schemas/SecurityGroupIdList'
          description: The security groups to attach to the elastic network interfaces.
        subnetIds:
          $ref: '#/components/schemas/SubnetList'
          description: A list of subnets where AWS Ground Station places elastic network interfaces to send streams to your instances.
      description: Information about endpoints.
    FrequencyUnits:
      type: string
      enum:
        - GHz
        - MHz
        - kHz
    Frequency:
      type: object
      required:
        - units
        - value
      properties:
        units:
          $ref: '#/components/schemas/FrequencyUnits'
          description: Frequency units.
        value:
          $ref: '#/components/schemas/Double'
          description: Frequency value. Valid values are between 2200 to 2300 MHz and 7750 to 8400 MHz for downlink and 2025 to 2120 MHz for uplink.
      description: Object that describes the frequency.
    FrequencyBandwidth:
      type: object
      required:
        - units
        - value
      properties:
        units:
          $ref: '#/components/schemas/BandwidthUnits'
          description: Frequency bandwidth units.
        value:
          $ref: '#/components/schemas/Double'
          description: '<p>Frequency bandwidth value. AWS Ground Station currently has the following bandwidth limitations:</p> <ul> <li> <p>For <code>AntennaDownlinkDemodDecodeconfig</code>, valid values are between 125 kHz to 650 MHz.</p> </li> <li> <p>For <code>AntennaDownlinkconfig</code>, valid values are between 10 kHz to 54 MHz.</p> </li> <li> <p>For <code>AntennaUplinkConfig</code>, valid values are between 10 kHz to 54 MHz.</p> </li> </ul>'
      description: 'Object that describes the frequency bandwidth. '
    GetConfigRequest:
      type: object
      title: GetConfigRequest
      properties: {}
      description: <p/>
    GetDataflowEndpointGroupRequest:
      type: object
      title: GetDataflowEndpointGroupRequest
      properties: {}
      description: <p/>
    Integer:
      type: integer
    GetMinuteUsageRequest:
      type: object
      required:
        - month
        - year
      title: GetMinuteUsageRequest
      properties:
        month:
          $ref: '#/components/schemas/Integer'
          description: 'The month being requested, with a value of 1-12.'
        year:
          $ref: '#/components/schemas/Integer'
          description: 'The year being requested, in the format of YYYY.'
      description: <p/>
    GetMissionProfileRequest:
      type: object
      title: GetMissionProfileRequest
      properties: {}
      description: <p/>
    GetSatelliteRequest:
      type: object
      title: GetSatelliteRequest
      properties: {}
      description: <p/>
    GroundStationIdList:
      type: array
      items:
        $ref: '#/components/schemas/String'
    noradSatelliteID:
      type: integer
      minimum: 1
      maximum: 99999
    Uuid:
      type: string
      pattern: '[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}'
      minLength: 1
      maxLength: 128
    GroundStationData:
      type: object
      properties:
        groundStationId:
          $ref: '#/components/schemas/String'
          description: UUID of a ground station.
        groundStationName:
          $ref: '#/components/schemas/String'
          description: Name of a ground station.
        region:
          $ref: '#/components/schemas/String'
          description: Ground station Region.
      description: Information about the ground station data.
    GroundStationList:
      type: array
      items:
        $ref: '#/components/schemas/GroundStationData'
    ListConfigsRequest:
      type: object
      title: ListConfigsRequest
      properties: {}
      description: <p/>
    StatusList:
      type: array
      items:
        $ref: '#/components/schemas/ContactStatus'
    ListContactsRequest:
      type: object
      required:
        - endTime
        - startTime
        - statusList
      title: ListContactsRequest
      properties:
        endTime:
          $ref: '#/components/schemas/Timestamp'
          description: End time of a contact.
        groundStation:
          $ref: '#/components/schemas/String'
          description: Name of a ground station.
        maxResults:
          $ref: '#/components/schemas/Integer'
          description: Maximum number of contacts returned.
        missionProfileArn:
          $ref: '#/components/schemas/MissionProfileArn'
          description: ARN of a mission profile.
        nextToken:
          $ref: '#/components/schemas/String'
          description: Next token returned in the request of a previous <code>ListContacts</code> call. Used to get the next page of results.
        satelliteArn:
          $ref: '#/components/schemas/satelliteArn'
          description: ARN of a satellite.
        startTime:
          $ref: '#/components/schemas/Timestamp'
          description: Start time of a contact.
        statusList:
          $ref: '#/components/schemas/StatusList'
          description: Status of a contact reservation.
      description: <p/>
    ListDataflowEndpointGroupsRequest:
      type: object
      title: ListDataflowEndpointGroupsRequest
      properties: {}
      description: <p/>
    ListGroundStationsRequest:
      type: object
      title: ListGroundStationsRequest
      properties: {}
      description: <p/>
    ListMissionProfilesRequest:
      type: object
      title: ListMissionProfilesRequest
      properties: {}
      description: <p/>
    MissionProfileList:
      type: array
      items:
        $ref: '#/components/schemas/MissionProfileListItem'
    ListSatellitesRequest:
      type: object
      title: ListSatellitesRequest
      properties: {}
      description: <p/>
    SatelliteList:
      type: array
      items:
        $ref: '#/components/schemas/SatelliteListItem'
    ListTagsForResourceRequest:
      type: object
      title: ListTagsForResourceRequest
      properties: {}
      description: <p/>
    MissionProfileListItem:
      type: object
      properties:
        missionProfileArn:
          $ref: '#/components/schemas/MissionProfileArn'
          description: ARN of a mission profile.
        missionProfileId:
          $ref: '#/components/schemas/String'
          description: UUID of a mission profile.
        name:
          $ref: '#/components/schemas/String'
          description: Name of a mission profile.
        region:
          $ref: '#/components/schemas/String'
          description: Region of a mission profile.
      description: Item in a list of mission profiles.
    Polarization:
      type: string
      enum:
        - LEFT_HAND
        - NONE
        - RIGHT_HAND
    ReserveContactRequest:
      type: object
      required:
        - endTime
        - groundStation
        - missionProfileArn
        - satelliteArn
        - startTime
      title: ReserveContactRequest
      properties:
        endTime:
          $ref: '#/components/schemas/Timestamp'
          description: End time of a contact.
        groundStation:
          $ref: '#/components/schemas/String'
          description: Name of a ground station.
        missionProfileArn:
          $ref: '#/components/schemas/MissionProfileArn'
          description: ARN of a mission profile.
        satelliteArn:
          $ref: '#/components/schemas/satelliteArn'
          description: ARN of a satellite
        startTime:
          $ref: '#/components/schemas/Timestamp'
          description: Start time of a contact.
        tags:
          $ref: '#/components/schemas/TagsMap'
          description: Tags assigned to a contact.
      description: <p/>
    RoleArn:
      type: string
    S3KeyPrefix:
      type: string
      pattern: '^([a-zA-Z0-9_\-=/]|\{satellite_id\}|\{config\-name}|\{s3\-config-id}|\{year\}|\{month\}|\{day\}){1,900}$'
      minLength: 1
      maxLength: 900
    SatelliteListItem:
      type: object
      properties:
        groundStations:
          $ref: '#/components/schemas/GroundStationIdList'
          description: A list of ground stations to which the satellite is on-boarded.
        noradSatelliteID:
          $ref: '#/components/schemas/noradSatelliteID'
          description: NORAD satellite ID number.
        satelliteArn:
          $ref: '#/components/schemas/satelliteArn'
          description: ARN of a satellite.
        satelliteId:
          $ref: '#/components/schemas/Uuid'
          description: UUID of a satellite.
      description: Item in a list of satellites.
    SecurityGroupIdList:
      type: array
      items:
        $ref: '#/components/schemas/String'
    SubnetList:
      type: array
      items:
        $ref: '#/components/schemas/String'
    TagKeys:
      type: array
      items:
        $ref: '#/components/schemas/String'
    TagResourceRequest:
      type: object
      required:
        - tags
      title: TagResourceRequest
      properties:
        tags:
          $ref: '#/components/schemas/TagsMap'
          description: Tags assigned to a resource.
      description: <p/>
    UntagResourceRequest:
      type: object
      title: UntagResourceRequest
      properties: {}
      description: <p/>
    UpdateConfigRequest:
      type: object
      required:
        - configData
        - name
      title: UpdateConfigRequest
      properties:
        configData:
          $ref: '#/components/schemas/ConfigTypeData'
          description: Parameters of a <code>Config</code>.
        name:
          $ref: '#/components/schemas/SafeName'
          description: Name of a <code>Config</code>.
      description: <p/>
    UpdateMissionProfileRequest:
      type: object
      title: UpdateMissionProfileRequest
      properties:
        contactPostPassDurationSeconds:
          $ref: '#/components/schemas/DurationInSeconds'
          description: Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.
        contactPrePassDurationSeconds:
          $ref: '#/components/schemas/DurationInSeconds'
          description: Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.
        dataflowEdges:
          $ref: '#/components/schemas/DataflowEdgeList'
          description: 'A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>.'
        minimumViableContactDurationSeconds:
          $ref: '#/components/schemas/DurationInSeconds'
          description: Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.
        name:
          $ref: '#/components/schemas/SafeName'
          description: Name of a mission profile.
        trackingConfigArn:
          $ref: '#/components/schemas/ConfigArn'
          description: ARN of a tracking <code>Config</code>.
      description: <p/>
security:
  - hmac: []

openapi: 3.0.0
info:
  version: '2020-08-07'
  x-release: v4
  title: Amazon Lex Model Building V2
  description: <p/>
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: models.lex.v2
  x-aws-signingName: lex
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/models.lex.v2-2020-08-07.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/models-v2-lex/'
servers:
  - url: 'http://models-v2-lex.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Lex Models V2 multi-region endpoint
  - url: 'https://models-v2-lex.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Lex Models V2 multi-region endpoint
  - url: 'http://models-v2-lex.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Lex Models V2 endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://models-v2-lex.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Lex Models V2 endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/':
    post:
      operationId: BuildBotLocale
      description: 'Builds a bot, its intents, and its slot types into a specific locale. A bot can be built into multiple locales. At runtime the locale is used to choose a specific build of the bot.'
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildBotLocaleResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: botId
          in: path
          required: true
          description: The identifier of the bot to build. The identifier is returned in the response from the operation.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botVersion
          in: path
          required: true
          description: The version of the bot to build. This can only be the draft version of the bot.
          schema:
            type: string
            pattern: ^DRAFT$
            minLength: 5
            maxLength: 5
        - name: localeId
          in: path
          required: true
          description: 'The identifier of the language and locale that the bot will be used in. The string must match one of the supported locales. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    delete:
      operationId: DeleteBotLocale
      description: '<p>Removes a locale from a bot.</p> <p>When you delete a locale, all intents, slots, and slot types defined for the locale are also deleted.</p>'
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteBotLocaleResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: botId
          in: path
          required: true
          description: The unique identifier of the bot that contains the locale.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botVersion
          in: path
          required: true
          description: 'The version of the bot that contains the locale. '
          schema:
            type: string
            pattern: ^DRAFT$
            minLength: 5
            maxLength: 5
        - name: localeId
          in: path
          required: true
          description: 'The identifier of the language and locale that will be deleted. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.'
          schema:
            type: string
    get:
      operationId: DescribeBotLocale
      description: 'Describes the settings that a bot has for a specific locale. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeBotLocaleResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: botId
          in: path
          required: true
          description: The identifier of the bot associated with the locale.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botVersion
          in: path
          required: true
          description: The identifier of the version of the bot associated with the locale.
          schema:
            type: string
            pattern: '^(DRAFT|[0-9]+)$'
            minLength: 1
            maxLength: 5
        - name: localeId
          in: path
          required: true
          description: 'The unique identifier of the locale to describe. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>. '
          schema:
            type: string
    put:
      operationId: UpdateBotLocale
      description: Updates the settings that a bot has for a specific locale.
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBotLocaleResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: botId
          in: path
          required: true
          description: The unique identifier of the bot that contains the locale.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botVersion
          in: path
          required: true
          description: The version of the bot that contains the locale to be updated. The version can only be the <code>DRAFT</code> version.
          schema:
            type: string
            pattern: ^DRAFT$
            minLength: 5
            maxLength: 5
        - name: localeId
          in: path
          required: true
          description: 'The identifier of the language and locale to update. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nluIntentConfidenceThreshold
              properties:
                description:
                  description: The new description of the locale.
                  type: string
                  minLength: 0
                  maxLength: 200
                nluIntentConfidenceThreshold:
                  description: The new confidence threshold where Amazon Lex inserts the <code>AMAZON.FallbackIntent</code> and <code>AMAZON.KendraSearchIntent</code> intents in the list of possible intents for an utterance.
                  type: number
                  format: double
                  minimum: 0
                  maximum: 1
                voiceSettings:
                  description: Defines settings for using an Amazon Polly voice to communicate with a user.
                  type: object
                  properties:
                    voiceId:
                      $ref: '#/components/schemas/VoiceId'
                      description: The identifier of the Amazon Polly voice to use.
  /bots/:
    put:
      operationId: CreateBot
      description: 'Creates an Amazon Lex conversational bot. '
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBotResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - botName
                - roleArn
                - dataPrivacy
                - idleSessionTTLInSeconds
              properties:
                botName:
                  description: The name of the bot. The bot name must be unique in the account that creates the bot.
                  type: string
                  pattern: '^([0-9a-zA-Z][_-]?)+$'
                  minLength: 1
                  maxLength: 100
                description:
                  description: A description of the bot. It appears in lists to help you identify a particular bot.
                  type: string
                  minLength: 0
                  maxLength: 200
                roleArn:
                  description: The Amazon Resource Name (ARN) of an IAM role that has permission to access the bot.
                  type: string
                  pattern: '^arn:aws:iam::[0-9]{12}:role/.*$'
                  minLength: 32
                  maxLength: 2048
                dataPrivacy:
                  description: 'By default, data stored by Amazon Lex is encrypted. The <code>DataPrivacy</code> structure provides settings that determine how Amazon Lex handles special cases of securing the data for your bot. '
                  type: object
                  properties:
                    childDirected:
                      $ref: '#/components/schemas/ChildDirected'
                      description: 'For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children''s Online Privacy Protection Act (COPPA) by specifying <code>true</code> or <code>false</code> in the <code>childDirected</code> field. By specifying <code>true</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying <code>false</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is not</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the <code>childDirected</code> field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the <a href="https://aws.amazon.com/lex/faqs#data-security">Amazon Lex FAQ</a>.'
                idleSessionTTLInSeconds:
                  description: '<p>The time, in seconds, that Amazon Lex should keep information about a user''s conversation with the bot. </p> <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p> <p>You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.</p>'
                  type: integer
                  minimum: 60
                  maximum: 86400
                botTags:
                  description: 'A list of tags to add to the bot. You can only add tags when you create a bot. You can''t use the <code>UpdateBot</code> operation to update tags. To update tags, use the <code>TagResource</code> operation.'
                  type: object
                  minProperties: 0
                  maxProperties: 200
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
                testBotAliasTags:
                  description: 'A list of tags to add to the test alias for a bot. You can only add tags when you create a bot. You can''t use the <code>UpdateAlias</code> operation to update tags. To update tags on the test alias, use the <code>TagResource</code> operation.'
                  type: object
                  minProperties: 0
                  maxProperties: 200
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: ListBots
      description: Gets a list of available bots.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBotsResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sortBy:
                  description: Specifies attributes for sorting a list of bots.
                  type: object
                  properties:
                    attribute:
                      $ref: '#/components/schemas/BotSortAttribute'
                      description: The attribute to use to sort the list of bots.
                    order:
                      $ref: '#/components/schemas/SortOrder'
                      description: The order to sort the list. You can choose ascending or descending.
                filters:
                  description: Provides the specification of a filter used to limit the bots in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.
                  type: array
                  items:
                    $ref: '#/components/schemas/BotFilter'
                  minItems: 1
                  maxItems: 1
                maxResults:
                  description: 'The maximum number of bots to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned.'
                  type: integer
                  minimum: 1
                  maximum: 1000
                nextToken:
                  description: 'If the response from the <code>ListBots</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.'
                  type: string
  '/bots/{botId}/botaliases/':
    put:
      operationId: CreateBotAlias
      description: '<p>Creates an alias for the specified version of a bot. Use an alias to enable you to change the version of a bot without updating applications that use the bot.</p> <p>For example, you can create an alias called "PROD" that your applications use to call the Amazon Lex bot. </p>'
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBotAliasResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: botId
          in: path
          required: true
          description: The unique identifier of the bot that the alias applies to.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - botAliasName
              properties:
                botAliasName:
                  description: The alias to create. The name must be unique for the bot.
                  type: string
                  pattern: '^([0-9a-zA-Z][_-]?)+$'
                  minLength: 1
                  maxLength: 100
                description:
                  description: A description of the alias. Use this description to help identify the alias.
                  type: string
                  minLength: 0
                  maxLength: 200
                botVersion:
                  description: The version of the bot that this alias points to. You can use the operation to change the bot version associated with the alias.
                  type: string
                  pattern: '^[0-9]+$'
                  minLength: 1
                  maxLength: 5
                botAliasLocaleSettings:
                  description: Maps configuration information to a specific locale. You can use this parameter to specify a specific Lambda function to run different functions in different locales.
                  type: object
                  minProperties: 1
                  additionalProperties:
                    $ref: '#/components/schemas/BotAliasLocaleSettings'
                conversationLogSettings:
                  description: 'Configures conversation logging that saves audio, text, and metadata for the conversations with your users.'
                  type: object
                  properties:
                    textLogSettings:
                      $ref: '#/components/schemas/TextLogSettingsList'
                      description: The Amazon CloudWatch Logs settings for logging text and metadata.
                    audioLogSettings:
                      $ref: '#/components/schemas/AudioLogSettingsList'
                      description: The Amazon S3 settings for logging audio to an S3 bucket.
                sentimentAnalysisSettings:
                  description: Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
                  type: object
                  properties:
                    detectSentiment:
                      $ref: '#/components/schemas/Boolean'
                      description: Sets whether Amazon Lex uses Amazon Comprehend to detect the sentiment of user utterances.
                tags:
                  description: 'A list of tags to add to the bot alias. You can only add tags when you create an alias, you can''t use the <code>UpdateBotAlias</code> operation to update the tags on a bot alias. To update tags, use the <code>TagResource</code> operation.'
                  type: object
                  minProperties: 0
                  maxProperties: 200
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: ListBotAliases
      description: Gets a list of aliases for the specified bot.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBotAliasesResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: botId
          in: path
          required: true
          description: The identifier of the bot to list aliases for.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  description: 'The maximum number of aliases to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.'
                  type: integer
                  minimum: 1
                  maximum: 1000
                nextToken:
                  description: 'If the response from the <code>ListBotAliases</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.'
                  type: string
  '/bots/{botId}/botversions/{botVersion}/botlocales/':
    put:
      operationId: CreateBotLocale
      description: Creates a locale in the bot. The locale contains the intents and slot types that the bot uses in conversations with users in the specified language and locale. You must add a locale to a bot before you can add intents and slot types to the bot.
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBotLocaleResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: botId
          in: path
          required: true
          description: The identifier of the bot to create the locale for.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botVersion
          in: path
          required: true
          description: The version of the bot to create the locale for. This can only be the draft version of the bot.
          schema:
            type: string
            pattern: ^DRAFT$
            minLength: 5
            maxLength: 5
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - localeId
                - nluIntentConfidenceThreshold
              properties:
                localeId:
                  description: 'The identifier of the language and locale that the bot will be used in. The string must match one of the supported locales. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.'
                  type: string
                description:
                  description: A description of the bot locale. Use this to help identify the bot locale in lists.
                  type: string
                  minLength: 0
                  maxLength: 200
                nluIntentConfidenceThreshold:
                  description: '<p>Determines the threshold where Amazon Lex will insert the <code>AMAZON.FallbackIntent</code>, <code>AMAZON.KendraSearchIntent</code>, or both when returning alternative intents. <code>AMAZON.FallbackIntent</code> and <code>AMAZON.KendraSearchIntent</code> are only inserted if they are configured for the bot.</p> <p>For example, suppose a bot is configured with the confidence threshold of 0.80 and the <code>AMAZON.FallbackIntent</code>. Amazon Lex returns three alternative intents with the following confidence scores: IntentA (0.70), IntentB (0.60), IntentC (0.50). The response from the PostText operation would be:</p> <ul> <li> <p>AMAZON.FallbackIntent</p> </li> <li> <p>IntentA</p> </li> <li> <p>IntentB</p> </li> <li> <p>IntentC</p> </li> </ul>'
                  type: number
                  format: double
                  minimum: 0
                  maximum: 1
                voiceSettings:
                  description: Defines settings for using an Amazon Polly voice to communicate with a user.
                  type: object
                  properties:
                    voiceId:
                      $ref: '#/components/schemas/VoiceId'
                      description: The identifier of the Amazon Polly voice to use.
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: ListBotLocales
      description: Gets a list of locales for the specified bot.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBotLocalesResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: botId
          in: path
          required: true
          description: The identifier of the bot to list locales for.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botVersion
          in: path
          required: true
          description: The version of the bot to list locales for.
          schema:
            type: string
            pattern: '^(DRAFT|[0-9]+)$'
            minLength: 1
            maxLength: 5
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sortBy:
                  description: Specifies attributes for sorting a list of bot locales.
                  type: object
                  properties:
                    attribute:
                      $ref: '#/components/schemas/BotLocaleSortAttribute'
                      description: The bot locale attribute to sort by.
                    order:
                      $ref: '#/components/schemas/SortOrder'
                      description: Specifies whether to sort the bot locales in ascending or descending order.
                filters:
                  description: Provides the specification for a filter used to limit the response to only those locales that match the filter specification. You can only specify one filter and one value to filter on.
                  type: array
                  items:
                    $ref: '#/components/schemas/BotLocaleFilter'
                  minItems: 1
                  maxItems: 1
                maxResults:
                  description: 'The maximum number of aliases to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.'
                  type: integer
                  minimum: 1
                  maximum: 1000
                nextToken:
                  description: 'If the response from the <code>ListBotLocales</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token as the <code>nextToken</code> parameter to return the next page of results. '
                  type: string
  '/bots/{botId}/botversions/':
    put:
      operationId: CreateBotVersion
      description: '<p>Creates a new version of the bot based on the <code>DRAFT</code> version. If the <code>DRAFT</code> version of this resource hasn''t changed since you created the last version, Amazon Lex doesn''t create a new version, it returns the last created version.</p> <p>When you create the first version of a bot, Amazon Lex sets the version to 1. Subsequent versions increment by 1.</p>'
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBotVersionResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: botId
          in: path
          required: true
          description: The identifier of the bot to create the version for.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - botVersionLocaleSpecification
              properties:
                description:
                  description: A description of the version. Use the description to help identify the version in lists.
                  type: string
                  minLength: 0
                  maxLength: 200
                botVersionLocaleSpecification:
                  description: 'Specifies the locales that Amazon Lex adds to this version. You can choose the <code>Draft</code> version or any other previously published version for each locale. When you specify a source version, the locale data is copied from the source version to the new version.'
                  type: object
                  minProperties: 1
                  additionalProperties:
                    $ref: '#/components/schemas/BotVersionLocaleDetails'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: ListBotVersions
      description: '<p>Gets information about all of the versions of a bot.</p> <p>The <code>ListBotVersions</code> operation returns a summary of each version of a bot. For example, if a bot has three numbered versions, the <code>ListBotVersions</code> operation returns for summaries, one for each numbered version and one for the <code>DRAFT</code> version.</p> <p>The <code>ListBotVersions</code> operation always returns at least one version, the <code>DRAFT</code> version.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBotVersionsResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: botId
          in: path
          required: true
          description: The identifier of the bot to list versions for.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sortBy:
                  description: Specifies attributes for sorting a list of bot versions.
                  type: object
                  properties:
                    attribute:
                      $ref: '#/components/schemas/BotVersionSortAttribute'
                      description: The attribute to use to sort the list of versions.
                    order:
                      $ref: '#/components/schemas/SortOrder'
                      description: The order to sort the list. You can specify ascending or descending order.
                maxResults:
                  description: 'The maximum number of versions to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.'
                  type: integer
                  minimum: 1
                  maximum: 1000
                nextToken:
                  description: 'If the response to the <code>ListBotVersion</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.'
                  type: string
  /exports/:
    put:
      operationId: CreateExport
      description: '<p>Creates a zip archive containing the contents of a bot or a bot locale. The archive contains a directory structure that contains JSON files that define the bot.</p> <p>You can create an archive that contains the complete definition of a bot, or you can specify that the archive contain only the definition of a single bot locale.</p> <p>For more information about exporting bots, and about the structure of the export archive, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/importing-exporting.html"> Importing and exporting bots </a> </p>'
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateExportResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - resourceSpecification
                - fileFormat
              properties:
                resourceSpecification:
                  description: 'Provides information about the bot or bot locale that you want to export. You can specify the <code>botExportSpecification</code> or the <code>botLocaleExportSpecification</code>, but not both.'
                  type: object
                  properties:
                    botExportSpecification:
                      $ref: '#/components/schemas/BotExportSpecification'
                      description: Parameters for exporting a bot.
                    botLocaleExportSpecification:
                      $ref: '#/components/schemas/BotLocaleExportSpecification'
                      description: Parameters for exporting a bot locale.
                fileFormat:
                  description: The file format of the bot or bot locale definition files.
                  type: string
                  enum:
                    - LexJson
                filePassword:
                  description: 'An password to use to encrypt the exported archive. Using a password is optional, but you should encrypt the archive to protect the data in transit between Amazon Lex and your local computer.'
                  type: string
                  minLength: 1
                  maxLength: 1024
                  format: password
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: ListExports
      description: Lists the exports for a bot or bot locale. Exports are kept in the list for 7 days.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListExportsResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '482':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                botId:
                  description: The unique identifier that Amazon Lex assigned to the bot.
                  type: string
                  pattern: '^[0-9a-zA-Z]+$'
                  minLength: 10
                  maxLength: 10
                botVersion:
                  description: 'The version of the bot to list exports for. '
                  type: string
                  pattern: '^(DRAFT|[0-9]+)$'
                  minLength: 1
                  maxLength: 5
                sortBy:
                  description: Provides information about sorting a list of exports.
                  type: object
                  properties:
                    attribute:
                      $ref: '#/components/schemas/ExportSortAttribute'
                      description: The export field to use for sorting.
                    order:
                      $ref: '#/components/schemas/SortOrder'
                      description: The order to sort the list.
                filters:
                  description: Provides the specification of a filter used to limit the exports in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.
                  type: array
                  items:
                    $ref: '#/components/schemas/ExportFilter'
                  minItems: 1
                  maxItems: 1
                maxResults:
                  description: 'The maximum number of exports to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.'
                  type: integer
                  minimum: 1
                  maximum: 1000
                nextToken:
                  description: 'If the response from the <code>ListExports</code> operation contans more results that specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.'
                  type: string
  '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/':
    put:
      operationId: CreateIntent
      description: '<p>Creates an intent.</p> <p>To define the interaction between the user and your bot, you define one or more intents. For example, for a pizza ordering bot you would create an <code>OrderPizza</code> intent.</p> <p>When you create an intent, you must provide a name. You can optionally provide the following:</p> <ul> <li> <p>Sample utterances. For example, "I want to order a pizza" and "Can I order a pizza." You can''t provide utterances for built-in intents.</p> </li> <li> <p>Information to be gathered. You specify slots for the information that you bot requests from the user. You can specify standard slot types, such as date and time, or custom slot types for your application.</p> </li> <li> <p>How the intent is fulfilled. You can provide a Lambda function or configure the intent to return the intent information to your client application. If you use a Lambda function, Amazon Lex invokes the function when all of the intent information is available.</p> </li> <li> <p>A confirmation prompt to send to the user to confirm an intent. For example, "Shall I order your pizza?"</p> </li> <li> <p>A conclusion statement to send to the user after the intent is fulfilled. For example, "I ordered your pizza."</p> </li> <li> <p>A follow-up prompt that asks the user for additional activity. For example, "Do you want a drink with your pizza?"</p> </li> </ul>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateIntentResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: botId
          in: path
          required: true
          description: The identifier of the bot associated with this intent.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botVersion
          in: path
          required: true
          description: The identifier of the version of the bot associated with this intent.
          schema:
            type: string
            pattern: ^DRAFT$
            minLength: 5
            maxLength: 5
        - name: localeId
          in: path
          required: true
          description: 'The identifier of the language and locale where this intent is used. All of the bots, slot types, and slots used by the intent must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - intentName
              properties:
                intentName:
                  description: The name of the intent. Intent names must be unique in the locale that contains the intent and cannot match the name of any built-in intent.
                  type: string
                  pattern: '^([0-9a-zA-Z][_-]?)+$'
                  minLength: 1
                  maxLength: 100
                description:
                  description: A description of the intent. Use the description to help identify the intent in lists.
                  type: string
                  minLength: 0
                  maxLength: 200
                parentIntentSignature:
                  description: A unique identifier for the built-in intent to base this intent on.
                  type: string
                sampleUtterances:
                  description: '<p>An array of strings that a user might say to signal the intent. For example, "I want a pizza", or "I want a {PizzaSize} pizza". </p> <p>In an utterance, slot names are enclosed in curly braces ("{", "}") to indicate where they should be displayed in the utterance shown to the user.. </p>'
                  type: array
                  items:
                    $ref: '#/components/schemas/SampleUtterance'
                dialogCodeHook:
                  description: Settings that determine the Lambda function that Amazon Lex uses for processing user responses.
                  type: object
                  properties:
                    enabled:
                      $ref: '#/components/schemas/Boolean'
                      description: Enables the dialog code hook so that it processes user requests.
                fulfillmentCodeHook:
                  description: Determines if a Lambda function should be invoked for a specific intent.
                  type: object
                  properties:
                    enabled:
                      $ref: '#/components/schemas/Boolean'
                      description: Indicates whether a Lambda function should be invoked to fulfill a specific intent.
                intentConfirmationSetting:
                  description: Provides a prompt for making sure that the user is ready for the intent to be fulfilled.
                  type: object
                  properties:
                    promptSpecification:
                      $ref: '#/components/schemas/PromptSpecification'
                      description: '<p>Prompts the user to confirm the intent. This question should have a yes or no answer.</p> <p>Amazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready for fulfillment. For example, with the <code>OrderPizza</code> intent, you might want to confirm that the order is correct before placing it. For other intents, such as intents that simply respond to user questions, you might not need to ask the user for confirmation before providing the information. </p>'
                    declinationResponse:
                      $ref: '#/components/schemas/ResponseSpecification'
                      description: 'When the user answers "no" to the question defined in <code>promptSpecification</code>, Amazon Lex responds with this response to acknowledge that the intent was canceled. '
                    active:
                      $ref: '#/components/schemas/BoxedBoolean'
                      description: 'Specifies whether the intent''s confirmation is sent to the user. When this field is false, confirmation and declination responses aren''t sent and processing continues as if the responses aren''t present. If the <code>active</code> field isn''t specified, the default is true.'
                intentClosingSetting:
                  description: Provides a statement the Amazon Lex conveys to the user when the intent is successfully fulfilled.
                  type: object
                  properties:
                    closingResponse:
                      $ref: '#/components/schemas/ResponseSpecification'
                      description: The response that Amazon Lex sends to the user when the intent is complete.
                    active:
                      $ref: '#/components/schemas/BoxedBoolean'
                      description: 'Specifies whether an intent''s closing response is used. When this field is false, the closing response isn''t sent to the user and no closing input from the user is used. If the <code>active</code> field isn''t specified, the default is true.'
                inputContexts:
                  description: '<p>A list of contexts that must be active for this intent to be considered by Amazon Lex.</p> <p>When an intent has an input context list, Amazon Lex only considers using the intent in an interaction with the user when the specified contexts are included in the active context list for the session. If the contexts are not active, then Amazon Lex will not use the intent.</p> <p>A context can be automatically activated using the <code>outputContexts</code> property or it can be set at runtime.</p> <p> For example, if there are two intents with different input contexts that respond to the same utterances, only the intent with the active context will respond.</p> <p>An intent may have up to 5 input contexts. If an intent has multiple input contexts, all of the contexts must be active to consider the intent.</p>'
                  type: array
                  items:
                    $ref: '#/components/schemas/InputContext'
                  minItems: 0
                  maxItems: 5
                outputContexts:
                  description: '<p>A lists of contexts that the intent activates when it is fulfilled.</p> <p>You can use an output context to indicate the intents that Amazon Lex should consider for the next turn of the conversation with a customer. </p> <p>When you use the <code>outputContextsList</code> property, all of the contexts specified in the list are activated when the intent is fulfilled. You can set up to 10 output contexts. You can also set the number of conversation turns that the context should be active, or the length of time that the context should be active.</p>'
                  type: array
                  items:
                    $ref: '#/components/schemas/OutputContext'
                  minItems: 0
                  maxItems: 10
                kendraConfiguration:
                  description: 'Provides configuration information for the AMAZON.KendraSearchIntent intent. When you use this intent, Amazon Lex searches the specified Amazon Kendra index and returns documents from the index that match the user''s utterance.'
                  type: object
                  properties:
                    kendraIndex:
                      $ref: '#/components/schemas/KendraIndexArn'
                      description: The Amazon Resource Name (ARN) of the Amazon Kendra index that you want the AMAZON.KendraSearchIntent intent to search. The index must be in the same account and Region as the Amazon Lex bot.
                    queryFilterStringEnabled:
                      $ref: '#/components/schemas/Boolean'
                      description: Determines whether the AMAZON.KendraSearchIntent intent uses a custom query string to query the Amazon Kendra index.
                    queryFilterString:
                      $ref: '#/components/schemas/QueryFilterString'
                      description: 'A query filter that Amazon Lex sends to Amazon Kendra to filter the response from a query. The filter is in the format defined by Amazon Kendra. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/filtering.html">Filtering queries</a>.'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: ListIntents
      description: Get a list of intents that meet the specified criteria.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIntentsResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: botId
          in: path
          required: true
          description: The unique identifier of the bot that contains the intent.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botVersion
          in: path
          required: true
          description: The version of the bot that contains the intent.
          schema:
            type: string
            pattern: '^(DRAFT|[0-9]+)$'
            minLength: 1
            maxLength: 5
        - name: localeId
          in: path
          required: true
          description: 'The identifier of the language and locale of the intents to list. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.'
          schema:
            type: string
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sortBy:
                  description: Specifies attributes for sorting a list of intents.
                  type: object
                  properties:
                    attribute:
                      $ref: '#/components/schemas/IntentSortAttribute'
                      description: The attribute to use to sort the list of intents.
                    order:
                      $ref: '#/components/schemas/SortOrder'
                      description: The order to sort the list. You can choose ascending or descending.
                filters:
                  description: Provides the specification of a filter used to limit the intents in the response to only those that match the filter specification. You can only specify one filter and only one string to filter on.
                  type: array
                  items:
                    $ref: '#/components/schemas/IntentFilter'
                  minItems: 1
                  maxItems: 1
                maxResults:
                  description: 'The maximum number of intents to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.'
                  type: integer
                  minimum: 1
                  maximum: 1000
                nextToken:
                  description: 'If the response from the <code>ListIntents</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.'
                  type: string
  '/policy/{resourceArn}/':
    post:
      operationId: CreateResourcePolicy
      description: Creates a new resource policy with the specified policy statements.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResourcePolicyResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.
          schema:
            type: string
            minLength: 1
            maxLength: 1011
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - policy
              properties:
                policy:
                  description: '<p>A resource policy to add to the resource. The policy is a JSON structure that contains one or more statements that define the policy. The policy must follow the IAM syntax. For more information about the contents of a JSON policy document, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html"> IAM JSON policy reference </a>. </p> <p>If the policy isn''t valid, Amazon Lex returns a validation exception.</p>'
                  type: string
                  minLength: 2
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    delete:
      operationId: DeleteResourcePolicy
      description: 'Removes an existing policy from a bot or bot alias. If the resource doesn''t have a policy attached, Amazon Lex returns an exception.'
      responses:
        '204':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResourcePolicyResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '482':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The Amazon Resource Name (ARN) of the bot or bot alias that has the resource policy attached.
          schema:
            type: string
            minLength: 1
            maxLength: 1011
        - name: expectedRevisionId
          in: query
          required: false
          description: '<p>The identifier of the revision to edit. If this ID doesn''t match the current revision number, Amazon Lex returns an exception</p> <p>If you don''t specify a revision ID, Amazon Lex will delete the current policy.</p>'
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 1
            maxLength: 5
    get:
      operationId: DescribeResourcePolicy
      description: Gets the resource policy and policy revision for a bot or bot alias.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeResourcePolicyResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.
          schema:
            type: string
            minLength: 1
            maxLength: 1011
    put:
      operationId: UpdateResourcePolicy
      description: 'Replaces the existing resource policy for a bot or bot alias with a new one. If the policy doesn''t exist, Amazon Lex returns an exception.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateResourcePolicyResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.
          schema:
            type: string
            minLength: 1
            maxLength: 1011
        - name: expectedRevisionId
          in: query
          required: false
          description: '<p>The identifier of the revision of the policy to update. If this revision ID doesn''t match the current revision ID, Amazon Lex throws an exception.</p> <p>If you don''t specify a revision, Amazon Lex overwrites the contents of the policy with the new values.</p>'
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 1
            maxLength: 5
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - policy
              properties:
                policy:
                  description: '<p>A resource policy to add to the resource. The policy is a JSON structure that contains one or more statements that define the policy. The policy must follow the IAM syntax. For more information about the contents of a JSON policy document, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html"> IAM JSON policy reference </a>. </p> <p>If the policy isn''t valid, Amazon Lex returns a validation exception.</p>'
                  type: string
                  minLength: 2
  '/policy/{resourceArn}/statements/':
    post:
      operationId: CreateResourcePolicyStatement
      description: '<p>Adds a new resource policy statement to a bot or bot alias. If a resource policy exists, the statement is added to the current resource policy. If a policy doesn''t exist, a new policy is created.</p> <p>You can''t create a resource policy statement that allows cross-account access.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResourcePolicyStatementResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '482':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '483':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '484':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '485':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '486':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.
          schema:
            type: string
            minLength: 1
            maxLength: 1011
        - name: expectedRevisionId
          in: query
          required: false
          description: '<p>The identifier of the revision of the policy to edit. If this revision ID doesn''t match the current revision ID, Amazon Lex throws an exception.</p> <p>If you don''t specify a revision, Amazon Lex overwrites the contents of the policy with the new values.</p>'
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 1
            maxLength: 5
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - statementId
                - effect
                - principal
                - action
              properties:
                statementId:
                  description: 'The name of the statement. The ID is the same as the <code>Sid</code> IAM property. The statement name must be unique within the policy. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_sid.html">IAM JSON policy elements: Sid</a>. '
                  type: string
                  pattern: '^([0-9a-zA-Z][_-]?)+$'
                  minLength: 1
                  maxLength: 100
                effect:
                  description: Determines whether the statement allows or denies access to the resource.
                  type: string
                  enum:
                    - Allow
                    - Deny
                principal:
                  description: 'An IAM principal, such as an IAM users, IAM roles, or AWS services that is allowed or denied access to a resource. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html">AWS JSON policy elements: Principal</a>.'
                  type: array
                  items:
                    $ref: '#/components/schemas/Principal'
                action:
                  description: 'The Amazon Lex action that this policy either allows or denies. The action must apply to the resource type of the specified ARN. For more information, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazonlexv2.html"> Actions, resources, and condition keys for Amazon Lex V2</a>.'
                  type: array
                  items:
                    $ref: '#/components/schemas/Operation'
                condition:
                  description: '<p>Specifies a condition when the policy is in effect. If the principal of the policy is a service principal, you must provide two condition blocks, one with a SourceAccount global condition key and one with a SourceArn global condition key.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html">IAM JSON policy elements: Condition </a>.</p>'
                  type: object
                  minProperties: 0
                  maxProperties: 10
                  additionalProperties:
                    $ref: '#/components/schemas/ConditionKeyValueMap'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots/':
    put:
      operationId: CreateSlot
      description: 'Creates a slot in an intent. A slot is a variable needed to fulfill an intent. For example, an <code>OrderPizza</code> intent might need slots for size, crust, and number of pizzas. For each slot, you define one or more utterances that Amazon Lex uses to elicit a response from the user. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSlotResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: botId
          in: path
          required: true
          description: The identifier of the bot associated with the slot.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botVersion
          in: path
          required: true
          description: The version of the bot associated with the slot.
          schema:
            type: string
            pattern: ^DRAFT$
            minLength: 5
            maxLength: 5
        - name: localeId
          in: path
          required: true
          description: 'The identifier of the language and locale that the slot will be used in. The string must match one of the supported locales. All of the bots, intents, slot types used by the slot must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.'
          schema:
            type: string
        - name: intentId
          in: path
          required: true
          description: The identifier of the intent that contains the slot.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - slotName
                - slotTypeId
                - valueElicitationSetting
              properties:
                slotName:
                  description: The name of the slot. Slot names must be unique within the bot that contains the slot.
                  type: string
                  pattern: '^([0-9a-zA-Z][_-]?)+$'
                  minLength: 1
                  maxLength: 100
                description:
                  description: A description of the slot. Use this to help identify the slot in lists.
                  type: string
                  minLength: 0
                  maxLength: 200
                slotTypeId:
                  description: The unique identifier for the slot type associated with this slot. The slot type determines the values that can be entered into the slot.
                  type: string
                  pattern: '^((AMAZON\.)[a-zA-Z_]+?|[0-9a-zA-Z]+)$'
                  minLength: 1
                  maxLength: 25
                valueElicitationSetting:
                  description: Settings that you can use for eliciting a slot value.
                  type: object
                  properties:
                    defaultValueSpecification:
                      $ref: '#/components/schemas/SlotDefaultValueSpecification'
                      description: 'A list of default values for a slot. Default values are used when Amazon Lex hasn''t determined a value for a slot. You can specify default values from context variables, sesion attributes, and defined values.'
                    slotConstraint:
                      $ref: '#/components/schemas/SlotConstraint'
                      description: Specifies whether the slot is required or optional.
                    promptSpecification:
                      $ref: '#/components/schemas/PromptSpecification'
                      description: The prompt that Amazon Lex uses to elicit the slot value from the user.
                    sampleUtterances:
                      $ref: '#/components/schemas/SampleUtterancesList'
                      description: 'If you know a specific pattern that users might respond to an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy. This is optional. In most cases, Amazon Lex is capable of understanding user utterances.'
                    waitAndContinueSpecification:
                      $ref: '#/components/schemas/WaitAndContinueSpecification'
                obfuscationSetting:
                  description: 'Determines whether Amazon Lex obscures slot values in conversation logs. '
                  type: object
                  properties:
                    obfuscationSettingType:
                      $ref: '#/components/schemas/ObfuscationSettingType'
                      description: Value that determines whether Amazon Lex obscures slot values in conversation logs. The default is to obscure the values.
                multipleValuesSetting:
                  description: Indicates whether a slot can return multiple values.
                  type: object
                  properties:
                    allowMultipleValues:
                      $ref: '#/components/schemas/Boolean'
                      description: '<p>Indicates whether a slot can return multiple values. When <code>true</code>, the slot may return more than one value in a response. When <code>false</code>, the slot returns only a single value.</p> <p>Multi-value slots are only available in the en-US locale. If you set this value to <code>true</code> in any other locale, Amazon Lex throws a <code>ValidationException</code>.</p> <p>If the <code>allowMutlipleValues</code> is not set, the default value is <code>false</code>.</p>'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: ListSlots
      description: Gets a list of slots that match the specified criteria.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSlotsResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: botId
          in: path
          required: true
          description: The identifier of the bot that contains the slot.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botVersion
          in: path
          required: true
          description: The version of the bot that contains the slot.
          schema:
            type: string
            pattern: '^(DRAFT|[0-9]+)$'
            minLength: 1
            maxLength: 5
        - name: localeId
          in: path
          required: true
          description: 'The identifier of the language and locale of the slots to list. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.'
          schema:
            type: string
        - name: intentId
          in: path
          required: true
          description: The unique identifier of the intent that contains the slot.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sortBy:
                  description: Specifies attributes for sorting a list of bots.
                  type: object
                  properties:
                    attribute:
                      $ref: '#/components/schemas/SlotSortAttribute'
                      description: The attribute to use to sort the list.
                    order:
                      $ref: '#/components/schemas/SortOrder'
                      description: The order to sort the list. You can choose ascending or descending.
                filters:
                  description: Provides the specification of a filter used to limit the slots in the response to only those that match the filter specification. You can only specify one filter and only one string to filter on.
                  type: array
                  items:
                    $ref: '#/components/schemas/SlotFilter'
                  minItems: 1
                  maxItems: 1
                maxResults:
                  description: 'The maximum number of slots to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.'
                  type: integer
                  minimum: 1
                  maximum: 1000
                nextToken:
                  description: 'If the response from the <code>ListSlots</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.'
                  type: string
  '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes/':
    put:
      operationId: CreateSlotType
      description: '<p>Creates a custom slot type</p> <p> To create a custom slot type, specify a name for the slot type and a set of enumeration values, the values that a slot of this type can assume. </p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSlotTypeResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: botId
          in: path
          required: true
          description: The identifier of the bot associated with this slot type.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botVersion
          in: path
          required: true
          description: The identifier of the bot version associated with this slot type.
          schema:
            type: string
            pattern: ^DRAFT$
            minLength: 5
            maxLength: 5
        - name: localeId
          in: path
          required: true
          description: 'The identifier of the language and locale that the slot type will be used in. The string must match one of the supported locales. All of the bots, intents, and slots used by the slot type must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - slotTypeName
                - valueSelectionSetting
              properties:
                slotTypeName:
                  description: The name for the slot. A slot type name must be unique within the account.
                  type: string
                  pattern: '^([0-9a-zA-Z][_-]?)+$'
                  minLength: 1
                  maxLength: 100
                description:
                  description: A description of the slot type. Use the description to help identify the slot type in lists.
                  type: string
                  minLength: 0
                  maxLength: 200
                slotTypeValues:
                  description: 'A list of <code>SlotTypeValue</code> objects that defines the values that the slot type can take. Each value can have a list of synonyms, additional values that help train the machine learning model about the values that it resolves for a slot.'
                  type: array
                  items:
                    $ref: '#/components/schemas/SlotTypeValue'
                  minItems: 1
                  maxItems: 10000
                valueSelectionSetting:
                  description: Contains settings used by Amazon Lex to select a slot value.
                  type: object
                  properties:
                    resolutionStrategy:
                      $ref: '#/components/schemas/SlotValueResolutionStrategy'
                      description: '<p>Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values:</p> <ul> <li> <p>OriginalValue - Returns the value entered by the user, if the user value is similar to the slot value.</p> </li> <li> <p>TopResolution - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned.</p> </li> </ul> <p>If you don''t specify the valueSelectionStrategy, the default is OriginalValue. </p>'
                    regexFilter:
                      $ref: '#/components/schemas/SlotValueRegexFilter'
                      description: A regular expression used to validate the value of a slot.
                parentSlotTypeSignature:
                  description: '<p>The built-in slot type used as a parent of this slot type. When you define a parent slot type, the new slot type has the configuration of the parent slot type.</p> <p>Only <code>AMAZON.AlphaNumeric</code> is supported.</p>'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: ListSlotTypes
      description: Gets a list of slot types that match the specified criteria.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSlotTypesResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: botId
          in: path
          required: true
          description: The unique identifier of the bot that contains the slot types.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botVersion
          in: path
          required: true
          description: The version of the bot that contains the slot type.
          schema:
            type: string
            pattern: '^(DRAFT|[0-9]+)$'
            minLength: 1
            maxLength: 5
        - name: localeId
          in: path
          required: true
          description: 'The identifier of the language and locale of the slot types to list. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.'
          schema:
            type: string
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sortBy:
                  description: Specifies attributes for sorting a list of slot types.
                  type: object
                  properties:
                    attribute:
                      $ref: '#/components/schemas/SlotTypeSortAttribute'
                      description: The attribute to use to sort the list of slot types.
                    order:
                      $ref: '#/components/schemas/SortOrder'
                      description: The order to sort the list. You can say ascending or descending.
                filters:
                  description: Provides the specification of a filter used to limit the slot types in the response to only those that match the filter specification. You can only specify one filter and only one string to filter on.
                  type: array
                  items:
                    $ref: '#/components/schemas/SlotTypeFilter'
                  minItems: 1
                  maxItems: 1
                maxResults:
                  description: 'The maximum number of slot types to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.'
                  type: integer
                  minimum: 1
                  maximum: 1000
                nextToken:
                  description: 'If the response from the <code>ListSlotTypes</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.'
                  type: string
  /createuploadurl/:
    post:
      operationId: CreateUploadUrl
      description: 'Gets a pre-signed S3 write URL that you use to upload the zip archive when importing a bot or a bot locale. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUploadUrlResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters: []
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/bots/{botId}/':
    delete:
      operationId: DeleteBot
      description: '<p>Deletes all versions of a bot, including the <code>Draft</code> version. To delete a specific version, use the <code>DeleteBotVersion</code> operation.</p> <p>When you delete a bot, all of the resources contained in the bot are also deleted. Deleting a bot removes all locales, intents, slot, and slot types defined for the bot.</p> <p>If a bot has an alias, the <code>DeleteBot</code> operation returns a <code>ResourceInUseException</code> exception. If you want to delete the bot and the alias, set the <code>skipResourceInUseCheck</code> parameter to <code>true</code>.</p>'
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteBotResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '485':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: botId
          in: path
          required: true
          description: 'The identifier of the bot to delete. '
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: skipResourceInUseCheck
          in: query
          required: false
          description: 'When <code>true</code>, Amazon Lex doesn''t check to see if another resource, such as an alias, is using the bot before it is deleted.'
          schema:
            type: boolean
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeBot
      description: 'Provides metadata information about a bot. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeBotResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: botId
          in: path
          required: true
          description: The unique identifier of the bot to describe.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
    put:
      operationId: UpdateBot
      description: 'Updates the configuration of an existing bot. '
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBotResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: botId
          in: path
          required: true
          description: The unique identifier of the bot to update. This identifier is returned by the <a>CreateBot</a> operation.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - botName
                - roleArn
                - dataPrivacy
                - idleSessionTTLInSeconds
              properties:
                botName:
                  description: The new name of the bot. The name must be unique in the account that creates the bot.
                  type: string
                  pattern: '^([0-9a-zA-Z][_-]?)+$'
                  minLength: 1
                  maxLength: 100
                description:
                  description: A description of the bot.
                  type: string
                  minLength: 0
                  maxLength: 200
                roleArn:
                  description: The Amazon Resource Name (ARN) of an IAM role that has permissions to access the bot.
                  type: string
                  pattern: '^arn:aws:iam::[0-9]{12}:role/.*$'
                  minLength: 32
                  maxLength: 2048
                dataPrivacy:
                  description: 'By default, data stored by Amazon Lex is encrypted. The <code>DataPrivacy</code> structure provides settings that determine how Amazon Lex handles special cases of securing the data for your bot. '
                  type: object
                  properties:
                    childDirected:
                      $ref: '#/components/schemas/ChildDirected'
                      description: 'For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children''s Online Privacy Protection Act (COPPA) by specifying <code>true</code> or <code>false</code> in the <code>childDirected</code> field. By specifying <code>true</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying <code>false</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is not</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the <code>childDirected</code> field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the <a href="https://aws.amazon.com/lex/faqs#data-security">Amazon Lex FAQ</a>.'
                idleSessionTTLInSeconds:
                  description: '<p>The time, in seconds, that Amazon Lex should keep information about a user''s conversation with the bot.</p> <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p> <p>You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.</p>'
                  type: integer
                  minimum: 60
                  maximum: 86400
  '/bots/{botId}/botaliases/{botAliasId}/':
    delete:
      operationId: DeleteBotAlias
      description: Deletes the specified bot alias.
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteBotAliasResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '485':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: botAliasId
          in: path
          required: true
          description: The unique identifier of the bot alias to delete.
          schema:
            type: string
            pattern: '^(\bTSTALIASID\b|[0-9a-zA-Z]+)$'
            minLength: 10
            maxLength: 10
        - name: botId
          in: path
          required: true
          description: The unique identifier of the bot associated with the alias to delete.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: skipResourceInUseCheck
          in: query
          required: false
          description: 'When this parameter is true, Amazon Lex doesn''t check to see if any other resource is using the alias before it is deleted.'
          schema:
            type: boolean
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeBotAlias
      description: Get information about a specific bot alias.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeBotAliasResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: botAliasId
          in: path
          required: true
          description: The identifier of the bot alias to describe.
          schema:
            type: string
            pattern: '^(\bTSTALIASID\b|[0-9a-zA-Z]+)$'
            minLength: 10
            maxLength: 10
        - name: botId
          in: path
          required: true
          description: The identifier of the bot associated with the bot alias to describe.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
    put:
      operationId: UpdateBotAlias
      description: Updates the configuration of an existing bot alias.
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBotAliasResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: botAliasId
          in: path
          required: true
          description: The unique identifier of the bot alias.
          schema:
            type: string
            pattern: '^(\bTSTALIASID\b|[0-9a-zA-Z]+)$'
            minLength: 10
            maxLength: 10
        - name: botId
          in: path
          required: true
          description: The identifier of the bot with the updated alias.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - botAliasName
              properties:
                botAliasName:
                  description: The new name to assign to the bot alias.
                  type: string
                  pattern: '^([0-9a-zA-Z][_-]?)+$'
                  minLength: 1
                  maxLength: 100
                description:
                  description: The new description to assign to the bot alias.
                  type: string
                  minLength: 0
                  maxLength: 200
                botVersion:
                  description: The new bot version to assign to the bot alias.
                  type: string
                  pattern: '^(DRAFT|[0-9]+)$'
                  minLength: 1
                  maxLength: 5
                botAliasLocaleSettings:
                  description: The new Lambda functions to use in each locale for the bot alias.
                  type: object
                  minProperties: 1
                  additionalProperties:
                    $ref: '#/components/schemas/BotAliasLocaleSettings'
                conversationLogSettings:
                  description: 'Configures conversation logging that saves audio, text, and metadata for the conversations with your users.'
                  type: object
                  properties:
                    textLogSettings:
                      $ref: '#/components/schemas/TextLogSettingsList'
                      description: The Amazon CloudWatch Logs settings for logging text and metadata.
                    audioLogSettings:
                      $ref: '#/components/schemas/AudioLogSettingsList'
                      description: The Amazon S3 settings for logging audio to an S3 bucket.
                sentimentAnalysisSettings:
                  description: Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
                  type: object
                  properties:
                    detectSentiment:
                      $ref: '#/components/schemas/Boolean'
                      description: Sets whether Amazon Lex uses Amazon Comprehend to detect the sentiment of user utterances.
  '/bots/{botId}/botversions/{botVersion}/':
    delete:
      operationId: DeleteBotVersion
      description: 'Deletes a specific version of a bot. To delete all version of a bot, use the <a>DeleteBot</a> operation.'
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteBotVersionResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '485':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: botId
          in: path
          required: true
          description: The identifier of the bot that contains the version.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botVersion
          in: path
          required: true
          description: The version of the bot to delete.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 1
            maxLength: 5
        - name: skipResourceInUseCheck
          in: query
          required: false
          description: 'By default, the <code>DeleteBotVersion</code> operations throws a <code>ResourceInUseException</code> exception if you try to delete a bot version that has an alias pointing at it. Set the <code>skipResourceInUseCheck</code> parameter to <code>true</code> to skip this check and remove the version even if an alias points to it.'
          schema:
            type: boolean
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeBotVersion
      description: Provides metadata about a version of a bot.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeBotVersionResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: botId
          in: path
          required: true
          description: The identifier of the bot containing the version to return metadata for.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botVersion
          in: path
          required: true
          description: The version of the bot to return metadata for.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 1
            maxLength: 5
  '/exports/{exportId}/':
    delete:
      operationId: DeleteExport
      description: Removes a previous export and the associated files stored in an S3 bucket.
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteExportResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: exportId
          in: path
          required: true
          description: The unique identifier of the export to delete.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeExport
      description: Gets information about a specific export.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeExportResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: exportId
          in: path
          required: true
          description: The unique identifier of the export to describe.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
    put:
      operationId: UpdateExport
      description: '<p>Updates the password used to protect an export zip archive.</p> <p>The password is not required. If you don''t supply a password, Amazon Lex generates a zip file that is not protected by a password. This is the archive that is available at the pre-signed S3 URL provided by the operation.</p>'
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateExportResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: exportId
          in: path
          required: true
          description: The unique identifier Amazon Lex assigned to the export.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filePassword:
                  description: The new password to use to encrypt the export zip archive.
                  type: string
                  minLength: 1
                  maxLength: 1024
                  format: password
  '/imports/{importId}/':
    delete:
      operationId: DeleteImport
      description: Removes a previous import and the associated file stored in an S3 bucket.
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteImportResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: importId
          in: path
          required: true
          description: The unique identifier of the import to delete.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeImport
      description: Gets information about a specific import.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeImportResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: importId
          in: path
          required: true
          description: The unique identifier of the import to describe.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
  '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/':
    delete:
      operationId: DeleteIntent
      description: <p>Removes the specified intent.</p> <p>Deleting an intent also deletes the slots associated with the intent.</p>
      responses:
        '204':
          description: Success
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '485':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: intentId
          in: path
          required: true
          description: The unique identifier of the intent to delete.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botId
          in: path
          required: true
          description: The identifier of the bot associated with the intent.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botVersion
          in: path
          required: true
          description: The version of the bot associated with the intent.
          schema:
            type: string
            pattern: ^DRAFT$
            minLength: 5
            maxLength: 5
        - name: localeId
          in: path
          required: true
          description: 'The identifier of the language and locale where the bot will be deleted. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeIntent
      description: Returns metadata about an intent.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeIntentResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: intentId
          in: path
          required: true
          description: The identifier of the intent to describe.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botId
          in: path
          required: true
          description: The identifier of the bot associated with the intent.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botVersion
          in: path
          required: true
          description: The version of the bot associated with the intent.
          schema:
            type: string
            pattern: '^(DRAFT|[0-9]+)$'
            minLength: 1
            maxLength: 5
        - name: localeId
          in: path
          required: true
          description: 'The identifier of the language and locale of the intent to describe. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.'
          schema:
            type: string
    put:
      operationId: UpdateIntent
      description: Updates the settings for an intent.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateIntentResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: intentId
          in: path
          required: true
          description: The unique identifier of the intent to update.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botId
          in: path
          required: true
          description: The identifier of the bot that contains the intent.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botVersion
          in: path
          required: true
          description: The version of the bot that contains the intent. Must be <code>DRAFT</code>.
          schema:
            type: string
            pattern: ^DRAFT$
            minLength: 5
            maxLength: 5
        - name: localeId
          in: path
          required: true
          description: 'The identifier of the language and locale where this intent is used. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - intentName
              properties:
                intentName:
                  description: The new name for the intent.
                  type: string
                  pattern: '^([0-9a-zA-Z][_-]?)+$'
                  minLength: 1
                  maxLength: 100
                description:
                  description: The new description of the intent.
                  type: string
                  minLength: 0
                  maxLength: 200
                parentIntentSignature:
                  description: The signature of the new built-in intent to use as the parent of this intent.
                  type: string
                sampleUtterances:
                  description: New utterances used to invoke the intent.
                  type: array
                  items:
                    $ref: '#/components/schemas/SampleUtterance'
                dialogCodeHook:
                  description: Settings that determine the Lambda function that Amazon Lex uses for processing user responses.
                  type: object
                  properties:
                    enabled:
                      $ref: '#/components/schemas/Boolean'
                      description: Enables the dialog code hook so that it processes user requests.
                fulfillmentCodeHook:
                  description: Determines if a Lambda function should be invoked for a specific intent.
                  type: object
                  properties:
                    enabled:
                      $ref: '#/components/schemas/Boolean'
                      description: Indicates whether a Lambda function should be invoked to fulfill a specific intent.
                slotPriorities:
                  description: A new list of slots and their priorities that are contained by the intent.
                  type: array
                  items:
                    $ref: '#/components/schemas/SlotPriority'
                intentConfirmationSetting:
                  description: Provides a prompt for making sure that the user is ready for the intent to be fulfilled.
                  type: object
                  properties:
                    promptSpecification:
                      $ref: '#/components/schemas/PromptSpecification'
                      description: '<p>Prompts the user to confirm the intent. This question should have a yes or no answer.</p> <p>Amazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready for fulfillment. For example, with the <code>OrderPizza</code> intent, you might want to confirm that the order is correct before placing it. For other intents, such as intents that simply respond to user questions, you might not need to ask the user for confirmation before providing the information. </p>'
                    declinationResponse:
                      $ref: '#/components/schemas/ResponseSpecification'
                      description: 'When the user answers "no" to the question defined in <code>promptSpecification</code>, Amazon Lex responds with this response to acknowledge that the intent was canceled. '
                    active:
                      $ref: '#/components/schemas/BoxedBoolean'
                      description: 'Specifies whether the intent''s confirmation is sent to the user. When this field is false, confirmation and declination responses aren''t sent and processing continues as if the responses aren''t present. If the <code>active</code> field isn''t specified, the default is true.'
                intentClosingSetting:
                  description: Provides a statement the Amazon Lex conveys to the user when the intent is successfully fulfilled.
                  type: object
                  properties:
                    closingResponse:
                      $ref: '#/components/schemas/ResponseSpecification'
                      description: The response that Amazon Lex sends to the user when the intent is complete.
                    active:
                      $ref: '#/components/schemas/BoxedBoolean'
                      description: 'Specifies whether an intent''s closing response is used. When this field is false, the closing response isn''t sent to the user and no closing input from the user is used. If the <code>active</code> field isn''t specified, the default is true.'
                inputContexts:
                  description: A new list of contexts that must be active in order for Amazon Lex to consider the intent.
                  type: array
                  items:
                    $ref: '#/components/schemas/InputContext'
                  minItems: 0
                  maxItems: 5
                outputContexts:
                  description: A new list of contexts that Amazon Lex activates when the intent is fulfilled.
                  type: array
                  items:
                    $ref: '#/components/schemas/OutputContext'
                  minItems: 0
                  maxItems: 10
                kendraConfiguration:
                  description: 'Provides configuration information for the AMAZON.KendraSearchIntent intent. When you use this intent, Amazon Lex searches the specified Amazon Kendra index and returns documents from the index that match the user''s utterance.'
                  type: object
                  properties:
                    kendraIndex:
                      $ref: '#/components/schemas/KendraIndexArn'
                      description: The Amazon Resource Name (ARN) of the Amazon Kendra index that you want the AMAZON.KendraSearchIntent intent to search. The index must be in the same account and Region as the Amazon Lex bot.
                    queryFilterStringEnabled:
                      $ref: '#/components/schemas/Boolean'
                      description: Determines whether the AMAZON.KendraSearchIntent intent uses a custom query string to query the Amazon Kendra index.
                    queryFilterString:
                      $ref: '#/components/schemas/QueryFilterString'
                      description: 'A query filter that Amazon Lex sends to Amazon Kendra to filter the response from a query. The filter is in the format defined by Amazon Kendra. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/filtering.html">Filtering queries</a>.'
  '/policy/{resourceArn}/statements/{statementId}/':
    delete:
      operationId: DeleteResourcePolicyStatement
      description: 'Deletes a policy statement from a resource policy. If you delete the last statement from a policy, the policy is deleted. If you specify a statement ID that doesn''t exist in the policy, or if the bot or bot alias doesn''t have a policy attached, Amazon Lex returns an exception.'
      responses:
        '204':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResourcePolicyStatementResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '482':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.
          schema:
            type: string
            minLength: 1
            maxLength: 1011
        - name: statementId
          in: path
          required: true
          description: The name of the statement (SID) to delete from the policy.
          schema:
            type: string
            pattern: '^([0-9a-zA-Z][_-]?)+$'
            minLength: 1
            maxLength: 100
        - name: expectedRevisionId
          in: query
          required: false
          description: '<p>The identifier of the revision of the policy to delete the statement from. If this revision ID doesn''t match the current revision ID, Amazon Lex throws an exception.</p> <p>If you don''t specify a revision, Amazon Lex removes the current contents of the statement. </p>'
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 1
            maxLength: 5
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots/{slotId}/':
    delete:
      operationId: DeleteSlot
      description: Deletes the specified slot from an intent.
      responses:
        '204':
          description: Success
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '485':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: slotId
          in: path
          required: true
          description: 'The identifier of the slot to delete. '
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botId
          in: path
          required: true
          description: The identifier of the bot associated with the slot to delete.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botVersion
          in: path
          required: true
          description: The version of the bot associated with the slot to delete.
          schema:
            type: string
            pattern: ^DRAFT$
            minLength: 5
            maxLength: 5
        - name: localeId
          in: path
          required: true
          description: 'The identifier of the language and locale that the slot will be deleted from. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.'
          schema:
            type: string
        - name: intentId
          in: path
          required: true
          description: The identifier of the intent associated with the slot.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeSlot
      description: Gets metadata information about a slot.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeSlotResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: slotId
          in: path
          required: true
          description: The unique identifier for the slot.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botId
          in: path
          required: true
          description: The identifier of the bot associated with the slot.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botVersion
          in: path
          required: true
          description: The version of the bot associated with the slot.
          schema:
            type: string
            pattern: '^(DRAFT|[0-9]+)$'
            minLength: 1
            maxLength: 5
        - name: localeId
          in: path
          required: true
          description: 'The identifier of the language and locale of the slot to describe. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.'
          schema:
            type: string
        - name: intentId
          in: path
          required: true
          description: The identifier of the intent that contains the slot.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
    put:
      operationId: UpdateSlot
      description: Updates the settings for a slot.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSlotResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: slotId
          in: path
          required: true
          description: The unique identifier for the slot to update.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botId
          in: path
          required: true
          description: The unique identifier of the bot that contains the slot.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botVersion
          in: path
          required: true
          description: The version of the bot that contains the slot. Must always be <code>DRAFT</code>.
          schema:
            type: string
            pattern: ^DRAFT$
            minLength: 5
            maxLength: 5
        - name: localeId
          in: path
          required: true
          description: 'The identifier of the language and locale that contains the slot. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.'
          schema:
            type: string
        - name: intentId
          in: path
          required: true
          description: The identifier of the intent that contains the slot.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - slotName
                - slotTypeId
                - valueElicitationSetting
              properties:
                slotName:
                  description: The new name for the slot.
                  type: string
                  pattern: '^([0-9a-zA-Z][_-]?)+$'
                  minLength: 1
                  maxLength: 100
                description:
                  description: The new description for the slot.
                  type: string
                  minLength: 0
                  maxLength: 200
                slotTypeId:
                  description: 'The unique identifier of the new slot type to associate with this slot. '
                  type: string
                  pattern: '^((AMAZON\.)[a-zA-Z_]+?|[0-9a-zA-Z]+)$'
                  minLength: 1
                  maxLength: 25
                valueElicitationSetting:
                  description: Settings that you can use for eliciting a slot value.
                  type: object
                  properties:
                    defaultValueSpecification:
                      $ref: '#/components/schemas/SlotDefaultValueSpecification'
                      description: 'A list of default values for a slot. Default values are used when Amazon Lex hasn''t determined a value for a slot. You can specify default values from context variables, sesion attributes, and defined values.'
                    slotConstraint:
                      $ref: '#/components/schemas/SlotConstraint'
                      description: Specifies whether the slot is required or optional.
                    promptSpecification:
                      $ref: '#/components/schemas/PromptSpecification'
                      description: The prompt that Amazon Lex uses to elicit the slot value from the user.
                    sampleUtterances:
                      $ref: '#/components/schemas/SampleUtterancesList'
                      description: 'If you know a specific pattern that users might respond to an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy. This is optional. In most cases, Amazon Lex is capable of understanding user utterances.'
                    waitAndContinueSpecification:
                      $ref: '#/components/schemas/WaitAndContinueSpecification'
                obfuscationSetting:
                  description: 'Determines whether Amazon Lex obscures slot values in conversation logs. '
                  type: object
                  properties:
                    obfuscationSettingType:
                      $ref: '#/components/schemas/ObfuscationSettingType'
                      description: Value that determines whether Amazon Lex obscures slot values in conversation logs. The default is to obscure the values.
                multipleValuesSetting:
                  description: Indicates whether a slot can return multiple values.
                  type: object
                  properties:
                    allowMultipleValues:
                      $ref: '#/components/schemas/Boolean'
                      description: '<p>Indicates whether a slot can return multiple values. When <code>true</code>, the slot may return more than one value in a response. When <code>false</code>, the slot returns only a single value.</p> <p>Multi-value slots are only available in the en-US locale. If you set this value to <code>true</code> in any other locale, Amazon Lex throws a <code>ValidationException</code>.</p> <p>If the <code>allowMutlipleValues</code> is not set, the default value is <code>false</code>.</p>'
  '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes/{slotTypeId}/':
    delete:
      operationId: DeleteSlotType
      description: '<p>Deletes a slot type from a bot locale.</p> <p>If a slot is using the slot type, Amazon Lex throws a <code>ResourceInUseException</code> exception. To avoid the exception, set the <code>skipResourceInUseCheck</code> parameter to <code>true</code>.</p>'
      responses:
        '204':
          description: Success
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '485':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: slotTypeId
          in: path
          required: true
          description: The identifier of the slot type to delete.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botId
          in: path
          required: true
          description: The identifier of the bot associated with the slot type.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botVersion
          in: path
          required: true
          description: The version of the bot associated with the slot type.
          schema:
            type: string
            pattern: ^DRAFT$
            minLength: 5
            maxLength: 5
        - name: localeId
          in: path
          required: true
          description: 'The identifier of the language and locale that the slot type will be deleted from. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.'
          schema:
            type: string
        - name: skipResourceInUseCheck
          in: query
          required: false
          description: 'By default, the <code>DeleteSlotType</code> operations throws a <code>ResourceInUseException</code> exception if you try to delete a slot type used by a slot. Set the <code>skipResourceInUseCheck</code> parameter to <code>true</code> to skip this check and remove the slot type even if a slot uses it.'
          schema:
            type: boolean
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeSlotType
      description: Gets metadata information about a slot type.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeSlotTypeResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: slotTypeId
          in: path
          required: true
          description: The identifier of the slot type.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botId
          in: path
          required: true
          description: The identifier of the bot associated with the slot type.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botVersion
          in: path
          required: true
          description: The version of the bot associated with the slot type.
          schema:
            type: string
            pattern: '^(DRAFT|[0-9]+)$'
            minLength: 1
            maxLength: 5
        - name: localeId
          in: path
          required: true
          description: 'The identifier of the language and locale of the slot type to describe. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.'
          schema:
            type: string
    put:
      operationId: UpdateSlotType
      description: Updates the configuration of an existing slot type.
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSlotTypeResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: slotTypeId
          in: path
          required: true
          description: The unique identifier of the slot type to update.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botId
          in: path
          required: true
          description: The identifier of the bot that contains the slot type.
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]+$'
            minLength: 10
            maxLength: 10
        - name: botVersion
          in: path
          required: true
          description: The version of the bot that contains the slot type. Must be <code>DRAFT</code>.
          schema:
            type: string
            pattern: ^DRAFT$
            minLength: 5
            maxLength: 5
        - name: localeId
          in: path
          required: true
          description: 'The identifier of the language and locale that contains the slot type. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - slotTypeName
                - valueSelectionSetting
              properties:
                slotTypeName:
                  description: The new name of the slot type.
                  type: string
                  pattern: '^([0-9a-zA-Z][_-]?)+$'
                  minLength: 1
                  maxLength: 100
                description:
                  description: The new description of the slot type.
                  type: string
                  minLength: 0
                  maxLength: 200
                slotTypeValues:
                  description: A new list of values and their optional synonyms that define the values that the slot type can take.
                  type: array
                  items:
                    $ref: '#/components/schemas/SlotTypeValue'
                  minItems: 1
                  maxItems: 10000
                valueSelectionSetting:
                  description: Contains settings used by Amazon Lex to select a slot value.
                  type: object
                  properties:
                    resolutionStrategy:
                      $ref: '#/components/schemas/SlotValueResolutionStrategy'
                      description: '<p>Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values:</p> <ul> <li> <p>OriginalValue - Returns the value entered by the user, if the user value is similar to the slot value.</p> </li> <li> <p>TopResolution - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned.</p> </li> </ul> <p>If you don''t specify the valueSelectionStrategy, the default is OriginalValue. </p>'
                    regexFilter:
                      $ref: '#/components/schemas/SlotValueRegexFilter'
                      description: A regular expression used to validate the value of a slot.
                parentSlotTypeSignature:
                  description: The new built-in slot type that should be used as the parent of this slot type.
                  type: string
  '/builtins/locales/{localeId}/intents/':
    post:
      operationId: ListBuiltInIntents
      description: '<p>Gets a list of built-in intents provided by Amazon Lex that you can use in your bot. </p> <p>To use a built-in intent as a the base for your own intent, include the built-in intent signature in the <code>parentIntentSignature</code> parameter when you call the <code>CreateIntent</code> operation. For more information, see <a>CreateIntent</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBuiltInIntentsResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: localeId
          in: path
          required: true
          description: 'The identifier of the language and locale of the intents to list. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.'
          schema:
            type: string
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sortBy:
                  description: Specifies attributes for sorting a list of built-in intents.
                  type: object
                  properties:
                    attribute:
                      $ref: '#/components/schemas/BuiltInIntentSortAttribute'
                      description: The attribute to use to sort the list of built-in intents.
                    order:
                      $ref: '#/components/schemas/SortOrder'
                      description: The order to sort the list. You can specify ascending or descending order.
                maxResults:
                  description: 'The maximum number of built-in intents to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.'
                  type: integer
                  minimum: 20
                  maximum: 20
                nextToken:
                  description: 'If the response from the <code>ListBuiltInIntents</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/builtins/locales/{localeId}/slottypes/':
    post:
      operationId: ListBuiltInSlotTypes
      description: Gets a list of built-in slot types that meet the specified criteria.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBuiltInSlotTypesResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: localeId
          in: path
          required: true
          description: 'The identifier of the language and locale of the slot types to list. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.'
          schema:
            type: string
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sortBy:
                  description: Specifies attributes for sorting a list of built-in slot types.
                  type: object
                  properties:
                    attribute:
                      $ref: '#/components/schemas/BuiltInSlotTypeSortAttribute'
                      description: The attribute to use to sort the list of built-in intents.
                    order:
                      $ref: '#/components/schemas/SortOrder'
                      description: The order to sort the list. You can choose ascending or descending.
                maxResults:
                  description: 'The maximum number of built-in slot types to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.'
                  type: integer
                  minimum: 20
                  maximum: 20
                nextToken:
                  description: 'If the response from the <code>ListBuiltInSlotTypes</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /imports/:
    post:
      operationId: ListImports
      description: Lists the imports for a bot or bot locale. Imports are kept in the list for 7 days.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListImportsResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '482':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                botId:
                  description: The unique identifier that Amazon Lex assigned to the bot.
                  type: string
                  pattern: '^[0-9a-zA-Z]+$'
                  minLength: 10
                  maxLength: 10
                botVersion:
                  description: The version of the bot to list imports for.
                  type: string
                  pattern: ^DRAFT$
                  minLength: 5
                  maxLength: 5
                sortBy:
                  description: Provides information for sorting a list of imports.
                  type: object
                  properties:
                    attribute:
                      $ref: '#/components/schemas/ImportSortAttribute'
                      description: The export field to use for sorting.
                    order:
                      $ref: '#/components/schemas/SortOrder'
                      description: The order to sort the list.
                filters:
                  description: Provides the specification of a filter used to limit the bots in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.
                  type: array
                  items:
                    $ref: '#/components/schemas/ImportFilter'
                  minItems: 1
                  maxItems: 1
                maxResults:
                  description: 'The maximum number of imports to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.'
                  type: integer
                  minimum: 1
                  maximum: 1000
                nextToken:
                  description: 'If the response from the <code>ListImports</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    put:
      operationId: StartImport
      description: Starts importing a bot or bot locale from a zip archive that you uploaded to an S3 bucket.
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartImportResponse'
        '480':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - importId
                - resourceSpecification
                - mergeStrategy
              properties:
                importId:
                  description: The unique identifier for the import. It is included in the response from the operation.
                  type: string
                  pattern: '^[0-9a-zA-Z]+$'
                  minLength: 10
                  maxLength: 10
                resourceSpecification:
                  description: 'Provides information about the bot or bot locale that you want to import. You can sepcifiy the <code>botImportSpecification</code> or the <code>botLocaleImportSpecification</code>, but not both.'
                  type: object
                  properties:
                    botImportSpecification:
                      $ref: '#/components/schemas/BotImportSpecification'
                      description: Parameters for importing a bot.
                    botLocaleImportSpecification:
                      $ref: '#/components/schemas/BotLocaleImportSpecification'
                      description: Parameters for importing a bot locale.
                mergeStrategy:
                  description: The strategy to use when there is a name conflict between the imported resource and an existing resource. When the merge strategy is <code>FailOnConflict</code> existing resources are not overwritten and the import fails.
                  type: string
                  enum:
                    - Overwrite
                    - FailOnConflict
                filePassword:
                  description: The password used to encrypt the zip archive that contains the bot or bot locale definition. You should always encrypt the zip archive to protect it during transit between your site and Amazon Lex.
                  type: string
                  minLength: 1
                  maxLength: 1024
                  format: password
  '/tags/{resourceARN}':
    get:
      operationId: ListTagsForResource
      description: 'Gets a list of tags associated with a resource. Only bots, bot aliases, and bot channels can have tags associated with them.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      parameters:
        - name: resourceARN
          in: path
          required: true
          description: The Amazon Resource Name (ARN) of the resource to get a list of tags for.
          schema:
            type: string
            minLength: 1
            maxLength: 1011
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: TagResource
      description: 'Adds the specified tags to the specified resource. If a tag key already exists, the existing value is replaced with the new value.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      parameters:
        - name: resourceARN
          in: path
          required: true
          description: 'The Amazon Resource Name (ARN) of the bot, bot alias, or bot channel to tag.'
          schema:
            type: string
            minLength: 1
            maxLength: 1011
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tags
              properties:
                tags:
                  description: 'A list of tag keys to add to the resource. If a tag key already exists, the existing value is replaced with the new value.'
                  type: object
                  minProperties: 0
                  maxProperties: 200
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
  '/tags/{resourceARN}#tagKeys':
    delete:
      operationId: UntagResource
      description: 'Removes tags from a bot, bot alias, or bot channel.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      parameters:
        - name: resourceARN
          in: path
          required: true
          description: The Amazon Resource Name (ARN) of the resource to remove the tags from.
          schema:
            type: string
            minLength: 1
            maxLength: 1011
        - name: tagKeys
          in: query
          required: true
          description: 'A list of tag keys to remove from the resource. If a tag key does not exist on the resource, it is ignored.'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TagKey'
            minItems: 0
            maxItems: 200
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    BuildBotLocaleResponse:
      type: object
      properties:
        botId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the specified bot.
        botVersion:
          $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot that was built. This is only the draft version of the bot.
        localeId:
          $ref: '#/components/schemas/LocaleId'
          description: The language and locale specified of where the bot can be used.
        botLocaleStatus:
          $ref: '#/components/schemas/BotLocaleStatus'
          description: 'The bot''s build status. When the status is <code>ReadyExpressTesting</code> you can test the bot using the utterances defined for the intents and slot types. When the status is <code>Built</code>, the bot is ready for use and can be tested using any utterance.'
        lastBuildSubmittedDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp indicating the date and time that the bot was last built for this locale.
    ThrottlingException: {}
    ServiceQuotaExceededException: {}
    ValidationException: {}
    PreconditionFailedException: {}
    ConflictException: {}
    InternalServerException: {}
    CreateBotResponse:
      type: object
      properties:
        botId:
          $ref: '#/components/schemas/Id'
          description: A unique identifier for a particular bot. You use this to identify the bot when you call other Amazon Lex API operations.
        botName:
          $ref: '#/components/schemas/Name'
          description: The name specified for the bot.
        description:
          $ref: '#/components/schemas/Description'
          description: The description specified for the bot.
        roleArn:
          $ref: '#/components/schemas/RoleArn'
          description: The IAM role specified for the bot.
        dataPrivacy:
          $ref: '#/components/schemas/DataPrivacy'
          description: The data privacy settings specified for the bot.
        idleSessionTTLInSeconds:
          $ref: '#/components/schemas/SessionTTL'
          description: The session idle time specified for the bot.
        botStatus:
          $ref: '#/components/schemas/BotStatus'
          description: 'Shows the current status of the bot. The bot is first in the <code>Creating</code> status. Once the bot is read for use, it changes to the <code>Available</code> status. After the bot is created, you can use the <code>Draft</code> version of the bot.'
        creationDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp indicating the date and time that the bot was created.
        botTags:
          $ref: '#/components/schemas/TagMap'
          description: A list of tags associated with the bot.
        testBotAliasTags:
          $ref: '#/components/schemas/TagMap'
          description: A list of tags associated with the test alias for the bot.
    ChildDirected:
      type: boolean
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    CreateBotAliasResponse:
      type: object
      properties:
        botAliasId:
          $ref: '#/components/schemas/BotAliasId'
          description: The unique identifier of the bot alias.
        botAliasName:
          $ref: '#/components/schemas/Name'
          description: The name specified for the bot alias.
        description:
          $ref: '#/components/schemas/Description'
          description: The description specified for the bot alias.
        botVersion:
          $ref: '#/components/schemas/NumericalBotVersion'
          description: The version of the bot associated with this alias.
        botAliasLocaleSettings:
          $ref: '#/components/schemas/BotAliasLocaleSettingsMap'
          description: Configuration information for a specific locale.
        conversationLogSettings:
          $ref: '#/components/schemas/ConversationLogSettings'
          description: The conversation log settings specified for the alias.
        sentimentAnalysisSettings:
          $ref: '#/components/schemas/SentimentAnalysisSettings'
        botAliasStatus:
          $ref: '#/components/schemas/BotAliasStatus'
          description: 'The current status of the alias. The alias is first put into the <code>Creating</code> state. When the alias is ready to be used, it is put into the <code>Available</code> state. You can use the <code>DescribeBotAlias</code> operation to get the current state of an alias.'
        botId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot that this alias applies to.
        creationDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A Unix timestamp indicating the date and time that the bot alias was created.
        tags:
          $ref: '#/components/schemas/TagMap'
          description: A list of tags associated with the bot alias.
    BotAliasLocaleSettings:
      type: object
      required:
        - enabled
      properties:
        enabled:
          $ref: '#/components/schemas/Boolean'
          description: 'Determines whether the locale is enabled for the bot. If the value is <code>false</code>, the locale isn''t available for use.'
        codeHookSpecification:
          $ref: '#/components/schemas/CodeHookSpecification'
          description: Specifies the Lambda function that should be used in the locale.
      description: 'Specifies settings that are unique to a locale. For example, you can use different Lambda function depending on the bot''s locale.'
    TextLogSettingsList:
      type: array
      items:
        $ref: '#/components/schemas/TextLogSetting'
      minItems: 1
      maxItems: 1
    AudioLogSettingsList:
      type: array
      items:
        $ref: '#/components/schemas/AudioLogSetting'
      minItems: 1
      maxItems: 1
    Boolean:
      type: boolean
    CreateBotLocaleResponse:
      type: object
      properties:
        botId:
          $ref: '#/components/schemas/Id'
          description: The specified bot identifier.
        botVersion:
          $ref: '#/components/schemas/DraftBotVersion'
          description: The specified bot version.
        localeName:
          $ref: '#/components/schemas/LocaleName'
          description: The specified locale name.
        localeId:
          $ref: '#/components/schemas/LocaleId'
          description: The specified locale identifier.
        description:
          $ref: '#/components/schemas/Description'
          description: The specified description of the bot locale.
        nluIntentConfidenceThreshold:
          $ref: '#/components/schemas/ConfidenceThreshold'
          description: The specified confidence threshold for inserting the <code>AMAZON.FallbackIntent</code> and <code>AMAZON.KendraSearchIntent</code> intents.
        voiceSettings:
          $ref: '#/components/schemas/VoiceSettings'
          description: The Amazon Polly voice ID that Amazon Lex uses for voice interaction with the user.
        botLocaleStatus:
          $ref: '#/components/schemas/BotLocaleStatus'
          description: '<p>The status of the bot.</p> <p>When the status is <code>Creating</code> the bot locale is being configured. When the status is <code>Building</code> Amazon Lex is building the bot for testing and use.</p> <p>If the status of the bot is <code>ReadyExpressTesting</code>, you can test the bot using the exact utterances specified in the bots'' intents. When the bot is ready for full testing or to run, the status is <code>Built</code>.</p> <p>If there was a problem with building the bot, the status is <code>Failed</code>. If the bot was saved but not built, the status is <code>NotBuilt</code>.</p>'
        creationDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp specifying the date and time that the bot locale was created.
    VoiceId:
      type: string
    CreateBotVersionResponse:
      type: object
      properties:
        botId:
          $ref: '#/components/schemas/Id'
          description: The bot identifier specified in the request.
        description:
          $ref: '#/components/schemas/Description'
          description: The description of the version specified in the request.
        botVersion:
          $ref: '#/components/schemas/NumericalBotVersion'
          description: The version number assigned to the version.
        botVersionLocaleSpecification:
          $ref: '#/components/schemas/BotVersionLocaleSpecification'
          description: The source versions used for each locale in the new version.
        botStatus:
          $ref: '#/components/schemas/BotStatus'
          description: 'When you send a request to create or update a bot, Amazon Lex sets the status response element to <code>Creating</code>. After Amazon Lex builds the bot, it sets status to <code>Available</code>. If Amazon Lex can''t build the bot, it sets status to <code>Failed</code>.'
        creationDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the version was created.
    BotVersionLocaleDetails:
      type: object
      required:
        - sourceBotVersion
      properties:
        sourceBotVersion:
          $ref: '#/components/schemas/BotVersion'
          description: The version of a bot used for a bot locale.
      description: The version of a bot used for a bot locale.
    CreateExportResponse:
      type: object
      properties:
        exportId:
          $ref: '#/components/schemas/Id'
          description: An identifier for a specific request to create an export.
        resourceSpecification:
          $ref: '#/components/schemas/ExportResourceSpecification'
          description: 'A description of the type of resource that was exported, either a bot or a bot locale.'
        fileFormat:
          $ref: '#/components/schemas/ImportExportFileFormat'
          description: The file format used for the bot or bot locale definition files.
        exportStatus:
          $ref: '#/components/schemas/ExportStatus'
          description: 'The status of the export. When the status is <code>Completed</code>, you can use the operation to get the pre-signed S3 URL link to your exported bot or bot locale.'
        creationDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: The date and time that the request to export a bot was created.
    BotExportSpecification:
      type: object
      required:
        - botId
        - botVersion
      properties:
        botId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the bot assigned by Amazon Lex.
        botVersion:
          $ref: '#/components/schemas/BotVersion'
          description: The version of the bot that was exported. This will be either <code>DRAFT</code> or the version number.
      description: Provides the identity of a the bot that was exported.
    BotLocaleExportSpecification:
      type: object
      required:
        - botId
        - botVersion
        - localeId
      properties:
        botId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the bot to create the locale for.
        botVersion:
          $ref: '#/components/schemas/BotVersion'
          description: The version of the bot to export.
        localeId:
          $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale to export. The string must match one of the locales in the bot.
      description: Provides the bot locale parameters required for exporting a bot locale.
    ResourceNotFoundException: {}
    CreateIntentResponse:
      type: object
      properties:
        intentId:
          $ref: '#/components/schemas/Id'
          description: A unique identifier for the intent.
        intentName:
          $ref: '#/components/schemas/Name'
          description: The name specified for the intent.
        description:
          $ref: '#/components/schemas/Description'
          description: The description specified for the intent.
        parentIntentSignature:
          $ref: '#/components/schemas/IntentSignature'
          description: The signature of the parent intent specified for the intent.
        sampleUtterances:
          $ref: '#/components/schemas/SampleUtterancesList'
          description: The sample utterances specified for the intent.
        dialogCodeHook:
          $ref: '#/components/schemas/DialogCodeHookSettings'
          description: The dialog Lambda function specified for the intent.
        fulfillmentCodeHook:
          $ref: '#/components/schemas/FulfillmentCodeHookSettings'
          description: The fulfillment Lambda function specified for the intent.
        intentConfirmationSetting:
          $ref: '#/components/schemas/IntentConfirmationSetting'
          description: The confirmation setting specified for the intent.
        intentClosingSetting:
          $ref: '#/components/schemas/IntentClosingSetting'
          description: The closing setting specified for the intent.
        inputContexts:
          $ref: '#/components/schemas/InputContextsList'
          description: The list of input contexts specified for the intent.
        outputContexts:
          $ref: '#/components/schemas/OutputContextsList'
          description: The list of output contexts specified for the intent.
        kendraConfiguration:
          $ref: '#/components/schemas/KendraConfiguration'
          description: Configuration for searching a Amazon Kendra index specified for the intent.
        botId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with the intent.
        botVersion:
          $ref: '#/components/schemas/DraftBotVersion'
          description: The identifier of the version of the bot associated with the intent.
        localeId:
          $ref: '#/components/schemas/LocaleId'
          description: The locale that the intent is specified to use.
        creationDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the intent was created.
    SampleUtterance:
      type: object
      required:
        - utterance
      properties:
        utterance:
          $ref: '#/components/schemas/Utterance'
          description: The sample utterance that Amazon Lex uses to build its machine-learning model to recognize intents.
      description: A sample utterance that invokes an intent or respond to a slot elicitation prompt.
    PromptSpecification:
      type: object
      required:
        - messageGroups
        - maxRetries
      properties:
        messageGroups:
          $ref: '#/components/schemas/MessageGroupsList'
          description: A collection of messages that Amazon Lex can send to the user. Amazon Lex chooses the actual message to send at runtime.
        maxRetries:
          $ref: '#/components/schemas/PromptMaxRetries'
          description: The maximum number of times the bot tries to elicit a resonse from the user using this prompt.
        allowInterrupt:
          $ref: '#/components/schemas/BoxedBoolean'
          description: Indicates whether the user can interrupt a speech prompt from the bot.
      description: Specifies a list of message groups that Amazon Lex sends to a user to elicit a response.
    ResponseSpecification:
      type: object
      required:
        - messageGroups
      properties:
        messageGroups:
          $ref: '#/components/schemas/MessageGroupsList'
          description: A collection of responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime.
        allowInterrupt:
          $ref: '#/components/schemas/BoxedBoolean'
          description: Indicates whether the user can interrupt a speech response from Amazon Lex.
      description: Specifies a list of message groups that Amazon Lex uses to respond the user input.
    BoxedBoolean:
      type: boolean
    InputContext:
      type: object
      required:
        - name
      properties:
        name:
          $ref: '#/components/schemas/Name'
          description: The name of the context.
      description: The name of a context that must be active for an intent to be selected by Amazon Lex.
    OutputContext:
      type: object
      required:
        - name
        - timeToLiveInSeconds
        - turnsToLive
      properties:
        name:
          $ref: '#/components/schemas/Name'
          description: The name of the output context.
        timeToLiveInSeconds:
          $ref: '#/components/schemas/ContextTimeToLiveInSeconds'
          description: 'The amount of time, in seconds, that the output context should remain active. The time is figured from the first time the context is sent to the user.'
        turnsToLive:
          $ref: '#/components/schemas/ContextTurnsToLive'
          description: The number of conversation turns that the output context should remain active. The number of turns is counted from the first time that the context is sent to the user.
      description: Describes a session context that is activated when an intent is fulfilled.
    KendraIndexArn:
      type: string
      pattern: '^arn:aws:kendra:[a-z]+-[a-z]+-[0-9]:[0-9]{12}:index\/[a-zA-Z0-9][a-zA-Z0-9_-]*$'
      minLength: 32
      maxLength: 2048
    QueryFilterString:
      type: string
      minLength: 1
      maxLength: 5000
    CreateResourcePolicyResponse:
      type: object
      properties:
        resourceArn:
          $ref: '#/components/schemas/AmazonResourceName'
          description: The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy was attached to.
        revisionId:
          $ref: '#/components/schemas/RevisionId'
          description: 'The current revision of the resource policy. Use the revision ID to make sure that you are updating the most current version of a resource policy when you add a policy statement to a resource, delete a resource, or update a resource.'
    CreateResourcePolicyStatementResponse:
      type: object
      properties:
        resourceArn:
          $ref: '#/components/schemas/AmazonResourceName'
          description: The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.
        revisionId:
          $ref: '#/components/schemas/RevisionId'
          description: 'The current revision of the resource policy. Use the revision ID to make sure that you are updating the most current version of a resource policy when you add a policy statement to a resource, delete a resource, or update a resource.'
    Principal:
      type: object
      properties:
        service:
          $ref: '#/components/schemas/ServicePrincipal'
          description: The name of the AWS service that should allowed or denied access to an Amazon Lex action.
        arn:
          $ref: '#/components/schemas/PrincipalArn'
          description: The Amazon Resource Name (ARN) of the principal.
      description: 'The IAM principal that you allowing or denying access to an Amazon Lex action. You must provide a <code>service</code> or an <code>arn</code>, but not both in the same statement. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html"> AWS JSON policy elements: Principal </a>.'
    Operation:
      type: string
      pattern: 'lex:[a-zA-Z*]+$'
      minLength: 5
      maxLength: 50
    ConditionKeyValueMap:
      type: object
      minProperties: 0
      maxProperties: 10
      additionalProperties:
        $ref: '#/components/schemas/ConditionValue'
    CreateSlotResponse:
      type: object
      properties:
        slotId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier associated with the slot. Use this to identify the slot when you update or delete it.
        slotName:
          $ref: '#/components/schemas/Name'
          description: The name specified for the slot.
        description:
          $ref: '#/components/schemas/Description'
          description: The description associated with the slot.
        slotTypeId:
          $ref: '#/components/schemas/BuiltInOrCustomSlotTypeId'
          description: The unique identifier of the slot type associated with this slot.
        valueElicitationSetting:
          $ref: '#/components/schemas/SlotValueElicitationSetting'
          description: The value elicitation settings specified for the slot.
        obfuscationSetting:
          $ref: '#/components/schemas/ObfuscationSetting'
          description: Indicates whether the slot is configured to obfuscate values in Amazon CloudWatch logs.
        botId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot associated with the slot.
        botVersion:
          $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot associated with the slot.
        localeId:
          $ref: '#/components/schemas/LocaleId'
          description: The language and local specified for the slot.
        intentId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier of the intent associated with the slot.
        creationDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: The timestamp of the date and time that the slot was created.
        multipleValuesSetting:
          $ref: '#/components/schemas/MultipleValuesSetting'
          description: Indicates whether the slot returns multiple values in one response.
    SlotDefaultValueSpecification:
      type: object
      required:
        - defaultValueList
      properties:
        defaultValueList:
          $ref: '#/components/schemas/SlotDefaultValueList'
          description: A list of default values. Amazon Lex chooses the default value to use in the order that they are presented in the list.
      description: Defines a list of values that Amazon Lex should use as the default value for a slot.
    SlotConstraint:
      type: string
      enum:
        - Required
        - Optional
    SampleUtterancesList:
      type: array
      items:
        $ref: '#/components/schemas/SampleUtterance'
    WaitAndContinueSpecification:
      type: object
      required:
        - waitingResponse
        - continueResponse
      properties:
        waitingResponse:
          $ref: '#/components/schemas/ResponseSpecification'
          description: The response that Amazon Lex sends to indicate that the bot is waiting for the conversation to continue.
        continueResponse:
          $ref: '#/components/schemas/ResponseSpecification'
          description: The response that Amazon Lex sends to indicate that the bot is ready to continue the conversation.
        stillWaitingResponse:
          $ref: '#/components/schemas/StillWaitingResponseSpecification'
          description: A response that Amazon Lex sends periodically to the user to indicate that the bot is still waiting for input from the user.
        active:
          $ref: '#/components/schemas/BoxedBoolean'
          description: 'Specifies whether the bot will wait for a user to respond. When this field is false, wait and continue responses for a slot aren''t used and the bot expects an appropriate response within the configured timeout. If the <code>active</code> field isn''t specified, the default is true.'
      description: 'Specifies the prompts that Amazon Lex uses while a bot is waiting for customer input. '
    ObfuscationSettingType:
      type: string
      enum:
        - None
        - DefaultObfuscation
    CreateSlotTypeResponse:
      type: object
      properties:
        slotTypeId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier assigned to the slot type. Use this to identify the slot type in the <code>UpdateSlotType</code> and <code>DeleteSlotType</code> operations.
        slotTypeName:
          $ref: '#/components/schemas/Name'
          description: The name specified for the slot type.
        description:
          $ref: '#/components/schemas/Description'
          description: The description specified for the slot type.
        slotTypeValues:
          $ref: '#/components/schemas/SlotTypeValues'
          description: The list of values that the slot type can assume.
        valueSelectionSetting:
          $ref: '#/components/schemas/SlotValueSelectionSetting'
          description: The strategy that Amazon Lex uses to select a value from the list of possible values.
        parentSlotTypeSignature:
          $ref: '#/components/schemas/SlotTypeSignature'
          description: The signature of the base slot type specified for the slot type.
        botId:
          $ref: '#/components/schemas/Id'
          description: The identifier for the bot associated with the slot type.
        botVersion:
          $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot associated with the slot type.
        localeId:
          $ref: '#/components/schemas/LocaleId'
          description: The specified language and local specified for the slot type.
        creationDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the slot type was created.
    SlotTypeValue:
      type: object
      properties:
        sampleValue:
          $ref: '#/components/schemas/SampleValue'
          description: The value of the slot type entry.
        synonyms:
          $ref: '#/components/schemas/SynonymList'
          description: Additional values releated to the slot type entry.
      description: Each slot type can have a set of values. Each <code>SlotTypeValue</code> represents a value that the slot type can take.
    SlotValueResolutionStrategy:
      type: string
      enum:
        - OriginalValue
        - TopResolution
    SlotValueRegexFilter:
      type: object
      required:
        - pattern
      properties:
        pattern:
          $ref: '#/components/schemas/RegexPattern'
          description: '<p>A regular expression used to validate the value of a slot.</p> <p> Use a standard regular expression. Amazon Lex supports the following characters in the regular expression: </p> <ul> <li> <p>A-Z, a-z</p> </li> <li> <p>0-9</p> </li> <li> <p>Unicode characters ("\ u&lt;Unicode&gt;")</p> </li> </ul> <p> Represent Unicode characters with four digits, for example "\u0041" or "\u005A". </p> <p> The following regular expression operators are not supported: </p> <ul> <li> <p>Infinite repeaters: *, +, or {x,} with no upper bound.</p> </li> <li> <p>Wild card (.)</p> </li> </ul>'
      description: Provides a regular expression used to validate the value of a slot.
    CreateUploadUrlResponse:
      type: object
      properties:
        importId:
          $ref: '#/components/schemas/Id'
          description: An identifier for a unique import job. Use it when you call the operation.
        uploadUrl:
          $ref: '#/components/schemas/PresignedS3Url'
          description: A pre-signed S3 write URL. Upload the zip archive file that contains the definition of your bot or bot locale.
    DeleteBotResponse:
      type: object
      properties:
        botId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot that Amazon Lex is deleting.
        botStatus:
          $ref: '#/components/schemas/BotStatus'
          description: The current status of the bot. The status is <code>Deleting</code> while the bot and its associated resources are being deleted.
    DeleteBotAliasResponse:
      type: object
      properties:
        botAliasId:
          $ref: '#/components/schemas/BotAliasId'
          description: The unique identifier of the bot alias to delete.
        botId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot that contains the alias to delete.
        botAliasStatus:
          $ref: '#/components/schemas/BotAliasStatus'
          description: 'The current status of the alias. The status is <code>Deleting</code> while the alias is in the process of being deleted. Once the alias is deleted, it will no longer appear in the list of aliases returned by the <code>ListBotAliases</code> operation.'
    DeleteBotLocaleResponse:
      type: object
      properties:
        botId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the bot that contained the deleted locale.
        botVersion:
          $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot that contained the deleted locale.
        localeId:
          $ref: '#/components/schemas/LocaleId'
          description: The language and locale of the deleted locale.
        botLocaleStatus:
          $ref: '#/components/schemas/BotLocaleStatus'
          description: The status of deleting the bot locale. The locale first enters the <code>Deleting</code> status. Once the locale is deleted it no longer appears in the list of locales for the bot.
    DeleteBotVersionResponse:
      type: object
      properties:
        botId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the bot that is being deleted.
        botVersion:
          $ref: '#/components/schemas/NumericalBotVersion'
          description: The version of the bot that is being deleted.
        botStatus:
          $ref: '#/components/schemas/BotStatus'
          description: 'The current status of the bot. '
    DeleteExportResponse:
      type: object
      properties:
        exportId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier of the deleted export.
        exportStatus:
          $ref: '#/components/schemas/ExportStatus'
          description: 'The current status of the deletion. When the deletion is complete, the export will no longer be returned by the operation and calls to the with the export identifier will fail.'
    DeleteImportResponse:
      type: object
      properties:
        importId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier of the deleted import.
        importStatus:
          $ref: '#/components/schemas/ImportStatus'
          description: 'The current status of the deletion. When the deletion is complete, the import will no longer be returned by the operation and calls to the with the import identifier will fail.'
    DeleteResourcePolicyResponse:
      type: object
      properties:
        resourceArn:
          $ref: '#/components/schemas/AmazonResourceName'
          description: The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy was deleted from.
        revisionId:
          $ref: '#/components/schemas/RevisionId'
          description: 'The current revision of the resource policy. Use the revision ID to make sure that you are updating the most current version of a resource policy when you add a policy statement to a resource, delete a resource, or update a resource.'
    DeleteResourcePolicyStatementResponse:
      type: object
      properties:
        resourceArn:
          $ref: '#/components/schemas/AmazonResourceName'
          description: The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy statement was removed from.
        revisionId:
          $ref: '#/components/schemas/RevisionId'
          description: 'The current revision of the resource policy. Use the revision ID to make sure that you are updating the most current version of a resource policy when you add a policy statement to a resource, delete a resource, or update a resource.'
    DescribeBotResponse:
      type: object
      properties:
        botId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot.
        botName:
          $ref: '#/components/schemas/Name'
          description: The name of the bot.
        description:
          $ref: '#/components/schemas/Description'
          description: 'The description of the bot. '
        roleArn:
          $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of an IAM role that has permission to access the bot.
        dataPrivacy:
          $ref: '#/components/schemas/DataPrivacy'
          description: Settings for managing data privacy of the bot and its conversations with users.
        idleSessionTTLInSeconds:
          $ref: '#/components/schemas/SessionTTL'
          description: The maximum time in seconds that Amazon Lex retains the data gathered in a conversation.
        botStatus:
          $ref: '#/components/schemas/BotStatus'
          description: The current status of the bot. When the status is <code>Available</code> the bot is ready to be used in conversations with users.
        creationDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the bot was created.
        lastUpdatedDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the bot was last updated.
    DescribeBotAliasResponse:
      type: object
      properties:
        botAliasId:
          $ref: '#/components/schemas/BotAliasId'
          description: The identifier of the bot alias.
        botAliasName:
          $ref: '#/components/schemas/Name'
          description: The name of the bot alias.
        description:
          $ref: '#/components/schemas/Description'
          description: The description of the bot alias.
        botVersion:
          $ref: '#/components/schemas/BotVersion'
          description: The version of the bot associated with the bot alias.
        botAliasLocaleSettings:
          $ref: '#/components/schemas/BotAliasLocaleSettingsMap'
          description: The locale settings that are unique to the alias.
        conversationLogSettings:
          $ref: '#/components/schemas/ConversationLogSettings'
          description: Specifics of how Amazon Lex logs text and audio conversations with the bot associated with the alias.
        sentimentAnalysisSettings:
          $ref: '#/components/schemas/SentimentAnalysisSettings'
        botAliasHistoryEvents:
          $ref: '#/components/schemas/BotAliasHistoryEventsList'
          description: 'A list of events that affect a bot alias. For example, an event is recorded when the version that the alias points to changes.'
        botAliasStatus:
          $ref: '#/components/schemas/BotAliasStatus'
          description: 'The current status of the alias. When the alias is <code>Available</code>, the alias is ready for use with your bot.'
        botId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with the bot alias.
        creationDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the alias was created.
        lastUpdatedDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the alias was last updated.
    DescribeBotLocaleResponse:
      type: object
      properties:
        botId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with the locale.
        botVersion:
          $ref: '#/components/schemas/BotVersion'
          description: The identifier of the version of the bot associated with the locale.
        localeId:
          $ref: '#/components/schemas/LocaleId'
          description: The unique identifier of the described locale.
        localeName:
          $ref: '#/components/schemas/LocaleName'
          description: The name of the locale.
        description:
          $ref: '#/components/schemas/Description'
          description: The description of the locale.
        nluIntentConfidenceThreshold:
          $ref: '#/components/schemas/ConfidenceThreshold'
          description: The confidence threshold where Amazon Lex inserts the <code>AMAZON.FallbackIntent</code> and <code>AMAZON.KendraSearchIntent</code> intents in the list of possible intents for an utterance.
        voiceSettings:
          $ref: '#/components/schemas/VoiceSettings'
          description: The Amazon Polly voice Amazon Lex uses for voice interaction with the user.
        intentsCount:
          $ref: '#/components/schemas/ResourceCount'
          description: The number of intents defined for the locale.
        slotTypesCount:
          $ref: '#/components/schemas/ResourceCount'
          description: The number of slot types defined for the locale.
        botLocaleStatus:
          $ref: '#/components/schemas/BotLocaleStatus'
          description: 'The status of the bot. If the status is <code>Failed</code>, the reasons for the failure are listed in the <code>failureReasons</code> field.'
        failureReasons:
          $ref: '#/components/schemas/FailureReasons'
          description: 'if <code>botLocaleStatus</code> is <code>Failed</code>, Amazon Lex explains why it failed to build the bot.'
        creationDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: The date and time that the locale was created.
        lastUpdatedDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: The date and time that the locale was last updated.
        lastBuildSubmittedDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: The date and time that the locale was last submitted for building.
        botLocaleHistoryEvents:
          $ref: '#/components/schemas/BotLocaleHistoryEventsList'
          description: 'History of changes, such as when a locale is used in an alias, that have taken place for the locale.'
    DescribeBotVersionResponse:
      type: object
      properties:
        botId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the bot that contains the version.
        botName:
          $ref: '#/components/schemas/Name'
          description: The name of the bot that contains the version.
        botVersion:
          $ref: '#/components/schemas/NumericalBotVersion'
          description: The version of the bot to describe.
        description:
          $ref: '#/components/schemas/Description'
          description: The description specified for the bot.
        roleArn:
          $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of an IAM role that has permission to access the bot version.
        dataPrivacy:
          $ref: '#/components/schemas/DataPrivacy'
          description: Data privacy settings for the bot version.
        idleSessionTTLInSeconds:
          $ref: '#/components/schemas/SessionTTL'
          description: The number of seconds that a session with the bot remains active before it is discarded by Amazon Lex.
        botStatus:
          $ref: '#/components/schemas/BotStatus'
          description: 'The current status of the bot. When the status is <code>Available</code>, the bot version is ready for use.'
        failureReasons:
          $ref: '#/components/schemas/FailureReasons'
          description: 'If the <code>botStatus</code> is <code>Failed</code>, this contains a list of reasons that the version couldn''t be built.'
        creationDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the bot version was created.
    DescribeExportResponse:
      type: object
      properties:
        exportId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier of the described export.
        resourceSpecification:
          $ref: '#/components/schemas/ExportResourceSpecification'
          description: 'The bot, bot ID, and optional locale ID of the exported bot or bot locale.'
        fileFormat:
          $ref: '#/components/schemas/ImportExportFileFormat'
          description: The file format used in the files that describe the bot or bot locale.
        exportStatus:
          $ref: '#/components/schemas/ExportStatus'
          description: The status of the export. When the status is <code>Complete</code> the export archive file is available for download.
        failureReasons:
          $ref: '#/components/schemas/FailureReasons'
          description: 'If the <code>exportStatus</code> is failed, contains one or more reasons why the export could not be completed.'
        downloadUrl:
          $ref: '#/components/schemas/PresignedS3Url'
          description: A pre-signed S3 URL that points to the bot or bot locale archive. The URL is only available for 5 minutes after calling the <code>DescribeExport</code> operation.
        creationDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: The date and time that the export was created.
        lastUpdatedDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: The last date and time that the export was updated.
    DescribeImportResponse:
      type: object
      properties:
        importId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier of the described import.
        resourceSpecification:
          $ref: '#/components/schemas/ImportResourceSpecification'
          description: The specifications of the imported bot or bot locale.
        importedResourceId:
          $ref: '#/components/schemas/ImportedResourceId'
          description: The unique identifier that Amazon Lex assigned to the resource created by the import.
        importedResourceName:
          $ref: '#/components/schemas/Name'
          description: The name of the imported resource.
        mergeStrategy:
          $ref: '#/components/schemas/MergeStrategy'
          description: The strategy used when there was a name conflict between the imported resource and an existing resource. When the merge strategy is <code>FailOnConflict</code> existing resources are not overwritten and the import fails.
        importStatus:
          $ref: '#/components/schemas/ImportStatus'
          description: The status of the import process. When the status is <code>Completed</code> the resource is imported and ready for use.
        failureReasons:
          $ref: '#/components/schemas/FailureReasons'
          description: 'If the <code>importStatus</code> field is <code>Failed</code>, this provides one or more reasons for the failture.'
        creationDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: The date and time that the import was created.
        lastUpdatedDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: The date and time that the import was last updated.
    DescribeIntentResponse:
      type: object
      properties:
        intentId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier assigned to the intent when it was created.
        intentName:
          $ref: '#/components/schemas/Name'
          description: The name specified for the intent.
        description:
          $ref: '#/components/schemas/Description'
          description: The description of the intent.
        parentIntentSignature:
          $ref: '#/components/schemas/IntentSignature'
          description: 'The identifier of the built-in intent that this intent is derived from, if any.'
        sampleUtterances:
          $ref: '#/components/schemas/SampleUtterancesList'
          description: User utterances that trigger this intent.
        dialogCodeHook:
          $ref: '#/components/schemas/DialogCodeHookSettings'
          description: The Lambda function called during each turn of a conversation with the intent.
        fulfillmentCodeHook:
          $ref: '#/components/schemas/FulfillmentCodeHookSettings'
          description: The Lambda function called when the intent is complete and ready for fulfillment.
        slotPriorities:
          $ref: '#/components/schemas/SlotPrioritiesList'
          description: The list that determines the priority that slots should be elicited from the user.
        intentConfirmationSetting:
          $ref: '#/components/schemas/IntentConfirmationSetting'
          description: Prompts that Amazon Lex sends to the user to confirm completion of an intent.
        intentClosingSetting:
          $ref: '#/components/schemas/IntentClosingSetting'
          description: The response that Amazon Lex sends to when the intent is closed.
        inputContexts:
          $ref: '#/components/schemas/InputContextsList'
          description: A list of contexts that must be active for the intent to be considered for sending to the user.
        outputContexts:
          $ref: '#/components/schemas/OutputContextsList'
          description: A list of contexts that are activated when the intent is fulfilled.
        kendraConfiguration:
          $ref: '#/components/schemas/KendraConfiguration'
          description: Configuration information required to use the <code>AMAZON.KendraSearchIntent</code> intent.
        botId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with the intent.
        botVersion:
          $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot associated with the intent.
        localeId:
          $ref: '#/components/schemas/LocaleId'
          description: The language and locale specified for the intent.
        creationDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the intent was created.
        lastUpdatedDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the intent was last updated.
    DescribeResourcePolicyResponse:
      type: object
      properties:
        resourceArn:
          $ref: '#/components/schemas/AmazonResourceName'
          description: The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.
        policy:
          $ref: '#/components/schemas/Policy'
          description: 'The JSON structure that contains the resource policy. For more information about the contents of a JSON policy document, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html"> IAM JSON policy reference </a>.'
        revisionId:
          $ref: '#/components/schemas/RevisionId'
          description: 'The current revision of the resource policy. Use the revision ID to make sure that you are updating the most current version of a resource policy when you add a policy statement to a resource, delete a resource, or update a resource.'
    DescribeSlotResponse:
      type: object
      properties:
        slotId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier generated for the slot.
        slotName:
          $ref: '#/components/schemas/Name'
          description: The name specified for the slot.
        description:
          $ref: '#/components/schemas/Description'
          description: The description specified for the slot.
        slotTypeId:
          $ref: '#/components/schemas/BuiltInOrCustomSlotTypeId'
          description: The identifier of the slot type that determines the values entered into the slot.
        valueElicitationSetting:
          $ref: '#/components/schemas/SlotValueElicitationSetting'
          description: Prompts that Amazon Lex uses to elicit a value for the slot.
        obfuscationSetting:
          $ref: '#/components/schemas/ObfuscationSetting'
          description: 'Whether slot values are shown in Amazon CloudWatch logs. If the value is <code>None</code>, the actual value of the slot is shown in logs.'
        botId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with the slot.
        botVersion:
          $ref: '#/components/schemas/BotVersion'
          description: The version of the bot associated with the slot.
        localeId:
          $ref: '#/components/schemas/LocaleId'
          description: The language and locale specified for the slot.
        intentId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the intent associated with the slot.
        creationDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the slot was created.
        lastUpdatedDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the slot was last updated.
        multipleValuesSetting:
          $ref: '#/components/schemas/MultipleValuesSetting'
          description: '<p>Indicates whether the slot accepts multiple values in a single utterance.</p> <p>If the <code>multipleValuesSetting</code> is not set, the default value is <code>false</code>.</p>'
    DescribeSlotTypeResponse:
      type: object
      properties:
        slotTypeId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier for the slot type.
        slotTypeName:
          $ref: '#/components/schemas/Name'
          description: The name specified for the slot type.
        description:
          $ref: '#/components/schemas/Description'
          description: The description specified for the slot type.
        slotTypeValues:
          $ref: '#/components/schemas/SlotTypeValues'
          description: The values that the slot type can take. Includes any synonyms for the slot type values.
        valueSelectionSetting:
          $ref: '#/components/schemas/SlotValueSelectionSetting'
          description: The strategy that Amazon Lex uses to choose a value from a list of possible values.
        parentSlotTypeSignature:
          $ref: '#/components/schemas/SlotTypeSignature'
          description: The built in slot type used as a parent to this slot type.
        botId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with the slot type.
        botVersion:
          $ref: '#/components/schemas/BotVersion'
          description: The version of the bot associated with the slot type.
        localeId:
          $ref: '#/components/schemas/LocaleId'
          description: The language and locale specified for the slot type.
        creationDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the slot type was created.
        lastUpdatedDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the slot type was last updated.
    ListBotAliasesResponse:
      type: object
      properties:
        botAliasSummaries:
          $ref: '#/components/schemas/BotAliasSummaryList'
          description: 'Summary information for the bot aliases that meet the filter criteria specified in the request. The length of the list is specified in the <code>maxResults</code> parameter of the request. If there are more aliases available, the <code>nextToken</code> field contains a token to get the next page of results.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'A token that indicates whether there are more results to return in a response to the <code>ListBotAliases</code> operation. If the <code>nextToken</code> field is present, you send the contents as the <code>nextToken</code> parameter of a <code>ListBotAliases</code> operation request to get the next page of results.'
        botId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with the aliases.
    ListBotLocalesResponse:
      type: object
      properties:
        botId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the bot to list locales for.
        botVersion:
          $ref: '#/components/schemas/BotVersion'
          description: The version of the bot.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'A token that indicates whether there are more results to return in a response to the <code>ListBotLocales</code> operation. If the <code>nextToken</code> field is present, you send the contents as the <code>nextToken</code> parameter of a <code>ListBotLocales</code> operation request to get the next page of results.'
        botLocaleSummaries:
          $ref: '#/components/schemas/BotLocaleSummaryList'
          description: 'Summary information for the locales that meet the filter criteria specified in the request. The length of the list is specified in the <code>maxResults</code> parameter of the request. If there are more locales available, the <code>nextToken</code> field contains a token to get the next page of results.'
    BotLocaleSortAttribute:
      type: string
      enum:
        - BotLocaleName
    SortOrder:
      type: string
      enum:
        - Ascending
        - Descending
    BotLocaleFilter:
      type: object
      required:
        - name
        - values
        - operator
      properties:
        name:
          $ref: '#/components/schemas/BotLocaleFilterName'
          description: The name of the field to filter the list of bots.
        values:
          $ref: '#/components/schemas/FilterValues'
          description: The value to use for filtering the list of bots.
        operator:
          $ref: '#/components/schemas/BotLocaleFilterOperator'
          description: The operator to use for the filter. Specify <code>EQ</code> when the <code>ListBotLocales</code> operation should return only aliases that equal the specified value. Specify <code>CO</code> when the <code>ListBotLocales</code> operation should return aliases that contain the specified value.
      description: Filters responses returned by the <code>ListBotLocales</code> operation.
    ListBotVersionsResponse:
      type: object
      properties:
        botId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the bot to list versions for.
        botVersionSummaries:
          $ref: '#/components/schemas/BotVersionSummaryList'
          description: 'Summary information for the bot versions that meet the filter criteria specified in the request. The length of the list is specified in the <code>maxResults</code> parameter of the request. If there are more versions available, the <code>nextToken</code> field contains a token to get the next page of results.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'A token that indicates whether there are more results to return in a response to the <code>ListBotVersions</code> operation. If the <code>nextToken</code> field is present, you send the contents as the <code>nextToken</code> parameter of a <code>ListBotAliases</code> operation request to get the next page of results.'
    BotVersionSortAttribute:
      type: string
      enum:
        - BotVersion
    ListBotsResponse:
      type: object
      properties:
        botSummaries:
          $ref: '#/components/schemas/BotSummaryList'
          description: 'Summary information for the bots that meet the filter criteria specified in the request. The length of the list is specified in the <code>maxResults</code> parameter of the request. If there are more bots available, the <code>nextToken</code> field contains a token to the next page of results.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'A token that indicates whether there are more results to return in a response to the <code>ListBots</code> operation. If the <code>nextToken</code> field is present, you send the contents as the <code>nextToken</code> parameter of a <code>ListBots</code> operation request to get the next page of results.'
    BotSortAttribute:
      type: string
      enum:
        - BotName
    BotFilter:
      type: object
      required:
        - name
        - values
        - operator
      properties:
        name:
          $ref: '#/components/schemas/BotFilterName'
          description: The name of the field to filter the list of bots.
        values:
          $ref: '#/components/schemas/FilterValues'
          description: The value to use for filtering the list of bots.
        operator:
          $ref: '#/components/schemas/BotFilterOperator'
          description: The operator to use for the filter. Specify <code>EQ</code> when the <code>ListBots</code> operation should return only aliases that equal the specified value. Specify <code>CO</code> when the <code>ListBots</code> operation should return aliases that contain the specified value.
      description: Filters the responses returned by the <code>ListBots</code> operation.
    ListBuiltInIntentsResponse:
      type: object
      properties:
        builtInIntentSummaries:
          $ref: '#/components/schemas/BuiltInIntentSummaryList'
          description: 'Summary information for the built-in intents that meet the filter criteria specified in the request. The length of the list is specified in the <code>maxResults</code> parameter of the request. If there are more intents available, the <code>nextToken</code> field contains a token to get the next page of results.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'A token that indicates whether there are more results to return in a response to the <code>ListBuiltInIntents</code> operation. If the <code>nextToken</code> field is present, you send the contents as the <code>nextToken</code> parameter of a <code>ListBotAliases</code> operation request to get the next page of results.'
        localeId:
          $ref: '#/components/schemas/LocaleId'
          description: The language and locale of the intents in the list.
    BuiltInIntentSortAttribute:
      type: string
      enum:
        - IntentSignature
    ListBuiltInSlotTypesResponse:
      type: object
      properties:
        builtInSlotTypeSummaries:
          $ref: '#/components/schemas/BuiltInSlotTypeSummaryList'
          description: 'Summary information for the built-in slot types that meet the filter criteria specified in the request. The length of the list is specified in the <code>maxResults</code> parameter of the request. If there are more slot types available, the <code>nextToken</code> field contains a token to get the next page of results.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'A token that indicates whether there are more results to return in a response to the <code>ListBuiltInSlotTypes</code> operation. If the <code>nextToken</code> field is present, you send the contents as the <code>nextToken</code> parameter of a <code>LIstBuiltInSlotTypes</code> operation request to get the next page of results.'
        localeId:
          $ref: '#/components/schemas/LocaleId'
          description: The language and locale of the slot types in the list.
    BuiltInSlotTypeSortAttribute:
      type: string
      enum:
        - SlotTypeSignature
    ListExportsResponse:
      type: object
      properties:
        botId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier assigned to the bot by Amazon Lex.
        botVersion:
          $ref: '#/components/schemas/BotVersion'
          description: The version of the bot that was exported.
        exportSummaries:
          $ref: '#/components/schemas/ExportSummaryList'
          description: 'Summary information for the exports that meet the filter criteria specified in the request. The length of the list is specified in the <code>maxResults</code> parameter. If there are more exports available, the <code>nextToken</code> field contains a token to get the next page of results.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'A token that indicates whether there are more results to return in a response to the <code>ListExports</code> operation. If the <code>nextToken</code> field is present, you send the contents as the <code>nextToken</code> parameter of a <code>ListExports</code> operation request to get the next page of results.'
    ExportSortAttribute:
      type: string
      enum:
        - LastUpdatedDateTime
    ExportFilter:
      type: object
      required:
        - name
        - values
        - operator
      properties:
        name:
          $ref: '#/components/schemas/ExportFilterName'
          description: The name of the field to use for filtering.
        values:
          $ref: '#/components/schemas/FilterValues'
          description: The values to use to fileter the response.
        operator:
          $ref: '#/components/schemas/ExportFilterOperator'
          description: The operator to use for the filter. Specify EQ when the <code>ListExports</code> operation should return only resource types that equal the specified value. Specify CO when the <code>ListExports</code> operation should return resource types that contain the specified value.
      description: Filtes the response form the operation
    ListImportsResponse:
      type: object
      properties:
        botId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier assigned by Amazon Lex to the bot.
        botVersion:
          $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot that was imported. It will always be <code>DRAFT</code>.
        importSummaries:
          $ref: '#/components/schemas/ImportSummaryList'
          description: 'Summary information for the imports that meet the filter criteria specified in the request. The length of the list is specified in the <code>maxResults</code> parameter. If there are more imports available, the <code>nextToken</code> field contains a token to get the next page of results.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'A token that indicates whether there are more results to return in a response to the <code>ListImports</code> operation. If the <code>nextToken</code> field is present, you send the contents as the <code>nextToken</code> parameter of a <code>ListImports</code> operation request to get the next page of results.'
    ImportSortAttribute:
      type: string
      enum:
        - LastUpdatedDateTime
    ImportFilter:
      type: object
      required:
        - name
        - values
        - operator
      properties:
        name:
          $ref: '#/components/schemas/ImportFilterName'
          description: The name of the field to use for filtering.
        values:
          $ref: '#/components/schemas/FilterValues'
          description: The values to use to filter the response.
        operator:
          $ref: '#/components/schemas/ImportFilterOperator'
          description: The operator to use for the filter. Specify EQ when the <code>ListImports</code> operation should return only resource types that equal the specified value. Specify CO when the <code>ListImports</code> operation should return resource types that contain the specified value.
      description: Filters the response from the operation.
    ListIntentsResponse:
      type: object
      properties:
        botId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the bot that contains the intent.
        botVersion:
          $ref: '#/components/schemas/BotVersion'
          description: The version of the bot that contains the intent.
        localeId:
          $ref: '#/components/schemas/LocaleId'
          description: The language and locale of the intents in the list.
        intentSummaries:
          $ref: '#/components/schemas/IntentSummaryList'
          description: 'Summary information for the intents that meet the filter criteria specified in the request. The length of the list is specified in the <code>maxResults</code> parameter of the request. If there are more intents available, the <code>nextToken</code> field contains a token to get the next page of results.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'A token that indicates whether there are more results to return in a response to the <code>ListIntents</code> operation. If the <code>nextToken</code> field is present, you send the contents as the <code>nextToken</code> parameter of a <code>ListIntents</code> operation request to get the next page of results.'
    IntentSortAttribute:
      type: string
      enum:
        - IntentName
        - LastUpdatedDateTime
    IntentFilter:
      type: object
      required:
        - name
        - values
        - operator
      properties:
        name:
          $ref: '#/components/schemas/IntentFilterName'
          description: The name of the field to use for the filter.
        values:
          $ref: '#/components/schemas/FilterValues'
          description: The value to use for the filter.
        operator:
          $ref: '#/components/schemas/IntentFilterOperator'
          description: The operator to use for the filter. Specify <code>EQ</code> when the <code>ListIntents</code> operation should return only aliases that equal the specified value. Specify <code>CO</code> when the <code>ListIntents</code> operation should return aliases that contain the specified value.
      description: Filters the response from the <code>ListIntents</code> operation.
    ListSlotTypesResponse:
      type: object
      properties:
        botId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the bot that contains the slot types.
        botVersion:
          $ref: '#/components/schemas/BotVersion'
          description: The version of the bot that contains the slot types.
        localeId:
          $ref: '#/components/schemas/LocaleId'
          description: The language and local of the slot types in the list.
        slotTypeSummaries:
          $ref: '#/components/schemas/SlotTypeSummaryList'
          description: 'Summary information for the slot types that meet the filter criteria specified in the request. The length of the list is specified in the <code>maxResults</code> parameter of the request. If there are more slot types available, the <code>nextToken</code> field contains a token to get the next page of results.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'A token that indicates whether there are more results to return in a response to the <code>ListSlotTypes</code> operation. If the <code>nextToken</code> field is present, you send the contents as the <code>nextToken</code> parameter of a <code>ListSlotTypes</code> operation request to get the next page of results.'
    SlotTypeSortAttribute:
      type: string
      enum:
        - SlotTypeName
        - LastUpdatedDateTime
    SlotTypeFilter:
      type: object
      required:
        - name
        - values
        - operator
      properties:
        name:
          $ref: '#/components/schemas/SlotTypeFilterName'
          description: The name of the field to use for filtering.
        values:
          $ref: '#/components/schemas/FilterValues'
          description: The value to use to filter the response.
        operator:
          $ref: '#/components/schemas/SlotTypeFilterOperator'
          description: The operator to use for the filter. Specify <code>EQ</code> when the <code>ListSlotTypes</code> operation should return only aliases that equal the specified value. Specify <code>CO</code> when the <code>ListSlotTypes</code> operation should return aliases that contain the specified value.
      description: Filters the response from the <code>ListSlotTypes</code> operation.
    ListSlotsResponse:
      type: object
      properties:
        botId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the bot that contains the slots.
        botVersion:
          $ref: '#/components/schemas/BotVersion'
          description: The version of the bot that contains the slots.
        localeId:
          $ref: '#/components/schemas/LocaleId'
          description: The language and locale of the slots in the list.
        intentId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the intent that contains the slots.
        slotSummaries:
          $ref: '#/components/schemas/SlotSummaryList'
          description: 'Summary information for the slots that meet the filter criteria specified in the request. The length of the list is specified in the <code>maxResults</code> parameter of the request. If there are more slots available, the <code>nextToken</code> field contains a token to get the next page of results.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'A token that indicates whether there are more results to return in a response to the <code>ListSlots</code> operation. If the <code>nextToken</code> field is present, you send the contents as the <code>nextToken</code> parameter of a <code>ListSlots</code> operation request to get the next page of results.'
    SlotSortAttribute:
      type: string
      enum:
        - SlotName
        - LastUpdatedDateTime
    SlotFilter:
      type: object
      required:
        - name
        - values
        - operator
      properties:
        name:
          $ref: '#/components/schemas/SlotFilterName'
          description: The name of the field to use for filtering.
        values:
          $ref: '#/components/schemas/FilterValues'
          description: The value to use to filter the response.
        operator:
          $ref: '#/components/schemas/SlotFilterOperator'
          description: The operator to use for the filter. Specify <code>EQ</code> when the <code>ListSlots</code> operation should return only aliases that equal the specified value. Specify <code>CO</code> when the <code>ListSlots</code> operation should return aliases that contain the specified value.
      description: Filters the response from the <code>ListSlots</code> operation.
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          $ref: '#/components/schemas/TagMap'
          description: The tags associated with a resource.
    StartImportResponse:
      type: object
      properties:
        importId:
          $ref: '#/components/schemas/Id'
          description: A unique identifier for the import.
        resourceSpecification:
          $ref: '#/components/schemas/ImportResourceSpecification'
          description: The parameters used when importing the bot or bot locale.
        mergeStrategy:
          $ref: '#/components/schemas/MergeStrategy'
          description: The strategy used when there was a name conflict between the imported resource and an existing resource. When the merge strategy is <code>FailOnConflict</code> existing resources are not overwritten and the import fails.
        importStatus:
          $ref: '#/components/schemas/ImportStatus'
          description: The current status of the import. When the status is <code>Complete</code> the bot or bot alias is ready to use.
        creationDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: The date and time that the import request was created.
    BotImportSpecification:
      type: object
      required:
        - botName
        - roleArn
        - dataPrivacy
      properties:
        botName:
          $ref: '#/components/schemas/Name'
          description: The name that Amazon Lex should use for the bot.
        roleArn:
          $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role used to build and run the bot.
        dataPrivacy:
          $ref: '#/components/schemas/DataPrivacy'
        idleSessionTTLInSeconds:
          $ref: '#/components/schemas/SessionTTL'
          description: '<p>The time, in seconds, that Amazon Lex should keep information about a user''s conversation with the bot. </p> <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p> <p>You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.</p>'
        botTags:
          $ref: '#/components/schemas/TagMap'
          description: 'A list of tags to add to the bot. You can only add tags when you import a bot. You can''t use the <code>UpdateBot</code> operation to update tags. To update tags, use the <code>TagResource</code> operation.'
        testBotAliasTags:
          $ref: '#/components/schemas/TagMap'
          description: 'A list of tags to add to the test alias for a bot. You can only add tags when you import a bot. You can''t use the <code>UpdateAlias</code> operation to update tags. To update tags on the test alias, use the <code>TagResource</code> operation.'
      description: Provides the bot parameters required for importing a bot.
    BotLocaleImportSpecification:
      type: object
      required:
        - botId
        - botVersion
        - localeId
      properties:
        botId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the bot to import the locale to.
        botVersion:
          $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot to import the locale to. This can only be the <code>DRAFT</code> version of the bot.
        localeId:
          $ref: '#/components/schemas/LocaleId'
          description: 'The identifier of the language and locale that the bot will be used in. The string must match one of the supported locales. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.'
        nluIntentConfidenceThreshold:
          $ref: '#/components/schemas/ConfidenceThreshold'
          description: '<p>Determines the threshold where Amazon Lex will insert the <code>AMAZON.FallbackIntent</code>, <code>AMAZON.KendraSearchIntent</code>, or both when returning alternative intents. <code>AMAZON.FallbackIntent</code> and <code>AMAZON.KendraSearchIntent</code> are only inserted if they are configured for the bot. </p> <p>For example, suppose a bot is configured with the confidence threshold of 0.80 and the <code>AMAZON.FallbackIntent</code>. Amazon Lex returns three alternative intents with the following confidence scores: IntentA (0.70), IntentB (0.60), IntentC (0.50). The response from the <code>PostText</code> operation would be:</p> <ul> <li> <p> <code>AMAZON.FallbackIntent</code> </p> </li> <li> <p> <code>IntentA</code> </p> </li> <li> <p> <code>IntentB</code> </p> </li> <li> <p> <code>IntentC</code> </p> </li> </ul>'
        voiceSettings:
          $ref: '#/components/schemas/VoiceSettings'
      description: Provides the bot locale parameters required for importing a bot locale.
    TagResourceResponse:
      type: object
      properties: {}
    UntagResourceResponse:
      type: object
      properties: {}
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    UpdateBotResponse:
      type: object
      properties:
        botId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot that was updated.
        botName:
          $ref: '#/components/schemas/Name'
          description: The name of the bot after the update.
        description:
          $ref: '#/components/schemas/Description'
          description: The description of the bot after the update.
        roleArn:
          $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role used by the bot after the update.
        dataPrivacy:
          $ref: '#/components/schemas/DataPrivacy'
          description: The data privacy settings for the bot after the update.
        idleSessionTTLInSeconds:
          $ref: '#/components/schemas/SessionTTL'
          description: 'The session timeout, in seconds, for the bot after the update.'
        botStatus:
          $ref: '#/components/schemas/BotStatus'
          description: 'Shows the current status of the bot. The bot is first in the <code>Creating</code> status. Once the bot is read for use, it changes to the <code>Available</code> status. After the bot is created, you can use the <code>DRAFT</code> version of the bot.'
        creationDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the bot was created.
        lastUpdatedDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the bot was last updated.
    UpdateBotAliasResponse:
      type: object
      properties:
        botAliasId:
          $ref: '#/components/schemas/BotAliasId'
          description: The identifier of the updated bot alias.
        botAliasName:
          $ref: '#/components/schemas/Name'
          description: The updated name of the bot alias.
        description:
          $ref: '#/components/schemas/Description'
          description: The updated description of the bot alias.
        botVersion:
          $ref: '#/components/schemas/BotVersion'
          description: The updated version of the bot that the alias points to.
        botAliasLocaleSettings:
          $ref: '#/components/schemas/BotAliasLocaleSettingsMap'
          description: The updated Lambda functions to use in each locale for the bot alias.
        conversationLogSettings:
          $ref: '#/components/schemas/ConversationLogSettings'
          description: The updated settings for storing conversation logs in Amazon CloudWatch Logs and Amazon S3 buckets.
        sentimentAnalysisSettings:
          $ref: '#/components/schemas/SentimentAnalysisSettings'
        botAliasStatus:
          $ref: '#/components/schemas/BotAliasStatus'
          description: The current status of the bot alias. When the status is <code>Available</code> the alias is ready for use.
        botId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the bot with the updated alias.
        creationDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the bot was created.
        lastUpdatedDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the bot was last updated.
    UpdateBotLocaleResponse:
      type: object
      properties:
        botId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the bot that contains the updated locale.
        botVersion:
          $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot that contains the updated locale.
        localeId:
          $ref: '#/components/schemas/LocaleId'
          description: The language and locale of the updated bot locale.
        localeName:
          $ref: '#/components/schemas/LocaleName'
          description: The updated locale name for the locale.
        description:
          $ref: '#/components/schemas/Description'
          description: The updated description of the locale.
        nluIntentConfidenceThreshold:
          $ref: '#/components/schemas/ConfidenceThreshold'
          description: The updated confidence threshold for inserting the <code>AMAZON.FallbackIntent</code> and <code>AMAZON.KendraSearchIntent</code> intents in the list of possible intents for an utterance.
        voiceSettings:
          $ref: '#/components/schemas/VoiceSettings'
          description: The updated Amazon Polly voice to use for voice interaction with the user.
        botLocaleStatus:
          $ref: '#/components/schemas/BotLocaleStatus'
          description: The current status of the locale. When the bot status is <code>Built</code> the locale is ready for use.
        failureReasons:
          $ref: '#/components/schemas/FailureReasons'
          description: 'If the <code>botLocaleStatus</code> is <code>Failed</code>, the <code>failureReasons</code> field lists the errors that occurred while building the bot.'
        creationDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the locale was created.
        lastUpdatedDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the locale was last updated.
    UpdateExportResponse:
      type: object
      properties:
        exportId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier Amazon Lex assigned to the export.
        resourceSpecification:
          $ref: '#/components/schemas/ExportResourceSpecification'
          description: 'A description of the type of resource that was exported, either a bot or a bot locale.'
        fileFormat:
          $ref: '#/components/schemas/ImportExportFileFormat'
          description: The file format used for the files that define the resource.
        exportStatus:
          $ref: '#/components/schemas/ExportStatus'
          description: The status of the export. When the status is <code>Completed</code> the export archive is available for download.
        creationDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: The date and time that the export was created.
        lastUpdatedDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: The date and time that the export was last updated.
    UpdateIntentResponse:
      type: object
      properties:
        intentId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the intent that was updated.
        intentName:
          $ref: '#/components/schemas/Name'
          description: The updated name of the intent.
        description:
          $ref: '#/components/schemas/Description'
          description: The updated description of the intent.
        parentIntentSignature:
          $ref: '#/components/schemas/IntentSignature'
          description: The updated built-in intent that is the parent of this intent.
        sampleUtterances:
          $ref: '#/components/schemas/SampleUtterancesList'
          description: The updated list of sample utterances for the intent.
        dialogCodeHook:
          $ref: '#/components/schemas/DialogCodeHookSettings'
          description: The updated Lambda function called during each turn of the conversation with the user.
        fulfillmentCodeHook:
          $ref: '#/components/schemas/FulfillmentCodeHookSettings'
          description: The updated Lambda function called when the intent is ready for fulfillment.
        slotPriorities:
          $ref: '#/components/schemas/SlotPrioritiesList'
          description: The updated list of slots and their priorities that are elicited from the user for the intent.
        intentConfirmationSetting:
          $ref: '#/components/schemas/IntentConfirmationSetting'
          description: The updated prompts that Amazon Lex sends to the user to confirm the completion of an intent.
        intentClosingSetting:
          $ref: '#/components/schemas/IntentClosingSetting'
          description: The updated response that Amazon Lex sends the user when the intent is closed.
        inputContexts:
          $ref: '#/components/schemas/InputContextsList'
          description: The updated list of contexts that must be active for the intent to be considered by Amazon Lex.
        outputContexts:
          $ref: '#/components/schemas/OutputContextsList'
          description: The updated list of contexts that Amazon Lex activates when the intent is fulfilled.
        kendraConfiguration:
          $ref: '#/components/schemas/KendraConfiguration'
          description: The updated configuration for connecting to an Amazon Kendra index with the <code>AMAZON.KendraSearchIntent</code> intent.
        botId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the bot that contains the intent.
        botVersion:
          $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot that contains the intent. Will always be <code>DRAFT</code>.
        localeId:
          $ref: '#/components/schemas/LocaleId'
          description: The updated language and locale of the intent.
        creationDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of when the intent was created.
        lastUpdatedDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the last time that the intent was modified.
    SlotPriority:
      type: object
      required:
        - priority
        - slotId
      properties:
        priority:
          $ref: '#/components/schemas/PriorityValue'
          description: The priority that a slot should be elicited.
        slotId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier of the slot.
      description: Sets the priority that Amazon Lex should use when eliciting slot values from a user.
    UpdateResourcePolicyResponse:
      type: object
      properties:
        resourceArn:
          $ref: '#/components/schemas/AmazonResourceName'
          description: The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.
        revisionId:
          $ref: '#/components/schemas/RevisionId'
          description: 'The current revision of the resource policy. Use the revision ID to make sure that you are updating the most current version of a resource policy when you add a policy statement to a resource, delete a resource, or update a resource.'
    UpdateSlotResponse:
      type: object
      properties:
        slotId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier of the slot that was updated.
        slotName:
          $ref: '#/components/schemas/Name'
          description: The updated name of the slot.
        description:
          $ref: '#/components/schemas/Description'
          description: The updated description of the bot.
        slotTypeId:
          $ref: '#/components/schemas/BuiltInOrCustomSlotTypeId'
          description: The updated identifier of the slot type that provides values for the slot.
        valueElicitationSetting:
          $ref: '#/components/schemas/SlotValueElicitationSetting'
          description: The updated prompts that Amazon Lex sends to the user to elicit a response that provides a value for the slot.
        obfuscationSetting:
          $ref: '#/components/schemas/ObfuscationSetting'
          description: The updated setting that determines whether the slot value is obfuscated in the Amazon CloudWatch logs.
        botId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the bot that contains the slot.
        botVersion:
          $ref: '#/components/schemas/DraftBotVersion'
          description: The identifier of the slot version that contains the slot. Will always be <code>DRAFT</code>.
        localeId:
          $ref: '#/components/schemas/LocaleId'
          description: The locale that contains the slot.
        intentId:
          $ref: '#/components/schemas/Id'
          description: The intent that contains the slot.
        creationDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: The timestamp of the date and time that the slot was created.
        lastUpdatedDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: The timestamp of the date and time that the slot was last updated.
        multipleValuesSetting:
          $ref: '#/components/schemas/MultipleValuesSetting'
          description: Indicates whether the slot accepts multiple values in one response.
    UpdateSlotTypeResponse:
      type: object
      properties:
        slotTypeId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier of the updated slot type.
        slotTypeName:
          $ref: '#/components/schemas/Name'
          description: The updated name of the slot type.
        description:
          $ref: '#/components/schemas/Description'
          description: The updated description of the slot type.
        slotTypeValues:
          $ref: '#/components/schemas/SlotTypeValues'
          description: The updated values that the slot type provides.
        valueSelectionSetting:
          $ref: '#/components/schemas/SlotValueSelectionSetting'
          description: The updated strategy that Amazon Lex uses to determine which value to select from the slot type.
        parentSlotTypeSignature:
          $ref: '#/components/schemas/SlotTypeSignature'
          description: The updated signature of the built-in slot type that is the parent of this slot type.
        botId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the bot that contains the slot type.
        botVersion:
          $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot that contains the slot type. This is always <code>DRAFT</code>.
        localeId:
          $ref: '#/components/schemas/LocaleId'
          description: The language and locale of the updated slot type.
        creationDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: The timestamp of the date and time that the slot type was created.
        lastUpdatedDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the slot type was last updated.
    AmazonResourceName:
      type: string
      minLength: 1
      maxLength: 1011
    AttachmentTitle:
      type: string
      minLength: 1
      maxLength: 250
    AttachmentUrl:
      type: string
      minLength: 1
      maxLength: 250
    S3BucketLogDestination:
      type: object
      required:
        - s3BucketArn
        - logPrefix
      properties:
        kmsKeyArn:
          $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of an AWS Key Management Service (KMS) key for encrypting audio log files stored in an S3 bucket.
        s3BucketArn:
          $ref: '#/components/schemas/S3BucketArn'
          description: The Amazon Resource Name (ARN) of an Amazon S3 bucket where audio log files are stored.
        logPrefix:
          $ref: '#/components/schemas/LogPrefix'
          description: The S3 prefix to assign to audio log files.
      description: Specifies an Amazon S3 bucket for logging audio conversations
    AudioLogDestination:
      type: object
      required:
        - s3Bucket
      properties:
        s3Bucket:
          $ref: '#/components/schemas/S3BucketLogDestination'
          description: The Amazon S3 bucket where the audio log files are stored. The IAM role specified in the <code>roleArn</code> parameter of the <a>CreateBot</a> operation must have permission to write to this bucket.
      description: The location of audio log files collected when conversation logging is enabled for a bot.
    AudioLogSetting:
      type: object
      required:
        - enabled
        - destination
      properties:
        enabled:
          $ref: '#/components/schemas/Boolean'
          description: Determines whether audio logging in enabled for the bot.
        destination:
          $ref: '#/components/schemas/AudioLogDestination'
      description: Settings for logging audio of conversations between Amazon Lex and a user. You specify whether to log audio and the Amazon S3 bucket where the audio file is stored.
    BotVersion:
      type: string
      pattern: '^(DRAFT|[0-9]+)$'
      minLength: 1
      maxLength: 5
    Timestamp:
      type: string
      format: date-time
    BotAliasHistoryEvent:
      type: object
      properties:
        botVersion:
          $ref: '#/components/schemas/BotVersion'
          description: 'The version of the bot that was used in the event. '
        startDate:
          $ref: '#/components/schemas/Timestamp'
          description: The date and time that the event started.
        endDate:
          $ref: '#/components/schemas/Timestamp'
          description: The date and time that the event ended.
      description: 'Provides a record of an event that affects a bot alias. For example, when the version of a bot that the alias points to changes.'
    BotAliasHistoryEventsList:
      type: array
      items:
        $ref: '#/components/schemas/BotAliasHistoryEvent'
    BotAliasId:
      type: string
      pattern: '^(\bTSTALIASID\b|[0-9a-zA-Z]+)$'
      minLength: 10
      maxLength: 10
    CodeHookSpecification:
      type: object
      required:
        - lambdaCodeHook
      properties:
        lambdaCodeHook:
          $ref: '#/components/schemas/LambdaCodeHook'
      description: Contains information about code hooks that Amazon Lex calls during a conversation.
    BotAliasLocaleSettingsMap:
      type: object
      minProperties: 1
      additionalProperties:
        $ref: '#/components/schemas/BotAliasLocaleSettings'
    BotAliasStatus:
      type: string
      enum:
        - Creating
        - Available
        - Deleting
        - Failed
    Name:
      type: string
      pattern: '^([0-9a-zA-Z][_-]?)+$'
      minLength: 1
      maxLength: 100
    Description:
      type: string
      minLength: 0
      maxLength: 200
    BotAliasSummary:
      type: object
      properties:
        botAliasId:
          $ref: '#/components/schemas/BotAliasId'
          description: The unique identifier assigned to the bot alias. You can use this ID to get detailed information about the alias using the <a>DescribeBotAlias</a> operation.
        botAliasName:
          $ref: '#/components/schemas/Name'
          description: The name of the bot alias.
        description:
          $ref: '#/components/schemas/Description'
          description: The description of the bot alias.
        botVersion:
          $ref: '#/components/schemas/BotVersion'
          description: The version of the bot that the bot alias references.
        botAliasStatus:
          $ref: '#/components/schemas/BotAliasStatus'
          description: 'The current state of the bot alias. If the status is <code>Available</code>, the alias is ready for use.'
        creationDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the bot alias was created.
        lastUpdatedDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the bot alias was last updated.
      description: Summary information about bot aliases returned from the <a>ListBotAliases</a> operation.
    BotAliasSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/BotAliasSummary'
    Id:
      type: string
      pattern: '^[0-9a-zA-Z]+$'
      minLength: 10
      maxLength: 10
    BotFilterName:
      type: string
      enum:
        - BotName
    FilterValues:
      type: array
      items:
        $ref: '#/components/schemas/FilterValue'
      minItems: 1
      maxItems: 1
    BotFilterOperator:
      type: string
      enum:
        - CO
        - EQ
    BotFilters:
      type: array
      items:
        $ref: '#/components/schemas/BotFilter'
      minItems: 1
      maxItems: 1
    RoleArn:
      type: string
      pattern: '^arn:aws:iam::[0-9]{12}:role/.*$'
      minLength: 32
      maxLength: 2048
    DataPrivacy:
      type: object
      required:
        - childDirected
      properties:
        childDirected:
          $ref: '#/components/schemas/ChildDirected'
          description: 'For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children''s Online Privacy Protection Act (COPPA) by specifying <code>true</code> or <code>false</code> in the <code>childDirected</code> field. By specifying <code>true</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying <code>false</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is not</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the <code>childDirected</code> field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the <a href="https://aws.amazon.com/lex/faqs#data-security">Amazon Lex FAQ</a>.'
      description: 'By default, data stored by Amazon Lex is encrypted. The <code>DataPrivacy</code> structure provides settings that determine how Amazon Lex handles special cases of securing the data for your bot. '
    SessionTTL:
      type: integer
      minimum: 60
      maximum: 86400
    TagMap:
      type: object
      minProperties: 0
      maxProperties: 200
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    LocaleId:
      type: string
    BotLocaleFilterName:
      type: string
      enum:
        - BotLocaleName
    BotLocaleFilterOperator:
      type: string
      enum:
        - CO
        - EQ
    BotLocaleFilters:
      type: array
      items:
        $ref: '#/components/schemas/BotLocaleFilter'
      minItems: 1
      maxItems: 1
    BotLocaleHistoryEventDescription:
      type: string
    BotLocaleHistoryEvent:
      type: object
      required:
        - event
        - eventDate
      properties:
        event:
          $ref: '#/components/schemas/BotLocaleHistoryEventDescription'
          description: A description of the event that occurred.
        eventDate:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the event occurred.
      description: Provides information about an event that occurred affecting the bot locale.
    BotLocaleHistoryEventsList:
      type: array
      items:
        $ref: '#/components/schemas/BotLocaleHistoryEvent'
    DraftBotVersion:
      type: string
      pattern: ^DRAFT$
      minLength: 5
      maxLength: 5
    ConfidenceThreshold:
      type: number
      format: double
      minimum: 0
      maximum: 1
    VoiceSettings:
      type: object
      required:
        - voiceId
      properties:
        voiceId:
          $ref: '#/components/schemas/VoiceId'
          description: The identifier of the Amazon Polly voice to use.
      description: Defines settings for using an Amazon Polly voice to communicate with a user.
    BotLocaleSortBy:
      type: object
      required:
        - attribute
        - order
      properties:
        attribute:
          $ref: '#/components/schemas/BotLocaleSortAttribute'
          description: The bot locale attribute to sort by.
        order:
          $ref: '#/components/schemas/SortOrder'
          description: Specifies whether to sort the bot locales in ascending or descending order.
      description: Specifies attributes for sorting a list of bot locales.
    BotLocaleStatus:
      type: string
      enum:
        - Creating
        - Building
        - Built
        - ReadyExpressTesting
        - Failed
        - Deleting
        - NotBuilt
        - Importing
    LocaleName:
      type: string
    BotLocaleSummary:
      type: object
      properties:
        localeId:
          $ref: '#/components/schemas/LocaleId'
          description: The language and locale of the bot locale.
        localeName:
          $ref: '#/components/schemas/LocaleName'
          description: The name of the bot locale.
        description:
          $ref: '#/components/schemas/Description'
          description: The description of the bot locale.
        botLocaleStatus:
          $ref: '#/components/schemas/BotLocaleStatus'
          description: The current status of the bot locale. When the status is <code>Built</code> the locale is ready for use.
        lastUpdatedDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the bot locale was last updated.
        lastBuildSubmittedDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the bot locale was last built.
      description: Summary information about bot locales returned by the <a>ListBotLocales</a> operation.
    BotLocaleSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/BotLocaleSummary'
    BotSortBy:
      type: object
      required:
        - attribute
        - order
      properties:
        attribute:
          $ref: '#/components/schemas/BotSortAttribute'
          description: The attribute to use to sort the list of bots.
        order:
          $ref: '#/components/schemas/SortOrder'
          description: The order to sort the list. You can choose ascending or descending.
      description: Specifies attributes for sorting a list of bots.
    BotStatus:
      type: string
      enum:
        - Creating
        - Available
        - Inactive
        - Deleting
        - Failed
        - Versioning
        - Importing
    NumericalBotVersion:
      type: string
      pattern: '^[0-9]+$'
      minLength: 1
      maxLength: 5
    BotSummary:
      type: object
      properties:
        botId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier assigned to the bot. Use this ID to get detailed information about the bot with the <a>DescribeBot</a> operation.
        botName:
          $ref: '#/components/schemas/Name'
          description: The name of the bot.
        description:
          $ref: '#/components/schemas/Description'
          description: The description of the bot.
        botStatus:
          $ref: '#/components/schemas/BotStatus'
          description: The current status of the bot. When the status is <code>Available</code> the bot is ready for use.
        latestBotVersion:
          $ref: '#/components/schemas/NumericalBotVersion'
          description: The latest numerical version in use for the bot.
        lastUpdatedDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: The date and time that the bot was last updated.
      description: Summary information about a bot returned by the <a>ListBots</a> operation.
    BotSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/BotSummary'
    BotVersionLocaleSpecification:
      type: object
      minProperties: 1
      additionalProperties:
        $ref: '#/components/schemas/BotVersionLocaleDetails'
    BotVersionSortBy:
      type: object
      required:
        - attribute
        - order
      properties:
        attribute:
          $ref: '#/components/schemas/BotVersionSortAttribute'
          description: The attribute to use to sort the list of versions.
        order:
          $ref: '#/components/schemas/SortOrder'
          description: The order to sort the list. You can specify ascending or descending order.
      description: Specifies attributes for sorting a list of bot versions.
    BotVersionSummary:
      type: object
      properties:
        botName:
          $ref: '#/components/schemas/Name'
          description: The name of the bot associated with the version.
        botVersion:
          $ref: '#/components/schemas/BotVersion'
          description: 'The numeric version of the bot, or <code>DRAFT</code> to indicate that this is the version of the bot that can be updated..'
        description:
          $ref: '#/components/schemas/Description'
          description: The description of the version.
        botStatus:
          $ref: '#/components/schemas/BotStatus'
          description: 'The status of the bot. When the status is available, the version of the bot is ready for use.'
        creationDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the version was created.
      description: Summary information about a bot version returned by the <a>ListBotVersions</a> operation.
    BotVersionSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/BotVersionSummary'
    BuildBotLocaleRequest:
      type: object
      title: BuildBotLocaleRequest
      properties: {}
    BuiltInIntentSortBy:
      type: object
      required:
        - attribute
        - order
      properties:
        attribute:
          $ref: '#/components/schemas/BuiltInIntentSortAttribute'
          description: The attribute to use to sort the list of built-in intents.
        order:
          $ref: '#/components/schemas/SortOrder'
          description: The order to sort the list. You can specify ascending or descending order.
      description: Specifies attributes for sorting a list of built-in intents.
    IntentSignature:
      type: string
    BuiltInIntentSummary:
      type: object
      properties:
        intentSignature:
          $ref: '#/components/schemas/IntentSignature'
          description: The signature of the built-in intent. Use this to specify the parent intent of a derived intent.
        description:
          $ref: '#/components/schemas/Description'
          description: The description of the intent.
      description: Provides summary information about a built-in intent for the <a>ListBuiltInIntents</a> operation.
    BuiltInIntentSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/BuiltInIntentSummary'
    BuiltInOrCustomSlotTypeId:
      type: string
      pattern: '^((AMAZON\.)[a-zA-Z_]+?|[0-9a-zA-Z]+)$'
      minLength: 1
      maxLength: 25
    BuiltInSlotTypeSortBy:
      type: object
      required:
        - attribute
        - order
      properties:
        attribute:
          $ref: '#/components/schemas/BuiltInSlotTypeSortAttribute'
          description: The attribute to use to sort the list of built-in intents.
        order:
          $ref: '#/components/schemas/SortOrder'
          description: The order to sort the list. You can choose ascending or descending.
      description: Specifies attributes for sorting a list of built-in slot types.
    SlotTypeSignature:
      type: string
    BuiltInSlotTypeSummary:
      type: object
      properties:
        slotTypeSignature:
          $ref: '#/components/schemas/SlotTypeSignature'
          description: The signature of the built-in slot type. Use this to specify the parent slot type of a derived slot type.
        description:
          $ref: '#/components/schemas/Description'
          description: The description of the built-in slot type.
      description: Provides summary information about a built-in slot type for the <a>ListBuiltInSlotTypes</a> operation.
    BuiltInSlotTypeSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/BuiltInSlotTypeSummary'
    BuiltInsMaxResults:
      type: integer
      minimum: 20
      maximum: 20
    ButtonText:
      type: string
      minLength: 1
      maxLength: 50
    ButtonValue:
      type: string
      minLength: 1
      maxLength: 50
    Button:
      type: object
      required:
        - text
        - value
      properties:
        text:
          $ref: '#/components/schemas/ButtonText'
          description: The text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        value:
          $ref: '#/components/schemas/ButtonValue'
          description: The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
      description: Describes a button to use on a response card used to gather slot values from a user.
    ButtonsList:
      type: array
      items:
        $ref: '#/components/schemas/Button'
      minItems: 0
      maxItems: 5
    CloudWatchLogGroupArn:
      type: string
      pattern: '^arn:[\w\-]+:logs:[\w\-]+:[\d]{12}:log-group:[\.\-_/#A-Za-z0-9]{1,512}(?::\*)?$'
      minLength: 1
      maxLength: 2048
    LogPrefix:
      type: string
      maxLength: 1024
    CloudWatchLogGroupLogDestination:
      type: object
      required:
        - cloudWatchLogGroupArn
        - logPrefix
      properties:
        cloudWatchLogGroupArn:
          $ref: '#/components/schemas/CloudWatchLogGroupArn'
          description: The Amazon Resource Name (ARN) of the log group where text and metadata logs are delivered.
        logPrefix:
          $ref: '#/components/schemas/LogPrefix'
          description: 'The prefix of the log stream name within the log group that you specified '
      description: The Amazon CloudWatch Logs log group where the text and metadata logs are delivered. The log group must exist before you enable logging.
    CodeHookInterfaceVersion:
      type: string
      minLength: 1
      maxLength: 5
    LambdaCodeHook:
      type: object
      required:
        - lambdaARN
        - codeHookInterfaceVersion
      properties:
        lambdaARN:
          $ref: '#/components/schemas/LambdaARN'
          description: The Amazon Resource Name (ARN) of the Lambda function.
        codeHookInterfaceVersion:
          $ref: '#/components/schemas/CodeHookInterfaceVersion'
          description: The version of the request-response that you want Amazon Lex to use to invoke your Lambda function.
      description: Specifies a Lambda function that verifies requests to a bot or fulfilles the user's request to a bot.
    ConditionKey:
      type: string
      minLength: 1
      maxLength: 1024
    ConditionValue:
      type: string
      minLength: 1
      maxLength: 1024
    ConditionMap:
      type: object
      minProperties: 0
      maxProperties: 10
      additionalProperties:
        $ref: '#/components/schemas/ConditionKeyValueMap'
    ConditionOperator:
      type: string
      minLength: 1
    ContextTimeToLiveInSeconds:
      type: integer
      minimum: 5
      maximum: 86400
    ContextTurnsToLive:
      type: integer
      minimum: 1
      maximum: 20
    ConversationLogSettings:
      type: object
      properties:
        textLogSettings:
          $ref: '#/components/schemas/TextLogSettingsList'
          description: The Amazon CloudWatch Logs settings for logging text and metadata.
        audioLogSettings:
          $ref: '#/components/schemas/AudioLogSettingsList'
          description: The Amazon S3 settings for logging audio to an S3 bucket.
      description: 'Configures conversation logging that saves audio, text, and metadata for the conversations with your users.'
    SentimentAnalysisSettings:
      type: object
      required:
        - detectSentiment
      properties:
        detectSentiment:
          $ref: '#/components/schemas/Boolean'
          description: Sets whether Amazon Lex uses Amazon Comprehend to detect the sentiment of user utterances.
      description: Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
    CreateBotAliasRequest:
      type: object
      required:
        - botAliasName
      title: CreateBotAliasRequest
      properties:
        botAliasName:
          $ref: '#/components/schemas/Name'
          description: The alias to create. The name must be unique for the bot.
        description:
          $ref: '#/components/schemas/Description'
          description: A description of the alias. Use this description to help identify the alias.
        botVersion:
          $ref: '#/components/schemas/NumericalBotVersion'
          description: The version of the bot that this alias points to. You can use the operation to change the bot version associated with the alias.
        botAliasLocaleSettings:
          $ref: '#/components/schemas/BotAliasLocaleSettingsMap'
          description: Maps configuration information to a specific locale. You can use this parameter to specify a specific Lambda function to run different functions in different locales.
        conversationLogSettings:
          $ref: '#/components/schemas/ConversationLogSettings'
          description: 'Specifies whether Amazon Lex logs text and audio for a conversation with the bot. When you enable conversation logs, text logs store text input, transcripts of audio input, and associated metadata in Amazon CloudWatch Logs. Audio logs store audio input in Amazon S3.'
        sentimentAnalysisSettings:
          $ref: '#/components/schemas/SentimentAnalysisSettings'
        tags:
          $ref: '#/components/schemas/TagMap'
          description: 'A list of tags to add to the bot alias. You can only add tags when you create an alias, you can''t use the <code>UpdateBotAlias</code> operation to update the tags on a bot alias. To update tags, use the <code>TagResource</code> operation.'
    CreateBotLocaleRequest:
      type: object
      required:
        - localeId
        - nluIntentConfidenceThreshold
      title: CreateBotLocaleRequest
      properties:
        localeId:
          $ref: '#/components/schemas/LocaleId'
          description: 'The identifier of the language and locale that the bot will be used in. The string must match one of the supported locales. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.'
        description:
          $ref: '#/components/schemas/Description'
          description: A description of the bot locale. Use this to help identify the bot locale in lists.
        nluIntentConfidenceThreshold:
          $ref: '#/components/schemas/ConfidenceThreshold'
          description: '<p>Determines the threshold where Amazon Lex will insert the <code>AMAZON.FallbackIntent</code>, <code>AMAZON.KendraSearchIntent</code>, or both when returning alternative intents. <code>AMAZON.FallbackIntent</code> and <code>AMAZON.KendraSearchIntent</code> are only inserted if they are configured for the bot.</p> <p>For example, suppose a bot is configured with the confidence threshold of 0.80 and the <code>AMAZON.FallbackIntent</code>. Amazon Lex returns three alternative intents with the following confidence scores: IntentA (0.70), IntentB (0.60), IntentC (0.50). The response from the PostText operation would be:</p> <ul> <li> <p>AMAZON.FallbackIntent</p> </li> <li> <p>IntentA</p> </li> <li> <p>IntentB</p> </li> <li> <p>IntentC</p> </li> </ul>'
        voiceSettings:
          $ref: '#/components/schemas/VoiceSettings'
          description: The Amazon Polly voice ID that Amazon Lex uses for voice interaction with the user.
    CreateBotRequest:
      type: object
      required:
        - botName
        - roleArn
        - dataPrivacy
        - idleSessionTTLInSeconds
      title: CreateBotRequest
      properties:
        botName:
          $ref: '#/components/schemas/Name'
          description: The name of the bot. The bot name must be unique in the account that creates the bot.
        description:
          $ref: '#/components/schemas/Description'
          description: A description of the bot. It appears in lists to help you identify a particular bot.
        roleArn:
          $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of an IAM role that has permission to access the bot.
        dataPrivacy:
          $ref: '#/components/schemas/DataPrivacy'
          description: Provides information on additional privacy protections Amazon Lex should use with the bot's data.
        idleSessionTTLInSeconds:
          $ref: '#/components/schemas/SessionTTL'
          description: '<p>The time, in seconds, that Amazon Lex should keep information about a user''s conversation with the bot. </p> <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p> <p>You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.</p>'
        botTags:
          $ref: '#/components/schemas/TagMap'
          description: 'A list of tags to add to the bot. You can only add tags when you create a bot. You can''t use the <code>UpdateBot</code> operation to update tags. To update tags, use the <code>TagResource</code> operation.'
        testBotAliasTags:
          $ref: '#/components/schemas/TagMap'
          description: 'A list of tags to add to the test alias for a bot. You can only add tags when you create a bot. You can''t use the <code>UpdateAlias</code> operation to update tags. To update tags on the test alias, use the <code>TagResource</code> operation.'
    CreateBotVersionRequest:
      type: object
      required:
        - botVersionLocaleSpecification
      title: CreateBotVersionRequest
      properties:
        description:
          $ref: '#/components/schemas/Description'
          description: A description of the version. Use the description to help identify the version in lists.
        botVersionLocaleSpecification:
          $ref: '#/components/schemas/BotVersionLocaleSpecification'
          description: 'Specifies the locales that Amazon Lex adds to this version. You can choose the <code>Draft</code> version or any other previously published version for each locale. When you specify a source version, the locale data is copied from the source version to the new version.'
    ExportResourceSpecification:
      type: object
      properties:
        botExportSpecification:
          $ref: '#/components/schemas/BotExportSpecification'
          description: Parameters for exporting a bot.
        botLocaleExportSpecification:
          $ref: '#/components/schemas/BotLocaleExportSpecification'
          description: Parameters for exporting a bot locale.
      description: 'Provides information about the bot or bot locale that you want to export. You can specify the <code>botExportSpecification</code> or the <code>botLocaleExportSpecification</code>, but not both.'
    ImportExportFileFormat:
      type: string
      enum:
        - LexJson
    ImportExportFilePassword:
      type: string
      minLength: 1
      maxLength: 1024
      format: password
    CreateExportRequest:
      type: object
      required:
        - resourceSpecification
        - fileFormat
      title: CreateExportRequest
      properties:
        resourceSpecification:
          $ref: '#/components/schemas/ExportResourceSpecification'
          description: 'Specifies the type of resource to export, either a bot or a bot locale. You can only specify one type of resource to export.'
        fileFormat:
          $ref: '#/components/schemas/ImportExportFileFormat'
          description: The file format of the bot or bot locale definition files.
        filePassword:
          $ref: '#/components/schemas/ImportExportFilePassword'
          description: 'An password to use to encrypt the exported archive. Using a password is optional, but you should encrypt the archive to protect the data in transit between Amazon Lex and your local computer.'
    ExportStatus:
      type: string
      enum:
        - InProgress
        - Completed
        - Failed
        - Deleting
    DialogCodeHookSettings:
      type: object
      required:
        - enabled
      properties:
        enabled:
          $ref: '#/components/schemas/Boolean'
          description: Enables the dialog code hook so that it processes user requests.
      description: Settings that determine the Lambda function that Amazon Lex uses for processing user responses.
    FulfillmentCodeHookSettings:
      type: object
      required:
        - enabled
      properties:
        enabled:
          $ref: '#/components/schemas/Boolean'
          description: Indicates whether a Lambda function should be invoked to fulfill a specific intent.
      description: Determines if a Lambda function should be invoked for a specific intent.
    IntentConfirmationSetting:
      type: object
      required:
        - promptSpecification
        - declinationResponse
      properties:
        promptSpecification:
          $ref: '#/components/schemas/PromptSpecification'
          description: '<p>Prompts the user to confirm the intent. This question should have a yes or no answer.</p> <p>Amazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready for fulfillment. For example, with the <code>OrderPizza</code> intent, you might want to confirm that the order is correct before placing it. For other intents, such as intents that simply respond to user questions, you might not need to ask the user for confirmation before providing the information. </p>'
        declinationResponse:
          $ref: '#/components/schemas/ResponseSpecification'
          description: 'When the user answers "no" to the question defined in <code>promptSpecification</code>, Amazon Lex responds with this response to acknowledge that the intent was canceled. '
        active:
          $ref: '#/components/schemas/BoxedBoolean'
          description: 'Specifies whether the intent''s confirmation is sent to the user. When this field is false, confirmation and declination responses aren''t sent and processing continues as if the responses aren''t present. If the <code>active</code> field isn''t specified, the default is true.'
      description: Provides a prompt for making sure that the user is ready for the intent to be fulfilled.
    IntentClosingSetting:
      type: object
      required:
        - closingResponse
      properties:
        closingResponse:
          $ref: '#/components/schemas/ResponseSpecification'
          description: The response that Amazon Lex sends to the user when the intent is complete.
        active:
          $ref: '#/components/schemas/BoxedBoolean'
          description: 'Specifies whether an intent''s closing response is used. When this field is false, the closing response isn''t sent to the user and no closing input from the user is used. If the <code>active</code> field isn''t specified, the default is true.'
      description: Provides a statement the Amazon Lex conveys to the user when the intent is successfully fulfilled.
    InputContextsList:
      type: array
      items:
        $ref: '#/components/schemas/InputContext'
      minItems: 0
      maxItems: 5
    OutputContextsList:
      type: array
      items:
        $ref: '#/components/schemas/OutputContext'
      minItems: 0
      maxItems: 10
    KendraConfiguration:
      type: object
      required:
        - kendraIndex
      properties:
        kendraIndex:
          $ref: '#/components/schemas/KendraIndexArn'
          description: The Amazon Resource Name (ARN) of the Amazon Kendra index that you want the AMAZON.KendraSearchIntent intent to search. The index must be in the same account and Region as the Amazon Lex bot.
        queryFilterStringEnabled:
          $ref: '#/components/schemas/Boolean'
          description: Determines whether the AMAZON.KendraSearchIntent intent uses a custom query string to query the Amazon Kendra index.
        queryFilterString:
          $ref: '#/components/schemas/QueryFilterString'
          description: 'A query filter that Amazon Lex sends to Amazon Kendra to filter the response from a query. The filter is in the format defined by Amazon Kendra. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/filtering.html">Filtering queries</a>.'
      description: 'Provides configuration information for the AMAZON.KendraSearchIntent intent. When you use this intent, Amazon Lex searches the specified Amazon Kendra index and returns documents from the index that match the user''s utterance.'
    CreateIntentRequest:
      type: object
      required:
        - intentName
      title: CreateIntentRequest
      properties:
        intentName:
          $ref: '#/components/schemas/Name'
          description: The name of the intent. Intent names must be unique in the locale that contains the intent and cannot match the name of any built-in intent.
        description:
          $ref: '#/components/schemas/Description'
          description: A description of the intent. Use the description to help identify the intent in lists.
        parentIntentSignature:
          $ref: '#/components/schemas/IntentSignature'
          description: A unique identifier for the built-in intent to base this intent on.
        sampleUtterances:
          $ref: '#/components/schemas/SampleUtterancesList'
          description: '<p>An array of strings that a user might say to signal the intent. For example, "I want a pizza", or "I want a {PizzaSize} pizza". </p> <p>In an utterance, slot names are enclosed in curly braces ("{", "}") to indicate where they should be displayed in the utterance shown to the user.. </p>'
        dialogCodeHook:
          $ref: '#/components/schemas/DialogCodeHookSettings'
          description: '<p>Specifies that Amazon Lex invokes the alias Lambda function for each user input. You can invoke this Lambda function to personalize user interaction.</p> <p>For example, suppose that your bot determines that the user''s name is John. You Lambda function might retrieve John''s information from a backend database and prepopulate some of the values. For example, if you find that John is gluten intolerant, you might set the corresponding intent slot, <code>glutenIntolerant</code> to <code>true</code>. You might find John''s phone number and set the corresponding session attribute.</p>'
        fulfillmentCodeHook:
          $ref: '#/components/schemas/FulfillmentCodeHookSettings'
          description: '<p>Specifies that Amazon Lex invokes the alias Lambda function when the intent is ready for fulfillment. You can invoke this function to complete the bot''s transaction with the user.</p> <p>For example, in a pizza ordering bot, the Lambda function can look up the closest pizza restaurant to the customer''s location and then place an order on the customer''s behalf.</p>'
        intentConfirmationSetting:
          $ref: '#/components/schemas/IntentConfirmationSetting'
          description: 'Provides prompts that Amazon Lex sends to the user to confirm the completion of an intent. If the user answers "no," the settings contain a statement that is sent to the user to end the intent.'
        intentClosingSetting:
          $ref: '#/components/schemas/IntentClosingSetting'
          description: Sets the response that Amazon Lex sends to the user when the intent is closed.
        inputContexts:
          $ref: '#/components/schemas/InputContextsList'
          description: '<p>A list of contexts that must be active for this intent to be considered by Amazon Lex.</p> <p>When an intent has an input context list, Amazon Lex only considers using the intent in an interaction with the user when the specified contexts are included in the active context list for the session. If the contexts are not active, then Amazon Lex will not use the intent.</p> <p>A context can be automatically activated using the <code>outputContexts</code> property or it can be set at runtime.</p> <p> For example, if there are two intents with different input contexts that respond to the same utterances, only the intent with the active context will respond.</p> <p>An intent may have up to 5 input contexts. If an intent has multiple input contexts, all of the contexts must be active to consider the intent.</p>'
        outputContexts:
          $ref: '#/components/schemas/OutputContextsList'
          description: '<p>A lists of contexts that the intent activates when it is fulfilled.</p> <p>You can use an output context to indicate the intents that Amazon Lex should consider for the next turn of the conversation with a customer. </p> <p>When you use the <code>outputContextsList</code> property, all of the contexts specified in the list are activated when the intent is fulfilled. You can set up to 10 output contexts. You can also set the number of conversation turns that the context should be active, or the length of time that the context should be active.</p>'
        kendraConfiguration:
          $ref: '#/components/schemas/KendraConfiguration'
          description: Configuration information required to use the <code>AMAZON.KendraSearchIntent</code> intent to connect to an Amazon Kendra index. The <code>AMAZON.KendraSearchIntent</code> intent is called when Amazon Lex can't determine another intent to invoke.
    Policy:
      type: string
      minLength: 2
    CreateResourcePolicyRequest:
      type: object
      required:
        - policy
      title: CreateResourcePolicyRequest
      properties:
        policy:
          $ref: '#/components/schemas/Policy'
          description: '<p>A resource policy to add to the resource. The policy is a JSON structure that contains one or more statements that define the policy. The policy must follow the IAM syntax. For more information about the contents of a JSON policy document, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html"> IAM JSON policy reference </a>. </p> <p>If the policy isn''t valid, Amazon Lex returns a validation exception.</p>'
    RevisionId:
      type: string
      pattern: '^[0-9]+$'
      minLength: 1
      maxLength: 5
    Effect:
      type: string
      enum:
        - Allow
        - Deny
    PrincipalList:
      type: array
      items:
        $ref: '#/components/schemas/Principal'
    OperationList:
      type: array
      items:
        $ref: '#/components/schemas/Operation'
    CreateResourcePolicyStatementRequest:
      type: object
      required:
        - statementId
        - effect
        - principal
        - action
      title: CreateResourcePolicyStatementRequest
      properties:
        statementId:
          $ref: '#/components/schemas/Name'
          description: 'The name of the statement. The ID is the same as the <code>Sid</code> IAM property. The statement name must be unique within the policy. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_sid.html">IAM JSON policy elements: Sid</a>. '
        effect:
          $ref: '#/components/schemas/Effect'
          description: Determines whether the statement allows or denies access to the resource.
        principal:
          $ref: '#/components/schemas/PrincipalList'
          description: 'An IAM principal, such as an IAM users, IAM roles, or AWS services that is allowed or denied access to a resource. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html">AWS JSON policy elements: Principal</a>.'
        action:
          $ref: '#/components/schemas/OperationList'
          description: 'The Amazon Lex action that this policy either allows or denies. The action must apply to the resource type of the specified ARN. For more information, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazonlexv2.html"> Actions, resources, and condition keys for Amazon Lex V2</a>.'
        condition:
          $ref: '#/components/schemas/ConditionMap'
          description: '<p>Specifies a condition when the policy is in effect. If the principal of the policy is a service principal, you must provide two condition blocks, one with a SourceAccount global condition key and one with a SourceArn global condition key.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html">IAM JSON policy elements: Condition </a>.</p>'
    SlotValueElicitationSetting:
      type: object
      required:
        - slotConstraint
      properties:
        defaultValueSpecification:
          $ref: '#/components/schemas/SlotDefaultValueSpecification'
          description: 'A list of default values for a slot. Default values are used when Amazon Lex hasn''t determined a value for a slot. You can specify default values from context variables, sesion attributes, and defined values.'
        slotConstraint:
          $ref: '#/components/schemas/SlotConstraint'
          description: Specifies whether the slot is required or optional.
        promptSpecification:
          $ref: '#/components/schemas/PromptSpecification'
          description: The prompt that Amazon Lex uses to elicit the slot value from the user.
        sampleUtterances:
          $ref: '#/components/schemas/SampleUtterancesList'
          description: 'If you know a specific pattern that users might respond to an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy. This is optional. In most cases, Amazon Lex is capable of understanding user utterances.'
        waitAndContinueSpecification:
          $ref: '#/components/schemas/WaitAndContinueSpecification'
      description: Settings that you can use for eliciting a slot value.
    ObfuscationSetting:
      type: object
      required:
        - obfuscationSettingType
      properties:
        obfuscationSettingType:
          $ref: '#/components/schemas/ObfuscationSettingType'
          description: Value that determines whether Amazon Lex obscures slot values in conversation logs. The default is to obscure the values.
      description: 'Determines whether Amazon Lex obscures slot values in conversation logs. '
    MultipleValuesSetting:
      type: object
      properties:
        allowMultipleValues:
          $ref: '#/components/schemas/Boolean'
          description: '<p>Indicates whether a slot can return multiple values. When <code>true</code>, the slot may return more than one value in a response. When <code>false</code>, the slot returns only a single value.</p> <p>Multi-value slots are only available in the en-US locale. If you set this value to <code>true</code> in any other locale, Amazon Lex throws a <code>ValidationException</code>.</p> <p>If the <code>allowMutlipleValues</code> is not set, the default value is <code>false</code>.</p>'
      description: Indicates whether a slot can return multiple values.
    CreateSlotRequest:
      type: object
      required:
        - slotName
        - slotTypeId
        - valueElicitationSetting
      title: CreateSlotRequest
      properties:
        slotName:
          $ref: '#/components/schemas/Name'
          description: The name of the slot. Slot names must be unique within the bot that contains the slot.
        description:
          $ref: '#/components/schemas/Description'
          description: A description of the slot. Use this to help identify the slot in lists.
        slotTypeId:
          $ref: '#/components/schemas/BuiltInOrCustomSlotTypeId'
          description: The unique identifier for the slot type associated with this slot. The slot type determines the values that can be entered into the slot.
        valueElicitationSetting:
          $ref: '#/components/schemas/SlotValueElicitationSetting'
          description: 'Specifies prompts that Amazon Lex sends to the user to elicit a response that provides the value for the slot. '
        obfuscationSetting:
          $ref: '#/components/schemas/ObfuscationSetting'
          description: '<p>Determines how slot values are used in Amazon CloudWatch logs. If the value of the <code>obfuscationSetting</code> parameter is <code>DefaultObfuscation</code>, slot values are obfuscated in the log output. If the value is <code>None</code>, the actual value is present in the log output.</p> <p>The default is to obfuscate values in the CloudWatch logs.</p>'
        multipleValuesSetting:
          $ref: '#/components/schemas/MultipleValuesSetting'
          description: '<p>Indicates whether the slot returns multiple values in one response. Multi-value slots are only available in the en-US locale. If you set this value to <code>true</code> in any other locale, Amazon Lex throws a <code>ValidationException</code>. </p> <p>If the <code>multipleValuesSetting</code> is not set, the default value is <code>false</code>.</p>'
    SlotTypeValues:
      type: array
      items:
        $ref: '#/components/schemas/SlotTypeValue'
      minItems: 1
      maxItems: 10000
    SlotValueSelectionSetting:
      type: object
      required:
        - resolutionStrategy
      properties:
        resolutionStrategy:
          $ref: '#/components/schemas/SlotValueResolutionStrategy'
          description: '<p>Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values:</p> <ul> <li> <p>OriginalValue - Returns the value entered by the user, if the user value is similar to the slot value.</p> </li> <li> <p>TopResolution - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned.</p> </li> </ul> <p>If you don''t specify the valueSelectionStrategy, the default is OriginalValue. </p>'
        regexFilter:
          $ref: '#/components/schemas/SlotValueRegexFilter'
          description: A regular expression used to validate the value of a slot.
      description: Contains settings used by Amazon Lex to select a slot value.
    CreateSlotTypeRequest:
      type: object
      required:
        - slotTypeName
        - valueSelectionSetting
      title: CreateSlotTypeRequest
      properties:
        slotTypeName:
          $ref: '#/components/schemas/Name'
          description: The name for the slot. A slot type name must be unique within the account.
        description:
          $ref: '#/components/schemas/Description'
          description: A description of the slot type. Use the description to help identify the slot type in lists.
        slotTypeValues:
          $ref: '#/components/schemas/SlotTypeValues'
          description: 'A list of <code>SlotTypeValue</code> objects that defines the values that the slot type can take. Each value can have a list of synonyms, additional values that help train the machine learning model about the values that it resolves for a slot.'
        valueSelectionSetting:
          $ref: '#/components/schemas/SlotValueSelectionSetting'
          description: '<p>Determines the strategy that Amazon Lex uses to select a value from the list of possible values. The field can be set to one of the following values:</p> <ul> <li> <p> <code>OriginalValue</code> - Returns the value entered by the user, if the user value is similar to the slot value.</p> </li> <li> <p> <code>TopResolution</code> - If there is a resolution list for the slot, return the first value in the resolution list. If there is no resolution list, return null.</p> </li> </ul> <p>If you don''t specify the <code>valueSelectionSetting</code> parameter, the default is <code>OriginalValue</code>.</p>'
        parentSlotTypeSignature:
          $ref: '#/components/schemas/SlotTypeSignature'
          description: '<p>The built-in slot type used as a parent of this slot type. When you define a parent slot type, the new slot type has the configuration of the parent slot type.</p> <p>Only <code>AMAZON.AlphaNumeric</code> is supported.</p>'
    CreateUploadUrlRequest:
      type: object
      title: CreateUploadUrlRequest
      properties: {}
    PresignedS3Url:
      type: string
      minLength: 1
      maxLength: 1024
    CustomPayloadValue:
      type: string
      minLength: 1
      maxLength: 1000
    CustomPayload:
      type: object
      required:
        - value
      properties:
        value:
          $ref: '#/components/schemas/CustomPayloadValue'
          description: The string that is sent to your application.
      description: A custom response string that Amazon Lex sends to your application. You define the content and structure the string.
    SkipResourceInUseCheck:
      type: boolean
    DeleteBotAliasRequest:
      type: object
      title: DeleteBotAliasRequest
      properties: {}
    DeleteBotLocaleRequest:
      type: object
      title: DeleteBotLocaleRequest
      properties: {}
    DeleteBotRequest:
      type: object
      title: DeleteBotRequest
      properties: {}
    DeleteBotVersionRequest:
      type: object
      title: DeleteBotVersionRequest
      properties: {}
    DeleteExportRequest:
      type: object
      title: DeleteExportRequest
      properties: {}
    DeleteImportRequest:
      type: object
      title: DeleteImportRequest
      properties: {}
    ImportStatus:
      type: string
      enum:
        - InProgress
        - Completed
        - Failed
        - Deleting
    DeleteIntentRequest:
      type: object
      title: DeleteIntentRequest
      properties: {}
    DeleteResourcePolicyRequest:
      type: object
      title: DeleteResourcePolicyRequest
      properties: {}
    DeleteResourcePolicyStatementRequest:
      type: object
      title: DeleteResourcePolicyStatementRequest
      properties: {}
    DeleteSlotRequest:
      type: object
      title: DeleteSlotRequest
      properties: {}
    DeleteSlotTypeRequest:
      type: object
      title: DeleteSlotTypeRequest
      properties: {}
    DescribeBotAliasRequest:
      type: object
      title: DescribeBotAliasRequest
      properties: {}
    DescribeBotLocaleRequest:
      type: object
      title: DescribeBotLocaleRequest
      properties: {}
    ResourceCount:
      type: integer
    FailureReasons:
      type: array
      items:
        $ref: '#/components/schemas/FailureReason'
    DescribeBotRequest:
      type: object
      title: DescribeBotRequest
      properties: {}
    DescribeBotVersionRequest:
      type: object
      title: DescribeBotVersionRequest
      properties: {}
    DescribeExportRequest:
      type: object
      title: DescribeExportRequest
      properties: {}
    DescribeImportRequest:
      type: object
      title: DescribeImportRequest
      properties: {}
    ImportResourceSpecification:
      type: object
      properties:
        botImportSpecification:
          $ref: '#/components/schemas/BotImportSpecification'
          description: Parameters for importing a bot.
        botLocaleImportSpecification:
          $ref: '#/components/schemas/BotLocaleImportSpecification'
          description: Parameters for importing a bot locale.
      description: 'Provides information about the bot or bot locale that you want to import. You can sepcifiy the <code>botImportSpecification</code> or the <code>botLocaleImportSpecification</code>, but not both.'
    ImportedResourceId:
      type: string
      pattern: '^([0-9a-zA-Z_])+$'
      minLength: 5
      maxLength: 10
    MergeStrategy:
      type: string
      enum:
        - Overwrite
        - FailOnConflict
    DescribeIntentRequest:
      type: object
      title: DescribeIntentRequest
      properties: {}
    SlotPrioritiesList:
      type: array
      items:
        $ref: '#/components/schemas/SlotPriority'
    DescribeResourcePolicyRequest:
      type: object
      title: DescribeResourcePolicyRequest
      properties: {}
    DescribeSlotRequest:
      type: object
      title: DescribeSlotRequest
      properties: {}
    DescribeSlotTypeRequest:
      type: object
      title: DescribeSlotTypeRequest
      properties: {}
    ExportFilterName:
      type: string
      enum:
        - ExportResourceType
    ExportFilterOperator:
      type: string
      enum:
        - CO
        - EQ
    ExportFilters:
      type: array
      items:
        $ref: '#/components/schemas/ExportFilter'
      minItems: 1
      maxItems: 1
    ExportSortBy:
      type: object
      required:
        - attribute
        - order
      properties:
        attribute:
          $ref: '#/components/schemas/ExportSortAttribute'
          description: The export field to use for sorting.
        order:
          $ref: '#/components/schemas/SortOrder'
          description: The order to sort the list.
      description: Provides information about sorting a list of exports.
    ExportSummary:
      type: object
      properties:
        exportId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier that Amazon Lex assigned to the export.
        resourceSpecification:
          $ref: '#/components/schemas/ExportResourceSpecification'
          description: Information about the bot or bot locale that was exported.
        fileFormat:
          $ref: '#/components/schemas/ImportExportFileFormat'
          description: The file format used in the export files.
        exportStatus:
          $ref: '#/components/schemas/ExportStatus'
          description: The status of the export. When the status is <code>Completed</code> the export is ready to download.
        creationDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: The date and time that the export was created.
        lastUpdatedDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: The date and time that the export was last updated.
      description: 'Provides summary information about an export in an export list. '
    ExportSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/ExportSummary'
    FailureReason:
      type: string
    FilterValue:
      type: string
      pattern: '^[0-9a-zA-Z_()\s-]+$'
      minLength: 1
      maxLength: 100
    ImageResponseCard:
      type: object
      required:
        - title
      properties:
        title:
          $ref: '#/components/schemas/AttachmentTitle'
          description: The title to display on the response card. The format of the title is determined by the platform displaying the response card.
        subtitle:
          $ref: '#/components/schemas/AttachmentTitle'
          description: The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        imageUrl:
          $ref: '#/components/schemas/AttachmentUrl'
          description: The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        buttons:
          $ref: '#/components/schemas/ButtonsList'
          description: A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.
      description: '<p>A card that is shown to the user by a messaging platform. You define the contents of the card, the card is displayed by the platform. </p> <p>When you use a response card, the response from the user is constrained to the text associated with a button on the card.</p>'
    ImportFilterName:
      type: string
      enum:
        - ImportResourceType
    ImportFilterOperator:
      type: string
      enum:
        - CO
        - EQ
    ImportFilters:
      type: array
      items:
        $ref: '#/components/schemas/ImportFilter'
      minItems: 1
      maxItems: 1
    ImportSortBy:
      type: object
      required:
        - attribute
        - order
      properties:
        attribute:
          $ref: '#/components/schemas/ImportSortAttribute'
          description: The export field to use for sorting.
        order:
          $ref: '#/components/schemas/SortOrder'
          description: The order to sort the list.
      description: Provides information for sorting a list of imports.
    ImportSummary:
      type: object
      properties:
        importId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier that Amazon Lex assigned to the import.
        importedResourceId:
          $ref: '#/components/schemas/ImportedResourceId'
          description: The unique identifier that Amazon Lex assigned to the imported resource.
        importedResourceName:
          $ref: '#/components/schemas/Name'
          description: The name that you gave the imported resource.
        importStatus:
          $ref: '#/components/schemas/ImportStatus'
          description: The status of the resource. When the status is <code>Completed</code> the resource is ready to build.
        mergeStrategy:
          $ref: '#/components/schemas/MergeStrategy'
          description: The strategy used to merge existing bot or bot locale definitions with the imported definition.
        creationDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: The date and time that the import was created.
        lastUpdatedDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: The date and time that the import was last updated.
      description: Provides summary information about an import in an import list.
    ImportSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/ImportSummary'
    IntentFilterName:
      type: string
      enum:
        - IntentName
    IntentFilterOperator:
      type: string
      enum:
        - CO
        - EQ
    IntentFilters:
      type: array
      items:
        $ref: '#/components/schemas/IntentFilter'
      minItems: 1
      maxItems: 1
    IntentSortBy:
      type: object
      required:
        - attribute
        - order
      properties:
        attribute:
          $ref: '#/components/schemas/IntentSortAttribute'
          description: The attribute to use to sort the list of intents.
        order:
          $ref: '#/components/schemas/SortOrder'
          description: The order to sort the list. You can choose ascending or descending.
      description: Specifies attributes for sorting a list of intents.
    IntentSummary:
      type: object
      properties:
        intentId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier assigned to the intent. Use this ID to get detailed information about the intent with the <code>DescribeIntent</code> operation.
        intentName:
          $ref: '#/components/schemas/Name'
          description: The name of the intent.
        description:
          $ref: '#/components/schemas/Description'
          description: The description of the intent.
        parentIntentSignature:
          $ref: '#/components/schemas/IntentSignature'
          description: 'If this intent is derived from a built-in intent, the name of the parent intent.'
        inputContexts:
          $ref: '#/components/schemas/InputContextsList'
          description: The input contexts that must be active for this intent to be considered for recognition.
        outputContexts:
          $ref: '#/components/schemas/OutputContextsList'
          description: The output contexts that are activated when this intent is fulfilled.
        lastUpdatedDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: The timestamp of the date and time that the intent was last updated.
      description: Summary information about an intent returned by the <code>ListIntents</code> operation.
    IntentSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/IntentSummary'
    KmsKeyArn:
      type: string
      pattern: '^arn:[\w\-]+:kms:[\w\-]+:[\d]{12}:(?:key\/[\w\-]+|alias\/[a-zA-Z0-9:\/_\-]{1,256})$'
      minLength: 20
      maxLength: 2048
    LambdaARN:
      type: string
      pattern: 'arn:aws:lambda:[a-z]+-[a-z]+-[0-9]:[0-9]{12}:function:[a-zA-Z0-9-_]+(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?(:[a-zA-Z0-9-_]+)?'
      minLength: 20
      maxLength: 2048
    MaxResults:
      type: integer
      minimum: 1
      maximum: 1000
    NextToken:
      type: string
    ListBotAliasesRequest:
      type: object
      title: ListBotAliasesRequest
      properties:
        maxResults:
          $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of aliases to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'If the response from the <code>ListBotAliases</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.'
    ListBotLocalesRequest:
      type: object
      title: ListBotLocalesRequest
      properties:
        sortBy:
          $ref: '#/components/schemas/BotLocaleSortBy'
          description: Specifies sorting parameters for the list of locales. You can sort by locale name in ascending or descending order.
        filters:
          $ref: '#/components/schemas/BotLocaleFilters'
          description: Provides the specification for a filter used to limit the response to only those locales that match the filter specification. You can only specify one filter and one value to filter on.
        maxResults:
          $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of aliases to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'If the response from the <code>ListBotLocales</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token as the <code>nextToken</code> parameter to return the next page of results. '
    ListBotVersionsRequest:
      type: object
      title: ListBotVersionsRequest
      properties:
        sortBy:
          $ref: '#/components/schemas/BotVersionSortBy'
          description: Specifies sorting parameters for the list of versions. You can specify that the list be sorted by version name in either ascending or descending order.
        maxResults:
          $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of versions to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'If the response to the <code>ListBotVersion</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.'
    ListBotsRequest:
      type: object
      title: ListBotsRequest
      properties:
        sortBy:
          $ref: '#/components/schemas/BotSortBy'
          description: Specifies sorting parameters for the list of bots. You can specify that the list be sorted by bot name in ascending or descending order.
        filters:
          $ref: '#/components/schemas/BotFilters'
          description: Provides the specification of a filter used to limit the bots in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.
        maxResults:
          $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of bots to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'If the response from the <code>ListBots</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.'
    ListBuiltInIntentsRequest:
      type: object
      title: ListBuiltInIntentsRequest
      properties:
        sortBy:
          $ref: '#/components/schemas/BuiltInIntentSortBy'
          description: Specifies sorting parameters for the list of built-in intents. You can specify that the list be sorted by the built-in intent signature in either ascending or descending order.
        maxResults:
          $ref: '#/components/schemas/BuiltInsMaxResults'
          description: 'The maximum number of built-in intents to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'If the response from the <code>ListBuiltInIntents</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.'
    ListBuiltInSlotTypesRequest:
      type: object
      title: ListBuiltInSlotTypesRequest
      properties:
        sortBy:
          $ref: '#/components/schemas/BuiltInSlotTypeSortBy'
          description: Determines the sort order for the response from the <code>ListBuiltInSlotTypes</code> operation. You can choose to sort by the slot type signature in either ascending or descending order.
        maxResults:
          $ref: '#/components/schemas/BuiltInsMaxResults'
          description: 'The maximum number of built-in slot types to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'If the response from the <code>ListBuiltInSlotTypes</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.'
    ListExportsRequest:
      type: object
      title: ListExportsRequest
      properties:
        botId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier that Amazon Lex assigned to the bot.
        botVersion:
          $ref: '#/components/schemas/BotVersion'
          description: 'The version of the bot to list exports for. '
        sortBy:
          $ref: '#/components/schemas/ExportSortBy'
          description: Determines the field that the list of exports is sorted by. You can sort by the <code>LastUpdatedDateTime</code> field in ascending or descending order.
        filters:
          $ref: '#/components/schemas/ExportFilters'
          description: Provides the specification of a filter used to limit the exports in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.
        maxResults:
          $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of exports to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'If the response from the <code>ListExports</code> operation contans more results that specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.'
    ListImportsRequest:
      type: object
      title: ListImportsRequest
      properties:
        botId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier that Amazon Lex assigned to the bot.
        botVersion:
          $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot to list imports for.
        sortBy:
          $ref: '#/components/schemas/ImportSortBy'
          description: Determines the field that the list of imports is sorted by. You can sort by the <code>LastUpdatedDateTime</code> field in ascending or descending order.
        filters:
          $ref: '#/components/schemas/ImportFilters'
          description: Provides the specification of a filter used to limit the bots in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.
        maxResults:
          $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of imports to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'If the response from the <code>ListImports</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.'
    ListIntentsRequest:
      type: object
      title: ListIntentsRequest
      properties:
        sortBy:
          $ref: '#/components/schemas/IntentSortBy'
          description: Determines the sort order for the response from the <code>ListIntents</code> operation. You can choose to sort by the intent name or last updated date in either ascending or descending order.
        filters:
          $ref: '#/components/schemas/IntentFilters'
          description: Provides the specification of a filter used to limit the intents in the response to only those that match the filter specification. You can only specify one filter and only one string to filter on.
        maxResults:
          $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of intents to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'If the response from the <code>ListIntents</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.'
    SlotTypeSortBy:
      type: object
      required:
        - attribute
        - order
      properties:
        attribute:
          $ref: '#/components/schemas/SlotTypeSortAttribute'
          description: The attribute to use to sort the list of slot types.
        order:
          $ref: '#/components/schemas/SortOrder'
          description: The order to sort the list. You can say ascending or descending.
      description: Specifies attributes for sorting a list of slot types.
    SlotTypeFilters:
      type: array
      items:
        $ref: '#/components/schemas/SlotTypeFilter'
      minItems: 1
      maxItems: 1
    ListSlotTypesRequest:
      type: object
      title: ListSlotTypesRequest
      properties:
        sortBy:
          $ref: '#/components/schemas/SlotTypeSortBy'
          description: Determines the sort order for the response from the <code>ListSlotTypes</code> operation. You can choose to sort by the slot type name or last updated date in either ascending or descending order.
        filters:
          $ref: '#/components/schemas/SlotTypeFilters'
          description: Provides the specification of a filter used to limit the slot types in the response to only those that match the filter specification. You can only specify one filter and only one string to filter on.
        maxResults:
          $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of slot types to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'If the response from the <code>ListSlotTypes</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.'
    SlotTypeSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/SlotTypeSummary'
    SlotSortBy:
      type: object
      required:
        - attribute
        - order
      properties:
        attribute:
          $ref: '#/components/schemas/SlotSortAttribute'
          description: The attribute to use to sort the list.
        order:
          $ref: '#/components/schemas/SortOrder'
          description: The order to sort the list. You can choose ascending or descending.
      description: Specifies attributes for sorting a list of bots.
    SlotFilters:
      type: array
      items:
        $ref: '#/components/schemas/SlotFilter'
      minItems: 1
      maxItems: 1
    ListSlotsRequest:
      type: object
      title: ListSlotsRequest
      properties:
        sortBy:
          $ref: '#/components/schemas/SlotSortBy'
          description: Determines the sort order for the response from the <code>ListSlots</code> operation. You can choose to sort by the slot name or last updated date in either ascending or descending order.
        filters:
          $ref: '#/components/schemas/SlotFilters'
          description: Provides the specification of a filter used to limit the slots in the response to only those that match the filter specification. You can only specify one filter and only one string to filter on.
        maxResults:
          $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of slots to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'If the response from the <code>ListSlots</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.'
    SlotSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/SlotSummary'
    ListTagsForResourceRequest:
      type: object
      title: ListTagsForResourceRequest
      properties: {}
    PlainTextMessage:
      type: object
      required:
        - value
      properties:
        value:
          $ref: '#/components/schemas/PlainTextMessageValue'
          description: The message to send to the user.
      description: Defines an ASCII text message to send to the user.
    SSMLMessage:
      type: object
      required:
        - value
      properties:
        value:
          $ref: '#/components/schemas/SSMLMessageValue'
          description: The SSML text that defines the prompt.
      description: Defines a Speech Synthesis Markup Language (SSML) prompt.
    Message:
      type: object
      properties:
        plainTextMessage:
          $ref: '#/components/schemas/PlainTextMessage'
          description: A message in plain text format.
        customPayload:
          $ref: '#/components/schemas/CustomPayload'
          description: A message in a custom format defined by the client application.
        ssmlMessage:
          $ref: '#/components/schemas/SSMLMessage'
          description: A message in Speech Synthesis Markup Language (SSML).
        imageResponseCard:
          $ref: '#/components/schemas/ImageResponseCard'
          description: A message that defines a response card that the client application can show to the user.
      description: The object that provides message text and it's type.
    MessageVariationsList:
      type: array
      items:
        $ref: '#/components/schemas/Message'
      minItems: 0
      maxItems: 2
    MessageGroup:
      type: object
      required:
        - message
      properties:
        message:
          $ref: '#/components/schemas/Message'
          description: The primary message that Amazon Lex should send to the user.
        variations:
          $ref: '#/components/schemas/MessageVariationsList'
          description: 'Message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.'
      description: Provides one or more messages that Amazon Lex should send to the user.
    MessageGroupsList:
      type: array
      items:
        $ref: '#/components/schemas/MessageGroup'
      minItems: 1
      maxItems: 5
    PlainTextMessageValue:
      type: string
      minLength: 1
      maxLength: 1000
    ServicePrincipal:
      type: string
      pattern: '^[0-9a-zA-Z_.]+$'
      minLength: 15
      maxLength: 1024
    PrincipalArn:
      type: string
      pattern: '^arn:aws:iam::[0-9]{12}:(root|(user|role)/.*)$'
      minLength: 30
      maxLength: 1024
    PriorityValue:
      type: integer
      minimum: 0
      maximum: 100
    PromptMaxRetries:
      type: integer
      minimum: 0
      maximum: 5
    RegexPattern:
      type: string
      minLength: 1
      maxLength: 100
    S3BucketArn:
      type: string
      pattern: '^arn:[\w\-]+:s3:::[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]$'
      minLength: 1
      maxLength: 2048
    SSMLMessageValue:
      type: string
      minLength: 1
      maxLength: 1000
    Utterance:
      type: string
    Value:
      type: string
      minLength: 1
      maxLength: 140
    SampleValue:
      type: object
      required:
        - value
      properties:
        value:
          $ref: '#/components/schemas/Value'
          description: The value that can be used for a slot type.
      description: Defines one of the values for a slot type.
    SlotDefaultValueString:
      type: string
      minLength: 1
      maxLength: 202
    SlotDefaultValue:
      type: object
      required:
        - defaultValue
      properties:
        defaultValue:
          $ref: '#/components/schemas/SlotDefaultValueString'
          description: The default value to use when a user doesn't provide a value for a slot.
      description: Specifies the default value to use when a user doesn't provide a value for a slot.
    SlotDefaultValueList:
      type: array
      items:
        $ref: '#/components/schemas/SlotDefaultValue'
      minItems: 0
      maxItems: 10
    SlotFilterName:
      type: string
      enum:
        - SlotName
    SlotFilterOperator:
      type: string
      enum:
        - CO
        - EQ
    SlotSummary:
      type: object
      properties:
        slotId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier of the slot.
        slotName:
          $ref: '#/components/schemas/Name'
          description: The name given to the slot.
        description:
          $ref: '#/components/schemas/Description'
          description: The description of the slot.
        slotConstraint:
          $ref: '#/components/schemas/SlotConstraint'
          description: Whether the slot is required or optional. An intent is complete when all required slots are filled.
        slotTypeId:
          $ref: '#/components/schemas/BuiltInOrCustomSlotTypeId'
          description: The unique identifier for the slot type that defines the values for the slot.
        valueElicitationPromptSpecification:
          $ref: '#/components/schemas/PromptSpecification'
          description: Prompts that are sent to the user to elicit a value for the slot.
        lastUpdatedDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: The timestamp of the last date and time that the slot was updated.
      description: 'Summary information about a slot, a value that the bot elicits from the user.'
    SlotTypeFilterName:
      type: string
      enum:
        - SlotTypeName
    SlotTypeFilterOperator:
      type: string
      enum:
        - CO
        - EQ
    SlotTypeSummary:
      type: object
      properties:
        slotTypeId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier assigned to the slot type.
        slotTypeName:
          $ref: '#/components/schemas/Name'
          description: The name of the slot type.
        description:
          $ref: '#/components/schemas/Description'
          description: The description of the slot type.
        parentSlotTypeSignature:
          $ref: '#/components/schemas/SlotTypeSignature'
          description: 'If the slot type is derived from a built-on slot type, the name of the parent slot type.'
        lastUpdatedDateTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the slot type was last updated.
      description: Provides summary information about a slot type.
    SynonymList:
      type: array
      items:
        $ref: '#/components/schemas/SampleValue'
      minItems: 1
      maxItems: 10000
    StartImportRequest:
      type: object
      required:
        - importId
        - resourceSpecification
        - mergeStrategy
      title: StartImportRequest
      properties:
        importId:
          $ref: '#/components/schemas/Id'
          description: The unique identifier for the import. It is included in the response from the operation.
        resourceSpecification:
          $ref: '#/components/schemas/ImportResourceSpecification'
          description: Parameters for creating the bot or bot locale.
        mergeStrategy:
          $ref: '#/components/schemas/MergeStrategy'
          description: The strategy to use when there is a name conflict between the imported resource and an existing resource. When the merge strategy is <code>FailOnConflict</code> existing resources are not overwritten and the import fails.
        filePassword:
          $ref: '#/components/schemas/ImportExportFilePassword'
          description: The password used to encrypt the zip archive that contains the bot or bot locale definition. You should always encrypt the zip archive to protect it during transit between your site and Amazon Lex.
    StillWaitingResponseFrequency:
      type: integer
      minimum: 1
      maximum: 300
    StillWaitingResponseTimeout:
      type: integer
      minimum: 1
      maximum: 900
    StillWaitingResponseSpecification:
      type: object
      required:
        - messageGroups
        - frequencyInSeconds
        - timeoutInSeconds
      properties:
        messageGroups:
          $ref: '#/components/schemas/MessageGroupsList'
          description: 'One or more message groups, each containing one or more messages, that define the prompts that Amazon Lex sends to the user.'
        frequencyInSeconds:
          $ref: '#/components/schemas/StillWaitingResponseFrequency'
          description: 'How often a message should be sent to the user. Minimum of 1 second, maximum of 5 minutes.'
        timeoutInSeconds:
          $ref: '#/components/schemas/StillWaitingResponseTimeout'
          description: 'If Amazon Lex waits longer than this length of time for a response, it will stop sending messages.'
        allowInterrupt:
          $ref: '#/components/schemas/BoxedBoolean'
          description: Indicates that the user can interrupt the response by speaking while the message is being played.
      description: Defines the messages that Amazon Lex sends to a user to remind them that the bot is waiting for a response.
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
      minItems: 0
      maxItems: 200
    TagResourceRequest:
      type: object
      required:
        - tags
      title: TagResourceRequest
      properties:
        tags:
          $ref: '#/components/schemas/TagMap'
          description: 'A list of tag keys to add to the resource. If a tag key already exists, the existing value is replaced with the new value.'
    TextLogDestination:
      type: object
      required:
        - cloudWatch
      properties:
        cloudWatch:
          $ref: '#/components/schemas/CloudWatchLogGroupLogDestination'
          description: Defines the Amazon CloudWatch Logs log group where text and metadata logs are delivered.
      description: Defines the Amazon CloudWatch Logs destination log group for conversation text logs.
    TextLogSetting:
      type: object
      required:
        - enabled
        - destination
      properties:
        enabled:
          $ref: '#/components/schemas/Boolean'
          description: Determines whether conversation logs should be stored for an alias.
        destination:
          $ref: '#/components/schemas/TextLogDestination'
      description: Defines settings to enable text conversation logs.
    UntagResourceRequest:
      type: object
      title: UntagResourceRequest
      properties: {}
    UpdateBotAliasRequest:
      type: object
      required:
        - botAliasName
      title: UpdateBotAliasRequest
      properties:
        botAliasName:
          $ref: '#/components/schemas/Name'
          description: The new name to assign to the bot alias.
        description:
          $ref: '#/components/schemas/Description'
          description: The new description to assign to the bot alias.
        botVersion:
          $ref: '#/components/schemas/BotVersion'
          description: The new bot version to assign to the bot alias.
        botAliasLocaleSettings:
          $ref: '#/components/schemas/BotAliasLocaleSettingsMap'
          description: The new Lambda functions to use in each locale for the bot alias.
        conversationLogSettings:
          $ref: '#/components/schemas/ConversationLogSettings'
          description: The new settings for storing conversation logs in Amazon CloudWatch Logs and Amazon S3 buckets.
        sentimentAnalysisSettings:
          $ref: '#/components/schemas/SentimentAnalysisSettings'
    UpdateBotLocaleRequest:
      type: object
      required:
        - nluIntentConfidenceThreshold
      title: UpdateBotLocaleRequest
      properties:
        description:
          $ref: '#/components/schemas/Description'
          description: The new description of the locale.
        nluIntentConfidenceThreshold:
          $ref: '#/components/schemas/ConfidenceThreshold'
          description: The new confidence threshold where Amazon Lex inserts the <code>AMAZON.FallbackIntent</code> and <code>AMAZON.KendraSearchIntent</code> intents in the list of possible intents for an utterance.
        voiceSettings:
          $ref: '#/components/schemas/VoiceSettings'
          description: The new Amazon Polly voice Amazon Lex should use for voice interaction with the user.
    UpdateBotRequest:
      type: object
      required:
        - botName
        - roleArn
        - dataPrivacy
        - idleSessionTTLInSeconds
      title: UpdateBotRequest
      properties:
        botName:
          $ref: '#/components/schemas/Name'
          description: The new name of the bot. The name must be unique in the account that creates the bot.
        description:
          $ref: '#/components/schemas/Description'
          description: A description of the bot.
        roleArn:
          $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of an IAM role that has permissions to access the bot.
        dataPrivacy:
          $ref: '#/components/schemas/DataPrivacy'
          description: Provides information on additional privacy protections Amazon Lex should use with the bot's data.
        idleSessionTTLInSeconds:
          $ref: '#/components/schemas/SessionTTL'
          description: '<p>The time, in seconds, that Amazon Lex should keep information about a user''s conversation with the bot.</p> <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p> <p>You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.</p>'
    UpdateExportRequest:
      type: object
      title: UpdateExportRequest
      properties:
        filePassword:
          $ref: '#/components/schemas/ImportExportFilePassword'
          description: The new password to use to encrypt the export zip archive.
    UpdateIntentRequest:
      type: object
      required:
        - intentName
      title: UpdateIntentRequest
      properties:
        intentName:
          $ref: '#/components/schemas/Name'
          description: The new name for the intent.
        description:
          $ref: '#/components/schemas/Description'
          description: The new description of the intent.
        parentIntentSignature:
          $ref: '#/components/schemas/IntentSignature'
          description: The signature of the new built-in intent to use as the parent of this intent.
        sampleUtterances:
          $ref: '#/components/schemas/SampleUtterancesList'
          description: New utterances used to invoke the intent.
        dialogCodeHook:
          $ref: '#/components/schemas/DialogCodeHookSettings'
          description: The new Lambda function to use between each turn of the conversation with the bot.
        fulfillmentCodeHook:
          $ref: '#/components/schemas/FulfillmentCodeHookSettings'
          description: The new Lambda function to call when all of the intents required slots are provided and the intent is ready for fulfillment.
        slotPriorities:
          $ref: '#/components/schemas/SlotPrioritiesList'
          description: A new list of slots and their priorities that are contained by the intent.
        intentConfirmationSetting:
          $ref: '#/components/schemas/IntentConfirmationSetting'
          description: New prompts that Amazon Lex sends to the user to confirm the completion of an intent.
        intentClosingSetting:
          $ref: '#/components/schemas/IntentClosingSetting'
          description: The new response that Amazon Lex sends the user when the intent is closed.
        inputContexts:
          $ref: '#/components/schemas/InputContextsList'
          description: A new list of contexts that must be active in order for Amazon Lex to consider the intent.
        outputContexts:
          $ref: '#/components/schemas/OutputContextsList'
          description: A new list of contexts that Amazon Lex activates when the intent is fulfilled.
        kendraConfiguration:
          $ref: '#/components/schemas/KendraConfiguration'
          description: New configuration settings for connecting to an Amazon Kendra index.
    UpdateResourcePolicyRequest:
      type: object
      required:
        - policy
      title: UpdateResourcePolicyRequest
      properties:
        policy:
          $ref: '#/components/schemas/Policy'
          description: '<p>A resource policy to add to the resource. The policy is a JSON structure that contains one or more statements that define the policy. The policy must follow the IAM syntax. For more information about the contents of a JSON policy document, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html"> IAM JSON policy reference </a>. </p> <p>If the policy isn''t valid, Amazon Lex returns a validation exception.</p>'
    UpdateSlotRequest:
      type: object
      required:
        - slotName
        - slotTypeId
        - valueElicitationSetting
      title: UpdateSlotRequest
      properties:
        slotName:
          $ref: '#/components/schemas/Name'
          description: The new name for the slot.
        description:
          $ref: '#/components/schemas/Description'
          description: The new description for the slot.
        slotTypeId:
          $ref: '#/components/schemas/BuiltInOrCustomSlotTypeId'
          description: 'The unique identifier of the new slot type to associate with this slot. '
        valueElicitationSetting:
          $ref: '#/components/schemas/SlotValueElicitationSetting'
          description: A new set of prompts that Amazon Lex sends to the user to elicit a response the provides a value for the slot.
        obfuscationSetting:
          $ref: '#/components/schemas/ObfuscationSetting'
          description: 'New settings that determine how slot values are formatted in Amazon CloudWatch logs. '
        multipleValuesSetting:
          $ref: '#/components/schemas/MultipleValuesSetting'
          description: '<p>Determines whether the slot accepts multiple values in one response. Multiple value slots are only available in the en-US locale. If you set this value to <code>true</code> in any other locale, Amazon Lex throws a <code>ValidationException</code>.</p> <p>If the <code>multipleValuesSetting</code> is not set, the default value is <code>false</code>.</p>'
    UpdateSlotTypeRequest:
      type: object
      required:
        - slotTypeName
        - valueSelectionSetting
      title: UpdateSlotTypeRequest
      properties:
        slotTypeName:
          $ref: '#/components/schemas/Name'
          description: The new name of the slot type.
        description:
          $ref: '#/components/schemas/Description'
          description: The new description of the slot type.
        slotTypeValues:
          $ref: '#/components/schemas/SlotTypeValues'
          description: A new list of values and their optional synonyms that define the values that the slot type can take.
        valueSelectionSetting:
          $ref: '#/components/schemas/SlotValueSelectionSetting'
          description: The strategy that Amazon Lex should use when deciding on a value from the list of slot type values.
        parentSlotTypeSignature:
          $ref: '#/components/schemas/SlotTypeSignature'
          description: The new built-in slot type that should be used as the parent of this slot type.
security:
  - hmac: []

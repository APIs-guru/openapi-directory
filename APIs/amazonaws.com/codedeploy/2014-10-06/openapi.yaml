openapi: 3.0.0
info:
  version: '2014-10-06'
  x-release: v4
  title: AWS CodeDeploy
  description: '<fullname>AWS CodeDeploy</fullname> <p>AWS CodeDeploy is a deployment service that automates application deployments to Amazon EC2 instances, on-premises instances running in your own facility, serverless AWS Lambda functions, or applications in an Amazon ECS service.</p> <p>You can deploy a nearly unlimited variety of application content, such as an updated Lambda function, updated applications in an Amazon ECS service, code, web and configuration files, executables, packages, scripts, multimedia files, and so on. AWS CodeDeploy can deploy application content stored in Amazon S3 buckets, GitHub repositories, or Bitbucket repositories. You do not need to make changes to your existing code before you can use AWS CodeDeploy.</p> <p>AWS CodeDeploy makes it easier for you to rapidly release new features, helps you avoid downtime during application deployment, and handles the complexity of updating your applications, without many of the risks associated with error-prone manual deployments.</p> <p> <b>AWS CodeDeploy Components</b> </p> <p>Use the information in this guide to help you work with the following AWS CodeDeploy components:</p> <ul> <li> <p> <b>Application</b>: A name that uniquely identifies the application you want to deploy. AWS CodeDeploy uses this name, which functions as a container, to ensure the correct combination of revision, deployment configuration, and deployment group are referenced during a deployment.</p> </li> <li> <p> <b>Deployment group</b>: A set of individual instances, CodeDeploy Lambda deployment configuration settings, or an Amazon ECS service and network details. A Lambda deployment group specifies how to route traffic to a new version of a Lambda function. An Amazon ECS deployment group specifies the service created in Amazon ECS to deploy, a load balancer, and a listener to reroute production traffic to an updated containerized application. An EC2/On-premises deployment group contains individually tagged instances, Amazon EC2 instances in Amazon EC2 Auto Scaling groups, or both. All deployment groups can specify optional trigger, alarm, and rollback settings.</p> </li> <li> <p> <b>Deployment configuration</b>: A set of deployment rules and deployment success and failure conditions used by AWS CodeDeploy during a deployment.</p> </li> <li> <p> <b>Deployment</b>: The process and the components used when updating a Lambda function, a containerized application in an Amazon ECS service, or of installing content on one or more instances. </p> </li> <li> <p> <b>Application revisions</b>: For an AWS Lambda deployment, this is an AppSpec file that specifies the Lambda function to be updated and one or more functions to validate deployment lifecycle events. For an Amazon ECS deployment, this is an AppSpec file that specifies the Amazon ECS task definition, container, and port where production traffic is rerouted. For an EC2/On-premises deployment, this is an archive file that contains source content—source code, webpages, executable files, and deployment scripts—along with an AppSpec file. Revisions are stored in Amazon S3 buckets or GitHub repositories. For Amazon S3, a revision is uniquely identified by its Amazon S3 object key and its ETag, version, or both. For GitHub, a revision is uniquely identified by its commit ID.</p> </li> </ul> <p>This guide also contains information to help you get details about the instances in your deployments, to make on-premises instances available for AWS CodeDeploy deployments, to get details about a Lambda function deployment, and to get details about Amazon ECS service deployments.</p> <p> <b>AWS CodeDeploy Information Resources</b> </p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide">AWS CodeDeploy User Guide</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/codedeploy/latest/APIReference/">AWS CodeDeploy API Reference Guide</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/cli/latest/reference/deploy/index.html">AWS CLI Reference for AWS CodeDeploy</a> </p> </li> <li> <p> <a href="https://forums.aws.amazon.com/forum.jspa?forumID=179">AWS CodeDeploy Developer Forum</a> </p> </li> </ul>'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: codedeploy
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/codedeploy-2014-10-06.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/codedeploy/'
servers:
  - url: 'http://codedeploy.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CodeDeploy multi-region endpoint
  - url: 'https://codedeploy.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CodeDeploy multi-region endpoint
  - url: 'http://codedeploy.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CodeDeploy endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://codedeploy.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CodeDeploy endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  /#X-Amz-Target=CodeDeploy_20141006.AddTagsToOnPremisesInstances:
    post:
      operationId: AddTagsToOnPremisesInstances
      description: Adds tags to on-premises instances.
      responses:
        '200':
          description: Success
        '480':
          description: InstanceNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceNameRequiredException'
        '481':
          description: InvalidInstanceNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInstanceNameException'
        '482':
          description: TagRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagRequiredException'
        '483':
          description: InvalidTagException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagException'
        '484':
          description: TagLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagLimitExceededException'
        '485':
          description: InstanceLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceLimitExceededException'
        '486':
          description: InstanceNotRegisteredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceNotRegisteredException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTagsToOnPremisesInstancesInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.AddTagsToOnPremisesInstances
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.BatchGetApplicationRevisions:
    post:
      operationId: BatchGetApplicationRevisions
      description: Gets information about one or more application revisions. The maximum number of application revisions that can be returned is 25.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchGetApplicationRevisionsOutput'
        '480':
          description: ApplicationDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDoesNotExistException'
        '481':
          description: ApplicationNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationNameRequiredException'
        '482':
          description: InvalidApplicationNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApplicationNameException'
        '483':
          description: RevisionRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionRequiredException'
        '484':
          description: InvalidRevisionException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRevisionException'
        '485':
          description: BatchLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchLimitExceededException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchGetApplicationRevisionsInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.BatchGetApplicationRevisions
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.BatchGetApplications:
    post:
      operationId: BatchGetApplications
      description: Gets information about one or more applications. The maximum number of applications that can be returned is 100.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchGetApplicationsOutput'
        '480':
          description: ApplicationNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationNameRequiredException'
        '481':
          description: InvalidApplicationNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApplicationNameException'
        '482':
          description: ApplicationDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDoesNotExistException'
        '483':
          description: BatchLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchLimitExceededException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchGetApplicationsInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.BatchGetApplications
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.BatchGetDeploymentGroups:
    post:
      operationId: BatchGetDeploymentGroups
      description: Gets information about one or more deployment groups.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchGetDeploymentGroupsOutput'
        '480':
          description: ApplicationNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationNameRequiredException'
        '481':
          description: InvalidApplicationNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApplicationNameException'
        '482':
          description: ApplicationDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDoesNotExistException'
        '483':
          description: DeploymentGroupNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentGroupNameRequiredException'
        '484':
          description: InvalidDeploymentGroupNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentGroupNameException'
        '485':
          description: BatchLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchLimitExceededException'
        '486':
          description: DeploymentConfigDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentConfigDoesNotExistException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchGetDeploymentGroupsInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.BatchGetDeploymentGroups
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.BatchGetDeploymentInstances:
    post:
      deprecated: true
      operationId: BatchGetDeploymentInstances
      description: '<note> <p> This method works, but is deprecated. Use <code>BatchGetDeploymentTargets</code> instead. </p> </note> <p> Returns an array of one or more instances associated with a deployment. This method works with EC2/On-premises and AWS Lambda compute platforms. The newer <code>BatchGetDeploymentTargets</code> works with all compute platforms. The maximum number of instances that can be returned is 25.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchGetDeploymentInstancesOutput'
        '480':
          description: DeploymentIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentIdRequiredException'
        '481':
          description: DeploymentDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentDoesNotExistException'
        '482':
          description: InstanceIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceIdRequiredException'
        '483':
          description: InvalidDeploymentIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentIdException'
        '484':
          description: InvalidInstanceNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInstanceNameException'
        '485':
          description: BatchLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchLimitExceededException'
        '486':
          description: InvalidComputePlatformException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidComputePlatformException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchGetDeploymentInstancesInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.BatchGetDeploymentInstances
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.BatchGetDeploymentTargets:
    post:
      operationId: BatchGetDeploymentTargets
      description: '<p> Returns an array of one or more targets associated with a deployment. This method works with all compute types and should be used instead of the deprecated <code>BatchGetDeploymentInstances</code>. The maximum number of targets that can be returned is 25.</p> <p> The type of targets returned depends on the deployment''s compute platform or deployment method: </p> <ul> <li> <p> <b>EC2/On-premises</b>: Information about EC2 instance targets. </p> </li> <li> <p> <b>AWS Lambda</b>: Information about Lambda functions targets. </p> </li> <li> <p> <b>Amazon ECS</b>: Information about Amazon ECS service targets. </p> </li> <li> <p> <b>CloudFormation</b>: Information about targets of blue/green deployments initiated by a CloudFormation stack update.</p> </li> </ul>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchGetDeploymentTargetsOutput'
        '480':
          description: InvalidDeploymentIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentIdException'
        '481':
          description: DeploymentIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentIdRequiredException'
        '482':
          description: DeploymentDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentDoesNotExistException'
        '483':
          description: DeploymentNotStartedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentNotStartedException'
        '484':
          description: DeploymentTargetIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentTargetIdRequiredException'
        '485':
          description: InvalidDeploymentTargetIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentTargetIdException'
        '486':
          description: DeploymentTargetDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentTargetDoesNotExistException'
        '487':
          description: DeploymentTargetListSizeExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentTargetListSizeExceededException'
        '488':
          description: InstanceDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceDoesNotExistException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchGetDeploymentTargetsInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.BatchGetDeploymentTargets
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.BatchGetDeployments:
    post:
      operationId: BatchGetDeployments
      description: Gets information about one or more deployments. The maximum number of deployments that can be returned is 25.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchGetDeploymentsOutput'
        '480':
          description: DeploymentIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentIdRequiredException'
        '481':
          description: InvalidDeploymentIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentIdException'
        '482':
          description: BatchLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchLimitExceededException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchGetDeploymentsInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.BatchGetDeployments
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.BatchGetOnPremisesInstances:
    post:
      operationId: BatchGetOnPremisesInstances
      description: Gets information about one or more on-premises instances. The maximum number of on-premises instances that can be returned is 25.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchGetOnPremisesInstancesOutput'
        '480':
          description: InstanceNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceNameRequiredException'
        '481':
          description: InvalidInstanceNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInstanceNameException'
        '482':
          description: BatchLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchLimitExceededException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchGetOnPremisesInstancesInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.BatchGetOnPremisesInstances
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.ContinueDeployment:
    post:
      operationId: ContinueDeployment
      description: 'For a blue/green deployment, starts the process of rerouting traffic from instances in the original environment to instances in the replacement environment without waiting for a specified wait time to elapse. (Traffic rerouting, which is achieved by registering instances in the replacement environment with the load balancer, can start as soon as all instances have a status of Ready.) '
      responses:
        '200':
          description: Success
        '480':
          description: DeploymentIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentIdRequiredException'
        '481':
          description: DeploymentDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentDoesNotExistException'
        '482':
          description: DeploymentAlreadyCompletedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentAlreadyCompletedException'
        '483':
          description: InvalidDeploymentIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentIdException'
        '484':
          description: DeploymentIsNotInReadyStateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentIsNotInReadyStateException'
        '485':
          description: UnsupportedActionForDeploymentTypeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedActionForDeploymentTypeException'
        '486':
          description: InvalidDeploymentWaitTypeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentWaitTypeException'
        '487':
          description: InvalidDeploymentStatusException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentStatusException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContinueDeploymentInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.ContinueDeployment
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.CreateApplication:
    post:
      operationId: CreateApplication
      description: Creates an application.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApplicationOutput'
        '480':
          description: ApplicationNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationNameRequiredException'
        '481':
          description: InvalidApplicationNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApplicationNameException'
        '482':
          description: ApplicationAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationAlreadyExistsException'
        '483':
          description: ApplicationLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationLimitExceededException'
        '484':
          description: InvalidComputePlatformException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidComputePlatformException'
        '485':
          description: InvalidTagsToAddException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagsToAddException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApplicationInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.CreateApplication
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.CreateDeployment:
    post:
      operationId: CreateDeployment
      description: Deploys an application revision through the specified deployment group.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDeploymentOutput'
        '480':
          description: ApplicationNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationNameRequiredException'
        '481':
          description: InvalidApplicationNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApplicationNameException'
        '482':
          description: ApplicationDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDoesNotExistException'
        '483':
          description: DeploymentGroupNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentGroupNameRequiredException'
        '484':
          description: InvalidDeploymentGroupNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentGroupNameException'
        '485':
          description: DeploymentGroupDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentGroupDoesNotExistException'
        '486':
          description: RevisionRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionRequiredException'
        '487':
          description: RevisionDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionDoesNotExistException'
        '488':
          description: InvalidRevisionException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRevisionException'
        '489':
          description: InvalidDeploymentConfigNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentConfigNameException'
        '490':
          description: DeploymentConfigDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentConfigDoesNotExistException'
        '491':
          description: DescriptionTooLongException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescriptionTooLongException'
        '492':
          description: DeploymentLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentLimitExceededException'
        '493':
          description: InvalidTargetInstancesException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTargetInstancesException'
        '494':
          description: InvalidAutoRollbackConfigException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidAutoRollbackConfigException'
        '495':
          description: InvalidLoadBalancerInfoException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLoadBalancerInfoException'
        '496':
          description: InvalidFileExistsBehaviorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidFileExistsBehaviorException'
        '497':
          description: InvalidRoleException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRoleException'
        '498':
          description: InvalidAutoScalingGroupException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidAutoScalingGroupException'
        '499':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '500':
          description: InvalidUpdateOutdatedInstancesOnlyValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUpdateOutdatedInstancesOnlyValueException'
        '501':
          description: InvalidIgnoreApplicationStopFailuresValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidIgnoreApplicationStopFailuresValueException'
        '502':
          description: InvalidGitHubAccountTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidGitHubAccountTokenException'
        '503':
          description: InvalidTrafficRoutingConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTrafficRoutingConfigurationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeploymentInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.CreateDeployment
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.CreateDeploymentConfig:
    post:
      operationId: CreateDeploymentConfig
      description: ' Creates a deployment configuration. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDeploymentConfigOutput'
        '480':
          description: InvalidDeploymentConfigNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentConfigNameException'
        '481':
          description: DeploymentConfigNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentConfigNameRequiredException'
        '482':
          description: DeploymentConfigAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentConfigAlreadyExistsException'
        '483':
          description: InvalidMinimumHealthyHostValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMinimumHealthyHostValueException'
        '484':
          description: DeploymentConfigLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentConfigLimitExceededException'
        '485':
          description: InvalidComputePlatformException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidComputePlatformException'
        '486':
          description: InvalidTrafficRoutingConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTrafficRoutingConfigurationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeploymentConfigInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.CreateDeploymentConfig
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.CreateDeploymentGroup:
    post:
      operationId: CreateDeploymentGroup
      description: Creates a deployment group to which application revisions are deployed.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDeploymentGroupOutput'
        '480':
          description: ApplicationNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationNameRequiredException'
        '481':
          description: InvalidApplicationNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApplicationNameException'
        '482':
          description: ApplicationDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDoesNotExistException'
        '483':
          description: DeploymentGroupNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentGroupNameRequiredException'
        '484':
          description: InvalidDeploymentGroupNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentGroupNameException'
        '485':
          description: DeploymentGroupAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentGroupAlreadyExistsException'
        '486':
          description: InvalidEC2TagException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEC2TagException'
        '487':
          description: InvalidTagException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagException'
        '488':
          description: InvalidAutoScalingGroupException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidAutoScalingGroupException'
        '489':
          description: InvalidDeploymentConfigNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentConfigNameException'
        '490':
          description: DeploymentConfigDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentConfigDoesNotExistException'
        '491':
          description: RoleRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRequiredException'
        '492':
          description: InvalidRoleException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRoleException'
        '493':
          description: DeploymentGroupLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentGroupLimitExceededException'
        '494':
          description: LifecycleHookLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LifecycleHookLimitExceededException'
        '495':
          description: InvalidTriggerConfigException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTriggerConfigException'
        '496':
          description: TriggerTargetsLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggerTargetsLimitExceededException'
        '497':
          description: InvalidAlarmConfigException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidAlarmConfigException'
        '498':
          description: AlarmsLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlarmsLimitExceededException'
        '499':
          description: InvalidAutoRollbackConfigException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidAutoRollbackConfigException'
        '500':
          description: InvalidLoadBalancerInfoException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLoadBalancerInfoException'
        '501':
          description: InvalidDeploymentStyleException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentStyleException'
        '502':
          description: InvalidBlueGreenDeploymentConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBlueGreenDeploymentConfigurationException'
        '503':
          description: InvalidEC2TagCombinationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEC2TagCombinationException'
        '504':
          description: InvalidOnPremisesTagCombinationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidOnPremisesTagCombinationException'
        '505':
          description: TagSetListLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagSetListLimitExceededException'
        '506':
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '507':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '508':
          description: InvalidECSServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidECSServiceException'
        '509':
          description: InvalidTargetGroupPairException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTargetGroupPairException'
        '510':
          description: ECSServiceMappingLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ECSServiceMappingLimitExceededException'
        '511':
          description: InvalidTagsToAddException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagsToAddException'
        '512':
          description: InvalidTrafficRoutingConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTrafficRoutingConfigurationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeploymentGroupInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.CreateDeploymentGroup
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.DeleteApplication:
    post:
      operationId: DeleteApplication
      description: Deletes an application.
      responses:
        '200':
          description: Success
        '480':
          description: ApplicationNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationNameRequiredException'
        '481':
          description: InvalidApplicationNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApplicationNameException'
        '482':
          description: InvalidRoleException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRoleException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteApplicationInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.DeleteApplication
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.DeleteDeploymentConfig:
    post:
      operationId: DeleteDeploymentConfig
      description: <p>Deletes a deployment configuration.</p> <note> <p>A deployment configuration cannot be deleted if it is currently in use. Predefined configurations cannot be deleted.</p> </note>
      responses:
        '200':
          description: Success
        '480':
          description: InvalidDeploymentConfigNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentConfigNameException'
        '481':
          description: DeploymentConfigNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentConfigNameRequiredException'
        '482':
          description: DeploymentConfigInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentConfigInUseException'
        '483':
          description: InvalidOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidOperationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteDeploymentConfigInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.DeleteDeploymentConfig
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.DeleteDeploymentGroup:
    post:
      operationId: DeleteDeploymentGroup
      description: Deletes a deployment group.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDeploymentGroupOutput'
        '480':
          description: ApplicationNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationNameRequiredException'
        '481':
          description: InvalidApplicationNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApplicationNameException'
        '482':
          description: DeploymentGroupNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentGroupNameRequiredException'
        '483':
          description: InvalidDeploymentGroupNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentGroupNameException'
        '484':
          description: InvalidRoleException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRoleException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteDeploymentGroupInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.DeleteDeploymentGroup
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.DeleteGitHubAccountToken:
    post:
      operationId: DeleteGitHubAccountToken
      description: Deletes a GitHub account connection.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteGitHubAccountTokenOutput'
        '480':
          description: GitHubAccountTokenNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitHubAccountTokenNameRequiredException'
        '481':
          description: GitHubAccountTokenDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitHubAccountTokenDoesNotExistException'
        '482':
          description: InvalidGitHubAccountTokenNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidGitHubAccountTokenNameException'
        '483':
          description: ResourceValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceValidationException'
        '484':
          description: OperationNotSupportedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationNotSupportedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteGitHubAccountTokenInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.DeleteGitHubAccountToken
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.DeleteResourcesByExternalId:
    post:
      operationId: DeleteResourcesByExternalId
      description: Deletes resources linked to an external ID.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResourcesByExternalIdOutput'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteResourcesByExternalIdInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.DeleteResourcesByExternalId
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.DeregisterOnPremisesInstance:
    post:
      operationId: DeregisterOnPremisesInstance
      description: Deregisters an on-premises instance.
      responses:
        '200':
          description: Success
        '480':
          description: InstanceNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceNameRequiredException'
        '481':
          description: InvalidInstanceNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInstanceNameException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeregisterOnPremisesInstanceInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.DeregisterOnPremisesInstance
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.GetApplication:
    post:
      operationId: GetApplication
      description: Gets information about an application.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApplicationOutput'
        '480':
          description: ApplicationNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationNameRequiredException'
        '481':
          description: InvalidApplicationNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApplicationNameException'
        '482':
          description: ApplicationDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDoesNotExistException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetApplicationInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.GetApplication
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.GetApplicationRevision:
    post:
      operationId: GetApplicationRevision
      description: Gets information about an application revision.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApplicationRevisionOutput'
        '480':
          description: ApplicationDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDoesNotExistException'
        '481':
          description: ApplicationNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationNameRequiredException'
        '482':
          description: InvalidApplicationNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApplicationNameException'
        '483':
          description: RevisionDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionDoesNotExistException'
        '484':
          description: RevisionRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionRequiredException'
        '485':
          description: InvalidRevisionException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRevisionException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetApplicationRevisionInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.GetApplicationRevision
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.GetDeployment:
    post:
      operationId: GetDeployment
      description: <p>Gets information about a deployment.</p> <note> <p> The <code>content</code> property of the <code>appSpecContent</code> object in the returned revision is always null. Use <code>GetApplicationRevision</code> and the <code>sha256</code> property of the returned <code>appSpecContent</code> object to get the content of the deployment’s AppSpec file. </p> </note>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeploymentOutput'
        '480':
          description: DeploymentIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentIdRequiredException'
        '481':
          description: InvalidDeploymentIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentIdException'
        '482':
          description: DeploymentDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentDoesNotExistException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetDeploymentInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.GetDeployment
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.GetDeploymentConfig:
    post:
      operationId: GetDeploymentConfig
      description: Gets information about a deployment configuration.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeploymentConfigOutput'
        '480':
          description: InvalidDeploymentConfigNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentConfigNameException'
        '481':
          description: DeploymentConfigNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentConfigNameRequiredException'
        '482':
          description: DeploymentConfigDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentConfigDoesNotExistException'
        '483':
          description: InvalidComputePlatformException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidComputePlatformException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetDeploymentConfigInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.GetDeploymentConfig
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.GetDeploymentGroup:
    post:
      operationId: GetDeploymentGroup
      description: Gets information about a deployment group.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeploymentGroupOutput'
        '480':
          description: ApplicationNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationNameRequiredException'
        '481':
          description: InvalidApplicationNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApplicationNameException'
        '482':
          description: ApplicationDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDoesNotExistException'
        '483':
          description: DeploymentGroupNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentGroupNameRequiredException'
        '484':
          description: InvalidDeploymentGroupNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentGroupNameException'
        '485':
          description: DeploymentGroupDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentGroupDoesNotExistException'
        '486':
          description: DeploymentConfigDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentConfigDoesNotExistException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetDeploymentGroupInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.GetDeploymentGroup
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.GetDeploymentInstance:
    post:
      deprecated: true
      operationId: GetDeploymentInstance
      description: Gets information about an instance as part of a deployment.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeploymentInstanceOutput'
        '480':
          description: DeploymentIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentIdRequiredException'
        '481':
          description: DeploymentDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentDoesNotExistException'
        '482':
          description: InstanceIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceIdRequiredException'
        '483':
          description: InvalidDeploymentIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentIdException'
        '484':
          description: InstanceDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceDoesNotExistException'
        '485':
          description: InvalidInstanceNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInstanceNameException'
        '486':
          description: InvalidComputePlatformException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidComputePlatformException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetDeploymentInstanceInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.GetDeploymentInstance
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.GetDeploymentTarget:
    post:
      operationId: GetDeploymentTarget
      description: ' Returns information about a deployment target. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeploymentTargetOutput'
        '480':
          description: InvalidDeploymentIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentIdException'
        '481':
          description: DeploymentIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentIdRequiredException'
        '482':
          description: DeploymentDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentDoesNotExistException'
        '483':
          description: DeploymentNotStartedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentNotStartedException'
        '484':
          description: DeploymentTargetIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentTargetIdRequiredException'
        '485':
          description: InvalidDeploymentTargetIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentTargetIdException'
        '486':
          description: DeploymentTargetDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentTargetDoesNotExistException'
        '487':
          description: InvalidInstanceNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInstanceNameException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetDeploymentTargetInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.GetDeploymentTarget
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.GetOnPremisesInstance:
    post:
      operationId: GetOnPremisesInstance
      description: ' Gets information about an on-premises instance. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOnPremisesInstanceOutput'
        '480':
          description: InstanceNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceNameRequiredException'
        '481':
          description: InstanceNotRegisteredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceNotRegisteredException'
        '482':
          description: InvalidInstanceNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInstanceNameException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetOnPremisesInstanceInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.GetOnPremisesInstance
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.ListApplicationRevisions:
    post:
      operationId: ListApplicationRevisions
      description: Lists information about revisions for an application.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApplicationRevisionsOutput'
        '480':
          description: ApplicationDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDoesNotExistException'
        '481':
          description: ApplicationNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationNameRequiredException'
        '482':
          description: InvalidApplicationNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApplicationNameException'
        '483':
          description: InvalidSortByException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSortByException'
        '484':
          description: InvalidSortOrderException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSortOrderException'
        '485':
          description: InvalidBucketNameFilterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBucketNameFilterException'
        '486':
          description: InvalidKeyPrefixFilterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidKeyPrefixFilterException'
        '487':
          description: BucketNameFilterRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BucketNameFilterRequiredException'
        '488':
          description: InvalidDeployedStateFilterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeployedStateFilterException'
        '489':
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNextTokenException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListApplicationRevisionsInput'
      parameters:
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.ListApplicationRevisions
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.ListApplications:
    post:
      operationId: ListApplications
      description: Lists the applications registered with the IAM user or AWS account.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApplicationsOutput'
        '480':
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNextTokenException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListApplicationsInput'
      parameters:
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.ListApplications
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.ListDeploymentConfigs:
    post:
      operationId: ListDeploymentConfigs
      description: Lists the deployment configurations with the IAM user or AWS account.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDeploymentConfigsOutput'
        '480':
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNextTokenException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListDeploymentConfigsInput'
      parameters:
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.ListDeploymentConfigs
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.ListDeploymentGroups:
    post:
      operationId: ListDeploymentGroups
      description: Lists the deployment groups for an application registered with the IAM user or AWS account.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDeploymentGroupsOutput'
        '480':
          description: ApplicationNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationNameRequiredException'
        '481':
          description: InvalidApplicationNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApplicationNameException'
        '482':
          description: ApplicationDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDoesNotExistException'
        '483':
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNextTokenException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListDeploymentGroupsInput'
      parameters:
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.ListDeploymentGroups
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.ListDeploymentInstances:
    post:
      deprecated: true
      operationId: ListDeploymentInstances
      description: <note> <p> The newer <code>BatchGetDeploymentTargets</code> should be used instead because it works with all compute types. <code>ListDeploymentInstances</code> throws an exception if it is used with a compute platform other than EC2/On-premises or AWS Lambda. </p> </note> <p> Lists the instance for a deployment associated with the IAM user or AWS account. </p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDeploymentInstancesOutput'
        '480':
          description: DeploymentIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentIdRequiredException'
        '481':
          description: DeploymentDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentDoesNotExistException'
        '482':
          description: DeploymentNotStartedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentNotStartedException'
        '483':
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNextTokenException'
        '484':
          description: InvalidDeploymentIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentIdException'
        '485':
          description: InvalidInstanceStatusException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInstanceStatusException'
        '486':
          description: InvalidInstanceTypeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInstanceTypeException'
        '487':
          description: InvalidDeploymentInstanceTypeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentInstanceTypeException'
        '488':
          description: InvalidTargetFilterNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTargetFilterNameException'
        '489':
          description: InvalidComputePlatformException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidComputePlatformException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListDeploymentInstancesInput'
      parameters:
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.ListDeploymentInstances
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.ListDeploymentTargets:
    post:
      operationId: ListDeploymentTargets
      description: ' Returns an array of target IDs that are associated a deployment. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDeploymentTargetsOutput'
        '480':
          description: DeploymentIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentIdRequiredException'
        '481':
          description: DeploymentDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentDoesNotExistException'
        '482':
          description: DeploymentNotStartedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentNotStartedException'
        '483':
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNextTokenException'
        '484':
          description: InvalidDeploymentIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentIdException'
        '485':
          description: InvalidInstanceStatusException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInstanceStatusException'
        '486':
          description: InvalidInstanceTypeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInstanceTypeException'
        '487':
          description: InvalidDeploymentInstanceTypeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentInstanceTypeException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListDeploymentTargetsInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.ListDeploymentTargets
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.ListDeployments:
    post:
      operationId: ListDeployments
      description: Lists the deployments in a deployment group for an application registered with the IAM user or AWS account.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDeploymentsOutput'
        '480':
          description: ApplicationNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationNameRequiredException'
        '481':
          description: InvalidApplicationNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApplicationNameException'
        '482':
          description: ApplicationDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDoesNotExistException'
        '483':
          description: InvalidDeploymentGroupNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentGroupNameException'
        '484':
          description: DeploymentGroupDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentGroupDoesNotExistException'
        '485':
          description: DeploymentGroupNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentGroupNameRequiredException'
        '486':
          description: InvalidTimeRangeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTimeRangeException'
        '487':
          description: InvalidDeploymentStatusException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentStatusException'
        '488':
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNextTokenException'
        '489':
          description: InvalidExternalIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidExternalIdException'
        '490':
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListDeploymentsInput'
      parameters:
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.ListDeployments
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.ListGitHubAccountTokenNames:
    post:
      operationId: ListGitHubAccountTokenNames
      description: Lists the names of stored connections to GitHub accounts.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGitHubAccountTokenNamesOutput'
        '480':
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNextTokenException'
        '481':
          description: ResourceValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceValidationException'
        '482':
          description: OperationNotSupportedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationNotSupportedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListGitHubAccountTokenNamesInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.ListGitHubAccountTokenNames
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.ListOnPremisesInstances:
    post:
      operationId: ListOnPremisesInstances
      description: '<p>Gets a list of names for one or more on-premises instances.</p> <p>Unless otherwise specified, both registered and deregistered on-premises instance names are listed. To list only registered or deregistered on-premises instance names, use the registration status parameter.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOnPremisesInstancesOutput'
        '480':
          description: InvalidRegistrationStatusException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRegistrationStatusException'
        '481':
          description: InvalidTagFilterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagFilterException'
        '482':
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNextTokenException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListOnPremisesInstancesInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.ListOnPremisesInstances
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.ListTagsForResource:
    post:
      operationId: ListTagsForResource
      description: ' Returns a list of tags for the resource identified by a specified Amazon Resource Name (ARN). Tags are used to organize and categorize your CodeDeploy resources. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceOutput'
        '480':
          description: ArnNotSupportedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArnNotSupportedException'
        '481':
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArnException'
        '482':
          description: ResourceArnRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceArnRequiredException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTagsForResourceInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.ListTagsForResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.PutLifecycleEventHookExecutionStatus:
    post:
      operationId: PutLifecycleEventHookExecutionStatus
      description: ' Sets the result of a Lambda validation function. The function validates lifecycle hooks during a deployment that uses the AWS Lambda or Amazon ECS compute platform. For AWS Lambda deployments, the available lifecycle hooks are <code>BeforeAllowTraffic</code> and <code>AfterAllowTraffic</code>. For Amazon ECS deployments, the available lifecycle hooks are <code>BeforeInstall</code>, <code>AfterInstall</code>, <code>AfterAllowTestTraffic</code>, <code>BeforeAllowTraffic</code>, and <code>AfterAllowTraffic</code>. Lambda validation functions return <code>Succeeded</code> or <code>Failed</code>. For more information, see <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/reference-appspec-file-structure-hooks.html#appspec-hooks-lambda">AppSpec ''hooks'' Section for an AWS Lambda Deployment </a> and <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/reference-appspec-file-structure-hooks.html#appspec-hooks-ecs">AppSpec ''hooks'' Section for an Amazon ECS Deployment</a>.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutLifecycleEventHookExecutionStatusOutput'
        '480':
          description: InvalidLifecycleEventHookExecutionStatusException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLifecycleEventHookExecutionStatusException'
        '481':
          description: InvalidLifecycleEventHookExecutionIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLifecycleEventHookExecutionIdException'
        '482':
          description: LifecycleEventAlreadyCompletedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LifecycleEventAlreadyCompletedException'
        '483':
          description: DeploymentIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentIdRequiredException'
        '484':
          description: DeploymentDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentDoesNotExistException'
        '485':
          description: InvalidDeploymentIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentIdException'
        '486':
          description: UnsupportedActionForDeploymentTypeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedActionForDeploymentTypeException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutLifecycleEventHookExecutionStatusInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.PutLifecycleEventHookExecutionStatus
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.RegisterApplicationRevision:
    post:
      operationId: RegisterApplicationRevision
      description: Registers with AWS CodeDeploy a revision for the specified application.
      responses:
        '200':
          description: Success
        '480':
          description: ApplicationDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDoesNotExistException'
        '481':
          description: ApplicationNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationNameRequiredException'
        '482':
          description: InvalidApplicationNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApplicationNameException'
        '483':
          description: DescriptionTooLongException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescriptionTooLongException'
        '484':
          description: RevisionRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionRequiredException'
        '485':
          description: InvalidRevisionException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRevisionException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterApplicationRevisionInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.RegisterApplicationRevision
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.RegisterOnPremisesInstance:
    post:
      operationId: RegisterOnPremisesInstance
      description: <p>Registers an on-premises instance.</p> <note> <p>Only one IAM ARN (an IAM session ARN or IAM user ARN) is supported in the request. You cannot use both.</p> </note>
      responses:
        '200':
          description: Success
        '480':
          description: InstanceNameAlreadyRegisteredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceNameAlreadyRegisteredException'
        '481':
          description: IamArnRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IamArnRequiredException'
        '482':
          description: IamSessionArnAlreadyRegisteredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IamSessionArnAlreadyRegisteredException'
        '483':
          description: IamUserArnAlreadyRegisteredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IamUserArnAlreadyRegisteredException'
        '484':
          description: InstanceNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceNameRequiredException'
        '485':
          description: IamUserArnRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IamUserArnRequiredException'
        '486':
          description: InvalidInstanceNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInstanceNameException'
        '487':
          description: InvalidIamSessionArnException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidIamSessionArnException'
        '488':
          description: InvalidIamUserArnException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidIamUserArnException'
        '489':
          description: MultipleIamArnsProvidedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipleIamArnsProvidedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterOnPremisesInstanceInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.RegisterOnPremisesInstance
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.RemoveTagsFromOnPremisesInstances:
    post:
      operationId: RemoveTagsFromOnPremisesInstances
      description: Removes one or more tags from one or more on-premises instances.
      responses:
        '200':
          description: Success
        '480':
          description: InstanceNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceNameRequiredException'
        '481':
          description: InvalidInstanceNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInstanceNameException'
        '482':
          description: TagRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagRequiredException'
        '483':
          description: InvalidTagException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagException'
        '484':
          description: TagLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagLimitExceededException'
        '485':
          description: InstanceLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceLimitExceededException'
        '486':
          description: InstanceNotRegisteredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceNotRegisteredException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveTagsFromOnPremisesInstancesInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.RemoveTagsFromOnPremisesInstances
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.SkipWaitTimeForInstanceTermination:
    post:
      deprecated: true
      operationId: SkipWaitTimeForInstanceTermination
      description: 'In a blue/green deployment, overrides any specified wait time and starts terminating instances immediately after the traffic routing is complete.'
      responses:
        '200':
          description: Success
        '480':
          description: DeploymentIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentIdRequiredException'
        '481':
          description: DeploymentDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentDoesNotExistException'
        '482':
          description: DeploymentAlreadyCompletedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentAlreadyCompletedException'
        '483':
          description: InvalidDeploymentIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentIdException'
        '484':
          description: DeploymentNotStartedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentNotStartedException'
        '485':
          description: UnsupportedActionForDeploymentTypeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedActionForDeploymentTypeException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SkipWaitTimeForInstanceTerminationInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.SkipWaitTimeForInstanceTermination
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.StopDeployment:
    post:
      operationId: StopDeployment
      description: Attempts to stop an ongoing deployment.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StopDeploymentOutput'
        '480':
          description: DeploymentIdRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentIdRequiredException'
        '481':
          description: DeploymentDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentDoesNotExistException'
        '482':
          description: DeploymentGroupDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentGroupDoesNotExistException'
        '483':
          description: DeploymentAlreadyCompletedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentAlreadyCompletedException'
        '484':
          description: InvalidDeploymentIdException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentIdException'
        '485':
          description: UnsupportedActionForDeploymentTypeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedActionForDeploymentTypeException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StopDeploymentInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.StopDeployment
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.TagResource:
    post:
      operationId: TagResource
      description: ' Associates the list of tags in the input <code>Tags</code> parameter with the resource identified by the <code>ResourceArn</code> input parameter. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceOutput'
        '480':
          description: ResourceArnRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceArnRequiredException'
        '481':
          description: ApplicationDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDoesNotExistException'
        '482':
          description: DeploymentGroupDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentGroupDoesNotExistException'
        '483':
          description: DeploymentConfigDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentConfigDoesNotExistException'
        '484':
          description: TagRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagRequiredException'
        '485':
          description: InvalidTagsToAddException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagsToAddException'
        '486':
          description: ArnNotSupportedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArnNotSupportedException'
        '487':
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArnException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResourceInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.TagResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.UntagResource:
    post:
      operationId: UntagResource
      description: ' Disassociates a resource from a list of tags. The resource is identified by the <code>ResourceArn</code> input parameter. The tags are identified by the list of keys in the <code>TagKeys</code> input parameter. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceOutput'
        '480':
          description: ResourceArnRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceArnRequiredException'
        '481':
          description: ApplicationDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDoesNotExistException'
        '482':
          description: DeploymentGroupDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentGroupDoesNotExistException'
        '483':
          description: DeploymentConfigDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentConfigDoesNotExistException'
        '484':
          description: TagRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagRequiredException'
        '485':
          description: InvalidTagsToAddException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagsToAddException'
        '486':
          description: ArnNotSupportedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArnNotSupportedException'
        '487':
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArnException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UntagResourceInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.UntagResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.UpdateApplication:
    post:
      operationId: UpdateApplication
      description: Changes the name of an application.
      responses:
        '200':
          description: Success
        '480':
          description: ApplicationNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationNameRequiredException'
        '481':
          description: InvalidApplicationNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApplicationNameException'
        '482':
          description: ApplicationAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationAlreadyExistsException'
        '483':
          description: ApplicationDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDoesNotExistException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApplicationInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.UpdateApplication
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=CodeDeploy_20141006.UpdateDeploymentGroup:
    post:
      operationId: UpdateDeploymentGroup
      description: Changes information about a deployment group.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDeploymentGroupOutput'
        '480':
          description: ApplicationNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationNameRequiredException'
        '481':
          description: InvalidApplicationNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApplicationNameException'
        '482':
          description: ApplicationDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDoesNotExistException'
        '483':
          description: InvalidDeploymentGroupNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentGroupNameException'
        '484':
          description: DeploymentGroupAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentGroupAlreadyExistsException'
        '485':
          description: DeploymentGroupNameRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentGroupNameRequiredException'
        '486':
          description: DeploymentGroupDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentGroupDoesNotExistException'
        '487':
          description: InvalidEC2TagException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEC2TagException'
        '488':
          description: InvalidTagException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagException'
        '489':
          description: InvalidAutoScalingGroupException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidAutoScalingGroupException'
        '490':
          description: InvalidDeploymentConfigNameException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentConfigNameException'
        '491':
          description: DeploymentConfigDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentConfigDoesNotExistException'
        '492':
          description: InvalidRoleException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRoleException'
        '493':
          description: LifecycleHookLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LifecycleHookLimitExceededException'
        '494':
          description: InvalidTriggerConfigException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTriggerConfigException'
        '495':
          description: TriggerTargetsLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggerTargetsLimitExceededException'
        '496':
          description: InvalidAlarmConfigException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidAlarmConfigException'
        '497':
          description: AlarmsLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlarmsLimitExceededException'
        '498':
          description: InvalidAutoRollbackConfigException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidAutoRollbackConfigException'
        '499':
          description: InvalidLoadBalancerInfoException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLoadBalancerInfoException'
        '500':
          description: InvalidDeploymentStyleException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeploymentStyleException'
        '501':
          description: InvalidBlueGreenDeploymentConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBlueGreenDeploymentConfigurationException'
        '502':
          description: InvalidEC2TagCombinationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEC2TagCombinationException'
        '503':
          description: InvalidOnPremisesTagCombinationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidOnPremisesTagCombinationException'
        '504':
          description: TagSetListLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagSetListLimitExceededException'
        '505':
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '506':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '507':
          description: InvalidECSServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidECSServiceException'
        '508':
          description: InvalidTargetGroupPairException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTargetGroupPairException'
        '509':
          description: ECSServiceMappingLimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ECSServiceMappingLimitExceededException'
        '510':
          description: InvalidTrafficRoutingConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTrafficRoutingConfigurationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDeploymentGroupInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CodeDeploy_20141006.UpdateDeploymentGroup
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    AddTagsToOnPremisesInstancesInput:
      type: object
      required:
        - tags
        - instanceNames
      title: AddTagsToOnPremisesInstancesInput
      properties:
        tags:
          $ref: '#/components/schemas/TagList'
          description: <p>The tag key-value pairs to add to the on-premises instances.</p> <p>Keys and values are both required. Keys cannot be null or empty strings. Value-only tags are not allowed.</p>
        instanceNames:
          $ref: '#/components/schemas/InstanceNameList'
          description: The names of the on-premises instances to which to add tags.
      description: 'Represents the input of, and adds tags to, an on-premises instance operation.'
    InstanceNameRequiredException: {}
    InvalidInstanceNameException: {}
    TagRequiredException: {}
    InvalidTagException: {}
    TagLimitExceededException: {}
    InstanceLimitExceededException: {}
    InstanceNotRegisteredException: {}
    BatchGetApplicationRevisionsOutput:
      type: object
      properties:
        applicationName:
          $ref: '#/components/schemas/ApplicationName'
          description: The name of the application that corresponds to the revisions.
        errorMessage:
          $ref: '#/components/schemas/ErrorMessage'
          description: Information about errors that might have occurred during the API call.
        revisions:
          $ref: '#/components/schemas/RevisionInfoList'
          description: 'Additional information about the revisions, including the type and location.'
      description: Represents the output of a <code>BatchGetApplicationRevisions</code> operation.
    BatchGetApplicationRevisionsInput:
      type: object
      required:
        - applicationName
        - revisions
      title: BatchGetApplicationRevisionsInput
      properties:
        applicationName:
          $ref: '#/components/schemas/ApplicationName'
          description: The name of an AWS CodeDeploy application about which to get revision information.
        revisions:
          $ref: '#/components/schemas/RevisionLocationList'
          description: 'An array of <code>RevisionLocation</code> objects that specify information to get about the application revisions, including type and location. The maximum number of <code>RevisionLocation</code> objects you can specify is 25.'
      description: Represents the input of a <code>BatchGetApplicationRevisions</code> operation.
    ApplicationDoesNotExistException: {}
    ApplicationNameRequiredException: {}
    InvalidApplicationNameException: {}
    RevisionRequiredException: {}
    InvalidRevisionException: {}
    BatchLimitExceededException: {}
    BatchGetApplicationsOutput:
      type: object
      properties:
        applicationsInfo:
          $ref: '#/components/schemas/ApplicationsInfoList'
          description: Information about the applications.
      description: Represents the output of a <code>BatchGetApplications</code> operation.
    BatchGetApplicationsInput:
      type: object
      required:
        - applicationNames
      title: BatchGetApplicationsInput
      properties:
        applicationNames:
          $ref: '#/components/schemas/ApplicationsList'
          description: A list of application names separated by spaces. The maximum number of application names you can specify is 100.
      description: Represents the input of a <code>BatchGetApplications</code> operation.
    BatchGetDeploymentGroupsOutput:
      type: object
      properties:
        deploymentGroupsInfo:
          $ref: '#/components/schemas/DeploymentGroupInfoList'
          description: Information about the deployment groups.
        errorMessage:
          $ref: '#/components/schemas/ErrorMessage'
          description: Information about errors that might have occurred during the API call.
      description: Represents the output of a <code>BatchGetDeploymentGroups</code> operation.
    BatchGetDeploymentGroupsInput:
      type: object
      required:
        - applicationName
        - deploymentGroupNames
      title: BatchGetDeploymentGroupsInput
      properties:
        applicationName:
          $ref: '#/components/schemas/ApplicationName'
          description: The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        deploymentGroupNames:
          $ref: '#/components/schemas/DeploymentGroupsList'
          description: The names of the deployment groups.
      description: Represents the input of a <code>BatchGetDeploymentGroups</code> operation.
    DeploymentGroupNameRequiredException: {}
    InvalidDeploymentGroupNameException: {}
    DeploymentConfigDoesNotExistException: {}
    BatchGetDeploymentInstancesOutput:
      type: object
      properties:
        instancesSummary:
          $ref: '#/components/schemas/InstanceSummaryList'
          description: Information about the instance.
        errorMessage:
          $ref: '#/components/schemas/ErrorMessage'
          description: Information about errors that might have occurred during the API call.
      description: Represents the output of a <code>BatchGetDeploymentInstances</code> operation.
    BatchGetDeploymentInstancesInput:
      type: object
      required:
        - deploymentId
        - instanceIds
      title: BatchGetDeploymentInstancesInput
      properties:
        deploymentId:
          $ref: '#/components/schemas/DeploymentId'
          description: ' The unique ID of a deployment. '
        instanceIds:
          $ref: '#/components/schemas/InstancesList'
          description: The unique IDs of instances used in the deployment. The maximum number of instance IDs you can specify is 25.
      description: ' Represents the input of a <code>BatchGetDeploymentInstances</code> operation. '
    DeploymentIdRequiredException: {}
    DeploymentDoesNotExistException: {}
    InstanceIdRequiredException: {}
    InvalidDeploymentIdException: {}
    InvalidComputePlatformException: {}
    BatchGetDeploymentTargetsOutput:
      type: object
      properties:
        deploymentTargets:
          $ref: '#/components/schemas/DeploymentTargetList'
          description: '<p> A list of target objects for a deployment. Each target object contains details about the target, such as its status and lifecycle events. The type of the target objects depends on the deployment'' compute platform. </p> <ul> <li> <p> <b>EC2/On-premises</b>: Each target object is an EC2 or on-premises instance. </p> </li> <li> <p> <b>AWS Lambda</b>: The target object is a specific version of an AWS Lambda function. </p> </li> <li> <p> <b>Amazon ECS</b>: The target object is an Amazon ECS service. </p> </li> <li> <p> <b>CloudFormation</b>: The target object is an AWS CloudFormation blue/green deployment. </p> </li> </ul>'
    BatchGetDeploymentTargetsInput:
      type: object
      title: BatchGetDeploymentTargetsInput
      properties:
        deploymentId:
          $ref: '#/components/schemas/DeploymentId'
          description: ' The unique ID of a deployment. '
        targetIds:
          $ref: '#/components/schemas/TargetIdList'
          description: '<p> The unique IDs of the deployment targets. The compute platform of the deployment determines the type of the targets and their formats. The maximum number of deployment target IDs you can specify is 25.</p> <ul> <li> <p> For deployments that use the EC2/On-premises compute platform, the target IDs are EC2 or on-premises instances IDs, and their target type is <code>instanceTarget</code>. </p> </li> <li> <p> For deployments that use the AWS Lambda compute platform, the target IDs are the names of Lambda functions, and their target type is <code>instanceTarget</code>. </p> </li> <li> <p> For deployments that use the Amazon ECS compute platform, the target IDs are pairs of Amazon ECS clusters and services specified using the format <code>&lt;clustername&gt;:&lt;servicename&gt;</code>. Their target type is <code>ecsTarget</code>. </p> </li> <li> <p> For deployments that are deployed with AWS CloudFormation, the target IDs are CloudFormation stack IDs. Their target type is <code>cloudFormationTarget</code>. </p> </li> </ul>'
    DeploymentNotStartedException: {}
    DeploymentTargetIdRequiredException: {}
    InvalidDeploymentTargetIdException: {}
    DeploymentTargetDoesNotExistException: {}
    DeploymentTargetListSizeExceededException: {}
    InstanceDoesNotExistException: {}
    BatchGetDeploymentsOutput:
      type: object
      properties:
        deploymentsInfo:
          $ref: '#/components/schemas/DeploymentsInfoList'
          description: ' Information about the deployments. '
      description: ' Represents the output of a <code>BatchGetDeployments</code> operation. '
    BatchGetDeploymentsInput:
      type: object
      required:
        - deploymentIds
      title: BatchGetDeploymentsInput
      properties:
        deploymentIds:
          $ref: '#/components/schemas/DeploymentsList'
          description: ' A list of deployment IDs, separated by spaces. The maximum number of deployment IDs you can specify is 25.'
      description: ' Represents the input of a <code>BatchGetDeployments</code> operation. '
    BatchGetOnPremisesInstancesOutput:
      type: object
      properties:
        instanceInfos:
          $ref: '#/components/schemas/InstanceInfoList'
          description: Information about the on-premises instances.
      description: Represents the output of a <code>BatchGetOnPremisesInstances</code> operation.
    BatchGetOnPremisesInstancesInput:
      type: object
      required:
        - instanceNames
      title: BatchGetOnPremisesInstancesInput
      properties:
        instanceNames:
          $ref: '#/components/schemas/InstanceNameList'
          description: The names of the on-premises instances about which to get information. The maximum number of instance names you can specify is 25.
      description: Represents the input of a <code>BatchGetOnPremisesInstances</code> operation.
    ContinueDeploymentInput:
      type: object
      title: ContinueDeploymentInput
      properties:
        deploymentId:
          $ref: '#/components/schemas/DeploymentId'
          description: ' The unique ID of a blue/green deployment for which you want to start rerouting traffic to the replacement environment. '
        deploymentWaitType:
          $ref: '#/components/schemas/DeploymentWaitType'
          description: ' The status of the deployment''s waiting period. <code>READY_WAIT</code> indicates that the deployment is ready to start shifting traffic. <code>TERMINATION_WAIT</code> indicates that the traffic is shifted, but the original target is not terminated. '
    DeploymentAlreadyCompletedException: {}
    DeploymentIsNotInReadyStateException: {}
    UnsupportedActionForDeploymentTypeException: {}
    InvalidDeploymentWaitTypeException: {}
    InvalidDeploymentStatusException: {}
    CreateApplicationOutput:
      type: object
      properties:
        applicationId:
          $ref: '#/components/schemas/ApplicationId'
          description: A unique application ID.
      description: Represents the output of a <code>CreateApplication</code> operation.
    CreateApplicationInput:
      type: object
      required:
        - applicationName
      title: CreateApplicationInput
      properties:
        applicationName:
          $ref: '#/components/schemas/ApplicationName'
          description: The name of the application. This name must be unique with the applicable IAM user or AWS account.
        computePlatform:
          $ref: '#/components/schemas/ComputePlatform'
          description: ' The destination platform type for the deployment (<code>Lambda</code>, <code>Server</code>, or <code>ECS</code>).'
        tags:
          $ref: '#/components/schemas/TagList'
          description: ' The metadata that you apply to CodeDeploy applications to help you organize and categorize them. Each tag consists of a key and an optional value, both of which you define. '
      description: Represents the input of a <code>CreateApplication</code> operation.
    ApplicationAlreadyExistsException: {}
    ApplicationLimitExceededException: {}
    InvalidTagsToAddException: {}
    CreateDeploymentOutput:
      type: object
      properties:
        deploymentId:
          $ref: '#/components/schemas/DeploymentId'
          description: ' The unique ID of a deployment. '
      description: ' Represents the output of a <code>CreateDeployment</code> operation. '
    CreateDeploymentInput:
      type: object
      required:
        - applicationName
      title: CreateDeploymentInput
      properties:
        applicationName:
          $ref: '#/components/schemas/ApplicationName'
          description: The name of an AWS CodeDeploy application associated with the IAM user or AWS account.
        deploymentGroupName:
          $ref: '#/components/schemas/DeploymentGroupName'
          description: The name of the deployment group.
        revision:
          $ref: '#/components/schemas/RevisionLocation'
          description: ' The type and location of the revision to deploy. '
        deploymentConfigName:
          $ref: '#/components/schemas/DeploymentConfigName'
          description: '<p>The name of a deployment configuration associated with the IAM user or AWS account.</p> <p>If not specified, the value configured in the deployment group is used as the default. If the deployment group does not have a deployment configuration associated with it, <code>CodeDeployDefault</code>.<code>OneAtATime</code> is used by default.</p>'
        description:
          $ref: '#/components/schemas/Description'
          description: A comment about the deployment.
        ignoreApplicationStopFailures:
          $ref: '#/components/schemas/Boolean'
          description: '<p> If true, then if an <code>ApplicationStop</code>, <code>BeforeBlockTraffic</code>, or <code>AfterBlockTraffic</code> deployment lifecycle event to an instance fails, then the deployment continues to the next deployment lifecycle event. For example, if <code>ApplicationStop</code> fails, the deployment continues with <code>DownloadBundle</code>. If <code>BeforeBlockTraffic</code> fails, the deployment continues with <code>BlockTraffic</code>. If <code>AfterBlockTraffic</code> fails, the deployment continues with <code>ApplicationStop</code>. </p> <p> If false or not specified, then if a lifecycle event fails during a deployment to an instance, that deployment fails. If deployment to that instance is part of an overall deployment and the number of healthy hosts is not less than the minimum number of healthy hosts, then a deployment to the next instance is attempted. </p> <p> During a deployment, the AWS CodeDeploy agent runs the scripts specified for <code>ApplicationStop</code>, <code>BeforeBlockTraffic</code>, and <code>AfterBlockTraffic</code> in the AppSpec file from the previous successful deployment. (All other scripts are run from the AppSpec file in the current deployment.) If one of these scripts contains an error and does not run successfully, the deployment can fail. </p> <p> If the cause of the failure is a script from the last successful deployment that will never run successfully, create a new deployment and use <code>ignoreApplicationStopFailures</code> to specify that the <code>ApplicationStop</code>, <code>BeforeBlockTraffic</code>, and <code>AfterBlockTraffic</code> failures should be ignored. </p>'
        targetInstances:
          $ref: '#/components/schemas/TargetInstances'
          description: ' Information about the instances that belong to the replacement environment in a blue/green deployment. '
        autoRollbackConfiguration:
          $ref: '#/components/schemas/AutoRollbackConfiguration'
          description: Configuration information for an automatic rollback that is added when a deployment is created.
        updateOutdatedInstancesOnly:
          $ref: '#/components/schemas/Boolean'
          description: ' Indicates whether to deploy to all instances or only to instances that are not running the latest application revision. '
        fileExistsBehavior:
          $ref: '#/components/schemas/FileExistsBehavior'
          description: '<p>Information about how AWS CodeDeploy handles files that already exist in a deployment target location but weren''t part of the previous successful deployment.</p> <p>The <code>fileExistsBehavior</code> parameter takes any of the following values:</p> <ul> <li> <p>DISALLOW: The deployment fails. This is also the default behavior if no option is specified.</p> </li> <li> <p>OVERWRITE: The version of the file from the application revision currently being deployed replaces the version already on the instance.</p> </li> <li> <p>RETAIN: The version of the file already on the instance is kept and used as part of the new deployment.</p> </li> </ul>'
      description: Represents the input of a <code>CreateDeployment</code> operation.
    DeploymentGroupDoesNotExistException: {}
    RevisionDoesNotExistException: {}
    InvalidDeploymentConfigNameException: {}
    DescriptionTooLongException: {}
    DeploymentLimitExceededException: {}
    InvalidTargetInstancesException: {}
    InvalidAutoRollbackConfigException: {}
    InvalidLoadBalancerInfoException: {}
    InvalidFileExistsBehaviorException: {}
    InvalidRoleException: {}
    InvalidAutoScalingGroupException: {}
    ThrottlingException: {}
    InvalidUpdateOutdatedInstancesOnlyValueException: {}
    InvalidIgnoreApplicationStopFailuresValueException: {}
    InvalidGitHubAccountTokenException: {}
    InvalidTrafficRoutingConfigurationException: {}
    CreateDeploymentConfigOutput:
      type: object
      properties:
        deploymentConfigId:
          $ref: '#/components/schemas/DeploymentConfigId'
          description: A unique deployment configuration ID.
      description: Represents the output of a <code>CreateDeploymentConfig</code> operation.
    CreateDeploymentConfigInput:
      type: object
      required:
        - deploymentConfigName
      title: CreateDeploymentConfigInput
      properties:
        deploymentConfigName:
          $ref: '#/components/schemas/DeploymentConfigName'
          description: The name of the deployment configuration to create.
        minimumHealthyHosts:
          $ref: '#/components/schemas/MinimumHealthyHosts'
          description: '<p>The minimum number of healthy instances that should be available at any time during the deployment. There are two parameters expected in the input: type and value.</p> <p>The type parameter takes either of the following values:</p> <ul> <li> <p>HOST_COUNT: The value parameter represents the minimum number of healthy instances as an absolute value.</p> </li> <li> <p>FLEET_PERCENT: The value parameter represents the minimum number of healthy instances as a percentage of the total number of instances in the deployment. If you specify FLEET_PERCENT, at the start of the deployment, AWS CodeDeploy converts the percentage to the equivalent number of instances and rounds up fractional instances.</p> </li> </ul> <p>The value parameter takes an integer.</p> <p>For example, to set a minimum of 95% healthy instance, specify a type of FLEET_PERCENT and a value of 95.</p>'
        trafficRoutingConfig:
          $ref: '#/components/schemas/TrafficRoutingConfig'
          description: The configuration that specifies how the deployment traffic is routed.
        computePlatform:
          $ref: '#/components/schemas/ComputePlatform'
          description: 'The destination platform type for the deployment (<code>Lambda</code>, <code>Server</code>, or <code>ECS</code>).'
      description: Represents the input of a <code>CreateDeploymentConfig</code> operation.
    DeploymentConfigNameRequiredException: {}
    DeploymentConfigAlreadyExistsException: {}
    InvalidMinimumHealthyHostValueException: {}
    DeploymentConfigLimitExceededException: {}
    CreateDeploymentGroupOutput:
      type: object
      properties:
        deploymentGroupId:
          $ref: '#/components/schemas/DeploymentGroupId'
          description: A unique deployment group ID.
      description: Represents the output of a <code>CreateDeploymentGroup</code> operation.
    CreateDeploymentGroupInput:
      type: object
      required:
        - applicationName
        - deploymentGroupName
        - serviceRoleArn
      title: CreateDeploymentGroupInput
      properties:
        applicationName:
          $ref: '#/components/schemas/ApplicationName'
          description: The name of an AWS CodeDeploy application associated with the IAM user or AWS account.
        deploymentGroupName:
          $ref: '#/components/schemas/DeploymentGroupName'
          description: The name of a new deployment group for the specified application.
        deploymentConfigName:
          $ref: '#/components/schemas/DeploymentConfigName'
          description: '<p>If specified, the deployment configuration name can be either one of the predefined configurations provided with AWS CodeDeploy or a custom deployment configuration that you create by calling the create deployment configuration operation.</p> <p> <code>CodeDeployDefault.OneAtATime</code> is the default deployment configuration. It is used if a configuration isn''t specified for the deployment or deployment group.</p> <p>For more information about the predefined deployment configurations in AWS CodeDeploy, see <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations.html">Working with Deployment Configurations in CodeDeploy</a> in the <i>AWS CodeDeploy User Guide</i>.</p>'
        ec2TagFilters:
          $ref: '#/components/schemas/EC2TagFilterList'
          description: The Amazon EC2 tags on which to filter. The deployment group includes EC2 instances with any of the specified tags. Cannot be used in the same call as ec2TagSet.
        onPremisesInstanceTagFilters:
          $ref: '#/components/schemas/TagFilterList'
          description: The on-premises instance tags on which to filter. The deployment group includes on-premises instances with any of the specified tags. Cannot be used in the same call as <code>OnPremisesTagSet</code>.
        autoScalingGroups:
          $ref: '#/components/schemas/AutoScalingGroupNameList'
          description: A list of associated Amazon EC2 Auto Scaling groups.
        serviceRoleArn:
          $ref: '#/components/schemas/Role'
          description: A service role Amazon Resource Name (ARN) that allows AWS CodeDeploy to act on the user's behalf when interacting with AWS services.
        triggerConfigurations:
          $ref: '#/components/schemas/TriggerConfigList'
          description: 'Information about triggers to create when the deployment group is created. For examples, see <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-notify-sns.html">Create a Trigger for an AWS CodeDeploy Event</a> in the <i>AWS CodeDeploy User Guide</i>.'
        alarmConfiguration:
          $ref: '#/components/schemas/AlarmConfiguration'
          description: Information to add about Amazon CloudWatch alarms when the deployment group is created.
        autoRollbackConfiguration:
          $ref: '#/components/schemas/AutoRollbackConfiguration'
          description: Configuration information for an automatic rollback that is added when a deployment group is created.
        outdatedInstancesStrategy:
          $ref: '#/components/schemas/OutdatedInstancesStrategy'
          description: '<p>Indicates what happens when new EC2 instances are launched mid-deployment and do not receive the deployed application revision.</p> <p>If this option is set to <code>UPDATE</code> or is unspecified, CodeDeploy initiates one or more ''auto-update outdated instances'' deployments to apply the deployed application revision to the new EC2 instances.</p> <p>If this option is set to <code>IGNORE</code>, CodeDeploy does not initiate a deployment to update the new EC2 instances. This may result in instances having different revisions.</p>'
        deploymentStyle:
          $ref: '#/components/schemas/DeploymentStyle'
          description: 'Information about the type of deployment, in-place or blue/green, that you want to run and whether to route deployment traffic behind a load balancer.'
        blueGreenDeploymentConfiguration:
          $ref: '#/components/schemas/BlueGreenDeploymentConfiguration'
          description: Information about blue/green deployment options for a deployment group.
        loadBalancerInfo:
          $ref: '#/components/schemas/LoadBalancerInfo'
          description: Information about the load balancer used in a deployment.
        ec2TagSet:
          $ref: '#/components/schemas/EC2TagSet'
          description: Information about groups of tags applied to EC2 instances. The deployment group includes only EC2 instances identified by all the tag groups. Cannot be used in the same call as <code>ec2TagFilters</code>.
        ecsServices:
          $ref: '#/components/schemas/ECSServiceList'
          description: ' The target Amazon ECS services in the deployment group. This applies only to deployment groups that use the Amazon ECS compute platform. A target Amazon ECS service is specified as an Amazon ECS cluster and service name pair using the format <code>&lt;clustername&gt;:&lt;servicename&gt;</code>. '
        onPremisesTagSet:
          $ref: '#/components/schemas/OnPremisesTagSet'
          description: Information about groups of tags applied to on-premises instances. The deployment group includes only on-premises instances identified by all of the tag groups. Cannot be used in the same call as <code>onPremisesInstanceTagFilters</code>.
        tags:
          $ref: '#/components/schemas/TagList'
          description: ' The metadata that you apply to CodeDeploy deployment groups to help you organize and categorize them. Each tag consists of a key and an optional value, both of which you define. '
      description: Represents the input of a <code>CreateDeploymentGroup</code> operation.
    DeploymentGroupAlreadyExistsException: {}
    InvalidEC2TagException: {}
    RoleRequiredException: {}
    DeploymentGroupLimitExceededException: {}
    LifecycleHookLimitExceededException: {}
    InvalidTriggerConfigException: {}
    TriggerTargetsLimitExceededException: {}
    InvalidAlarmConfigException: {}
    AlarmsLimitExceededException: {}
    InvalidDeploymentStyleException: {}
    InvalidBlueGreenDeploymentConfigurationException: {}
    InvalidEC2TagCombinationException: {}
    InvalidOnPremisesTagCombinationException: {}
    TagSetListLimitExceededException: {}
    InvalidInputException: {}
    InvalidECSServiceException: {}
    InvalidTargetGroupPairException: {}
    ECSServiceMappingLimitExceededException: {}
    DeleteApplicationInput:
      type: object
      required:
        - applicationName
      title: DeleteApplicationInput
      properties:
        applicationName:
          $ref: '#/components/schemas/ApplicationName'
          description: The name of an AWS CodeDeploy application associated with the IAM user or AWS account.
      description: Represents the input of a <code>DeleteApplication</code> operation.
    DeleteDeploymentConfigInput:
      type: object
      required:
        - deploymentConfigName
      title: DeleteDeploymentConfigInput
      properties:
        deploymentConfigName:
          $ref: '#/components/schemas/DeploymentConfigName'
          description: The name of a deployment configuration associated with the IAM user or AWS account.
      description: Represents the input of a <code>DeleteDeploymentConfig</code> operation.
    DeploymentConfigInUseException: {}
    InvalidOperationException: {}
    DeleteDeploymentGroupOutput:
      type: object
      properties:
        hooksNotCleanedUp:
          $ref: '#/components/schemas/AutoScalingGroupList'
          description: 'If the output contains no data, and the corresponding deployment group contained at least one Auto Scaling group, AWS CodeDeploy successfully removed all corresponding Auto Scaling lifecycle event hooks from the Amazon EC2 instances in the Auto Scaling group. If the output contains data, AWS CodeDeploy could not remove some Auto Scaling lifecycle event hooks from the Amazon EC2 instances in the Auto Scaling group.'
      description: Represents the output of a <code>DeleteDeploymentGroup</code> operation.
    DeleteDeploymentGroupInput:
      type: object
      required:
        - applicationName
        - deploymentGroupName
      title: DeleteDeploymentGroupInput
      properties:
        applicationName:
          $ref: '#/components/schemas/ApplicationName'
          description: The name of an AWS CodeDeploy application associated with the IAM user or AWS account.
        deploymentGroupName:
          $ref: '#/components/schemas/DeploymentGroupName'
          description: The name of a deployment group for the specified application.
      description: Represents the input of a <code>DeleteDeploymentGroup</code> operation.
    DeleteGitHubAccountTokenOutput:
      type: object
      properties:
        tokenName:
          $ref: '#/components/schemas/GitHubAccountTokenName'
          description: The name of the GitHub account connection that was deleted.
      description: Represents the output of a <code>DeleteGitHubAccountToken</code> operation.
    DeleteGitHubAccountTokenInput:
      type: object
      title: DeleteGitHubAccountTokenInput
      properties:
        tokenName:
          $ref: '#/components/schemas/GitHubAccountTokenName'
          description: The name of the GitHub account connection to delete.
      description: Represents the input of a <code>DeleteGitHubAccount</code> operation.
    GitHubAccountTokenNameRequiredException: {}
    GitHubAccountTokenDoesNotExistException: {}
    InvalidGitHubAccountTokenNameException: {}
    ResourceValidationException: {}
    OperationNotSupportedException: {}
    DeleteResourcesByExternalIdOutput:
      type: object
      properties: {}
    DeleteResourcesByExternalIdInput:
      type: object
      title: DeleteResourcesByExternalIdInput
      properties:
        externalId:
          $ref: '#/components/schemas/ExternalId'
          description: 'The unique ID of an external resource (for example, a CloudFormation stack ID) that is linked to one or more CodeDeploy resources.'
    DeregisterOnPremisesInstanceInput:
      type: object
      required:
        - instanceName
      title: DeregisterOnPremisesInstanceInput
      properties:
        instanceName:
          $ref: '#/components/schemas/InstanceName'
          description: The name of the on-premises instance to deregister.
      description: Represents the input of a <code>DeregisterOnPremisesInstance</code> operation.
    GetApplicationOutput:
      type: object
      properties:
        application:
          $ref: '#/components/schemas/ApplicationInfo'
          description: Information about the application.
      description: Represents the output of a <code>GetApplication</code> operation.
    GetApplicationInput:
      type: object
      required:
        - applicationName
      title: GetApplicationInput
      properties:
        applicationName:
          $ref: '#/components/schemas/ApplicationName'
          description: The name of an AWS CodeDeploy application associated with the IAM user or AWS account.
      description: Represents the input of a <code>GetApplication</code> operation.
    GetApplicationRevisionOutput:
      type: object
      properties:
        applicationName:
          $ref: '#/components/schemas/ApplicationName'
          description: The name of the application that corresponds to the revision.
        revision:
          $ref: '#/components/schemas/RevisionLocation'
          description: 'Additional information about the revision, including type and location.'
        revisionInfo:
          $ref: '#/components/schemas/GenericRevisionInfo'
          description: General information about the revision.
      description: Represents the output of a <code>GetApplicationRevision</code> operation.
    GetApplicationRevisionInput:
      type: object
      required:
        - applicationName
        - revision
      title: GetApplicationRevisionInput
      properties:
        applicationName:
          $ref: '#/components/schemas/ApplicationName'
          description: The name of the application that corresponds to the revision.
        revision:
          $ref: '#/components/schemas/RevisionLocation'
          description: 'Information about the application revision to get, including type and location.'
      description: Represents the input of a <code>GetApplicationRevision</code> operation.
    GetDeploymentOutput:
      type: object
      properties:
        deploymentInfo:
          $ref: '#/components/schemas/DeploymentInfo'
          description: Information about the deployment.
      description: Represents the output of a <code>GetDeployment</code> operation.
    GetDeploymentInput:
      type: object
      required:
        - deploymentId
      title: GetDeploymentInput
      properties:
        deploymentId:
          $ref: '#/components/schemas/DeploymentId'
          description: ' The unique ID of a deployment associated with the IAM user or AWS account. '
      description: Represents the input of a <code>GetDeployment</code> operation.
    GetDeploymentConfigOutput:
      type: object
      properties:
        deploymentConfigInfo:
          $ref: '#/components/schemas/DeploymentConfigInfo'
          description: Information about the deployment configuration.
      description: Represents the output of a <code>GetDeploymentConfig</code> operation.
    GetDeploymentConfigInput:
      type: object
      required:
        - deploymentConfigName
      title: GetDeploymentConfigInput
      properties:
        deploymentConfigName:
          $ref: '#/components/schemas/DeploymentConfigName'
          description: The name of a deployment configuration associated with the IAM user or AWS account.
      description: Represents the input of a <code>GetDeploymentConfig</code> operation.
    GetDeploymentGroupOutput:
      type: object
      properties:
        deploymentGroupInfo:
          $ref: '#/components/schemas/DeploymentGroupInfo'
          description: Information about the deployment group.
      description: Represents the output of a <code>GetDeploymentGroup</code> operation.
    GetDeploymentGroupInput:
      type: object
      required:
        - applicationName
        - deploymentGroupName
      title: GetDeploymentGroupInput
      properties:
        applicationName:
          $ref: '#/components/schemas/ApplicationName'
          description: The name of an AWS CodeDeploy application associated with the IAM user or AWS account.
        deploymentGroupName:
          $ref: '#/components/schemas/DeploymentGroupName'
          description: The name of a deployment group for the specified application.
      description: Represents the input of a <code>GetDeploymentGroup</code> operation.
    GetDeploymentInstanceOutput:
      type: object
      properties:
        instanceSummary:
          $ref: '#/components/schemas/InstanceSummary'
          description: ' Information about the instance. '
      description: ' Represents the output of a <code>GetDeploymentInstance</code> operation. '
    GetDeploymentInstanceInput:
      type: object
      required:
        - deploymentId
        - instanceId
      title: GetDeploymentInstanceInput
      properties:
        deploymentId:
          $ref: '#/components/schemas/DeploymentId'
          description: ' The unique ID of a deployment. '
        instanceId:
          $ref: '#/components/schemas/InstanceId'
          description: ' The unique ID of an instance in the deployment group. '
      description: ' Represents the input of a <code>GetDeploymentInstance</code> operation. '
    GetDeploymentTargetOutput:
      type: object
      properties:
        deploymentTarget:
          $ref: '#/components/schemas/DeploymentTarget'
          description: ' A deployment target that contains information about a deployment such as its status, lifecycle events, and when it was last updated. It also contains metadata about the deployment target. The deployment target metadata depends on the deployment target''s type (<code>instanceTarget</code>, <code>lambdaTarget</code>, or <code>ecsTarget</code>). '
    GetDeploymentTargetInput:
      type: object
      title: GetDeploymentTargetInput
      properties:
        deploymentId:
          $ref: '#/components/schemas/DeploymentId'
          description: ' The unique ID of a deployment. '
        targetId:
          $ref: '#/components/schemas/TargetId'
          description: ' The unique ID of a deployment target. '
    GetOnPremisesInstanceOutput:
      type: object
      properties:
        instanceInfo:
          $ref: '#/components/schemas/InstanceInfo'
          description: ' Information about the on-premises instance. '
      description: ' Represents the output of a <code>GetOnPremisesInstance</code> operation. '
    GetOnPremisesInstanceInput:
      type: object
      required:
        - instanceName
      title: GetOnPremisesInstanceInput
      properties:
        instanceName:
          $ref: '#/components/schemas/InstanceName'
          description: ' The name of the on-premises instance about which to get information. '
      description: ' Represents the input of a <code>GetOnPremisesInstance</code> operation. '
    ListApplicationRevisionsOutput:
      type: object
      properties:
        revisions:
          $ref: '#/components/schemas/RevisionLocationList'
          description: A list of locations that contain the matching revisions.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list application revisions call to return the next set of application revisions in the list.'
      description: Represents the output of a <code>ListApplicationRevisions</code> operation.
    ListApplicationRevisionsInput:
      type: object
      required:
        - applicationName
      title: ListApplicationRevisionsInput
      properties:
        applicationName:
          $ref: '#/components/schemas/ApplicationName'
          description: ' The name of an AWS CodeDeploy application associated with the IAM user or AWS account. '
        sortBy:
          $ref: '#/components/schemas/ApplicationRevisionSortBy'
          description: '<p>The column name to use to sort the list results:</p> <ul> <li> <p> <code>registerTime</code>: Sort by the time the revisions were registered with AWS CodeDeploy.</p> </li> <li> <p> <code>firstUsedTime</code>: Sort by the time the revisions were first used in a deployment.</p> </li> <li> <p> <code>lastUsedTime</code>: Sort by the time the revisions were last used in a deployment.</p> </li> </ul> <p> If not specified or set to null, the results are returned in an arbitrary order. </p>'
        sortOrder:
          $ref: '#/components/schemas/SortOrder'
          description: '<p> The order in which to sort the list results: </p> <ul> <li> <p> <code>ascending</code>: ascending order.</p> </li> <li> <p> <code>descending</code>: descending order.</p> </li> </ul> <p>If not specified, the results are sorted in ascending order.</p> <p>If set to null, the results are sorted in an arbitrary order.</p>'
        s3Bucket:
          $ref: '#/components/schemas/S3Bucket'
          description: '<p> An Amazon S3 bucket name to limit the search for revisions. </p> <p> If set to null, all of the user''s buckets are searched. </p>'
        s3KeyPrefix:
          $ref: '#/components/schemas/S3Key'
          description: ' A key prefix for the set of Amazon S3 objects to limit the search for revisions. '
        deployed:
          $ref: '#/components/schemas/ListStateFilterAction'
          description: '<p> Whether to list revisions based on whether the revision is the target revision of a deployment group: </p> <ul> <li> <p> <code>include</code>: List revisions that are target revisions of a deployment group.</p> </li> <li> <p> <code>exclude</code>: Do not list revisions that are target revisions of a deployment group.</p> </li> <li> <p> <code>ignore</code>: List all revisions.</p> </li> </ul>'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: An identifier returned from the previous <code>ListApplicationRevisions</code> call. It can be used to return the next set of applications in the list.
      description: ' Represents the input of a <code>ListApplicationRevisions</code> operation. '
    InvalidSortByException: {}
    InvalidSortOrderException: {}
    InvalidBucketNameFilterException: {}
    InvalidKeyPrefixFilterException: {}
    BucketNameFilterRequiredException: {}
    InvalidDeployedStateFilterException: {}
    InvalidNextTokenException: {}
    ListApplicationsOutput:
      type: object
      properties:
        applications:
          $ref: '#/components/schemas/ApplicationsList'
          description: A list of application names.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list applications call to return the next set of applications in the list.'
      description: Represents the output of a ListApplications operation.
    ListApplicationsInput:
      type: object
      title: ListApplicationsInput
      properties:
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: An identifier returned from the previous list applications call. It can be used to return the next set of applications in the list.
      description: Represents the input of a <code>ListApplications</code> operation.
    ListDeploymentConfigsOutput:
      type: object
      properties:
        deploymentConfigsList:
          $ref: '#/components/schemas/DeploymentConfigsList'
          description: 'A list of deployment configurations, including built-in configurations such as <code>CodeDeployDefault.OneAtATime</code>.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployment configurations call to return the next set of deployment configurations in the list.'
      description: Represents the output of a <code>ListDeploymentConfigs</code> operation.
    ListDeploymentConfigsInput:
      type: object
      title: ListDeploymentConfigsInput
      properties:
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'An identifier returned from the previous <code>ListDeploymentConfigs</code> call. It can be used to return the next set of deployment configurations in the list. '
      description: Represents the input of a <code>ListDeploymentConfigs</code> operation.
    ListDeploymentGroupsOutput:
      type: object
      properties:
        applicationName:
          $ref: '#/components/schemas/ApplicationName'
          description: The application name.
        deploymentGroups:
          $ref: '#/components/schemas/DeploymentGroupsList'
          description: A list of deployment group names.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployment groups call to return the next set of deployment groups in the list.'
      description: Represents the output of a <code>ListDeploymentGroups</code> operation.
    ListDeploymentGroupsInput:
      type: object
      required:
        - applicationName
      title: ListDeploymentGroupsInput
      properties:
        applicationName:
          $ref: '#/components/schemas/ApplicationName'
          description: The name of an AWS CodeDeploy application associated with the IAM user or AWS account.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: An identifier returned from the previous list deployment groups call. It can be used to return the next set of deployment groups in the list.
      description: Represents the input of a <code>ListDeploymentGroups</code> operation.
    ListDeploymentInstancesOutput:
      type: object
      properties:
        instancesList:
          $ref: '#/components/schemas/InstancesList'
          description: A list of instance IDs.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployment instances call to return the next set of deployment instances in the list.'
      description: Represents the output of a <code>ListDeploymentInstances</code> operation.
    ListDeploymentInstancesInput:
      type: object
      required:
        - deploymentId
      title: ListDeploymentInstancesInput
      properties:
        deploymentId:
          $ref: '#/components/schemas/DeploymentId'
          description: ' The unique ID of a deployment. '
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: An identifier returned from the previous list deployment instances call. It can be used to return the next set of deployment instances in the list.
        instanceStatusFilter:
          $ref: '#/components/schemas/InstanceStatusList'
          description: '<p>A subset of instances to list by status:</p> <ul> <li> <p> <code>Pending</code>: Include those instances with pending deployments.</p> </li> <li> <p> <code>InProgress</code>: Include those instances where deployments are still in progress.</p> </li> <li> <p> <code>Succeeded</code>: Include those instances with successful deployments.</p> </li> <li> <p> <code>Failed</code>: Include those instances with failed deployments.</p> </li> <li> <p> <code>Skipped</code>: Include those instances with skipped deployments.</p> </li> <li> <p> <code>Unknown</code>: Include those instances with deployments in an unknown state.</p> </li> </ul>'
        instanceTypeFilter:
          $ref: '#/components/schemas/InstanceTypeList'
          description: 'The set of instances in a blue/green deployment, either those in the original environment ("BLUE") or those in the replacement environment ("GREEN"), for which you want to view instance information.'
      description: ' Represents the input of a <code>ListDeploymentInstances</code> operation. '
    InvalidInstanceStatusException: {}
    InvalidInstanceTypeException: {}
    InvalidDeploymentInstanceTypeException: {}
    InvalidTargetFilterNameException: {}
    ListDeploymentTargetsOutput:
      type: object
      properties:
        targetIds:
          $ref: '#/components/schemas/TargetIdList'
          description: ' The unique IDs of deployment targets. '
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: ' If a large amount of information is returned, a token identifier is also returned. It can be used in a subsequent <code>ListDeploymentTargets</code> call to return the next set of deployment targets in the list. '
    ListDeploymentTargetsInput:
      type: object
      title: ListDeploymentTargetsInput
      properties:
        deploymentId:
          $ref: '#/components/schemas/DeploymentId'
          description: ' The unique ID of a deployment. '
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: ' A token identifier returned from the previous <code>ListDeploymentTargets</code> call. It can be used to return the next set of deployment targets in the list. '
        targetFilters:
          $ref: '#/components/schemas/TargetFilters'
          description: '<p> A key used to filter the returned targets. The two valid values are:</p> <ul> <li> <p> <code>TargetStatus</code> - A <code>TargetStatus</code> filter string can be <code>Failed</code>, <code>InProgress</code>, <code>Pending</code>, <code>Ready</code>, <code>Skipped</code>, <code>Succeeded</code>, or <code>Unknown</code>. </p> </li> <li> <p> <code>ServerInstanceLabel</code> - A <code>ServerInstanceLabel</code> filter string can be <code>Blue</code> or <code>Green</code>. </p> </li> </ul>'
    ListDeploymentsOutput:
      type: object
      properties:
        deployments:
          $ref: '#/components/schemas/DeploymentsList'
          description: A list of deployment IDs.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployments call to return the next set of deployments in the list.'
      description: Represents the output of a <code>ListDeployments</code> operation.
    ListDeploymentsInput:
      type: object
      title: ListDeploymentsInput
      properties:
        applicationName:
          $ref: '#/components/schemas/ApplicationName'
          description: '<p>The name of an AWS CodeDeploy application associated with the IAM user or AWS account.</p> <note> <p>If <code>applicationName</code> is specified, then <code>deploymentGroupName</code> must be specified. If it is not specified, then <code>deploymentGroupName</code> must not be specified. </p> </note>'
        deploymentGroupName:
          $ref: '#/components/schemas/DeploymentGroupName'
          description: '<p>The name of a deployment group for the specified application.</p> <note> <p>If <code>deploymentGroupName</code> is specified, then <code>applicationName</code> must be specified. If it is not specified, then <code>applicationName</code> must not be specified. </p> </note>'
        externalId:
          $ref: '#/components/schemas/ExternalId'
          description: The unique ID of an external resource for returning deployments linked to the external resource.
        includeOnlyStatuses:
          $ref: '#/components/schemas/DeploymentStatusList'
          description: '<p>A subset of deployments to list by status:</p> <ul> <li> <p> <code>Created</code>: Include created deployments in the resulting list.</p> </li> <li> <p> <code>Queued</code>: Include queued deployments in the resulting list.</p> </li> <li> <p> <code>In Progress</code>: Include in-progress deployments in the resulting list.</p> </li> <li> <p> <code>Succeeded</code>: Include successful deployments in the resulting list.</p> </li> <li> <p> <code>Failed</code>: Include failed deployments in the resulting list.</p> </li> <li> <p> <code>Stopped</code>: Include stopped deployments in the resulting list.</p> </li> </ul>'
        createTimeRange:
          $ref: '#/components/schemas/TimeRange'
          description: A time range (start and end) for returning a subset of the list of deployments.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: An identifier returned from the previous list deployments call. It can be used to return the next set of deployments in the list.
      description: Represents the input of a <code>ListDeployments</code> operation.
    InvalidTimeRangeException: {}
    InvalidExternalIdException: {}
    ListGitHubAccountTokenNamesOutput:
      type: object
      properties:
        tokenNameList:
          $ref: '#/components/schemas/GitHubAccountTokenNameList'
          description: A list of names of connections to GitHub accounts.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent <code>ListGitHubAccountTokenNames</code> call to return the next set of names in the list. '
      description: Represents the output of a <code>ListGitHubAccountTokenNames</code> operation.
    ListGitHubAccountTokenNamesInput:
      type: object
      title: ListGitHubAccountTokenNamesInput
      properties:
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'An identifier returned from the previous <code>ListGitHubAccountTokenNames</code> call. It can be used to return the next set of names in the list. '
      description: Represents the input of a <code>ListGitHubAccountTokenNames</code> operation.
    ListOnPremisesInstancesOutput:
      type: object
      properties:
        instanceNames:
          $ref: '#/components/schemas/InstanceNameList'
          description: The list of matching on-premises instance names.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list on-premises instances call to return the next set of on-premises instances in the list.'
      description: Represents the output of the list on-premises instances operation.
    ListOnPremisesInstancesInput:
      type: object
      title: ListOnPremisesInstancesInput
      properties:
        registrationStatus:
          $ref: '#/components/schemas/RegistrationStatus'
          description: '<p>The registration status of the on-premises instances:</p> <ul> <li> <p> <code>Deregistered</code>: Include deregistered on-premises instances in the resulting list.</p> </li> <li> <p> <code>Registered</code>: Include registered on-premises instances in the resulting list.</p> </li> </ul>'
        tagFilters:
          $ref: '#/components/schemas/TagFilterList'
          description: The on-premises instance tags that are used to restrict the on-premises instance names returned.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: An identifier returned from the previous list on-premises instances call. It can be used to return the next set of on-premises instances in the list.
      description: Represents the input of a <code>ListOnPremisesInstances</code> operation.
    InvalidRegistrationStatusException: {}
    InvalidTagFilterException: {}
    ListTagsForResourceOutput:
      type: object
      properties:
        Tags:
          $ref: '#/components/schemas/TagList'
          description: ' A list of tags returned by <code>ListTagsForResource</code>. The tags are associated with the resource identified by the input <code>ResourceArn</code> parameter. '
        NextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list application revisions call to return the next set of application revisions in the list.'
    ListTagsForResourceInput:
      type: object
      required:
        - ResourceArn
      title: ListTagsForResourceInput
      properties:
        ResourceArn:
          $ref: '#/components/schemas/Arn'
          description: ' The ARN of a CodeDeploy resource. <code>ListTagsForResource</code> returns all the tags associated with the resource that is identified by the <code>ResourceArn</code>. '
        NextToken:
          $ref: '#/components/schemas/NextToken'
          description: An identifier returned from the previous <code>ListTagsForResource</code> call. It can be used to return the next set of applications in the list.
    ArnNotSupportedException: {}
    InvalidArnException: {}
    ResourceArnRequiredException: {}
    PutLifecycleEventHookExecutionStatusOutput:
      type: object
      properties:
        lifecycleEventHookExecutionId:
          $ref: '#/components/schemas/LifecycleEventHookExecutionId'
          description: The execution ID of the lifecycle event hook. A hook is specified in the <code>hooks</code> section of the deployment's AppSpec file.
    PutLifecycleEventHookExecutionStatusInput:
      type: object
      title: PutLifecycleEventHookExecutionStatusInput
      properties:
        deploymentId:
          $ref: '#/components/schemas/DeploymentId'
          description: ' The unique ID of a deployment. Pass this ID to a Lambda function that validates a deployment lifecycle event. '
        lifecycleEventHookExecutionId:
          $ref: '#/components/schemas/LifecycleEventHookExecutionId'
          description: ' The execution ID of a deployment''s lifecycle hook. A deployment lifecycle hook is specified in the <code>hooks</code> section of the AppSpec file. '
        status:
          $ref: '#/components/schemas/LifecycleEventStatus'
          description: The result of a Lambda function that validates a deployment lifecycle event. <code>Succeeded</code> and <code>Failed</code> are the only valid values for <code>status</code>.
    InvalidLifecycleEventHookExecutionStatusException: {}
    InvalidLifecycleEventHookExecutionIdException: {}
    LifecycleEventAlreadyCompletedException: {}
    RegisterApplicationRevisionInput:
      type: object
      required:
        - applicationName
        - revision
      title: RegisterApplicationRevisionInput
      properties:
        applicationName:
          $ref: '#/components/schemas/ApplicationName'
          description: The name of an AWS CodeDeploy application associated with the IAM user or AWS account.
        description:
          $ref: '#/components/schemas/Description'
          description: A comment about the revision.
        revision:
          $ref: '#/components/schemas/RevisionLocation'
          description: 'Information about the application revision to register, including type and location.'
      description: Represents the input of a RegisterApplicationRevision operation.
    RegisterOnPremisesInstanceInput:
      type: object
      required:
        - instanceName
      title: RegisterOnPremisesInstanceInput
      properties:
        instanceName:
          $ref: '#/components/schemas/InstanceName'
          description: The name of the on-premises instance to register.
        iamSessionArn:
          $ref: '#/components/schemas/IamSessionArn'
          description: The ARN of the IAM session to associate with the on-premises instance.
        iamUserArn:
          $ref: '#/components/schemas/IamUserArn'
          description: The ARN of the IAM user to associate with the on-premises instance.
      description: Represents the input of the register on-premises instance operation.
    InstanceNameAlreadyRegisteredException: {}
    IamArnRequiredException: {}
    IamSessionArnAlreadyRegisteredException: {}
    IamUserArnAlreadyRegisteredException: {}
    IamUserArnRequiredException: {}
    InvalidIamSessionArnException: {}
    InvalidIamUserArnException: {}
    MultipleIamArnsProvidedException: {}
    RemoveTagsFromOnPremisesInstancesInput:
      type: object
      required:
        - tags
        - instanceNames
      title: RemoveTagsFromOnPremisesInstancesInput
      properties:
        tags:
          $ref: '#/components/schemas/TagList'
          description: The tag key-value pairs to remove from the on-premises instances.
        instanceNames:
          $ref: '#/components/schemas/InstanceNameList'
          description: The names of the on-premises instances from which to remove tags.
      description: Represents the input of a <code>RemoveTagsFromOnPremisesInstances</code> operation.
    SkipWaitTimeForInstanceTerminationInput:
      type: object
      title: SkipWaitTimeForInstanceTerminationInput
      properties:
        deploymentId:
          $ref: '#/components/schemas/DeploymentId'
          description: ' The unique ID of a blue/green deployment for which you want to skip the instance termination wait time. '
    StopDeploymentOutput:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/StopStatus'
          description: '<p>The status of the stop deployment operation:</p> <ul> <li> <p>Pending: The stop operation is pending.</p> </li> <li> <p>Succeeded: The stop operation was successful.</p> </li> </ul>'
        statusMessage:
          $ref: '#/components/schemas/Message'
          description: An accompanying status message.
      description: ' Represents the output of a <code>StopDeployment</code> operation. '
    StopDeploymentInput:
      type: object
      required:
        - deploymentId
      title: StopDeploymentInput
      properties:
        deploymentId:
          $ref: '#/components/schemas/DeploymentId'
          description: ' The unique ID of a deployment. '
        autoRollbackEnabled:
          $ref: '#/components/schemas/NullableBoolean'
          description: ' Indicates, when a deployment is stopped, whether instances that have been updated should be rolled back to the previous version of the application revision. '
      description: ' Represents the input of a <code>StopDeployment</code> operation. '
    TagResourceOutput:
      type: object
      properties: {}
    TagResourceInput:
      type: object
      required:
        - ResourceArn
        - Tags
      title: TagResourceInput
      properties:
        ResourceArn:
          $ref: '#/components/schemas/Arn'
          description: ' The ARN of a resource, such as a CodeDeploy application or deployment group. '
        Tags:
          $ref: '#/components/schemas/TagList'
          description: ' A list of tags that <code>TagResource</code> associates with a resource. The resource is identified by the <code>ResourceArn</code> input parameter. '
    UntagResourceOutput:
      type: object
      properties: {}
    UntagResourceInput:
      type: object
      required:
        - ResourceArn
        - TagKeys
      title: UntagResourceInput
      properties:
        ResourceArn:
          $ref: '#/components/schemas/Arn'
          description: ' The Amazon Resource Name (ARN) that specifies from which resource to disassociate the tags with the keys in the <code>TagKeys</code> input parameter. '
        TagKeys:
          $ref: '#/components/schemas/TagKeyList'
          description: ' A list of keys of <code>Tag</code> objects. The <code>Tag</code> objects identified by the keys are disassociated from the resource specified by the <code>ResourceArn</code> input parameter. '
    UpdateApplicationInput:
      type: object
      title: UpdateApplicationInput
      properties:
        applicationName:
          $ref: '#/components/schemas/ApplicationName'
          description: The current name of the application you want to change.
        newApplicationName:
          $ref: '#/components/schemas/ApplicationName'
          description: The new name to give the application.
      description: Represents the input of an <code>UpdateApplication</code> operation.
    UpdateDeploymentGroupOutput:
      type: object
      properties:
        hooksNotCleanedUp:
          $ref: '#/components/schemas/AutoScalingGroupList'
          description: 'If the output contains no data, and the corresponding deployment group contained at least one Auto Scaling group, AWS CodeDeploy successfully removed all corresponding Auto Scaling lifecycle event hooks from the AWS account. If the output contains data, AWS CodeDeploy could not remove some Auto Scaling lifecycle event hooks from the AWS account.'
      description: Represents the output of an <code>UpdateDeploymentGroup</code> operation.
    UpdateDeploymentGroupInput:
      type: object
      required:
        - applicationName
        - currentDeploymentGroupName
      title: UpdateDeploymentGroupInput
      properties:
        applicationName:
          $ref: '#/components/schemas/ApplicationName'
          description: The application name that corresponds to the deployment group to update.
        currentDeploymentGroupName:
          $ref: '#/components/schemas/DeploymentGroupName'
          description: The current name of the deployment group.
        newDeploymentGroupName:
          $ref: '#/components/schemas/DeploymentGroupName'
          description: 'The new name of the deployment group, if you want to change it.'
        deploymentConfigName:
          $ref: '#/components/schemas/DeploymentConfigName'
          description: 'The replacement deployment configuration name to use, if you want to change it.'
        ec2TagFilters:
          $ref: '#/components/schemas/EC2TagFilterList'
          description: 'The replacement set of Amazon EC2 tags on which to filter, if you want to change them. To keep the existing tags, enter their names. To remove tags, do not enter any tag names.'
        onPremisesInstanceTagFilters:
          $ref: '#/components/schemas/TagFilterList'
          description: 'The replacement set of on-premises instance tags on which to filter, if you want to change them. To keep the existing tags, enter their names. To remove tags, do not enter any tag names.'
        autoScalingGroups:
          $ref: '#/components/schemas/AutoScalingGroupNameList'
          description: 'The replacement list of Auto Scaling groups to be included in the deployment group, if you want to change them. To keep the Auto Scaling groups, enter their names. To remove Auto Scaling groups, do not enter any Auto Scaling group names.'
        serviceRoleArn:
          $ref: '#/components/schemas/Role'
          description: 'A replacement ARN for the service role, if you want to change it.'
        triggerConfigurations:
          $ref: '#/components/schemas/TriggerConfigList'
          description: 'Information about triggers to change when the deployment group is updated. For examples, see <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-notify-edit.html">Edit a Trigger in a CodeDeploy Deployment Group</a> in the <i>AWS CodeDeploy User Guide</i>.'
        alarmConfiguration:
          $ref: '#/components/schemas/AlarmConfiguration'
          description: Information to add or change about Amazon CloudWatch alarms when the deployment group is updated.
        autoRollbackConfiguration:
          $ref: '#/components/schemas/AutoRollbackConfiguration'
          description: Information for an automatic rollback configuration that is added or changed when a deployment group is updated.
        outdatedInstancesStrategy:
          $ref: '#/components/schemas/OutdatedInstancesStrategy'
          description: '<p>Indicates what happens when new EC2 instances are launched mid-deployment and do not receive the deployed application revision.</p> <p>If this option is set to <code>UPDATE</code> or is unspecified, CodeDeploy initiates one or more ''auto-update outdated instances'' deployments to apply the deployed application revision to the new EC2 instances.</p> <p>If this option is set to <code>IGNORE</code>, CodeDeploy does not initiate a deployment to update the new EC2 instances. This may result in instances having different revisions.</p>'
        deploymentStyle:
          $ref: '#/components/schemas/DeploymentStyle'
          description: 'Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.'
        blueGreenDeploymentConfiguration:
          $ref: '#/components/schemas/BlueGreenDeploymentConfiguration'
          description: Information about blue/green deployment options for a deployment group.
        loadBalancerInfo:
          $ref: '#/components/schemas/LoadBalancerInfo'
          description: Information about the load balancer used in a deployment.
        ec2TagSet:
          $ref: '#/components/schemas/EC2TagSet'
          description: Information about groups of tags applied to on-premises instances. The deployment group includes only EC2 instances identified by all the tag groups.
        ecsServices:
          $ref: '#/components/schemas/ECSServiceList'
          description: ' The target Amazon ECS services in the deployment group. This applies only to deployment groups that use the Amazon ECS compute platform. A target Amazon ECS service is specified as an Amazon ECS cluster and service name pair using the format <code>&lt;clustername&gt;:&lt;servicename&gt;</code>. '
        onPremisesTagSet:
          $ref: '#/components/schemas/OnPremisesTagSet'
          description: Information about an on-premises instance tag set. The deployment group includes only on-premises instances identified by all the tag groups.
      description: Represents the input of an <code>UpdateDeploymentGroup</code> operation.
    TagList:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
    InstanceNameList:
      type: array
      items:
        $ref: '#/components/schemas/InstanceName'
    AdditionalDeploymentStatusInfo:
      type: string
      deprecated: true
      description: 'AdditionalDeploymentStatusInfo is deprecated, use DeploymentStatusMessageList instead.'
    AlarmName:
      type: string
    Alarm:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/AlarmName'
          description: The name of the alarm. Maximum length is 255 characters. Each alarm name can be used only once in a list of alarms.
      description: Information about an alarm.
    Boolean:
      type: boolean
    AlarmList:
      type: array
      items:
        $ref: '#/components/schemas/Alarm'
    AlarmConfiguration:
      type: object
      properties:
        enabled:
          $ref: '#/components/schemas/Boolean'
          description: Indicates whether the alarm configuration is enabled.
        ignorePollAlarmFailure:
          $ref: '#/components/schemas/Boolean'
          description: '<p>Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from Amazon CloudWatch. The default value is false.</p> <ul> <li> <p> <code>true</code>: The deployment proceeds even if alarm status information can''t be retrieved from Amazon CloudWatch.</p> </li> <li> <p> <code>false</code>: The deployment stops if alarm status information can''t be retrieved from Amazon CloudWatch.</p> </li> </ul>'
        alarms:
          $ref: '#/components/schemas/AlarmList'
          description: A list of alarms configured for the deployment group. A maximum of 10 alarms can be added to a deployment group.
      description: Information about alarms associated with the deployment group.
    RawStringContent:
      type: string
    RawStringSha256:
      type: string
    AppSpecContent:
      type: object
      properties:
        content:
          $ref: '#/components/schemas/RawStringContent'
          description: '<p> The YAML-formatted or JSON-formatted revision string. </p> <p> For an AWS Lambda deployment, the content includes a Lambda function name, the alias for its original version, and the alias for its replacement version. The deployment shifts traffic from the original version of the Lambda function to the replacement version. </p> <p> For an Amazon ECS deployment, the content includes the task name, information about the load balancer that serves traffic to the container, and more. </p> <p> For both types of deployments, the content can specify Lambda functions that run at specified hooks, such as <code>BeforeInstall</code>, during a deployment. </p>'
        sha256:
          $ref: '#/components/schemas/RawStringSha256'
          description: ' The SHA256 hash value of the revision content. '
      description: ' A revision for an AWS Lambda or Amazon ECS deployment that is a YAML-formatted or JSON-formatted string. For AWS Lambda and Amazon ECS deployments, the revision is the same as the AppSpec file. This method replaces the deprecated <code>RawString</code> data type. '
    ApplicationId:
      type: string
    ApplicationName:
      type: string
      minLength: 1
      maxLength: 100
    Timestamp:
      type: string
      format: date-time
    GitHubAccountTokenName:
      type: string
    ComputePlatform:
      type: string
      enum:
        - Server
        - Lambda
        - ECS
    ApplicationInfo:
      type: object
      properties:
        applicationId:
          $ref: '#/components/schemas/ApplicationId'
          description: The application ID.
        applicationName:
          $ref: '#/components/schemas/ApplicationName'
          description: The application name.
        createTime:
          $ref: '#/components/schemas/Timestamp'
          description: The time at which the application was created.
        linkedToGitHub:
          $ref: '#/components/schemas/Boolean'
          description: 'True if the user has authenticated with GitHub for the specified application. Otherwise, false.'
        gitHubAccountName:
          $ref: '#/components/schemas/GitHubAccountTokenName'
          description: The name for a connection to a GitHub account.
        computePlatform:
          $ref: '#/components/schemas/ComputePlatform'
          description: The destination platform type for deployment of the application (<code>Lambda</code> or <code>Server</code>).
      description: Information about an application.
    ApplicationRevisionSortBy:
      type: string
      enum:
        - registerTime
        - firstUsedTime
        - lastUsedTime
    ApplicationsInfoList:
      type: array
      items:
        $ref: '#/components/schemas/ApplicationInfo'
    ApplicationsList:
      type: array
      items:
        $ref: '#/components/schemas/ApplicationName'
    Arn:
      type: string
      minLength: 1
      maxLength: 1011
    AutoRollbackEventsList:
      type: array
      items:
        $ref: '#/components/schemas/AutoRollbackEvent'
    AutoRollbackConfiguration:
      type: object
      properties:
        enabled:
          $ref: '#/components/schemas/Boolean'
          description: Indicates whether a defined automatic rollback configuration is currently enabled.
        events:
          $ref: '#/components/schemas/AutoRollbackEventsList'
          description: The event type or types that trigger a rollback.
      description: Information about a configuration for automatically rolling back to a previous version of an application revision when a deployment is not completed successfully.
    AutoRollbackEvent:
      type: string
      enum:
        - DEPLOYMENT_FAILURE
        - DEPLOYMENT_STOP_ON_ALARM
        - DEPLOYMENT_STOP_ON_REQUEST
    AutoScalingGroupName:
      type: string
    AutoScalingGroupHook:
      type: string
    AutoScalingGroup:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/AutoScalingGroupName'
          description: The Auto Scaling group name.
        hook:
          $ref: '#/components/schemas/AutoScalingGroupHook'
          description: An Auto Scaling lifecycle event hook name.
      description: Information about an Auto Scaling group.
    AutoScalingGroupList:
      type: array
      items:
        $ref: '#/components/schemas/AutoScalingGroup'
    AutoScalingGroupNameList:
      type: array
      items:
        $ref: '#/components/schemas/AutoScalingGroupName'
    RevisionLocationList:
      type: array
      items:
        $ref: '#/components/schemas/RevisionLocation'
    ErrorMessage:
      type: string
    RevisionInfoList:
      type: array
      items:
        $ref: '#/components/schemas/RevisionInfo'
    DeploymentGroupsList:
      type: array
      items:
        $ref: '#/components/schemas/DeploymentGroupName'
    DeploymentGroupInfoList:
      type: array
      items:
        $ref: '#/components/schemas/DeploymentGroupInfo'
    DeploymentId:
      type: string
    InstancesList:
      type: array
      items:
        $ref: '#/components/schemas/InstanceId'
    InstanceSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/InstanceSummary'
    TargetIdList:
      type: array
      items:
        $ref: '#/components/schemas/TargetId'
    DeploymentTargetList:
      type: array
      items:
        $ref: '#/components/schemas/DeploymentTarget'
    DeploymentsList:
      type: array
      items:
        $ref: '#/components/schemas/DeploymentId'
    DeploymentsInfoList:
      type: array
      items:
        $ref: '#/components/schemas/DeploymentInfo'
    InstanceInfoList:
      type: array
      items:
        $ref: '#/components/schemas/InstanceInfo'
    BlueInstanceTerminationOption:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/InstanceAction'
          description: '<p>The action to take on instances in the original environment after a successful blue/green deployment.</p> <ul> <li> <p> <code>TERMINATE</code>: Instances are terminated after a specified wait time.</p> </li> <li> <p> <code>KEEP_ALIVE</code>: Instances are left running after they are deregistered from the load balancer and removed from the deployment group.</p> </li> </ul>'
        terminationWaitTimeInMinutes:
          $ref: '#/components/schemas/Duration'
          description: '<p>For an Amazon EC2 deployment, the number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.</p> <p> For an Amazon ECS deployment, the number of minutes before deleting the original (blue) task set. During an Amazon ECS deployment, CodeDeploy shifts traffic from the original (blue) task set to a replacement (green) task set. </p> <p> The maximum setting is 2880 minutes (2 days). </p>'
      description: 'Information about whether instances in the original environment are terminated when a blue/green deployment is successful. <code>BlueInstanceTerminationOption</code> does not apply to Lambda deployments. '
    DeploymentReadyOption:
      type: object
      properties:
        actionOnTimeout:
          $ref: '#/components/schemas/DeploymentReadyAction'
          description: '<p>Information about when to reroute traffic from an original environment to a replacement environment in a blue/green deployment.</p> <ul> <li> <p>CONTINUE_DEPLOYMENT: Register new instances with the load balancer immediately after the new application revision is installed on the instances in the replacement environment.</p> </li> <li> <p>STOP_DEPLOYMENT: Do not register new instances with a load balancer unless traffic rerouting is started using <a>ContinueDeployment</a>. If traffic rerouting is not started before the end of the specified wait period, the deployment status is changed to Stopped.</p> </li> </ul>'
        waitTimeInMinutes:
          $ref: '#/components/schemas/Duration'
          description: The number of minutes to wait before the status of a blue/green deployment is changed to Stopped if rerouting is not started manually. Applies only to the <code>STOP_DEPLOYMENT</code> option for <code>actionOnTimeout</code>.
      description: Information about how traffic is rerouted to instances in a replacement environment in a blue/green deployment.
    GreenFleetProvisioningOption:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/GreenFleetProvisioningAction'
          description: '<p>The method used to add instances to a replacement environment.</p> <ul> <li> <p> <code>DISCOVER_EXISTING</code>: Use instances that already exist or will be created manually.</p> </li> <li> <p> <code>COPY_AUTO_SCALING_GROUP</code>: Use settings from a specified Auto Scaling group to define and create instances in a new Auto Scaling group.</p> </li> </ul>'
      description: Information about the instances that belong to the replacement environment in a blue/green deployment.
    BlueGreenDeploymentConfiguration:
      type: object
      properties:
        terminateBlueInstancesOnDeploymentSuccess:
          $ref: '#/components/schemas/BlueInstanceTerminationOption'
          description: Information about whether to terminate instances in the original fleet during a blue/green deployment.
        deploymentReadyOption:
          $ref: '#/components/schemas/DeploymentReadyOption'
          description: Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment.
        greenFleetProvisioningOption:
          $ref: '#/components/schemas/GreenFleetProvisioningOption'
          description: Information about how instances are provisioned for a replacement environment in a blue/green deployment.
      description: Information about blue/green deployment options for a deployment group.
    InstanceAction:
      type: string
      enum:
        - TERMINATE
        - KEEP_ALIVE
    Duration:
      type: integer
    BundleType:
      type: string
      enum:
        - tar
        - tgz
        - zip
        - YAML
        - JSON
    CloudFormationResourceType:
      type: string
    TargetId:
      type: string
    Time:
      type: string
      format: date-time
    LifecycleEventList:
      type: array
      items:
        $ref: '#/components/schemas/LifecycleEvent'
    TargetStatus:
      type: string
      enum:
        - Pending
        - InProgress
        - Succeeded
        - Failed
        - Skipped
        - Unknown
        - Ready
    TrafficWeight:
      type: number
      format: double
    CloudFormationTarget:
      type: object
      properties:
        deploymentId:
          $ref: '#/components/schemas/DeploymentId'
          description: The unique ID of an AWS CloudFormation blue/green deployment.
        targetId:
          $ref: '#/components/schemas/TargetId'
          description: " The unique ID of a deployment target that has a type of\_<code>CloudFormationTarget</code>. "
        lastUpdatedAt:
          $ref: '#/components/schemas/Time'
          description: ' The date and time when the target application was updated by an AWS CloudFormation blue/green deployment. '
        lifecycleEvents:
          $ref: '#/components/schemas/LifecycleEventList'
          description: ' The lifecycle events of the AWS CloudFormation blue/green deployment to this target application. '
        status:
          $ref: '#/components/schemas/TargetStatus'
          description: ' The status of an AWS CloudFormation blue/green deployment''s target application. '
        resourceType:
          $ref: '#/components/schemas/CloudFormationResourceType'
          description: The resource type for the AWS CloudFormation blue/green deployment.
        targetVersionWeight:
          $ref: '#/components/schemas/TrafficWeight'
          description: The percentage of production traffic that the target version of an AWS CloudFormation blue/green deployment receives.
      description: ' Information about the target to be updated by an AWS CloudFormation blue/green deployment. This target type is used for all deployments initiated by a CloudFormation stack update.'
    CommitId:
      type: string
    DeploymentWaitType:
      type: string
      enum:
        - READY_WAIT
        - TERMINATION_WAIT
    DeploymentConfigName:
      type: string
      minLength: 1
      maxLength: 100
    MinimumHealthyHosts:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/MinimumHealthyHostsType'
          description: '<p>The minimum healthy instance type:</p> <ul> <li> <p> <code>HOST_COUNT</code>: The minimum number of healthy instances as an absolute value.</p> </li> <li> <p> <code>FLEET_PERCENT</code>: The minimum number of healthy instances as a percentage of the total number of instances in the deployment.</p> </li> </ul> <p>In an example of nine instances, if a HOST_COUNT of six is specified, deploy to up to three instances at a time. The deployment is successful if six or more instances are deployed to successfully. Otherwise, the deployment fails. If a FLEET_PERCENT of 40 is specified, deploy to up to five instances at a time. The deployment is successful if four or more instances are deployed to successfully. Otherwise, the deployment fails.</p> <note> <p>In a call to the <code>GetDeploymentConfig</code>, CodeDeployDefault.OneAtATime returns a minimum healthy instance type of MOST_CONCURRENCY and a value of 1. This means a deployment to only one instance at a time. (You cannot set the type to MOST_CONCURRENCY, only to HOST_COUNT or FLEET_PERCENT.) In addition, with CodeDeployDefault.OneAtATime, AWS CodeDeploy attempts to ensure that all instances but one are kept in a healthy state during the deployment. Although this allows one instance at a time to be taken offline for a new deployment, it also means that if the deployment to the last instance fails, the overall deployment is still successful.</p> </note> <p>For more information, see <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/instances-health.html">AWS CodeDeploy Instance Health</a> in the <i>AWS CodeDeploy User Guide</i>.</p>'
        value:
          $ref: '#/components/schemas/MinimumHealthyHostsValue'
          description: The minimum healthy instance value.
      description: Information about minimum healthy instance.
    TrafficRoutingConfig:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/TrafficRoutingType'
          description: The type of traffic shifting (<code>TimeBasedCanary</code> or <code>TimeBasedLinear</code>) used by a deployment configuration.
        timeBasedCanary:
          $ref: '#/components/schemas/TimeBasedCanary'
          description: A configuration that shifts traffic from one version of a Lambda function or ECS task set to another in two increments. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file.
        timeBasedLinear:
          $ref: '#/components/schemas/TimeBasedLinear'
          description: 'A configuration that shifts traffic from one version of a Lambda function or ECS task set to another in equal increments, with an equal number of minutes between each increment. The original and target Lambda function versions or ECS task sets are specified in the deployment''s AppSpec file.'
      description: 'The configuration that specifies how traffic is shifted from one version of a Lambda function to another version during an AWS Lambda deployment, or from one Amazon ECS task set to another during an Amazon ECS deployment.'
    DeploymentConfigId:
      type: string
    DeploymentGroupName:
      type: string
      minLength: 1
      maxLength: 100
    EC2TagFilterList:
      type: array
      items:
        $ref: '#/components/schemas/EC2TagFilter'
    TagFilterList:
      type: array
      items:
        $ref: '#/components/schemas/TagFilter'
    Role:
      type: string
    TriggerConfigList:
      type: array
      items:
        $ref: '#/components/schemas/TriggerConfig'
    OutdatedInstancesStrategy:
      type: string
      enum:
        - UPDATE
        - IGNORE
    DeploymentStyle:
      type: object
      properties:
        deploymentType:
          $ref: '#/components/schemas/DeploymentType'
          description: Indicates whether to run an in-place deployment or a blue/green deployment.
        deploymentOption:
          $ref: '#/components/schemas/DeploymentOption'
          description: Indicates whether to route deployment traffic behind a load balancer.
      description: 'Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.'
    LoadBalancerInfo:
      type: object
      properties:
        elbInfoList:
          $ref: '#/components/schemas/ELBInfoList'
          description: '<p>An array that contains information about the load balancer to use for load balancing in a deployment. In Elastic Load Balancing, load balancers are used with Classic Load Balancers.</p> <note> <p> Adding more than one load balancer to the array is not supported. </p> </note>'
        targetGroupInfoList:
          $ref: '#/components/schemas/TargetGroupInfoList'
          description: '<p>An array that contains information about the target group to use for load balancing in a deployment. In Elastic Load Balancing, target groups are used with Application Load Balancers.</p> <note> <p> Adding more than one target group to the array is not supported. </p> </note>'
        targetGroupPairInfoList:
          $ref: '#/components/schemas/TargetGroupPairInfoList'
          description: ' The target group pair information. This is an array of <code>TargeGroupPairInfo</code> objects with a maximum size of one. '
      description: Information about the Elastic Load Balancing load balancer or target group used in a deployment.
    EC2TagSet:
      type: object
      properties:
        ec2TagSetList:
          $ref: '#/components/schemas/EC2TagSetList'
          description: 'A list that contains other lists of EC2 instance tag groups. For an instance to be included in the deployment group, it must be identified by all of the tag groups in the list.'
      description: Information about groups of EC2 instance tags.
    ECSServiceList:
      type: array
      items:
        $ref: '#/components/schemas/ECSService'
    OnPremisesTagSet:
      type: object
      properties:
        onPremisesTagSetList:
          $ref: '#/components/schemas/OnPremisesTagSetList'
          description: 'A list that contains other lists of on-premises instance tag groups. For an instance to be included in the deployment group, it must be identified by all of the tag groups in the list.'
      description: Information about groups of on-premises instance tags.
    DeploymentGroupId:
      type: string
    RevisionLocation:
      type: object
      properties:
        revisionType:
          $ref: '#/components/schemas/RevisionLocationType'
          description: '<p>The type of application revision:</p> <ul> <li> <p>S3: An application revision stored in Amazon S3.</p> </li> <li> <p>GitHub: An application revision stored in GitHub (EC2/On-premises deployments only).</p> </li> <li> <p>String: A YAML-formatted or JSON-formatted string (AWS Lambda deployments only).</p> </li> <li> <p>AppSpecContent: An <code>AppSpecContent</code> object that contains the contents of an AppSpec file for an AWS Lambda or Amazon ECS deployment. The content is formatted as JSON or YAML stored as a RawString.</p> </li> </ul>'
        s3Location:
          $ref: '#/components/schemas/S3Location'
          description: 'Information about the location of a revision stored in Amazon S3. '
        gitHubLocation:
          $ref: '#/components/schemas/GitHubLocation'
          description: Information about the location of application artifacts stored in GitHub.
        string:
          $ref: '#/components/schemas/RawString'
          description: Information about the location of an AWS Lambda deployment revision stored as a RawString.
        appSpecContent:
          $ref: '#/components/schemas/AppSpecContent'
          description: ' The content of an AppSpec file for an AWS Lambda or Amazon ECS deployment. The content is formatted as JSON or YAML and stored as a RawString. '
      description: Information about the location of an application revision.
    Description:
      type: string
    TargetInstances:
      type: object
      properties:
        tagFilters:
          $ref: '#/components/schemas/EC2TagFilterList'
          description: 'The tag filter key, type, and value used to identify Amazon EC2 instances in a replacement environment for a blue/green deployment. Cannot be used in the same call as <code>ec2TagSet</code>.'
        autoScalingGroups:
          $ref: '#/components/schemas/AutoScalingGroupNameList'
          description: The names of one or more Auto Scaling groups to identify a replacement environment for a blue/green deployment.
        ec2TagSet:
          $ref: '#/components/schemas/EC2TagSet'
          description: Information about the groups of EC2 instance tags that an instance must be identified by in order for it to be included in the replacement environment for a blue/green deployment. Cannot be used in the same call as <code>tagFilters</code>.
      description: Information about the instances to be used in the replacement environment in a blue/green deployment.
    FileExistsBehavior:
      type: string
      enum:
        - DISALLOW
        - OVERWRITE
        - RETAIN
    ExternalId:
      type: string
    DeploymentConfigInfo:
      type: object
      properties:
        deploymentConfigId:
          $ref: '#/components/schemas/DeploymentConfigId'
          description: The deployment configuration ID.
        deploymentConfigName:
          $ref: '#/components/schemas/DeploymentConfigName'
          description: The deployment configuration name.
        minimumHealthyHosts:
          $ref: '#/components/schemas/MinimumHealthyHosts'
          description: Information about the number or percentage of minimum healthy instance.
        createTime:
          $ref: '#/components/schemas/Timestamp'
          description: The time at which the deployment configuration was created.
        computePlatform:
          $ref: '#/components/schemas/ComputePlatform'
          description: 'The destination platform type for the deployment (<code>Lambda</code>, <code>Server</code>, or <code>ECS</code>).'
        trafficRoutingConfig:
          $ref: '#/components/schemas/TrafficRoutingConfig'
          description: The configuration that specifies how the deployment traffic is routed. Used for deployments with a Lambda or ECS compute platform only.
      description: Information about a deployment configuration.
    DeploymentConfigsList:
      type: array
      items:
        $ref: '#/components/schemas/DeploymentConfigName'
    DeploymentCreator:
      type: string
      enum:
        - user
        - autoscaling
        - codeDeployRollback
        - CodeDeploy
        - CodeDeployAutoUpdate
        - CloudFormation
        - CloudFormationRollback
    LastDeploymentInfo:
      type: object
      properties:
        deploymentId:
          $ref: '#/components/schemas/DeploymentId'
          description: ' The unique ID of a deployment. '
        status:
          $ref: '#/components/schemas/DeploymentStatus'
          description: The status of the most recent deployment.
        endTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp that indicates when the most recent deployment to the deployment group was complete.
        createTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp that indicates when the most recent deployment to the deployment group started.
      description: Information about the most recent attempted or successful deployment to a deployment group.
    DeploymentGroupInfo:
      type: object
      properties:
        applicationName:
          $ref: '#/components/schemas/ApplicationName'
          description: The application name.
        deploymentGroupId:
          $ref: '#/components/schemas/DeploymentGroupId'
          description: The deployment group ID.
        deploymentGroupName:
          $ref: '#/components/schemas/DeploymentGroupName'
          description: The deployment group name.
        deploymentConfigName:
          $ref: '#/components/schemas/DeploymentConfigName'
          description: The deployment configuration name.
        ec2TagFilters:
          $ref: '#/components/schemas/EC2TagFilterList'
          description: The Amazon EC2 tags on which to filter. The deployment group includes EC2 instances with any of the specified tags.
        onPremisesInstanceTagFilters:
          $ref: '#/components/schemas/TagFilterList'
          description: The on-premises instance tags on which to filter. The deployment group includes on-premises instances with any of the specified tags.
        autoScalingGroups:
          $ref: '#/components/schemas/AutoScalingGroupList'
          description: A list of associated Auto Scaling groups.
        serviceRoleArn:
          $ref: '#/components/schemas/Role'
          description: 'A service role Amazon Resource Name (ARN) that grants CodeDeploy permission to make calls to AWS services on your behalf. For more information, see <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/getting-started-create-service-role.html">Create a Service Role for AWS CodeDeploy</a> in the <i>AWS CodeDeploy User Guide</i>.'
        targetRevision:
          $ref: '#/components/schemas/RevisionLocation'
          description: 'Information about the deployment group''s target revision, including type and location.'
        triggerConfigurations:
          $ref: '#/components/schemas/TriggerConfigList'
          description: Information about triggers associated with the deployment group.
        alarmConfiguration:
          $ref: '#/components/schemas/AlarmConfiguration'
          description: A list of alarms associated with the deployment group.
        autoRollbackConfiguration:
          $ref: '#/components/schemas/AutoRollbackConfiguration'
          description: Information about the automatic rollback configuration associated with the deployment group.
        deploymentStyle:
          $ref: '#/components/schemas/DeploymentStyle'
          description: 'Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.'
        outdatedInstancesStrategy:
          $ref: '#/components/schemas/OutdatedInstancesStrategy'
          description: '<p>Indicates what happens when new EC2 instances are launched mid-deployment and do not receive the deployed application revision.</p> <p>If this option is set to <code>UPDATE</code> or is unspecified, CodeDeploy initiates one or more ''auto-update outdated instances'' deployments to apply the deployed application revision to the new EC2 instances.</p> <p>If this option is set to <code>IGNORE</code>, CodeDeploy does not initiate a deployment to update the new EC2 instances. This may result in instances having different revisions.</p>'
        blueGreenDeploymentConfiguration:
          $ref: '#/components/schemas/BlueGreenDeploymentConfiguration'
          description: Information about blue/green deployment options for a deployment group.
        loadBalancerInfo:
          $ref: '#/components/schemas/LoadBalancerInfo'
          description: Information about the load balancer to use in a deployment.
        lastSuccessfulDeployment:
          $ref: '#/components/schemas/LastDeploymentInfo'
          description: Information about the most recent successful deployment to the deployment group.
        lastAttemptedDeployment:
          $ref: '#/components/schemas/LastDeploymentInfo'
          description: Information about the most recent attempted deployment to the deployment group.
        ec2TagSet:
          $ref: '#/components/schemas/EC2TagSet'
          description: Information about groups of tags applied to an EC2 instance. The deployment group includes only EC2 instances identified by all of the tag groups. Cannot be used in the same call as ec2TagFilters.
        onPremisesTagSet:
          $ref: '#/components/schemas/OnPremisesTagSet'
          description: Information about groups of tags applied to an on-premises instance. The deployment group includes only on-premises instances identified by all the tag groups. Cannot be used in the same call as onPremisesInstanceTagFilters.
        computePlatform:
          $ref: '#/components/schemas/ComputePlatform'
          description: 'The destination platform type for the deployment (<code>Lambda</code>, <code>Server</code>, or <code>ECS</code>).'
        ecsServices:
          $ref: '#/components/schemas/ECSServiceList'
          description: ' The target Amazon ECS services in the deployment group. This applies only to deployment groups that use the Amazon ECS compute platform. A target Amazon ECS service is specified as an Amazon ECS cluster and service name pair using the format <code>&lt;clustername&gt;:&lt;servicename&gt;</code>. '
      description: Information about a deployment group.
    DeploymentStatus:
      type: string
      enum:
        - Created
        - Queued
        - InProgress
        - Baking
        - Succeeded
        - Failed
        - Stopped
        - Ready
    ErrorInformation:
      type: object
      properties:
        code:
          $ref: '#/components/schemas/ErrorCode'
          description: '<p>For more information, see <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/error-codes.html">Error Codes for AWS CodeDeploy</a> in the <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide">AWS CodeDeploy User Guide</a>.</p> <p>The error code:</p> <ul> <li> <p>APPLICATION_MISSING: The application was missing. This error code is most likely raised if the application is deleted after the deployment is created, but before it is started.</p> </li> <li> <p>DEPLOYMENT_GROUP_MISSING: The deployment group was missing. This error code is most likely raised if the deployment group is deleted after the deployment is created, but before it is started.</p> </li> <li> <p>HEALTH_CONSTRAINTS: The deployment failed on too many instances to be successfully deployed within the instance health constraints specified.</p> </li> <li> <p>HEALTH_CONSTRAINTS_INVALID: The revision cannot be successfully deployed within the instance health constraints specified.</p> </li> <li> <p>IAM_ROLE_MISSING: The service role cannot be accessed.</p> </li> <li> <p>IAM_ROLE_PERMISSIONS: The service role does not have the correct permissions.</p> </li> <li> <p>INTERNAL_ERROR: There was an internal error.</p> </li> <li> <p>NO_EC2_SUBSCRIPTION: The calling account is not subscribed to Amazon EC2.</p> </li> <li> <p>NO_INSTANCES: No instances were specified, or no instances can be found.</p> </li> <li> <p>OVER_MAX_INSTANCES: The maximum number of instances was exceeded.</p> </li> <li> <p>THROTTLED: The operation was throttled because the calling account exceeded the throttling limits of one or more AWS services.</p> </li> <li> <p>TIMEOUT: The deployment has timed out.</p> </li> <li> <p>REVISION_MISSING: The revision ID was missing. This error code is most likely raised if the revision is deleted after the deployment is created, but before it is started.</p> </li> </ul>'
        message:
          $ref: '#/components/schemas/ErrorMessage'
          description: An accompanying error message.
      description: Information about a deployment error.
    DeploymentOverview:
      type: object
      properties:
        Pending:
          $ref: '#/components/schemas/InstanceCount'
          description: The number of instances in the deployment in a pending state.
        InProgress:
          $ref: '#/components/schemas/InstanceCount'
          description: The number of instances in which the deployment is in progress.
        Succeeded:
          $ref: '#/components/schemas/InstanceCount'
          description: The number of instances in the deployment to which revisions have been successfully deployed.
        Failed:
          $ref: '#/components/schemas/InstanceCount'
          description: The number of instances in the deployment in a failed state.
        Skipped:
          $ref: '#/components/schemas/InstanceCount'
          description: The number of instances in the deployment in a skipped state.
        Ready:
          $ref: '#/components/schemas/InstanceCount'
          description: The number of instances in a replacement environment ready to receive traffic in a blue/green deployment.
      description: Information about the deployment status of the instances in the deployment.
    RollbackInfo:
      type: object
      properties:
        rollbackDeploymentId:
          $ref: '#/components/schemas/DeploymentId'
          description: The ID of the deployment rollback.
        rollbackTriggeringDeploymentId:
          $ref: '#/components/schemas/DeploymentId'
          description: The deployment ID of the deployment that was underway and triggered a rollback deployment because it failed or was stopped.
        rollbackMessage:
          $ref: '#/components/schemas/Description'
          description: 'Information that describes the status of a deployment rollback (for example, whether the deployment can''t be rolled back, is in progress, failed, or succeeded). '
      description: Information about a deployment rollback.
    DeploymentStatusMessageList:
      type: array
      items:
        $ref: '#/components/schemas/ErrorMessage'
    RelatedDeployments:
      type: object
      properties:
        autoUpdateOutdatedInstancesRootDeploymentId:
          $ref: '#/components/schemas/DeploymentId'
          description: The deployment ID of the root deployment that triggered this deployment.
        autoUpdateOutdatedInstancesDeploymentIds:
          $ref: '#/components/schemas/DeploymentsList'
          description: The deployment IDs of 'auto-update outdated instances' deployments triggered by this deployment.
      description: Information about deployments related to the specified deployment.
    DeploymentInfo:
      type: object
      properties:
        applicationName:
          $ref: '#/components/schemas/ApplicationName'
          description: The application name.
        deploymentGroupName:
          $ref: '#/components/schemas/DeploymentGroupName'
          description: ' The deployment group name. '
        deploymentConfigName:
          $ref: '#/components/schemas/DeploymentConfigName'
          description: ' The deployment configuration name. '
        deploymentId:
          $ref: '#/components/schemas/DeploymentId'
          description: ' The unique ID of a deployment. '
        previousRevision:
          $ref: '#/components/schemas/RevisionLocation'
          description: Information about the application revision that was deployed to the deployment group before the most recent successful deployment.
        revision:
          $ref: '#/components/schemas/RevisionLocation'
          description: Information about the location of stored application artifacts and the service from which to retrieve them.
        status:
          $ref: '#/components/schemas/DeploymentStatus'
          description: The current state of the deployment as a whole.
        errorInformation:
          $ref: '#/components/schemas/ErrorInformation'
          description: Information about any error associated with this deployment.
        createTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp that indicates when the deployment was created.
        startTime:
          $ref: '#/components/schemas/Timestamp'
          description: '<p>A timestamp that indicates when the deployment was deployed to the deployment group.</p> <p>In some cases, the reported value of the start time might be later than the complete time. This is due to differences in the clock settings of backend servers that participate in the deployment process.</p>'
        completeTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp that indicates when the deployment was complete.
        deploymentOverview:
          $ref: '#/components/schemas/DeploymentOverview'
          description: A summary of the deployment status of the instances in the deployment.
        description:
          $ref: '#/components/schemas/Description'
          description: A comment about the deployment.
        creator:
          $ref: '#/components/schemas/DeploymentCreator'
          description: '<p>The means by which the deployment was created:</p> <ul> <li> <p> <code>user</code>: A user created the deployment.</p> </li> <li> <p> <code>autoscaling</code>: Amazon EC2 Auto Scaling created the deployment.</p> </li> <li> <p> <code>codeDeployRollback</code>: A rollback process created the deployment.</p> </li> <li> <p> <code>CodeDeployAutoUpdate</code>: An auto-update process created the deployment when it detected outdated EC2 instances.</p> </li> </ul>'
        ignoreApplicationStopFailures:
          $ref: '#/components/schemas/Boolean'
          description: '<p> If true, then if an <code>ApplicationStop</code>, <code>BeforeBlockTraffic</code>, or <code>AfterBlockTraffic</code> deployment lifecycle event to an instance fails, then the deployment continues to the next deployment lifecycle event. For example, if <code>ApplicationStop</code> fails, the deployment continues with DownloadBundle. If <code>BeforeBlockTraffic</code> fails, the deployment continues with <code>BlockTraffic</code>. If <code>AfterBlockTraffic</code> fails, the deployment continues with <code>ApplicationStop</code>. </p> <p> If false or not specified, then if a lifecycle event fails during a deployment to an instance, that deployment fails. If deployment to that instance is part of an overall deployment and the number of healthy hosts is not less than the minimum number of healthy hosts, then a deployment to the next instance is attempted. </p> <p> During a deployment, the AWS CodeDeploy agent runs the scripts specified for <code>ApplicationStop</code>, <code>BeforeBlockTraffic</code>, and <code>AfterBlockTraffic</code> in the AppSpec file from the previous successful deployment. (All other scripts are run from the AppSpec file in the current deployment.) If one of these scripts contains an error and does not run successfully, the deployment can fail. </p> <p> If the cause of the failure is a script from the last successful deployment that will never run successfully, create a new deployment and use <code>ignoreApplicationStopFailures</code> to specify that the <code>ApplicationStop</code>, <code>BeforeBlockTraffic</code>, and <code>AfterBlockTraffic</code> failures should be ignored. </p>'
        autoRollbackConfiguration:
          $ref: '#/components/schemas/AutoRollbackConfiguration'
          description: Information about the automatic rollback configuration associated with the deployment.
        updateOutdatedInstancesOnly:
          $ref: '#/components/schemas/Boolean'
          description: Indicates whether only instances that are not running the latest application revision are to be deployed to.
        rollbackInfo:
          $ref: '#/components/schemas/RollbackInfo'
          description: Information about a deployment rollback.
        deploymentStyle:
          $ref: '#/components/schemas/DeploymentStyle'
          description: 'Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.'
        targetInstances:
          $ref: '#/components/schemas/TargetInstances'
          description: Information about the instances that belong to the replacement environment in a blue/green deployment.
        instanceTerminationWaitTimeStarted:
          $ref: '#/components/schemas/Boolean'
          description: 'Indicates whether the wait period set for the termination of instances in the original environment has started. Status is ''false'' if the KEEP_ALIVE option is specified. Otherwise, ''true'' as soon as the termination wait period starts.'
        blueGreenDeploymentConfiguration:
          $ref: '#/components/schemas/BlueGreenDeploymentConfiguration'
          description: Information about blue/green deployment options for this deployment.
        loadBalancerInfo:
          $ref: '#/components/schemas/LoadBalancerInfo'
          description: Information about the load balancer used in the deployment.
        additionalDeploymentStatusInfo:
          $ref: '#/components/schemas/AdditionalDeploymentStatusInfo'
          description: 'Provides information about the results of a deployment, such as whether instances in the original environment in a blue/green deployment were not terminated.'
        fileExistsBehavior:
          $ref: '#/components/schemas/FileExistsBehavior'
          description: '<p>Information about how AWS CodeDeploy handles files that already exist in a deployment target location but weren''t part of the previous successful deployment.</p> <ul> <li> <p> <code>DISALLOW</code>: The deployment fails. This is also the default behavior if no option is specified.</p> </li> <li> <p> <code>OVERWRITE</code>: The version of the file from the application revision currently being deployed replaces the version already on the instance.</p> </li> <li> <p> <code>RETAIN</code>: The version of the file already on the instance is kept and used as part of the new deployment.</p> </li> </ul>'
        deploymentStatusMessages:
          $ref: '#/components/schemas/DeploymentStatusMessageList'
          description: Messages that contain information about the status of a deployment.
        computePlatform:
          $ref: '#/components/schemas/ComputePlatform'
          description: 'The destination platform type for the deployment (<code>Lambda</code>, <code>Server</code>, or <code>ECS</code>).'
        externalId:
          $ref: '#/components/schemas/ExternalId'
          description: 'The unique ID for an external resource (for example, a CloudFormation stack ID) that is linked to this deployment.'
        relatedDeployments:
          $ref: '#/components/schemas/RelatedDeployments'
      description: Information about a deployment.
    DeploymentOption:
      type: string
      enum:
        - WITH_TRAFFIC_CONTROL
        - WITHOUT_TRAFFIC_CONTROL
    InstanceCount:
      type: integer
    DeploymentReadyAction:
      type: string
      enum:
        - CONTINUE_DEPLOYMENT
        - STOP_DEPLOYMENT
    DeploymentStatusList:
      type: array
      items:
        $ref: '#/components/schemas/DeploymentStatus'
    DeploymentType:
      type: string
      enum:
        - IN_PLACE
        - BLUE_GREEN
    DeploymentTargetType:
      type: string
      enum:
        - InstanceTarget
        - LambdaTarget
        - ECSTarget
        - CloudFormationTarget
    InstanceTarget:
      type: object
      properties:
        deploymentId:
          $ref: '#/components/schemas/DeploymentId'
          description: ' The unique ID of a deployment. '
        targetId:
          $ref: '#/components/schemas/TargetId'
          description: ' The unique ID of a deployment target that has a type of <code>instanceTarget</code>. '
        targetArn:
          $ref: '#/components/schemas/TargetArn'
          description: ' The Amazon Resource Name (ARN) of the target. '
        status:
          $ref: '#/components/schemas/TargetStatus'
          description: ' The status an EC2/On-premises deployment''s target instance. '
        lastUpdatedAt:
          $ref: '#/components/schemas/Time'
          description: ' The date and time when the target instance was updated by a deployment. '
        lifecycleEvents:
          $ref: '#/components/schemas/LifecycleEventList'
          description: ' The lifecycle events of the deployment to this target instance. '
        instanceLabel:
          $ref: '#/components/schemas/TargetLabel'
          description: ' A label that identifies whether the instance is an original target (<code>BLUE</code>) or a replacement target (<code>GREEN</code>). '
      description: ' A target Amazon EC2 or on-premises instance during a deployment that uses the EC2/On-premises compute platform. '
    LambdaTarget:
      type: object
      properties:
        deploymentId:
          $ref: '#/components/schemas/DeploymentId'
          description: ' The unique ID of a deployment. '
        targetId:
          $ref: '#/components/schemas/TargetId'
          description: ' The unique ID of a deployment target that has a type of <code>lambdaTarget</code>. '
        targetArn:
          $ref: '#/components/schemas/TargetArn'
          description: ' The Amazon Resource Name (ARN) of the target. '
        status:
          $ref: '#/components/schemas/TargetStatus'
          description: ' The status an AWS Lambda deployment''s target Lambda function. '
        lastUpdatedAt:
          $ref: '#/components/schemas/Time'
          description: ' The date and time when the target Lambda function was updated by a deployment. '
        lifecycleEvents:
          $ref: '#/components/schemas/LifecycleEventList'
          description: ' The lifecycle events of the deployment to this target Lambda function. '
        lambdaFunctionInfo:
          $ref: '#/components/schemas/LambdaFunctionInfo'
          description: ' A <code>LambdaFunctionInfo</code> object that describes a target Lambda function. '
      description: ' Information about the target AWS Lambda function during an AWS Lambda deployment. '
    ECSTarget:
      type: object
      properties:
        deploymentId:
          $ref: '#/components/schemas/DeploymentId'
          description: ' The unique ID of a deployment. '
        targetId:
          $ref: '#/components/schemas/TargetId'
          description: ' The unique ID of a deployment target that has a type of <code>ecsTarget</code>. '
        targetArn:
          $ref: '#/components/schemas/TargetArn'
          description: ' The Amazon Resource Name (ARN) of the target. '
        lastUpdatedAt:
          $ref: '#/components/schemas/Time'
          description: ' The date and time when the target Amazon ECS application was updated by a deployment. '
        lifecycleEvents:
          $ref: '#/components/schemas/LifecycleEventList'
          description: ' The lifecycle events of the deployment to this target Amazon ECS application. '
        status:
          $ref: '#/components/schemas/TargetStatus'
          description: ' The status an Amazon ECS deployment''s target ECS application. '
        taskSetsInfo:
          $ref: '#/components/schemas/ECSTaskSetList'
          description: ' The <code>ECSTaskSet</code> objects associated with the ECS target. '
      description: ' Information about the target of an Amazon ECS deployment. '
    DeploymentTarget:
      type: object
      properties:
        deploymentTargetType:
          $ref: '#/components/schemas/DeploymentTargetType'
          description: The deployment type that is specific to the deployment's compute platform or deployments initiated by a CloudFormation stack update.
        instanceTarget:
          $ref: '#/components/schemas/InstanceTarget'
          description: ' Information about the target for a deployment that uses the EC2/On-premises compute platform. '
        lambdaTarget:
          $ref: '#/components/schemas/LambdaTarget'
          description: ' Information about the target for a deployment that uses the AWS Lambda compute platform. '
        ecsTarget:
          $ref: '#/components/schemas/ECSTarget'
          description: ' Information about the target for a deployment that uses the Amazon ECS compute platform. '
        cloudFormationTarget:
          $ref: '#/components/schemas/CloudFormationTarget'
      description: ' Information about the deployment target. '
    InstanceName:
      type: string
    LifecycleErrorCode:
      type: string
      enum:
        - Success
        - ScriptMissing
        - ScriptNotExecutable
        - ScriptTimedOut
        - ScriptFailed
        - UnknownError
    ScriptName:
      type: string
    LifecycleMessage:
      type: string
    LogTail:
      type: string
    Diagnostics:
      type: object
      properties:
        errorCode:
          $ref: '#/components/schemas/LifecycleErrorCode'
          description: '<p>The associated error code:</p> <ul> <li> <p>Success: The specified script ran.</p> </li> <li> <p>ScriptMissing: The specified script was not found in the specified location.</p> </li> <li> <p>ScriptNotExecutable: The specified script is not a recognized executable file type.</p> </li> <li> <p>ScriptTimedOut: The specified script did not finish running in the specified time period.</p> </li> <li> <p>ScriptFailed: The specified script failed to run as expected.</p> </li> <li> <p>UnknownError: The specified script did not run for an unknown reason.</p> </li> </ul>'
        scriptName:
          $ref: '#/components/schemas/ScriptName'
          description: The name of the script.
        message:
          $ref: '#/components/schemas/LifecycleMessage'
          description: The message associated with the error.
        logTail:
          $ref: '#/components/schemas/LogTail'
          description: '<p>The last portion of the diagnostic log.</p> <p>If available, AWS CodeDeploy returns up to the last 4 KB of the diagnostic log.</p>'
      description: Diagnostic information about executable scripts that are part of a deployment.
    Key:
      type: string
    Value:
      type: string
    EC2TagFilterType:
      type: string
      enum:
        - KEY_ONLY
        - VALUE_ONLY
        - KEY_AND_VALUE
    EC2TagFilter:
      type: object
      properties:
        Key:
          $ref: '#/components/schemas/Key'
          description: The tag filter key.
        Value:
          $ref: '#/components/schemas/Value'
          description: The tag filter value.
        Type:
          $ref: '#/components/schemas/EC2TagFilterType'
          description: '<p>The tag filter type:</p> <ul> <li> <p> <code>KEY_ONLY</code>: Key only.</p> </li> <li> <p> <code>VALUE_ONLY</code>: Value only.</p> </li> <li> <p> <code>KEY_AND_VALUE</code>: Key and value.</p> </li> </ul>'
      description: Information about an EC2 tag filter.
    EC2TagSetList:
      type: array
      items:
        $ref: '#/components/schemas/EC2TagFilterList'
    ECSClusterName:
      type: string
    ECSServiceName:
      type: string
    ECSService:
      type: object
      properties:
        serviceName:
          $ref: '#/components/schemas/ECSServiceName'
          description: ' The name of the target Amazon ECS service. '
        clusterName:
          $ref: '#/components/schemas/ECSClusterName'
          description: ' The name of the cluster that the Amazon ECS service is associated with. '
      description: ' Contains the service and cluster names used to identify an Amazon ECS deployment''s target. '
    TargetArn:
      type: string
    ECSTaskSetList:
      type: array
      items:
        $ref: '#/components/schemas/ECSTaskSet'
    ECSTaskSetIdentifier:
      type: string
    ECSTaskSetCount:
      type: integer
    ECSTaskSetStatus:
      type: string
    TargetGroupInfo:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/TargetGroupName'
          description: 'For blue/green deployments, the name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment are registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment is complete. '
      description: 'Information about a target group in Elastic Load Balancing to use in a deployment. Instances are registered as targets in a target group, and traffic is routed to the target group.'
    TargetLabel:
      type: string
      enum:
        - Blue
        - Green
    ECSTaskSet:
      type: object
      properties:
        identifer:
          $ref: '#/components/schemas/ECSTaskSetIdentifier'
          description: ' A unique ID of an <code>ECSTaskSet</code>. '
        desiredCount:
          $ref: '#/components/schemas/ECSTaskSetCount'
          description: ' The number of tasks in a task set. During a deployment that uses the Amazon ECS compute type, CodeDeploy instructs Amazon ECS to create a new task set and uses this value to determine how many tasks to create. After the updated task set is created, CodeDeploy shifts traffic to the new task set. '
        pendingCount:
          $ref: '#/components/schemas/ECSTaskSetCount'
          description: ' The number of tasks in the task set that are in the <code>PENDING</code> status during an Amazon ECS deployment. A task in the <code>PENDING</code> state is preparing to enter the <code>RUNNING</code> state. A task set enters the <code>PENDING</code> status when it launches for the first time, or when it is restarted after being in the <code>STOPPED</code> state. '
        runningCount:
          $ref: '#/components/schemas/ECSTaskSetCount'
          description: ' The number of tasks in the task set that are in the <code>RUNNING</code> status during an Amazon ECS deployment. A task in the <code>RUNNING</code> state is running and ready for use. '
        status:
          $ref: '#/components/schemas/ECSTaskSetStatus'
          description: '<p> The status of the task set. There are three valid task set statuses: </p> <ul> <li> <p> <code>PRIMARY</code>: Indicates the task set is serving production traffic. </p> </li> <li> <p> <code>ACTIVE</code>: Indicates the task set is not serving production traffic. </p> </li> <li> <p> <code>DRAINING</code>: Indicates the tasks in the task set are being stopped and their corresponding targets are being deregistered from their target group. </p> </li> </ul>'
        trafficWeight:
          $ref: '#/components/schemas/TrafficWeight'
          description: ' The percentage of traffic served by this task set. '
        targetGroup:
          $ref: '#/components/schemas/TargetGroupInfo'
          description: ' The target group associated with the task set. The target group is used by AWS CodeDeploy to manage traffic to a task set. '
        taskSetLabel:
          $ref: '#/components/schemas/TargetLabel'
          description: ' A label that identifies whether the ECS task set is an original target (<code>BLUE</code>) or a replacement target (<code>GREEN</code>). '
      description: ' Information about a set of Amazon ECS tasks in an AWS CodeDeploy deployment. An Amazon ECS task set includes details such as the desired number of tasks, how many tasks are running, and whether the task set serves production traffic. An AWS CodeDeploy application that uses the Amazon ECS compute platform deploys a containerized application in an Amazon ECS service as a task set. '
    ELBName:
      type: string
    ELBInfo:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ELBName'
          description: 'For blue/green deployments, the name of the load balancer that is used to route traffic from original instances to replacement instances in a blue/green deployment. For in-place deployments, the name of the load balancer that instances are deregistered from so they are not serving traffic during a deployment, and then re-registered with after the deployment is complete.'
      description: 'Information about a load balancer in Elastic Load Balancing to use in a deployment. Instances are registered directly with a load balancer, and traffic is routed to the load balancer.'
    ELBInfoList:
      type: array
      items:
        $ref: '#/components/schemas/ELBInfo'
    ETag:
      type: string
    ErrorCode:
      type: string
      enum:
        - AGENT_ISSUE
        - ALARM_ACTIVE
        - APPLICATION_MISSING
        - AUTOSCALING_VALIDATION_ERROR
        - AUTO_SCALING_CONFIGURATION
        - AUTO_SCALING_IAM_ROLE_PERMISSIONS
        - CODEDEPLOY_RESOURCE_CANNOT_BE_FOUND
        - CUSTOMER_APPLICATION_UNHEALTHY
        - DEPLOYMENT_GROUP_MISSING
        - ECS_UPDATE_ERROR
        - ELASTIC_LOAD_BALANCING_INVALID
        - ELB_INVALID_INSTANCE
        - HEALTH_CONSTRAINTS
        - HEALTH_CONSTRAINTS_INVALID
        - HOOK_EXECUTION_FAILURE
        - IAM_ROLE_MISSING
        - IAM_ROLE_PERMISSIONS
        - INTERNAL_ERROR
        - INVALID_ECS_SERVICE
        - INVALID_LAMBDA_CONFIGURATION
        - INVALID_LAMBDA_FUNCTION
        - INVALID_REVISION
        - MANUAL_STOP
        - MISSING_BLUE_GREEN_DEPLOYMENT_CONFIGURATION
        - MISSING_ELB_INFORMATION
        - MISSING_GITHUB_TOKEN
        - NO_EC2_SUBSCRIPTION
        - NO_INSTANCES
        - OVER_MAX_INSTANCES
        - RESOURCE_LIMIT_EXCEEDED
        - REVISION_MISSING
        - THROTTLED
        - TIMEOUT
        - CLOUDFORMATION_STACK_FAILURE
    FilterValue:
      type: string
    FilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/FilterValue'
    GenericRevisionInfo:
      type: object
      properties:
        description:
          $ref: '#/components/schemas/Description'
          description: A comment about the revision.
        deploymentGroups:
          $ref: '#/components/schemas/DeploymentGroupsList'
          description: The deployment groups for which this is the current target revision.
        firstUsedTime:
          $ref: '#/components/schemas/Timestamp'
          description: When the revision was first used by AWS CodeDeploy.
        lastUsedTime:
          $ref: '#/components/schemas/Timestamp'
          description: When the revision was last used by AWS CodeDeploy.
        registerTime:
          $ref: '#/components/schemas/Timestamp'
          description: When the revision was registered with AWS CodeDeploy.
      description: Information about an application revision.
    InstanceId:
      type: string
    InstanceSummary:
      type: object
      deprecated: true
      properties:
        deploymentId:
          $ref: '#/components/schemas/DeploymentId'
          description: ' The unique ID of a deployment. '
        instanceId:
          $ref: '#/components/schemas/InstanceId'
          description: The instance ID.
        status:
          $ref: '#/components/schemas/InstanceStatus'
          description: '<p>The deployment status for this instance:</p> <ul> <li> <p> <code>Pending</code>: The deployment is pending for this instance.</p> </li> <li> <p> <code>In Progress</code>: The deployment is in progress for this instance.</p> </li> <li> <p> <code>Succeeded</code>: The deployment has succeeded for this instance.</p> </li> <li> <p> <code>Failed</code>: The deployment has failed for this instance.</p> </li> <li> <p> <code>Skipped</code>: The deployment has been skipped for this instance.</p> </li> <li> <p> <code>Unknown</code>: The deployment status is unknown for this instance.</p> </li> </ul>'
        lastUpdatedAt:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp that indicates when the instance information was last updated.
        lifecycleEvents:
          $ref: '#/components/schemas/LifecycleEventList'
          description: A list of lifecycle events for this instance.
        instanceType:
          $ref: '#/components/schemas/InstanceType'
          description: '<p>Information about which environment an instance belongs to in a blue/green deployment.</p> <ul> <li> <p>BLUE: The instance is part of the original environment.</p> </li> <li> <p>GREEN: The instance is part of the replacement environment.</p> </li> </ul>'
      description: 'Information about an instance in a deployment.InstanceSummary is deprecated, use DeploymentTarget instead.'
    InstanceInfo:
      type: object
      properties:
        instanceName:
          $ref: '#/components/schemas/InstanceName'
          description: The name of the on-premises instance.
        iamSessionArn:
          $ref: '#/components/schemas/IamSessionArn'
          description: The ARN of the IAM session associated with the on-premises instance.
        iamUserArn:
          $ref: '#/components/schemas/IamUserArn'
          description: The IAM user ARN associated with the on-premises instance.
        instanceArn:
          $ref: '#/components/schemas/InstanceArn'
          description: The ARN of the on-premises instance.
        registerTime:
          $ref: '#/components/schemas/Timestamp'
          description: The time at which the on-premises instance was registered.
        deregisterTime:
          $ref: '#/components/schemas/Timestamp'
          description: 'If the on-premises instance was deregistered, the time at which the on-premises instance was deregistered.'
        tags:
          $ref: '#/components/schemas/TagList'
          description: The tags currently associated with the on-premises instance.
      description: Information about an on-premises instance.
    GitHubAccountTokenNameList:
      type: array
      items:
        $ref: '#/components/schemas/GitHubAccountTokenName'
    Repository:
      type: string
    GitHubLocation:
      type: object
      properties:
        repository:
          $ref: '#/components/schemas/Repository'
          description: <p>The GitHub account and repository pair that stores a reference to the commit that represents the bundled artifacts for the application revision. </p> <p>Specified as account/repository.</p>
        commitId:
          $ref: '#/components/schemas/CommitId'
          description: The SHA1 commit ID of the GitHub commit that represents the bundled artifacts for the application revision.
      description: Information about the location of application artifacts stored in GitHub.
    GreenFleetProvisioningAction:
      type: string
      enum:
        - DISCOVER_EXISTING
        - COPY_AUTO_SCALING_GROUP
    IamSessionArn:
      type: string
    IamUserArn:
      type: string
    InstanceArn:
      type: string
    InstanceStatus:
      type: string
      deprecated: true
      enum:
        - Pending
        - InProgress
        - Succeeded
        - Failed
        - Skipped
        - Unknown
        - Ready
      description: 'InstanceStatus is deprecated, use TargetStatus instead.'
    InstanceStatusList:
      type: array
      items:
        $ref: '#/components/schemas/InstanceStatus'
    InstanceType:
      type: string
      enum:
        - Blue
        - Green
    InstanceTypeList:
      type: array
      items:
        $ref: '#/components/schemas/InstanceType'
    LambdaFunctionAlias:
      type: string
    LambdaFunctionName:
      type: string
    Version:
      type: string
    LambdaFunctionInfo:
      type: object
      properties:
        functionName:
          $ref: '#/components/schemas/LambdaFunctionName'
          description: ' The name of a Lambda function. '
        functionAlias:
          $ref: '#/components/schemas/LambdaFunctionAlias'
          description: ' The alias of a Lambda function. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/aliases-intro.html">AWS Lambda Function Aliases</a> in the <i>AWS Lambda Developer Guide</i>.'
        currentVersion:
          $ref: '#/components/schemas/Version'
          description: ' The version of a Lambda function that production traffic points to. '
        targetVersion:
          $ref: '#/components/schemas/Version'
          description: ' The version of a Lambda function that production traffic points to after the Lambda function is deployed. '
        targetVersionWeight:
          $ref: '#/components/schemas/TrafficWeight'
          description: ' The percentage of production traffic that the target version of a Lambda function receives. '
      description: ' Information about a Lambda function specified in a deployment. '
    LifecycleEventName:
      type: string
    LifecycleEventStatus:
      type: string
      enum:
        - Pending
        - InProgress
        - Succeeded
        - Failed
        - Skipped
        - Unknown
    LifecycleEvent:
      type: object
      properties:
        lifecycleEventName:
          $ref: '#/components/schemas/LifecycleEventName'
          description: 'The deployment lifecycle event name, such as <code>ApplicationStop</code>, <code>BeforeInstall</code>, <code>AfterInstall</code>, <code>ApplicationStart</code>, or <code>ValidateService</code>.'
        diagnostics:
          $ref: '#/components/schemas/Diagnostics'
          description: Diagnostic information about the deployment lifecycle event.
        startTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp that indicates when the deployment lifecycle event started.
        endTime:
          $ref: '#/components/schemas/Timestamp'
          description: A timestamp that indicates when the deployment lifecycle event ended.
        status:
          $ref: '#/components/schemas/LifecycleEventStatus'
          description: '<p>The deployment lifecycle event status:</p> <ul> <li> <p>Pending: The deployment lifecycle event is pending.</p> </li> <li> <p>InProgress: The deployment lifecycle event is in progress.</p> </li> <li> <p>Succeeded: The deployment lifecycle event ran successfully.</p> </li> <li> <p>Failed: The deployment lifecycle event has failed.</p> </li> <li> <p>Skipped: The deployment lifecycle event has been skipped.</p> </li> <li> <p>Unknown: The deployment lifecycle event is unknown.</p> </li> </ul>'
      description: Information about a deployment lifecycle event.
    LifecycleEventHookExecutionId:
      type: string
    SortOrder:
      type: string
      enum:
        - ascending
        - descending
    S3Bucket:
      type: string
    S3Key:
      type: string
    ListStateFilterAction:
      type: string
      enum:
        - include
        - exclude
        - ignore
    NextToken:
      type: string
    TargetFilters:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/FilterValueList'
    TimeRange:
      type: object
      properties:
        start:
          $ref: '#/components/schemas/Timestamp'
          description: <p>The start time of the time range.</p> <note> <p>Specify null to leave the start time open-ended.</p> </note>
        end:
          $ref: '#/components/schemas/Timestamp'
          description: <p>The end time of the time range.</p> <note> <p>Specify null to leave the end time open-ended.</p> </note>
      description: Information about a time range.
    RegistrationStatus:
      type: string
      enum:
        - Registered
        - Deregistered
    ListenerArn:
      type: string
    ListenerArnList:
      type: array
      items:
        $ref: '#/components/schemas/ListenerArn'
    TargetGroupInfoList:
      type: array
      items:
        $ref: '#/components/schemas/TargetGroupInfo'
    TargetGroupPairInfoList:
      type: array
      items:
        $ref: '#/components/schemas/TargetGroupPairInfo'
    Message:
      type: string
    MinimumHealthyHostsType:
      type: string
      enum:
        - HOST_COUNT
        - FLEET_PERCENT
    MinimumHealthyHostsValue:
      type: integer
    NullableBoolean:
      type: boolean
    OnPremisesTagSetList:
      type: array
      items:
        $ref: '#/components/schemas/TagFilterList'
    Percentage:
      type: integer
    RawString:
      type: object
      deprecated: true
      properties:
        content:
          $ref: '#/components/schemas/RawStringContent'
          description: The YAML-formatted or JSON-formatted revision string. It includes information about which Lambda function to update and optional Lambda functions that validate deployment lifecycle events.
        sha256:
          $ref: '#/components/schemas/RawStringSha256'
          description: The SHA256 hash value of the revision content.
      description: 'A revision for an AWS Lambda deployment that is a YAML-formatted or JSON-formatted string. For AWS Lambda deployments, the revision is the same as the AppSpec file.RawString and String revision type are deprecated, use AppSpecContent type instead.'
    RevisionInfo:
      type: object
      properties:
        revisionLocation:
          $ref: '#/components/schemas/RevisionLocation'
          description: Information about the location and type of an application revision.
        genericRevisionInfo:
          $ref: '#/components/schemas/GenericRevisionInfo'
          description: 'Information about an application revision, including usage details and associated deployment groups.'
      description: Information about an application revision.
    RevisionLocationType:
      type: string
      enum:
        - S3
        - GitHub
        - String
        - AppSpecContent
    S3Location:
      type: object
      properties:
        bucket:
          $ref: '#/components/schemas/S3Bucket'
          description: The name of the Amazon S3 bucket where the application revision is stored.
        key:
          $ref: '#/components/schemas/S3Key'
          description: The name of the Amazon S3 object that represents the bundled artifacts for the application revision.
        bundleType:
          $ref: '#/components/schemas/BundleType'
          description: '<p>The file type of the application revision. Must be one of the following:</p> <ul> <li> <p> <code>tar</code>: A tar archive file.</p> </li> <li> <p> <code>tgz</code>: A compressed tar archive file.</p> </li> <li> <p> <code>zip</code>: A zip archive file.</p> </li> </ul>'
        version:
          $ref: '#/components/schemas/VersionId'
          description: '<p>A specific version of the Amazon S3 object that represents the bundled artifacts for the application revision.</p> <p>If the version is not specified, the system uses the most recent version by default.</p>'
        eTag:
          $ref: '#/components/schemas/ETag'
          description: '<p>The ETag of the Amazon S3 object that represents the bundled artifacts for the application revision.</p> <p>If the ETag is not specified as an input parameter, ETag validation of the object is skipped.</p>'
      description: Information about the location of application artifacts stored in Amazon S3.
    VersionId:
      type: string
    StopStatus:
      type: string
      enum:
        - Pending
        - Succeeded
    Tag:
      type: object
      properties:
        Key:
          $ref: '#/components/schemas/Key'
          description: The tag's key.
        Value:
          $ref: '#/components/schemas/Value'
          description: The tag's value.
      description: Information about a tag.
    TagFilterType:
      type: string
      enum:
        - KEY_ONLY
        - VALUE_ONLY
        - KEY_AND_VALUE
    TagFilter:
      type: object
      properties:
        Key:
          $ref: '#/components/schemas/Key'
          description: The on-premises instance tag filter key.
        Value:
          $ref: '#/components/schemas/Value'
          description: The on-premises instance tag filter value.
        Type:
          $ref: '#/components/schemas/TagFilterType'
          description: '<p>The on-premises instance tag filter type:</p> <ul> <li> <p>KEY_ONLY: Key only.</p> </li> <li> <p>VALUE_ONLY: Value only.</p> </li> <li> <p>KEY_AND_VALUE: Key and value.</p> </li> </ul>'
      description: Information about an on-premises instance tag filter.
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/Key'
    TargetFilterName:
      type: string
      enum:
        - TargetStatus
        - ServerInstanceLabel
    TargetGroupName:
      type: string
    TrafficRoute:
      type: object
      properties:
        listenerArns:
          $ref: '#/components/schemas/ListenerArnList'
          description: ' The Amazon Resource Name (ARN) of one listener. The listener identifies the route between a target group and a load balancer. This is an array of strings with a maximum size of one. '
      description: ' Information about a listener. The listener contains the path used to route traffic that is received from the load balancer to a target group. '
    TargetGroupPairInfo:
      type: object
      properties:
        targetGroups:
          $ref: '#/components/schemas/TargetGroupInfoList'
          description: ' One pair of target groups. One is associated with the original task set. The second is associated with the task set that serves traffic after the deployment is complete. '
        prodTrafficRoute:
          $ref: '#/components/schemas/TrafficRoute'
          description: ' The path used by a load balancer to route production traffic when an Amazon ECS deployment is complete. '
        testTrafficRoute:
          $ref: '#/components/schemas/TrafficRoute'
          description: ' An optional path used by a load balancer to route test traffic after an Amazon ECS deployment. Validation can occur while test traffic is served during a deployment. '
      description: ' Information about two target groups and how traffic is routed during an Amazon ECS deployment. An optional test traffic route can be specified. '
    WaitTimeInMins:
      type: integer
    TimeBasedCanary:
      type: object
      properties:
        canaryPercentage:
          $ref: '#/components/schemas/Percentage'
          description: The percentage of traffic to shift in the first increment of a <code>TimeBasedCanary</code> deployment.
        canaryInterval:
          $ref: '#/components/schemas/WaitTimeInMins'
          description: The number of minutes between the first and second traffic shifts of a <code>TimeBasedCanary</code> deployment.
      description: A configuration that shifts traffic from one version of a Lambda function or ECS task set to another in two increments. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file.
    TimeBasedLinear:
      type: object
      properties:
        linearPercentage:
          $ref: '#/components/schemas/Percentage'
          description: The percentage of traffic that is shifted at the start of each increment of a <code>TimeBasedLinear</code> deployment.
        linearInterval:
          $ref: '#/components/schemas/WaitTimeInMins'
          description: The number of minutes between each incremental traffic shift of a <code>TimeBasedLinear</code> deployment.
      description: 'A configuration that shifts traffic from one version of a Lambda function or ECS task set to another in equal increments, with an equal number of minutes between each increment. The original and target Lambda function versions or ECS task sets are specified in the deployment''s AppSpec file.'
    TrafficRoutingType:
      type: string
      enum:
        - TimeBasedCanary
        - TimeBasedLinear
        - AllAtOnce
    TriggerName:
      type: string
    TriggerTargetArn:
      type: string
    TriggerEventTypeList:
      type: array
      items:
        $ref: '#/components/schemas/TriggerEventType'
    TriggerConfig:
      type: object
      properties:
        triggerName:
          $ref: '#/components/schemas/TriggerName'
          description: The name of the notification trigger.
        triggerTargetArn:
          $ref: '#/components/schemas/TriggerTargetArn'
          description: The Amazon Resource Name (ARN) of the Amazon Simple Notification Service topic through which notifications about deployment or instance events are sent.
        triggerEvents:
          $ref: '#/components/schemas/TriggerEventTypeList'
          description: The event type or types for which notifications are triggered.
      description: Information about notification triggers for the deployment group.
    TriggerEventType:
      type: string
      enum:
        - DeploymentStart
        - DeploymentSuccess
        - DeploymentFailure
        - DeploymentStop
        - DeploymentRollback
        - DeploymentReady
        - InstanceStart
        - InstanceSuccess
        - InstanceFailure
        - InstanceReady
security:
  - hmac: []

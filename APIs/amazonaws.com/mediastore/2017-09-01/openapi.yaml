openapi: 3.0.0
info:
  version: '2017-09-01'
  x-release: v4
  title: AWS Elemental MediaStore
  description: 'An AWS Elemental MediaStore container is a namespace that holds folders and objects. You use a container endpoint to create, read, and delete objects. '
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: mediastore
  x-aws-signingName: mediastore
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/mediastore-2017-09-01.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/mediastore/'
servers:
  - url: 'http://mediastore.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The MediaStore multi-region endpoint
  - url: 'https://mediastore.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The MediaStore multi-region endpoint
  - url: 'http://mediastore.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The MediaStore endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://mediastore.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The MediaStore endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  /#X-Amz-Target=MediaStore_20170901.CreateContainer:
    post:
      operationId: CreateContainer
      description: Creates a storage container to hold objects. A container is similar to a bucket in the Amazon S3 service.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateContainerOutput'
        '480':
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
        '481':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContainerInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.CreateContainer
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=MediaStore_20170901.DeleteContainer:
    post:
      operationId: DeleteContainer
      description: 'Deletes the specified container. Before you make a <code>DeleteContainer</code> request, delete any objects in the container or in any folders in the container. You can delete only empty containers. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteContainerOutput'
        '480':
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
        '481':
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
        '482':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteContainerInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.DeleteContainer
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=MediaStore_20170901.DeleteContainerPolicy:
    post:
      operationId: DeleteContainerPolicy
      description: Deletes the access policy that is associated with the specified container.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteContainerPolicyOutput'
        '480':
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
        '481':
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
        '482':
          description: PolicyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyNotFoundException'
        '483':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteContainerPolicyInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.DeleteContainerPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=MediaStore_20170901.DeleteCorsPolicy:
    post:
      operationId: DeleteCorsPolicy
      description: '<p>Deletes the cross-origin resource sharing (CORS) configuration information that is set for the container.</p> <p>To use this operation, you must have permission to perform the <code>MediaStore:DeleteCorsPolicy</code> action. The container owner has this permission by default and can grant this permission to others.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCorsPolicyOutput'
        '480':
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
        '481':
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
        '482':
          description: CorsPolicyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorsPolicyNotFoundException'
        '483':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCorsPolicyInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.DeleteCorsPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=MediaStore_20170901.DeleteLifecyclePolicy:
    post:
      operationId: DeleteLifecyclePolicy
      description: Removes an object lifecycle policy from a container. It takes up to 20 minutes for the change to take effect.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteLifecyclePolicyOutput'
        '480':
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
        '481':
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
        '482':
          description: PolicyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyNotFoundException'
        '483':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteLifecyclePolicyInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.DeleteLifecyclePolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=MediaStore_20170901.DeleteMetricPolicy:
    post:
      operationId: DeleteMetricPolicy
      description: 'Deletes the metric policy that is associated with the specified container. If there is no metric policy associated with the container, MediaStore doesn''t send metrics to CloudWatch.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteMetricPolicyOutput'
        '480':
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
        '481':
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
        '482':
          description: PolicyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyNotFoundException'
        '483':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteMetricPolicyInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.DeleteMetricPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=MediaStore_20170901.DescribeContainer:
    post:
      operationId: DescribeContainer
      description: 'Retrieves the properties of the requested container. This request is commonly used to retrieve the endpoint of a container. An endpoint is a value assigned by the service when a new container is created. A container''s endpoint does not change after it has been assigned. The <code>DescribeContainer</code> request returns a single <code>Container</code> object based on <code>ContainerName</code>. To return all <code>Container</code> objects that are associated with a specified AWS account, use <a>ListContainers</a>.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeContainerOutput'
        '480':
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
        '481':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeContainerInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.DescribeContainer
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=MediaStore_20170901.GetContainerPolicy:
    post:
      operationId: GetContainerPolicy
      description: 'Retrieves the access policy for the specified container. For information about the data that is included in an access policy, see the <a href="https://aws.amazon.com/documentation/iam/">AWS Identity and Access Management User Guide</a>.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetContainerPolicyOutput'
        '480':
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
        '481':
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
        '482':
          description: PolicyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyNotFoundException'
        '483':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetContainerPolicyInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.GetContainerPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=MediaStore_20170901.GetCorsPolicy:
    post:
      operationId: GetCorsPolicy
      description: '<p>Returns the cross-origin resource sharing (CORS) configuration information that is set for the container.</p> <p>To use this operation, you must have permission to perform the <code>MediaStore:GetCorsPolicy</code> action. By default, the container owner has this permission and can grant it to others.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCorsPolicyOutput'
        '480':
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
        '481':
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
        '482':
          description: CorsPolicyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorsPolicyNotFoundException'
        '483':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCorsPolicyInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.GetCorsPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=MediaStore_20170901.GetLifecyclePolicy:
    post:
      operationId: GetLifecyclePolicy
      description: Retrieves the object lifecycle policy that is assigned to a container.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLifecyclePolicyOutput'
        '480':
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
        '481':
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
        '482':
          description: PolicyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyNotFoundException'
        '483':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetLifecyclePolicyInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.GetLifecyclePolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=MediaStore_20170901.GetMetricPolicy:
    post:
      operationId: GetMetricPolicy
      description: 'Returns the metric policy for the specified container. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMetricPolicyOutput'
        '480':
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
        '481':
          description: PolicyNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyNotFoundException'
        '482':
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
        '483':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetMetricPolicyInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.GetMetricPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=MediaStore_20170901.ListContainers:
    post:
      operationId: ListContainers
      description: '<p>Lists the properties of all containers in AWS Elemental MediaStore. </p> <p>You can query to receive all the containers in one response. Or you can include the <code>MaxResults</code> parameter to receive a limited number of containers in each response. In this case, the response includes a token. To get the next set of containers, send the command again, this time with the <code>NextToken</code> parameter (with the returned token as its value). The next set of responses appears, with a token if there are still more containers to receive. </p> <p>See also <a>DescribeContainer</a>, which gets the properties of one container. </p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListContainersOutput'
        '480':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListContainersInput'
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.ListContainers
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=MediaStore_20170901.ListTagsForResource:
    post:
      operationId: ListTagsForResource
      description: 'Returns a list of the tags assigned to the specified container. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceOutput'
        '480':
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
        '481':
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
        '482':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTagsForResourceInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.ListTagsForResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=MediaStore_20170901.PutContainerPolicy:
    post:
      operationId: PutContainerPolicy
      description: '<p>Creates an access policy for the specified container to restrict the users and clients that can access it. For information about the data that is included in an access policy, see the <a href="https://aws.amazon.com/documentation/iam/">AWS Identity and Access Management User Guide</a>.</p> <p>For this release of the REST API, you can create only one policy for a container. If you enter <code>PutContainerPolicy</code> twice, the second command modifies the existing policy. </p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutContainerPolicyOutput'
        '480':
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
        '481':
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
        '482':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutContainerPolicyInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.PutContainerPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=MediaStore_20170901.PutCorsPolicy:
    post:
      operationId: PutCorsPolicy
      description: '<p>Sets the cross-origin resource sharing (CORS) configuration on a container so that the container can service cross-origin requests. For example, you might want to enable a request whose origin is http://www.example.com to access your AWS Elemental MediaStore container at my.example.container.com by using the browser''s XMLHttpRequest capability.</p> <p>To enable CORS on a container, you attach a CORS policy to the container. In the CORS policy, you configure rules that identify origins and the HTTP methods that can be executed on your container. The policy can contain up to 398,000 characters. You can add up to 100 rules to a CORS policy. If more than one rule applies, the service uses the first applicable rule listed.</p> <p>To learn more about CORS, see <a href="https://docs.aws.amazon.com/mediastore/latest/ug/cors-policy.html">Cross-Origin Resource Sharing (CORS) in AWS Elemental MediaStore</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutCorsPolicyOutput'
        '480':
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
        '481':
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
        '482':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutCorsPolicyInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.PutCorsPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=MediaStore_20170901.PutLifecyclePolicy:
    post:
      operationId: PutLifecyclePolicy
      description: '<p>Writes an object lifecycle policy to a container. If the container already has an object lifecycle policy, the service replaces the existing policy with the new policy. It takes up to 20 minutes for the change to take effect.</p> <p>For information about how to construct an object lifecycle policy, see <a href="https://docs.aws.amazon.com/mediastore/latest/ug/policies-object-lifecycle-components.html">Components of an Object Lifecycle Policy</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutLifecyclePolicyOutput'
        '480':
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
        '481':
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
        '482':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutLifecyclePolicyInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.PutLifecyclePolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=MediaStore_20170901.PutMetricPolicy:
    post:
      operationId: PutMetricPolicy
      description: The metric policy that you want to add to the container. A metric policy allows AWS Elemental MediaStore to send metrics to Amazon CloudWatch. It takes up to 20 minutes for the new policy to take effect.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutMetricPolicyOutput'
        '480':
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
        '481':
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
        '482':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutMetricPolicyInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.PutMetricPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=MediaStore_20170901.StartAccessLogging:
    post:
      operationId: StartAccessLogging
      description: 'Starts access logging on the specified container. When you enable access logging on a container, MediaStore delivers access logs for objects stored in that container to Amazon CloudWatch Logs.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartAccessLoggingOutput'
        '480':
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
        '481':
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
        '482':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartAccessLoggingInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.StartAccessLogging
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=MediaStore_20170901.StopAccessLogging:
    post:
      operationId: StopAccessLogging
      description: 'Stops access logging on the specified container. When you stop access logging on a container, MediaStore stops sending access logs to Amazon CloudWatch Logs. These access logs are not saved and are not retrievable.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StopAccessLoggingOutput'
        '480':
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
        '481':
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
        '482':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StopAccessLoggingInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.StopAccessLogging
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=MediaStore_20170901.TagResource:
    post:
      operationId: TagResource
      description: 'Adds tags to the specified AWS Elemental MediaStore container. Tags are key:value pairs that you can associate with AWS resources. For example, the tag key might be "customer" and the tag value might be "companyA." You can specify one or more tags to add to each container. You can add up to 50 tags to each container. For more information about tagging, including naming and usage conventions, see <a href="https://docs.aws.amazon.com/mediastore/latest/ug/tagging.html">Tagging Resources in MediaStore</a>.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceOutput'
        '480':
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
        '481':
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
        '482':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResourceInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.TagResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=MediaStore_20170901.UntagResource:
    post:
      operationId: UntagResource
      description: 'Removes tags from the specified container. You can specify one or more tags to remove. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceOutput'
        '480':
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
        '481':
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
        '482':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UntagResourceInput'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.UntagResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    CreateContainerOutput:
      type: object
      required:
        - Container
      properties:
        Container:
          $ref: '#/components/schemas/Container'
          description: '<p>ContainerARN: The Amazon Resource Name (ARN) of the newly created container. The ARN has the following format: arn:aws:&lt;region&gt;:&lt;account that owns this container&gt;:container/&lt;name of container&gt;. For example: arn:aws:mediastore:us-west-2:111122223333:container/movies </p> <p>ContainerName: The container name as specified in the request.</p> <p>CreationTime: Unix time stamp.</p> <p>Status: The status of container creation or deletion. The status is one of the following: <code>CREATING</code>, <code>ACTIVE</code>, or <code>DELETING</code>. While the service is creating the container, the status is <code>CREATING</code>. When an endpoint is available, the status changes to <code>ACTIVE</code>.</p> <p>The return value does not include the container''s endpoint. To make downstream requests, you must obtain this value by using <a>DescribeContainer</a> or <a>ListContainers</a>.</p>'
    CreateContainerInput:
      type: object
      required:
        - ContainerName
      title: CreateContainerInput
      properties:
        ContainerName:
          $ref: '#/components/schemas/ContainerName'
          description: 'The name for the container. The name must be from 1 to 255 characters. Container names must be unique to your AWS account within a specific region. As an example, you could create a container named <code>movies</code> in every region, as long as you don’t have an existing container with that name.'
        Tags:
          $ref: '#/components/schemas/TagList'
          description: 'An array of key:value pairs that you define. These values can be anything that you want. Typically, the tag key represents a category (such as "environment") and the tag value represents a specific value within that category (such as "test," "development," or "production"). You can add up to 50 tags to each container. For more information about tagging, including naming and usage conventions, see <a href="https://docs.aws.amazon.com/mediastore/latest/ug/tagging.html">Tagging Resources in MediaStore</a>.'
    ContainerInUseException: {}
    LimitExceededException: {}
    InternalServerError: {}
    DeleteContainerOutput:
      type: object
      properties: {}
    DeleteContainerInput:
      type: object
      required:
        - ContainerName
      title: DeleteContainerInput
      properties:
        ContainerName:
          $ref: '#/components/schemas/ContainerName'
          description: 'The name of the container to delete. '
    ContainerNotFoundException: {}
    DeleteContainerPolicyOutput:
      type: object
      properties: {}
    DeleteContainerPolicyInput:
      type: object
      required:
        - ContainerName
      title: DeleteContainerPolicyInput
      properties:
        ContainerName:
          $ref: '#/components/schemas/ContainerName'
          description: The name of the container that holds the policy.
    PolicyNotFoundException: {}
    DeleteCorsPolicyOutput:
      type: object
      properties: {}
    DeleteCorsPolicyInput:
      type: object
      required:
        - ContainerName
      title: DeleteCorsPolicyInput
      properties:
        ContainerName:
          $ref: '#/components/schemas/ContainerName'
          description: The name of the container to remove the policy from.
    CorsPolicyNotFoundException: {}
    DeleteLifecyclePolicyOutput:
      type: object
      properties: {}
    DeleteLifecyclePolicyInput:
      type: object
      required:
        - ContainerName
      title: DeleteLifecyclePolicyInput
      properties:
        ContainerName:
          $ref: '#/components/schemas/ContainerName'
          description: The name of the container that holds the object lifecycle policy.
    DeleteMetricPolicyOutput:
      type: object
      properties: {}
    DeleteMetricPolicyInput:
      type: object
      required:
        - ContainerName
      title: DeleteMetricPolicyInput
      properties:
        ContainerName:
          $ref: '#/components/schemas/ContainerName'
          description: The name of the container that is associated with the metric policy that you want to delete.
    DescribeContainerOutput:
      type: object
      properties:
        Container:
          $ref: '#/components/schemas/Container'
          description: The name of the queried container.
    DescribeContainerInput:
      type: object
      title: DescribeContainerInput
      properties:
        ContainerName:
          $ref: '#/components/schemas/ContainerName'
          description: The name of the container to query.
    GetContainerPolicyOutput:
      type: object
      required:
        - Policy
      properties:
        Policy:
          $ref: '#/components/schemas/ContainerPolicy'
          description: The contents of the access policy.
    GetContainerPolicyInput:
      type: object
      required:
        - ContainerName
      title: GetContainerPolicyInput
      properties:
        ContainerName:
          $ref: '#/components/schemas/ContainerName'
          description: 'The name of the container. '
    GetCorsPolicyOutput:
      type: object
      required:
        - CorsPolicy
      properties:
        CorsPolicy:
          $ref: '#/components/schemas/CorsPolicy'
          description: The CORS policy assigned to the container.
    GetCorsPolicyInput:
      type: object
      required:
        - ContainerName
      title: GetCorsPolicyInput
      properties:
        ContainerName:
          $ref: '#/components/schemas/ContainerName'
          description: The name of the container that the policy is assigned to.
    GetLifecyclePolicyOutput:
      type: object
      required:
        - LifecyclePolicy
      properties:
        LifecyclePolicy:
          $ref: '#/components/schemas/LifecyclePolicy'
          description: The object lifecycle policy that is assigned to the container.
    GetLifecyclePolicyInput:
      type: object
      required:
        - ContainerName
      title: GetLifecyclePolicyInput
      properties:
        ContainerName:
          $ref: '#/components/schemas/ContainerName'
          description: The name of the container that the object lifecycle policy is assigned to.
    GetMetricPolicyOutput:
      type: object
      required:
        - MetricPolicy
      properties:
        MetricPolicy:
          $ref: '#/components/schemas/MetricPolicy'
          description: The metric policy that is associated with the specific container.
    GetMetricPolicyInput:
      type: object
      required:
        - ContainerName
      title: GetMetricPolicyInput
      properties:
        ContainerName:
          $ref: '#/components/schemas/ContainerName'
          description: The name of the container that is associated with the metric policy.
    ListContainersOutput:
      type: object
      required:
        - Containers
      properties:
        Containers:
          $ref: '#/components/schemas/ContainerList'
          description: The names of the containers.
        NextToken:
          $ref: '#/components/schemas/PaginationToken'
          description: ' <code>NextToken</code> is the token to use in the next call to <code>ListContainers</code>. This token is returned only if you included the <code>MaxResults</code> tag in the original command, and only if there are still containers to return. '
    ListContainersInput:
      type: object
      title: ListContainersInput
      properties:
        NextToken:
          $ref: '#/components/schemas/PaginationToken'
          description: 'Only if you used <code>MaxResults</code> in the first command, enter the token (which was included in the previous response) to obtain the next set of containers. This token is included in a response only if there actually are more containers to list.'
        MaxResults:
          $ref: '#/components/schemas/ContainerListLimit'
          description: 'Enter the maximum number of containers in the response. Use from 1 to 255 characters. '
    ListTagsForResourceOutput:
      type: object
      properties:
        Tags:
          $ref: '#/components/schemas/TagList'
          description: 'An array of key:value pairs that are assigned to the container.'
    ListTagsForResourceInput:
      type: object
      required:
        - Resource
      title: ListTagsForResourceInput
      properties:
        Resource:
          $ref: '#/components/schemas/ContainerARN'
          description: The Amazon Resource Name (ARN) for the container.
    PutContainerPolicyOutput:
      type: object
      properties: {}
    PutContainerPolicyInput:
      type: object
      required:
        - ContainerName
        - Policy
      title: PutContainerPolicyInput
      properties:
        ContainerName:
          $ref: '#/components/schemas/ContainerName'
          description: The name of the container.
        Policy:
          $ref: '#/components/schemas/ContainerPolicy'
          description: '<p>The contents of the policy, which includes the following: </p> <ul> <li> <p>One <code>Version</code> tag</p> </li> <li> <p>One <code>Statement</code> tag that contains the standard tags for the policy.</p> </li> </ul>'
    PutCorsPolicyOutput:
      type: object
      properties: {}
    PutCorsPolicyInput:
      type: object
      required:
        - ContainerName
        - CorsPolicy
      title: PutCorsPolicyInput
      properties:
        ContainerName:
          $ref: '#/components/schemas/ContainerName'
          description: The name of the container that you want to assign the CORS policy to.
        CorsPolicy:
          $ref: '#/components/schemas/CorsPolicy'
          description: 'The CORS policy to apply to the container. '
    PutLifecyclePolicyOutput:
      type: object
      properties: {}
    PutLifecyclePolicyInput:
      type: object
      required:
        - ContainerName
        - LifecyclePolicy
      title: PutLifecyclePolicyInput
      properties:
        ContainerName:
          $ref: '#/components/schemas/ContainerName'
          description: The name of the container that you want to assign the object lifecycle policy to.
        LifecyclePolicy:
          $ref: '#/components/schemas/LifecyclePolicy'
          description: The object lifecycle policy to apply to the container.
    PutMetricPolicyOutput:
      type: object
      properties: {}
    PutMetricPolicyInput:
      type: object
      required:
        - ContainerName
        - MetricPolicy
      title: PutMetricPolicyInput
      properties:
        ContainerName:
          $ref: '#/components/schemas/ContainerName'
          description: The name of the container that you want to add the metric policy to.
        MetricPolicy:
          $ref: '#/components/schemas/MetricPolicy'
          description: '<p>The metric policy that you want to associate with the container. In the policy, you must indicate whether you want MediaStore to send container-level metrics. You can also include up to five rules to define groups of objects that you want MediaStore to send object-level metrics for. If you include rules in the policy, construct each rule with both of the following:</p> <ul> <li> <p>An object group that defines which objects to include in the group. The definition can be a path or a file name, but it can''t have more than 900 characters. Valid characters are: a-z, A-Z, 0-9, _ (underscore), = (equal), : (colon), . (period), - (hyphen), ~ (tilde), / (forward slash), and * (asterisk). Wildcards (*) are acceptable.</p> </li> <li> <p>An object group name that allows you to refer to the object group. The name can''t have more than 30 characters. Valid characters are: a-z, A-Z, 0-9, and _ (underscore).</p> </li> </ul>'
    StartAccessLoggingOutput:
      type: object
      properties: {}
    StartAccessLoggingInput:
      type: object
      required:
        - ContainerName
      title: StartAccessLoggingInput
      properties:
        ContainerName:
          $ref: '#/components/schemas/ContainerName'
          description: The name of the container that you want to start access logging on.
    StopAccessLoggingOutput:
      type: object
      properties: {}
    StopAccessLoggingInput:
      type: object
      required:
        - ContainerName
      title: StopAccessLoggingInput
      properties:
        ContainerName:
          $ref: '#/components/schemas/ContainerName'
          description: The name of the container that you want to stop access logging on.
    TagResourceOutput:
      type: object
      properties: {}
    TagResourceInput:
      type: object
      required:
        - Resource
        - Tags
      title: TagResourceInput
      properties:
        Resource:
          $ref: '#/components/schemas/ContainerARN'
          description: 'The Amazon Resource Name (ARN) for the container. '
        Tags:
          $ref: '#/components/schemas/TagList'
          description: 'An array of key:value pairs that you want to add to the container. You need to specify only the tags that you want to add or update. For example, suppose a container already has two tags (customer:CompanyA and priority:High). You want to change the priority tag and also add a third tag (type:Contract). For TagResource, you specify the following tags: priority:Medium, type:Contract. The result is that your container has three tags: customer:CompanyA, priority:Medium, and type:Contract.'
    UntagResourceOutput:
      type: object
      properties: {}
    UntagResourceInput:
      type: object
      required:
        - Resource
        - TagKeys
      title: UntagResourceInput
      properties:
        Resource:
          $ref: '#/components/schemas/ContainerARN'
          description: The Amazon Resource Name (ARN) for the container.
        TagKeys:
          $ref: '#/components/schemas/TagKeyList'
          description: 'A comma-separated list of keys for tags that you want to remove from the container. For example, if your container has two tags (customer:CompanyA and priority:High) and you want to remove one of the tags (priority:High), you specify the key for the tag that you want to remove (priority).'
    Header:
      type: string
      pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
      minLength: 1
      maxLength: 8192
    AllowedHeaders:
      type: array
      items:
        $ref: '#/components/schemas/Header'
      minItems: 0
      maxItems: 100
    MethodName:
      type: string
      enum:
        - PUT
        - GET
        - DELETE
        - HEAD
    AllowedMethods:
      type: array
      items:
        $ref: '#/components/schemas/MethodName'
      minItems: 1
      maxItems: 4
    Origin:
      type: string
      pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
      minLength: 1
      maxLength: 2048
    AllowedOrigins:
      type: array
      items:
        $ref: '#/components/schemas/Origin'
      minItems: 1
      maxItems: 100
    Endpoint:
      type: string
      pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
      minLength: 1
      maxLength: 255
    TimeStamp:
      type: string
      format: date-time
    ContainerARN:
      type: string
      pattern: 'arn:aws:mediastore:[a-z]+-[a-z]+-\d:\d{12}:container/[\w-]{1,255}'
      minLength: 1
      maxLength: 1024
    ContainerName:
      type: string
      pattern: '[\w-]+'
      minLength: 1
      maxLength: 255
    ContainerStatus:
      type: string
      enum:
        - ACTIVE
        - CREATING
        - DELETING
      minLength: 1
      maxLength: 16
    ContainerAccessLoggingEnabled:
      type: boolean
    Container:
      type: object
      properties:
        Endpoint:
          $ref: '#/components/schemas/Endpoint'
          description: 'The DNS endpoint of the container. Use the endpoint to identify the specific container when sending requests to the data plane. The service assigns this value when the container is created. Once the value has been assigned, it does not change.'
        CreationTime:
          $ref: '#/components/schemas/TimeStamp'
          description: Unix timestamp.
        ARN:
          $ref: '#/components/schemas/ContainerARN'
          description: '<p>The Amazon Resource Name (ARN) of the container. The ARN has the following format:</p> <p>arn:aws:&lt;region&gt;:&lt;account that owns this container&gt;:container/&lt;name of container&gt; </p> <p>For example: arn:aws:mediastore:us-west-2:111122223333:container/movies </p>'
        Name:
          $ref: '#/components/schemas/ContainerName'
          description: The name of the container.
        Status:
          $ref: '#/components/schemas/ContainerStatus'
          description: 'The status of container creation or deletion. The status is one of the following: <code>CREATING</code>, <code>ACTIVE</code>, or <code>DELETING</code>. While the service is creating the container, the status is <code>CREATING</code>. When the endpoint is available, the status changes to <code>ACTIVE</code>.'
        AccessLoggingEnabled:
          $ref: '#/components/schemas/ContainerAccessLoggingEnabled'
          description: 'The state of access logging on the container. This value is <code>false</code> by default, indicating that AWS Elemental MediaStore does not send access logs to Amazon CloudWatch Logs. When you enable access logging on the container, MediaStore changes this value to <code>true</code>, indicating that the service delivers access logs for objects stored in that container to CloudWatch Logs.'
      description: This section describes operations that you can perform on an AWS Elemental MediaStore container.
    ContainerLevelMetrics:
      type: string
      enum:
        - ENABLED
        - DISABLED
    ContainerList:
      type: array
      items:
        $ref: '#/components/schemas/Container'
    ContainerListLimit:
      type: integer
      minimum: 1
      maximum: 100
    ContainerPolicy:
      type: string
      pattern: '[\x00-\x7F]+'
      minLength: 1
      maxLength: 8192
    CorsRule:
      type: object
      required:
        - AllowedOrigins
        - AllowedHeaders
      properties:
        AllowedOrigins:
          $ref: '#/components/schemas/AllowedOrigins'
          description: '<p>One or more response headers that you want users to be able to access from their applications (for example, from a JavaScript <code>XMLHttpRequest</code> object).</p> <p>Each CORS rule must have at least one <code>AllowedOrigins</code> element. The string value can include only one wildcard character (*), for example, http://*.example.com. Additionally, you can specify only one wildcard character to allow cross-origin access for all origins.</p>'
        AllowedMethods:
          $ref: '#/components/schemas/AllowedMethods'
          description: <p>Identifies an HTTP method that the origin that is specified in the rule is allowed to execute.</p> <p>Each CORS rule must contain at least one <code>AllowedMethods</code> and one <code>AllowedOrigins</code> element.</p>
        AllowedHeaders:
          $ref: '#/components/schemas/AllowedHeaders'
          description: <p>Specifies which headers are allowed in a preflight <code>OPTIONS</code> request through the <code>Access-Control-Request-Headers</code> header. Each header name that is specified in <code>Access-Control-Request-Headers</code> must have a corresponding entry in the rule. Only the headers that were requested are sent back. </p> <p>This element can contain only one wildcard character (*).</p>
        MaxAgeSeconds:
          $ref: '#/components/schemas/MaxAgeSeconds'
          description: <p>The time in seconds that your browser caches the preflight response for the specified resource.</p> <p>A CORS rule can have only one <code>MaxAgeSeconds</code> element.</p>
        ExposeHeaders:
          $ref: '#/components/schemas/ExposeHeaders'
          description: '<p>One or more headers in the response that you want users to be able to access from their applications (for example, from a JavaScript <code>XMLHttpRequest</code> object).</p> <p>This element is optional for each rule.</p>'
      description: 'A rule for a CORS policy. You can add up to 100 rules to a CORS policy. If more than one rule applies, the service uses the first applicable rule listed.'
    CorsPolicy:
      type: array
      description: 'The CORS policy of the container. '
      items:
        $ref: '#/components/schemas/CorsRule'
      minItems: 1
      maxItems: 100
    MaxAgeSeconds:
      type: integer
      minimum: 0
      maximum: 2147483647
    ExposeHeaders:
      type: array
      items:
        $ref: '#/components/schemas/Header'
      minItems: 0
      maxItems: 100
    TagList:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
      minItems: 1
      maxItems: 200
    LifecyclePolicy:
      type: string
      pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
      minLength: 0
      maxLength: 8192
    MetricPolicy:
      type: object
      required:
        - ContainerLevelMetrics
      properties:
        ContainerLevelMetrics:
          $ref: '#/components/schemas/ContainerLevelMetrics'
          description: A setting to enable or disable metrics at the container level.
        MetricPolicyRules:
          $ref: '#/components/schemas/MetricPolicyRules'
          description: 'A parameter that holds an array of rules that enable metrics at the object level. This parameter is optional, but if you choose to include it, you must also include at least one rule. By default, you can include up to five rules. You can also <a href="https://console.aws.amazon.com/servicequotas/home?region=us-east-1#!/services/mediastore/quotas">request a quota increase</a> to allow up to 300 rules per policy.'
      description: '<p>The metric policy that is associated with the container. A metric policy allows AWS Elemental MediaStore to send metrics to Amazon CloudWatch. In the policy, you must indicate whether you want MediaStore to send container-level metrics. You can also include rules to define groups of objects that you want MediaStore to send object-level metrics for.</p> <p>To view examples of how to construct a metric policy for your use case, see <a href="https://docs.aws.amazon.com/mediastore/latest/ug/policies-metric-examples.html">Example Metric Policies</a>.</p>'
    PaginationToken:
      type: string
      pattern: '[0-9A-Za-z=/+]+'
      minLength: 1
      maxLength: 1024
    MetricPolicyRules:
      type: array
      items:
        $ref: '#/components/schemas/MetricPolicyRule'
      minItems: 1
      maxItems: 300
    ObjectGroup:
      type: string
      pattern: '/?(?:[A-Za-z0-9_=:\.\-\~\*]+/){0,10}(?:[A-Za-z0-9_=:\.\-\~\*]+)?/?'
      minLength: 1
      maxLength: 900
    ObjectGroupName:
      type: string
      pattern: '[a-zA-Z0-9_]+'
      minLength: 1
      maxLength: 30
    MetricPolicyRule:
      type: object
      required:
        - ObjectGroup
        - ObjectGroupName
      properties:
        ObjectGroup:
          $ref: '#/components/schemas/ObjectGroup'
          description: A path or file name that defines which objects to include in the group. Wildcards (*) are acceptable.
        ObjectGroupName:
          $ref: '#/components/schemas/ObjectGroupName'
          description: A name that allows you to refer to the object group.
      description: 'A setting that enables metrics at the object level. Each rule contains an object group and an object group name. If the policy includes the MetricPolicyRules parameter, you must include at least one rule. Each metric policy can include up to five rules by default. You can also <a href="https://console.aws.amazon.com/servicequotas/home?region=us-east-1#!/services/mediastore/quotas">request a quota increase</a> to allow up to 300 rules per policy.'
    TagKey:
      type: string
      pattern: '[\p{L}\p{Z}\p{N}_.:/=+\-@]*'
      minLength: 1
      maxLength: 128
    TagValue:
      type: string
      pattern: '[\p{L}\p{Z}\p{N}_.:/=+\-@]*'
      minLength: 0
      maxLength: 256
    Tag:
      type: object
      required:
        - Key
      properties:
        Key:
          $ref: '#/components/schemas/TagKey'
          description: 'Part of the key:value pair that defines a tag. You can use a tag key to describe a category of information, such as "customer." Tag keys are case-sensitive.'
        Value:
          $ref: '#/components/schemas/TagValue'
          description: 'Part of the key:value pair that defines a tag. You can use a tag value to describe a specific value within a category, such as "companyA" or "companyB." Tag values are case-sensitive.'
      description: 'A collection of tags associated with a container. Each tag consists of a key:value pair, which can be anything you define. Typically, the tag key represents a category (such as "environment") and the tag value represents a specific value within that category (such as "test," "development," or "production"). You can add up to 50 tags to each container. For more information about tagging, including naming and usage conventions, see <a href="https://docs.aws.amazon.com/mediastore/latest/ug/tagging.html">Tagging Resources in MediaStore</a>.'
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
security:
  - hmac: []

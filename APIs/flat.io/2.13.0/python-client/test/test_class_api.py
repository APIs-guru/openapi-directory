# coding: utf-8

"""
    Flat API

    The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 

    The version of the OpenAPI document: 2.13.0
    Contact: developers@flat.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.class_api import ClassApi


class TestClassApi(unittest.TestCase):
    """ClassApi unit test stubs"""

    def setUp(self) -> None:
        self.api = ClassApi()

    def tearDown(self) -> None:
        pass

    def test_activate_class(self) -> None:
        """Test case for activate_class

        Activate the class
        """
        pass

    def test_add_class_user(self) -> None:
        """Test case for add_class_user

        Add a user to the class
        """
        pass

    def test_archive_assignment(self) -> None:
        """Test case for archive_assignment

        Archive the assignment
        """
        pass

    def test_archive_class(self) -> None:
        """Test case for archive_class

        Archive the class
        """
        pass

    def test_copy_assignment(self) -> None:
        """Test case for copy_assignment

        Copy an assignment
        """
        pass

    def test_create_assignment(self) -> None:
        """Test case for create_assignment

        Assignment creation
        """
        pass

    def test_create_class(self) -> None:
        """Test case for create_class

        Create a new class
        """
        pass

    def test_create_submission(self) -> None:
        """Test case for create_submission

        Create or edit a submission
        """
        pass

    def test_delete_class_user(self) -> None:
        """Test case for delete_class_user

        Remove a user from the class
        """
        pass

    def test_delete_submission(self) -> None:
        """Test case for delete_submission

        Delete a submission
        """
        pass

    def test_delete_submission_comment(self) -> None:
        """Test case for delete_submission_comment

        Delete a feedback comment to a submission
        """
        pass

    def test_edit_submission(self) -> None:
        """Test case for edit_submission

        Edit a submission
        """
        pass

    def test_enroll_class(self) -> None:
        """Test case for enroll_class

        Join a class
        """
        pass

    def test_export_submissions_reviews_as_csv(self) -> None:
        """Test case for export_submissions_reviews_as_csv

        CSV Grades exports
        """
        pass

    def test_export_submissions_reviews_as_excel(self) -> None:
        """Test case for export_submissions_reviews_as_excel

        Excel Grades exports
        """
        pass

    def test_fork_score_0(self) -> None:
        """Test case for fork_score_0

        Fork a score
        """
        pass

    def test_get_class(self) -> None:
        """Test case for get_class

        Get the details of a single class
        """
        pass

    def test_get_score_submissions_0(self) -> None:
        """Test case for get_score_submissions_0

        List submissions related to the score
        """
        pass

    def test_get_submission(self) -> None:
        """Test case for get_submission

        Get a student submission
        """
        pass

    def test_get_submission_comments(self) -> None:
        """Test case for get_submission_comments

        List the feedback comments of a submission
        """
        pass

    def test_get_submission_history(self) -> None:
        """Test case for get_submission_history

        Get the history of the submission
        """
        pass

    def test_get_submissions(self) -> None:
        """Test case for get_submissions

        List the students' submissions
        """
        pass

    def test_list_assignments(self) -> None:
        """Test case for list_assignments

        Assignments listing
        """
        pass

    def test_list_class_student_submissions(self) -> None:
        """Test case for list_class_student_submissions

        List the submissions for a student
        """
        pass

    def test_list_classes(self) -> None:
        """Test case for list_classes

        List the classes available for the current user
        """
        pass

    def test_post_submission_comment(self) -> None:
        """Test case for post_submission_comment

        Add a feedback comment to a submission
        """
        pass

    def test_unarchive_assignment(self) -> None:
        """Test case for unarchive_assignment

        Unarchive the assignment.
        """
        pass

    def test_unarchive_class(self) -> None:
        """Test case for unarchive_class

        Unarchive the class
        """
        pass

    def test_update_class(self) -> None:
        """Test case for update_class

        Update the class
        """
        pass

    def test_update_submission_comment(self) -> None:
        """Test case for update_submission_comment

        Update a feedback comment to a submission
        """
        pass


if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Flat API

    The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 

    The version of the OpenAPI document: 2.13.0
    Contact: developers@flat.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.score_track_point import ScoreTrackPoint
from openapi_client.models.score_track_state import ScoreTrackState
from openapi_client.models.score_track_type import ScoreTrackType
from typing import Optional, Set
from typing_extensions import Self

class ScoreTrack(BaseModel):
    """
    An audio track for a score
    """ # noqa: E501
    creation_date: Optional[datetime] = Field(default=None, description="The creation date of the track", alias="creationDate")
    creator: Optional[StrictStr] = Field(default=None, description="The unique identifier of the track creator")
    default: Optional[StrictBool] = Field(default=None, description="True if the track should be used as default audio source")
    id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the score track")
    media_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the track when hosted on an external service. For example, if the url is `https://www.youtube.com/watch?v=dQw4w9WgXcQ`, `mediaId` will be `dQw4w9WgXcQ` ", alias="mediaId")
    modification_date: Optional[datetime] = Field(default=None, description="The modification date of the track", alias="modificationDate")
    score: Optional[StrictStr] = Field(default=None, description="The unique identifier of the score")
    state: Optional[ScoreTrackState] = ScoreTrackState.DRAFT
    synchronization_points: Optional[List[ScoreTrackPoint]] = Field(default=None, alias="synchronizationPoints")
    title: Optional[StrictStr] = Field(default=None, description="Title of the track")
    type: Optional[ScoreTrackType] = None
    url: Optional[StrictStr] = Field(default=None, description="The URL of the track")
    __properties: ClassVar[List[str]] = ["creationDate", "creator", "default", "id", "mediaId", "modificationDate", "score", "state", "synchronizationPoints", "title", "type", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScoreTrack from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in synchronization_points (list)
        _items = []
        if self.synchronization_points:
            for _item_synchronization_points in self.synchronization_points:
                if _item_synchronization_points:
                    _items.append(_item_synchronization_points.to_dict())
            _dict['synchronizationPoints'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScoreTrack from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationDate": obj.get("creationDate"),
            "creator": obj.get("creator"),
            "default": obj.get("default"),
            "id": obj.get("id"),
            "mediaId": obj.get("mediaId"),
            "modificationDate": obj.get("modificationDate"),
            "score": obj.get("score"),
            "state": obj.get("state") if obj.get("state") is not None else ScoreTrackState.DRAFT,
            "synchronizationPoints": [ScoreTrackPoint.from_dict(_item) for _item in obj["synchronizationPoints"]] if obj.get("synchronizationPoints") is not None else None,
            "title": obj.get("title"),
            "type": obj.get("type"),
            "url": obj.get("url")
        })
        return _obj



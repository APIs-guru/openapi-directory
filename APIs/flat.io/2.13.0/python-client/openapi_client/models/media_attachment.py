# coding: utf-8

"""
    Flat API

    The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 

    The version of the OpenAPI document: 2.13.0
    Contact: developers@flat.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.media_score_sharing_mode import MediaScoreSharingMode
from typing import Optional, Set
from typing_extensions import Self

class MediaAttachment(BaseModel):
    """
    Media attachment. The API will automatically resolve the details, oEmbed, and media available if possible and return them in this object 
    """ # noqa: E501
    author_name: Optional[StrictStr] = Field(default=None, description="The resolved author name of the attachment", alias="authorName")
    author_url: Optional[StrictStr] = Field(default=None, description="The resolved author url of the attachment", alias="authorUrl")
    description: Optional[StrictStr] = Field(default=None, description="The resolved description of the attachment")
    google_drive_file_id: Optional[StrictStr] = Field(default=None, description="The ID of the Google Drive File", alias="googleDriveFileId")
    html: Optional[StrictStr] = Field(default=None, description="If the attachment type is `rich` or `video`, the HTML code of the media to display ")
    html_height: Optional[StrictStr] = Field(default=None, description="If the `html` is available, the height of the widget", alias="htmlHeight")
    html_width: Optional[StrictStr] = Field(default=None, description="If the `html` is available, the width of the widget", alias="htmlWidth")
    icon_url: Optional[StrictStr] = Field(default=None, description="The URL of the icon", alias="iconUrl")
    lock_score_template: Optional[StrictBool] = Field(default=None, description="To be used with a score attached in `sharingMode` `copy` (score used as template). If true, students won't be able to change the original notes of the template.", alias="lockScoreTemplate")
    mime_type: Optional[StrictStr] = Field(default=None, description="The mine type of the file", alias="mimeType")
    revision: Optional[StrictStr] = Field(default=None, description="An unique revision identifier of a score")
    score: Optional[StrictStr] = Field(default=None, description="An unique Flat score identifier")
    sharing_mode: Optional[MediaScoreSharingMode] = Field(default=MediaScoreSharingMode.READ, alias="sharingMode")
    thumbnail_height: Optional[StrictInt] = Field(default=None, description="If the `thumbnailUrl` is available, the width of the thumbnail ", alias="thumbnailHeight")
    thumbnail_url: Optional[StrictStr] = Field(default=None, description="If the attachment type is `rich`, `video`, `photo` or `link`, a displayable thumbnail for this attachment ", alias="thumbnailUrl")
    thumbnail_width: Optional[StrictInt] = Field(default=None, description="If the `thumbnailUrl` is available, the width of the thumbnail ", alias="thumbnailWidth")
    title: Optional[StrictStr] = Field(default=None, description="The resolved title of the attachment")
    track: Optional[StrictStr] = Field(default=None, description="A unique track identifier")
    type: Optional[StrictStr] = Field(default=None, description="The type of the assignment resolved: * `rich`, `photo`, `video` are attachment types that are automatically resolved from a `link` attachment. * A `flat` attachment is a score document where the unique identifier will be specified in the `score` property. Its sharing mode will be provided in the `sharingMode` property. ")
    url: Optional[StrictStr] = Field(default=None, description="The url of the attachment")
    worksheet: Optional[StrictStr] = Field(default=None, description="An unique worksheet identifier")
    __properties: ClassVar[List[str]] = ["authorName", "authorUrl", "description", "googleDriveFileId", "html", "htmlHeight", "htmlWidth", "iconUrl", "lockScoreTemplate", "mimeType", "revision", "score", "sharingMode", "thumbnailHeight", "thumbnailUrl", "thumbnailWidth", "title", "track", "type", "url", "worksheet"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['rich', 'photo', 'video', 'link', 'flat', 'googleDrive', 'worksheet', 'performance']):
            raise ValueError("must be one of enum values ('rich', 'photo', 'video', 'link', 'flat', 'googleDrive', 'worksheet', 'performance')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MediaAttachment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MediaAttachment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authorName": obj.get("authorName"),
            "authorUrl": obj.get("authorUrl"),
            "description": obj.get("description"),
            "googleDriveFileId": obj.get("googleDriveFileId"),
            "html": obj.get("html"),
            "htmlHeight": obj.get("htmlHeight"),
            "htmlWidth": obj.get("htmlWidth"),
            "iconUrl": obj.get("iconUrl"),
            "lockScoreTemplate": obj.get("lockScoreTemplate"),
            "mimeType": obj.get("mimeType"),
            "revision": obj.get("revision"),
            "score": obj.get("score"),
            "sharingMode": obj.get("sharingMode") if obj.get("sharingMode") is not None else MediaScoreSharingMode.READ,
            "thumbnailHeight": obj.get("thumbnailHeight"),
            "thumbnailUrl": obj.get("thumbnailUrl"),
            "thumbnailWidth": obj.get("thumbnailWidth"),
            "title": obj.get("title"),
            "track": obj.get("track"),
            "type": obj.get("type"),
            "url": obj.get("url"),
            "worksheet": obj.get("worksheet")
        })
        return _obj



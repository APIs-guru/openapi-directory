# coding: utf-8

"""
    Flat API

    The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 

    The version of the OpenAPI document: 2.13.0
    Contact: developers@flat.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.assignment_canvas import AssignmentCanvas
from openapi_client.models.assignment_lti import AssignmentLti
from openapi_client.models.assignment_mfc import AssignmentMfc
from openapi_client.models.assignment_submission import AssignmentSubmission
from openapi_client.models.assignment_type import AssignmentType
from openapi_client.models.google_classroom_coursework import GoogleClassroomCoursework
from openapi_client.models.media_attachment import MediaAttachment
from openapi_client.models.microsoft_graph_assignment import MicrosoftGraphAssignment
from typing import Optional, Set
from typing_extensions import Self

class Assignment(BaseModel):
    """
    Assignment details
    """ # noqa: E501
    attachments: Optional[List[MediaAttachment]] = None
    canvas: Optional[AssignmentCanvas] = None
    classroom: Optional[StrictStr] = Field(default=None, description="The unique identifier of the class where this assignment was posted")
    cover: Optional[StrictStr] = Field(default=None, description="The URL of the cover to display")
    cover_file: Optional[StrictStr] = Field(default=None, description="The id of the cover to display", alias="coverFile")
    creation_date: Optional[datetime] = Field(default=None, description="The creation date of this assignment", alias="creationDate")
    creator: Optional[StrictStr] = Field(default=None, description="The User unique identifier of the creator of this assignment ")
    description: Optional[StrictStr] = Field(default=None, description="Description and content of the assignment")
    due_date: Optional[datetime] = Field(default=None, description="The due date of this assignment, late submissions will be marked as paste due. ", alias="dueDate")
    google_classroom: Optional[GoogleClassroomCoursework] = Field(default=None, alias="googleClassroom")
    lti: Optional[AssignmentLti] = None
    max_points: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="If set, the grading will be enabled for the assignement ", alias="maxPoints")
    mfc: Optional[AssignmentMfc] = None
    microsoft_graph: Optional[MicrosoftGraphAssignment] = Field(default=None, alias="microsoftGraph")
    scheduled_date: Optional[datetime] = Field(default=None, description="The publication (scheduled) date of the assignment. If this one is specified, the assignment will only be listed to the teachers of the class. ", alias="scheduledDate")
    state: Optional[StrictStr] = Field(default=None, description="State of the assignment")
    submissions: Optional[List[AssignmentSubmission]] = None
    title: Optional[StrictStr] = Field(default=None, description="Title of the assignment")
    type: Optional[AssignmentType] = None
    __properties: ClassVar[List[str]] = ["attachments", "canvas", "classroom", "cover", "coverFile", "creationDate", "creator", "description", "dueDate", "googleClassroom", "lti", "maxPoints", "mfc", "microsoftGraph", "scheduledDate", "state", "submissions", "title", "type"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['draft', 'active', 'archived']):
            raise ValueError("must be one of enum values ('draft', 'active', 'archived')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Assignment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of canvas
        if self.canvas:
            _dict['canvas'] = self.canvas.to_dict()
        # override the default output from pydantic by calling `to_dict()` of google_classroom
        if self.google_classroom:
            _dict['googleClassroom'] = self.google_classroom.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lti
        if self.lti:
            _dict['lti'] = self.lti.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mfc
        if self.mfc:
            _dict['mfc'] = self.mfc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of microsoft_graph
        if self.microsoft_graph:
            _dict['microsoftGraph'] = self.microsoft_graph.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in submissions (list)
        _items = []
        if self.submissions:
            for _item_submissions in self.submissions:
                if _item_submissions:
                    _items.append(_item_submissions.to_dict())
            _dict['submissions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Assignment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attachments": [MediaAttachment.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "canvas": AssignmentCanvas.from_dict(obj["canvas"]) if obj.get("canvas") is not None else None,
            "classroom": obj.get("classroom"),
            "cover": obj.get("cover"),
            "coverFile": obj.get("coverFile"),
            "creationDate": obj.get("creationDate"),
            "creator": obj.get("creator"),
            "description": obj.get("description"),
            "dueDate": obj.get("dueDate"),
            "googleClassroom": GoogleClassroomCoursework.from_dict(obj["googleClassroom"]) if obj.get("googleClassroom") is not None else None,
            "lti": AssignmentLti.from_dict(obj["lti"]) if obj.get("lti") is not None else None,
            "maxPoints": obj.get("maxPoints"),
            "mfc": AssignmentMfc.from_dict(obj["mfc"]) if obj.get("mfc") is not None else None,
            "microsoftGraph": MicrosoftGraphAssignment.from_dict(obj["microsoftGraph"]) if obj.get("microsoftGraph") is not None else None,
            "scheduledDate": obj.get("scheduledDate"),
            "state": obj.get("state"),
            "submissions": [AssignmentSubmission.from_dict(_item) for _item in obj["submissions"]] if obj.get("submissions") is not None else None,
            "title": obj.get("title"),
            "type": obj.get("type")
        })
        return _obj



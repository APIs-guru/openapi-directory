# coding: utf-8

"""
    Flat API

    The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 

    The version of the OpenAPI document: 2.13.0
    Contact: developers@flat.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.class_roles import ClassRoles
from openapi_client.models.flat_locales import FlatLocales
from openapi_client.models.organization_roles import OrganizationRoles
from openapi_client.models.user_public import UserPublic
from typing import Optional, Set
from typing_extensions import Self

class UserDetails(UserPublic):
    """
    User details
    """ # noqa: E501
    cover_picture_file: Optional[StrictStr] = Field(default=None, description="The ID of the user profile cover picture", alias="coverPictureFile")
    id: Optional[StrictStr] = Field(default=None, description="Identifier of the user")
    locale: Optional[FlatLocales] = FlatLocales.EN
    picture_file: Optional[StrictStr] = Field(default=None, description="The ID of the user profile picture", alias="pictureFile")
    private_profile: Optional[StrictBool] = Field(default=None, description="Tell either this user profile is private or not (individual accounts only)", alias="privateProfile")
    type: Optional[StrictStr] = Field(default=None, description="The type of account")
    __properties: ClassVar[List[str]] = ["firstname", "id", "isFlatTeam", "isPowerUser", "lastname", "name", "picture", "printableName", "type", "username", "classRole", "htmlUrl", "organization", "organizationRole", "bio", "coverPicture", "followersCount", "followingCount", "instruments", "likedScoresCount", "ownedPublicScoresCount", "profileTheme", "registrationDate", "coverPictureFile", "locale", "pictureFile", "privateProfile"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['user', 'guest']):
            raise ValueError("must be one of enum values ('user', 'guest')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if picture (nullable) is None
        # and model_fields_set contains the field
        if self.picture is None and "picture" in self.model_fields_set:
            _dict['picture'] = None

        # set to None if cover_picture_file (nullable) is None
        # and model_fields_set contains the field
        if self.cover_picture_file is None and "cover_picture_file" in self.model_fields_set:
            _dict['coverPictureFile'] = None

        # set to None if picture_file (nullable) is None
        # and model_fields_set contains the field
        if self.picture_file is None and "picture_file" in self.model_fields_set:
            _dict['pictureFile'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "firstname": obj.get("firstname"),
            "id": obj.get("id"),
            "isFlatTeam": obj.get("isFlatTeam"),
            "isPowerUser": obj.get("isPowerUser"),
            "lastname": obj.get("lastname"),
            "name": obj.get("name"),
            "picture": obj.get("picture"),
            "printableName": obj.get("printableName"),
            "type": obj.get("type"),
            "username": obj.get("username"),
            "classRole": obj.get("classRole"),
            "htmlUrl": obj.get("htmlUrl"),
            "organization": obj.get("organization"),
            "organizationRole": obj.get("organizationRole"),
            "bio": obj.get("bio"),
            "coverPicture": obj.get("coverPicture"),
            "followersCount": obj.get("followersCount"),
            "followingCount": obj.get("followingCount"),
            "instruments": obj.get("instruments"),
            "likedScoresCount": obj.get("likedScoresCount"),
            "ownedPublicScoresCount": obj.get("ownedPublicScoresCount"),
            "profileTheme": obj.get("profileTheme"),
            "registrationDate": obj.get("registrationDate"),
            "coverPictureFile": obj.get("coverPictureFile"),
            "locale": obj.get("locale") if obj.get("locale") is not None else FlatLocales.EN,
            "pictureFile": obj.get("pictureFile"),
            "privateProfile": obj.get("privateProfile")
        })
        return _obj



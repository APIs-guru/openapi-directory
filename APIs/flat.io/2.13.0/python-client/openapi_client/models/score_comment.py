# coding: utf-8

"""
    Flat API

    The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 

    The version of the OpenAPI document: 2.13.0
    Contact: developers@flat.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.score_comment_context import ScoreCommentContext
from typing import Optional, Set
from typing_extensions import Self

class ScoreComment(BaseModel):
    """
    Comment added on a sheet music
    """ # noqa: E501
    comment: Optional[StrictStr] = Field(default=None, description="The comment text that can includes mentions using the following format: `@[id:username]`. ")
    context: Optional[ScoreCommentContext] = None
    var_date: Optional[datetime] = Field(default=None, description="The date when the comment was posted", alias="date")
    id: Optional[StrictStr] = Field(default=None, description="The comment unique identifier")
    mentions: Optional[List[StrictStr]] = Field(default=None, description="The list of user identifier mentioned on the score")
    modification_date: Optional[datetime] = Field(default=None, description="The date of the last comment modification", alias="modificationDate")
    raw_comment: Optional[StrictStr] = Field(default=None, description="A raw version of the comment, that can be displayed without parsing the mentions. ", alias="rawComment")
    reply_to: Optional[StrictStr] = Field(default=None, description="When the comment is a reply to another comment, the unique identifier of the parent comment ", alias="replyTo")
    resolved: Optional[StrictBool] = Field(default=None, description="For inline comments, the comment can be marked as resolved and will be hidden in the future responses ")
    resolved_by: Optional[StrictStr] = Field(default=None, description="If the user is marked as resolved, this will contain the unique identifier of the User who marked this comment as resolved ", alias="resolvedBy")
    revision: Optional[StrictStr] = Field(default=None, description="The unique identifier of revision the comment was posted")
    score: Optional[StrictStr] = Field(default=None, description="The unique identifier of the score where the comment was posted")
    spam: Optional[StrictBool] = Field(default=None, description="`true  if the message has been detected as spam and hidden from other users ")
    type: Optional[StrictStr] = Field(default=None, description="The type of the comment")
    user: Optional[StrictStr] = Field(default=None, description="The author unique identifier")
    __properties: ClassVar[List[str]] = ["comment", "context", "date", "id", "mentions", "modificationDate", "rawComment", "replyTo", "resolved", "resolvedBy", "revision", "score", "spam", "type", "user"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['document', 'inline']):
            raise ValueError("must be one of enum values ('document', 'inline')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScoreComment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['context'] = self.context.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScoreComment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comment": obj.get("comment"),
            "context": ScoreCommentContext.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "date": obj.get("date"),
            "id": obj.get("id"),
            "mentions": obj.get("mentions"),
            "modificationDate": obj.get("modificationDate"),
            "rawComment": obj.get("rawComment"),
            "replyTo": obj.get("replyTo"),
            "resolved": obj.get("resolved"),
            "resolvedBy": obj.get("resolvedBy"),
            "revision": obj.get("revision"),
            "score": obj.get("score"),
            "spam": obj.get("spam"),
            "type": obj.get("type"),
            "user": obj.get("user")
        })
        return _obj



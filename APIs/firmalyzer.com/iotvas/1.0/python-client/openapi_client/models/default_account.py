# coding: utf-8

"""
    IoTVAS API

    IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DefaultAccount(BaseModel):
    """
    DefaultAccount
    """ # noqa: E501
    gid: Optional[StrictInt] = None
    hash_algorithm: Optional[StrictStr] = None
    home_dir: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    pwd_hash: Optional[StrictStr] = None
    shell: Optional[StrictStr] = None
    uid: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["gid", "hash_algorithm", "home_dir", "name", "pwd_hash", "shell", "uid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DefaultAccount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if gid (nullable) is None
        # and model_fields_set contains the field
        if self.gid is None and "gid" in self.model_fields_set:
            _dict['gid'] = None

        # set to None if hash_algorithm (nullable) is None
        # and model_fields_set contains the field
        if self.hash_algorithm is None and "hash_algorithm" in self.model_fields_set:
            _dict['hash_algorithm'] = None

        # set to None if home_dir (nullable) is None
        # and model_fields_set contains the field
        if self.home_dir is None and "home_dir" in self.model_fields_set:
            _dict['home_dir'] = None

        # set to None if pwd_hash (nullable) is None
        # and model_fields_set contains the field
        if self.pwd_hash is None and "pwd_hash" in self.model_fields_set:
            _dict['pwd_hash'] = None

        # set to None if shell (nullable) is None
        # and model_fields_set contains the field
        if self.shell is None and "shell" in self.model_fields_set:
            _dict['shell'] = None

        # set to None if uid (nullable) is None
        # and model_fields_set contains the field
        if self.uid is None and "uid" in self.model_fields_set:
            _dict['uid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DefaultAccount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gid": obj.get("gid"),
            "hash_algorithm": obj.get("hash_algorithm"),
            "home_dir": obj.get("home_dir"),
            "name": obj.get("name"),
            "pwd_hash": obj.get("pwd_hash"),
            "shell": obj.get("shell"),
            "uid": obj.get("uid")
        })
        return _obj



# coding: utf-8

"""
    IoTVAS API

    IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.firmware_info import FirmwareInfo
from openapi_client.models.vulnerability import Vulnerability
from typing import Optional, Set
from typing_extensions import Self

class DeviceInfo(BaseModel):
    """
    DeviceInfo
    """ # noqa: E501
    cve_list: Optional[List[Vulnerability]] = None
    device_type: Optional[StrictStr] = None
    firmware_info: Optional[FirmwareInfo] = None
    firmware_version: Optional[StrictStr] = None
    is_discontinued: Optional[StrictBool] = None
    latest_firmware_info: Optional[FirmwareInfo] = None
    manufacturer: Optional[StrictStr] = None
    model_name: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["cve_list", "device_type", "firmware_info", "firmware_version", "is_discontinued", "latest_firmware_info", "manufacturer", "model_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in cve_list (list)
        _items = []
        if self.cve_list:
            for _item_cve_list in self.cve_list:
                if _item_cve_list:
                    _items.append(_item_cve_list.to_dict())
            _dict['cve_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of firmware_info
        if self.firmware_info:
            _dict['firmware_info'] = self.firmware_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of latest_firmware_info
        if self.latest_firmware_info:
            _dict['latest_firmware_info'] = self.latest_firmware_info.to_dict()
        # set to None if cve_list (nullable) is None
        # and model_fields_set contains the field
        if self.cve_list is None and "cve_list" in self.model_fields_set:
            _dict['cve_list'] = None

        # set to None if device_type (nullable) is None
        # and model_fields_set contains the field
        if self.device_type is None and "device_type" in self.model_fields_set:
            _dict['device_type'] = None

        # set to None if firmware_info (nullable) is None
        # and model_fields_set contains the field
        if self.firmware_info is None and "firmware_info" in self.model_fields_set:
            _dict['firmware_info'] = None

        # set to None if firmware_version (nullable) is None
        # and model_fields_set contains the field
        if self.firmware_version is None and "firmware_version" in self.model_fields_set:
            _dict['firmware_version'] = None

        # set to None if is_discontinued (nullable) is None
        # and model_fields_set contains the field
        if self.is_discontinued is None and "is_discontinued" in self.model_fields_set:
            _dict['is_discontinued'] = None

        # set to None if latest_firmware_info (nullable) is None
        # and model_fields_set contains the field
        if self.latest_firmware_info is None and "latest_firmware_info" in self.model_fields_set:
            _dict['latest_firmware_info'] = None

        # set to None if manufacturer (nullable) is None
        # and model_fields_set contains the field
        if self.manufacturer is None and "manufacturer" in self.model_fields_set:
            _dict['manufacturer'] = None

        # set to None if model_name (nullable) is None
        # and model_fields_set contains the field
        if self.model_name is None and "model_name" in self.model_fields_set:
            _dict['model_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cve_list": [Vulnerability.from_dict(_item) for _item in obj["cve_list"]] if obj.get("cve_list") is not None else None,
            "device_type": obj.get("device_type"),
            "firmware_info": FirmwareInfo.from_dict(obj["firmware_info"]) if obj.get("firmware_info") is not None else None,
            "firmware_version": obj.get("firmware_version"),
            "is_discontinued": obj.get("is_discontinued"),
            "latest_firmware_info": FirmwareInfo.from_dict(obj["latest_firmware_info"]) if obj.get("latest_firmware_info") is not None else None,
            "manufacturer": obj.get("manufacturer"),
            "model_name": obj.get("model_name")
        })
        return _obj



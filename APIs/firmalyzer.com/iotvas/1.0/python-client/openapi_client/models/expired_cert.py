# coding: utf-8

"""
    IoTVAS API

    IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.public_key import PublicKey
from typing import Optional, Set
from typing_extensions import Self

class ExpiredCert(BaseModel):
    """
    ExpiredCert
    """ # noqa: E501
    file_hash: Optional[StrictStr] = None
    file_name: Optional[StrictStr] = None
    public_key: Optional[PublicKey] = None
    subject_name: Optional[StrictStr] = None
    thumb_print: Optional[StrictStr] = None
    valid_from: Optional[StrictStr] = None
    valid_to: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["file_hash", "file_name", "public_key", "subject_name", "thumb_print", "valid_from", "valid_to"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExpiredCert from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of public_key
        if self.public_key:
            _dict['public_key'] = self.public_key.to_dict()
        # set to None if public_key (nullable) is None
        # and model_fields_set contains the field
        if self.public_key is None and "public_key" in self.model_fields_set:
            _dict['public_key'] = None

        # set to None if subject_name (nullable) is None
        # and model_fields_set contains the field
        if self.subject_name is None and "subject_name" in self.model_fields_set:
            _dict['subject_name'] = None

        # set to None if thumb_print (nullable) is None
        # and model_fields_set contains the field
        if self.thumb_print is None and "thumb_print" in self.model_fields_set:
            _dict['thumb_print'] = None

        # set to None if valid_from (nullable) is None
        # and model_fields_set contains the field
        if self.valid_from is None and "valid_from" in self.model_fields_set:
            _dict['valid_from'] = None

        # set to None if valid_to (nullable) is None
        # and model_fields_set contains the field
        if self.valid_to is None and "valid_to" in self.model_fields_set:
            _dict['valid_to'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExpiredCert from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "file_hash": obj.get("file_hash"),
            "file_name": obj.get("file_name"),
            "public_key": PublicKey.from_dict(obj["public_key"]) if obj.get("public_key") is not None else None,
            "subject_name": obj.get("subject_name"),
            "thumb_print": obj.get("thumb_print"),
            "valid_from": obj.get("valid_from"),
            "valid_to": obj.get("valid_to")
        })
        return _obj



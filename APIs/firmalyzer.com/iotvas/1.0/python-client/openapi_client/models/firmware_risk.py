# coding: utf-8

"""
    IoTVAS API

    IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.risk_summary import RiskSummary
from openapi_client.models.vulnerable_component import VulnerableComponent
from typing import Optional, Set
from typing_extensions import Self

class FirmwareRisk(BaseModel):
    """
    FirmwareRisk
    """ # noqa: E501
    risk_summary: Optional[RiskSummary] = None
    vulnerable_components: Optional[List[VulnerableComponent]] = None
    __properties: ClassVar[List[str]] = ["risk_summary", "vulnerable_components"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FirmwareRisk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of risk_summary
        if self.risk_summary:
            _dict['risk_summary'] = self.risk_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in vulnerable_components (list)
        _items = []
        if self.vulnerable_components:
            for _item_vulnerable_components in self.vulnerable_components:
                if _item_vulnerable_components:
                    _items.append(_item_vulnerable_components.to_dict())
            _dict['vulnerable_components'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FirmwareRisk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "risk_summary": RiskSummary.from_dict(obj["risk_summary"]) if obj.get("risk_summary") is not None else None,
            "vulnerable_components": [VulnerableComponent.from_dict(_item) for _item in obj["vulnerable_components"]] if obj.get("vulnerable_components") is not None else None
        })
        return _obj



# coding: utf-8

"""
    IoTVAS API

    IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.firmware_api import FirmwareApi


class TestFirmwareApi(unittest.TestCase):
    """FirmwareApi unit test stubs"""

    def setUp(self) -> None:
        self.api = FirmwareApi()

    def tearDown(self) -> None:
        pass

    def test_get_accounts(self) -> None:
        """Test case for get_accounts

        Get default accounts and password hashes of a firmware
        """
        pass

    def test_get_config_issues(self) -> None:
        """Test case for get_config_issues

        Get default OS configuration issues of a device firmware
        """
        pass

    def test_get_expired_certs(self) -> None:
        """Test case for get_expired_certs

        Get expired digital certificates embedded in a device firmware
        """
        pass

    def test_get_private_keys(self) -> None:
        """Test case for get_private_keys

        Get private crypto keys embedded in a device firmware
        """
        pass

    def test_get_risk(self) -> None:
        """Test case for get_risk

        Get iot device firmware risk analysis
        """
        pass

    def test_get_weak_certs(self) -> None:
        """Test case for get_weak_certs

        Get certificates with weak fingerprinting algorithms that are mebedded in a device firmware
        """
        pass

    def test_get_weak_keys(self) -> None:
        """Test case for get_weak_keys

        Get weak crypto keys with short length
        """
        pass


if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    spoonacular API

    The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

    The version of the OpenAPI document: 1.1
    Contact: mail@spoonacular.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing_extensions import Annotated
from openapi_client.models.extract_recipe_from_website200_response_extended_ingredients_inner import ExtractRecipeFromWebsite200ResponseExtendedIngredientsInner
from openapi_client.models.extract_recipe_from_website200_response_wine_pairing import ExtractRecipeFromWebsite200ResponseWinePairing
from typing import Optional, Set
from typing_extensions import Self

class GetRecipeInformationBulk200ResponseInner(BaseModel):
    """
    GetRecipeInformationBulk200ResponseInner
    """ # noqa: E501
    aggregate_likes: StrictInt = Field(alias="aggregateLikes")
    analyzed_instructions: List[StrictStr] = Field(alias="analyzedInstructions")
    cheap: StrictBool
    credits_text: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="creditsText")
    cuisines: List[StrictStr]
    dairy_free: StrictBool = Field(alias="dairyFree")
    diets: List[StrictStr]
    dish_types: List[StrictStr] = Field(alias="dishTypes")
    extended_ingredients: Annotated[List[ExtractRecipeFromWebsite200ResponseExtendedIngredientsInner], Field(min_length=0)] = Field(alias="extendedIngredients")
    gaps: Annotated[str, Field(min_length=1, strict=True)]
    gluten_free: StrictBool = Field(alias="glutenFree")
    health_score: Union[StrictFloat, StrictInt] = Field(alias="healthScore")
    id: StrictInt
    image: Annotated[str, Field(min_length=1, strict=True)]
    image_type: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="imageType")
    instructions: StrictStr
    ketogenic: StrictBool
    license: Annotated[str, Field(min_length=1, strict=True)]
    low_fodmap: StrictBool = Field(alias="lowFodmap")
    occasions: List[StrictStr]
    price_per_serving: Union[StrictFloat, StrictInt] = Field(alias="pricePerServing")
    ready_in_minutes: StrictInt = Field(alias="readyInMinutes")
    servings: Union[StrictFloat, StrictInt]
    source_name: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="sourceName")
    source_url: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="sourceUrl")
    spoonacular_score: Union[StrictFloat, StrictInt] = Field(alias="spoonacularScore")
    spoonacular_source_url: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="spoonacularSourceUrl")
    summary: Annotated[str, Field(min_length=1, strict=True)]
    sustainable: StrictBool
    title: Annotated[str, Field(min_length=1, strict=True)]
    vegan: StrictBool
    vegetarian: StrictBool
    very_healthy: StrictBool = Field(alias="veryHealthy")
    very_popular: StrictBool = Field(alias="veryPopular")
    weight_watcher_smart_points: Union[StrictFloat, StrictInt] = Field(alias="weightWatcherSmartPoints")
    whole30: StrictBool
    wine_pairing: ExtractRecipeFromWebsite200ResponseWinePairing = Field(alias="winePairing")
    __properties: ClassVar[List[str]] = ["aggregateLikes", "analyzedInstructions", "cheap", "creditsText", "cuisines", "dairyFree", "diets", "dishTypes", "extendedIngredients", "gaps", "glutenFree", "healthScore", "id", "image", "imageType", "instructions", "ketogenic", "license", "lowFodmap", "occasions", "pricePerServing", "readyInMinutes", "servings", "sourceName", "sourceUrl", "spoonacularScore", "spoonacularSourceUrl", "summary", "sustainable", "title", "vegan", "vegetarian", "veryHealthy", "veryPopular", "weightWatcherSmartPoints", "whole30", "winePairing"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetRecipeInformationBulk200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in extended_ingredients (list)
        _items = []
        if self.extended_ingredients:
            for _item_extended_ingredients in self.extended_ingredients:
                if _item_extended_ingredients:
                    _items.append(_item_extended_ingredients.to_dict())
            _dict['extendedIngredients'] = _items
        # override the default output from pydantic by calling `to_dict()` of wine_pairing
        if self.wine_pairing:
            _dict['winePairing'] = self.wine_pairing.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetRecipeInformationBulk200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregateLikes": obj.get("aggregateLikes"),
            "analyzedInstructions": obj.get("analyzedInstructions"),
            "cheap": obj.get("cheap"),
            "creditsText": obj.get("creditsText"),
            "cuisines": obj.get("cuisines"),
            "dairyFree": obj.get("dairyFree"),
            "diets": obj.get("diets"),
            "dishTypes": obj.get("dishTypes"),
            "extendedIngredients": [ExtractRecipeFromWebsite200ResponseExtendedIngredientsInner.from_dict(_item) for _item in obj["extendedIngredients"]] if obj.get("extendedIngredients") is not None else None,
            "gaps": obj.get("gaps"),
            "glutenFree": obj.get("glutenFree"),
            "healthScore": obj.get("healthScore"),
            "id": obj.get("id"),
            "image": obj.get("image"),
            "imageType": obj.get("imageType"),
            "instructions": obj.get("instructions"),
            "ketogenic": obj.get("ketogenic"),
            "license": obj.get("license"),
            "lowFodmap": obj.get("lowFodmap"),
            "occasions": obj.get("occasions"),
            "pricePerServing": obj.get("pricePerServing"),
            "readyInMinutes": obj.get("readyInMinutes"),
            "servings": obj.get("servings"),
            "sourceName": obj.get("sourceName"),
            "sourceUrl": obj.get("sourceUrl"),
            "spoonacularScore": obj.get("spoonacularScore"),
            "spoonacularSourceUrl": obj.get("spoonacularSourceUrl"),
            "summary": obj.get("summary"),
            "sustainable": obj.get("sustainable"),
            "title": obj.get("title"),
            "vegan": obj.get("vegan"),
            "vegetarian": obj.get("vegetarian"),
            "veryHealthy": obj.get("veryHealthy"),
            "veryPopular": obj.get("veryPopular"),
            "weightWatcherSmartPoints": obj.get("weightWatcherSmartPoints"),
            "whole30": obj.get("whole30"),
            "winePairing": ExtractRecipeFromWebsite200ResponseWinePairing.from_dict(obj["winePairing"]) if obj.get("winePairing") is not None else None
        })
        return _obj



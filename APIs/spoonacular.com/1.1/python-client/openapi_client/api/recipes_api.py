# coding: utf-8

"""
    spoonacular API

    The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

    The version of the OpenAPI document: 1.1
    Contact: mail@spoonacular.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.analyze_a_recipe_search_query200_response import AnalyzeARecipeSearchQuery200Response
from openapi_client.models.analyze_recipe_instructions200_response import AnalyzeRecipeInstructions200Response
from openapi_client.models.classify_cuisine200_response import ClassifyCuisine200Response
from openapi_client.models.compute_glycemic_load200_response import ComputeGlycemicLoad200Response
from openapi_client.models.compute_glycemic_load_request import ComputeGlycemicLoadRequest
from openapi_client.models.convert_amounts200_response import ConvertAmounts200Response
from openapi_client.models.create_recipe_card200_response import CreateRecipeCard200Response
from openapi_client.models.extract_recipe_from_website200_response import ExtractRecipeFromWebsite200Response
from openapi_client.models.generate_meal_plan200_response_meals_inner import GenerateMealPlan200ResponseMealsInner
from openapi_client.models.get_analyzed_recipe_instructions200_response import GetAnalyzedRecipeInstructions200Response
from openapi_client.models.get_random_recipes200_response import GetRandomRecipes200Response
from openapi_client.models.get_recipe_equipment_by_id200_response import GetRecipeEquipmentByID200Response
from openapi_client.models.get_recipe_information_bulk200_response_inner import GetRecipeInformationBulk200ResponseInner
from openapi_client.models.get_recipe_ingredients_by_id200_response import GetRecipeIngredientsByID200Response
from openapi_client.models.get_recipe_nutrition_widget_by_id200_response import GetRecipeNutritionWidgetByID200Response
from openapi_client.models.get_recipe_price_breakdown_by_id200_response import GetRecipePriceBreakdownByID200Response
from openapi_client.models.get_recipe_taste_by_id200_response import GetRecipeTasteByID200Response
from openapi_client.models.guess_nutrition_by_dish_name200_response import GuessNutritionByDishName200Response
from openapi_client.models.parse_ingredients200_response_inner import ParseIngredients200ResponseInner
from openapi_client.models.quick_answer200_response import QuickAnswer200Response
from openapi_client.models.search_grocery_products200_response_products_inner import SearchGroceryProducts200ResponseProductsInner
from openapi_client.models.search_recipes200_response import SearchRecipes200Response
from openapi_client.models.search_recipes200_response_results_inner import SearchRecipes200ResponseResultsInner
from openapi_client.models.search_recipes_by_ingredients200_response_inner import SearchRecipesByIngredients200ResponseInner
from openapi_client.models.summarize_recipe200_response import SummarizeRecipe200Response

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class RecipesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def analyze_a_recipe_search_query(
        self,
        q: Annotated[StrictStr, Field(description="The recipe search query.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyzeARecipeSearchQuery200Response:
        """Analyze a Recipe Search Query

        Parse a recipe search query to find out its intention.

        :param q: The recipe search query. (required)
        :type q: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analyze_a_recipe_search_query_serialize(
            q=q,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyzeARecipeSearchQuery200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analyze_a_recipe_search_query_with_http_info(
        self,
        q: Annotated[StrictStr, Field(description="The recipe search query.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyzeARecipeSearchQuery200Response]:
        """Analyze a Recipe Search Query

        Parse a recipe search query to find out its intention.

        :param q: The recipe search query. (required)
        :type q: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analyze_a_recipe_search_query_serialize(
            q=q,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyzeARecipeSearchQuery200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analyze_a_recipe_search_query_without_preload_content(
        self,
        q: Annotated[StrictStr, Field(description="The recipe search query.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Analyze a Recipe Search Query

        Parse a recipe search query to find out its intention.

        :param q: The recipe search query. (required)
        :type q: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analyze_a_recipe_search_query_serialize(
            q=q,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyzeARecipeSearchQuery200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analyze_a_recipe_search_query_serialize(
        self,
        q,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if q is not None:
            
            _query_params.append(('q', q))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/queries/analyze',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analyze_recipe_instructions(
        self,
        content_type: Annotated[Optional[StrictStr], Field(description="The content type.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyzeRecipeInstructions200Response:
        """Analyze Recipe Instructions

        This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe's instructions will be extracted independently of the step they're used in.

        :param content_type: The content type.
        :type content_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analyze_recipe_instructions_serialize(
            content_type=content_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyzeRecipeInstructions200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analyze_recipe_instructions_with_http_info(
        self,
        content_type: Annotated[Optional[StrictStr], Field(description="The content type.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyzeRecipeInstructions200Response]:
        """Analyze Recipe Instructions

        This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe's instructions will be extracted independently of the step they're used in.

        :param content_type: The content type.
        :type content_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analyze_recipe_instructions_serialize(
            content_type=content_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyzeRecipeInstructions200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analyze_recipe_instructions_without_preload_content(
        self,
        content_type: Annotated[Optional[StrictStr], Field(description="The content type.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Analyze Recipe Instructions

        This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe's instructions will be extracted independently of the step they're used in.

        :param content_type: The content type.
        :type content_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analyze_recipe_instructions_serialize(
            content_type=content_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyzeRecipeInstructions200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analyze_recipe_instructions_serialize(
        self,
        content_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if content_type is not None:
            _header_params['Content-Type'] = content_type
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/recipes/analyzeInstructions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def autocomplete_recipe_search(
        self,
        query: Annotated[Optional[StrictStr], Field(description="The (natural language) search query.")] = None,
        number: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of items to return (between 1 and 100). Defaults to 10.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[SearchGroceryProducts200ResponseProductsInner]:
        """Autocomplete Recipe Search

        Autocomplete a partial input to suggest possible recipe names.

        :param query: The (natural language) search query.
        :type query: str
        :param number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :type number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._autocomplete_recipe_search_serialize(
            query=query,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SearchGroceryProducts200ResponseProductsInner]",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def autocomplete_recipe_search_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="The (natural language) search query.")] = None,
        number: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of items to return (between 1 and 100). Defaults to 10.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[SearchGroceryProducts200ResponseProductsInner]]:
        """Autocomplete Recipe Search

        Autocomplete a partial input to suggest possible recipe names.

        :param query: The (natural language) search query.
        :type query: str
        :param number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :type number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._autocomplete_recipe_search_serialize(
            query=query,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SearchGroceryProducts200ResponseProductsInner]",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def autocomplete_recipe_search_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="The (natural language) search query.")] = None,
        number: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of items to return (between 1 and 100). Defaults to 10.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Autocomplete Recipe Search

        Autocomplete a partial input to suggest possible recipe names.

        :param query: The (natural language) search query.
        :type query: str
        :param number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :type number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._autocomplete_recipe_search_serialize(
            query=query,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SearchGroceryProducts200ResponseProductsInner]",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _autocomplete_recipe_search_serialize(
        self,
        query,
        number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if number is not None:
            
            _query_params.append(('number', number))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/autocomplete',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def classify_cuisine(
        self,
        content_type: Annotated[Optional[StrictStr], Field(description="The content type.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ClassifyCuisine200Response:
        """Classify Cuisine

        Classify the recipe's cuisine.

        :param content_type: The content type.
        :type content_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._classify_cuisine_serialize(
            content_type=content_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClassifyCuisine200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def classify_cuisine_with_http_info(
        self,
        content_type: Annotated[Optional[StrictStr], Field(description="The content type.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ClassifyCuisine200Response]:
        """Classify Cuisine

        Classify the recipe's cuisine.

        :param content_type: The content type.
        :type content_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._classify_cuisine_serialize(
            content_type=content_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClassifyCuisine200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def classify_cuisine_without_preload_content(
        self,
        content_type: Annotated[Optional[StrictStr], Field(description="The content type.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Classify Cuisine

        Classify the recipe's cuisine.

        :param content_type: The content type.
        :type content_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._classify_cuisine_serialize(
            content_type=content_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClassifyCuisine200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _classify_cuisine_serialize(
        self,
        content_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if content_type is not None:
            _header_params['Content-Type'] = content_type
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/recipes/cuisine',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def compute_glycemic_load(
        self,
        compute_glycemic_load_request: ComputeGlycemicLoadRequest,
        language: Annotated[Optional[StrictStr], Field(description="The language of the input. Either 'en' or 'de'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ComputeGlycemicLoad200Response:
        """Compute Glycemic Load

        Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.

        :param compute_glycemic_load_request: (required)
        :type compute_glycemic_load_request: ComputeGlycemicLoadRequest
        :param language: The language of the input. Either 'en' or 'de'.
        :type language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._compute_glycemic_load_serialize(
            compute_glycemic_load_request=compute_glycemic_load_request,
            language=language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ComputeGlycemicLoad200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def compute_glycemic_load_with_http_info(
        self,
        compute_glycemic_load_request: ComputeGlycemicLoadRequest,
        language: Annotated[Optional[StrictStr], Field(description="The language of the input. Either 'en' or 'de'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ComputeGlycemicLoad200Response]:
        """Compute Glycemic Load

        Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.

        :param compute_glycemic_load_request: (required)
        :type compute_glycemic_load_request: ComputeGlycemicLoadRequest
        :param language: The language of the input. Either 'en' or 'de'.
        :type language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._compute_glycemic_load_serialize(
            compute_glycemic_load_request=compute_glycemic_load_request,
            language=language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ComputeGlycemicLoad200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def compute_glycemic_load_without_preload_content(
        self,
        compute_glycemic_load_request: ComputeGlycemicLoadRequest,
        language: Annotated[Optional[StrictStr], Field(description="The language of the input. Either 'en' or 'de'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Compute Glycemic Load

        Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.

        :param compute_glycemic_load_request: (required)
        :type compute_glycemic_load_request: ComputeGlycemicLoadRequest
        :param language: The language of the input. Either 'en' or 'de'.
        :type language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._compute_glycemic_load_serialize(
            compute_glycemic_load_request=compute_glycemic_load_request,
            language=language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ComputeGlycemicLoad200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _compute_glycemic_load_serialize(
        self,
        compute_glycemic_load_request,
        language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if language is not None:
            
            _query_params.append(('language', language))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if compute_glycemic_load_request is not None:
            _body_params = compute_glycemic_load_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/food/ingredients/glycemicLoad',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def convert_amounts(
        self,
        ingredient_name: Annotated[StrictStr, Field(description="The ingredient which you want to convert.")],
        source_amount: Annotated[Union[StrictFloat, StrictInt], Field(description="The amount from which you want to convert, e.g. the 2.5 in \"2.5 cups of flour to grams\".")],
        source_unit: Annotated[StrictStr, Field(description="The unit from which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"")],
        target_unit: Annotated[StrictStr, Field(description="The unit to which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ConvertAmounts200Response:
        """Convert Amounts

        Convert amounts like \"2 cups of flour to grams\".

        :param ingredient_name: The ingredient which you want to convert. (required)
        :type ingredient_name: str
        :param source_amount: The amount from which you want to convert, e.g. the 2.5 in \"2.5 cups of flour to grams\". (required)
        :type source_amount: float
        :param source_unit: The unit from which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\" (required)
        :type source_unit: str
        :param target_unit: The unit to which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\" (required)
        :type target_unit: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._convert_amounts_serialize(
            ingredient_name=ingredient_name,
            source_amount=source_amount,
            source_unit=source_unit,
            target_unit=target_unit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConvertAmounts200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def convert_amounts_with_http_info(
        self,
        ingredient_name: Annotated[StrictStr, Field(description="The ingredient which you want to convert.")],
        source_amount: Annotated[Union[StrictFloat, StrictInt], Field(description="The amount from which you want to convert, e.g. the 2.5 in \"2.5 cups of flour to grams\".")],
        source_unit: Annotated[StrictStr, Field(description="The unit from which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"")],
        target_unit: Annotated[StrictStr, Field(description="The unit to which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ConvertAmounts200Response]:
        """Convert Amounts

        Convert amounts like \"2 cups of flour to grams\".

        :param ingredient_name: The ingredient which you want to convert. (required)
        :type ingredient_name: str
        :param source_amount: The amount from which you want to convert, e.g. the 2.5 in \"2.5 cups of flour to grams\". (required)
        :type source_amount: float
        :param source_unit: The unit from which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\" (required)
        :type source_unit: str
        :param target_unit: The unit to which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\" (required)
        :type target_unit: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._convert_amounts_serialize(
            ingredient_name=ingredient_name,
            source_amount=source_amount,
            source_unit=source_unit,
            target_unit=target_unit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConvertAmounts200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def convert_amounts_without_preload_content(
        self,
        ingredient_name: Annotated[StrictStr, Field(description="The ingredient which you want to convert.")],
        source_amount: Annotated[Union[StrictFloat, StrictInt], Field(description="The amount from which you want to convert, e.g. the 2.5 in \"2.5 cups of flour to grams\".")],
        source_unit: Annotated[StrictStr, Field(description="The unit from which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"")],
        target_unit: Annotated[StrictStr, Field(description="The unit to which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Convert Amounts

        Convert amounts like \"2 cups of flour to grams\".

        :param ingredient_name: The ingredient which you want to convert. (required)
        :type ingredient_name: str
        :param source_amount: The amount from which you want to convert, e.g. the 2.5 in \"2.5 cups of flour to grams\". (required)
        :type source_amount: float
        :param source_unit: The unit from which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\" (required)
        :type source_unit: str
        :param target_unit: The unit to which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\" (required)
        :type target_unit: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._convert_amounts_serialize(
            ingredient_name=ingredient_name,
            source_amount=source_amount,
            source_unit=source_unit,
            target_unit=target_unit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConvertAmounts200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _convert_amounts_serialize(
        self,
        ingredient_name,
        source_amount,
        source_unit,
        target_unit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if ingredient_name is not None:
            
            _query_params.append(('ingredientName', ingredient_name))
            
        if source_amount is not None:
            
            _query_params.append(('sourceAmount', source_amount))
            
        if source_unit is not None:
            
            _query_params.append(('sourceUnit', source_unit))
            
        if target_unit is not None:
            
            _query_params.append(('targetUnit', target_unit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/convert',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_recipe_card(
        self,
        content_type: Annotated[Optional[StrictStr], Field(description="The content type.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateRecipeCard200Response:
        """Create Recipe Card

        Generate a recipe card for a recipe.

        :param content_type: The content type.
        :type content_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_recipe_card_serialize(
            content_type=content_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CreateRecipeCard200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_recipe_card_with_http_info(
        self,
        content_type: Annotated[Optional[StrictStr], Field(description="The content type.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateRecipeCard200Response]:
        """Create Recipe Card

        Generate a recipe card for a recipe.

        :param content_type: The content type.
        :type content_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_recipe_card_serialize(
            content_type=content_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CreateRecipeCard200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_recipe_card_without_preload_content(
        self,
        content_type: Annotated[Optional[StrictStr], Field(description="The content type.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create Recipe Card

        Generate a recipe card for a recipe.

        :param content_type: The content type.
        :type content_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_recipe_card_serialize(
            content_type=content_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CreateRecipeCard200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_recipe_card_serialize(
        self,
        content_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if content_type is not None:
            _header_params['Content-Type'] = content_type
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/recipes/visualizeRecipe',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equipment_by_id_image(
        self,
        id: Annotated[Union[StrictFloat, StrictInt], Field(description="The recipe id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Equipment by ID Image

        Visualize a recipe's equipment list as an image.

        :param id: The recipe id. (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equipment_by_id_image_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equipment_by_id_image_with_http_info(
        self,
        id: Annotated[Union[StrictFloat, StrictInt], Field(description="The recipe id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Equipment by ID Image

        Visualize a recipe's equipment list as an image.

        :param id: The recipe id. (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equipment_by_id_image_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equipment_by_id_image_without_preload_content(
        self,
        id: Annotated[Union[StrictFloat, StrictInt], Field(description="The recipe id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Equipment by ID Image

        Visualize a recipe's equipment list as an image.

        :param id: The recipe id. (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equipment_by_id_image_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equipment_by_id_image_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'image/png'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/{id}/equipmentWidget.png',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def extract_recipe_from_website(
        self,
        url: Annotated[StrictStr, Field(description="The URL of the recipe page.")],
        force_extraction: Annotated[Optional[StrictBool], Field(description="If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.")] = None,
        analyze: Annotated[Optional[StrictBool], Field(description="If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.")] = None,
        include_nutrition: Annotated[Optional[StrictBool], Field(description="Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.")] = None,
        include_taste: Annotated[Optional[StrictBool], Field(description="Whether taste data should be added to correctly parsed ingredients.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ExtractRecipeFromWebsite200Response:
        """Extract Recipe from Website

        This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.

        :param url: The URL of the recipe page. (required)
        :type url: str
        :param force_extraction: If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.
        :type force_extraction: bool
        :param analyze: If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.
        :type analyze: bool
        :param include_nutrition: Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
        :type include_nutrition: bool
        :param include_taste: Whether taste data should be added to correctly parsed ingredients.
        :type include_taste: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._extract_recipe_from_website_serialize(
            url=url,
            force_extraction=force_extraction,
            analyze=analyze,
            include_nutrition=include_nutrition,
            include_taste=include_taste,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ExtractRecipeFromWebsite200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def extract_recipe_from_website_with_http_info(
        self,
        url: Annotated[StrictStr, Field(description="The URL of the recipe page.")],
        force_extraction: Annotated[Optional[StrictBool], Field(description="If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.")] = None,
        analyze: Annotated[Optional[StrictBool], Field(description="If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.")] = None,
        include_nutrition: Annotated[Optional[StrictBool], Field(description="Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.")] = None,
        include_taste: Annotated[Optional[StrictBool], Field(description="Whether taste data should be added to correctly parsed ingredients.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ExtractRecipeFromWebsite200Response]:
        """Extract Recipe from Website

        This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.

        :param url: The URL of the recipe page. (required)
        :type url: str
        :param force_extraction: If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.
        :type force_extraction: bool
        :param analyze: If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.
        :type analyze: bool
        :param include_nutrition: Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
        :type include_nutrition: bool
        :param include_taste: Whether taste data should be added to correctly parsed ingredients.
        :type include_taste: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._extract_recipe_from_website_serialize(
            url=url,
            force_extraction=force_extraction,
            analyze=analyze,
            include_nutrition=include_nutrition,
            include_taste=include_taste,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ExtractRecipeFromWebsite200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def extract_recipe_from_website_without_preload_content(
        self,
        url: Annotated[StrictStr, Field(description="The URL of the recipe page.")],
        force_extraction: Annotated[Optional[StrictBool], Field(description="If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.")] = None,
        analyze: Annotated[Optional[StrictBool], Field(description="If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.")] = None,
        include_nutrition: Annotated[Optional[StrictBool], Field(description="Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.")] = None,
        include_taste: Annotated[Optional[StrictBool], Field(description="Whether taste data should be added to correctly parsed ingredients.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Extract Recipe from Website

        This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.

        :param url: The URL of the recipe page. (required)
        :type url: str
        :param force_extraction: If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.
        :type force_extraction: bool
        :param analyze: If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.
        :type analyze: bool
        :param include_nutrition: Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
        :type include_nutrition: bool
        :param include_taste: Whether taste data should be added to correctly parsed ingredients.
        :type include_taste: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._extract_recipe_from_website_serialize(
            url=url,
            force_extraction=force_extraction,
            analyze=analyze,
            include_nutrition=include_nutrition,
            include_taste=include_taste,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ExtractRecipeFromWebsite200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _extract_recipe_from_website_serialize(
        self,
        url,
        force_extraction,
        analyze,
        include_nutrition,
        include_taste,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if url is not None:
            
            _query_params.append(('url', url))
            
        if force_extraction is not None:
            
            _query_params.append(('forceExtraction', force_extraction))
            
        if analyze is not None:
            
            _query_params.append(('analyze', analyze))
            
        if include_nutrition is not None:
            
            _query_params.append(('includeNutrition', include_nutrition))
            
        if include_taste is not None:
            
            _query_params.append(('includeTaste', include_taste))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/extract',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_analyzed_recipe_instructions(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        step_breakdown: Annotated[Optional[StrictBool], Field(description="Whether to break down the recipe steps even more.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetAnalyzedRecipeInstructions200Response:
        """Get Analyzed Recipe Instructions

        Get an analyzed breakdown of a recipe's instructions. Each step is enriched with the ingredients and equipment required.

        :param id: The item's id. (required)
        :type id: int
        :param step_breakdown: Whether to break down the recipe steps even more.
        :type step_breakdown: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_analyzed_recipe_instructions_serialize(
            id=id,
            step_breakdown=step_breakdown,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAnalyzedRecipeInstructions200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_analyzed_recipe_instructions_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        step_breakdown: Annotated[Optional[StrictBool], Field(description="Whether to break down the recipe steps even more.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetAnalyzedRecipeInstructions200Response]:
        """Get Analyzed Recipe Instructions

        Get an analyzed breakdown of a recipe's instructions. Each step is enriched with the ingredients and equipment required.

        :param id: The item's id. (required)
        :type id: int
        :param step_breakdown: Whether to break down the recipe steps even more.
        :type step_breakdown: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_analyzed_recipe_instructions_serialize(
            id=id,
            step_breakdown=step_breakdown,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAnalyzedRecipeInstructions200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_analyzed_recipe_instructions_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        step_breakdown: Annotated[Optional[StrictBool], Field(description="Whether to break down the recipe steps even more.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Analyzed Recipe Instructions

        Get an analyzed breakdown of a recipe's instructions. Each step is enriched with the ingredients and equipment required.

        :param id: The item's id. (required)
        :type id: int
        :param step_breakdown: Whether to break down the recipe steps even more.
        :type step_breakdown: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_analyzed_recipe_instructions_serialize(
            id=id,
            step_breakdown=step_breakdown,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAnalyzedRecipeInstructions200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_analyzed_recipe_instructions_serialize(
        self,
        id,
        step_breakdown,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if step_breakdown is not None:
            
            _query_params.append(('stepBreakdown', step_breakdown))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/{id}/analyzedInstructions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_random_recipes(
        self,
        limit_license: Annotated[Optional[StrictBool], Field(description="Whether the recipes should have an open license that allows display with proper attribution.")] = None,
        tags: Annotated[Optional[StrictStr], Field(description="The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.")] = None,
        number: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of items to return (between 1 and 100). Defaults to 10.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetRandomRecipes200Response:
        """Get Random Recipes

        Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.

        :param limit_license: Whether the recipes should have an open license that allows display with proper attribution.
        :type limit_license: bool
        :param tags: The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
        :type tags: str
        :param number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :type number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_random_recipes_serialize(
            limit_license=limit_license,
            tags=tags,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRandomRecipes200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_random_recipes_with_http_info(
        self,
        limit_license: Annotated[Optional[StrictBool], Field(description="Whether the recipes should have an open license that allows display with proper attribution.")] = None,
        tags: Annotated[Optional[StrictStr], Field(description="The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.")] = None,
        number: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of items to return (between 1 and 100). Defaults to 10.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetRandomRecipes200Response]:
        """Get Random Recipes

        Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.

        :param limit_license: Whether the recipes should have an open license that allows display with proper attribution.
        :type limit_license: bool
        :param tags: The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
        :type tags: str
        :param number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :type number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_random_recipes_serialize(
            limit_license=limit_license,
            tags=tags,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRandomRecipes200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_random_recipes_without_preload_content(
        self,
        limit_license: Annotated[Optional[StrictBool], Field(description="Whether the recipes should have an open license that allows display with proper attribution.")] = None,
        tags: Annotated[Optional[StrictStr], Field(description="The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.")] = None,
        number: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of items to return (between 1 and 100). Defaults to 10.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Random Recipes

        Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.

        :param limit_license: Whether the recipes should have an open license that allows display with proper attribution.
        :type limit_license: bool
        :param tags: The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
        :type tags: str
        :param number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :type number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_random_recipes_serialize(
            limit_license=limit_license,
            tags=tags,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRandomRecipes200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_random_recipes_serialize(
        self,
        limit_license,
        tags,
        number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit_license is not None:
            
            _query_params.append(('limitLicense', limit_license))
            
        if tags is not None:
            
            _query_params.append(('tags', tags))
            
        if number is not None:
            
            _query_params.append(('number', number))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/random',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_recipe_equipment_by_id(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetRecipeEquipmentByID200Response:
        """Equipment by ID

        Get a recipe's equipment list.

        :param id: The item's id. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recipe_equipment_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRecipeEquipmentByID200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_recipe_equipment_by_id_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetRecipeEquipmentByID200Response]:
        """Equipment by ID

        Get a recipe's equipment list.

        :param id: The item's id. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recipe_equipment_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRecipeEquipmentByID200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_recipe_equipment_by_id_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Equipment by ID

        Get a recipe's equipment list.

        :param id: The item's id. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recipe_equipment_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRecipeEquipmentByID200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_recipe_equipment_by_id_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/{id}/equipmentWidget.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_recipe_information(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        include_nutrition: Annotated[Optional[StrictBool], Field(description="Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ExtractRecipeFromWebsite200Response:
        """Get Recipe Information

        Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.

        :param id: The item's id. (required)
        :type id: int
        :param include_nutrition: Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
        :type include_nutrition: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recipe_information_serialize(
            id=id,
            include_nutrition=include_nutrition,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ExtractRecipeFromWebsite200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_recipe_information_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        include_nutrition: Annotated[Optional[StrictBool], Field(description="Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ExtractRecipeFromWebsite200Response]:
        """Get Recipe Information

        Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.

        :param id: The item's id. (required)
        :type id: int
        :param include_nutrition: Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
        :type include_nutrition: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recipe_information_serialize(
            id=id,
            include_nutrition=include_nutrition,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ExtractRecipeFromWebsite200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_recipe_information_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        include_nutrition: Annotated[Optional[StrictBool], Field(description="Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Recipe Information

        Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.

        :param id: The item's id. (required)
        :type id: int
        :param include_nutrition: Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
        :type include_nutrition: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recipe_information_serialize(
            id=id,
            include_nutrition=include_nutrition,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ExtractRecipeFromWebsite200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_recipe_information_serialize(
        self,
        id,
        include_nutrition,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if include_nutrition is not None:
            
            _query_params.append(('includeNutrition', include_nutrition))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/{id}/information',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_recipe_information_bulk(
        self,
        ids: Annotated[StrictStr, Field(description="A comma-separated list of recipe ids.")],
        include_nutrition: Annotated[Optional[StrictBool], Field(description="Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GetRecipeInformationBulk200ResponseInner]:
        """Get Recipe Information Bulk

        Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.

        :param ids: A comma-separated list of recipe ids. (required)
        :type ids: str
        :param include_nutrition: Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
        :type include_nutrition: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recipe_information_bulk_serialize(
            ids=ids,
            include_nutrition=include_nutrition,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetRecipeInformationBulk200ResponseInner]",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_recipe_information_bulk_with_http_info(
        self,
        ids: Annotated[StrictStr, Field(description="A comma-separated list of recipe ids.")],
        include_nutrition: Annotated[Optional[StrictBool], Field(description="Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GetRecipeInformationBulk200ResponseInner]]:
        """Get Recipe Information Bulk

        Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.

        :param ids: A comma-separated list of recipe ids. (required)
        :type ids: str
        :param include_nutrition: Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
        :type include_nutrition: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recipe_information_bulk_serialize(
            ids=ids,
            include_nutrition=include_nutrition,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetRecipeInformationBulk200ResponseInner]",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_recipe_information_bulk_without_preload_content(
        self,
        ids: Annotated[StrictStr, Field(description="A comma-separated list of recipe ids.")],
        include_nutrition: Annotated[Optional[StrictBool], Field(description="Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Recipe Information Bulk

        Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.

        :param ids: A comma-separated list of recipe ids. (required)
        :type ids: str
        :param include_nutrition: Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
        :type include_nutrition: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recipe_information_bulk_serialize(
            ids=ids,
            include_nutrition=include_nutrition,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetRecipeInformationBulk200ResponseInner]",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_recipe_information_bulk_serialize(
        self,
        ids,
        include_nutrition,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if ids is not None:
            
            _query_params.append(('ids', ids))
            
        if include_nutrition is not None:
            
            _query_params.append(('includeNutrition', include_nutrition))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/informationBulk',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_recipe_ingredients_by_id(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetRecipeIngredientsByID200Response:
        """Ingredients by ID

        Get a recipe's ingredient list.

        :param id: The item's id. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recipe_ingredients_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRecipeIngredientsByID200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_recipe_ingredients_by_id_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetRecipeIngredientsByID200Response]:
        """Ingredients by ID

        Get a recipe's ingredient list.

        :param id: The item's id. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recipe_ingredients_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRecipeIngredientsByID200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_recipe_ingredients_by_id_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Ingredients by ID

        Get a recipe's ingredient list.

        :param id: The item's id. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recipe_ingredients_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRecipeIngredientsByID200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_recipe_ingredients_by_id_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/{id}/ingredientWidget.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_recipe_nutrition_widget_by_id(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetRecipeNutritionWidgetByID200Response:
        """Nutrition by ID

        Get a recipe's nutrition data.

        :param id: The item's id. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recipe_nutrition_widget_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRecipeNutritionWidgetByID200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_recipe_nutrition_widget_by_id_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetRecipeNutritionWidgetByID200Response]:
        """Nutrition by ID

        Get a recipe's nutrition data.

        :param id: The item's id. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recipe_nutrition_widget_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRecipeNutritionWidgetByID200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_recipe_nutrition_widget_by_id_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Nutrition by ID

        Get a recipe's nutrition data.

        :param id: The item's id. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recipe_nutrition_widget_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRecipeNutritionWidgetByID200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_recipe_nutrition_widget_by_id_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/{id}/nutritionWidget.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_recipe_price_breakdown_by_id(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetRecipePriceBreakdownByID200Response:
        """Price Breakdown by ID

        Get a recipe's price breakdown data.

        :param id: The item's id. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recipe_price_breakdown_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRecipePriceBreakdownByID200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_recipe_price_breakdown_by_id_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetRecipePriceBreakdownByID200Response]:
        """Price Breakdown by ID

        Get a recipe's price breakdown data.

        :param id: The item's id. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recipe_price_breakdown_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRecipePriceBreakdownByID200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_recipe_price_breakdown_by_id_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Price Breakdown by ID

        Get a recipe's price breakdown data.

        :param id: The item's id. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recipe_price_breakdown_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRecipePriceBreakdownByID200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_recipe_price_breakdown_by_id_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/{id}/priceBreakdownWidget.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_recipe_taste_by_id(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        normalize: Annotated[Optional[StrictBool], Field(description="Normalize to the strongest taste.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetRecipeTasteByID200Response:
        """Taste by ID

        Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.

        :param id: The item's id. (required)
        :type id: int
        :param normalize: Normalize to the strongest taste.
        :type normalize: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recipe_taste_by_id_serialize(
            id=id,
            normalize=normalize,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRecipeTasteByID200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_recipe_taste_by_id_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        normalize: Annotated[Optional[StrictBool], Field(description="Normalize to the strongest taste.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetRecipeTasteByID200Response]:
        """Taste by ID

        Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.

        :param id: The item's id. (required)
        :type id: int
        :param normalize: Normalize to the strongest taste.
        :type normalize: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recipe_taste_by_id_serialize(
            id=id,
            normalize=normalize,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRecipeTasteByID200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_recipe_taste_by_id_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        normalize: Annotated[Optional[StrictBool], Field(description="Normalize to the strongest taste.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Taste by ID

        Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.

        :param id: The item's id. (required)
        :type id: int
        :param normalize: Normalize to the strongest taste.
        :type normalize: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recipe_taste_by_id_serialize(
            id=id,
            normalize=normalize,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRecipeTasteByID200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_recipe_taste_by_id_serialize(
        self,
        id,
        normalize,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if normalize is not None:
            
            _query_params.append(('normalize', normalize))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/{id}/tasteWidget.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_similar_recipes(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        number: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of items to return (between 1 and 100). Defaults to 10.")] = None,
        limit_license: Annotated[Optional[StrictBool], Field(description="Whether the recipes should have an open license that allows display with proper attribution.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GenerateMealPlan200ResponseMealsInner]:
        """Get Similar Recipes

        Find recipes which are similar to the given one.

        :param id: The item's id. (required)
        :type id: int
        :param number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :type number: int
        :param limit_license: Whether the recipes should have an open license that allows display with proper attribution.
        :type limit_license: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_similar_recipes_serialize(
            id=id,
            number=number,
            limit_license=limit_license,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GenerateMealPlan200ResponseMealsInner]",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_similar_recipes_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        number: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of items to return (between 1 and 100). Defaults to 10.")] = None,
        limit_license: Annotated[Optional[StrictBool], Field(description="Whether the recipes should have an open license that allows display with proper attribution.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GenerateMealPlan200ResponseMealsInner]]:
        """Get Similar Recipes

        Find recipes which are similar to the given one.

        :param id: The item's id. (required)
        :type id: int
        :param number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :type number: int
        :param limit_license: Whether the recipes should have an open license that allows display with proper attribution.
        :type limit_license: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_similar_recipes_serialize(
            id=id,
            number=number,
            limit_license=limit_license,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GenerateMealPlan200ResponseMealsInner]",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_similar_recipes_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        number: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of items to return (between 1 and 100). Defaults to 10.")] = None,
        limit_license: Annotated[Optional[StrictBool], Field(description="Whether the recipes should have an open license that allows display with proper attribution.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Similar Recipes

        Find recipes which are similar to the given one.

        :param id: The item's id. (required)
        :type id: int
        :param number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :type number: int
        :param limit_license: Whether the recipes should have an open license that allows display with proper attribution.
        :type limit_license: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_similar_recipes_serialize(
            id=id,
            number=number,
            limit_license=limit_license,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GenerateMealPlan200ResponseMealsInner]",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_similar_recipes_serialize(
        self,
        id,
        number,
        limit_license,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if number is not None:
            
            _query_params.append(('number', number))
            
        if limit_license is not None:
            
            _query_params.append(('limitLicense', limit_license))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/{id}/similar',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def guess_nutrition_by_dish_name(
        self,
        title: Annotated[StrictStr, Field(description="The title of the dish.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GuessNutritionByDishName200Response:
        """Guess Nutrition by Dish Name

        Estimate the macronutrients of a dish based on its title.

        :param title: The title of the dish. (required)
        :type title: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._guess_nutrition_by_dish_name_serialize(
            title=title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GuessNutritionByDishName200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def guess_nutrition_by_dish_name_with_http_info(
        self,
        title: Annotated[StrictStr, Field(description="The title of the dish.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GuessNutritionByDishName200Response]:
        """Guess Nutrition by Dish Name

        Estimate the macronutrients of a dish based on its title.

        :param title: The title of the dish. (required)
        :type title: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._guess_nutrition_by_dish_name_serialize(
            title=title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GuessNutritionByDishName200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def guess_nutrition_by_dish_name_without_preload_content(
        self,
        title: Annotated[StrictStr, Field(description="The title of the dish.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Guess Nutrition by Dish Name

        Estimate the macronutrients of a dish based on its title.

        :param title: The title of the dish. (required)
        :type title: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._guess_nutrition_by_dish_name_serialize(
            title=title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GuessNutritionByDishName200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _guess_nutrition_by_dish_name_serialize(
        self,
        title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if title is not None:
            
            _query_params.append(('title', title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/guessNutrition',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def ingredients_by_id_image_0(
        self,
        id: Annotated[Union[StrictFloat, StrictInt], Field(description="The recipe id.")],
        measure: Annotated[Optional[StrictStr], Field(description="Whether the the measures should be 'us' or 'metric'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Ingredients by ID Image

        Visualize a recipe's ingredient list.

        :param id: The recipe id. (required)
        :type id: float
        :param measure: Whether the the measures should be 'us' or 'metric'.
        :type measure: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ingredients_by_id_image_0_serialize(
            id=id,
            measure=measure,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def ingredients_by_id_image_0_with_http_info(
        self,
        id: Annotated[Union[StrictFloat, StrictInt], Field(description="The recipe id.")],
        measure: Annotated[Optional[StrictStr], Field(description="Whether the the measures should be 'us' or 'metric'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Ingredients by ID Image

        Visualize a recipe's ingredient list.

        :param id: The recipe id. (required)
        :type id: float
        :param measure: Whether the the measures should be 'us' or 'metric'.
        :type measure: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ingredients_by_id_image_0_serialize(
            id=id,
            measure=measure,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def ingredients_by_id_image_0_without_preload_content(
        self,
        id: Annotated[Union[StrictFloat, StrictInt], Field(description="The recipe id.")],
        measure: Annotated[Optional[StrictStr], Field(description="Whether the the measures should be 'us' or 'metric'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Ingredients by ID Image

        Visualize a recipe's ingredient list.

        :param id: The recipe id. (required)
        :type id: float
        :param measure: Whether the the measures should be 'us' or 'metric'.
        :type measure: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ingredients_by_id_image_0_serialize(
            id=id,
            measure=measure,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _ingredients_by_id_image_0_serialize(
        self,
        id,
        measure,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if measure is not None:
            
            _query_params.append(('measure', measure))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'image/png'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/{id}/ingredientWidget.png',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def parse_ingredients(
        self,
        content_type: Annotated[Optional[StrictStr], Field(description="The content type.")] = None,
        language: Annotated[Optional[StrictStr], Field(description="The language of the input. Either 'en' or 'de'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ParseIngredients200ResponseInner]:
        """Parse Ingredients

        Extract an ingredient from plain text.

        :param content_type: The content type.
        :type content_type: str
        :param language: The language of the input. Either 'en' or 'de'.
        :type language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._parse_ingredients_serialize(
            content_type=content_type,
            language=language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ParseIngredients200ResponseInner]",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def parse_ingredients_with_http_info(
        self,
        content_type: Annotated[Optional[StrictStr], Field(description="The content type.")] = None,
        language: Annotated[Optional[StrictStr], Field(description="The language of the input. Either 'en' or 'de'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ParseIngredients200ResponseInner]]:
        """Parse Ingredients

        Extract an ingredient from plain text.

        :param content_type: The content type.
        :type content_type: str
        :param language: The language of the input. Either 'en' or 'de'.
        :type language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._parse_ingredients_serialize(
            content_type=content_type,
            language=language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ParseIngredients200ResponseInner]",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def parse_ingredients_without_preload_content(
        self,
        content_type: Annotated[Optional[StrictStr], Field(description="The content type.")] = None,
        language: Annotated[Optional[StrictStr], Field(description="The language of the input. Either 'en' or 'de'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Parse Ingredients

        Extract an ingredient from plain text.

        :param content_type: The content type.
        :type content_type: str
        :param language: The language of the input. Either 'en' or 'de'.
        :type language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._parse_ingredients_serialize(
            content_type=content_type,
            language=language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ParseIngredients200ResponseInner]",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _parse_ingredients_serialize(
        self,
        content_type,
        language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if language is not None:
            
            _query_params.append(('language', language))
            
        # process the header parameters
        if content_type is not None:
            _header_params['Content-Type'] = content_type
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/recipes/parseIngredients',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def price_breakdown_by_id_image(
        self,
        id: Annotated[Union[StrictFloat, StrictInt], Field(description="The recipe id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Price Breakdown by ID Image

        Visualize a recipe's price breakdown.

        :param id: The recipe id. (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._price_breakdown_by_id_image_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def price_breakdown_by_id_image_with_http_info(
        self,
        id: Annotated[Union[StrictFloat, StrictInt], Field(description="The recipe id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Price Breakdown by ID Image

        Visualize a recipe's price breakdown.

        :param id: The recipe id. (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._price_breakdown_by_id_image_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def price_breakdown_by_id_image_without_preload_content(
        self,
        id: Annotated[Union[StrictFloat, StrictInt], Field(description="The recipe id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Price Breakdown by ID Image

        Visualize a recipe's price breakdown.

        :param id: The recipe id. (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._price_breakdown_by_id_image_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _price_breakdown_by_id_image_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'image/png'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/{id}/priceBreakdownWidget.png',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def quick_answer(
        self,
        q: Annotated[StrictStr, Field(description="The nutrition related question.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> QuickAnswer200Response:
        """Quick Answer

        Answer a nutrition related natural language question.

        :param q: The nutrition related question. (required)
        :type q: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._quick_answer_serialize(
            q=q,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QuickAnswer200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def quick_answer_with_http_info(
        self,
        q: Annotated[StrictStr, Field(description="The nutrition related question.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[QuickAnswer200Response]:
        """Quick Answer

        Answer a nutrition related natural language question.

        :param q: The nutrition related question. (required)
        :type q: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._quick_answer_serialize(
            q=q,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QuickAnswer200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def quick_answer_without_preload_content(
        self,
        q: Annotated[StrictStr, Field(description="The nutrition related question.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Quick Answer

        Answer a nutrition related natural language question.

        :param q: The nutrition related question. (required)
        :type q: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._quick_answer_serialize(
            q=q,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QuickAnswer200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _quick_answer_serialize(
        self,
        q,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if q is not None:
            
            _query_params.append(('q', q))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/quickAnswer',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def recipe_nutrition_by_id_image(
        self,
        id: Annotated[Union[StrictFloat, StrictInt], Field(description="The recipe id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Recipe Nutrition by ID Image

        Visualize a recipe's nutritional information as an image.

        :param id: The recipe id. (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recipe_nutrition_by_id_image_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def recipe_nutrition_by_id_image_with_http_info(
        self,
        id: Annotated[Union[StrictFloat, StrictInt], Field(description="The recipe id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Recipe Nutrition by ID Image

        Visualize a recipe's nutritional information as an image.

        :param id: The recipe id. (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recipe_nutrition_by_id_image_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def recipe_nutrition_by_id_image_without_preload_content(
        self,
        id: Annotated[Union[StrictFloat, StrictInt], Field(description="The recipe id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Recipe Nutrition by ID Image

        Visualize a recipe's nutritional information as an image.

        :param id: The recipe id. (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recipe_nutrition_by_id_image_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _recipe_nutrition_by_id_image_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'image/png'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/{id}/nutritionWidget.png',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def recipe_nutrition_label_image(
        self,
        id: Annotated[Union[StrictFloat, StrictInt], Field(description="The recipe id.")],
        show_optional_nutrients: Annotated[Optional[StrictBool], Field(description="Whether to show optional nutrients.")] = None,
        show_zero_values: Annotated[Optional[StrictBool], Field(description="Whether to show zero values.")] = None,
        show_ingredients: Annotated[Optional[StrictBool], Field(description="Whether to show a list of ingredients.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Recipe Nutrition Label Image

        Get a recipe's nutrition label as an image.

        :param id: The recipe id. (required)
        :type id: float
        :param show_optional_nutrients: Whether to show optional nutrients.
        :type show_optional_nutrients: bool
        :param show_zero_values: Whether to show zero values.
        :type show_zero_values: bool
        :param show_ingredients: Whether to show a list of ingredients.
        :type show_ingredients: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recipe_nutrition_label_image_serialize(
            id=id,
            show_optional_nutrients=show_optional_nutrients,
            show_zero_values=show_zero_values,
            show_ingredients=show_ingredients,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def recipe_nutrition_label_image_with_http_info(
        self,
        id: Annotated[Union[StrictFloat, StrictInt], Field(description="The recipe id.")],
        show_optional_nutrients: Annotated[Optional[StrictBool], Field(description="Whether to show optional nutrients.")] = None,
        show_zero_values: Annotated[Optional[StrictBool], Field(description="Whether to show zero values.")] = None,
        show_ingredients: Annotated[Optional[StrictBool], Field(description="Whether to show a list of ingredients.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Recipe Nutrition Label Image

        Get a recipe's nutrition label as an image.

        :param id: The recipe id. (required)
        :type id: float
        :param show_optional_nutrients: Whether to show optional nutrients.
        :type show_optional_nutrients: bool
        :param show_zero_values: Whether to show zero values.
        :type show_zero_values: bool
        :param show_ingredients: Whether to show a list of ingredients.
        :type show_ingredients: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recipe_nutrition_label_image_serialize(
            id=id,
            show_optional_nutrients=show_optional_nutrients,
            show_zero_values=show_zero_values,
            show_ingredients=show_ingredients,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def recipe_nutrition_label_image_without_preload_content(
        self,
        id: Annotated[Union[StrictFloat, StrictInt], Field(description="The recipe id.")],
        show_optional_nutrients: Annotated[Optional[StrictBool], Field(description="Whether to show optional nutrients.")] = None,
        show_zero_values: Annotated[Optional[StrictBool], Field(description="Whether to show zero values.")] = None,
        show_ingredients: Annotated[Optional[StrictBool], Field(description="Whether to show a list of ingredients.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Recipe Nutrition Label Image

        Get a recipe's nutrition label as an image.

        :param id: The recipe id. (required)
        :type id: float
        :param show_optional_nutrients: Whether to show optional nutrients.
        :type show_optional_nutrients: bool
        :param show_zero_values: Whether to show zero values.
        :type show_zero_values: bool
        :param show_ingredients: Whether to show a list of ingredients.
        :type show_ingredients: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recipe_nutrition_label_image_serialize(
            id=id,
            show_optional_nutrients=show_optional_nutrients,
            show_zero_values=show_zero_values,
            show_ingredients=show_ingredients,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _recipe_nutrition_label_image_serialize(
        self,
        id,
        show_optional_nutrients,
        show_zero_values,
        show_ingredients,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if show_optional_nutrients is not None:
            
            _query_params.append(('showOptionalNutrients', show_optional_nutrients))
            
        if show_zero_values is not None:
            
            _query_params.append(('showZeroValues', show_zero_values))
            
        if show_ingredients is not None:
            
            _query_params.append(('showIngredients', show_ingredients))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'image/png'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/{id}/nutritionLabel.png',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def recipe_nutrition_label_widget(
        self,
        id: Annotated[Union[StrictFloat, StrictInt], Field(description="The recipe id.")],
        default_css: Annotated[Optional[StrictBool], Field(description="Whether the default CSS should be added to the response.")] = None,
        show_optional_nutrients: Annotated[Optional[StrictBool], Field(description="Whether to show optional nutrients.")] = None,
        show_zero_values: Annotated[Optional[StrictBool], Field(description="Whether to show zero values.")] = None,
        show_ingredients: Annotated[Optional[StrictBool], Field(description="Whether to show a list of ingredients.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Recipe Nutrition Label Widget

        Get a recipe's nutrition label as an HTML widget.

        :param id: The recipe id. (required)
        :type id: float
        :param default_css: Whether the default CSS should be added to the response.
        :type default_css: bool
        :param show_optional_nutrients: Whether to show optional nutrients.
        :type show_optional_nutrients: bool
        :param show_zero_values: Whether to show zero values.
        :type show_zero_values: bool
        :param show_ingredients: Whether to show a list of ingredients.
        :type show_ingredients: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recipe_nutrition_label_widget_serialize(
            id=id,
            default_css=default_css,
            show_optional_nutrients=show_optional_nutrients,
            show_zero_values=show_zero_values,
            show_ingredients=show_ingredients,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def recipe_nutrition_label_widget_with_http_info(
        self,
        id: Annotated[Union[StrictFloat, StrictInt], Field(description="The recipe id.")],
        default_css: Annotated[Optional[StrictBool], Field(description="Whether the default CSS should be added to the response.")] = None,
        show_optional_nutrients: Annotated[Optional[StrictBool], Field(description="Whether to show optional nutrients.")] = None,
        show_zero_values: Annotated[Optional[StrictBool], Field(description="Whether to show zero values.")] = None,
        show_ingredients: Annotated[Optional[StrictBool], Field(description="Whether to show a list of ingredients.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Recipe Nutrition Label Widget

        Get a recipe's nutrition label as an HTML widget.

        :param id: The recipe id. (required)
        :type id: float
        :param default_css: Whether the default CSS should be added to the response.
        :type default_css: bool
        :param show_optional_nutrients: Whether to show optional nutrients.
        :type show_optional_nutrients: bool
        :param show_zero_values: Whether to show zero values.
        :type show_zero_values: bool
        :param show_ingredients: Whether to show a list of ingredients.
        :type show_ingredients: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recipe_nutrition_label_widget_serialize(
            id=id,
            default_css=default_css,
            show_optional_nutrients=show_optional_nutrients,
            show_zero_values=show_zero_values,
            show_ingredients=show_ingredients,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def recipe_nutrition_label_widget_without_preload_content(
        self,
        id: Annotated[Union[StrictFloat, StrictInt], Field(description="The recipe id.")],
        default_css: Annotated[Optional[StrictBool], Field(description="Whether the default CSS should be added to the response.")] = None,
        show_optional_nutrients: Annotated[Optional[StrictBool], Field(description="Whether to show optional nutrients.")] = None,
        show_zero_values: Annotated[Optional[StrictBool], Field(description="Whether to show zero values.")] = None,
        show_ingredients: Annotated[Optional[StrictBool], Field(description="Whether to show a list of ingredients.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Recipe Nutrition Label Widget

        Get a recipe's nutrition label as an HTML widget.

        :param id: The recipe id. (required)
        :type id: float
        :param default_css: Whether the default CSS should be added to the response.
        :type default_css: bool
        :param show_optional_nutrients: Whether to show optional nutrients.
        :type show_optional_nutrients: bool
        :param show_zero_values: Whether to show zero values.
        :type show_zero_values: bool
        :param show_ingredients: Whether to show a list of ingredients.
        :type show_ingredients: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recipe_nutrition_label_widget_serialize(
            id=id,
            default_css=default_css,
            show_optional_nutrients=show_optional_nutrients,
            show_zero_values=show_zero_values,
            show_ingredients=show_ingredients,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _recipe_nutrition_label_widget_serialize(
        self,
        id,
        default_css,
        show_optional_nutrients,
        show_zero_values,
        show_ingredients,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if default_css is not None:
            
            _query_params.append(('defaultCss', default_css))
            
        if show_optional_nutrients is not None:
            
            _query_params.append(('showOptionalNutrients', show_optional_nutrients))
            
        if show_zero_values is not None:
            
            _query_params.append(('showZeroValues', show_zero_values))
            
        if show_ingredients is not None:
            
            _query_params.append(('showIngredients', show_ingredients))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/html'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/{id}/nutritionLabel',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def recipe_taste_by_id_image(
        self,
        id: Annotated[Union[StrictFloat, StrictInt], Field(description="The recipe id.")],
        normalize: Annotated[Optional[StrictBool], Field(description="Normalize to the strongest taste.")] = None,
        rgb: Annotated[Optional[StrictStr], Field(description="Red, green, blue values for the chart color.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Recipe Taste by ID Image

        Get a recipe's taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.

        :param id: The recipe id. (required)
        :type id: float
        :param normalize: Normalize to the strongest taste.
        :type normalize: bool
        :param rgb: Red, green, blue values for the chart color.
        :type rgb: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recipe_taste_by_id_image_serialize(
            id=id,
            normalize=normalize,
            rgb=rgb,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def recipe_taste_by_id_image_with_http_info(
        self,
        id: Annotated[Union[StrictFloat, StrictInt], Field(description="The recipe id.")],
        normalize: Annotated[Optional[StrictBool], Field(description="Normalize to the strongest taste.")] = None,
        rgb: Annotated[Optional[StrictStr], Field(description="Red, green, blue values for the chart color.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Recipe Taste by ID Image

        Get a recipe's taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.

        :param id: The recipe id. (required)
        :type id: float
        :param normalize: Normalize to the strongest taste.
        :type normalize: bool
        :param rgb: Red, green, blue values for the chart color.
        :type rgb: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recipe_taste_by_id_image_serialize(
            id=id,
            normalize=normalize,
            rgb=rgb,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def recipe_taste_by_id_image_without_preload_content(
        self,
        id: Annotated[Union[StrictFloat, StrictInt], Field(description="The recipe id.")],
        normalize: Annotated[Optional[StrictBool], Field(description="Normalize to the strongest taste.")] = None,
        rgb: Annotated[Optional[StrictStr], Field(description="Red, green, blue values for the chart color.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Recipe Taste by ID Image

        Get a recipe's taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.

        :param id: The recipe id. (required)
        :type id: float
        :param normalize: Normalize to the strongest taste.
        :type normalize: bool
        :param rgb: Red, green, blue values for the chart color.
        :type rgb: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recipe_taste_by_id_image_serialize(
            id=id,
            normalize=normalize,
            rgb=rgb,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _recipe_taste_by_id_image_serialize(
        self,
        id,
        normalize,
        rgb,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if normalize is not None:
            
            _query_params.append(('normalize', normalize))
            
        if rgb is not None:
            
            _query_params.append(('rgb', rgb))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'image/png'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/{id}/tasteWidget.png',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_recipes(
        self,
        query: Annotated[Optional[StrictStr], Field(description="The (natural language) search query.")] = None,
        cuisine: Annotated[Optional[StrictStr], Field(description="The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as 'OR'). See a full list of supported cuisines.")] = None,
        exclude_cuisine: Annotated[Optional[StrictStr], Field(description="The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as 'AND'). See a full list of supported cuisines.")] = None,
        diet: Annotated[Optional[StrictStr], Field(description="The diet for which the recipes must be suitable. See a full list of supported diets.")] = None,
        intolerances: Annotated[Optional[StrictStr], Field(description="A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.")] = None,
        equipment: Annotated[Optional[StrictStr], Field(description="The equipment required. Multiple values will be interpreted as 'or'. For example, value could be \"blender, frying pan, bowl\".")] = None,
        include_ingredients: Annotated[Optional[StrictStr], Field(description="A comma-separated list of ingredients that should/must be used in the recipes.")] = None,
        exclude_ingredients: Annotated[Optional[StrictStr], Field(description="A comma-separated list of ingredients or ingredient types that the recipes must not contain.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="The type of recipe. See a full list of supported meal types.")] = None,
        instructions_required: Annotated[Optional[StrictBool], Field(description="Whether the recipes must have instructions.")] = None,
        fill_ingredients: Annotated[Optional[StrictBool], Field(description="Add information about the ingredients and whether they are used or missing in relation to the query.")] = None,
        add_recipe_information: Annotated[Optional[StrictBool], Field(description="If set to true, you get more information about the recipes returned.")] = None,
        add_recipe_nutrition: Annotated[Optional[StrictBool], Field(description="If set to true, you get nutritional information about each recipes returned.")] = None,
        author: Annotated[Optional[StrictStr], Field(description="The username of the recipe author.")] = None,
        tags: Annotated[Optional[StrictStr], Field(description="The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.")] = None,
        recipe_box_id: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The id of the recipe box to which the search should be limited to.")] = None,
        title_match: Annotated[Optional[StrictStr], Field(description="Enter text that must be found in the title of the recipes.")] = None,
        max_ready_time: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum time in minutes it should take to prepare and cook the recipe.")] = None,
        ignore_pantry: Annotated[Optional[StrictBool], Field(description="Whether to ignore typical pantry items, such as water, salt, flour, etc.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="The strategy to sort recipes by. See a full list of supported sorting options.")] = None,
        sort_direction: Annotated[Optional[StrictStr], Field(description="The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).")] = None,
        min_carbs: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of carbohydrates in grams the recipe must have.")] = None,
        max_carbs: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of carbohydrates in grams the recipe can have.")] = None,
        min_protein: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of protein in grams the recipe must have.")] = None,
        max_protein: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of protein in grams the recipe can have.")] = None,
        min_calories: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of calories the recipe must have.")] = None,
        max_calories: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of calories the recipe can have.")] = None,
        min_fat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of fat in grams the recipe must have.")] = None,
        max_fat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of fat in grams the recipe can have.")] = None,
        min_alcohol: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of alcohol in grams the recipe must have.")] = None,
        max_alcohol: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of alcohol in grams the recipe can have.")] = None,
        min_caffeine: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of caffeine in milligrams the recipe must have.")] = None,
        max_caffeine: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of caffeine in milligrams the recipe can have.")] = None,
        min_copper: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of copper in milligrams the recipe must have.")] = None,
        max_copper: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of copper in milligrams the recipe can have.")] = None,
        min_calcium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of calcium in milligrams the recipe must have.")] = None,
        max_calcium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of calcium in milligrams the recipe can have.")] = None,
        min_choline: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of choline in milligrams the recipe must have.")] = None,
        max_choline: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of choline in milligrams the recipe can have.")] = None,
        min_cholesterol: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of cholesterol in milligrams the recipe must have.")] = None,
        max_cholesterol: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of cholesterol in milligrams the recipe can have.")] = None,
        min_fluoride: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of fluoride in milligrams the recipe must have.")] = None,
        max_fluoride: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of fluoride in milligrams the recipe can have.")] = None,
        min_saturated_fat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of saturated fat in grams the recipe must have.")] = None,
        max_saturated_fat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of saturated fat in grams the recipe can have.")] = None,
        min_vitamin_a: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin A in IU the recipe must have.")] = None,
        max_vitamin_a: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin A in IU the recipe can have.")] = None,
        min_vitamin_c: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin C milligrams the recipe must have.")] = None,
        max_vitamin_c: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin C in milligrams the recipe can have.")] = None,
        min_vitamin_d: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin D in micrograms the recipe must have.")] = None,
        max_vitamin_d: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin D in micrograms the recipe can have.")] = None,
        min_vitamin_e: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin E in milligrams the recipe must have.")] = None,
        max_vitamin_e: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin E in milligrams the recipe can have.")] = None,
        min_vitamin_k: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin K in micrograms the recipe must have.")] = None,
        max_vitamin_k: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin K in micrograms the recipe can have.")] = None,
        min_vitamin_b1: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B1 in milligrams the recipe must have.")] = None,
        max_vitamin_b1: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B1 in milligrams the recipe can have.")] = None,
        min_vitamin_b2: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B2 in milligrams the recipe must have.")] = None,
        max_vitamin_b2: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B2 in milligrams the recipe can have.")] = None,
        min_vitamin_b5: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B5 in milligrams the recipe must have.")] = None,
        max_vitamin_b5: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B5 in milligrams the recipe can have.")] = None,
        min_vitamin_b3: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B3 in milligrams the recipe must have.")] = None,
        max_vitamin_b3: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B3 in milligrams the recipe can have.")] = None,
        min_vitamin_b6: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B6 in milligrams the recipe must have.")] = None,
        max_vitamin_b6: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B6 in milligrams the recipe can have.")] = None,
        min_vitamin_b12: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B12 in micrograms the recipe must have.")] = None,
        max_vitamin_b12: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B12 in micrograms the recipe can have.")] = None,
        min_fiber: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of fiber in grams the recipe must have.")] = None,
        max_fiber: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of fiber in grams the recipe can have.")] = None,
        min_folate: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of folate in micrograms the recipe must have.")] = None,
        max_folate: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of folate in micrograms the recipe can have.")] = None,
        min_folic_acid: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of folic acid in micrograms the recipe must have.")] = None,
        max_folic_acid: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of folic acid in micrograms the recipe can have.")] = None,
        min_iodine: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of iodine in micrograms the recipe must have.")] = None,
        max_iodine: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of iodine in micrograms the recipe can have.")] = None,
        min_iron: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of iron in milligrams the recipe must have.")] = None,
        max_iron: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of iron in milligrams the recipe can have.")] = None,
        min_magnesium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of magnesium in milligrams the recipe must have.")] = None,
        max_magnesium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of magnesium in milligrams the recipe can have.")] = None,
        min_manganese: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of manganese in milligrams the recipe must have.")] = None,
        max_manganese: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of manganese in milligrams the recipe can have.")] = None,
        min_phosphorus: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of phosphorus in milligrams the recipe must have.")] = None,
        max_phosphorus: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of phosphorus in milligrams the recipe can have.")] = None,
        min_potassium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of potassium in milligrams the recipe must have.")] = None,
        max_potassium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of potassium in milligrams the recipe can have.")] = None,
        min_selenium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of selenium in micrograms the recipe must have.")] = None,
        max_selenium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of selenium in micrograms the recipe can have.")] = None,
        min_sodium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of sodium in milligrams the recipe must have.")] = None,
        max_sodium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of sodium in milligrams the recipe can have.")] = None,
        min_sugar: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of sugar in grams the recipe must have.")] = None,
        max_sugar: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of sugar in grams the recipe can have.")] = None,
        min_zinc: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of zinc in milligrams the recipe must have.")] = None,
        max_zinc: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of zinc in milligrams the recipe can have.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(le=900, strict=True, ge=0)]], Field(description="The number of results to skip (between 0 and 900).")] = None,
        number: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of items to return (between 1 and 100). Defaults to 10.")] = None,
        limit_license: Annotated[Optional[StrictBool], Field(description="Whether the recipes should have an open license that allows display with proper attribution.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchRecipes200Response:
        """Search Recipes

        Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.

        :param query: The (natural language) search query.
        :type query: str
        :param cuisine: The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as 'OR'). See a full list of supported cuisines.
        :type cuisine: str
        :param exclude_cuisine: The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as 'AND'). See a full list of supported cuisines.
        :type exclude_cuisine: str
        :param diet: The diet for which the recipes must be suitable. See a full list of supported diets.
        :type diet: str
        :param intolerances: A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
        :type intolerances: str
        :param equipment: The equipment required. Multiple values will be interpreted as 'or'. For example, value could be \"blender, frying pan, bowl\".
        :type equipment: str
        :param include_ingredients: A comma-separated list of ingredients that should/must be used in the recipes.
        :type include_ingredients: str
        :param exclude_ingredients: A comma-separated list of ingredients or ingredient types that the recipes must not contain.
        :type exclude_ingredients: str
        :param type: The type of recipe. See a full list of supported meal types.
        :type type: str
        :param instructions_required: Whether the recipes must have instructions.
        :type instructions_required: bool
        :param fill_ingredients: Add information about the ingredients and whether they are used or missing in relation to the query.
        :type fill_ingredients: bool
        :param add_recipe_information: If set to true, you get more information about the recipes returned.
        :type add_recipe_information: bool
        :param add_recipe_nutrition: If set to true, you get nutritional information about each recipes returned.
        :type add_recipe_nutrition: bool
        :param author: The username of the recipe author.
        :type author: str
        :param tags: The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
        :type tags: str
        :param recipe_box_id: The id of the recipe box to which the search should be limited to.
        :type recipe_box_id: float
        :param title_match: Enter text that must be found in the title of the recipes.
        :type title_match: str
        :param max_ready_time: The maximum time in minutes it should take to prepare and cook the recipe.
        :type max_ready_time: float
        :param ignore_pantry: Whether to ignore typical pantry items, such as water, salt, flour, etc.
        :type ignore_pantry: bool
        :param sort: The strategy to sort recipes by. See a full list of supported sorting options.
        :type sort: str
        :param sort_direction: The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).
        :type sort_direction: str
        :param min_carbs: The minimum amount of carbohydrates in grams the recipe must have.
        :type min_carbs: float
        :param max_carbs: The maximum amount of carbohydrates in grams the recipe can have.
        :type max_carbs: float
        :param min_protein: The minimum amount of protein in grams the recipe must have.
        :type min_protein: float
        :param max_protein: The maximum amount of protein in grams the recipe can have.
        :type max_protein: float
        :param min_calories: The minimum amount of calories the recipe must have.
        :type min_calories: float
        :param max_calories: The maximum amount of calories the recipe can have.
        :type max_calories: float
        :param min_fat: The minimum amount of fat in grams the recipe must have.
        :type min_fat: float
        :param max_fat: The maximum amount of fat in grams the recipe can have.
        :type max_fat: float
        :param min_alcohol: The minimum amount of alcohol in grams the recipe must have.
        :type min_alcohol: float
        :param max_alcohol: The maximum amount of alcohol in grams the recipe can have.
        :type max_alcohol: float
        :param min_caffeine: The minimum amount of caffeine in milligrams the recipe must have.
        :type min_caffeine: float
        :param max_caffeine: The maximum amount of caffeine in milligrams the recipe can have.
        :type max_caffeine: float
        :param min_copper: The minimum amount of copper in milligrams the recipe must have.
        :type min_copper: float
        :param max_copper: The maximum amount of copper in milligrams the recipe can have.
        :type max_copper: float
        :param min_calcium: The minimum amount of calcium in milligrams the recipe must have.
        :type min_calcium: float
        :param max_calcium: The maximum amount of calcium in milligrams the recipe can have.
        :type max_calcium: float
        :param min_choline: The minimum amount of choline in milligrams the recipe must have.
        :type min_choline: float
        :param max_choline: The maximum amount of choline in milligrams the recipe can have.
        :type max_choline: float
        :param min_cholesterol: The minimum amount of cholesterol in milligrams the recipe must have.
        :type min_cholesterol: float
        :param max_cholesterol: The maximum amount of cholesterol in milligrams the recipe can have.
        :type max_cholesterol: float
        :param min_fluoride: The minimum amount of fluoride in milligrams the recipe must have.
        :type min_fluoride: float
        :param max_fluoride: The maximum amount of fluoride in milligrams the recipe can have.
        :type max_fluoride: float
        :param min_saturated_fat: The minimum amount of saturated fat in grams the recipe must have.
        :type min_saturated_fat: float
        :param max_saturated_fat: The maximum amount of saturated fat in grams the recipe can have.
        :type max_saturated_fat: float
        :param min_vitamin_a: The minimum amount of Vitamin A in IU the recipe must have.
        :type min_vitamin_a: float
        :param max_vitamin_a: The maximum amount of Vitamin A in IU the recipe can have.
        :type max_vitamin_a: float
        :param min_vitamin_c: The minimum amount of Vitamin C milligrams the recipe must have.
        :type min_vitamin_c: float
        :param max_vitamin_c: The maximum amount of Vitamin C in milligrams the recipe can have.
        :type max_vitamin_c: float
        :param min_vitamin_d: The minimum amount of Vitamin D in micrograms the recipe must have.
        :type min_vitamin_d: float
        :param max_vitamin_d: The maximum amount of Vitamin D in micrograms the recipe can have.
        :type max_vitamin_d: float
        :param min_vitamin_e: The minimum amount of Vitamin E in milligrams the recipe must have.
        :type min_vitamin_e: float
        :param max_vitamin_e: The maximum amount of Vitamin E in milligrams the recipe can have.
        :type max_vitamin_e: float
        :param min_vitamin_k: The minimum amount of Vitamin K in micrograms the recipe must have.
        :type min_vitamin_k: float
        :param max_vitamin_k: The maximum amount of Vitamin K in micrograms the recipe can have.
        :type max_vitamin_k: float
        :param min_vitamin_b1: The minimum amount of Vitamin B1 in milligrams the recipe must have.
        :type min_vitamin_b1: float
        :param max_vitamin_b1: The maximum amount of Vitamin B1 in milligrams the recipe can have.
        :type max_vitamin_b1: float
        :param min_vitamin_b2: The minimum amount of Vitamin B2 in milligrams the recipe must have.
        :type min_vitamin_b2: float
        :param max_vitamin_b2: The maximum amount of Vitamin B2 in milligrams the recipe can have.
        :type max_vitamin_b2: float
        :param min_vitamin_b5: The minimum amount of Vitamin B5 in milligrams the recipe must have.
        :type min_vitamin_b5: float
        :param max_vitamin_b5: The maximum amount of Vitamin B5 in milligrams the recipe can have.
        :type max_vitamin_b5: float
        :param min_vitamin_b3: The minimum amount of Vitamin B3 in milligrams the recipe must have.
        :type min_vitamin_b3: float
        :param max_vitamin_b3: The maximum amount of Vitamin B3 in milligrams the recipe can have.
        :type max_vitamin_b3: float
        :param min_vitamin_b6: The minimum amount of Vitamin B6 in milligrams the recipe must have.
        :type min_vitamin_b6: float
        :param max_vitamin_b6: The maximum amount of Vitamin B6 in milligrams the recipe can have.
        :type max_vitamin_b6: float
        :param min_vitamin_b12: The minimum amount of Vitamin B12 in micrograms the recipe must have.
        :type min_vitamin_b12: float
        :param max_vitamin_b12: The maximum amount of Vitamin B12 in micrograms the recipe can have.
        :type max_vitamin_b12: float
        :param min_fiber: The minimum amount of fiber in grams the recipe must have.
        :type min_fiber: float
        :param max_fiber: The maximum amount of fiber in grams the recipe can have.
        :type max_fiber: float
        :param min_folate: The minimum amount of folate in micrograms the recipe must have.
        :type min_folate: float
        :param max_folate: The maximum amount of folate in micrograms the recipe can have.
        :type max_folate: float
        :param min_folic_acid: The minimum amount of folic acid in micrograms the recipe must have.
        :type min_folic_acid: float
        :param max_folic_acid: The maximum amount of folic acid in micrograms the recipe can have.
        :type max_folic_acid: float
        :param min_iodine: The minimum amount of iodine in micrograms the recipe must have.
        :type min_iodine: float
        :param max_iodine: The maximum amount of iodine in micrograms the recipe can have.
        :type max_iodine: float
        :param min_iron: The minimum amount of iron in milligrams the recipe must have.
        :type min_iron: float
        :param max_iron: The maximum amount of iron in milligrams the recipe can have.
        :type max_iron: float
        :param min_magnesium: The minimum amount of magnesium in milligrams the recipe must have.
        :type min_magnesium: float
        :param max_magnesium: The maximum amount of magnesium in milligrams the recipe can have.
        :type max_magnesium: float
        :param min_manganese: The minimum amount of manganese in milligrams the recipe must have.
        :type min_manganese: float
        :param max_manganese: The maximum amount of manganese in milligrams the recipe can have.
        :type max_manganese: float
        :param min_phosphorus: The minimum amount of phosphorus in milligrams the recipe must have.
        :type min_phosphorus: float
        :param max_phosphorus: The maximum amount of phosphorus in milligrams the recipe can have.
        :type max_phosphorus: float
        :param min_potassium: The minimum amount of potassium in milligrams the recipe must have.
        :type min_potassium: float
        :param max_potassium: The maximum amount of potassium in milligrams the recipe can have.
        :type max_potassium: float
        :param min_selenium: The minimum amount of selenium in micrograms the recipe must have.
        :type min_selenium: float
        :param max_selenium: The maximum amount of selenium in micrograms the recipe can have.
        :type max_selenium: float
        :param min_sodium: The minimum amount of sodium in milligrams the recipe must have.
        :type min_sodium: float
        :param max_sodium: The maximum amount of sodium in milligrams the recipe can have.
        :type max_sodium: float
        :param min_sugar: The minimum amount of sugar in grams the recipe must have.
        :type min_sugar: float
        :param max_sugar: The maximum amount of sugar in grams the recipe can have.
        :type max_sugar: float
        :param min_zinc: The minimum amount of zinc in milligrams the recipe must have.
        :type min_zinc: float
        :param max_zinc: The maximum amount of zinc in milligrams the recipe can have.
        :type max_zinc: float
        :param offset: The number of results to skip (between 0 and 900).
        :type offset: int
        :param number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :type number: int
        :param limit_license: Whether the recipes should have an open license that allows display with proper attribution.
        :type limit_license: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_recipes_serialize(
            query=query,
            cuisine=cuisine,
            exclude_cuisine=exclude_cuisine,
            diet=diet,
            intolerances=intolerances,
            equipment=equipment,
            include_ingredients=include_ingredients,
            exclude_ingredients=exclude_ingredients,
            type=type,
            instructions_required=instructions_required,
            fill_ingredients=fill_ingredients,
            add_recipe_information=add_recipe_information,
            add_recipe_nutrition=add_recipe_nutrition,
            author=author,
            tags=tags,
            recipe_box_id=recipe_box_id,
            title_match=title_match,
            max_ready_time=max_ready_time,
            ignore_pantry=ignore_pantry,
            sort=sort,
            sort_direction=sort_direction,
            min_carbs=min_carbs,
            max_carbs=max_carbs,
            min_protein=min_protein,
            max_protein=max_protein,
            min_calories=min_calories,
            max_calories=max_calories,
            min_fat=min_fat,
            max_fat=max_fat,
            min_alcohol=min_alcohol,
            max_alcohol=max_alcohol,
            min_caffeine=min_caffeine,
            max_caffeine=max_caffeine,
            min_copper=min_copper,
            max_copper=max_copper,
            min_calcium=min_calcium,
            max_calcium=max_calcium,
            min_choline=min_choline,
            max_choline=max_choline,
            min_cholesterol=min_cholesterol,
            max_cholesterol=max_cholesterol,
            min_fluoride=min_fluoride,
            max_fluoride=max_fluoride,
            min_saturated_fat=min_saturated_fat,
            max_saturated_fat=max_saturated_fat,
            min_vitamin_a=min_vitamin_a,
            max_vitamin_a=max_vitamin_a,
            min_vitamin_c=min_vitamin_c,
            max_vitamin_c=max_vitamin_c,
            min_vitamin_d=min_vitamin_d,
            max_vitamin_d=max_vitamin_d,
            min_vitamin_e=min_vitamin_e,
            max_vitamin_e=max_vitamin_e,
            min_vitamin_k=min_vitamin_k,
            max_vitamin_k=max_vitamin_k,
            min_vitamin_b1=min_vitamin_b1,
            max_vitamin_b1=max_vitamin_b1,
            min_vitamin_b2=min_vitamin_b2,
            max_vitamin_b2=max_vitamin_b2,
            min_vitamin_b5=min_vitamin_b5,
            max_vitamin_b5=max_vitamin_b5,
            min_vitamin_b3=min_vitamin_b3,
            max_vitamin_b3=max_vitamin_b3,
            min_vitamin_b6=min_vitamin_b6,
            max_vitamin_b6=max_vitamin_b6,
            min_vitamin_b12=min_vitamin_b12,
            max_vitamin_b12=max_vitamin_b12,
            min_fiber=min_fiber,
            max_fiber=max_fiber,
            min_folate=min_folate,
            max_folate=max_folate,
            min_folic_acid=min_folic_acid,
            max_folic_acid=max_folic_acid,
            min_iodine=min_iodine,
            max_iodine=max_iodine,
            min_iron=min_iron,
            max_iron=max_iron,
            min_magnesium=min_magnesium,
            max_magnesium=max_magnesium,
            min_manganese=min_manganese,
            max_manganese=max_manganese,
            min_phosphorus=min_phosphorus,
            max_phosphorus=max_phosphorus,
            min_potassium=min_potassium,
            max_potassium=max_potassium,
            min_selenium=min_selenium,
            max_selenium=max_selenium,
            min_sodium=min_sodium,
            max_sodium=max_sodium,
            min_sugar=min_sugar,
            max_sugar=max_sugar,
            min_zinc=min_zinc,
            max_zinc=max_zinc,
            offset=offset,
            number=number,
            limit_license=limit_license,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchRecipes200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_recipes_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="The (natural language) search query.")] = None,
        cuisine: Annotated[Optional[StrictStr], Field(description="The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as 'OR'). See a full list of supported cuisines.")] = None,
        exclude_cuisine: Annotated[Optional[StrictStr], Field(description="The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as 'AND'). See a full list of supported cuisines.")] = None,
        diet: Annotated[Optional[StrictStr], Field(description="The diet for which the recipes must be suitable. See a full list of supported diets.")] = None,
        intolerances: Annotated[Optional[StrictStr], Field(description="A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.")] = None,
        equipment: Annotated[Optional[StrictStr], Field(description="The equipment required. Multiple values will be interpreted as 'or'. For example, value could be \"blender, frying pan, bowl\".")] = None,
        include_ingredients: Annotated[Optional[StrictStr], Field(description="A comma-separated list of ingredients that should/must be used in the recipes.")] = None,
        exclude_ingredients: Annotated[Optional[StrictStr], Field(description="A comma-separated list of ingredients or ingredient types that the recipes must not contain.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="The type of recipe. See a full list of supported meal types.")] = None,
        instructions_required: Annotated[Optional[StrictBool], Field(description="Whether the recipes must have instructions.")] = None,
        fill_ingredients: Annotated[Optional[StrictBool], Field(description="Add information about the ingredients and whether they are used or missing in relation to the query.")] = None,
        add_recipe_information: Annotated[Optional[StrictBool], Field(description="If set to true, you get more information about the recipes returned.")] = None,
        add_recipe_nutrition: Annotated[Optional[StrictBool], Field(description="If set to true, you get nutritional information about each recipes returned.")] = None,
        author: Annotated[Optional[StrictStr], Field(description="The username of the recipe author.")] = None,
        tags: Annotated[Optional[StrictStr], Field(description="The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.")] = None,
        recipe_box_id: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The id of the recipe box to which the search should be limited to.")] = None,
        title_match: Annotated[Optional[StrictStr], Field(description="Enter text that must be found in the title of the recipes.")] = None,
        max_ready_time: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum time in minutes it should take to prepare and cook the recipe.")] = None,
        ignore_pantry: Annotated[Optional[StrictBool], Field(description="Whether to ignore typical pantry items, such as water, salt, flour, etc.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="The strategy to sort recipes by. See a full list of supported sorting options.")] = None,
        sort_direction: Annotated[Optional[StrictStr], Field(description="The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).")] = None,
        min_carbs: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of carbohydrates in grams the recipe must have.")] = None,
        max_carbs: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of carbohydrates in grams the recipe can have.")] = None,
        min_protein: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of protein in grams the recipe must have.")] = None,
        max_protein: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of protein in grams the recipe can have.")] = None,
        min_calories: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of calories the recipe must have.")] = None,
        max_calories: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of calories the recipe can have.")] = None,
        min_fat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of fat in grams the recipe must have.")] = None,
        max_fat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of fat in grams the recipe can have.")] = None,
        min_alcohol: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of alcohol in grams the recipe must have.")] = None,
        max_alcohol: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of alcohol in grams the recipe can have.")] = None,
        min_caffeine: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of caffeine in milligrams the recipe must have.")] = None,
        max_caffeine: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of caffeine in milligrams the recipe can have.")] = None,
        min_copper: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of copper in milligrams the recipe must have.")] = None,
        max_copper: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of copper in milligrams the recipe can have.")] = None,
        min_calcium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of calcium in milligrams the recipe must have.")] = None,
        max_calcium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of calcium in milligrams the recipe can have.")] = None,
        min_choline: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of choline in milligrams the recipe must have.")] = None,
        max_choline: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of choline in milligrams the recipe can have.")] = None,
        min_cholesterol: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of cholesterol in milligrams the recipe must have.")] = None,
        max_cholesterol: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of cholesterol in milligrams the recipe can have.")] = None,
        min_fluoride: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of fluoride in milligrams the recipe must have.")] = None,
        max_fluoride: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of fluoride in milligrams the recipe can have.")] = None,
        min_saturated_fat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of saturated fat in grams the recipe must have.")] = None,
        max_saturated_fat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of saturated fat in grams the recipe can have.")] = None,
        min_vitamin_a: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin A in IU the recipe must have.")] = None,
        max_vitamin_a: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin A in IU the recipe can have.")] = None,
        min_vitamin_c: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin C milligrams the recipe must have.")] = None,
        max_vitamin_c: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin C in milligrams the recipe can have.")] = None,
        min_vitamin_d: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin D in micrograms the recipe must have.")] = None,
        max_vitamin_d: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin D in micrograms the recipe can have.")] = None,
        min_vitamin_e: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin E in milligrams the recipe must have.")] = None,
        max_vitamin_e: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin E in milligrams the recipe can have.")] = None,
        min_vitamin_k: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin K in micrograms the recipe must have.")] = None,
        max_vitamin_k: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin K in micrograms the recipe can have.")] = None,
        min_vitamin_b1: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B1 in milligrams the recipe must have.")] = None,
        max_vitamin_b1: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B1 in milligrams the recipe can have.")] = None,
        min_vitamin_b2: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B2 in milligrams the recipe must have.")] = None,
        max_vitamin_b2: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B2 in milligrams the recipe can have.")] = None,
        min_vitamin_b5: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B5 in milligrams the recipe must have.")] = None,
        max_vitamin_b5: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B5 in milligrams the recipe can have.")] = None,
        min_vitamin_b3: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B3 in milligrams the recipe must have.")] = None,
        max_vitamin_b3: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B3 in milligrams the recipe can have.")] = None,
        min_vitamin_b6: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B6 in milligrams the recipe must have.")] = None,
        max_vitamin_b6: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B6 in milligrams the recipe can have.")] = None,
        min_vitamin_b12: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B12 in micrograms the recipe must have.")] = None,
        max_vitamin_b12: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B12 in micrograms the recipe can have.")] = None,
        min_fiber: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of fiber in grams the recipe must have.")] = None,
        max_fiber: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of fiber in grams the recipe can have.")] = None,
        min_folate: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of folate in micrograms the recipe must have.")] = None,
        max_folate: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of folate in micrograms the recipe can have.")] = None,
        min_folic_acid: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of folic acid in micrograms the recipe must have.")] = None,
        max_folic_acid: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of folic acid in micrograms the recipe can have.")] = None,
        min_iodine: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of iodine in micrograms the recipe must have.")] = None,
        max_iodine: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of iodine in micrograms the recipe can have.")] = None,
        min_iron: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of iron in milligrams the recipe must have.")] = None,
        max_iron: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of iron in milligrams the recipe can have.")] = None,
        min_magnesium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of magnesium in milligrams the recipe must have.")] = None,
        max_magnesium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of magnesium in milligrams the recipe can have.")] = None,
        min_manganese: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of manganese in milligrams the recipe must have.")] = None,
        max_manganese: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of manganese in milligrams the recipe can have.")] = None,
        min_phosphorus: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of phosphorus in milligrams the recipe must have.")] = None,
        max_phosphorus: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of phosphorus in milligrams the recipe can have.")] = None,
        min_potassium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of potassium in milligrams the recipe must have.")] = None,
        max_potassium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of potassium in milligrams the recipe can have.")] = None,
        min_selenium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of selenium in micrograms the recipe must have.")] = None,
        max_selenium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of selenium in micrograms the recipe can have.")] = None,
        min_sodium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of sodium in milligrams the recipe must have.")] = None,
        max_sodium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of sodium in milligrams the recipe can have.")] = None,
        min_sugar: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of sugar in grams the recipe must have.")] = None,
        max_sugar: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of sugar in grams the recipe can have.")] = None,
        min_zinc: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of zinc in milligrams the recipe must have.")] = None,
        max_zinc: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of zinc in milligrams the recipe can have.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(le=900, strict=True, ge=0)]], Field(description="The number of results to skip (between 0 and 900).")] = None,
        number: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of items to return (between 1 and 100). Defaults to 10.")] = None,
        limit_license: Annotated[Optional[StrictBool], Field(description="Whether the recipes should have an open license that allows display with proper attribution.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchRecipes200Response]:
        """Search Recipes

        Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.

        :param query: The (natural language) search query.
        :type query: str
        :param cuisine: The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as 'OR'). See a full list of supported cuisines.
        :type cuisine: str
        :param exclude_cuisine: The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as 'AND'). See a full list of supported cuisines.
        :type exclude_cuisine: str
        :param diet: The diet for which the recipes must be suitable. See a full list of supported diets.
        :type diet: str
        :param intolerances: A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
        :type intolerances: str
        :param equipment: The equipment required. Multiple values will be interpreted as 'or'. For example, value could be \"blender, frying pan, bowl\".
        :type equipment: str
        :param include_ingredients: A comma-separated list of ingredients that should/must be used in the recipes.
        :type include_ingredients: str
        :param exclude_ingredients: A comma-separated list of ingredients or ingredient types that the recipes must not contain.
        :type exclude_ingredients: str
        :param type: The type of recipe. See a full list of supported meal types.
        :type type: str
        :param instructions_required: Whether the recipes must have instructions.
        :type instructions_required: bool
        :param fill_ingredients: Add information about the ingredients and whether they are used or missing in relation to the query.
        :type fill_ingredients: bool
        :param add_recipe_information: If set to true, you get more information about the recipes returned.
        :type add_recipe_information: bool
        :param add_recipe_nutrition: If set to true, you get nutritional information about each recipes returned.
        :type add_recipe_nutrition: bool
        :param author: The username of the recipe author.
        :type author: str
        :param tags: The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
        :type tags: str
        :param recipe_box_id: The id of the recipe box to which the search should be limited to.
        :type recipe_box_id: float
        :param title_match: Enter text that must be found in the title of the recipes.
        :type title_match: str
        :param max_ready_time: The maximum time in minutes it should take to prepare and cook the recipe.
        :type max_ready_time: float
        :param ignore_pantry: Whether to ignore typical pantry items, such as water, salt, flour, etc.
        :type ignore_pantry: bool
        :param sort: The strategy to sort recipes by. See a full list of supported sorting options.
        :type sort: str
        :param sort_direction: The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).
        :type sort_direction: str
        :param min_carbs: The minimum amount of carbohydrates in grams the recipe must have.
        :type min_carbs: float
        :param max_carbs: The maximum amount of carbohydrates in grams the recipe can have.
        :type max_carbs: float
        :param min_protein: The minimum amount of protein in grams the recipe must have.
        :type min_protein: float
        :param max_protein: The maximum amount of protein in grams the recipe can have.
        :type max_protein: float
        :param min_calories: The minimum amount of calories the recipe must have.
        :type min_calories: float
        :param max_calories: The maximum amount of calories the recipe can have.
        :type max_calories: float
        :param min_fat: The minimum amount of fat in grams the recipe must have.
        :type min_fat: float
        :param max_fat: The maximum amount of fat in grams the recipe can have.
        :type max_fat: float
        :param min_alcohol: The minimum amount of alcohol in grams the recipe must have.
        :type min_alcohol: float
        :param max_alcohol: The maximum amount of alcohol in grams the recipe can have.
        :type max_alcohol: float
        :param min_caffeine: The minimum amount of caffeine in milligrams the recipe must have.
        :type min_caffeine: float
        :param max_caffeine: The maximum amount of caffeine in milligrams the recipe can have.
        :type max_caffeine: float
        :param min_copper: The minimum amount of copper in milligrams the recipe must have.
        :type min_copper: float
        :param max_copper: The maximum amount of copper in milligrams the recipe can have.
        :type max_copper: float
        :param min_calcium: The minimum amount of calcium in milligrams the recipe must have.
        :type min_calcium: float
        :param max_calcium: The maximum amount of calcium in milligrams the recipe can have.
        :type max_calcium: float
        :param min_choline: The minimum amount of choline in milligrams the recipe must have.
        :type min_choline: float
        :param max_choline: The maximum amount of choline in milligrams the recipe can have.
        :type max_choline: float
        :param min_cholesterol: The minimum amount of cholesterol in milligrams the recipe must have.
        :type min_cholesterol: float
        :param max_cholesterol: The maximum amount of cholesterol in milligrams the recipe can have.
        :type max_cholesterol: float
        :param min_fluoride: The minimum amount of fluoride in milligrams the recipe must have.
        :type min_fluoride: float
        :param max_fluoride: The maximum amount of fluoride in milligrams the recipe can have.
        :type max_fluoride: float
        :param min_saturated_fat: The minimum amount of saturated fat in grams the recipe must have.
        :type min_saturated_fat: float
        :param max_saturated_fat: The maximum amount of saturated fat in grams the recipe can have.
        :type max_saturated_fat: float
        :param min_vitamin_a: The minimum amount of Vitamin A in IU the recipe must have.
        :type min_vitamin_a: float
        :param max_vitamin_a: The maximum amount of Vitamin A in IU the recipe can have.
        :type max_vitamin_a: float
        :param min_vitamin_c: The minimum amount of Vitamin C milligrams the recipe must have.
        :type min_vitamin_c: float
        :param max_vitamin_c: The maximum amount of Vitamin C in milligrams the recipe can have.
        :type max_vitamin_c: float
        :param min_vitamin_d: The minimum amount of Vitamin D in micrograms the recipe must have.
        :type min_vitamin_d: float
        :param max_vitamin_d: The maximum amount of Vitamin D in micrograms the recipe can have.
        :type max_vitamin_d: float
        :param min_vitamin_e: The minimum amount of Vitamin E in milligrams the recipe must have.
        :type min_vitamin_e: float
        :param max_vitamin_e: The maximum amount of Vitamin E in milligrams the recipe can have.
        :type max_vitamin_e: float
        :param min_vitamin_k: The minimum amount of Vitamin K in micrograms the recipe must have.
        :type min_vitamin_k: float
        :param max_vitamin_k: The maximum amount of Vitamin K in micrograms the recipe can have.
        :type max_vitamin_k: float
        :param min_vitamin_b1: The minimum amount of Vitamin B1 in milligrams the recipe must have.
        :type min_vitamin_b1: float
        :param max_vitamin_b1: The maximum amount of Vitamin B1 in milligrams the recipe can have.
        :type max_vitamin_b1: float
        :param min_vitamin_b2: The minimum amount of Vitamin B2 in milligrams the recipe must have.
        :type min_vitamin_b2: float
        :param max_vitamin_b2: The maximum amount of Vitamin B2 in milligrams the recipe can have.
        :type max_vitamin_b2: float
        :param min_vitamin_b5: The minimum amount of Vitamin B5 in milligrams the recipe must have.
        :type min_vitamin_b5: float
        :param max_vitamin_b5: The maximum amount of Vitamin B5 in milligrams the recipe can have.
        :type max_vitamin_b5: float
        :param min_vitamin_b3: The minimum amount of Vitamin B3 in milligrams the recipe must have.
        :type min_vitamin_b3: float
        :param max_vitamin_b3: The maximum amount of Vitamin B3 in milligrams the recipe can have.
        :type max_vitamin_b3: float
        :param min_vitamin_b6: The minimum amount of Vitamin B6 in milligrams the recipe must have.
        :type min_vitamin_b6: float
        :param max_vitamin_b6: The maximum amount of Vitamin B6 in milligrams the recipe can have.
        :type max_vitamin_b6: float
        :param min_vitamin_b12: The minimum amount of Vitamin B12 in micrograms the recipe must have.
        :type min_vitamin_b12: float
        :param max_vitamin_b12: The maximum amount of Vitamin B12 in micrograms the recipe can have.
        :type max_vitamin_b12: float
        :param min_fiber: The minimum amount of fiber in grams the recipe must have.
        :type min_fiber: float
        :param max_fiber: The maximum amount of fiber in grams the recipe can have.
        :type max_fiber: float
        :param min_folate: The minimum amount of folate in micrograms the recipe must have.
        :type min_folate: float
        :param max_folate: The maximum amount of folate in micrograms the recipe can have.
        :type max_folate: float
        :param min_folic_acid: The minimum amount of folic acid in micrograms the recipe must have.
        :type min_folic_acid: float
        :param max_folic_acid: The maximum amount of folic acid in micrograms the recipe can have.
        :type max_folic_acid: float
        :param min_iodine: The minimum amount of iodine in micrograms the recipe must have.
        :type min_iodine: float
        :param max_iodine: The maximum amount of iodine in micrograms the recipe can have.
        :type max_iodine: float
        :param min_iron: The minimum amount of iron in milligrams the recipe must have.
        :type min_iron: float
        :param max_iron: The maximum amount of iron in milligrams the recipe can have.
        :type max_iron: float
        :param min_magnesium: The minimum amount of magnesium in milligrams the recipe must have.
        :type min_magnesium: float
        :param max_magnesium: The maximum amount of magnesium in milligrams the recipe can have.
        :type max_magnesium: float
        :param min_manganese: The minimum amount of manganese in milligrams the recipe must have.
        :type min_manganese: float
        :param max_manganese: The maximum amount of manganese in milligrams the recipe can have.
        :type max_manganese: float
        :param min_phosphorus: The minimum amount of phosphorus in milligrams the recipe must have.
        :type min_phosphorus: float
        :param max_phosphorus: The maximum amount of phosphorus in milligrams the recipe can have.
        :type max_phosphorus: float
        :param min_potassium: The minimum amount of potassium in milligrams the recipe must have.
        :type min_potassium: float
        :param max_potassium: The maximum amount of potassium in milligrams the recipe can have.
        :type max_potassium: float
        :param min_selenium: The minimum amount of selenium in micrograms the recipe must have.
        :type min_selenium: float
        :param max_selenium: The maximum amount of selenium in micrograms the recipe can have.
        :type max_selenium: float
        :param min_sodium: The minimum amount of sodium in milligrams the recipe must have.
        :type min_sodium: float
        :param max_sodium: The maximum amount of sodium in milligrams the recipe can have.
        :type max_sodium: float
        :param min_sugar: The minimum amount of sugar in grams the recipe must have.
        :type min_sugar: float
        :param max_sugar: The maximum amount of sugar in grams the recipe can have.
        :type max_sugar: float
        :param min_zinc: The minimum amount of zinc in milligrams the recipe must have.
        :type min_zinc: float
        :param max_zinc: The maximum amount of zinc in milligrams the recipe can have.
        :type max_zinc: float
        :param offset: The number of results to skip (between 0 and 900).
        :type offset: int
        :param number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :type number: int
        :param limit_license: Whether the recipes should have an open license that allows display with proper attribution.
        :type limit_license: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_recipes_serialize(
            query=query,
            cuisine=cuisine,
            exclude_cuisine=exclude_cuisine,
            diet=diet,
            intolerances=intolerances,
            equipment=equipment,
            include_ingredients=include_ingredients,
            exclude_ingredients=exclude_ingredients,
            type=type,
            instructions_required=instructions_required,
            fill_ingredients=fill_ingredients,
            add_recipe_information=add_recipe_information,
            add_recipe_nutrition=add_recipe_nutrition,
            author=author,
            tags=tags,
            recipe_box_id=recipe_box_id,
            title_match=title_match,
            max_ready_time=max_ready_time,
            ignore_pantry=ignore_pantry,
            sort=sort,
            sort_direction=sort_direction,
            min_carbs=min_carbs,
            max_carbs=max_carbs,
            min_protein=min_protein,
            max_protein=max_protein,
            min_calories=min_calories,
            max_calories=max_calories,
            min_fat=min_fat,
            max_fat=max_fat,
            min_alcohol=min_alcohol,
            max_alcohol=max_alcohol,
            min_caffeine=min_caffeine,
            max_caffeine=max_caffeine,
            min_copper=min_copper,
            max_copper=max_copper,
            min_calcium=min_calcium,
            max_calcium=max_calcium,
            min_choline=min_choline,
            max_choline=max_choline,
            min_cholesterol=min_cholesterol,
            max_cholesterol=max_cholesterol,
            min_fluoride=min_fluoride,
            max_fluoride=max_fluoride,
            min_saturated_fat=min_saturated_fat,
            max_saturated_fat=max_saturated_fat,
            min_vitamin_a=min_vitamin_a,
            max_vitamin_a=max_vitamin_a,
            min_vitamin_c=min_vitamin_c,
            max_vitamin_c=max_vitamin_c,
            min_vitamin_d=min_vitamin_d,
            max_vitamin_d=max_vitamin_d,
            min_vitamin_e=min_vitamin_e,
            max_vitamin_e=max_vitamin_e,
            min_vitamin_k=min_vitamin_k,
            max_vitamin_k=max_vitamin_k,
            min_vitamin_b1=min_vitamin_b1,
            max_vitamin_b1=max_vitamin_b1,
            min_vitamin_b2=min_vitamin_b2,
            max_vitamin_b2=max_vitamin_b2,
            min_vitamin_b5=min_vitamin_b5,
            max_vitamin_b5=max_vitamin_b5,
            min_vitamin_b3=min_vitamin_b3,
            max_vitamin_b3=max_vitamin_b3,
            min_vitamin_b6=min_vitamin_b6,
            max_vitamin_b6=max_vitamin_b6,
            min_vitamin_b12=min_vitamin_b12,
            max_vitamin_b12=max_vitamin_b12,
            min_fiber=min_fiber,
            max_fiber=max_fiber,
            min_folate=min_folate,
            max_folate=max_folate,
            min_folic_acid=min_folic_acid,
            max_folic_acid=max_folic_acid,
            min_iodine=min_iodine,
            max_iodine=max_iodine,
            min_iron=min_iron,
            max_iron=max_iron,
            min_magnesium=min_magnesium,
            max_magnesium=max_magnesium,
            min_manganese=min_manganese,
            max_manganese=max_manganese,
            min_phosphorus=min_phosphorus,
            max_phosphorus=max_phosphorus,
            min_potassium=min_potassium,
            max_potassium=max_potassium,
            min_selenium=min_selenium,
            max_selenium=max_selenium,
            min_sodium=min_sodium,
            max_sodium=max_sodium,
            min_sugar=min_sugar,
            max_sugar=max_sugar,
            min_zinc=min_zinc,
            max_zinc=max_zinc,
            offset=offset,
            number=number,
            limit_license=limit_license,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchRecipes200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_recipes_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="The (natural language) search query.")] = None,
        cuisine: Annotated[Optional[StrictStr], Field(description="The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as 'OR'). See a full list of supported cuisines.")] = None,
        exclude_cuisine: Annotated[Optional[StrictStr], Field(description="The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as 'AND'). See a full list of supported cuisines.")] = None,
        diet: Annotated[Optional[StrictStr], Field(description="The diet for which the recipes must be suitable. See a full list of supported diets.")] = None,
        intolerances: Annotated[Optional[StrictStr], Field(description="A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.")] = None,
        equipment: Annotated[Optional[StrictStr], Field(description="The equipment required. Multiple values will be interpreted as 'or'. For example, value could be \"blender, frying pan, bowl\".")] = None,
        include_ingredients: Annotated[Optional[StrictStr], Field(description="A comma-separated list of ingredients that should/must be used in the recipes.")] = None,
        exclude_ingredients: Annotated[Optional[StrictStr], Field(description="A comma-separated list of ingredients or ingredient types that the recipes must not contain.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="The type of recipe. See a full list of supported meal types.")] = None,
        instructions_required: Annotated[Optional[StrictBool], Field(description="Whether the recipes must have instructions.")] = None,
        fill_ingredients: Annotated[Optional[StrictBool], Field(description="Add information about the ingredients and whether they are used or missing in relation to the query.")] = None,
        add_recipe_information: Annotated[Optional[StrictBool], Field(description="If set to true, you get more information about the recipes returned.")] = None,
        add_recipe_nutrition: Annotated[Optional[StrictBool], Field(description="If set to true, you get nutritional information about each recipes returned.")] = None,
        author: Annotated[Optional[StrictStr], Field(description="The username of the recipe author.")] = None,
        tags: Annotated[Optional[StrictStr], Field(description="The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.")] = None,
        recipe_box_id: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The id of the recipe box to which the search should be limited to.")] = None,
        title_match: Annotated[Optional[StrictStr], Field(description="Enter text that must be found in the title of the recipes.")] = None,
        max_ready_time: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum time in minutes it should take to prepare and cook the recipe.")] = None,
        ignore_pantry: Annotated[Optional[StrictBool], Field(description="Whether to ignore typical pantry items, such as water, salt, flour, etc.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="The strategy to sort recipes by. See a full list of supported sorting options.")] = None,
        sort_direction: Annotated[Optional[StrictStr], Field(description="The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).")] = None,
        min_carbs: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of carbohydrates in grams the recipe must have.")] = None,
        max_carbs: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of carbohydrates in grams the recipe can have.")] = None,
        min_protein: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of protein in grams the recipe must have.")] = None,
        max_protein: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of protein in grams the recipe can have.")] = None,
        min_calories: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of calories the recipe must have.")] = None,
        max_calories: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of calories the recipe can have.")] = None,
        min_fat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of fat in grams the recipe must have.")] = None,
        max_fat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of fat in grams the recipe can have.")] = None,
        min_alcohol: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of alcohol in grams the recipe must have.")] = None,
        max_alcohol: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of alcohol in grams the recipe can have.")] = None,
        min_caffeine: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of caffeine in milligrams the recipe must have.")] = None,
        max_caffeine: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of caffeine in milligrams the recipe can have.")] = None,
        min_copper: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of copper in milligrams the recipe must have.")] = None,
        max_copper: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of copper in milligrams the recipe can have.")] = None,
        min_calcium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of calcium in milligrams the recipe must have.")] = None,
        max_calcium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of calcium in milligrams the recipe can have.")] = None,
        min_choline: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of choline in milligrams the recipe must have.")] = None,
        max_choline: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of choline in milligrams the recipe can have.")] = None,
        min_cholesterol: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of cholesterol in milligrams the recipe must have.")] = None,
        max_cholesterol: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of cholesterol in milligrams the recipe can have.")] = None,
        min_fluoride: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of fluoride in milligrams the recipe must have.")] = None,
        max_fluoride: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of fluoride in milligrams the recipe can have.")] = None,
        min_saturated_fat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of saturated fat in grams the recipe must have.")] = None,
        max_saturated_fat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of saturated fat in grams the recipe can have.")] = None,
        min_vitamin_a: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin A in IU the recipe must have.")] = None,
        max_vitamin_a: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin A in IU the recipe can have.")] = None,
        min_vitamin_c: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin C milligrams the recipe must have.")] = None,
        max_vitamin_c: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin C in milligrams the recipe can have.")] = None,
        min_vitamin_d: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin D in micrograms the recipe must have.")] = None,
        max_vitamin_d: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin D in micrograms the recipe can have.")] = None,
        min_vitamin_e: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin E in milligrams the recipe must have.")] = None,
        max_vitamin_e: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin E in milligrams the recipe can have.")] = None,
        min_vitamin_k: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin K in micrograms the recipe must have.")] = None,
        max_vitamin_k: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin K in micrograms the recipe can have.")] = None,
        min_vitamin_b1: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B1 in milligrams the recipe must have.")] = None,
        max_vitamin_b1: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B1 in milligrams the recipe can have.")] = None,
        min_vitamin_b2: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B2 in milligrams the recipe must have.")] = None,
        max_vitamin_b2: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B2 in milligrams the recipe can have.")] = None,
        min_vitamin_b5: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B5 in milligrams the recipe must have.")] = None,
        max_vitamin_b5: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B5 in milligrams the recipe can have.")] = None,
        min_vitamin_b3: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B3 in milligrams the recipe must have.")] = None,
        max_vitamin_b3: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B3 in milligrams the recipe can have.")] = None,
        min_vitamin_b6: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B6 in milligrams the recipe must have.")] = None,
        max_vitamin_b6: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B6 in milligrams the recipe can have.")] = None,
        min_vitamin_b12: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B12 in micrograms the recipe must have.")] = None,
        max_vitamin_b12: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B12 in micrograms the recipe can have.")] = None,
        min_fiber: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of fiber in grams the recipe must have.")] = None,
        max_fiber: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of fiber in grams the recipe can have.")] = None,
        min_folate: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of folate in micrograms the recipe must have.")] = None,
        max_folate: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of folate in micrograms the recipe can have.")] = None,
        min_folic_acid: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of folic acid in micrograms the recipe must have.")] = None,
        max_folic_acid: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of folic acid in micrograms the recipe can have.")] = None,
        min_iodine: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of iodine in micrograms the recipe must have.")] = None,
        max_iodine: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of iodine in micrograms the recipe can have.")] = None,
        min_iron: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of iron in milligrams the recipe must have.")] = None,
        max_iron: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of iron in milligrams the recipe can have.")] = None,
        min_magnesium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of magnesium in milligrams the recipe must have.")] = None,
        max_magnesium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of magnesium in milligrams the recipe can have.")] = None,
        min_manganese: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of manganese in milligrams the recipe must have.")] = None,
        max_manganese: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of manganese in milligrams the recipe can have.")] = None,
        min_phosphorus: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of phosphorus in milligrams the recipe must have.")] = None,
        max_phosphorus: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of phosphorus in milligrams the recipe can have.")] = None,
        min_potassium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of potassium in milligrams the recipe must have.")] = None,
        max_potassium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of potassium in milligrams the recipe can have.")] = None,
        min_selenium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of selenium in micrograms the recipe must have.")] = None,
        max_selenium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of selenium in micrograms the recipe can have.")] = None,
        min_sodium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of sodium in milligrams the recipe must have.")] = None,
        max_sodium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of sodium in milligrams the recipe can have.")] = None,
        min_sugar: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of sugar in grams the recipe must have.")] = None,
        max_sugar: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of sugar in grams the recipe can have.")] = None,
        min_zinc: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of zinc in milligrams the recipe must have.")] = None,
        max_zinc: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of zinc in milligrams the recipe can have.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(le=900, strict=True, ge=0)]], Field(description="The number of results to skip (between 0 and 900).")] = None,
        number: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of items to return (between 1 and 100). Defaults to 10.")] = None,
        limit_license: Annotated[Optional[StrictBool], Field(description="Whether the recipes should have an open license that allows display with proper attribution.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search Recipes

        Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.

        :param query: The (natural language) search query.
        :type query: str
        :param cuisine: The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as 'OR'). See a full list of supported cuisines.
        :type cuisine: str
        :param exclude_cuisine: The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as 'AND'). See a full list of supported cuisines.
        :type exclude_cuisine: str
        :param diet: The diet for which the recipes must be suitable. See a full list of supported diets.
        :type diet: str
        :param intolerances: A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
        :type intolerances: str
        :param equipment: The equipment required. Multiple values will be interpreted as 'or'. For example, value could be \"blender, frying pan, bowl\".
        :type equipment: str
        :param include_ingredients: A comma-separated list of ingredients that should/must be used in the recipes.
        :type include_ingredients: str
        :param exclude_ingredients: A comma-separated list of ingredients or ingredient types that the recipes must not contain.
        :type exclude_ingredients: str
        :param type: The type of recipe. See a full list of supported meal types.
        :type type: str
        :param instructions_required: Whether the recipes must have instructions.
        :type instructions_required: bool
        :param fill_ingredients: Add information about the ingredients and whether they are used or missing in relation to the query.
        :type fill_ingredients: bool
        :param add_recipe_information: If set to true, you get more information about the recipes returned.
        :type add_recipe_information: bool
        :param add_recipe_nutrition: If set to true, you get nutritional information about each recipes returned.
        :type add_recipe_nutrition: bool
        :param author: The username of the recipe author.
        :type author: str
        :param tags: The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
        :type tags: str
        :param recipe_box_id: The id of the recipe box to which the search should be limited to.
        :type recipe_box_id: float
        :param title_match: Enter text that must be found in the title of the recipes.
        :type title_match: str
        :param max_ready_time: The maximum time in minutes it should take to prepare and cook the recipe.
        :type max_ready_time: float
        :param ignore_pantry: Whether to ignore typical pantry items, such as water, salt, flour, etc.
        :type ignore_pantry: bool
        :param sort: The strategy to sort recipes by. See a full list of supported sorting options.
        :type sort: str
        :param sort_direction: The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).
        :type sort_direction: str
        :param min_carbs: The minimum amount of carbohydrates in grams the recipe must have.
        :type min_carbs: float
        :param max_carbs: The maximum amount of carbohydrates in grams the recipe can have.
        :type max_carbs: float
        :param min_protein: The minimum amount of protein in grams the recipe must have.
        :type min_protein: float
        :param max_protein: The maximum amount of protein in grams the recipe can have.
        :type max_protein: float
        :param min_calories: The minimum amount of calories the recipe must have.
        :type min_calories: float
        :param max_calories: The maximum amount of calories the recipe can have.
        :type max_calories: float
        :param min_fat: The minimum amount of fat in grams the recipe must have.
        :type min_fat: float
        :param max_fat: The maximum amount of fat in grams the recipe can have.
        :type max_fat: float
        :param min_alcohol: The minimum amount of alcohol in grams the recipe must have.
        :type min_alcohol: float
        :param max_alcohol: The maximum amount of alcohol in grams the recipe can have.
        :type max_alcohol: float
        :param min_caffeine: The minimum amount of caffeine in milligrams the recipe must have.
        :type min_caffeine: float
        :param max_caffeine: The maximum amount of caffeine in milligrams the recipe can have.
        :type max_caffeine: float
        :param min_copper: The minimum amount of copper in milligrams the recipe must have.
        :type min_copper: float
        :param max_copper: The maximum amount of copper in milligrams the recipe can have.
        :type max_copper: float
        :param min_calcium: The minimum amount of calcium in milligrams the recipe must have.
        :type min_calcium: float
        :param max_calcium: The maximum amount of calcium in milligrams the recipe can have.
        :type max_calcium: float
        :param min_choline: The minimum amount of choline in milligrams the recipe must have.
        :type min_choline: float
        :param max_choline: The maximum amount of choline in milligrams the recipe can have.
        :type max_choline: float
        :param min_cholesterol: The minimum amount of cholesterol in milligrams the recipe must have.
        :type min_cholesterol: float
        :param max_cholesterol: The maximum amount of cholesterol in milligrams the recipe can have.
        :type max_cholesterol: float
        :param min_fluoride: The minimum amount of fluoride in milligrams the recipe must have.
        :type min_fluoride: float
        :param max_fluoride: The maximum amount of fluoride in milligrams the recipe can have.
        :type max_fluoride: float
        :param min_saturated_fat: The minimum amount of saturated fat in grams the recipe must have.
        :type min_saturated_fat: float
        :param max_saturated_fat: The maximum amount of saturated fat in grams the recipe can have.
        :type max_saturated_fat: float
        :param min_vitamin_a: The minimum amount of Vitamin A in IU the recipe must have.
        :type min_vitamin_a: float
        :param max_vitamin_a: The maximum amount of Vitamin A in IU the recipe can have.
        :type max_vitamin_a: float
        :param min_vitamin_c: The minimum amount of Vitamin C milligrams the recipe must have.
        :type min_vitamin_c: float
        :param max_vitamin_c: The maximum amount of Vitamin C in milligrams the recipe can have.
        :type max_vitamin_c: float
        :param min_vitamin_d: The minimum amount of Vitamin D in micrograms the recipe must have.
        :type min_vitamin_d: float
        :param max_vitamin_d: The maximum amount of Vitamin D in micrograms the recipe can have.
        :type max_vitamin_d: float
        :param min_vitamin_e: The minimum amount of Vitamin E in milligrams the recipe must have.
        :type min_vitamin_e: float
        :param max_vitamin_e: The maximum amount of Vitamin E in milligrams the recipe can have.
        :type max_vitamin_e: float
        :param min_vitamin_k: The minimum amount of Vitamin K in micrograms the recipe must have.
        :type min_vitamin_k: float
        :param max_vitamin_k: The maximum amount of Vitamin K in micrograms the recipe can have.
        :type max_vitamin_k: float
        :param min_vitamin_b1: The minimum amount of Vitamin B1 in milligrams the recipe must have.
        :type min_vitamin_b1: float
        :param max_vitamin_b1: The maximum amount of Vitamin B1 in milligrams the recipe can have.
        :type max_vitamin_b1: float
        :param min_vitamin_b2: The minimum amount of Vitamin B2 in milligrams the recipe must have.
        :type min_vitamin_b2: float
        :param max_vitamin_b2: The maximum amount of Vitamin B2 in milligrams the recipe can have.
        :type max_vitamin_b2: float
        :param min_vitamin_b5: The minimum amount of Vitamin B5 in milligrams the recipe must have.
        :type min_vitamin_b5: float
        :param max_vitamin_b5: The maximum amount of Vitamin B5 in milligrams the recipe can have.
        :type max_vitamin_b5: float
        :param min_vitamin_b3: The minimum amount of Vitamin B3 in milligrams the recipe must have.
        :type min_vitamin_b3: float
        :param max_vitamin_b3: The maximum amount of Vitamin B3 in milligrams the recipe can have.
        :type max_vitamin_b3: float
        :param min_vitamin_b6: The minimum amount of Vitamin B6 in milligrams the recipe must have.
        :type min_vitamin_b6: float
        :param max_vitamin_b6: The maximum amount of Vitamin B6 in milligrams the recipe can have.
        :type max_vitamin_b6: float
        :param min_vitamin_b12: The minimum amount of Vitamin B12 in micrograms the recipe must have.
        :type min_vitamin_b12: float
        :param max_vitamin_b12: The maximum amount of Vitamin B12 in micrograms the recipe can have.
        :type max_vitamin_b12: float
        :param min_fiber: The minimum amount of fiber in grams the recipe must have.
        :type min_fiber: float
        :param max_fiber: The maximum amount of fiber in grams the recipe can have.
        :type max_fiber: float
        :param min_folate: The minimum amount of folate in micrograms the recipe must have.
        :type min_folate: float
        :param max_folate: The maximum amount of folate in micrograms the recipe can have.
        :type max_folate: float
        :param min_folic_acid: The minimum amount of folic acid in micrograms the recipe must have.
        :type min_folic_acid: float
        :param max_folic_acid: The maximum amount of folic acid in micrograms the recipe can have.
        :type max_folic_acid: float
        :param min_iodine: The minimum amount of iodine in micrograms the recipe must have.
        :type min_iodine: float
        :param max_iodine: The maximum amount of iodine in micrograms the recipe can have.
        :type max_iodine: float
        :param min_iron: The minimum amount of iron in milligrams the recipe must have.
        :type min_iron: float
        :param max_iron: The maximum amount of iron in milligrams the recipe can have.
        :type max_iron: float
        :param min_magnesium: The minimum amount of magnesium in milligrams the recipe must have.
        :type min_magnesium: float
        :param max_magnesium: The maximum amount of magnesium in milligrams the recipe can have.
        :type max_magnesium: float
        :param min_manganese: The minimum amount of manganese in milligrams the recipe must have.
        :type min_manganese: float
        :param max_manganese: The maximum amount of manganese in milligrams the recipe can have.
        :type max_manganese: float
        :param min_phosphorus: The minimum amount of phosphorus in milligrams the recipe must have.
        :type min_phosphorus: float
        :param max_phosphorus: The maximum amount of phosphorus in milligrams the recipe can have.
        :type max_phosphorus: float
        :param min_potassium: The minimum amount of potassium in milligrams the recipe must have.
        :type min_potassium: float
        :param max_potassium: The maximum amount of potassium in milligrams the recipe can have.
        :type max_potassium: float
        :param min_selenium: The minimum amount of selenium in micrograms the recipe must have.
        :type min_selenium: float
        :param max_selenium: The maximum amount of selenium in micrograms the recipe can have.
        :type max_selenium: float
        :param min_sodium: The minimum amount of sodium in milligrams the recipe must have.
        :type min_sodium: float
        :param max_sodium: The maximum amount of sodium in milligrams the recipe can have.
        :type max_sodium: float
        :param min_sugar: The minimum amount of sugar in grams the recipe must have.
        :type min_sugar: float
        :param max_sugar: The maximum amount of sugar in grams the recipe can have.
        :type max_sugar: float
        :param min_zinc: The minimum amount of zinc in milligrams the recipe must have.
        :type min_zinc: float
        :param max_zinc: The maximum amount of zinc in milligrams the recipe can have.
        :type max_zinc: float
        :param offset: The number of results to skip (between 0 and 900).
        :type offset: int
        :param number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :type number: int
        :param limit_license: Whether the recipes should have an open license that allows display with proper attribution.
        :type limit_license: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_recipes_serialize(
            query=query,
            cuisine=cuisine,
            exclude_cuisine=exclude_cuisine,
            diet=diet,
            intolerances=intolerances,
            equipment=equipment,
            include_ingredients=include_ingredients,
            exclude_ingredients=exclude_ingredients,
            type=type,
            instructions_required=instructions_required,
            fill_ingredients=fill_ingredients,
            add_recipe_information=add_recipe_information,
            add_recipe_nutrition=add_recipe_nutrition,
            author=author,
            tags=tags,
            recipe_box_id=recipe_box_id,
            title_match=title_match,
            max_ready_time=max_ready_time,
            ignore_pantry=ignore_pantry,
            sort=sort,
            sort_direction=sort_direction,
            min_carbs=min_carbs,
            max_carbs=max_carbs,
            min_protein=min_protein,
            max_protein=max_protein,
            min_calories=min_calories,
            max_calories=max_calories,
            min_fat=min_fat,
            max_fat=max_fat,
            min_alcohol=min_alcohol,
            max_alcohol=max_alcohol,
            min_caffeine=min_caffeine,
            max_caffeine=max_caffeine,
            min_copper=min_copper,
            max_copper=max_copper,
            min_calcium=min_calcium,
            max_calcium=max_calcium,
            min_choline=min_choline,
            max_choline=max_choline,
            min_cholesterol=min_cholesterol,
            max_cholesterol=max_cholesterol,
            min_fluoride=min_fluoride,
            max_fluoride=max_fluoride,
            min_saturated_fat=min_saturated_fat,
            max_saturated_fat=max_saturated_fat,
            min_vitamin_a=min_vitamin_a,
            max_vitamin_a=max_vitamin_a,
            min_vitamin_c=min_vitamin_c,
            max_vitamin_c=max_vitamin_c,
            min_vitamin_d=min_vitamin_d,
            max_vitamin_d=max_vitamin_d,
            min_vitamin_e=min_vitamin_e,
            max_vitamin_e=max_vitamin_e,
            min_vitamin_k=min_vitamin_k,
            max_vitamin_k=max_vitamin_k,
            min_vitamin_b1=min_vitamin_b1,
            max_vitamin_b1=max_vitamin_b1,
            min_vitamin_b2=min_vitamin_b2,
            max_vitamin_b2=max_vitamin_b2,
            min_vitamin_b5=min_vitamin_b5,
            max_vitamin_b5=max_vitamin_b5,
            min_vitamin_b3=min_vitamin_b3,
            max_vitamin_b3=max_vitamin_b3,
            min_vitamin_b6=min_vitamin_b6,
            max_vitamin_b6=max_vitamin_b6,
            min_vitamin_b12=min_vitamin_b12,
            max_vitamin_b12=max_vitamin_b12,
            min_fiber=min_fiber,
            max_fiber=max_fiber,
            min_folate=min_folate,
            max_folate=max_folate,
            min_folic_acid=min_folic_acid,
            max_folic_acid=max_folic_acid,
            min_iodine=min_iodine,
            max_iodine=max_iodine,
            min_iron=min_iron,
            max_iron=max_iron,
            min_magnesium=min_magnesium,
            max_magnesium=max_magnesium,
            min_manganese=min_manganese,
            max_manganese=max_manganese,
            min_phosphorus=min_phosphorus,
            max_phosphorus=max_phosphorus,
            min_potassium=min_potassium,
            max_potassium=max_potassium,
            min_selenium=min_selenium,
            max_selenium=max_selenium,
            min_sodium=min_sodium,
            max_sodium=max_sodium,
            min_sugar=min_sugar,
            max_sugar=max_sugar,
            min_zinc=min_zinc,
            max_zinc=max_zinc,
            offset=offset,
            number=number,
            limit_license=limit_license,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchRecipes200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_recipes_serialize(
        self,
        query,
        cuisine,
        exclude_cuisine,
        diet,
        intolerances,
        equipment,
        include_ingredients,
        exclude_ingredients,
        type,
        instructions_required,
        fill_ingredients,
        add_recipe_information,
        add_recipe_nutrition,
        author,
        tags,
        recipe_box_id,
        title_match,
        max_ready_time,
        ignore_pantry,
        sort,
        sort_direction,
        min_carbs,
        max_carbs,
        min_protein,
        max_protein,
        min_calories,
        max_calories,
        min_fat,
        max_fat,
        min_alcohol,
        max_alcohol,
        min_caffeine,
        max_caffeine,
        min_copper,
        max_copper,
        min_calcium,
        max_calcium,
        min_choline,
        max_choline,
        min_cholesterol,
        max_cholesterol,
        min_fluoride,
        max_fluoride,
        min_saturated_fat,
        max_saturated_fat,
        min_vitamin_a,
        max_vitamin_a,
        min_vitamin_c,
        max_vitamin_c,
        min_vitamin_d,
        max_vitamin_d,
        min_vitamin_e,
        max_vitamin_e,
        min_vitamin_k,
        max_vitamin_k,
        min_vitamin_b1,
        max_vitamin_b1,
        min_vitamin_b2,
        max_vitamin_b2,
        min_vitamin_b5,
        max_vitamin_b5,
        min_vitamin_b3,
        max_vitamin_b3,
        min_vitamin_b6,
        max_vitamin_b6,
        min_vitamin_b12,
        max_vitamin_b12,
        min_fiber,
        max_fiber,
        min_folate,
        max_folate,
        min_folic_acid,
        max_folic_acid,
        min_iodine,
        max_iodine,
        min_iron,
        max_iron,
        min_magnesium,
        max_magnesium,
        min_manganese,
        max_manganese,
        min_phosphorus,
        max_phosphorus,
        min_potassium,
        max_potassium,
        min_selenium,
        max_selenium,
        min_sodium,
        max_sodium,
        min_sugar,
        max_sugar,
        min_zinc,
        max_zinc,
        offset,
        number,
        limit_license,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if cuisine is not None:
            
            _query_params.append(('cuisine', cuisine))
            
        if exclude_cuisine is not None:
            
            _query_params.append(('excludeCuisine', exclude_cuisine))
            
        if diet is not None:
            
            _query_params.append(('diet', diet))
            
        if intolerances is not None:
            
            _query_params.append(('intolerances', intolerances))
            
        if equipment is not None:
            
            _query_params.append(('equipment', equipment))
            
        if include_ingredients is not None:
            
            _query_params.append(('includeIngredients', include_ingredients))
            
        if exclude_ingredients is not None:
            
            _query_params.append(('excludeIngredients', exclude_ingredients))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        if instructions_required is not None:
            
            _query_params.append(('instructionsRequired', instructions_required))
            
        if fill_ingredients is not None:
            
            _query_params.append(('fillIngredients', fill_ingredients))
            
        if add_recipe_information is not None:
            
            _query_params.append(('addRecipeInformation', add_recipe_information))
            
        if add_recipe_nutrition is not None:
            
            _query_params.append(('addRecipeNutrition', add_recipe_nutrition))
            
        if author is not None:
            
            _query_params.append(('author', author))
            
        if tags is not None:
            
            _query_params.append(('tags', tags))
            
        if recipe_box_id is not None:
            
            _query_params.append(('recipeBoxId', recipe_box_id))
            
        if title_match is not None:
            
            _query_params.append(('titleMatch', title_match))
            
        if max_ready_time is not None:
            
            _query_params.append(('maxReadyTime', max_ready_time))
            
        if ignore_pantry is not None:
            
            _query_params.append(('ignorePantry', ignore_pantry))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if sort_direction is not None:
            
            _query_params.append(('sortDirection', sort_direction))
            
        if min_carbs is not None:
            
            _query_params.append(('minCarbs', min_carbs))
            
        if max_carbs is not None:
            
            _query_params.append(('maxCarbs', max_carbs))
            
        if min_protein is not None:
            
            _query_params.append(('minProtein', min_protein))
            
        if max_protein is not None:
            
            _query_params.append(('maxProtein', max_protein))
            
        if min_calories is not None:
            
            _query_params.append(('minCalories', min_calories))
            
        if max_calories is not None:
            
            _query_params.append(('maxCalories', max_calories))
            
        if min_fat is not None:
            
            _query_params.append(('minFat', min_fat))
            
        if max_fat is not None:
            
            _query_params.append(('maxFat', max_fat))
            
        if min_alcohol is not None:
            
            _query_params.append(('minAlcohol', min_alcohol))
            
        if max_alcohol is not None:
            
            _query_params.append(('maxAlcohol', max_alcohol))
            
        if min_caffeine is not None:
            
            _query_params.append(('minCaffeine', min_caffeine))
            
        if max_caffeine is not None:
            
            _query_params.append(('maxCaffeine', max_caffeine))
            
        if min_copper is not None:
            
            _query_params.append(('minCopper', min_copper))
            
        if max_copper is not None:
            
            _query_params.append(('maxCopper', max_copper))
            
        if min_calcium is not None:
            
            _query_params.append(('minCalcium', min_calcium))
            
        if max_calcium is not None:
            
            _query_params.append(('maxCalcium', max_calcium))
            
        if min_choline is not None:
            
            _query_params.append(('minCholine', min_choline))
            
        if max_choline is not None:
            
            _query_params.append(('maxCholine', max_choline))
            
        if min_cholesterol is not None:
            
            _query_params.append(('minCholesterol', min_cholesterol))
            
        if max_cholesterol is not None:
            
            _query_params.append(('maxCholesterol', max_cholesterol))
            
        if min_fluoride is not None:
            
            _query_params.append(('minFluoride', min_fluoride))
            
        if max_fluoride is not None:
            
            _query_params.append(('maxFluoride', max_fluoride))
            
        if min_saturated_fat is not None:
            
            _query_params.append(('minSaturatedFat', min_saturated_fat))
            
        if max_saturated_fat is not None:
            
            _query_params.append(('maxSaturatedFat', max_saturated_fat))
            
        if min_vitamin_a is not None:
            
            _query_params.append(('minVitaminA', min_vitamin_a))
            
        if max_vitamin_a is not None:
            
            _query_params.append(('maxVitaminA', max_vitamin_a))
            
        if min_vitamin_c is not None:
            
            _query_params.append(('minVitaminC', min_vitamin_c))
            
        if max_vitamin_c is not None:
            
            _query_params.append(('maxVitaminC', max_vitamin_c))
            
        if min_vitamin_d is not None:
            
            _query_params.append(('minVitaminD', min_vitamin_d))
            
        if max_vitamin_d is not None:
            
            _query_params.append(('maxVitaminD', max_vitamin_d))
            
        if min_vitamin_e is not None:
            
            _query_params.append(('minVitaminE', min_vitamin_e))
            
        if max_vitamin_e is not None:
            
            _query_params.append(('maxVitaminE', max_vitamin_e))
            
        if min_vitamin_k is not None:
            
            _query_params.append(('minVitaminK', min_vitamin_k))
            
        if max_vitamin_k is not None:
            
            _query_params.append(('maxVitaminK', max_vitamin_k))
            
        if min_vitamin_b1 is not None:
            
            _query_params.append(('minVitaminB1', min_vitamin_b1))
            
        if max_vitamin_b1 is not None:
            
            _query_params.append(('maxVitaminB1', max_vitamin_b1))
            
        if min_vitamin_b2 is not None:
            
            _query_params.append(('minVitaminB2', min_vitamin_b2))
            
        if max_vitamin_b2 is not None:
            
            _query_params.append(('maxVitaminB2', max_vitamin_b2))
            
        if min_vitamin_b5 is not None:
            
            _query_params.append(('minVitaminB5', min_vitamin_b5))
            
        if max_vitamin_b5 is not None:
            
            _query_params.append(('maxVitaminB5', max_vitamin_b5))
            
        if min_vitamin_b3 is not None:
            
            _query_params.append(('minVitaminB3', min_vitamin_b3))
            
        if max_vitamin_b3 is not None:
            
            _query_params.append(('maxVitaminB3', max_vitamin_b3))
            
        if min_vitamin_b6 is not None:
            
            _query_params.append(('minVitaminB6', min_vitamin_b6))
            
        if max_vitamin_b6 is not None:
            
            _query_params.append(('maxVitaminB6', max_vitamin_b6))
            
        if min_vitamin_b12 is not None:
            
            _query_params.append(('minVitaminB12', min_vitamin_b12))
            
        if max_vitamin_b12 is not None:
            
            _query_params.append(('maxVitaminB12', max_vitamin_b12))
            
        if min_fiber is not None:
            
            _query_params.append(('minFiber', min_fiber))
            
        if max_fiber is not None:
            
            _query_params.append(('maxFiber', max_fiber))
            
        if min_folate is not None:
            
            _query_params.append(('minFolate', min_folate))
            
        if max_folate is not None:
            
            _query_params.append(('maxFolate', max_folate))
            
        if min_folic_acid is not None:
            
            _query_params.append(('minFolicAcid', min_folic_acid))
            
        if max_folic_acid is not None:
            
            _query_params.append(('maxFolicAcid', max_folic_acid))
            
        if min_iodine is not None:
            
            _query_params.append(('minIodine', min_iodine))
            
        if max_iodine is not None:
            
            _query_params.append(('maxIodine', max_iodine))
            
        if min_iron is not None:
            
            _query_params.append(('minIron', min_iron))
            
        if max_iron is not None:
            
            _query_params.append(('maxIron', max_iron))
            
        if min_magnesium is not None:
            
            _query_params.append(('minMagnesium', min_magnesium))
            
        if max_magnesium is not None:
            
            _query_params.append(('maxMagnesium', max_magnesium))
            
        if min_manganese is not None:
            
            _query_params.append(('minManganese', min_manganese))
            
        if max_manganese is not None:
            
            _query_params.append(('maxManganese', max_manganese))
            
        if min_phosphorus is not None:
            
            _query_params.append(('minPhosphorus', min_phosphorus))
            
        if max_phosphorus is not None:
            
            _query_params.append(('maxPhosphorus', max_phosphorus))
            
        if min_potassium is not None:
            
            _query_params.append(('minPotassium', min_potassium))
            
        if max_potassium is not None:
            
            _query_params.append(('maxPotassium', max_potassium))
            
        if min_selenium is not None:
            
            _query_params.append(('minSelenium', min_selenium))
            
        if max_selenium is not None:
            
            _query_params.append(('maxSelenium', max_selenium))
            
        if min_sodium is not None:
            
            _query_params.append(('minSodium', min_sodium))
            
        if max_sodium is not None:
            
            _query_params.append(('maxSodium', max_sodium))
            
        if min_sugar is not None:
            
            _query_params.append(('minSugar', min_sugar))
            
        if max_sugar is not None:
            
            _query_params.append(('maxSugar', max_sugar))
            
        if min_zinc is not None:
            
            _query_params.append(('minZinc', min_zinc))
            
        if max_zinc is not None:
            
            _query_params.append(('maxZinc', max_zinc))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if number is not None:
            
            _query_params.append(('number', number))
            
        if limit_license is not None:
            
            _query_params.append(('limitLicense', limit_license))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/complexSearch',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_recipes_by_ingredients(
        self,
        ingredients: Annotated[Optional[StrictStr], Field(description="A comma-separated list of ingredients that the recipes should contain.")] = None,
        number: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of items to return (between 1 and 100). Defaults to 10.")] = None,
        limit_license: Annotated[Optional[StrictBool], Field(description="Whether the recipes should have an open license that allows display with proper attribution.")] = None,
        ranking: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.")] = None,
        ignore_pantry: Annotated[Optional[StrictBool], Field(description="Whether to ignore typical pantry items, such as water, salt, flour, etc.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[SearchRecipesByIngredients200ResponseInner]:
        """Search Recipes by Ingredients

         Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don't currently have (post shopping).         

        :param ingredients: A comma-separated list of ingredients that the recipes should contain.
        :type ingredients: str
        :param number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :type number: int
        :param limit_license: Whether the recipes should have an open license that allows display with proper attribution.
        :type limit_license: bool
        :param ranking: Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
        :type ranking: float
        :param ignore_pantry: Whether to ignore typical pantry items, such as water, salt, flour, etc.
        :type ignore_pantry: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_recipes_by_ingredients_serialize(
            ingredients=ingredients,
            number=number,
            limit_license=limit_license,
            ranking=ranking,
            ignore_pantry=ignore_pantry,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SearchRecipesByIngredients200ResponseInner]",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_recipes_by_ingredients_with_http_info(
        self,
        ingredients: Annotated[Optional[StrictStr], Field(description="A comma-separated list of ingredients that the recipes should contain.")] = None,
        number: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of items to return (between 1 and 100). Defaults to 10.")] = None,
        limit_license: Annotated[Optional[StrictBool], Field(description="Whether the recipes should have an open license that allows display with proper attribution.")] = None,
        ranking: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.")] = None,
        ignore_pantry: Annotated[Optional[StrictBool], Field(description="Whether to ignore typical pantry items, such as water, salt, flour, etc.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[SearchRecipesByIngredients200ResponseInner]]:
        """Search Recipes by Ingredients

         Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don't currently have (post shopping).         

        :param ingredients: A comma-separated list of ingredients that the recipes should contain.
        :type ingredients: str
        :param number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :type number: int
        :param limit_license: Whether the recipes should have an open license that allows display with proper attribution.
        :type limit_license: bool
        :param ranking: Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
        :type ranking: float
        :param ignore_pantry: Whether to ignore typical pantry items, such as water, salt, flour, etc.
        :type ignore_pantry: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_recipes_by_ingredients_serialize(
            ingredients=ingredients,
            number=number,
            limit_license=limit_license,
            ranking=ranking,
            ignore_pantry=ignore_pantry,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SearchRecipesByIngredients200ResponseInner]",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_recipes_by_ingredients_without_preload_content(
        self,
        ingredients: Annotated[Optional[StrictStr], Field(description="A comma-separated list of ingredients that the recipes should contain.")] = None,
        number: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of items to return (between 1 and 100). Defaults to 10.")] = None,
        limit_license: Annotated[Optional[StrictBool], Field(description="Whether the recipes should have an open license that allows display with proper attribution.")] = None,
        ranking: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.")] = None,
        ignore_pantry: Annotated[Optional[StrictBool], Field(description="Whether to ignore typical pantry items, such as water, salt, flour, etc.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search Recipes by Ingredients

         Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don't currently have (post shopping).         

        :param ingredients: A comma-separated list of ingredients that the recipes should contain.
        :type ingredients: str
        :param number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :type number: int
        :param limit_license: Whether the recipes should have an open license that allows display with proper attribution.
        :type limit_license: bool
        :param ranking: Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
        :type ranking: float
        :param ignore_pantry: Whether to ignore typical pantry items, such as water, salt, flour, etc.
        :type ignore_pantry: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_recipes_by_ingredients_serialize(
            ingredients=ingredients,
            number=number,
            limit_license=limit_license,
            ranking=ranking,
            ignore_pantry=ignore_pantry,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SearchRecipesByIngredients200ResponseInner]",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_recipes_by_ingredients_serialize(
        self,
        ingredients,
        number,
        limit_license,
        ranking,
        ignore_pantry,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if ingredients is not None:
            
            _query_params.append(('ingredients', ingredients))
            
        if number is not None:
            
            _query_params.append(('number', number))
            
        if limit_license is not None:
            
            _query_params.append(('limitLicense', limit_license))
            
        if ranking is not None:
            
            _query_params.append(('ranking', ranking))
            
        if ignore_pantry is not None:
            
            _query_params.append(('ignorePantry', ignore_pantry))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/findByIngredients',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_recipes_by_nutrients(
        self,
        min_carbs: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of carbohydrates in grams the recipe must have.")] = None,
        max_carbs: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of carbohydrates in grams the recipe can have.")] = None,
        min_protein: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of protein in grams the recipe must have.")] = None,
        max_protein: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of protein in grams the recipe can have.")] = None,
        min_calories: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of calories the recipe must have.")] = None,
        max_calories: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of calories the recipe can have.")] = None,
        min_fat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of fat in grams the recipe must have.")] = None,
        max_fat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of fat in grams the recipe can have.")] = None,
        min_alcohol: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of alcohol in grams the recipe must have.")] = None,
        max_alcohol: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of alcohol in grams the recipe can have.")] = None,
        min_caffeine: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of caffeine in milligrams the recipe must have.")] = None,
        max_caffeine: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of caffeine in milligrams the recipe can have.")] = None,
        min_copper: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of copper in milligrams the recipe must have.")] = None,
        max_copper: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of copper in milligrams the recipe can have.")] = None,
        min_calcium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of calcium in milligrams the recipe must have.")] = None,
        max_calcium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of calcium in milligrams the recipe can have.")] = None,
        min_choline: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of choline in milligrams the recipe must have.")] = None,
        max_choline: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of choline in milligrams the recipe can have.")] = None,
        min_cholesterol: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of cholesterol in milligrams the recipe must have.")] = None,
        max_cholesterol: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of cholesterol in milligrams the recipe can have.")] = None,
        min_fluoride: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of fluoride in milligrams the recipe must have.")] = None,
        max_fluoride: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of fluoride in milligrams the recipe can have.")] = None,
        min_saturated_fat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of saturated fat in grams the recipe must have.")] = None,
        max_saturated_fat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of saturated fat in grams the recipe can have.")] = None,
        min_vitamin_a: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin A in IU the recipe must have.")] = None,
        max_vitamin_a: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin A in IU the recipe can have.")] = None,
        min_vitamin_c: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin C in milligrams the recipe must have.")] = None,
        max_vitamin_c: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin C in milligrams the recipe can have.")] = None,
        min_vitamin_d: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin D in micrograms the recipe must have.")] = None,
        max_vitamin_d: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin D in micrograms the recipe can have.")] = None,
        min_vitamin_e: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin E in milligrams the recipe must have.")] = None,
        max_vitamin_e: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin E in milligrams the recipe can have.")] = None,
        min_vitamin_k: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin K in micrograms the recipe must have.")] = None,
        max_vitamin_k: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin K in micrograms the recipe can have.")] = None,
        min_vitamin_b1: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B1 in milligrams the recipe must have.")] = None,
        max_vitamin_b1: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B1 in milligrams the recipe can have.")] = None,
        min_vitamin_b2: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B2 in milligrams the recipe must have.")] = None,
        max_vitamin_b2: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B2 in milligrams the recipe can have.")] = None,
        min_vitamin_b5: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B5 in milligrams the recipe must have.")] = None,
        max_vitamin_b5: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B5 in milligrams the recipe can have.")] = None,
        min_vitamin_b3: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B3 in milligrams the recipe must have.")] = None,
        max_vitamin_b3: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B3 in milligrams the recipe can have.")] = None,
        min_vitamin_b6: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B6 in milligrams the recipe must have.")] = None,
        max_vitamin_b6: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B6 in milligrams the recipe can have.")] = None,
        min_vitamin_b12: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B12 in micrograms the recipe must have.")] = None,
        max_vitamin_b12: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B12 in micrograms the recipe can have.")] = None,
        min_fiber: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of fiber in grams the recipe must have.")] = None,
        max_fiber: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of fiber in grams the recipe can have.")] = None,
        min_folate: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of folate in micrograms the recipe must have.")] = None,
        max_folate: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of folate in micrograms the recipe can have.")] = None,
        min_folic_acid: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of folic acid in micrograms the recipe must have.")] = None,
        max_folic_acid: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of folic acid in micrograms the recipe can have.")] = None,
        min_iodine: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of iodine in micrograms the recipe must have.")] = None,
        max_iodine: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of iodine in micrograms the recipe can have.")] = None,
        min_iron: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of iron in milligrams the recipe must have.")] = None,
        max_iron: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of iron in milligrams the recipe can have.")] = None,
        min_magnesium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of magnesium in milligrams the recipe must have.")] = None,
        max_magnesium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of magnesium in milligrams the recipe can have.")] = None,
        min_manganese: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of manganese in milligrams the recipe must have.")] = None,
        max_manganese: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of manganese in milligrams the recipe can have.")] = None,
        min_phosphorus: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of phosphorus in milligrams the recipe must have.")] = None,
        max_phosphorus: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of phosphorus in milligrams the recipe can have.")] = None,
        min_potassium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of potassium in milligrams the recipe must have.")] = None,
        max_potassium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of potassium in milligrams the recipe can have.")] = None,
        min_selenium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of selenium in micrograms the recipe must have.")] = None,
        max_selenium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of selenium in micrograms the recipe can have.")] = None,
        min_sodium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of sodium in milligrams the recipe must have.")] = None,
        max_sodium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of sodium in milligrams the recipe can have.")] = None,
        min_sugar: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of sugar in grams the recipe must have.")] = None,
        max_sugar: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of sugar in grams the recipe can have.")] = None,
        min_zinc: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of zinc in milligrams the recipe must have.")] = None,
        max_zinc: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of zinc in milligrams the recipe can have.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(le=900, strict=True, ge=0)]], Field(description="The number of results to skip (between 0 and 900).")] = None,
        number: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of items to return (between 1 and 100). Defaults to 10.")] = None,
        random: Annotated[Optional[StrictBool], Field(description="If true, every request will give you a random set of recipes within the requested limits.")] = None,
        limit_license: Annotated[Optional[StrictBool], Field(description="Whether the recipes should have an open license that allows display with proper attribution.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[SearchRecipes200ResponseResultsInner]:
        """Search Recipes by Nutrients

        Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.

        :param min_carbs: The minimum amount of carbohydrates in grams the recipe must have.
        :type min_carbs: float
        :param max_carbs: The maximum amount of carbohydrates in grams the recipe can have.
        :type max_carbs: float
        :param min_protein: The minimum amount of protein in grams the recipe must have.
        :type min_protein: float
        :param max_protein: The maximum amount of protein in grams the recipe can have.
        :type max_protein: float
        :param min_calories: The minimum amount of calories the recipe must have.
        :type min_calories: float
        :param max_calories: The maximum amount of calories the recipe can have.
        :type max_calories: float
        :param min_fat: The minimum amount of fat in grams the recipe must have.
        :type min_fat: float
        :param max_fat: The maximum amount of fat in grams the recipe can have.
        :type max_fat: float
        :param min_alcohol: The minimum amount of alcohol in grams the recipe must have.
        :type min_alcohol: float
        :param max_alcohol: The maximum amount of alcohol in grams the recipe can have.
        :type max_alcohol: float
        :param min_caffeine: The minimum amount of caffeine in milligrams the recipe must have.
        :type min_caffeine: float
        :param max_caffeine: The maximum amount of caffeine in milligrams the recipe can have.
        :type max_caffeine: float
        :param min_copper: The minimum amount of copper in milligrams the recipe must have.
        :type min_copper: float
        :param max_copper: The maximum amount of copper in milligrams the recipe can have.
        :type max_copper: float
        :param min_calcium: The minimum amount of calcium in milligrams the recipe must have.
        :type min_calcium: float
        :param max_calcium: The maximum amount of calcium in milligrams the recipe can have.
        :type max_calcium: float
        :param min_choline: The minimum amount of choline in milligrams the recipe must have.
        :type min_choline: float
        :param max_choline: The maximum amount of choline in milligrams the recipe can have.
        :type max_choline: float
        :param min_cholesterol: The minimum amount of cholesterol in milligrams the recipe must have.
        :type min_cholesterol: float
        :param max_cholesterol: The maximum amount of cholesterol in milligrams the recipe can have.
        :type max_cholesterol: float
        :param min_fluoride: The minimum amount of fluoride in milligrams the recipe must have.
        :type min_fluoride: float
        :param max_fluoride: The maximum amount of fluoride in milligrams the recipe can have.
        :type max_fluoride: float
        :param min_saturated_fat: The minimum amount of saturated fat in grams the recipe must have.
        :type min_saturated_fat: float
        :param max_saturated_fat: The maximum amount of saturated fat in grams the recipe can have.
        :type max_saturated_fat: float
        :param min_vitamin_a: The minimum amount of Vitamin A in IU the recipe must have.
        :type min_vitamin_a: float
        :param max_vitamin_a: The maximum amount of Vitamin A in IU the recipe can have.
        :type max_vitamin_a: float
        :param min_vitamin_c: The minimum amount of Vitamin C in milligrams the recipe must have.
        :type min_vitamin_c: float
        :param max_vitamin_c: The maximum amount of Vitamin C in milligrams the recipe can have.
        :type max_vitamin_c: float
        :param min_vitamin_d: The minimum amount of Vitamin D in micrograms the recipe must have.
        :type min_vitamin_d: float
        :param max_vitamin_d: The maximum amount of Vitamin D in micrograms the recipe can have.
        :type max_vitamin_d: float
        :param min_vitamin_e: The minimum amount of Vitamin E in milligrams the recipe must have.
        :type min_vitamin_e: float
        :param max_vitamin_e: The maximum amount of Vitamin E in milligrams the recipe can have.
        :type max_vitamin_e: float
        :param min_vitamin_k: The minimum amount of Vitamin K in micrograms the recipe must have.
        :type min_vitamin_k: float
        :param max_vitamin_k: The maximum amount of Vitamin K in micrograms the recipe can have.
        :type max_vitamin_k: float
        :param min_vitamin_b1: The minimum amount of Vitamin B1 in milligrams the recipe must have.
        :type min_vitamin_b1: float
        :param max_vitamin_b1: The maximum amount of Vitamin B1 in milligrams the recipe can have.
        :type max_vitamin_b1: float
        :param min_vitamin_b2: The minimum amount of Vitamin B2 in milligrams the recipe must have.
        :type min_vitamin_b2: float
        :param max_vitamin_b2: The maximum amount of Vitamin B2 in milligrams the recipe can have.
        :type max_vitamin_b2: float
        :param min_vitamin_b5: The minimum amount of Vitamin B5 in milligrams the recipe must have.
        :type min_vitamin_b5: float
        :param max_vitamin_b5: The maximum amount of Vitamin B5 in milligrams the recipe can have.
        :type max_vitamin_b5: float
        :param min_vitamin_b3: The minimum amount of Vitamin B3 in milligrams the recipe must have.
        :type min_vitamin_b3: float
        :param max_vitamin_b3: The maximum amount of Vitamin B3 in milligrams the recipe can have.
        :type max_vitamin_b3: float
        :param min_vitamin_b6: The minimum amount of Vitamin B6 in milligrams the recipe must have.
        :type min_vitamin_b6: float
        :param max_vitamin_b6: The maximum amount of Vitamin B6 in milligrams the recipe can have.
        :type max_vitamin_b6: float
        :param min_vitamin_b12: The minimum amount of Vitamin B12 in micrograms the recipe must have.
        :type min_vitamin_b12: float
        :param max_vitamin_b12: The maximum amount of Vitamin B12 in micrograms the recipe can have.
        :type max_vitamin_b12: float
        :param min_fiber: The minimum amount of fiber in grams the recipe must have.
        :type min_fiber: float
        :param max_fiber: The maximum amount of fiber in grams the recipe can have.
        :type max_fiber: float
        :param min_folate: The minimum amount of folate in micrograms the recipe must have.
        :type min_folate: float
        :param max_folate: The maximum amount of folate in micrograms the recipe can have.
        :type max_folate: float
        :param min_folic_acid: The minimum amount of folic acid in micrograms the recipe must have.
        :type min_folic_acid: float
        :param max_folic_acid: The maximum amount of folic acid in micrograms the recipe can have.
        :type max_folic_acid: float
        :param min_iodine: The minimum amount of iodine in micrograms the recipe must have.
        :type min_iodine: float
        :param max_iodine: The maximum amount of iodine in micrograms the recipe can have.
        :type max_iodine: float
        :param min_iron: The minimum amount of iron in milligrams the recipe must have.
        :type min_iron: float
        :param max_iron: The maximum amount of iron in milligrams the recipe can have.
        :type max_iron: float
        :param min_magnesium: The minimum amount of magnesium in milligrams the recipe must have.
        :type min_magnesium: float
        :param max_magnesium: The maximum amount of magnesium in milligrams the recipe can have.
        :type max_magnesium: float
        :param min_manganese: The minimum amount of manganese in milligrams the recipe must have.
        :type min_manganese: float
        :param max_manganese: The maximum amount of manganese in milligrams the recipe can have.
        :type max_manganese: float
        :param min_phosphorus: The minimum amount of phosphorus in milligrams the recipe must have.
        :type min_phosphorus: float
        :param max_phosphorus: The maximum amount of phosphorus in milligrams the recipe can have.
        :type max_phosphorus: float
        :param min_potassium: The minimum amount of potassium in milligrams the recipe must have.
        :type min_potassium: float
        :param max_potassium: The maximum amount of potassium in milligrams the recipe can have.
        :type max_potassium: float
        :param min_selenium: The minimum amount of selenium in micrograms the recipe must have.
        :type min_selenium: float
        :param max_selenium: The maximum amount of selenium in micrograms the recipe can have.
        :type max_selenium: float
        :param min_sodium: The minimum amount of sodium in milligrams the recipe must have.
        :type min_sodium: float
        :param max_sodium: The maximum amount of sodium in milligrams the recipe can have.
        :type max_sodium: float
        :param min_sugar: The minimum amount of sugar in grams the recipe must have.
        :type min_sugar: float
        :param max_sugar: The maximum amount of sugar in grams the recipe can have.
        :type max_sugar: float
        :param min_zinc: The minimum amount of zinc in milligrams the recipe must have.
        :type min_zinc: float
        :param max_zinc: The maximum amount of zinc in milligrams the recipe can have.
        :type max_zinc: float
        :param offset: The number of results to skip (between 0 and 900).
        :type offset: int
        :param number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :type number: int
        :param random: If true, every request will give you a random set of recipes within the requested limits.
        :type random: bool
        :param limit_license: Whether the recipes should have an open license that allows display with proper attribution.
        :type limit_license: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_recipes_by_nutrients_serialize(
            min_carbs=min_carbs,
            max_carbs=max_carbs,
            min_protein=min_protein,
            max_protein=max_protein,
            min_calories=min_calories,
            max_calories=max_calories,
            min_fat=min_fat,
            max_fat=max_fat,
            min_alcohol=min_alcohol,
            max_alcohol=max_alcohol,
            min_caffeine=min_caffeine,
            max_caffeine=max_caffeine,
            min_copper=min_copper,
            max_copper=max_copper,
            min_calcium=min_calcium,
            max_calcium=max_calcium,
            min_choline=min_choline,
            max_choline=max_choline,
            min_cholesterol=min_cholesterol,
            max_cholesterol=max_cholesterol,
            min_fluoride=min_fluoride,
            max_fluoride=max_fluoride,
            min_saturated_fat=min_saturated_fat,
            max_saturated_fat=max_saturated_fat,
            min_vitamin_a=min_vitamin_a,
            max_vitamin_a=max_vitamin_a,
            min_vitamin_c=min_vitamin_c,
            max_vitamin_c=max_vitamin_c,
            min_vitamin_d=min_vitamin_d,
            max_vitamin_d=max_vitamin_d,
            min_vitamin_e=min_vitamin_e,
            max_vitamin_e=max_vitamin_e,
            min_vitamin_k=min_vitamin_k,
            max_vitamin_k=max_vitamin_k,
            min_vitamin_b1=min_vitamin_b1,
            max_vitamin_b1=max_vitamin_b1,
            min_vitamin_b2=min_vitamin_b2,
            max_vitamin_b2=max_vitamin_b2,
            min_vitamin_b5=min_vitamin_b5,
            max_vitamin_b5=max_vitamin_b5,
            min_vitamin_b3=min_vitamin_b3,
            max_vitamin_b3=max_vitamin_b3,
            min_vitamin_b6=min_vitamin_b6,
            max_vitamin_b6=max_vitamin_b6,
            min_vitamin_b12=min_vitamin_b12,
            max_vitamin_b12=max_vitamin_b12,
            min_fiber=min_fiber,
            max_fiber=max_fiber,
            min_folate=min_folate,
            max_folate=max_folate,
            min_folic_acid=min_folic_acid,
            max_folic_acid=max_folic_acid,
            min_iodine=min_iodine,
            max_iodine=max_iodine,
            min_iron=min_iron,
            max_iron=max_iron,
            min_magnesium=min_magnesium,
            max_magnesium=max_magnesium,
            min_manganese=min_manganese,
            max_manganese=max_manganese,
            min_phosphorus=min_phosphorus,
            max_phosphorus=max_phosphorus,
            min_potassium=min_potassium,
            max_potassium=max_potassium,
            min_selenium=min_selenium,
            max_selenium=max_selenium,
            min_sodium=min_sodium,
            max_sodium=max_sodium,
            min_sugar=min_sugar,
            max_sugar=max_sugar,
            min_zinc=min_zinc,
            max_zinc=max_zinc,
            offset=offset,
            number=number,
            random=random,
            limit_license=limit_license,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SearchRecipes200ResponseResultsInner]",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_recipes_by_nutrients_with_http_info(
        self,
        min_carbs: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of carbohydrates in grams the recipe must have.")] = None,
        max_carbs: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of carbohydrates in grams the recipe can have.")] = None,
        min_protein: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of protein in grams the recipe must have.")] = None,
        max_protein: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of protein in grams the recipe can have.")] = None,
        min_calories: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of calories the recipe must have.")] = None,
        max_calories: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of calories the recipe can have.")] = None,
        min_fat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of fat in grams the recipe must have.")] = None,
        max_fat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of fat in grams the recipe can have.")] = None,
        min_alcohol: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of alcohol in grams the recipe must have.")] = None,
        max_alcohol: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of alcohol in grams the recipe can have.")] = None,
        min_caffeine: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of caffeine in milligrams the recipe must have.")] = None,
        max_caffeine: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of caffeine in milligrams the recipe can have.")] = None,
        min_copper: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of copper in milligrams the recipe must have.")] = None,
        max_copper: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of copper in milligrams the recipe can have.")] = None,
        min_calcium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of calcium in milligrams the recipe must have.")] = None,
        max_calcium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of calcium in milligrams the recipe can have.")] = None,
        min_choline: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of choline in milligrams the recipe must have.")] = None,
        max_choline: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of choline in milligrams the recipe can have.")] = None,
        min_cholesterol: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of cholesterol in milligrams the recipe must have.")] = None,
        max_cholesterol: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of cholesterol in milligrams the recipe can have.")] = None,
        min_fluoride: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of fluoride in milligrams the recipe must have.")] = None,
        max_fluoride: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of fluoride in milligrams the recipe can have.")] = None,
        min_saturated_fat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of saturated fat in grams the recipe must have.")] = None,
        max_saturated_fat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of saturated fat in grams the recipe can have.")] = None,
        min_vitamin_a: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin A in IU the recipe must have.")] = None,
        max_vitamin_a: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin A in IU the recipe can have.")] = None,
        min_vitamin_c: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin C in milligrams the recipe must have.")] = None,
        max_vitamin_c: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin C in milligrams the recipe can have.")] = None,
        min_vitamin_d: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin D in micrograms the recipe must have.")] = None,
        max_vitamin_d: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin D in micrograms the recipe can have.")] = None,
        min_vitamin_e: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin E in milligrams the recipe must have.")] = None,
        max_vitamin_e: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin E in milligrams the recipe can have.")] = None,
        min_vitamin_k: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin K in micrograms the recipe must have.")] = None,
        max_vitamin_k: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin K in micrograms the recipe can have.")] = None,
        min_vitamin_b1: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B1 in milligrams the recipe must have.")] = None,
        max_vitamin_b1: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B1 in milligrams the recipe can have.")] = None,
        min_vitamin_b2: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B2 in milligrams the recipe must have.")] = None,
        max_vitamin_b2: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B2 in milligrams the recipe can have.")] = None,
        min_vitamin_b5: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B5 in milligrams the recipe must have.")] = None,
        max_vitamin_b5: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B5 in milligrams the recipe can have.")] = None,
        min_vitamin_b3: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B3 in milligrams the recipe must have.")] = None,
        max_vitamin_b3: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B3 in milligrams the recipe can have.")] = None,
        min_vitamin_b6: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B6 in milligrams the recipe must have.")] = None,
        max_vitamin_b6: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B6 in milligrams the recipe can have.")] = None,
        min_vitamin_b12: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B12 in micrograms the recipe must have.")] = None,
        max_vitamin_b12: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B12 in micrograms the recipe can have.")] = None,
        min_fiber: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of fiber in grams the recipe must have.")] = None,
        max_fiber: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of fiber in grams the recipe can have.")] = None,
        min_folate: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of folate in micrograms the recipe must have.")] = None,
        max_folate: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of folate in micrograms the recipe can have.")] = None,
        min_folic_acid: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of folic acid in micrograms the recipe must have.")] = None,
        max_folic_acid: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of folic acid in micrograms the recipe can have.")] = None,
        min_iodine: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of iodine in micrograms the recipe must have.")] = None,
        max_iodine: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of iodine in micrograms the recipe can have.")] = None,
        min_iron: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of iron in milligrams the recipe must have.")] = None,
        max_iron: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of iron in milligrams the recipe can have.")] = None,
        min_magnesium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of magnesium in milligrams the recipe must have.")] = None,
        max_magnesium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of magnesium in milligrams the recipe can have.")] = None,
        min_manganese: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of manganese in milligrams the recipe must have.")] = None,
        max_manganese: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of manganese in milligrams the recipe can have.")] = None,
        min_phosphorus: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of phosphorus in milligrams the recipe must have.")] = None,
        max_phosphorus: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of phosphorus in milligrams the recipe can have.")] = None,
        min_potassium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of potassium in milligrams the recipe must have.")] = None,
        max_potassium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of potassium in milligrams the recipe can have.")] = None,
        min_selenium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of selenium in micrograms the recipe must have.")] = None,
        max_selenium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of selenium in micrograms the recipe can have.")] = None,
        min_sodium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of sodium in milligrams the recipe must have.")] = None,
        max_sodium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of sodium in milligrams the recipe can have.")] = None,
        min_sugar: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of sugar in grams the recipe must have.")] = None,
        max_sugar: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of sugar in grams the recipe can have.")] = None,
        min_zinc: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of zinc in milligrams the recipe must have.")] = None,
        max_zinc: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of zinc in milligrams the recipe can have.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(le=900, strict=True, ge=0)]], Field(description="The number of results to skip (between 0 and 900).")] = None,
        number: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of items to return (between 1 and 100). Defaults to 10.")] = None,
        random: Annotated[Optional[StrictBool], Field(description="If true, every request will give you a random set of recipes within the requested limits.")] = None,
        limit_license: Annotated[Optional[StrictBool], Field(description="Whether the recipes should have an open license that allows display with proper attribution.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[SearchRecipes200ResponseResultsInner]]:
        """Search Recipes by Nutrients

        Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.

        :param min_carbs: The minimum amount of carbohydrates in grams the recipe must have.
        :type min_carbs: float
        :param max_carbs: The maximum amount of carbohydrates in grams the recipe can have.
        :type max_carbs: float
        :param min_protein: The minimum amount of protein in grams the recipe must have.
        :type min_protein: float
        :param max_protein: The maximum amount of protein in grams the recipe can have.
        :type max_protein: float
        :param min_calories: The minimum amount of calories the recipe must have.
        :type min_calories: float
        :param max_calories: The maximum amount of calories the recipe can have.
        :type max_calories: float
        :param min_fat: The minimum amount of fat in grams the recipe must have.
        :type min_fat: float
        :param max_fat: The maximum amount of fat in grams the recipe can have.
        :type max_fat: float
        :param min_alcohol: The minimum amount of alcohol in grams the recipe must have.
        :type min_alcohol: float
        :param max_alcohol: The maximum amount of alcohol in grams the recipe can have.
        :type max_alcohol: float
        :param min_caffeine: The minimum amount of caffeine in milligrams the recipe must have.
        :type min_caffeine: float
        :param max_caffeine: The maximum amount of caffeine in milligrams the recipe can have.
        :type max_caffeine: float
        :param min_copper: The minimum amount of copper in milligrams the recipe must have.
        :type min_copper: float
        :param max_copper: The maximum amount of copper in milligrams the recipe can have.
        :type max_copper: float
        :param min_calcium: The minimum amount of calcium in milligrams the recipe must have.
        :type min_calcium: float
        :param max_calcium: The maximum amount of calcium in milligrams the recipe can have.
        :type max_calcium: float
        :param min_choline: The minimum amount of choline in milligrams the recipe must have.
        :type min_choline: float
        :param max_choline: The maximum amount of choline in milligrams the recipe can have.
        :type max_choline: float
        :param min_cholesterol: The minimum amount of cholesterol in milligrams the recipe must have.
        :type min_cholesterol: float
        :param max_cholesterol: The maximum amount of cholesterol in milligrams the recipe can have.
        :type max_cholesterol: float
        :param min_fluoride: The minimum amount of fluoride in milligrams the recipe must have.
        :type min_fluoride: float
        :param max_fluoride: The maximum amount of fluoride in milligrams the recipe can have.
        :type max_fluoride: float
        :param min_saturated_fat: The minimum amount of saturated fat in grams the recipe must have.
        :type min_saturated_fat: float
        :param max_saturated_fat: The maximum amount of saturated fat in grams the recipe can have.
        :type max_saturated_fat: float
        :param min_vitamin_a: The minimum amount of Vitamin A in IU the recipe must have.
        :type min_vitamin_a: float
        :param max_vitamin_a: The maximum amount of Vitamin A in IU the recipe can have.
        :type max_vitamin_a: float
        :param min_vitamin_c: The minimum amount of Vitamin C in milligrams the recipe must have.
        :type min_vitamin_c: float
        :param max_vitamin_c: The maximum amount of Vitamin C in milligrams the recipe can have.
        :type max_vitamin_c: float
        :param min_vitamin_d: The minimum amount of Vitamin D in micrograms the recipe must have.
        :type min_vitamin_d: float
        :param max_vitamin_d: The maximum amount of Vitamin D in micrograms the recipe can have.
        :type max_vitamin_d: float
        :param min_vitamin_e: The minimum amount of Vitamin E in milligrams the recipe must have.
        :type min_vitamin_e: float
        :param max_vitamin_e: The maximum amount of Vitamin E in milligrams the recipe can have.
        :type max_vitamin_e: float
        :param min_vitamin_k: The minimum amount of Vitamin K in micrograms the recipe must have.
        :type min_vitamin_k: float
        :param max_vitamin_k: The maximum amount of Vitamin K in micrograms the recipe can have.
        :type max_vitamin_k: float
        :param min_vitamin_b1: The minimum amount of Vitamin B1 in milligrams the recipe must have.
        :type min_vitamin_b1: float
        :param max_vitamin_b1: The maximum amount of Vitamin B1 in milligrams the recipe can have.
        :type max_vitamin_b1: float
        :param min_vitamin_b2: The minimum amount of Vitamin B2 in milligrams the recipe must have.
        :type min_vitamin_b2: float
        :param max_vitamin_b2: The maximum amount of Vitamin B2 in milligrams the recipe can have.
        :type max_vitamin_b2: float
        :param min_vitamin_b5: The minimum amount of Vitamin B5 in milligrams the recipe must have.
        :type min_vitamin_b5: float
        :param max_vitamin_b5: The maximum amount of Vitamin B5 in milligrams the recipe can have.
        :type max_vitamin_b5: float
        :param min_vitamin_b3: The minimum amount of Vitamin B3 in milligrams the recipe must have.
        :type min_vitamin_b3: float
        :param max_vitamin_b3: The maximum amount of Vitamin B3 in milligrams the recipe can have.
        :type max_vitamin_b3: float
        :param min_vitamin_b6: The minimum amount of Vitamin B6 in milligrams the recipe must have.
        :type min_vitamin_b6: float
        :param max_vitamin_b6: The maximum amount of Vitamin B6 in milligrams the recipe can have.
        :type max_vitamin_b6: float
        :param min_vitamin_b12: The minimum amount of Vitamin B12 in micrograms the recipe must have.
        :type min_vitamin_b12: float
        :param max_vitamin_b12: The maximum amount of Vitamin B12 in micrograms the recipe can have.
        :type max_vitamin_b12: float
        :param min_fiber: The minimum amount of fiber in grams the recipe must have.
        :type min_fiber: float
        :param max_fiber: The maximum amount of fiber in grams the recipe can have.
        :type max_fiber: float
        :param min_folate: The minimum amount of folate in micrograms the recipe must have.
        :type min_folate: float
        :param max_folate: The maximum amount of folate in micrograms the recipe can have.
        :type max_folate: float
        :param min_folic_acid: The minimum amount of folic acid in micrograms the recipe must have.
        :type min_folic_acid: float
        :param max_folic_acid: The maximum amount of folic acid in micrograms the recipe can have.
        :type max_folic_acid: float
        :param min_iodine: The minimum amount of iodine in micrograms the recipe must have.
        :type min_iodine: float
        :param max_iodine: The maximum amount of iodine in micrograms the recipe can have.
        :type max_iodine: float
        :param min_iron: The minimum amount of iron in milligrams the recipe must have.
        :type min_iron: float
        :param max_iron: The maximum amount of iron in milligrams the recipe can have.
        :type max_iron: float
        :param min_magnesium: The minimum amount of magnesium in milligrams the recipe must have.
        :type min_magnesium: float
        :param max_magnesium: The maximum amount of magnesium in milligrams the recipe can have.
        :type max_magnesium: float
        :param min_manganese: The minimum amount of manganese in milligrams the recipe must have.
        :type min_manganese: float
        :param max_manganese: The maximum amount of manganese in milligrams the recipe can have.
        :type max_manganese: float
        :param min_phosphorus: The minimum amount of phosphorus in milligrams the recipe must have.
        :type min_phosphorus: float
        :param max_phosphorus: The maximum amount of phosphorus in milligrams the recipe can have.
        :type max_phosphorus: float
        :param min_potassium: The minimum amount of potassium in milligrams the recipe must have.
        :type min_potassium: float
        :param max_potassium: The maximum amount of potassium in milligrams the recipe can have.
        :type max_potassium: float
        :param min_selenium: The minimum amount of selenium in micrograms the recipe must have.
        :type min_selenium: float
        :param max_selenium: The maximum amount of selenium in micrograms the recipe can have.
        :type max_selenium: float
        :param min_sodium: The minimum amount of sodium in milligrams the recipe must have.
        :type min_sodium: float
        :param max_sodium: The maximum amount of sodium in milligrams the recipe can have.
        :type max_sodium: float
        :param min_sugar: The minimum amount of sugar in grams the recipe must have.
        :type min_sugar: float
        :param max_sugar: The maximum amount of sugar in grams the recipe can have.
        :type max_sugar: float
        :param min_zinc: The minimum amount of zinc in milligrams the recipe must have.
        :type min_zinc: float
        :param max_zinc: The maximum amount of zinc in milligrams the recipe can have.
        :type max_zinc: float
        :param offset: The number of results to skip (between 0 and 900).
        :type offset: int
        :param number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :type number: int
        :param random: If true, every request will give you a random set of recipes within the requested limits.
        :type random: bool
        :param limit_license: Whether the recipes should have an open license that allows display with proper attribution.
        :type limit_license: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_recipes_by_nutrients_serialize(
            min_carbs=min_carbs,
            max_carbs=max_carbs,
            min_protein=min_protein,
            max_protein=max_protein,
            min_calories=min_calories,
            max_calories=max_calories,
            min_fat=min_fat,
            max_fat=max_fat,
            min_alcohol=min_alcohol,
            max_alcohol=max_alcohol,
            min_caffeine=min_caffeine,
            max_caffeine=max_caffeine,
            min_copper=min_copper,
            max_copper=max_copper,
            min_calcium=min_calcium,
            max_calcium=max_calcium,
            min_choline=min_choline,
            max_choline=max_choline,
            min_cholesterol=min_cholesterol,
            max_cholesterol=max_cholesterol,
            min_fluoride=min_fluoride,
            max_fluoride=max_fluoride,
            min_saturated_fat=min_saturated_fat,
            max_saturated_fat=max_saturated_fat,
            min_vitamin_a=min_vitamin_a,
            max_vitamin_a=max_vitamin_a,
            min_vitamin_c=min_vitamin_c,
            max_vitamin_c=max_vitamin_c,
            min_vitamin_d=min_vitamin_d,
            max_vitamin_d=max_vitamin_d,
            min_vitamin_e=min_vitamin_e,
            max_vitamin_e=max_vitamin_e,
            min_vitamin_k=min_vitamin_k,
            max_vitamin_k=max_vitamin_k,
            min_vitamin_b1=min_vitamin_b1,
            max_vitamin_b1=max_vitamin_b1,
            min_vitamin_b2=min_vitamin_b2,
            max_vitamin_b2=max_vitamin_b2,
            min_vitamin_b5=min_vitamin_b5,
            max_vitamin_b5=max_vitamin_b5,
            min_vitamin_b3=min_vitamin_b3,
            max_vitamin_b3=max_vitamin_b3,
            min_vitamin_b6=min_vitamin_b6,
            max_vitamin_b6=max_vitamin_b6,
            min_vitamin_b12=min_vitamin_b12,
            max_vitamin_b12=max_vitamin_b12,
            min_fiber=min_fiber,
            max_fiber=max_fiber,
            min_folate=min_folate,
            max_folate=max_folate,
            min_folic_acid=min_folic_acid,
            max_folic_acid=max_folic_acid,
            min_iodine=min_iodine,
            max_iodine=max_iodine,
            min_iron=min_iron,
            max_iron=max_iron,
            min_magnesium=min_magnesium,
            max_magnesium=max_magnesium,
            min_manganese=min_manganese,
            max_manganese=max_manganese,
            min_phosphorus=min_phosphorus,
            max_phosphorus=max_phosphorus,
            min_potassium=min_potassium,
            max_potassium=max_potassium,
            min_selenium=min_selenium,
            max_selenium=max_selenium,
            min_sodium=min_sodium,
            max_sodium=max_sodium,
            min_sugar=min_sugar,
            max_sugar=max_sugar,
            min_zinc=min_zinc,
            max_zinc=max_zinc,
            offset=offset,
            number=number,
            random=random,
            limit_license=limit_license,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SearchRecipes200ResponseResultsInner]",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_recipes_by_nutrients_without_preload_content(
        self,
        min_carbs: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of carbohydrates in grams the recipe must have.")] = None,
        max_carbs: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of carbohydrates in grams the recipe can have.")] = None,
        min_protein: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of protein in grams the recipe must have.")] = None,
        max_protein: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of protein in grams the recipe can have.")] = None,
        min_calories: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of calories the recipe must have.")] = None,
        max_calories: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of calories the recipe can have.")] = None,
        min_fat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of fat in grams the recipe must have.")] = None,
        max_fat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of fat in grams the recipe can have.")] = None,
        min_alcohol: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of alcohol in grams the recipe must have.")] = None,
        max_alcohol: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of alcohol in grams the recipe can have.")] = None,
        min_caffeine: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of caffeine in milligrams the recipe must have.")] = None,
        max_caffeine: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of caffeine in milligrams the recipe can have.")] = None,
        min_copper: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of copper in milligrams the recipe must have.")] = None,
        max_copper: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of copper in milligrams the recipe can have.")] = None,
        min_calcium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of calcium in milligrams the recipe must have.")] = None,
        max_calcium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of calcium in milligrams the recipe can have.")] = None,
        min_choline: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of choline in milligrams the recipe must have.")] = None,
        max_choline: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of choline in milligrams the recipe can have.")] = None,
        min_cholesterol: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of cholesterol in milligrams the recipe must have.")] = None,
        max_cholesterol: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of cholesterol in milligrams the recipe can have.")] = None,
        min_fluoride: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of fluoride in milligrams the recipe must have.")] = None,
        max_fluoride: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of fluoride in milligrams the recipe can have.")] = None,
        min_saturated_fat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of saturated fat in grams the recipe must have.")] = None,
        max_saturated_fat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of saturated fat in grams the recipe can have.")] = None,
        min_vitamin_a: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin A in IU the recipe must have.")] = None,
        max_vitamin_a: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin A in IU the recipe can have.")] = None,
        min_vitamin_c: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin C in milligrams the recipe must have.")] = None,
        max_vitamin_c: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin C in milligrams the recipe can have.")] = None,
        min_vitamin_d: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin D in micrograms the recipe must have.")] = None,
        max_vitamin_d: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin D in micrograms the recipe can have.")] = None,
        min_vitamin_e: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin E in milligrams the recipe must have.")] = None,
        max_vitamin_e: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin E in milligrams the recipe can have.")] = None,
        min_vitamin_k: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin K in micrograms the recipe must have.")] = None,
        max_vitamin_k: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin K in micrograms the recipe can have.")] = None,
        min_vitamin_b1: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B1 in milligrams the recipe must have.")] = None,
        max_vitamin_b1: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B1 in milligrams the recipe can have.")] = None,
        min_vitamin_b2: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B2 in milligrams the recipe must have.")] = None,
        max_vitamin_b2: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B2 in milligrams the recipe can have.")] = None,
        min_vitamin_b5: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B5 in milligrams the recipe must have.")] = None,
        max_vitamin_b5: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B5 in milligrams the recipe can have.")] = None,
        min_vitamin_b3: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B3 in milligrams the recipe must have.")] = None,
        max_vitamin_b3: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B3 in milligrams the recipe can have.")] = None,
        min_vitamin_b6: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B6 in milligrams the recipe must have.")] = None,
        max_vitamin_b6: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B6 in milligrams the recipe can have.")] = None,
        min_vitamin_b12: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of Vitamin B12 in micrograms the recipe must have.")] = None,
        max_vitamin_b12: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of Vitamin B12 in micrograms the recipe can have.")] = None,
        min_fiber: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of fiber in grams the recipe must have.")] = None,
        max_fiber: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of fiber in grams the recipe can have.")] = None,
        min_folate: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of folate in micrograms the recipe must have.")] = None,
        max_folate: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of folate in micrograms the recipe can have.")] = None,
        min_folic_acid: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of folic acid in micrograms the recipe must have.")] = None,
        max_folic_acid: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of folic acid in micrograms the recipe can have.")] = None,
        min_iodine: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of iodine in micrograms the recipe must have.")] = None,
        max_iodine: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of iodine in micrograms the recipe can have.")] = None,
        min_iron: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of iron in milligrams the recipe must have.")] = None,
        max_iron: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of iron in milligrams the recipe can have.")] = None,
        min_magnesium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of magnesium in milligrams the recipe must have.")] = None,
        max_magnesium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of magnesium in milligrams the recipe can have.")] = None,
        min_manganese: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of manganese in milligrams the recipe must have.")] = None,
        max_manganese: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of manganese in milligrams the recipe can have.")] = None,
        min_phosphorus: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of phosphorus in milligrams the recipe must have.")] = None,
        max_phosphorus: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of phosphorus in milligrams the recipe can have.")] = None,
        min_potassium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of potassium in milligrams the recipe must have.")] = None,
        max_potassium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of potassium in milligrams the recipe can have.")] = None,
        min_selenium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of selenium in micrograms the recipe must have.")] = None,
        max_selenium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of selenium in micrograms the recipe can have.")] = None,
        min_sodium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of sodium in milligrams the recipe must have.")] = None,
        max_sodium: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of sodium in milligrams the recipe can have.")] = None,
        min_sugar: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of sugar in grams the recipe must have.")] = None,
        max_sugar: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of sugar in grams the recipe can have.")] = None,
        min_zinc: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum amount of zinc in milligrams the recipe must have.")] = None,
        max_zinc: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of zinc in milligrams the recipe can have.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(le=900, strict=True, ge=0)]], Field(description="The number of results to skip (between 0 and 900).")] = None,
        number: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of items to return (between 1 and 100). Defaults to 10.")] = None,
        random: Annotated[Optional[StrictBool], Field(description="If true, every request will give you a random set of recipes within the requested limits.")] = None,
        limit_license: Annotated[Optional[StrictBool], Field(description="Whether the recipes should have an open license that allows display with proper attribution.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search Recipes by Nutrients

        Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.

        :param min_carbs: The minimum amount of carbohydrates in grams the recipe must have.
        :type min_carbs: float
        :param max_carbs: The maximum amount of carbohydrates in grams the recipe can have.
        :type max_carbs: float
        :param min_protein: The minimum amount of protein in grams the recipe must have.
        :type min_protein: float
        :param max_protein: The maximum amount of protein in grams the recipe can have.
        :type max_protein: float
        :param min_calories: The minimum amount of calories the recipe must have.
        :type min_calories: float
        :param max_calories: The maximum amount of calories the recipe can have.
        :type max_calories: float
        :param min_fat: The minimum amount of fat in grams the recipe must have.
        :type min_fat: float
        :param max_fat: The maximum amount of fat in grams the recipe can have.
        :type max_fat: float
        :param min_alcohol: The minimum amount of alcohol in grams the recipe must have.
        :type min_alcohol: float
        :param max_alcohol: The maximum amount of alcohol in grams the recipe can have.
        :type max_alcohol: float
        :param min_caffeine: The minimum amount of caffeine in milligrams the recipe must have.
        :type min_caffeine: float
        :param max_caffeine: The maximum amount of caffeine in milligrams the recipe can have.
        :type max_caffeine: float
        :param min_copper: The minimum amount of copper in milligrams the recipe must have.
        :type min_copper: float
        :param max_copper: The maximum amount of copper in milligrams the recipe can have.
        :type max_copper: float
        :param min_calcium: The minimum amount of calcium in milligrams the recipe must have.
        :type min_calcium: float
        :param max_calcium: The maximum amount of calcium in milligrams the recipe can have.
        :type max_calcium: float
        :param min_choline: The minimum amount of choline in milligrams the recipe must have.
        :type min_choline: float
        :param max_choline: The maximum amount of choline in milligrams the recipe can have.
        :type max_choline: float
        :param min_cholesterol: The minimum amount of cholesterol in milligrams the recipe must have.
        :type min_cholesterol: float
        :param max_cholesterol: The maximum amount of cholesterol in milligrams the recipe can have.
        :type max_cholesterol: float
        :param min_fluoride: The minimum amount of fluoride in milligrams the recipe must have.
        :type min_fluoride: float
        :param max_fluoride: The maximum amount of fluoride in milligrams the recipe can have.
        :type max_fluoride: float
        :param min_saturated_fat: The minimum amount of saturated fat in grams the recipe must have.
        :type min_saturated_fat: float
        :param max_saturated_fat: The maximum amount of saturated fat in grams the recipe can have.
        :type max_saturated_fat: float
        :param min_vitamin_a: The minimum amount of Vitamin A in IU the recipe must have.
        :type min_vitamin_a: float
        :param max_vitamin_a: The maximum amount of Vitamin A in IU the recipe can have.
        :type max_vitamin_a: float
        :param min_vitamin_c: The minimum amount of Vitamin C in milligrams the recipe must have.
        :type min_vitamin_c: float
        :param max_vitamin_c: The maximum amount of Vitamin C in milligrams the recipe can have.
        :type max_vitamin_c: float
        :param min_vitamin_d: The minimum amount of Vitamin D in micrograms the recipe must have.
        :type min_vitamin_d: float
        :param max_vitamin_d: The maximum amount of Vitamin D in micrograms the recipe can have.
        :type max_vitamin_d: float
        :param min_vitamin_e: The minimum amount of Vitamin E in milligrams the recipe must have.
        :type min_vitamin_e: float
        :param max_vitamin_e: The maximum amount of Vitamin E in milligrams the recipe can have.
        :type max_vitamin_e: float
        :param min_vitamin_k: The minimum amount of Vitamin K in micrograms the recipe must have.
        :type min_vitamin_k: float
        :param max_vitamin_k: The maximum amount of Vitamin K in micrograms the recipe can have.
        :type max_vitamin_k: float
        :param min_vitamin_b1: The minimum amount of Vitamin B1 in milligrams the recipe must have.
        :type min_vitamin_b1: float
        :param max_vitamin_b1: The maximum amount of Vitamin B1 in milligrams the recipe can have.
        :type max_vitamin_b1: float
        :param min_vitamin_b2: The minimum amount of Vitamin B2 in milligrams the recipe must have.
        :type min_vitamin_b2: float
        :param max_vitamin_b2: The maximum amount of Vitamin B2 in milligrams the recipe can have.
        :type max_vitamin_b2: float
        :param min_vitamin_b5: The minimum amount of Vitamin B5 in milligrams the recipe must have.
        :type min_vitamin_b5: float
        :param max_vitamin_b5: The maximum amount of Vitamin B5 in milligrams the recipe can have.
        :type max_vitamin_b5: float
        :param min_vitamin_b3: The minimum amount of Vitamin B3 in milligrams the recipe must have.
        :type min_vitamin_b3: float
        :param max_vitamin_b3: The maximum amount of Vitamin B3 in milligrams the recipe can have.
        :type max_vitamin_b3: float
        :param min_vitamin_b6: The minimum amount of Vitamin B6 in milligrams the recipe must have.
        :type min_vitamin_b6: float
        :param max_vitamin_b6: The maximum amount of Vitamin B6 in milligrams the recipe can have.
        :type max_vitamin_b6: float
        :param min_vitamin_b12: The minimum amount of Vitamin B12 in micrograms the recipe must have.
        :type min_vitamin_b12: float
        :param max_vitamin_b12: The maximum amount of Vitamin B12 in micrograms the recipe can have.
        :type max_vitamin_b12: float
        :param min_fiber: The minimum amount of fiber in grams the recipe must have.
        :type min_fiber: float
        :param max_fiber: The maximum amount of fiber in grams the recipe can have.
        :type max_fiber: float
        :param min_folate: The minimum amount of folate in micrograms the recipe must have.
        :type min_folate: float
        :param max_folate: The maximum amount of folate in micrograms the recipe can have.
        :type max_folate: float
        :param min_folic_acid: The minimum amount of folic acid in micrograms the recipe must have.
        :type min_folic_acid: float
        :param max_folic_acid: The maximum amount of folic acid in micrograms the recipe can have.
        :type max_folic_acid: float
        :param min_iodine: The minimum amount of iodine in micrograms the recipe must have.
        :type min_iodine: float
        :param max_iodine: The maximum amount of iodine in micrograms the recipe can have.
        :type max_iodine: float
        :param min_iron: The minimum amount of iron in milligrams the recipe must have.
        :type min_iron: float
        :param max_iron: The maximum amount of iron in milligrams the recipe can have.
        :type max_iron: float
        :param min_magnesium: The minimum amount of magnesium in milligrams the recipe must have.
        :type min_magnesium: float
        :param max_magnesium: The maximum amount of magnesium in milligrams the recipe can have.
        :type max_magnesium: float
        :param min_manganese: The minimum amount of manganese in milligrams the recipe must have.
        :type min_manganese: float
        :param max_manganese: The maximum amount of manganese in milligrams the recipe can have.
        :type max_manganese: float
        :param min_phosphorus: The minimum amount of phosphorus in milligrams the recipe must have.
        :type min_phosphorus: float
        :param max_phosphorus: The maximum amount of phosphorus in milligrams the recipe can have.
        :type max_phosphorus: float
        :param min_potassium: The minimum amount of potassium in milligrams the recipe must have.
        :type min_potassium: float
        :param max_potassium: The maximum amount of potassium in milligrams the recipe can have.
        :type max_potassium: float
        :param min_selenium: The minimum amount of selenium in micrograms the recipe must have.
        :type min_selenium: float
        :param max_selenium: The maximum amount of selenium in micrograms the recipe can have.
        :type max_selenium: float
        :param min_sodium: The minimum amount of sodium in milligrams the recipe must have.
        :type min_sodium: float
        :param max_sodium: The maximum amount of sodium in milligrams the recipe can have.
        :type max_sodium: float
        :param min_sugar: The minimum amount of sugar in grams the recipe must have.
        :type min_sugar: float
        :param max_sugar: The maximum amount of sugar in grams the recipe can have.
        :type max_sugar: float
        :param min_zinc: The minimum amount of zinc in milligrams the recipe must have.
        :type min_zinc: float
        :param max_zinc: The maximum amount of zinc in milligrams the recipe can have.
        :type max_zinc: float
        :param offset: The number of results to skip (between 0 and 900).
        :type offset: int
        :param number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :type number: int
        :param random: If true, every request will give you a random set of recipes within the requested limits.
        :type random: bool
        :param limit_license: Whether the recipes should have an open license that allows display with proper attribution.
        :type limit_license: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_recipes_by_nutrients_serialize(
            min_carbs=min_carbs,
            max_carbs=max_carbs,
            min_protein=min_protein,
            max_protein=max_protein,
            min_calories=min_calories,
            max_calories=max_calories,
            min_fat=min_fat,
            max_fat=max_fat,
            min_alcohol=min_alcohol,
            max_alcohol=max_alcohol,
            min_caffeine=min_caffeine,
            max_caffeine=max_caffeine,
            min_copper=min_copper,
            max_copper=max_copper,
            min_calcium=min_calcium,
            max_calcium=max_calcium,
            min_choline=min_choline,
            max_choline=max_choline,
            min_cholesterol=min_cholesterol,
            max_cholesterol=max_cholesterol,
            min_fluoride=min_fluoride,
            max_fluoride=max_fluoride,
            min_saturated_fat=min_saturated_fat,
            max_saturated_fat=max_saturated_fat,
            min_vitamin_a=min_vitamin_a,
            max_vitamin_a=max_vitamin_a,
            min_vitamin_c=min_vitamin_c,
            max_vitamin_c=max_vitamin_c,
            min_vitamin_d=min_vitamin_d,
            max_vitamin_d=max_vitamin_d,
            min_vitamin_e=min_vitamin_e,
            max_vitamin_e=max_vitamin_e,
            min_vitamin_k=min_vitamin_k,
            max_vitamin_k=max_vitamin_k,
            min_vitamin_b1=min_vitamin_b1,
            max_vitamin_b1=max_vitamin_b1,
            min_vitamin_b2=min_vitamin_b2,
            max_vitamin_b2=max_vitamin_b2,
            min_vitamin_b5=min_vitamin_b5,
            max_vitamin_b5=max_vitamin_b5,
            min_vitamin_b3=min_vitamin_b3,
            max_vitamin_b3=max_vitamin_b3,
            min_vitamin_b6=min_vitamin_b6,
            max_vitamin_b6=max_vitamin_b6,
            min_vitamin_b12=min_vitamin_b12,
            max_vitamin_b12=max_vitamin_b12,
            min_fiber=min_fiber,
            max_fiber=max_fiber,
            min_folate=min_folate,
            max_folate=max_folate,
            min_folic_acid=min_folic_acid,
            max_folic_acid=max_folic_acid,
            min_iodine=min_iodine,
            max_iodine=max_iodine,
            min_iron=min_iron,
            max_iron=max_iron,
            min_magnesium=min_magnesium,
            max_magnesium=max_magnesium,
            min_manganese=min_manganese,
            max_manganese=max_manganese,
            min_phosphorus=min_phosphorus,
            max_phosphorus=max_phosphorus,
            min_potassium=min_potassium,
            max_potassium=max_potassium,
            min_selenium=min_selenium,
            max_selenium=max_selenium,
            min_sodium=min_sodium,
            max_sodium=max_sodium,
            min_sugar=min_sugar,
            max_sugar=max_sugar,
            min_zinc=min_zinc,
            max_zinc=max_zinc,
            offset=offset,
            number=number,
            random=random,
            limit_license=limit_license,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SearchRecipes200ResponseResultsInner]",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_recipes_by_nutrients_serialize(
        self,
        min_carbs,
        max_carbs,
        min_protein,
        max_protein,
        min_calories,
        max_calories,
        min_fat,
        max_fat,
        min_alcohol,
        max_alcohol,
        min_caffeine,
        max_caffeine,
        min_copper,
        max_copper,
        min_calcium,
        max_calcium,
        min_choline,
        max_choline,
        min_cholesterol,
        max_cholesterol,
        min_fluoride,
        max_fluoride,
        min_saturated_fat,
        max_saturated_fat,
        min_vitamin_a,
        max_vitamin_a,
        min_vitamin_c,
        max_vitamin_c,
        min_vitamin_d,
        max_vitamin_d,
        min_vitamin_e,
        max_vitamin_e,
        min_vitamin_k,
        max_vitamin_k,
        min_vitamin_b1,
        max_vitamin_b1,
        min_vitamin_b2,
        max_vitamin_b2,
        min_vitamin_b5,
        max_vitamin_b5,
        min_vitamin_b3,
        max_vitamin_b3,
        min_vitamin_b6,
        max_vitamin_b6,
        min_vitamin_b12,
        max_vitamin_b12,
        min_fiber,
        max_fiber,
        min_folate,
        max_folate,
        min_folic_acid,
        max_folic_acid,
        min_iodine,
        max_iodine,
        min_iron,
        max_iron,
        min_magnesium,
        max_magnesium,
        min_manganese,
        max_manganese,
        min_phosphorus,
        max_phosphorus,
        min_potassium,
        max_potassium,
        min_selenium,
        max_selenium,
        min_sodium,
        max_sodium,
        min_sugar,
        max_sugar,
        min_zinc,
        max_zinc,
        offset,
        number,
        random,
        limit_license,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if min_carbs is not None:
            
            _query_params.append(('minCarbs', min_carbs))
            
        if max_carbs is not None:
            
            _query_params.append(('maxCarbs', max_carbs))
            
        if min_protein is not None:
            
            _query_params.append(('minProtein', min_protein))
            
        if max_protein is not None:
            
            _query_params.append(('maxProtein', max_protein))
            
        if min_calories is not None:
            
            _query_params.append(('minCalories', min_calories))
            
        if max_calories is not None:
            
            _query_params.append(('maxCalories', max_calories))
            
        if min_fat is not None:
            
            _query_params.append(('minFat', min_fat))
            
        if max_fat is not None:
            
            _query_params.append(('maxFat', max_fat))
            
        if min_alcohol is not None:
            
            _query_params.append(('minAlcohol', min_alcohol))
            
        if max_alcohol is not None:
            
            _query_params.append(('maxAlcohol', max_alcohol))
            
        if min_caffeine is not None:
            
            _query_params.append(('minCaffeine', min_caffeine))
            
        if max_caffeine is not None:
            
            _query_params.append(('maxCaffeine', max_caffeine))
            
        if min_copper is not None:
            
            _query_params.append(('minCopper', min_copper))
            
        if max_copper is not None:
            
            _query_params.append(('maxCopper', max_copper))
            
        if min_calcium is not None:
            
            _query_params.append(('minCalcium', min_calcium))
            
        if max_calcium is not None:
            
            _query_params.append(('maxCalcium', max_calcium))
            
        if min_choline is not None:
            
            _query_params.append(('minCholine', min_choline))
            
        if max_choline is not None:
            
            _query_params.append(('maxCholine', max_choline))
            
        if min_cholesterol is not None:
            
            _query_params.append(('minCholesterol', min_cholesterol))
            
        if max_cholesterol is not None:
            
            _query_params.append(('maxCholesterol', max_cholesterol))
            
        if min_fluoride is not None:
            
            _query_params.append(('minFluoride', min_fluoride))
            
        if max_fluoride is not None:
            
            _query_params.append(('maxFluoride', max_fluoride))
            
        if min_saturated_fat is not None:
            
            _query_params.append(('minSaturatedFat', min_saturated_fat))
            
        if max_saturated_fat is not None:
            
            _query_params.append(('maxSaturatedFat', max_saturated_fat))
            
        if min_vitamin_a is not None:
            
            _query_params.append(('minVitaminA', min_vitamin_a))
            
        if max_vitamin_a is not None:
            
            _query_params.append(('maxVitaminA', max_vitamin_a))
            
        if min_vitamin_c is not None:
            
            _query_params.append(('minVitaminC', min_vitamin_c))
            
        if max_vitamin_c is not None:
            
            _query_params.append(('maxVitaminC', max_vitamin_c))
            
        if min_vitamin_d is not None:
            
            _query_params.append(('minVitaminD', min_vitamin_d))
            
        if max_vitamin_d is not None:
            
            _query_params.append(('maxVitaminD', max_vitamin_d))
            
        if min_vitamin_e is not None:
            
            _query_params.append(('minVitaminE', min_vitamin_e))
            
        if max_vitamin_e is not None:
            
            _query_params.append(('maxVitaminE', max_vitamin_e))
            
        if min_vitamin_k is not None:
            
            _query_params.append(('minVitaminK', min_vitamin_k))
            
        if max_vitamin_k is not None:
            
            _query_params.append(('maxVitaminK', max_vitamin_k))
            
        if min_vitamin_b1 is not None:
            
            _query_params.append(('minVitaminB1', min_vitamin_b1))
            
        if max_vitamin_b1 is not None:
            
            _query_params.append(('maxVitaminB1', max_vitamin_b1))
            
        if min_vitamin_b2 is not None:
            
            _query_params.append(('minVitaminB2', min_vitamin_b2))
            
        if max_vitamin_b2 is not None:
            
            _query_params.append(('maxVitaminB2', max_vitamin_b2))
            
        if min_vitamin_b5 is not None:
            
            _query_params.append(('minVitaminB5', min_vitamin_b5))
            
        if max_vitamin_b5 is not None:
            
            _query_params.append(('maxVitaminB5', max_vitamin_b5))
            
        if min_vitamin_b3 is not None:
            
            _query_params.append(('minVitaminB3', min_vitamin_b3))
            
        if max_vitamin_b3 is not None:
            
            _query_params.append(('maxVitaminB3', max_vitamin_b3))
            
        if min_vitamin_b6 is not None:
            
            _query_params.append(('minVitaminB6', min_vitamin_b6))
            
        if max_vitamin_b6 is not None:
            
            _query_params.append(('maxVitaminB6', max_vitamin_b6))
            
        if min_vitamin_b12 is not None:
            
            _query_params.append(('minVitaminB12', min_vitamin_b12))
            
        if max_vitamin_b12 is not None:
            
            _query_params.append(('maxVitaminB12', max_vitamin_b12))
            
        if min_fiber is not None:
            
            _query_params.append(('minFiber', min_fiber))
            
        if max_fiber is not None:
            
            _query_params.append(('maxFiber', max_fiber))
            
        if min_folate is not None:
            
            _query_params.append(('minFolate', min_folate))
            
        if max_folate is not None:
            
            _query_params.append(('maxFolate', max_folate))
            
        if min_folic_acid is not None:
            
            _query_params.append(('minFolicAcid', min_folic_acid))
            
        if max_folic_acid is not None:
            
            _query_params.append(('maxFolicAcid', max_folic_acid))
            
        if min_iodine is not None:
            
            _query_params.append(('minIodine', min_iodine))
            
        if max_iodine is not None:
            
            _query_params.append(('maxIodine', max_iodine))
            
        if min_iron is not None:
            
            _query_params.append(('minIron', min_iron))
            
        if max_iron is not None:
            
            _query_params.append(('maxIron', max_iron))
            
        if min_magnesium is not None:
            
            _query_params.append(('minMagnesium', min_magnesium))
            
        if max_magnesium is not None:
            
            _query_params.append(('maxMagnesium', max_magnesium))
            
        if min_manganese is not None:
            
            _query_params.append(('minManganese', min_manganese))
            
        if max_manganese is not None:
            
            _query_params.append(('maxManganese', max_manganese))
            
        if min_phosphorus is not None:
            
            _query_params.append(('minPhosphorus', min_phosphorus))
            
        if max_phosphorus is not None:
            
            _query_params.append(('maxPhosphorus', max_phosphorus))
            
        if min_potassium is not None:
            
            _query_params.append(('minPotassium', min_potassium))
            
        if max_potassium is not None:
            
            _query_params.append(('maxPotassium', max_potassium))
            
        if min_selenium is not None:
            
            _query_params.append(('minSelenium', min_selenium))
            
        if max_selenium is not None:
            
            _query_params.append(('maxSelenium', max_selenium))
            
        if min_sodium is not None:
            
            _query_params.append(('minSodium', min_sodium))
            
        if max_sodium is not None:
            
            _query_params.append(('maxSodium', max_sodium))
            
        if min_sugar is not None:
            
            _query_params.append(('minSugar', min_sugar))
            
        if max_sugar is not None:
            
            _query_params.append(('maxSugar', max_sugar))
            
        if min_zinc is not None:
            
            _query_params.append(('minZinc', min_zinc))
            
        if max_zinc is not None:
            
            _query_params.append(('maxZinc', max_zinc))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if number is not None:
            
            _query_params.append(('number', number))
            
        if random is not None:
            
            _query_params.append(('random', random))
            
        if limit_license is not None:
            
            _query_params.append(('limitLicense', limit_license))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/findByNutrients',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def summarize_recipe(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SummarizeRecipe200Response:
        """Summarize Recipe

        Automatically generate a short description that summarizes key information about the recipe.

        :param id: The item's id. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._summarize_recipe_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SummarizeRecipe200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def summarize_recipe_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SummarizeRecipe200Response]:
        """Summarize Recipe

        Automatically generate a short description that summarizes key information about the recipe.

        :param id: The item's id. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._summarize_recipe_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SummarizeRecipe200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def summarize_recipe_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Summarize Recipe

        Automatically generate a short description that summarizes key information about the recipe.

        :param id: The item's id. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._summarize_recipe_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SummarizeRecipe200Response",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _summarize_recipe_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/{id}/summary',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def visualize_equipment(
        self,
        content_type: Annotated[Optional[StrictStr], Field(description="The content type.")] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Accept header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Equipment Widget

        Visualize the equipment used to make a recipe.

        :param content_type: The content type.
        :type content_type: str
        :param accept: Accept header.
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_equipment_serialize(
            content_type=content_type,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def visualize_equipment_with_http_info(
        self,
        content_type: Annotated[Optional[StrictStr], Field(description="The content type.")] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Accept header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Equipment Widget

        Visualize the equipment used to make a recipe.

        :param content_type: The content type.
        :type content_type: str
        :param accept: Accept header.
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_equipment_serialize(
            content_type=content_type,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def visualize_equipment_without_preload_content(
        self,
        content_type: Annotated[Optional[StrictStr], Field(description="The content type.")] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Accept header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Equipment Widget

        Visualize the equipment used to make a recipe.

        :param content_type: The content type.
        :type content_type: str
        :param accept: Accept header.
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_equipment_serialize(
            content_type=content_type,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _visualize_equipment_serialize(
        self,
        content_type,
        accept,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if content_type is not None:
            _header_params['Content-Type'] = content_type
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/html'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/recipes/visualizeEquipment',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def visualize_price_breakdown(
        self,
        content_type: Annotated[Optional[StrictStr], Field(description="The content type.")] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Accept header.")] = None,
        language: Annotated[Optional[StrictStr], Field(description="The language of the input. Either 'en' or 'de'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Price Breakdown Widget

        Visualize the price breakdown of a recipe.

        :param content_type: The content type.
        :type content_type: str
        :param accept: Accept header.
        :type accept: str
        :param language: The language of the input. Either 'en' or 'de'.
        :type language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_price_breakdown_serialize(
            content_type=content_type,
            accept=accept,
            language=language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def visualize_price_breakdown_with_http_info(
        self,
        content_type: Annotated[Optional[StrictStr], Field(description="The content type.")] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Accept header.")] = None,
        language: Annotated[Optional[StrictStr], Field(description="The language of the input. Either 'en' or 'de'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Price Breakdown Widget

        Visualize the price breakdown of a recipe.

        :param content_type: The content type.
        :type content_type: str
        :param accept: Accept header.
        :type accept: str
        :param language: The language of the input. Either 'en' or 'de'.
        :type language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_price_breakdown_serialize(
            content_type=content_type,
            accept=accept,
            language=language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def visualize_price_breakdown_without_preload_content(
        self,
        content_type: Annotated[Optional[StrictStr], Field(description="The content type.")] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Accept header.")] = None,
        language: Annotated[Optional[StrictStr], Field(description="The language of the input. Either 'en' or 'de'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Price Breakdown Widget

        Visualize the price breakdown of a recipe.

        :param content_type: The content type.
        :type content_type: str
        :param accept: Accept header.
        :type accept: str
        :param language: The language of the input. Either 'en' or 'de'.
        :type language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_price_breakdown_serialize(
            content_type=content_type,
            accept=accept,
            language=language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _visualize_price_breakdown_serialize(
        self,
        content_type,
        accept,
        language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if language is not None:
            
            _query_params.append(('language', language))
            
        # process the header parameters
        if content_type is not None:
            _header_params['Content-Type'] = content_type
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/html'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/recipes/visualizePriceEstimator',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def visualize_recipe_equipment_by_id(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        default_css: Annotated[Optional[StrictBool], Field(description="Whether the default CSS should be added to the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Equipment by ID Widget

        Visualize a recipe's equipment list.

        :param id: The item's id. (required)
        :type id: int
        :param default_css: Whether the default CSS should be added to the response.
        :type default_css: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_recipe_equipment_by_id_serialize(
            id=id,
            default_css=default_css,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def visualize_recipe_equipment_by_id_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        default_css: Annotated[Optional[StrictBool], Field(description="Whether the default CSS should be added to the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Equipment by ID Widget

        Visualize a recipe's equipment list.

        :param id: The item's id. (required)
        :type id: int
        :param default_css: Whether the default CSS should be added to the response.
        :type default_css: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_recipe_equipment_by_id_serialize(
            id=id,
            default_css=default_css,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def visualize_recipe_equipment_by_id_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        default_css: Annotated[Optional[StrictBool], Field(description="Whether the default CSS should be added to the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Equipment by ID Widget

        Visualize a recipe's equipment list.

        :param id: The item's id. (required)
        :type id: int
        :param default_css: Whether the default CSS should be added to the response.
        :type default_css: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_recipe_equipment_by_id_serialize(
            id=id,
            default_css=default_css,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _visualize_recipe_equipment_by_id_serialize(
        self,
        id,
        default_css,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if default_css is not None:
            
            _query_params.append(('defaultCss', default_css))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/html'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/{id}/equipmentWidget',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def visualize_recipe_ingredients_by_id(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        default_css: Annotated[Optional[StrictBool], Field(description="Whether the default CSS should be added to the response.")] = None,
        measure: Annotated[Optional[StrictStr], Field(description="Whether the the measures should be 'us' or 'metric'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Ingredients by ID Widget

        Visualize a recipe's ingredient list.

        :param id: The item's id. (required)
        :type id: int
        :param default_css: Whether the default CSS should be added to the response.
        :type default_css: bool
        :param measure: Whether the the measures should be 'us' or 'metric'.
        :type measure: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_recipe_ingredients_by_id_serialize(
            id=id,
            default_css=default_css,
            measure=measure,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def visualize_recipe_ingredients_by_id_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        default_css: Annotated[Optional[StrictBool], Field(description="Whether the default CSS should be added to the response.")] = None,
        measure: Annotated[Optional[StrictStr], Field(description="Whether the the measures should be 'us' or 'metric'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Ingredients by ID Widget

        Visualize a recipe's ingredient list.

        :param id: The item's id. (required)
        :type id: int
        :param default_css: Whether the default CSS should be added to the response.
        :type default_css: bool
        :param measure: Whether the the measures should be 'us' or 'metric'.
        :type measure: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_recipe_ingredients_by_id_serialize(
            id=id,
            default_css=default_css,
            measure=measure,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def visualize_recipe_ingredients_by_id_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        default_css: Annotated[Optional[StrictBool], Field(description="Whether the default CSS should be added to the response.")] = None,
        measure: Annotated[Optional[StrictStr], Field(description="Whether the the measures should be 'us' or 'metric'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Ingredients by ID Widget

        Visualize a recipe's ingredient list.

        :param id: The item's id. (required)
        :type id: int
        :param default_css: Whether the default CSS should be added to the response.
        :type default_css: bool
        :param measure: Whether the the measures should be 'us' or 'metric'.
        :type measure: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_recipe_ingredients_by_id_serialize(
            id=id,
            default_css=default_css,
            measure=measure,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _visualize_recipe_ingredients_by_id_serialize(
        self,
        id,
        default_css,
        measure,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if default_css is not None:
            
            _query_params.append(('defaultCss', default_css))
            
        if measure is not None:
            
            _query_params.append(('measure', measure))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/html'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/{id}/ingredientWidget',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def visualize_recipe_nutrition(
        self,
        content_type: Annotated[Optional[StrictStr], Field(description="The content type.")] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Accept header.")] = None,
        language: Annotated[Optional[StrictStr], Field(description="The language of the input. Either 'en' or 'de'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Recipe Nutrition Widget

        Visualize a recipe's nutritional information as HTML including CSS.

        :param content_type: The content type.
        :type content_type: str
        :param accept: Accept header.
        :type accept: str
        :param language: The language of the input. Either 'en' or 'de'.
        :type language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_recipe_nutrition_serialize(
            content_type=content_type,
            accept=accept,
            language=language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def visualize_recipe_nutrition_with_http_info(
        self,
        content_type: Annotated[Optional[StrictStr], Field(description="The content type.")] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Accept header.")] = None,
        language: Annotated[Optional[StrictStr], Field(description="The language of the input. Either 'en' or 'de'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Recipe Nutrition Widget

        Visualize a recipe's nutritional information as HTML including CSS.

        :param content_type: The content type.
        :type content_type: str
        :param accept: Accept header.
        :type accept: str
        :param language: The language of the input. Either 'en' or 'de'.
        :type language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_recipe_nutrition_serialize(
            content_type=content_type,
            accept=accept,
            language=language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def visualize_recipe_nutrition_without_preload_content(
        self,
        content_type: Annotated[Optional[StrictStr], Field(description="The content type.")] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Accept header.")] = None,
        language: Annotated[Optional[StrictStr], Field(description="The language of the input. Either 'en' or 'de'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Recipe Nutrition Widget

        Visualize a recipe's nutritional information as HTML including CSS.

        :param content_type: The content type.
        :type content_type: str
        :param accept: Accept header.
        :type accept: str
        :param language: The language of the input. Either 'en' or 'de'.
        :type language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_recipe_nutrition_serialize(
            content_type=content_type,
            accept=accept,
            language=language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _visualize_recipe_nutrition_serialize(
        self,
        content_type,
        accept,
        language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if language is not None:
            
            _query_params.append(('language', language))
            
        # process the header parameters
        if content_type is not None:
            _header_params['Content-Type'] = content_type
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/html'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/recipes/visualizeNutrition',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def visualize_recipe_nutrition_by_id(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        default_css: Annotated[Optional[StrictBool], Field(description="Whether the default CSS should be added to the response.")] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Accept header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Recipe Nutrition by ID Widget

        Visualize a recipe's nutritional information as HTML including CSS.

        :param id: The item's id. (required)
        :type id: int
        :param default_css: Whether the default CSS should be added to the response.
        :type default_css: bool
        :param accept: Accept header.
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_recipe_nutrition_by_id_serialize(
            id=id,
            default_css=default_css,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def visualize_recipe_nutrition_by_id_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        default_css: Annotated[Optional[StrictBool], Field(description="Whether the default CSS should be added to the response.")] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Accept header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Recipe Nutrition by ID Widget

        Visualize a recipe's nutritional information as HTML including CSS.

        :param id: The item's id. (required)
        :type id: int
        :param default_css: Whether the default CSS should be added to the response.
        :type default_css: bool
        :param accept: Accept header.
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_recipe_nutrition_by_id_serialize(
            id=id,
            default_css=default_css,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def visualize_recipe_nutrition_by_id_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        default_css: Annotated[Optional[StrictBool], Field(description="Whether the default CSS should be added to the response.")] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Accept header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Recipe Nutrition by ID Widget

        Visualize a recipe's nutritional information as HTML including CSS.

        :param id: The item's id. (required)
        :type id: int
        :param default_css: Whether the default CSS should be added to the response.
        :type default_css: bool
        :param accept: Accept header.
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_recipe_nutrition_by_id_serialize(
            id=id,
            default_css=default_css,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _visualize_recipe_nutrition_by_id_serialize(
        self,
        id,
        default_css,
        accept,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if default_css is not None:
            
            _query_params.append(('defaultCss', default_css))
            
        # process the header parameters
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/html'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/{id}/nutritionWidget',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def visualize_recipe_price_breakdown_by_id(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        default_css: Annotated[Optional[StrictBool], Field(description="Whether the default CSS should be added to the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Price Breakdown by ID Widget

        Visualize a recipe's price breakdown.

        :param id: The item's id. (required)
        :type id: int
        :param default_css: Whether the default CSS should be added to the response.
        :type default_css: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_recipe_price_breakdown_by_id_serialize(
            id=id,
            default_css=default_css,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def visualize_recipe_price_breakdown_by_id_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        default_css: Annotated[Optional[StrictBool], Field(description="Whether the default CSS should be added to the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Price Breakdown by ID Widget

        Visualize a recipe's price breakdown.

        :param id: The item's id. (required)
        :type id: int
        :param default_css: Whether the default CSS should be added to the response.
        :type default_css: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_recipe_price_breakdown_by_id_serialize(
            id=id,
            default_css=default_css,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def visualize_recipe_price_breakdown_by_id_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        default_css: Annotated[Optional[StrictBool], Field(description="Whether the default CSS should be added to the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Price Breakdown by ID Widget

        Visualize a recipe's price breakdown.

        :param id: The item's id. (required)
        :type id: int
        :param default_css: Whether the default CSS should be added to the response.
        :type default_css: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_recipe_price_breakdown_by_id_serialize(
            id=id,
            default_css=default_css,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _visualize_recipe_price_breakdown_by_id_serialize(
        self,
        id,
        default_css,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if default_css is not None:
            
            _query_params.append(('defaultCss', default_css))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/html'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/{id}/priceBreakdownWidget',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def visualize_recipe_taste(
        self,
        language: Annotated[Optional[StrictStr], Field(description="The language of the input. Either 'en' or 'de'.")] = None,
        content_type: Annotated[Optional[StrictStr], Field(description="The content type.")] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Accept header.")] = None,
        normalize: Annotated[Optional[StrictBool], Field(description="Whether to normalize to the strongest taste.")] = None,
        rgb: Annotated[Optional[StrictStr], Field(description="Red, green, blue values for the chart color.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Recipe Taste Widget

        Visualize a recipe's taste information as HTML including CSS. You can play around with that endpoint!

        :param language: The language of the input. Either 'en' or 'de'.
        :type language: str
        :param content_type: The content type.
        :type content_type: str
        :param accept: Accept header.
        :type accept: str
        :param normalize: Whether to normalize to the strongest taste.
        :type normalize: bool
        :param rgb: Red, green, blue values for the chart color.
        :type rgb: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_recipe_taste_serialize(
            language=language,
            content_type=content_type,
            accept=accept,
            normalize=normalize,
            rgb=rgb,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def visualize_recipe_taste_with_http_info(
        self,
        language: Annotated[Optional[StrictStr], Field(description="The language of the input. Either 'en' or 'de'.")] = None,
        content_type: Annotated[Optional[StrictStr], Field(description="The content type.")] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Accept header.")] = None,
        normalize: Annotated[Optional[StrictBool], Field(description="Whether to normalize to the strongest taste.")] = None,
        rgb: Annotated[Optional[StrictStr], Field(description="Red, green, blue values for the chart color.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Recipe Taste Widget

        Visualize a recipe's taste information as HTML including CSS. You can play around with that endpoint!

        :param language: The language of the input. Either 'en' or 'de'.
        :type language: str
        :param content_type: The content type.
        :type content_type: str
        :param accept: Accept header.
        :type accept: str
        :param normalize: Whether to normalize to the strongest taste.
        :type normalize: bool
        :param rgb: Red, green, blue values for the chart color.
        :type rgb: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_recipe_taste_serialize(
            language=language,
            content_type=content_type,
            accept=accept,
            normalize=normalize,
            rgb=rgb,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def visualize_recipe_taste_without_preload_content(
        self,
        language: Annotated[Optional[StrictStr], Field(description="The language of the input. Either 'en' or 'de'.")] = None,
        content_type: Annotated[Optional[StrictStr], Field(description="The content type.")] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Accept header.")] = None,
        normalize: Annotated[Optional[StrictBool], Field(description="Whether to normalize to the strongest taste.")] = None,
        rgb: Annotated[Optional[StrictStr], Field(description="Red, green, blue values for the chart color.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Recipe Taste Widget

        Visualize a recipe's taste information as HTML including CSS. You can play around with that endpoint!

        :param language: The language of the input. Either 'en' or 'de'.
        :type language: str
        :param content_type: The content type.
        :type content_type: str
        :param accept: Accept header.
        :type accept: str
        :param normalize: Whether to normalize to the strongest taste.
        :type normalize: bool
        :param rgb: Red, green, blue values for the chart color.
        :type rgb: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_recipe_taste_serialize(
            language=language,
            content_type=content_type,
            accept=accept,
            normalize=normalize,
            rgb=rgb,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _visualize_recipe_taste_serialize(
        self,
        language,
        content_type,
        accept,
        normalize,
        rgb,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if language is not None:
            
            _query_params.append(('language', language))
            
        if normalize is not None:
            
            _query_params.append(('normalize', normalize))
            
        if rgb is not None:
            
            _query_params.append(('rgb', rgb))
            
        # process the header parameters
        if content_type is not None:
            _header_params['Content-Type'] = content_type
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/html'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/recipes/visualizeTaste',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def visualize_recipe_taste_by_id(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        normalize: Annotated[Optional[StrictBool], Field(description="Whether to normalize to the strongest taste.")] = None,
        rgb: Annotated[Optional[StrictStr], Field(description="Red, green, blue values for the chart color.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Recipe Taste by ID Widget

        Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.

        :param id: The item's id. (required)
        :type id: int
        :param normalize: Whether to normalize to the strongest taste.
        :type normalize: bool
        :param rgb: Red, green, blue values for the chart color.
        :type rgb: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_recipe_taste_by_id_serialize(
            id=id,
            normalize=normalize,
            rgb=rgb,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def visualize_recipe_taste_by_id_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        normalize: Annotated[Optional[StrictBool], Field(description="Whether to normalize to the strongest taste.")] = None,
        rgb: Annotated[Optional[StrictStr], Field(description="Red, green, blue values for the chart color.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Recipe Taste by ID Widget

        Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.

        :param id: The item's id. (required)
        :type id: int
        :param normalize: Whether to normalize to the strongest taste.
        :type normalize: bool
        :param rgb: Red, green, blue values for the chart color.
        :type rgb: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_recipe_taste_by_id_serialize(
            id=id,
            normalize=normalize,
            rgb=rgb,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def visualize_recipe_taste_by_id_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="The item's id.")],
        normalize: Annotated[Optional[StrictBool], Field(description="Whether to normalize to the strongest taste.")] = None,
        rgb: Annotated[Optional[StrictStr], Field(description="Red, green, blue values for the chart color.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Recipe Taste by ID Widget

        Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.

        :param id: The item's id. (required)
        :type id: int
        :param normalize: Whether to normalize to the strongest taste.
        :type normalize: bool
        :param rgb: Red, green, blue values for the chart color.
        :type rgb: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_recipe_taste_by_id_serialize(
            id=id,
            normalize=normalize,
            rgb=rgb,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _visualize_recipe_taste_by_id_serialize(
        self,
        id,
        normalize,
        rgb,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if normalize is not None:
            
            _query_params.append(('normalize', normalize))
            
        if rgb is not None:
            
            _query_params.append(('rgb', rgb))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/html'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recipes/{id}/tasteWidget',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    Nordigen Account Information Services API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0 (v2)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class EndUserAgreementRequest(BaseModel):
    """
    Represents an end-user agreement.
    """ # noqa: E501
    access_scope: Optional[List[List[Any]]] = Field(default=None, description="Array containing one or several values of ['balances', 'details', 'transactions']")
    access_valid_for_days: Optional[Annotated[int, Field(le=90, strict=True, ge=1)]] = Field(default=90, description="Number of days from acceptance that the access can be used.")
    institution_id: Annotated[str, Field(min_length=1, strict=True)] = Field(description="an Institution ID for this EUA")
    max_historical_days: Optional[Annotated[int, Field(le=730, strict=True, ge=1)]] = Field(default=90, description="Maximum number of days of transaction data to retrieve.")
    __properties: ClassVar[List[str]] = ["access_scope", "access_valid_for_days", "institution_id", "max_historical_days"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EndUserAgreementRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EndUserAgreementRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access_scope": obj.get("access_scope"),
            "access_valid_for_days": obj.get("access_valid_for_days") if obj.get("access_valid_for_days") is not None else 90,
            "institution_id": obj.get("institution_id"),
            "max_historical_days": obj.get("max_historical_days") if obj.get("max_historical_days") is not None else 90
        })
        return _obj



# coding: utf-8

"""
    Nordigen Account Information Services API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0 (v2)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class RequisitionRequest(BaseModel):
    """
    RequisitionSerializer.
    """ # noqa: E501
    account_selection: Optional[StrictBool] = Field(default=False, description="option to enable account selection view for the end user")
    agreement: Optional[StrictStr] = Field(default=None, description="EUA associated with this requisition")
    institution_id: Annotated[str, Field(min_length=1, strict=True)] = Field(description="an Institution ID for this Requisition")
    redirect: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=1024)]] = Field(description="redirect URL to your application after end-user authorization with ASPSP")
    redirect_immediate: Optional[StrictBool] = Field(default=False, description="enable redirect back to the client after account list received")
    reference: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=256)]] = Field(default=None, description="additional ID to identify the end user")
    ssn: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="optional SSN field to verify ownership of the account")
    user_language: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=5)]] = Field(default=None, description="A two-letter country code (ISO 639-1)")
    __properties: ClassVar[List[str]] = ["account_selection", "agreement", "institution_id", "redirect", "redirect_immediate", "reference", "ssn", "user_language"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RequisitionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if redirect (nullable) is None
        # and model_fields_set contains the field
        if self.redirect is None and "redirect" in self.model_fields_set:
            _dict['redirect'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RequisitionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_selection": obj.get("account_selection") if obj.get("account_selection") is not None else False,
            "agreement": obj.get("agreement"),
            "institution_id": obj.get("institution_id"),
            "redirect": obj.get("redirect"),
            "redirect_immediate": obj.get("redirect_immediate") if obj.get("redirect_immediate") is not None else False,
            "reference": obj.get("reference"),
            "ssn": obj.get("ssn"),
            "user_language": obj.get("user_language")
        })
        return _obj



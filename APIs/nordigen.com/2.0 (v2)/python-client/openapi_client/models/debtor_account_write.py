# coding: utf-8

"""
    Nordigen Account Information Services API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0 (v2)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.type_enum import TypeEnum
from typing import Optional, Set
from typing_extensions import Self

class DebtorAccountWrite(BaseModel):
    """
    Debtor account write serializer.
    """ # noqa: E501
    account: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="Debtor account type identifier")
    address_country: Optional[Annotated[str, Field(strict=True, max_length=2)]] = Field(default=None, description="Debtor account address country")
    address_street: Optional[Annotated[str, Field(strict=True, max_length=140)]] = Field(default=None, description="Debtor account address street")
    currency: Optional[Annotated[str, Field(strict=True, max_length=3)]] = Field(default=None, description="Debtor account currency")
    name: Annotated[str, Field(strict=True, max_length=70)] = Field(description="Debtor account name")
    post_code: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(default=None, description="Debtor account post code")
    type: Optional[TypeEnum] = Field(default=None, description="Debtor account type  * `IBAN` - IBAN * `SCAN` - SortCodeAccountNumber")
    type_number: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="Debtor account type identifier")
    __properties: ClassVar[List[str]] = ["account", "address_country", "address_street", "currency", "name", "post_code", "type", "type_number"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DebtorAccountWrite from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DebtorAccountWrite from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account": obj.get("account"),
            "address_country": obj.get("address_country"),
            "address_street": obj.get("address_street"),
            "currency": obj.get("currency"),
            "name": obj.get("name"),
            "post_code": obj.get("post_code"),
            "type": obj.get("type"),
            "type_number": obj.get("type_number")
        })
        return _obj



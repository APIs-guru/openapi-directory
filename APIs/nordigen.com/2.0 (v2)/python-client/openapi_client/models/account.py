# coding: utf-8

"""
    Nordigen Account Information Services API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0 (v2)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.account_status_enum import AccountStatusEnum
from typing import Optional, Set
from typing_extensions import Self

class Account(BaseModel):
    """
    The representation of a bank account.
    """ # noqa: E501
    created: Optional[datetime] = Field(default=None, description="The date & time at which the account object was created.")
    iban: Optional[StrictStr] = Field(default=None, description="The Account IBAN")
    id: Optional[StrictStr] = Field(default=None, description="The ID of this Account, used to refer to this account in other API calls.")
    institution_id: Optional[StrictStr] = Field(default=None, description="The ASPSP associated with this account.")
    last_accessed: Optional[datetime] = Field(default=None, description="The date & time at which the account object was last accessed.")
    owner_name: Optional[StrictStr] = Field(default=None, description="The name of the account owner.")
    status: Optional[AccountStatusEnum] = Field(default=None, description="The processing status of this account.")
    __properties: ClassVar[List[str]] = ["created", "iban", "id", "institution_id", "last_accessed", "owner_name", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Account from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "iban",
            "id",
            "institution_id",
            "last_accessed",
            "owner_name",
            "status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if last_accessed (nullable) is None
        # and model_fields_set contains the field
        if self.last_accessed is None and "last_accessed" in self.model_fields_set:
            _dict['last_accessed'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Account from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created": obj.get("created"),
            "iban": obj.get("iban"),
            "id": obj.get("id"),
            "institution_id": obj.get("institution_id"),
            "last_accessed": obj.get("last_accessed"),
            "owner_name": obj.get("owner_name"),
            "status": obj.get("status")
        })
        return _obj



# coding: utf-8

"""
    APIs.guru

    Wikipedia for Web APIs. Repository of API definitions in OpenAPI format. **Warning**: If you want to be notified about changes in advance please join our [Slack channel](https://join.slack.com/t/mermade/shared_invite/zt-g78g7xir-MLE_CTCcXCdfJfG3CJe9qA). Client sample: [[Demo]](https://apis.guru/simple-ui) [[Repo]](https://github.com/APIs-guru/simple-ui) 

    The version of the OpenAPI document: 2.2.0
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ApiVersion(BaseModel):
    """
    ApiVersion
    """ # noqa: E501
    added: datetime = Field(description="Timestamp when the version was added")
    external_docs: Optional[Dict[str, Any]] = Field(default=None, description="Copy of `externalDocs` section from OpenAPI definition", alias="externalDocs")
    info: Dict[str, Any] = Field(description="Copy of `info` section from OpenAPI definition")
    link: Optional[StrictStr] = Field(default=None, description="Link to the individual API entry for this API")
    openapi_ver: StrictStr = Field(description="The value of the `openapi` or `swagger` property of the source definition", alias="openapiVer")
    swagger_url: StrictStr = Field(description="URL to OpenAPI definition in JSON format", alias="swaggerUrl")
    swagger_yaml_url: StrictStr = Field(description="URL to OpenAPI definition in YAML format", alias="swaggerYamlUrl")
    updated: datetime = Field(description="Timestamp when the version was updated")
    __properties: ClassVar[List[str]] = ["added", "externalDocs", "info", "link", "openapiVer", "swaggerUrl", "swaggerYamlUrl", "updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "added": obj.get("added"),
            "externalDocs": obj.get("externalDocs"),
            "info": obj.get("info"),
            "link": obj.get("link"),
            "openapiVer": obj.get("openapiVer"),
            "swaggerUrl": obj.get("swaggerUrl"),
            "swaggerYamlUrl": obj.get("swaggerYamlUrl"),
            "updated": obj.get("updated")
        })
        return _obj



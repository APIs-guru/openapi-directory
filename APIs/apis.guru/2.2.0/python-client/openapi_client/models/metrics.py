# coding: utf-8

"""
    APIs.guru

    Wikipedia for Web APIs. Repository of API definitions in OpenAPI format. **Warning**: If you want to be notified about changes in advance please join our [Slack channel](https://join.slack.com/t/mermade/shared_invite/zt-g78g7xir-MLE_CTCcXCdfJfG3CJe9qA). Client sample: [[Demo]](https://apis.guru/simple-ui) [[Repo]](https://github.com/APIs-guru/simple-ui) 

    The version of the OpenAPI document: 2.2.0
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.metrics_this_week import MetricsThisWeek
from typing import Optional, Set
from typing_extensions import Self

class Metrics(BaseModel):
    """
    List of basic metrics
    """ # noqa: E501
    datasets: Optional[List[Any]] = Field(default=None, description="Data used for charting etc")
    fixed_pct: Optional[StrictInt] = Field(default=None, description="Percentage of all APIs where auto fixes have been applied", alias="fixedPct")
    fixes: Optional[StrictInt] = Field(default=None, description="Total number of fixes applied across all APIs")
    invalid: Optional[StrictInt] = Field(default=None, description="Number of newly invalid APIs")
    issues: Optional[StrictInt] = Field(default=None, description="Open GitHub issues on our main repo")
    num_apis: Annotated[int, Field(strict=True, ge=1)] = Field(description="Number of unique APIs", alias="numAPIs")
    num_drivers: Optional[StrictInt] = Field(default=None, description="Number of methods of API retrieval", alias="numDrivers")
    num_endpoints: Annotated[int, Field(strict=True, ge=1)] = Field(description="Total number of endpoints inside all definitions", alias="numEndpoints")
    num_providers: Optional[StrictInt] = Field(default=None, description="Number of API providers in directory", alias="numProviders")
    num_specs: Annotated[int, Field(strict=True, ge=1)] = Field(description="Number of API definitions including different versions of the same API", alias="numSpecs")
    stars: Optional[StrictInt] = Field(default=None, description="GitHub stars for our main repo")
    this_week: Optional[MetricsThisWeek] = Field(default=None, alias="thisWeek")
    unofficial: Optional[StrictInt] = Field(default=None, description="Number of unofficial APIs")
    unreachable: Optional[StrictInt] = Field(default=None, description="Number of unreachable (4XX,5XX status) APIs")
    __properties: ClassVar[List[str]] = ["datasets", "fixedPct", "fixes", "invalid", "issues", "numAPIs", "numDrivers", "numEndpoints", "numProviders", "numSpecs", "stars", "thisWeek", "unofficial", "unreachable"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Metrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of this_week
        if self.this_week:
            _dict['thisWeek'] = self.this_week.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Metrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "datasets": obj.get("datasets"),
            "fixedPct": obj.get("fixedPct"),
            "fixes": obj.get("fixes"),
            "invalid": obj.get("invalid"),
            "issues": obj.get("issues"),
            "numAPIs": obj.get("numAPIs"),
            "numDrivers": obj.get("numDrivers"),
            "numEndpoints": obj.get("numEndpoints"),
            "numProviders": obj.get("numProviders"),
            "numSpecs": obj.get("numSpecs"),
            "stars": obj.get("stars"),
            "thisWeek": MetricsThisWeek.from_dict(obj["thisWeek"]) if obj.get("thisWeek") is not None else None,
            "unofficial": obj.get("unofficial"),
            "unreachable": obj.get("unreachable")
        })
        return _obj



# coding: utf-8

"""
    SelectPdf HTML To PDF API

    SelectPdf HTML To PDF Online REST API is a professional solution that lets you create PDF from web pages and raw HTML code in your applications. The API is easy to use and the integration takes only a few lines of code.

    The version of the OpenAPI document: 1.0.0
    Contact: support@selectpdf.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ConversionParameters(BaseModel):
    """
    ConversionParameters
    """ # noqa: E501
    base_url: Optional[StrictStr] = Field(default=None, description="An optional base url parameter can be used together with html to resolve relative paths from the html string")
    html: Optional[StrictStr] = Field(default=None, description="The raw html string that will be converted to PDF")
    key: StrictStr = Field(description="The license key required to use the API")
    margin_bottom: Optional[StrictInt] = Field(default=None, description="Bottom margin of the generated PDF document in points (1 point = 1/72 inch)")
    margin_left: Optional[StrictInt] = Field(default=None, description="Left margin of the generated PDF document in points (1 point = 1/72 inch)")
    margin_right: Optional[StrictInt] = Field(default=None, description="Right margin of the generated PDF document in points (1 point = 1/72 inch)")
    margin_top: Optional[StrictInt] = Field(default=None, description="Top margin of the generated PDF document in points (1 point = 1/72 inch)")
    page_orientation: Optional[StrictStr] = Field(default='Portrait', description="Specifies the page orientation of the generated pdf document")
    page_size: Optional[StrictStr] = Field(default='A4', description="Specifies the page size of the generated pdf document")
    url: Optional[StrictStr] = Field(default=None, description="The url that will be converted to PDF")
    __properties: ClassVar[List[str]] = ["base_url", "html", "key", "margin_bottom", "margin_left", "margin_right", "margin_top", "page_orientation", "page_size", "url"]

    @field_validator('page_orientation')
    def page_orientation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Portrait', 'Landscape']):
            raise ValueError("must be one of enum values ('Portrait', 'Landscape')")
        return value

    @field_validator('page_size')
    def page_size_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['A1', 'A2', 'A3', 'A4', 'A5', 'Letter', 'HalfLetter', 'Ledger', 'Legal']):
            raise ValueError("must be one of enum values ('A1', 'A2', 'A3', 'A4', 'A5', 'Letter', 'HalfLetter', 'Ledger', 'Legal')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConversionParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConversionParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "base_url": obj.get("base_url"),
            "html": obj.get("html"),
            "key": obj.get("key"),
            "margin_bottom": obj.get("margin_bottom"),
            "margin_left": obj.get("margin_left"),
            "margin_right": obj.get("margin_right"),
            "margin_top": obj.get("margin_top"),
            "page_orientation": obj.get("page_orientation") if obj.get("page_orientation") is not None else 'Portrait',
            "page_size": obj.get("page_size") if obj.get("page_size") is not None else 'A4',
            "url": obj.get("url")
        })
        return _obj



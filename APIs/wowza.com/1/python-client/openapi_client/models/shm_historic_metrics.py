# coding: utf-8

"""
    Wowza Streaming Cloud REST API Reference Documentation

     # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.audio_codec_metric import AudioCodecMetric
from openapi_client.models.bits_in_rate_metric import BitsInRateMetric
from openapi_client.models.bits_out_rate_metric import BitsOutRateMetric
from openapi_client.models.cpu_idle_metric import CpuIdleMetric
from openapi_client.models.frame_rate_metric import FrameRateMetric
from openapi_client.models.height_metric import HeightMetric
from openapi_client.models.keyframe_interval_metric import KeyframeIntervalMetric
from openapi_client.models.video_codec_metric import VideoCodecMetric
from openapi_client.models.width_metric import WidthMetric
from typing import Optional, Set
from typing_extensions import Self

class ShmHistoricMetrics(BaseModel):
    """
    ShmHistoricMetrics
    """ # noqa: E501
    audio_codec: Optional[AudioCodecMetric] = None
    bits_in_rate: Optional[BitsInRateMetric] = None
    bits_out_rate: Optional[BitsOutRateMetric] = None
    cpu_idle: Optional[CpuIdleMetric] = None
    created_at: Optional[StrictStr] = Field(default=None, description="The date and time that the stream health record was created.")
    frame_rate: Optional[FrameRateMetric] = None
    height: Optional[HeightMetric] = None
    keyframe_interval: Optional[KeyframeIntervalMetric] = None
    video_codec: Optional[VideoCodecMetric] = None
    width: Optional[WidthMetric] = None
    __properties: ClassVar[List[str]] = ["audio_codec", "bits_in_rate", "bits_out_rate", "cpu_idle", "created_at", "frame_rate", "height", "keyframe_interval", "video_codec", "width"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShmHistoricMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of audio_codec
        if self.audio_codec:
            _dict['audio_codec'] = self.audio_codec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bits_in_rate
        if self.bits_in_rate:
            _dict['bits_in_rate'] = self.bits_in_rate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bits_out_rate
        if self.bits_out_rate:
            _dict['bits_out_rate'] = self.bits_out_rate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cpu_idle
        if self.cpu_idle:
            _dict['cpu_idle'] = self.cpu_idle.to_dict()
        # override the default output from pydantic by calling `to_dict()` of frame_rate
        if self.frame_rate:
            _dict['frame_rate'] = self.frame_rate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of height
        if self.height:
            _dict['height'] = self.height.to_dict()
        # override the default output from pydantic by calling `to_dict()` of keyframe_interval
        if self.keyframe_interval:
            _dict['keyframe_interval'] = self.keyframe_interval.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_codec
        if self.video_codec:
            _dict['video_codec'] = self.video_codec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of width
        if self.width:
            _dict['width'] = self.width.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShmHistoricMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audio_codec": AudioCodecMetric.from_dict(obj["audio_codec"]) if obj.get("audio_codec") is not None else None,
            "bits_in_rate": BitsInRateMetric.from_dict(obj["bits_in_rate"]) if obj.get("bits_in_rate") is not None else None,
            "bits_out_rate": BitsOutRateMetric.from_dict(obj["bits_out_rate"]) if obj.get("bits_out_rate") is not None else None,
            "cpu_idle": CpuIdleMetric.from_dict(obj["cpu_idle"]) if obj.get("cpu_idle") is not None else None,
            "created_at": obj.get("created_at"),
            "frame_rate": FrameRateMetric.from_dict(obj["frame_rate"]) if obj.get("frame_rate") is not None else None,
            "height": HeightMetric.from_dict(obj["height"]) if obj.get("height") is not None else None,
            "keyframe_interval": KeyframeIntervalMetric.from_dict(obj["keyframe_interval"]) if obj.get("keyframe_interval") is not None else None,
            "video_codec": VideoCodecMetric.from_dict(obj["video_codec"]) if obj.get("video_codec") is not None else None,
            "width": WidthMetric.from_dict(obj["width"]) if obj.get("width") is not None else None
        })
        return _obj



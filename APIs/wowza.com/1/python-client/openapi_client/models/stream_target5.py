# coding: utf-8

"""
    Wowza Streaming Cloud REST API Reference Documentation

     # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class StreamTarget5(BaseModel):
    """
    StreamTarget5
    """ # noqa: E501
    backup_url: Optional[StrictStr] = Field(default=None, description="Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. The backup RTMP ingest URL of the target, without the preceding protocol and without the trailing slash (/).")
    chunk_size: Optional[StrictStr] = Field(default=None, description="<strong>The <em>chunk_size</em> parameter is deprecated. To set the chunk size of a stream target, use the POST /stream_targets/[stream_target_id]/properties endpoint.</strong> Only for targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> and <em>provider</em> is <strong>akamai_cupertino</strong>. The segment duration for HLS encoding. The default is <strong>10</strong>.")
    enable_hls: Optional[StrictBool] = Field(default=None, description="Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong>. If <strong>true</strong>, creates an Apple HLS URL for playback on iOS devices (<em>hls_playback_url</em>). The default is <strong>false</strong>.")
    enabled: Optional[StrictBool] = Field(default=None, description="Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong>. If <strong>true</strong> (the default), the source stream is ready to be ingested. If **false**, the source stream won't be ingested by the target's origin server.")
    hds_playback_url: Optional[StrictStr] = Field(default=None, description="Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong> and <em>provider</em> is <em>not</em> <strong>akamai_cupertino</strong>. The web address that the target uses to play Adobe HDS streams.")
    hls_playback_url: Optional[StrictStr] = Field(default=None, description="Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. The web address that the target uses to play Apple HLS streams.")
    ingest_ip_whitelist: Optional[List[StrictStr]] = Field(default=None, description="Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong> and <em>source_delivery_method</em> is **push**. A list of IP addresses that can be used to connect to the target's origin server.")
    location: StrictStr = Field(description="Only for targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> and <em>provider</em> is <em>not</em> <strong>akamai_cupertino</strong>. Choose a location as close as possible to your video source.")
    name: StrictStr = Field(description="A descriptive name for the stream target. Maximum 255 characters.")
    password: Optional[StrictStr] = Field(default=None, description="Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong> and <em>provider</em> is <em>not</em> **akamai_cupertino**. A <em>username</em> must also be present. The password associated with the target username for RTMP authentication.")
    primary_url: StrictStr = Field(description="Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. The primary RTMP ingest URL, without the preceding protocol and without the trailing slash (/).")
    provider: Optional[StrictStr] = Field(default=None, description="The CDN for the target. <br /><br />Required for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. Valid values for <strong>CustomStreamTarget</strong> are <strong>akamai</strong>, <strong>akamai_cupertino</strong>, <strong>akamai_rtmp</strong>, <strong>limelight</strong>, <strong>rtmp</strong>, and <strong>ustream</strong>. Values can be appended with **_mock** to use in the sandbox environment. <br /><br />Valid values for <strong>WowzaStreamTarget</strong> are <strong>akamai</strong>, <strong>akamai_cupertino</strong> (default), <strong>akamai_legacy_rtmp</strong>, and <strong>wowza</strong>. <br /><br /><strong>UltraLowLatencyStreamTarget</strong> defaults to and must be <strong>wowza</strong>.")
    region_override: Optional[StrictStr] = Field(default=None, description="Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong> and <em>source_delivery_method</em> is **pull**. The location of the stream target's origin server. If unspecified, Wowza Streaming Cloud determines the optimal region for the origin server.")
    rtmp_playback_url: Optional[StrictStr] = Field(default=None, description="Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. The web address that the target uses to play RTMP streams.")
    source_delivery_method: StrictStr = Field(description="Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong>. The type of connection between the stream source and the stream target. **push** instructs the source to push the stream to the stream target. **pull** instructs the stream target to pull the stream from the source.")
    source_url: StrictStr = Field(description="Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong> and <em>source_delivery_method</em> is **pull**. The URL of a source IP camera or encoder connecting to the stream target.")
    stream_name: StrictStr = Field(description="Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. The name of the stream as defined in the target's ingestion settings.")
    type: Optional[StrictStr] = Field(default=None, description="<strong>WowzaStreamTarget</strong> is a Wowza CDN target. <strong>UltraLowLatencyStreamTarget</strong> is an ultra low latency Wowza stream target. <strong>CustomStreamTarget</strong> (the default) is an external, third-party destination. <!--and <strong>FacebookStreamTarget</strong> (a Facebook Live target).-->")
    use_cors: Optional[StrictBool] = Field(default=None, description="Only for targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> and <em>provider</em> is <strong>akamai_cupertino</strong>. CORS, or cross-origin resource sharing, allows streams to be sent to providers such as Peer5, Viblast, and Streamroot, which implement a peer-to-peer grid delivery system.")
    use_https: Optional[StrictBool] = Field(default=None, description="<strong>The <em>use_https</em> parameter is deprecated. Use the POST /stream_targets/[<em>stream_target_id</em>]/properties endpoint and the <em>relative_playlists</em> parameter instead.</strong>")
    use_secure_ingest: Optional[StrictBool] = Field(default=None, description="Only for targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> and <em>provider</em> is <strong>akamai_cupertino</strong>. If <strong>true</strong>, generates a <em>secure_ingest_query_param</em> to securely deliver the stream from the transcoder to the provider.")
    username: Optional[StrictStr] = Field(default=None, description="Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong> and <em>provider</em> is <em>not</em> **akamai_cupertino**. The username or ID that the target uses for RTMP authentication.")
    __properties: ClassVar[List[str]] = ["backup_url", "chunk_size", "enable_hls", "enabled", "hds_playback_url", "hls_playback_url", "ingest_ip_whitelist", "location", "name", "password", "primary_url", "provider", "region_override", "rtmp_playback_url", "source_delivery_method", "source_url", "stream_name", "type", "use_cors", "use_https", "use_secure_ingest", "username"]

    @field_validator('chunk_size')
    def chunk_size_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['2', '4', '6', '8', '10']):
            raise ValueError("must be one of enum values ('2', '4', '6', '8', '10')")
        return value

    @field_validator('location')
    def location_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['asia_pacific_australia', 'asia_pacific_japan', 'asia_pacific_singapore', 'asia_pacific_taiwan', 'eu_belgium', 'eu_germany', 'eu_ireland', 'south_america_brazil', 'us_central_iowa', 'us_east_s_carolina', 'us_east_virginia', 'us_west_california', 'us_west_oregon']):
            raise ValueError("must be one of enum values ('asia_pacific_australia', 'asia_pacific_japan', 'asia_pacific_singapore', 'asia_pacific_taiwan', 'eu_belgium', 'eu_germany', 'eu_ireland', 'south_america_brazil', 'us_central_iowa', 'us_east_s_carolina', 'us_east_virginia', 'us_west_california', 'us_west_oregon')")
        return value

    @field_validator('region_override')
    def region_override_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['azure-westus', 'azure-eastus2', 'azure-northeurope']):
            raise ValueError("must be one of enum values ('azure-westus', 'azure-eastus2', 'azure-northeurope')")
        return value

    @field_validator('source_delivery_method')
    def source_delivery_method_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['push', 'pull']):
            raise ValueError("must be one of enum values ('push', 'pull')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WowzaStreamTarget', 'UltraLowLatencyStreamTarget', 'CustomStreamTarget']):
            raise ValueError("must be one of enum values ('WowzaStreamTarget', 'UltraLowLatencyStreamTarget', 'CustomStreamTarget')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StreamTarget5 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StreamTarget5 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backup_url": obj.get("backup_url"),
            "chunk_size": obj.get("chunk_size"),
            "enable_hls": obj.get("enable_hls"),
            "enabled": obj.get("enabled"),
            "hds_playback_url": obj.get("hds_playback_url"),
            "hls_playback_url": obj.get("hls_playback_url"),
            "ingest_ip_whitelist": obj.get("ingest_ip_whitelist"),
            "location": obj.get("location"),
            "name": obj.get("name"),
            "password": obj.get("password"),
            "primary_url": obj.get("primary_url"),
            "provider": obj.get("provider"),
            "region_override": obj.get("region_override"),
            "rtmp_playback_url": obj.get("rtmp_playback_url"),
            "source_delivery_method": obj.get("source_delivery_method"),
            "source_url": obj.get("source_url"),
            "stream_name": obj.get("stream_name"),
            "type": obj.get("type"),
            "use_cors": obj.get("use_cors"),
            "use_https": obj.get("use_https"),
            "use_secure_ingest": obj.get("use_secure_ingest"),
            "username": obj.get("username")
        })
        return _obj



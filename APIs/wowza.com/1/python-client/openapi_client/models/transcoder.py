# coding: utf-8

"""
    Wowza Streaming Cloud REST API Reference Documentation

     # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.output import Output
from openapi_client.models.playback_url1 import PlaybackUrl1
from typing import Optional, Set
from typing_extensions import Self

class Transcoder(BaseModel):
    """
    Transcoder
    """ # noqa: E501
    application_name: Optional[StrictStr] = Field(default=None, description="The application name from the pull stream source URL.")
    billing_mode: Optional[StrictStr] = Field(default=None, description="The billing mode for the transcoder. The default is <strong>pay_as_you_go</strong>.")
    broadcast_location: Optional[StrictStr] = Field(default=None, description="The location where Wowza Streaming Cloud transcodes your stream. Choose a location as close as possible to your video source.")
    buffer_size: Optional[StrictInt] = Field(default=None, description="The size, in milliseconds, of the incoming buffer. <strong>0</strong> means no buffer. The default is <strong>4000</strong> (4 seconds).")
    closed_caption_type: Optional[StrictStr] = Field(default=None, description="The type of closed caption data being passed from the source. The default, <strong>none</strong>, indicates that no data is being provided. <strong>cea</strong> indicates that a CEA closed captioning data stream is being provided. <strong>on_text</strong> indicates that an onTextData closed captioning data stream is being provided. <strong>both</strong> indicates that both CEA and onTextData closed captioing data streams are being provided.")
    created_at: Optional[datetime] = Field(default=None, description="The date and time that the transcoder was created.")
    delivery_method: Optional[StrictStr] = Field(default=None, description="The type of connection between the source encoder and the transcoder. The default, <strong>pull</strong>, instructs the transcoder to pull the video from the source. <strong>push</strong> instructs the source to push the stream to the transcoder. <strong>cdn</strong> uses a stream source to deliver the stream to the transcoder.")
    delivery_protocols: Optional[List[StrictStr]] = Field(default=None, description="An array of playback protocols enabled for this transcoder. By default, <strong>rtmp</strong>, <strong>rtsp</strong>, and <strong>wowz</strong> are returned.")
    description: Optional[StrictStr] = Field(default=None, description="An optional description of the transcoder.")
    direct_playback_urls: Optional[List[PlaybackUrl1]] = Field(default=None, description="An array of direct playback URLs the transcoder's delivery protocols. Each protocol has a URL for the source and a URL for each output rendition.")
    disable_authentication: Optional[StrictBool] = Field(default=None, description="Authentication is required by default for RTMP and RTSP push connections from a video source to the transcoder. Specify <strong>true</strong> to disable authentication with the video source.")
    domain_name: Optional[StrictStr] = Field(default=None, description="The domain name from the pull stream source URL.")
    id: Optional[StrictStr] = Field(default=None, description="The unique alphanumeric string that identifies the transcoder.")
    idle_timeout: Optional[StrictInt] = Field(default=None, description="The amount of idle time, in seconds, before the transcoder automatically shuts down. Valid values are the integers <strong>0</strong> (never shuts down) to <strong>172800</strong> (48 hours). The default is <strong>1200</strong> (20 minutes).")
    low_latency: Optional[StrictBool] = Field(default=None, description="If <strong>true</strong>, turns off the sort packet buffer and speeds the time it takes to decode and deliver video data to the player. The default is <strong>false</strong>.")
    name: Optional[StrictStr] = Field(default=None, description="A descriptive name for the transcoder. Maximum 200 characters.")
    outputs: Optional[List[Output]] = Field(default=None, description="Output renditions associated with the transcoder.")
    password: Optional[StrictStr] = Field(default=None, description="A password for authenticating an RTMP or RTSP push connection. Can contain only uppercase and lowercase letters; numbers; and the period (.), underscore (_), and hyphen (-) characters. No other special characters can be used.")
    play_maximum_connections: Optional[StrictInt] = Field(default=None, description="The number of users who are allowed to connect directly to the transcoder.")
    protocol: Optional[StrictStr] = Field(default=None, description="The transport protocol for the source video. The default is <strong>rtmp</strong>.")
    recording: Optional[StrictBool] = Field(default=None, description="If <strong>true</strong>, creates a recording of the transcoded output. The default is <strong>false</strong>.")
    source_port: Optional[StrictInt] = Field(default=None, description="The port used for RTMP pull connections to Wowza Streaming Cloud.")
    source_url: Optional[StrictStr] = Field(default=None, description="For the <em>delivery_method</em> <strong>pull</strong>. Enter the source's web address without the preceding protocol or the trailing slash (/).")
    stream_extension: Optional[StrictStr] = Field(default=None, description="For the <em>delivery_method</em> <strong>push</strong>. Some encoders append an extension to their stream names. If the device you're using does this, enter the extension.")
    stream_name: Optional[StrictStr] = Field(default=None, description="The stream name from the pull stream source URL.")
    stream_smoother: Optional[StrictBool] = Field(default=None, description="A dynamic buffer that helps stabilize streams in rough network conditions, but adds latency. Specify <strong>true</strong> to enable stream smoothing. The default is <strong>false</strong>.")
    stream_source_id: Optional[StrictStr] = Field(default=None, description="For the <em>delivery_method</em> <strong>cdn</strong>. The alphanumeric string that identifies the stream source that you want to use to deliver the stream to the transcoder.")
    suppress_stream_target_start: Optional[StrictBool] = Field(default=None, description="If <strong>true</strong>, disables stream targets when the transcoder starts. If <strong>false</strong> (the default), the targets start when the transcoder starts.")
    transcoder_type: Optional[StrictStr] = Field(default=None, description="The type of transcoder, either <strong>transcoded</strong> for streams that are transcoded into adaptive bitrate renditions or <strong>passthrough</strong> for streams that aren't processed by the transcoder. The default is <strong>transcoded</strong>.")
    updated_at: Optional[datetime] = Field(default=None, description="The date and time that the transcoder was updated.")
    username: Optional[StrictStr] = Field(default=None, description="A username for authenticating an RTMP or RTSP push connection. Can contain only uppercase and lowercase letters; numbers; and the period (.), underscore (_), and hyphen (-) characters. No other special characters can be used.")
    video_fallback: Optional[StrictBool] = Field(default=None, description="If <strong>true</strong>, black video plays if the video source disconnects from the transcoder. If <strong>false</strong> (the default), a stream-not-available message appears. Works only with stream targets whose <em>provider</em> is <strong>akamai_cupertino</strong>.")
    watermark: Optional[StrictBool] = Field(default=None, description="Embeds an image into the transcoded stream for copyright protection. Specify <strong>true</strong> to embed a watermark image.")
    watermark_height: Optional[StrictInt] = Field(default=None, description="The height, in pixels, of the watermark image. If blank, Wowza Streaming Cloud uses the original image height.")
    watermark_image_url: Optional[StrictStr] = Field(default=None, description="The path to a GIF, JPEG, or PNG image that is embedded in all bitrate renditions of the stream. Watermark image files must be 2.5 MB or smaller.")
    watermark_opacity: Optional[StrictInt] = Field(default=None, description="The opacity, or percentage of transparency, of the watermark. <strong>0</strong> is fully transparent; <strong>100</strong> is fully opaque.")
    watermark_position: Optional[StrictStr] = Field(default=None, description="The corner of the video frame in which you want the watermark to appear. The default is <strong>top-left</strong>.")
    watermark_width: Optional[StrictInt] = Field(default=None, description="The width, in pixels, of the watermark image. If blank, Wowza Streaming Cloud uses the original image width.")
    __properties: ClassVar[List[str]] = ["application_name", "billing_mode", "broadcast_location", "buffer_size", "closed_caption_type", "created_at", "delivery_method", "delivery_protocols", "description", "direct_playback_urls", "disable_authentication", "domain_name", "id", "idle_timeout", "low_latency", "name", "outputs", "password", "play_maximum_connections", "protocol", "recording", "source_port", "source_url", "stream_extension", "stream_name", "stream_smoother", "stream_source_id", "suppress_stream_target_start", "transcoder_type", "updated_at", "username", "video_fallback", "watermark", "watermark_height", "watermark_image_url", "watermark_opacity", "watermark_position", "watermark_width"]

    @field_validator('billing_mode')
    def billing_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['pay_as_you_go', 'twentyfour_seven']):
            raise ValueError("must be one of enum values ('pay_as_you_go', 'twentyfour_seven')")
        return value

    @field_validator('broadcast_location')
    def broadcast_location_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['asia_pacific_australia', 'asia_pacific_japan', 'asia_pacific_singapore', 'asia_pacific_taiwan', 'eu_belgium', 'eu_germany', 'eu_ireland', 'south_america_brazil', 'us_central_iowa', 'us_east_s_carolina', 'us_east_virginia', 'us_west_california', 'us_west_oregon']):
            raise ValueError("must be one of enum values ('asia_pacific_australia', 'asia_pacific_japan', 'asia_pacific_singapore', 'asia_pacific_taiwan', 'eu_belgium', 'eu_germany', 'eu_ireland', 'south_america_brazil', 'us_central_iowa', 'us_east_s_carolina', 'us_east_virginia', 'us_west_california', 'us_west_oregon')")
        return value

    @field_validator('buffer_size')
    def buffer_size_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000]):
            raise ValueError("must be one of enum values (0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000)")
        return value

    @field_validator('closed_caption_type')
    def closed_caption_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['none', 'cea', 'on_text', 'both']):
            raise ValueError("must be one of enum values ('none', 'cea', 'on_text', 'both')")
        return value

    @field_validator('delivery_method')
    def delivery_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['pull', 'cdn', 'push']):
            raise ValueError("must be one of enum values ('pull', 'cdn', 'push')")
        return value

    @field_validator('play_maximum_connections')
    def play_maximum_connections_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]):
            raise ValueError("must be one of enum values (10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100)")
        return value

    @field_validator('protocol')
    def protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['rtmp', 'rtsp']):
            raise ValueError("must be one of enum values ('rtmp', 'rtsp')")
        return value

    @field_validator('transcoder_type')
    def transcoder_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['transcoded', 'passthrough']):
            raise ValueError("must be one of enum values ('transcoded', 'passthrough')")
        return value

    @field_validator('watermark_opacity')
    def watermark_opacity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]):
            raise ValueError("must be one of enum values (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100)")
        return value

    @field_validator('watermark_position')
    def watermark_position_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['top-left', 'top-right', 'bottom-left', 'bottom-right']):
            raise ValueError("must be one of enum values ('top-left', 'top-right', 'bottom-left', 'bottom-right')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Transcoder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in direct_playback_urls (list)
        _items = []
        if self.direct_playback_urls:
            for _item_direct_playback_urls in self.direct_playback_urls:
                if _item_direct_playback_urls:
                    _items.append(_item_direct_playback_urls.to_dict())
            _dict['direct_playback_urls'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in outputs (list)
        _items = []
        if self.outputs:
            for _item_outputs in self.outputs:
                if _item_outputs:
                    _items.append(_item_outputs.to_dict())
            _dict['outputs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Transcoder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "application_name": obj.get("application_name"),
            "billing_mode": obj.get("billing_mode"),
            "broadcast_location": obj.get("broadcast_location"),
            "buffer_size": obj.get("buffer_size"),
            "closed_caption_type": obj.get("closed_caption_type"),
            "created_at": obj.get("created_at"),
            "delivery_method": obj.get("delivery_method"),
            "delivery_protocols": obj.get("delivery_protocols"),
            "description": obj.get("description"),
            "direct_playback_urls": [PlaybackUrl1.from_dict(_item) for _item in obj["direct_playback_urls"]] if obj.get("direct_playback_urls") is not None else None,
            "disable_authentication": obj.get("disable_authentication"),
            "domain_name": obj.get("domain_name"),
            "id": obj.get("id"),
            "idle_timeout": obj.get("idle_timeout"),
            "low_latency": obj.get("low_latency"),
            "name": obj.get("name"),
            "outputs": [Output.from_dict(_item) for _item in obj["outputs"]] if obj.get("outputs") is not None else None,
            "password": obj.get("password"),
            "play_maximum_connections": obj.get("play_maximum_connections"),
            "protocol": obj.get("protocol"),
            "recording": obj.get("recording"),
            "source_port": obj.get("source_port"),
            "source_url": obj.get("source_url"),
            "stream_extension": obj.get("stream_extension"),
            "stream_name": obj.get("stream_name"),
            "stream_smoother": obj.get("stream_smoother"),
            "stream_source_id": obj.get("stream_source_id"),
            "suppress_stream_target_start": obj.get("suppress_stream_target_start"),
            "transcoder_type": obj.get("transcoder_type"),
            "updated_at": obj.get("updated_at"),
            "username": obj.get("username"),
            "video_fallback": obj.get("video_fallback"),
            "watermark": obj.get("watermark"),
            "watermark_height": obj.get("watermark_height"),
            "watermark_image_url": obj.get("watermark_image_url"),
            "watermark_opacity": obj.get("watermark_opacity"),
            "watermark_position": obj.get("watermark_position"),
            "watermark_width": obj.get("watermark_width")
        })
        return _obj



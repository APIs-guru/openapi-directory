# coding: utf-8

"""
    Wowza Streaming Cloud REST API Reference Documentation

     # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.transcoders_api import TranscodersApi


class TestTranscodersApi(unittest.TestCase):
    """TranscodersApi unit test stubs"""

    def setUp(self) -> None:
        self.api = TranscodersApi()

    def tearDown(self) -> None:
        pass

    def test_add_stream_target_to_transcoder_output(self) -> None:
        """Test case for add_stream_target_to_transcoder_output

        Deprecated operation
        """
        pass

    def test_create_transcoder(self) -> None:
        """Test case for create_transcoder

        Create a transcoder
        """
        pass

    def test_create_transcoder_output(self) -> None:
        """Test case for create_transcoder_output

        Create an output
        """
        pass

    def test_create_transcoder_output_output_stream_target(self) -> None:
        """Test case for create_transcoder_output_output_stream_target

        Create an output stream target
        """
        pass

    def test_create_transcoder_property(self) -> None:
        """Test case for create_transcoder_property

        Create a property for a transcoder
        """
        pass

    def test_delete_transcoder(self) -> None:
        """Test case for delete_transcoder

        Delete a transcoder
        """
        pass

    def test_delete_transcoder_output(self) -> None:
        """Test case for delete_transcoder_output

        Delete an output
        """
        pass

    def test_delete_transcoder_output_output_stream_target(self) -> None:
        """Test case for delete_transcoder_output_output_stream_target

        Delete an output stream target
        """
        pass

    def test_delete_transcoder_property(self) -> None:
        """Test case for delete_transcoder_property

        Delete a transcoder's property
        """
        pass

    def test_disable_all_stream_targets_transcoder(self) -> None:
        """Test case for disable_all_stream_targets_transcoder

        Disable a transcoder's stream targets
        """
        pass

    def test_disable_transcoder_output_output_stream_target(self) -> None:
        """Test case for disable_transcoder_output_output_stream_target

        Disable an output stream target
        """
        pass

    def test_enable_all_stream_targets_transcoder(self) -> None:
        """Test case for enable_all_stream_targets_transcoder

        Enable a transcoder's stream targets
        """
        pass

    def test_enable_transcoder_output_output_stream_target(self) -> None:
        """Test case for enable_transcoder_output_output_stream_target

        Enable an output stream target
        """
        pass

    def test_index_uptimes(self) -> None:
        """Test case for index_uptimes

        Fetch all uptime records for a transcoder
        """
        pass

    def test_list_transcoder_output_output_stream_targets(self) -> None:
        """Test case for list_transcoder_output_output_stream_targets

        Fetch all output stream targets of an output of a transcoder
        """
        pass

    def test_list_transcoder_outputs(self) -> None:
        """Test case for list_transcoder_outputs

        Fetch all outputs of a transcoder
        """
        pass

    def test_list_transcoder_properties(self) -> None:
        """Test case for list_transcoder_properties

        Fetch a transcoder's properties
        """
        pass

    def test_list_transcoder_recordings(self) -> None:
        """Test case for list_transcoder_recordings

        Fetch a transcoder's recordings
        """
        pass

    def test_list_transcoder_schedules(self) -> None:
        """Test case for list_transcoder_schedules

        Fetch transcoder's schedules
        """
        pass

    def test_list_transcoders(self) -> None:
        """Test case for list_transcoders

        Fetch all transcoders
        """
        pass

    def test_remove_stream_target_to_transcoder_output(self) -> None:
        """Test case for remove_stream_target_to_transcoder_output

        Deprecated operation
        """
        pass

    def test_reset_transcoder(self) -> None:
        """Test case for reset_transcoder

        Reset a transcoder
        """
        pass

    def test_restart_transcoder_output_output_stream_target(self) -> None:
        """Test case for restart_transcoder_output_output_stream_target

        Restart an output stream target
        """
        pass

    def test_show_transcoder(self) -> None:
        """Test case for show_transcoder

        Fetch a transcoder
        """
        pass

    def test_show_transcoder_output(self) -> None:
        """Test case for show_transcoder_output

        Fetch an output
        """
        pass

    def test_show_transcoder_output_output_stream_target(self) -> None:
        """Test case for show_transcoder_output_output_stream_target

        Fetch an output stream target
        """
        pass

    def test_show_transcoder_property(self) -> None:
        """Test case for show_transcoder_property

        Fetch a property for a transcoder
        """
        pass

    def test_show_transcoder_state(self) -> None:
        """Test case for show_transcoder_state

        Fetch the state and uptime ID of a transcoder
        """
        pass

    def test_show_transcoder_stats(self) -> None:
        """Test case for show_transcoder_stats

        Fetch statistics for a current transcoder
        """
        pass

    def test_show_transcoder_thumbnail_url(self) -> None:
        """Test case for show_transcoder_thumbnail_url

        Fetch the thumbnail URL of a transcoder
        """
        pass

    def test_show_uptime(self) -> None:
        """Test case for show_uptime

        Fetch an uptime record
        """
        pass

    def test_show_uptime_metrics_current(self) -> None:
        """Test case for show_uptime_metrics_current

        Fetch current stream health metrics for an active transcoder
        """
        pass

    def test_show_uptime_metrics_historic(self) -> None:
        """Test case for show_uptime_metrics_historic

        Fetch historic stream health metrics for a transcoder
        """
        pass

    def test_start_transcoder(self) -> None:
        """Test case for start_transcoder

        Start a transcoder
        """
        pass

    def test_stop_transcoder(self) -> None:
        """Test case for stop_transcoder

        Stop a transcoder
        """
        pass

    def test_update_transcoder(self) -> None:
        """Test case for update_transcoder

        Update a transcoder
        """
        pass

    def test_update_transcoder_output(self) -> None:
        """Test case for update_transcoder_output

        Update an output
        """
        pass

    def test_update_transcoder_output_output_stream_target(self) -> None:
        """Test case for update_transcoder_output_output_stream_target

        Update an output stream target
        """
        pass


if __name__ == '__main__':
    unittest.main()

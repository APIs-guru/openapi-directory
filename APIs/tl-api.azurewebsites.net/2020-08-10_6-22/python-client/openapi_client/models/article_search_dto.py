# coding: utf-8

"""
    API

    Web API for TL mobile and web app

    The version of the OpenAPI document: 2020-08-10_6-22
    Contact: support@unicorn-solutions.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ArticleSearchDTO(BaseModel):
    """
    The ArticleSearchDTO Class. Contains relevant fields of ArticleSearch DTO by masking actual Article entity's fields in application.             
    """ # noqa: E501
    active_status: Optional[StrictBool] = Field(default=None, description="Active Status ", alias="activeStatus")
    apply_for_all_gyms: Optional[StrictBool] = Field(default=None, alias="applyForAllGyms")
    article_id: Optional[StrictInt] = Field(default=None, alias="articleId")
    created_date: Optional[datetime] = Field(default=None, alias="createdDate")
    created_user: Optional[StrictStr] = Field(default=None, alias="createdUser")
    description: Optional[StrictStr] = None
    measure_unit: Optional[StrictStr] = Field(default=None, description="MeasureUnit ", alias="measureUnit")
    modified_date: Optional[datetime] = Field(default=None, alias="modifiedDate")
    modified_user: Optional[StrictStr] = Field(default=None, alias="modifiedUser")
    name: Optional[StrictStr] = None
    number: Optional[StrictInt] = None
    price: Optional[Union[StrictFloat, StrictInt]] = None
    selling_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Actual Selling price of the article ", alias="sellingPrice")
    tags: Optional[StrictStr] = None
    total_count: Optional[StrictInt] = Field(default=None, description="total number of recode for particular search ", alias="totalCount")
    type: Optional[StrictStr] = Field(default=None, description="article type")
    __properties: ClassVar[List[str]] = ["activeStatus", "applyForAllGyms", "articleId", "createdDate", "createdUser", "description", "measureUnit", "modifiedDate", "modifiedUser", "name", "number", "price", "sellingPrice", "tags", "totalCount", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArticleSearchDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if created_user (nullable) is None
        # and model_fields_set contains the field
        if self.created_user is None and "created_user" in self.model_fields_set:
            _dict['createdUser'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if measure_unit (nullable) is None
        # and model_fields_set contains the field
        if self.measure_unit is None and "measure_unit" in self.model_fields_set:
            _dict['measureUnit'] = None

        # set to None if modified_user (nullable) is None
        # and model_fields_set contains the field
        if self.modified_user is None and "modified_user" in self.model_fields_set:
            _dict['modifiedUser'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArticleSearchDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeStatus": obj.get("activeStatus"),
            "applyForAllGyms": obj.get("applyForAllGyms"),
            "articleId": obj.get("articleId"),
            "createdDate": obj.get("createdDate"),
            "createdUser": obj.get("createdUser"),
            "description": obj.get("description"),
            "measureUnit": obj.get("measureUnit"),
            "modifiedDate": obj.get("modifiedDate"),
            "modifiedUser": obj.get("modifiedUser"),
            "name": obj.get("name"),
            "number": obj.get("number"),
            "price": obj.get("price"),
            "sellingPrice": obj.get("sellingPrice"),
            "tags": obj.get("tags"),
            "totalCount": obj.get("totalCount"),
            "type": obj.get("type")
        })
        return _obj



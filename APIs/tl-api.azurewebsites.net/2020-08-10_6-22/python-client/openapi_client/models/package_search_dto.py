# coding: utf-8

"""
    API

    Web API for TL mobile and web app

    The version of the OpenAPI document: 2020-08-10_6-22
    Contact: support@unicorn-solutions.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PackageSearchDTO(BaseModel):
    """
    The PackageSearchDTO Class. Contains relevant fields of PackageSearch DTO by masking actual Package entity's fields in application.                
    """ # noqa: E501
    active_status: Optional[StrictBool] = Field(default=None, description="Active Status ", alias="activeStatus")
    addon_fee: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="sum of addon fees. incoming values for this filed will ignore.             ", alias="addonFee")
    apply_for_all_gyms: Optional[StrictBool] = Field(default=None, description="Boolean value to indicate wheather package is available in all the gyms.             ", alias="applyForAllGyms")
    binding_period: Optional[StrictInt] = Field(default=None, description="Range of period a member is bound to the contract if he/she choose this package.             ", alias="bindingPeriod")
    created_date: Optional[datetime] = Field(default=None, description="Package created DateTime.             ", alias="createdDate")
    created_user: Optional[StrictStr] = Field(default=None, description="Package created user.             ", alias="createdUser")
    description: Optional[StrictStr] = Field(default=None, description="Common descriptions about package.If there are more instructions can be stored as comma separated values.             ")
    features: Optional[StrictStr] = Field(default=None, description="What are the facilities, features available for package.ex:- wifi, ACm etc.Can be stored as comma seperated values.             ")
    free_months: Optional[StrictInt] = Field(default=None, description="No of months gym member can come without payments.             ", alias="freeMonths")
    member_can_remove_add_ons: Optional[StrictBool] = Field(default=None, description="Boolean value to indicate member can remove already added addons if he choose this package.             ", alias="memberCanRemoveAddOns")
    modified_date: Optional[datetime] = Field(default=None, description="Package last modified DateTime.             ", alias="modifiedDate")
    modified_user: Optional[StrictStr] = Field(default=None, description="Package last modified user.             ", alias="modifiedUser")
    monthly_fee: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Monthly installment fee if package is not fixed visit. addition of the servicefee and addon fees divided by binding period.             ", alias="monthlyFee")
    number_of_visits: Optional[StrictInt] = Field(default=None, description="No of visits for fixed package ", alias="numberOfVisits")
    package_id: Optional[StrictInt] = Field(default=None, alias="packageId")
    package_name: Optional[StrictStr] = Field(default=None, alias="packageName")
    package_number: Optional[StrictInt] = Field(default=None, alias="packageNumber")
    package_type: Optional[StrictStr] = Field(default=None, description="Package type can be either fixed visit or unlimited.             ", alias="packageType")
    registration_fee: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Registartion fee for the package at a gym.             ", alias="registrationFee")
    service_fee: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="total Service charge of the package for entire period.             ", alias="serviceFee")
    tags: Optional[StrictStr] = Field(default=None, description="Comma separated string values in case of need of maintain some labels kind of stuff relevant to the package.             ")
    total_count: Optional[StrictInt] = Field(default=None, description="total number of recode for particular search ", alias="totalCount")
    total_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="total price for the package including Addon fees, service fee and registration fee. incoming values for this field will ignore.             ", alias="totalPrice")
    __properties: ClassVar[List[str]] = ["activeStatus", "addonFee", "applyForAllGyms", "bindingPeriod", "createdDate", "createdUser", "description", "features", "freeMonths", "memberCanRemoveAddOns", "modifiedDate", "modifiedUser", "monthlyFee", "numberOfVisits", "packageId", "packageName", "packageNumber", "packageType", "registrationFee", "serviceFee", "tags", "totalCount", "totalPrice"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PackageSearchDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if created_user (nullable) is None
        # and model_fields_set contains the field
        if self.created_user is None and "created_user" in self.model_fields_set:
            _dict['createdUser'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if features (nullable) is None
        # and model_fields_set contains the field
        if self.features is None and "features" in self.model_fields_set:
            _dict['features'] = None

        # set to None if modified_user (nullable) is None
        # and model_fields_set contains the field
        if self.modified_user is None and "modified_user" in self.model_fields_set:
            _dict['modifiedUser'] = None

        # set to None if package_name (nullable) is None
        # and model_fields_set contains the field
        if self.package_name is None and "package_name" in self.model_fields_set:
            _dict['packageName'] = None

        # set to None if package_type (nullable) is None
        # and model_fields_set contains the field
        if self.package_type is None and "package_type" in self.model_fields_set:
            _dict['packageType'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PackageSearchDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeStatus": obj.get("activeStatus"),
            "addonFee": obj.get("addonFee"),
            "applyForAllGyms": obj.get("applyForAllGyms"),
            "bindingPeriod": obj.get("bindingPeriod"),
            "createdDate": obj.get("createdDate"),
            "createdUser": obj.get("createdUser"),
            "description": obj.get("description"),
            "features": obj.get("features"),
            "freeMonths": obj.get("freeMonths"),
            "memberCanRemoveAddOns": obj.get("memberCanRemoveAddOns"),
            "modifiedDate": obj.get("modifiedDate"),
            "modifiedUser": obj.get("modifiedUser"),
            "monthlyFee": obj.get("monthlyFee"),
            "numberOfVisits": obj.get("numberOfVisits"),
            "packageId": obj.get("packageId"),
            "packageName": obj.get("packageName"),
            "packageNumber": obj.get("packageNumber"),
            "packageType": obj.get("packageType"),
            "registrationFee": obj.get("registrationFee"),
            "serviceFee": obj.get("serviceFee"),
            "tags": obj.get("tags"),
            "totalCount": obj.get("totalCount"),
            "totalPrice": obj.get("totalPrice")
        })
        return _obj



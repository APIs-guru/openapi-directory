# coding: utf-8

"""
    API

    Web API for TL mobile and web app

    The version of the OpenAPI document: 2020-08-10_6-22
    Contact: support@unicorn-solutions.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.exception_inner_exception import ExceptionInnerException
from openapi_client.models.validation_error import ValidationError
from typing import Optional, Set
from typing_extensions import Self

class ApiException(BaseModel):
    """
    ApiException
    """ # noqa: E501
    inner_exception: Optional[ExceptionInnerException] = Field(default=None, alias="InnerException")
    message: Optional[StrictStr] = Field(default=None, alias="Message")
    source: Optional[StrictStr] = Field(default=None, alias="Source")
    stack_trace: Optional[StrictStr] = Field(default=None, alias="StackTrace")
    custom_error: Optional[Any] = Field(default=None, alias="customError")
    errors: Optional[List[ValidationError]] = None
    is_custom_error_object: Optional[StrictBool] = Field(default=None, alias="isCustomErrorObject")
    is_model_validaton_error: Optional[StrictBool] = Field(default=None, alias="isModelValidatonError")
    reference_document_link: Optional[StrictStr] = Field(default=None, alias="referenceDocumentLink")
    reference_error_code: Optional[StrictStr] = Field(default=None, alias="referenceErrorCode")
    status_code: Optional[StrictInt] = Field(default=None, alias="statusCode")
    __properties: ClassVar[List[str]] = ["InnerException", "Message", "Source", "StackTrace", "customError", "errors", "isCustomErrorObject", "isModelValidatonError", "referenceDocumentLink", "referenceErrorCode", "statusCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiException from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of inner_exception
        if self.inner_exception:
            _dict['InnerException'] = self.inner_exception.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # set to None if inner_exception (nullable) is None
        # and model_fields_set contains the field
        if self.inner_exception is None and "inner_exception" in self.model_fields_set:
            _dict['InnerException'] = None

        # set to None if source (nullable) is None
        # and model_fields_set contains the field
        if self.source is None and "source" in self.model_fields_set:
            _dict['Source'] = None

        # set to None if stack_trace (nullable) is None
        # and model_fields_set contains the field
        if self.stack_trace is None and "stack_trace" in self.model_fields_set:
            _dict['StackTrace'] = None

        # set to None if custom_error (nullable) is None
        # and model_fields_set contains the field
        if self.custom_error is None and "custom_error" in self.model_fields_set:
            _dict['customError'] = None

        # set to None if errors (nullable) is None
        # and model_fields_set contains the field
        if self.errors is None and "errors" in self.model_fields_set:
            _dict['errors'] = None

        # set to None if reference_document_link (nullable) is None
        # and model_fields_set contains the field
        if self.reference_document_link is None and "reference_document_link" in self.model_fields_set:
            _dict['referenceDocumentLink'] = None

        # set to None if reference_error_code (nullable) is None
        # and model_fields_set contains the field
        if self.reference_error_code is None and "reference_error_code" in self.model_fields_set:
            _dict['referenceErrorCode'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiException from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "InnerException": ExceptionInnerException.from_dict(obj["InnerException"]) if obj.get("InnerException") is not None else None,
            "Message": obj.get("Message"),
            "Source": obj.get("Source"),
            "StackTrace": obj.get("StackTrace"),
            "customError": obj.get("customError"),
            "errors": [ValidationError.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "isCustomErrorObject": obj.get("isCustomErrorObject"),
            "isModelValidatonError": obj.get("isModelValidatonError"),
            "referenceDocumentLink": obj.get("referenceDocumentLink"),
            "referenceErrorCode": obj.get("referenceErrorCode"),
            "statusCode": obj.get("statusCode")
        })
        return _obj



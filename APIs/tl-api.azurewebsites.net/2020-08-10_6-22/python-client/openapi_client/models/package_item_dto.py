# coding: utf-8

"""
    API

    Web API for TL mobile and web app

    The version of the OpenAPI document: 2020-08-10_6-22
    Contact: support@unicorn-solutions.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PackageItemDTO(BaseModel):
    """
    The PackageItemDTO Class. Contains relevant fields of PackageItem DTO by masking actual Package entity's fields in application.             
    """ # noqa: E501
    article_id: StrictInt = Field(description="Refer to ArticleId in Article table in DB.             ", alias="articleId")
    article_name: Optional[StrictStr] = Field(default=None, description="Name of the article(Addon) in a particular package.              read only             ", alias="articleName")
    article_number: Optional[StrictInt] = Field(default=None, description="Number assigned the article(Addon) in a particular package.              read only             ", alias="articleNumber")
    article_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Price of the article determined from that package. Price of a same article can be varied from package to package.             ", alias="articlePrice")
    end_order: Optional[StrictInt] = Field(default=None, description="Number of the installment this article is available to.             ", alias="endOrder")
    is_include_service_in_charge: Optional[StrictBool] = Field(default=None, description="Is Included in service charge ", alias="isIncludeServiceInCharge")
    measure_unit: Optional[StrictStr] = Field(default=None, alias="measureUnit")
    number_of_items: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="How many article(Addon) is available for that package from that type.             ", alias="numberOfItems")
    start_order: Optional[StrictInt] = Field(default=None, description="Number of the installment this article is available from.             ", alias="startOrder")
    __properties: ClassVar[List[str]] = ["articleId", "articleName", "articleNumber", "articlePrice", "endOrder", "isIncludeServiceInCharge", "measureUnit", "numberOfItems", "startOrder"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PackageItemDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if article_name (nullable) is None
        # and model_fields_set contains the field
        if self.article_name is None and "article_name" in self.model_fields_set:
            _dict['articleName'] = None

        # set to None if measure_unit (nullable) is None
        # and model_fields_set contains the field
        if self.measure_unit is None and "measure_unit" in self.model_fields_set:
            _dict['measureUnit'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PackageItemDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "articleId": obj.get("articleId"),
            "articleName": obj.get("articleName"),
            "articleNumber": obj.get("articleNumber"),
            "articlePrice": obj.get("articlePrice"),
            "endOrder": obj.get("endOrder"),
            "isIncludeServiceInCharge": obj.get("isIncludeServiceInCharge"),
            "measureUnit": obj.get("measureUnit"),
            "numberOfItems": obj.get("numberOfItems"),
            "startOrder": obj.get("startOrder")
        })
        return _obj



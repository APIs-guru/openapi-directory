# coding: utf-8

"""
    API

    Web API for TL mobile and web app

    The version of the OpenAPI document: 2020-08-10_6-22
    Contact: support@unicorn-solutions.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GymArticleDetailsDTO(BaseModel):
    """
    The GymArticleDetailsDTO Class. Contains fields of GymArticleDetails DTO in application.             
    """ # noqa: E501
    article_id: Optional[StrictInt] = Field(default=None, alias="articleId")
    available_qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="availableQty")
    created_user: Optional[StrictStr] = Field(default=None, description="Created User ", alias="createdUser")
    employee_discount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="employeeDiscount")
    employee_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="employeePrice")
    gym_id: Optional[StrictInt] = Field(default=None, description="Gym Id where article is related ", alias="gymId")
    gym_id_list: Optional[StrictStr] = Field(default=None, description="GymId - Gym Id string with comma separated GymIds ", alias="gymIdList")
    gym_name: Optional[StrictStr] = Field(default=None, description="Gym Name", alias="gymName")
    id: Optional[StrictInt] = None
    is_default: Optional[StrictBool] = Field(default=None, description="Set as the default values for the article ", alias="isDefault")
    is_inventory_item: Optional[StrictBool] = Field(default=None, alias="isInventoryItem")
    is_obsolete: Optional[StrictBool] = Field(default=None, alias="isObsolete")
    modified_user: Optional[StrictStr] = Field(default=None, description="Modified user", alias="modifiedUser")
    reorder_level: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="reorderLevel")
    revenue_account_id: Optional[StrictInt] = Field(default=None, description="Revenue account Id", alias="revenueAccountId")
    selling_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="sellingPrice")
    __properties: ClassVar[List[str]] = ["articleId", "availableQty", "createdUser", "employeeDiscount", "employeePrice", "gymId", "gymIdList", "gymName", "id", "isDefault", "isInventoryItem", "isObsolete", "modifiedUser", "reorderLevel", "revenueAccountId", "sellingPrice"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GymArticleDetailsDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if created_user (nullable) is None
        # and model_fields_set contains the field
        if self.created_user is None and "created_user" in self.model_fields_set:
            _dict['createdUser'] = None

        # set to None if gym_id_list (nullable) is None
        # and model_fields_set contains the field
        if self.gym_id_list is None and "gym_id_list" in self.model_fields_set:
            _dict['gymIdList'] = None

        # set to None if gym_name (nullable) is None
        # and model_fields_set contains the field
        if self.gym_name is None and "gym_name" in self.model_fields_set:
            _dict['gymName'] = None

        # set to None if modified_user (nullable) is None
        # and model_fields_set contains the field
        if self.modified_user is None and "modified_user" in self.model_fields_set:
            _dict['modifiedUser'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GymArticleDetailsDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "articleId": obj.get("articleId"),
            "availableQty": obj.get("availableQty"),
            "createdUser": obj.get("createdUser"),
            "employeeDiscount": obj.get("employeeDiscount"),
            "employeePrice": obj.get("employeePrice"),
            "gymId": obj.get("gymId"),
            "gymIdList": obj.get("gymIdList"),
            "gymName": obj.get("gymName"),
            "id": obj.get("id"),
            "isDefault": obj.get("isDefault"),
            "isInventoryItem": obj.get("isInventoryItem"),
            "isObsolete": obj.get("isObsolete"),
            "modifiedUser": obj.get("modifiedUser"),
            "reorderLevel": obj.get("reorderLevel"),
            "revenueAccountId": obj.get("revenueAccountId"),
            "sellingPrice": obj.get("sellingPrice")
        })
        return _obj



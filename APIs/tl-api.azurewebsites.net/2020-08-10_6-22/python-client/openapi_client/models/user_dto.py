# coding: utf-8

"""
    API

    Web API for TL mobile and web app

    The version of the OpenAPI document: 2020-08-10_6-22
    Contact: support@unicorn-solutions.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UserDTO(BaseModel):
    """
    The UserDTO Class. Contains relevant fields of User DTO by masking actual User entity's fields in application.             
    """ # noqa: E501
    account_number: Optional[StrictStr] = Field(default=None, description="Account number of the user.It can be any stakeholder of the application.even can be a gym.             ", alias="accountNumber")
    external_entity_number: Optional[StrictStr] = Field(default=None, description="Entity number that make a relationship with BOX API DB.             ", alias="externalEntityNumber")
    guardian: Optional[StrictInt] = Field(default=None, description="Gaurdian of the this user if he/she is under 18 years old.             ")
    gym_number: Optional[StrictStr] = Field(default=None, description="If this user is a gym, then the gym number.             ", alias="gymNumber")
    introduce_by: Optional[StrictInt] = Field(default=None, description="If Someone introduced this user to the system, then that user's UserId.             ", alias="introduceBy")
    name: Optional[StrictStr] = Field(default=None, description="Name of the user.             ")
    number: Optional[StrictStr] = Field(default=None, description="Unique number maintain by application to idenify user.             ")
    type_id: Optional[StrictInt] = Field(default=None, description="Type of the user.             ", alias="typeId")
    user_id: Optional[StrictInt] = Field(default=None, description="Indentity number(primary key) for user object. Generated in DB table when inserting a record.             ", alias="userId")
    __properties: ClassVar[List[str]] = ["accountNumber", "externalEntityNumber", "guardian", "gymNumber", "introduceBy", "name", "number", "typeId", "userId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if account_number (nullable) is None
        # and model_fields_set contains the field
        if self.account_number is None and "account_number" in self.model_fields_set:
            _dict['accountNumber'] = None

        # set to None if external_entity_number (nullable) is None
        # and model_fields_set contains the field
        if self.external_entity_number is None and "external_entity_number" in self.model_fields_set:
            _dict['externalEntityNumber'] = None

        # set to None if gym_number (nullable) is None
        # and model_fields_set contains the field
        if self.gym_number is None and "gym_number" in self.model_fields_set:
            _dict['gymNumber'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if number (nullable) is None
        # and model_fields_set contains the field
        if self.number is None and "number" in self.model_fields_set:
            _dict['number'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountNumber": obj.get("accountNumber"),
            "externalEntityNumber": obj.get("externalEntityNumber"),
            "guardian": obj.get("guardian"),
            "gymNumber": obj.get("gymNumber"),
            "introduceBy": obj.get("introduceBy"),
            "name": obj.get("name"),
            "number": obj.get("number"),
            "typeId": obj.get("typeId"),
            "userId": obj.get("userId")
        })
        return _obj



# coding: utf-8

"""
    API

    Web API for TL mobile and web app

    The version of the OpenAPI document: 2020-08-10_6-22
    Contact: support@unicorn-solutions.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.gym_dto import GymDTO
from openapi_client.models.package_item_dto import PackageItemDTO
from typing import Optional, Set
from typing_extensions import Self

class PackageDTO(BaseModel):
    """
    The PackageDTO Class. Contains relevant fields of Package DTO by masking actual Package entity's fields in application.             
    """ # noqa: E501
    add_ons: Optional[List[PackageItemDTO]] = Field(default=None, description="Extra articles list added to the given package.             ", alias="addOns")
    addon_fee: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="sum of addon fees. incoming values for this filed will ignore.             ", alias="addonFee")
    apply_for_all_gyms: Optional[StrictBool] = Field(default=None, description="Boolean value to indicate wheather package is available in all the gyms.             ", alias="applyForAllGyms")
    available_gyms: Optional[List[GymDTO]] = Field(default=None, description="Gyms list where this package is available.             ", alias="availableGyms")
    binding_period: Optional[StrictInt] = Field(default=None, description="Range of period a member is bound to the contract if he/she choose this package.             ", alias="bindingPeriod")
    created_date: Optional[datetime] = Field(default=None, description="Package created DateTime.             ", alias="createdDate")
    created_user: Optional[StrictStr] = Field(default=None, description="Package created user.             ", alias="createdUser")
    description: Optional[StrictStr] = Field(default=None, description="Common descriptions about package.If there are more instructions               can be stored as comma separated values.             ")
    end_date: Optional[datetime] = Field(default=None, description="End date of the package.After that package is not valid for use.             ", alias="endDate")
    expire_in_months: Optional[StrictInt] = Field(default=None, description="No of months the fixed package is valid for sale             ", alias="expireInMonths")
    features: Optional[StrictStr] = Field(default=None, description="What are the facilities, features available for package.ex:- wifi, ACm etc.Can be stored as comma seperated values.             ")
    free_months: Optional[StrictInt] = Field(default=None, description="No of months gym member can come without payments.             ", alias="freeMonths")
    instructions_to_gym_users: Optional[StrictStr] = Field(default=None, description="Instruction to the gym members relevant to the package.              If there are more instructions can be stored as comma seperated values.             ", alias="instructionsToGymUsers")
    instructions_to_web_users: Optional[StrictStr] = Field(default=None, description="Instruction to the MRM members relevant to the package.              If there are more instructions can be stored as comma seperated values.             ", alias="instructionsToWebUsers")
    is_active: Optional[StrictBool] = Field(default=None, description="Boolean value to indicate this package is still active or not.             ", alias="isActive")
    is_atg: Optional[StrictBool] = Field(default=None, description="Boolean value to indicate ATG transaction from bank is applicable or not.             ", alias="isAtg")
    is_auto_renew: Optional[StrictBool] = Field(default=None, description="Boolean value to indicate the contract will auto renew after expiration               if this package would be chosen.             ", alias="isAutoRenew")
    is_first_month_free: Optional[StrictBool] = Field(default=None, description="Boolean value to indicate if the first month charges is free.             ", alias="isFirstMonthFree")
    is_registration_fee: Optional[StrictBool] = Field(default=None, description="Boolean value to indicate this package has registration fee or not.             ", alias="isRegistrationFee")
    is_rest_amount: Optional[StrictBool] = Field(default=None, description="Boolean value to indicate rest amount is applicable or not.             ", alias="isRestAmount")
    is_shown_in_mobile: Optional[StrictBool] = Field(default=None, description="Boolean value to indicate package is visible in Mobile App or not.             ", alias="isShownInMobile")
    is_sponsor_package: Optional[StrictBool] = Field(default=None, description="Boolean value to indicate package can be sponsored or not by other party.             ", alias="isSponsorPackage")
    maximum_give_away_rest_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="If a member join the gym middle of a month via this package,               what is the maximum amount of price can be neglected from payment from the member.             ", alias="maximumGiveAwayRestAmount")
    member_can_add_add_ons: Optional[StrictBool] = Field(default=None, description="Boolean value to indicate member can add extra addons he wish if he choose this package.             ", alias="memberCanAddAddOns")
    member_can_leave_within_free_period: Optional[StrictBool] = Field(default=None, description="Boolean value to indicate if member can leave from contract within               free period if he/she choose this package.             ", alias="memberCanLeaveWithinFreePeriod")
    member_can_remove_add_ons: Optional[StrictBool] = Field(default=None, description="Boolean value to indicate member can remove already added addons if he choose this package.             ", alias="memberCanRemoveAddOns")
    modified_date: Optional[datetime] = Field(default=None, description="Package last modified DateTime.             ", alias="modifiedDate")
    modified_user: Optional[StrictStr] = Field(default=None, description="Package last modified user.             ", alias="modifiedUser")
    monthly_fee: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Monthly installment fee if package is not fixed visit. addition of the servicefee and addon fees divided by binding period.              read only             ", alias="monthlyFee")
    next_package_number: Optional[StrictInt] = Field(default=None, description="Next Package the contract continue after the binding period of this package.             ", alias="nextPackageNumber")
    number_of_installments: Optional[StrictInt] = Field(default=None, description="Maximum Number of installment a member can divide the package price/cost to pay.             ", alias="numberOfInstallments")
    number_of_visits: Optional[StrictInt] = Field(default=None, description="If package is fixed visit type, then how many visits are available for this package.             ", alias="numberOfVisits")
    package_id: Optional[StrictInt] = Field(default=None, alias="packageId")
    package_name: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="packageName")
    package_number: Optional[StrictStr] = Field(default=None, alias="packageNumber")
    package_type: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Package type can be either fixed visit or unlimited.             ", alias="packageType")
    per_visit_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Cost/Price of the single visit to gym.             ", alias="perVisitPrice")
    registration_fee: Union[StrictFloat, StrictInt] = Field(description="Registartion fee for the package at a gym.              read only             ", alias="registrationFee")
    service_fee: Union[StrictFloat, StrictInt] = Field(description="total Service charge of the package for entire period.             ", alias="serviceFee")
    shown_in_web: Optional[StrictBool] = Field(default=None, description="Boolean value to show this package in MRM system or not.             ", alias="shownInWeb")
    start_date: Optional[datetime] = Field(default=None, description="Start date of the package.             ", alias="startDate")
    tags: Optional[StrictStr] = Field(default=None, description="Comma separated string values in case of need of maintain some labels kind of               stuff relevant to the package.             ")
    total_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="total price for the package including Addon fees, service fee and registration fee. incoming values for this field will ignore.             ", alias="totalPrice")
    __properties: ClassVar[List[str]] = ["addOns", "addonFee", "applyForAllGyms", "availableGyms", "bindingPeriod", "createdDate", "createdUser", "description", "endDate", "expireInMonths", "features", "freeMonths", "instructionsToGymUsers", "instructionsToWebUsers", "isActive", "isAtg", "isAutoRenew", "isFirstMonthFree", "isRegistrationFee", "isRestAmount", "isShownInMobile", "isSponsorPackage", "maximumGiveAwayRestAmount", "memberCanAddAddOns", "memberCanLeaveWithinFreePeriod", "memberCanRemoveAddOns", "modifiedDate", "modifiedUser", "monthlyFee", "nextPackageNumber", "numberOfInstallments", "numberOfVisits", "packageId", "packageName", "packageNumber", "packageType", "perVisitPrice", "registrationFee", "serviceFee", "shownInWeb", "startDate", "tags", "totalPrice"]

    @field_validator('package_type')
    def package_type_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"fixedvisit|unlimited", value):
            raise ValueError(r"must validate the regular expression /fixedvisit|unlimited/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PackageDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in add_ons (list)
        _items = []
        if self.add_ons:
            for _item_add_ons in self.add_ons:
                if _item_add_ons:
                    _items.append(_item_add_ons.to_dict())
            _dict['addOns'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in available_gyms (list)
        _items = []
        if self.available_gyms:
            for _item_available_gyms in self.available_gyms:
                if _item_available_gyms:
                    _items.append(_item_available_gyms.to_dict())
            _dict['availableGyms'] = _items
        # set to None if add_ons (nullable) is None
        # and model_fields_set contains the field
        if self.add_ons is None and "add_ons" in self.model_fields_set:
            _dict['addOns'] = None

        # set to None if available_gyms (nullable) is None
        # and model_fields_set contains the field
        if self.available_gyms is None and "available_gyms" in self.model_fields_set:
            _dict['availableGyms'] = None

        # set to None if created_user (nullable) is None
        # and model_fields_set contains the field
        if self.created_user is None and "created_user" in self.model_fields_set:
            _dict['createdUser'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if features (nullable) is None
        # and model_fields_set contains the field
        if self.features is None and "features" in self.model_fields_set:
            _dict['features'] = None

        # set to None if instructions_to_gym_users (nullable) is None
        # and model_fields_set contains the field
        if self.instructions_to_gym_users is None and "instructions_to_gym_users" in self.model_fields_set:
            _dict['instructionsToGymUsers'] = None

        # set to None if instructions_to_web_users (nullable) is None
        # and model_fields_set contains the field
        if self.instructions_to_web_users is None and "instructions_to_web_users" in self.model_fields_set:
            _dict['instructionsToWebUsers'] = None

        # set to None if modified_user (nullable) is None
        # and model_fields_set contains the field
        if self.modified_user is None and "modified_user" in self.model_fields_set:
            _dict['modifiedUser'] = None

        # set to None if package_number (nullable) is None
        # and model_fields_set contains the field
        if self.package_number is None and "package_number" in self.model_fields_set:
            _dict['packageNumber'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PackageDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addOns": [PackageItemDTO.from_dict(_item) for _item in obj["addOns"]] if obj.get("addOns") is not None else None,
            "addonFee": obj.get("addonFee"),
            "applyForAllGyms": obj.get("applyForAllGyms"),
            "availableGyms": [GymDTO.from_dict(_item) for _item in obj["availableGyms"]] if obj.get("availableGyms") is not None else None,
            "bindingPeriod": obj.get("bindingPeriod"),
            "createdDate": obj.get("createdDate"),
            "createdUser": obj.get("createdUser"),
            "description": obj.get("description"),
            "endDate": obj.get("endDate"),
            "expireInMonths": obj.get("expireInMonths"),
            "features": obj.get("features"),
            "freeMonths": obj.get("freeMonths"),
            "instructionsToGymUsers": obj.get("instructionsToGymUsers"),
            "instructionsToWebUsers": obj.get("instructionsToWebUsers"),
            "isActive": obj.get("isActive"),
            "isAtg": obj.get("isAtg"),
            "isAutoRenew": obj.get("isAutoRenew"),
            "isFirstMonthFree": obj.get("isFirstMonthFree"),
            "isRegistrationFee": obj.get("isRegistrationFee"),
            "isRestAmount": obj.get("isRestAmount"),
            "isShownInMobile": obj.get("isShownInMobile"),
            "isSponsorPackage": obj.get("isSponsorPackage"),
            "maximumGiveAwayRestAmount": obj.get("maximumGiveAwayRestAmount"),
            "memberCanAddAddOns": obj.get("memberCanAddAddOns"),
            "memberCanLeaveWithinFreePeriod": obj.get("memberCanLeaveWithinFreePeriod"),
            "memberCanRemoveAddOns": obj.get("memberCanRemoveAddOns"),
            "modifiedDate": obj.get("modifiedDate"),
            "modifiedUser": obj.get("modifiedUser"),
            "monthlyFee": obj.get("monthlyFee"),
            "nextPackageNumber": obj.get("nextPackageNumber"),
            "numberOfInstallments": obj.get("numberOfInstallments"),
            "numberOfVisits": obj.get("numberOfVisits"),
            "packageId": obj.get("packageId"),
            "packageName": obj.get("packageName"),
            "packageNumber": obj.get("packageNumber"),
            "packageType": obj.get("packageType"),
            "perVisitPrice": obj.get("perVisitPrice"),
            "registrationFee": obj.get("registrationFee"),
            "serviceFee": obj.get("serviceFee"),
            "shownInWeb": obj.get("shownInWeb"),
            "startDate": obj.get("startDate"),
            "tags": obj.get("tags"),
            "totalPrice": obj.get("totalPrice")
        })
        return _obj



# coding: utf-8

"""
    API

    Web API for TL mobile and web app

    The version of the OpenAPI document: 2020-08-10_6-22
    Contact: support@unicorn-solutions.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.user_dto import UserDTO

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class UserApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def user_get(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UserDTO:
        """Get all Users detail This will return all properties related to User entity             


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._user_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UserDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def user_get_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UserDTO]:
        """Get all Users detail This will return all properties related to User entity             


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._user_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UserDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def user_get_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all Users detail This will return all properties related to User entity             


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._user_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UserDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _user_get_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/User',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def user_register_user(
        self,
        user_id: Annotated[Optional[StrictInt], Field(description="Indentity number(primary key) for user object. Generated in DB table when inserting a record.             ")] = None,
        account_number: Annotated[Optional[StrictStr], Field(description="Account number of the user.It can be any stakeholder of the application.even can be a gym.             ")] = None,
        gym_number: Annotated[Optional[StrictStr], Field(description="If this user is a gym, then the gym number.             ")] = None,
        external_entity_number: Annotated[Optional[StrictStr], Field(description="Entity number that make a relationship with BOX API DB.             ")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Name of the user.             ")] = None,
        number: Annotated[Optional[StrictStr], Field(description="Unique number maintain by application to idenify user.             ")] = None,
        introduce_by: Annotated[Optional[StrictInt], Field(description="If Someone introduced this user to the system, then that user's UserId.             ")] = None,
        guardian: Annotated[Optional[StrictInt], Field(description="Gaurdian of the this user if he/she is under 18 years old.             ")] = None,
        type_id: Annotated[Optional[StrictInt], Field(description="Type of the user.             ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Register a new User             


        :param user_id: Indentity number(primary key) for user object. Generated in DB table when inserting a record.             
        :type user_id: int
        :param account_number: Account number of the user.It can be any stakeholder of the application.even can be a gym.             
        :type account_number: str
        :param gym_number: If this user is a gym, then the gym number.             
        :type gym_number: str
        :param external_entity_number: Entity number that make a relationship with BOX API DB.             
        :type external_entity_number: str
        :param name: Name of the user.             
        :type name: str
        :param number: Unique number maintain by application to idenify user.             
        :type number: str
        :param introduce_by: If Someone introduced this user to the system, then that user's UserId.             
        :type introduce_by: int
        :param guardian: Gaurdian of the this user if he/she is under 18 years old.             
        :type guardian: int
        :param type_id: Type of the user.             
        :type type_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._user_register_user_serialize(
            user_id=user_id,
            account_number=account_number,
            gym_number=gym_number,
            external_entity_number=external_entity_number,
            name=name,
            number=number,
            introduce_by=introduce_by,
            guardian=guardian,
            type_id=type_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def user_register_user_with_http_info(
        self,
        user_id: Annotated[Optional[StrictInt], Field(description="Indentity number(primary key) for user object. Generated in DB table when inserting a record.             ")] = None,
        account_number: Annotated[Optional[StrictStr], Field(description="Account number of the user.It can be any stakeholder of the application.even can be a gym.             ")] = None,
        gym_number: Annotated[Optional[StrictStr], Field(description="If this user is a gym, then the gym number.             ")] = None,
        external_entity_number: Annotated[Optional[StrictStr], Field(description="Entity number that make a relationship with BOX API DB.             ")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Name of the user.             ")] = None,
        number: Annotated[Optional[StrictStr], Field(description="Unique number maintain by application to idenify user.             ")] = None,
        introduce_by: Annotated[Optional[StrictInt], Field(description="If Someone introduced this user to the system, then that user's UserId.             ")] = None,
        guardian: Annotated[Optional[StrictInt], Field(description="Gaurdian of the this user if he/she is under 18 years old.             ")] = None,
        type_id: Annotated[Optional[StrictInt], Field(description="Type of the user.             ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Register a new User             


        :param user_id: Indentity number(primary key) for user object. Generated in DB table when inserting a record.             
        :type user_id: int
        :param account_number: Account number of the user.It can be any stakeholder of the application.even can be a gym.             
        :type account_number: str
        :param gym_number: If this user is a gym, then the gym number.             
        :type gym_number: str
        :param external_entity_number: Entity number that make a relationship with BOX API DB.             
        :type external_entity_number: str
        :param name: Name of the user.             
        :type name: str
        :param number: Unique number maintain by application to idenify user.             
        :type number: str
        :param introduce_by: If Someone introduced this user to the system, then that user's UserId.             
        :type introduce_by: int
        :param guardian: Gaurdian of the this user if he/she is under 18 years old.             
        :type guardian: int
        :param type_id: Type of the user.             
        :type type_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._user_register_user_serialize(
            user_id=user_id,
            account_number=account_number,
            gym_number=gym_number,
            external_entity_number=external_entity_number,
            name=name,
            number=number,
            introduce_by=introduce_by,
            guardian=guardian,
            type_id=type_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def user_register_user_without_preload_content(
        self,
        user_id: Annotated[Optional[StrictInt], Field(description="Indentity number(primary key) for user object. Generated in DB table when inserting a record.             ")] = None,
        account_number: Annotated[Optional[StrictStr], Field(description="Account number of the user.It can be any stakeholder of the application.even can be a gym.             ")] = None,
        gym_number: Annotated[Optional[StrictStr], Field(description="If this user is a gym, then the gym number.             ")] = None,
        external_entity_number: Annotated[Optional[StrictStr], Field(description="Entity number that make a relationship with BOX API DB.             ")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Name of the user.             ")] = None,
        number: Annotated[Optional[StrictStr], Field(description="Unique number maintain by application to idenify user.             ")] = None,
        introduce_by: Annotated[Optional[StrictInt], Field(description="If Someone introduced this user to the system, then that user's UserId.             ")] = None,
        guardian: Annotated[Optional[StrictInt], Field(description="Gaurdian of the this user if he/she is under 18 years old.             ")] = None,
        type_id: Annotated[Optional[StrictInt], Field(description="Type of the user.             ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Register a new User             


        :param user_id: Indentity number(primary key) for user object. Generated in DB table when inserting a record.             
        :type user_id: int
        :param account_number: Account number of the user.It can be any stakeholder of the application.even can be a gym.             
        :type account_number: str
        :param gym_number: If this user is a gym, then the gym number.             
        :type gym_number: str
        :param external_entity_number: Entity number that make a relationship with BOX API DB.             
        :type external_entity_number: str
        :param name: Name of the user.             
        :type name: str
        :param number: Unique number maintain by application to idenify user.             
        :type number: str
        :param introduce_by: If Someone introduced this user to the system, then that user's UserId.             
        :type introduce_by: int
        :param guardian: Gaurdian of the this user if he/she is under 18 years old.             
        :type guardian: int
        :param type_id: Type of the user.             
        :type type_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._user_register_user_serialize(
            user_id=user_id,
            account_number=account_number,
            gym_number=gym_number,
            external_entity_number=external_entity_number,
            name=name,
            number=number,
            introduce_by=introduce_by,
            guardian=guardian,
            type_id=type_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _user_register_user_serialize(
        self,
        user_id,
        account_number,
        gym_number,
        external_entity_number,
        name,
        number,
        introduce_by,
        guardian,
        type_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if user_id is not None:
            
            _query_params.append(('UserId', user_id))
            
        if account_number is not None:
            
            _query_params.append(('AccountNumber', account_number))
            
        if gym_number is not None:
            
            _query_params.append(('GymNumber', gym_number))
            
        if external_entity_number is not None:
            
            _query_params.append(('ExternalEntityNumber', external_entity_number))
            
        if name is not None:
            
            _query_params.append(('Name', name))
            
        if number is not None:
            
            _query_params.append(('Number', number))
            
        if introduce_by is not None:
            
            _query_params.append(('IntroduceBy', introduce_by))
            
        if guardian is not None:
            
            _query_params.append(('Guardian', guardian))
            
        if type_id is not None:
            
            _query_params.append(('TypeId', type_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/User/registerUser',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def user_update_user(
        self,
        user_id: Annotated[Optional[StrictInt], Field(description="Indentity number(primary key) for user object. Generated in DB table when inserting a record.             ")] = None,
        account_number: Annotated[Optional[StrictStr], Field(description="Account number of the user.It can be any stakeholder of the application.even can be a gym.             ")] = None,
        gym_number: Annotated[Optional[StrictStr], Field(description="If this user is a gym, then the gym number.             ")] = None,
        external_entity_number: Annotated[Optional[StrictStr], Field(description="Entity number that make a relationship with BOX API DB.             ")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Name of the user.             ")] = None,
        number: Annotated[Optional[StrictStr], Field(description="Unique number maintain by application to idenify user.             ")] = None,
        introduce_by: Annotated[Optional[StrictInt], Field(description="If Someone introduced this user to the system, then that user's UserId.             ")] = None,
        guardian: Annotated[Optional[StrictInt], Field(description="Gaurdian of the this user if he/she is under 18 years old.             ")] = None,
        type_id: Annotated[Optional[StrictInt], Field(description="Type of the user.             ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update an exsisting User             


        :param user_id: Indentity number(primary key) for user object. Generated in DB table when inserting a record.             
        :type user_id: int
        :param account_number: Account number of the user.It can be any stakeholder of the application.even can be a gym.             
        :type account_number: str
        :param gym_number: If this user is a gym, then the gym number.             
        :type gym_number: str
        :param external_entity_number: Entity number that make a relationship with BOX API DB.             
        :type external_entity_number: str
        :param name: Name of the user.             
        :type name: str
        :param number: Unique number maintain by application to idenify user.             
        :type number: str
        :param introduce_by: If Someone introduced this user to the system, then that user's UserId.             
        :type introduce_by: int
        :param guardian: Gaurdian of the this user if he/she is under 18 years old.             
        :type guardian: int
        :param type_id: Type of the user.             
        :type type_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._user_update_user_serialize(
            user_id=user_id,
            account_number=account_number,
            gym_number=gym_number,
            external_entity_number=external_entity_number,
            name=name,
            number=number,
            introduce_by=introduce_by,
            guardian=guardian,
            type_id=type_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def user_update_user_with_http_info(
        self,
        user_id: Annotated[Optional[StrictInt], Field(description="Indentity number(primary key) for user object. Generated in DB table when inserting a record.             ")] = None,
        account_number: Annotated[Optional[StrictStr], Field(description="Account number of the user.It can be any stakeholder of the application.even can be a gym.             ")] = None,
        gym_number: Annotated[Optional[StrictStr], Field(description="If this user is a gym, then the gym number.             ")] = None,
        external_entity_number: Annotated[Optional[StrictStr], Field(description="Entity number that make a relationship with BOX API DB.             ")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Name of the user.             ")] = None,
        number: Annotated[Optional[StrictStr], Field(description="Unique number maintain by application to idenify user.             ")] = None,
        introduce_by: Annotated[Optional[StrictInt], Field(description="If Someone introduced this user to the system, then that user's UserId.             ")] = None,
        guardian: Annotated[Optional[StrictInt], Field(description="Gaurdian of the this user if he/she is under 18 years old.             ")] = None,
        type_id: Annotated[Optional[StrictInt], Field(description="Type of the user.             ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update an exsisting User             


        :param user_id: Indentity number(primary key) for user object. Generated in DB table when inserting a record.             
        :type user_id: int
        :param account_number: Account number of the user.It can be any stakeholder of the application.even can be a gym.             
        :type account_number: str
        :param gym_number: If this user is a gym, then the gym number.             
        :type gym_number: str
        :param external_entity_number: Entity number that make a relationship with BOX API DB.             
        :type external_entity_number: str
        :param name: Name of the user.             
        :type name: str
        :param number: Unique number maintain by application to idenify user.             
        :type number: str
        :param introduce_by: If Someone introduced this user to the system, then that user's UserId.             
        :type introduce_by: int
        :param guardian: Gaurdian of the this user if he/she is under 18 years old.             
        :type guardian: int
        :param type_id: Type of the user.             
        :type type_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._user_update_user_serialize(
            user_id=user_id,
            account_number=account_number,
            gym_number=gym_number,
            external_entity_number=external_entity_number,
            name=name,
            number=number,
            introduce_by=introduce_by,
            guardian=guardian,
            type_id=type_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def user_update_user_without_preload_content(
        self,
        user_id: Annotated[Optional[StrictInt], Field(description="Indentity number(primary key) for user object. Generated in DB table when inserting a record.             ")] = None,
        account_number: Annotated[Optional[StrictStr], Field(description="Account number of the user.It can be any stakeholder of the application.even can be a gym.             ")] = None,
        gym_number: Annotated[Optional[StrictStr], Field(description="If this user is a gym, then the gym number.             ")] = None,
        external_entity_number: Annotated[Optional[StrictStr], Field(description="Entity number that make a relationship with BOX API DB.             ")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Name of the user.             ")] = None,
        number: Annotated[Optional[StrictStr], Field(description="Unique number maintain by application to idenify user.             ")] = None,
        introduce_by: Annotated[Optional[StrictInt], Field(description="If Someone introduced this user to the system, then that user's UserId.             ")] = None,
        guardian: Annotated[Optional[StrictInt], Field(description="Gaurdian of the this user if he/she is under 18 years old.             ")] = None,
        type_id: Annotated[Optional[StrictInt], Field(description="Type of the user.             ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update an exsisting User             


        :param user_id: Indentity number(primary key) for user object. Generated in DB table when inserting a record.             
        :type user_id: int
        :param account_number: Account number of the user.It can be any stakeholder of the application.even can be a gym.             
        :type account_number: str
        :param gym_number: If this user is a gym, then the gym number.             
        :type gym_number: str
        :param external_entity_number: Entity number that make a relationship with BOX API DB.             
        :type external_entity_number: str
        :param name: Name of the user.             
        :type name: str
        :param number: Unique number maintain by application to idenify user.             
        :type number: str
        :param introduce_by: If Someone introduced this user to the system, then that user's UserId.             
        :type introduce_by: int
        :param guardian: Gaurdian of the this user if he/she is under 18 years old.             
        :type guardian: int
        :param type_id: Type of the user.             
        :type type_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._user_update_user_serialize(
            user_id=user_id,
            account_number=account_number,
            gym_number=gym_number,
            external_entity_number=external_entity_number,
            name=name,
            number=number,
            introduce_by=introduce_by,
            guardian=guardian,
            type_id=type_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _user_update_user_serialize(
        self,
        user_id,
        account_number,
        gym_number,
        external_entity_number,
        name,
        number,
        introduce_by,
        guardian,
        type_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if user_id is not None:
            
            _query_params.append(('UserId', user_id))
            
        if account_number is not None:
            
            _query_params.append(('AccountNumber', account_number))
            
        if gym_number is not None:
            
            _query_params.append(('GymNumber', gym_number))
            
        if external_entity_number is not None:
            
            _query_params.append(('ExternalEntityNumber', external_entity_number))
            
        if name is not None:
            
            _query_params.append(('Name', name))
            
        if number is not None:
            
            _query_params.append(('Number', number))
            
        if introduce_by is not None:
            
            _query_params.append(('IntroduceBy', introduce_by))
            
        if guardian is not None:
            
            _query_params.append(('Guardian', guardian))
            
        if type_id is not None:
            
            _query_params.append(('TypeId', type_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/api/User/updateuser',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    API

    Web API for TL mobile and web app

    The version of the OpenAPI document: 2020-08-10_6-22
    Contact: support@unicorn-solutions.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.package_dto import PackageDTO

class TestPackageDTO(unittest.TestCase):
    """PackageDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PackageDTO:
        """Test PackageDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PackageDTO`
        """
        model = PackageDTO()
        if include_optional:
            return PackageDTO(
                add_ons = [
                    openapi_client.models.package_item_dto.PackageItemDTO(
                        article_id = 56, 
                        article_name = '', 
                        article_number = 56, 
                        article_price = 1.337, 
                        end_order = 56, 
                        is_include_service_in_charge = True, 
                        measure_unit = '', 
                        number_of_items = 1.337, 
                        start_order = 56, )
                    ],
                addon_fee = 1.337,
                apply_for_all_gyms = True,
                available_gyms = [
                    openapi_client.models.gym_dto.GymDTO(
                        external_gym_number = 56, 
                        gym_id = 56, 
                        gym_name = '', 
                        location = '', )
                    ],
                binding_period = 56,
                created_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_user = '',
                description = '',
                end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                expire_in_months = 56,
                features = '',
                free_months = 56,
                instructions_to_gym_users = '',
                instructions_to_web_users = '',
                is_active = True,
                is_atg = True,
                is_auto_renew = True,
                is_first_month_free = True,
                is_registration_fee = True,
                is_rest_amount = True,
                is_shown_in_mobile = True,
                is_sponsor_package = True,
                maximum_give_away_rest_amount = 1.337,
                member_can_add_add_ons = True,
                member_can_leave_within_free_period = True,
                member_can_remove_add_ons = True,
                modified_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                modified_user = '',
                monthly_fee = 1.337,
                next_package_number = 56,
                number_of_installments = 56,
                number_of_visits = 56,
                package_id = 56,
                package_name = '0',
                package_number = '',
                package_type = 'unlimited0',
                per_visit_price = 1.337,
                registration_fee = 1.337,
                service_fee = 1.337,
                shown_in_web = True,
                start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                tags = '',
                total_price = 1.337
            )
        else:
            return PackageDTO(
                package_name = '0',
                package_type = 'unlimited0',
                registration_fee = 1.337,
                service_fee = 1.337,
        )
        """

    def testPackageDTO(self):
        """Test PackageDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

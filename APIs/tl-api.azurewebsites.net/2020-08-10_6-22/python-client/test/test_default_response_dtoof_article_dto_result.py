# coding: utf-8

"""
    API

    Web API for TL mobile and web app

    The version of the OpenAPI document: 2020-08-10_6-22
    Contact: support@unicorn-solutions.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.default_response_dtoof_article_dto_result import DefaultResponseDTOOfArticleDTOResult

class TestDefaultResponseDTOOfArticleDTOResult(unittest.TestCase):
    """DefaultResponseDTOOfArticleDTOResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DefaultResponseDTOOfArticleDTOResult:
        """Test DefaultResponseDTOOfArticleDTOResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DefaultResponseDTOOfArticleDTOResult`
        """
        model = DefaultResponseDTOOfArticleDTOResult()
        if include_optional:
            return DefaultResponseDTOOfArticleDTOResult(
                active_status = True,
                apply_for_all_gyms = True,
                article_id = 56,
                available_gyms = [
                    openapi_client.models.gym_dto.GymDTO(
                        external_gym_number = 56, 
                        gym_id = 56, 
                        gym_name = '', 
                        location = '', )
                    ],
                available_qty = 1.337,
                barcode = '',
                created_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_user = '',
                cron_expression = '',
                description = '',
                discount = 1.337,
                employee_discount = 1.337,
                employee_price = 1.337,
                gym_articles = [
                    openapi_client.models.gym_article_details_dto.GymArticleDetailsDTO(
                        article_id = 56, 
                        available_qty = 1.337, 
                        created_user = '', 
                        employee_discount = 1.337, 
                        employee_price = 1.337, 
                        gym_id = 56, 
                        gym_id_list = '', 
                        gym_name = '', 
                        id = 56, 
                        is_default = True, 
                        is_inventory_item = True, 
                        is_obsolete = True, 
                        modified_user = '', 
                        reorder_level = 1.337, 
                        revenue_account_id = 56, 
                        selling_price = 1.337, )
                    ],
                is_add_on = True,
                is_inventory_item = True,
                is_obsolete = True,
                measure_unit = '0',
                modified_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                modified_user = '',
                name = '',
                number = 56,
                price = 1.337,
                reorder_level = 1.337,
                revenue_account_id = 56,
                selling_price = 1.337,
                tags = '',
                type = 'access0',
                vat = 1.337,
                vat_applicable = True
            )
        else:
            return DefaultResponseDTOOfArticleDTOResult(
                available_gyms = [
                    openapi_client.models.gym_dto.GymDTO(
                        external_gym_number = 56, 
                        gym_id = 56, 
                        gym_name = '', 
                        location = '', )
                    ],
                measure_unit = '0',
                name = '',
                price = 1.337,
                type = 'access0',
        )
        """

    def testDefaultResponseDTOOfArticleDTOResult(self):
        """Test DefaultResponseDTOOfArticleDTOResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

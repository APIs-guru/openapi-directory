# coding: utf-8

"""
    Storm Glass Marine Weather

    Global marine weather data from multiple sources in one single API with hourly resolution. Get your API key by visiting the Storm Glass web site.

    The version of the OpenAPI document: 1.0.1
    Contact: support@stormglass.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ForecastMeta(BaseModel):
    """
    ForecastMeta
    """ # noqa: E501
    daily_quota: Optional[StrictInt] = Field(default=None, description="The number of successful requests you can do on one day", alias="dailyQuota")
    lat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The latitude the response is showing forecast data for")
    lng: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The longitude the response is showing forecast data for")
    request_count: Optional[StrictInt] = Field(default=None, description="The number of successful requests made this day.", alias="requestCount")
    __properties: ClassVar[List[str]] = ["dailyQuota", "lat", "lng", "requestCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ForecastMeta from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ForecastMeta from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dailyQuota": obj.get("dailyQuota"),
            "lat": obj.get("lat"),
            "lng": obj.get("lng"),
            "requestCount": obj.get("requestCount")
        })
        return _obj



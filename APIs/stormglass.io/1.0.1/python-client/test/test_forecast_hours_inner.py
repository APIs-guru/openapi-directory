# coding: utf-8

"""
    Storm Glass Marine Weather

    Global marine weather data from multiple sources in one single API with hourly resolution. Get your API key by visiting the Storm Glass web site.

    The version of the OpenAPI document: 1.0.1
    Contact: support@stormglass.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.forecast_hours_inner import ForecastHoursInner

class TestForecastHoursInner(unittest.TestCase):
    """ForecastHoursInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ForecastHoursInner:
        """Test ForecastHoursInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ForecastHoursInner`
        """
        model = ForecastHoursInner()
        if include_optional:
            return ForecastHoursInner(
                air_temperature = [
                    openapi_client.models.forecast_hours_inner_air_temperature_inner.Forecast_hours_inner_airTemperature_inner(
                        source = 'smhi', 
                        value = '-2.6', )
                    ],
                swell_direction = [
                    openapi_client.models.forecast_hours_inner_swell_direction_inner.Forecast_hours_inner_swellDirection_inner(
                        source = 'nooa', 
                        value = '164.35', )
                    ],
                swell_height = [
                    openapi_client.models.forecast_hours_inner_swell_height_inner.Forecast_hours_inner_swellHeight_inner(
                        source = 'nooa', 
                        value = '2.94', )
                    ],
                swell_period = [
                    openapi_client.models.forecast_hours_inner_swell_period_inner.Forecast_hours_inner_swellPeriod_inner(
                        source = 'nooa', 
                        value = '15.88', )
                    ],
                time = '2018-01-19T17:00:00+00:00',
                water_temperature = [
                    openapi_client.models.forecast_hours_inner_water_temperature_inner.Forecast_hours_inner_waterTemperature_inner(
                        source = 'fcoo', 
                        value = '9', )
                    ],
                wave_direction = [
                    openapi_client.models.forecast_hours_inner_wave_direction_inner.Forecast_hours_inner_waveDirection_inner(
                        source = 'fcoo', 
                        value = 121.35698599493828, )
                    ],
                wave_height = [
                    openapi_client.models.forecast_hours_inner_wave_height_inner.Forecast_hours_inner_waveHeight_inner(
                        source = 'fmi', 
                        value = '0.5969999991357327', )
                    ],
                wave_period = [
                    openapi_client.models.forecast_hours_inner_wave_period_inner.Forecast_hours_inner_wavePeriod_inner(
                        source = 'fcoo', 
                        value = '3.63850457084894', )
                    ],
                wind_direction = [
                    openapi_client.models.forecast_hours_inner_wind_direction_inner.Forecast_hours_inner_windDirection_inner(
                        source = 'smhi', 
                        value = '36.0', )
                    ],
                wind_speed = [
                    openapi_client.models.forecast_hours_inner_wind_speed_inner.Forecast_hours_inner_windSpeed_inner(
                        source = 'smhi', 
                        value = '36.0', )
                    ]
            )
        else:
            return ForecastHoursInner(
        )
        """

    def testForecastHoursInner(self):
        """Test ForecastHoursInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

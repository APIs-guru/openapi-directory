# coding: utf-8

"""
    Ritc

    Rules in the Cloud

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.api_type import ApiType
from openapi_client.models.http_method import HttpMethod
from openapi_client.models.request_parameter import RequestParameter
from openapi_client.models.response_format import ResponseFormat
from openapi_client.models.type import Type
from typing import Optional, Set
from typing_extensions import Self

class Function7(BaseModel):
    """
    Function7
    """ # noqa: E501
    api_type: Optional[ApiType] = Field(default=None, alias="apiType")
    desc: Optional[StrictStr] = Field(default=None, description="Function description")
    endpoint: Optional[StrictStr] = Field(default=None, description="Function endpoint")
    http_method: Optional[HttpMethod] = Field(default=None, alias="httpMethod")
    name: Optional[StrictStr] = Field(default=None, description="Function name")
    request_parameters: Optional[List[RequestParameter]] = Field(default=None, alias="requestParameters")
    response_format: Optional[ResponseFormat] = Field(default=None, alias="responseFormat")
    type: Optional[Type] = None
    __properties: ClassVar[List[str]] = ["apiType", "desc", "endpoint", "httpMethod", "name", "requestParameters", "responseFormat", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Function7 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in request_parameters (list)
        _items = []
        if self.request_parameters:
            for _item_request_parameters in self.request_parameters:
                if _item_request_parameters:
                    _items.append(_item_request_parameters.to_dict())
            _dict['requestParameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Function7 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiType": obj.get("apiType"),
            "desc": obj.get("desc"),
            "endpoint": obj.get("endpoint"),
            "httpMethod": obj.get("httpMethod"),
            "name": obj.get("name"),
            "requestParameters": [RequestParameter.from_dict(_item) for _item in obj["requestParameters"]] if obj.get("requestParameters") is not None else None,
            "responseFormat": obj.get("responseFormat"),
            "type": obj.get("type")
        })
        return _obj



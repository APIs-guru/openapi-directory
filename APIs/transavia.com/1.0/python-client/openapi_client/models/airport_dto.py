# coding: utf-8

"""
    Airports API v2

    Returns all airports

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.country import Country
from openapi_client.models.geo_coordinates import GeoCoordinates
from openapi_client.models.link import Link
from typing import Optional, Set
from typing_extensions import Self

class AirportDto(BaseModel):
    """
    
    """ # noqa: E501
    city: Optional[StrictStr] = Field(default=None, description="City where the airport is located.")
    country: Optional[Country] = None
    geo_coordinates: Optional[GeoCoordinates] = Field(default=None, alias="geoCoordinates")
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the airport.")
    var_self: Optional[Link] = Field(default=None, alias="self")
    __properties: ClassVar[List[str]] = ["city", "country", "geoCoordinates", "id", "name", "self"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AirportDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of country
        if self.country:
            _dict['country'] = self.country.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geo_coordinates
        if self.geo_coordinates:
            _dict['geoCoordinates'] = self.geo_coordinates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_self
        if self.var_self:
            _dict['self'] = self.var_self.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AirportDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "city": obj.get("city"),
            "country": Country.from_dict(obj["country"]) if obj.get("country") is not None else None,
            "geoCoordinates": GeoCoordinates.from_dict(obj["geoCoordinates"]) if obj.get("geoCoordinates") is not None else None,
            "id": obj.get("id"),
            "name": obj.get("name"),
            "self": Link.from_dict(obj["self"]) if obj.get("self") is not None else None
        })
        return _obj



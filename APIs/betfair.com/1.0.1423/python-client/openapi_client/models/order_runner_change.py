# coding: utf-8

"""
    Betfair: Exchange Streaming API

    API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)

    The version of the OpenAPI document: 1.0.1423
    Contact: bdp@betfair.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.order import Order
from openapi_client.models.strategy_match_change import StrategyMatchChange
from typing import Optional, Set
from typing_extensions import Self

class OrderRunnerChange(BaseModel):
    """
    OrderRunnerChange
    """ # noqa: E501
    full_image: Optional[StrictBool] = Field(default=None, alias="fullImage")
    hc: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Handicap - the handicap of the runner (selection) (null if not applicable)")
    id: Optional[StrictInt] = Field(default=None, description="Selection Id - the id of the runner (selection)")
    mb: Optional[List[List[Union[StrictFloat, StrictInt]]]] = Field(default=None, description="Matched Backs - matched amounts by distinct matched price on the Back side for this runner (selection)")
    ml: Optional[List[List[Union[StrictFloat, StrictInt]]]] = Field(default=None, description="Matched Lays - matched amounts by distinct matched price on the Lay side for this runner (selection)")
    smc: Optional[Dict[str, StrategyMatchChange]] = Field(default=None, description="Strategy Matches - Matched Backs and Matched Lays grouped by strategy reference")
    uo: Optional[List[Order]] = Field(default=None, description="Unmatched Orders - orders on this runner (selection) that are not fully matched")
    __properties: ClassVar[List[str]] = ["fullImage", "hc", "id", "mb", "ml", "smc", "uo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderRunnerChange from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in smc (dict)
        _field_dict = {}
        if self.smc:
            for _key_smc in self.smc:
                if self.smc[_key_smc]:
                    _field_dict[_key_smc] = self.smc[_key_smc].to_dict()
            _dict['smc'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in uo (list)
        _items = []
        if self.uo:
            for _item_uo in self.uo:
                if _item_uo:
                    _items.append(_item_uo.to_dict())
            _dict['uo'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderRunnerChange from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fullImage": obj.get("fullImage"),
            "hc": obj.get("hc"),
            "id": obj.get("id"),
            "mb": obj.get("mb"),
            "ml": obj.get("ml"),
            "smc": dict(
                (_k, StrategyMatchChange.from_dict(_v))
                for _k, _v in obj["smc"].items()
            )
            if obj.get("smc") is not None
            else None,
            "uo": [Order.from_dict(_item) for _item in obj["uo"]] if obj.get("uo") is not None else None
        })
        return _obj



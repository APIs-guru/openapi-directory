# coding: utf-8

"""
    Betfair: Exchange Streaming API

    API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)

    The version of the OpenAPI document: 1.0.1423
    Contact: bdp@betfair.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OrderFilter(BaseModel):
    """
    OrderFilter
    """ # noqa: E501
    account_ids: Optional[List[StrictInt]] = Field(default=None, description="Internal use only & should not be set on your filter (your subscription is already locked to your account). If set subscription will fail.", alias="accountIds")
    customer_strategy_refs: Optional[List[StrictStr]] = Field(default=None, description="Restricts to specified customerStrategyRefs; this will filter orders and StrategyMatchChanges accordingly (Note: overall postition is not filtered)", alias="customerStrategyRefs")
    include_overall_position: Optional[StrictBool] = Field(default=None, description="Returns overall / net position (See: OrderRunnerChange.mb / OrderRunnerChange.ml). Default=true", alias="includeOverallPosition")
    partition_matched_by_strategy_ref: Optional[StrictBool] = Field(default=None, description="Returns strategy positions (See: OrderRunnerChange.smc=Map<customerStrategyRef, StrategyMatchChange>) - these are sent in delta format as per overall position. Default=false", alias="partitionMatchedByStrategyRef")
    __properties: ClassVar[List[str]] = ["accountIds", "customerStrategyRefs", "includeOverallPosition", "partitionMatchedByStrategyRef"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountIds": obj.get("accountIds"),
            "customerStrategyRefs": obj.get("customerStrategyRefs"),
            "includeOverallPosition": obj.get("includeOverallPosition"),
            "partitionMatchedByStrategyRef": obj.get("partitionMatchedByStrategyRef")
        })
        return _obj



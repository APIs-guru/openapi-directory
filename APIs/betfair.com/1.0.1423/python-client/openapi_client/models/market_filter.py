# coding: utf-8

"""
    Betfair: Exchange Streaming API

    API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)

    The version of the OpenAPI document: 1.0.1423
    Contact: bdp@betfair.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MarketFilter(BaseModel):
    """
    MarketFilter
    """ # noqa: E501
    betting_types: Optional[List[StrictStr]] = Field(default=None, alias="bettingTypes")
    bsp_market: Optional[StrictBool] = Field(default=None, alias="bspMarket")
    country_codes: Optional[List[StrictStr]] = Field(default=None, alias="countryCodes")
    event_ids: Optional[List[StrictStr]] = Field(default=None, alias="eventIds")
    event_type_ids: Optional[List[StrictStr]] = Field(default=None, alias="eventTypeIds")
    market_ids: Optional[List[StrictStr]] = Field(default=None, alias="marketIds")
    market_types: Optional[List[StrictStr]] = Field(default=None, alias="marketTypes")
    race_types: Optional[List[StrictStr]] = Field(default=None, alias="raceTypes")
    turn_in_play_enabled: Optional[StrictBool] = Field(default=None, alias="turnInPlayEnabled")
    venues: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["bettingTypes", "bspMarket", "countryCodes", "eventIds", "eventTypeIds", "marketIds", "marketTypes", "raceTypes", "turnInPlayEnabled", "venues"]

    @field_validator('betting_types')
    def betting_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['ODDS', 'LINE', 'RANGE', 'ASIAN_HANDICAP_DOUBLE_LINE', 'ASIAN_HANDICAP_SINGLE_LINE']):
                raise ValueError("each list item must be one of ('ODDS', 'LINE', 'RANGE', 'ASIAN_HANDICAP_DOUBLE_LINE', 'ASIAN_HANDICAP_SINGLE_LINE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MarketFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MarketFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bettingTypes": obj.get("bettingTypes"),
            "bspMarket": obj.get("bspMarket"),
            "countryCodes": obj.get("countryCodes"),
            "eventIds": obj.get("eventIds"),
            "eventTypeIds": obj.get("eventTypeIds"),
            "marketIds": obj.get("marketIds"),
            "marketTypes": obj.get("marketTypes"),
            "raceTypes": obj.get("raceTypes"),
            "turnInPlayEnabled": obj.get("turnInPlayEnabled"),
            "venues": obj.get("venues")
        })
        return _obj



# coding: utf-8

"""
    Betfair: Exchange Streaming API

    API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)

    The version of the OpenAPI document: 1.0.1423
    Contact: bdp@betfair.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Order(BaseModel):
    """
    Order
    """ # noqa: E501
    avp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average Price Matched - the average price the order was matched at (null if the order is not matched). This value is not meaningful for activity on Line markets and is not guaranteed to be returned or maintained for these markets.")
    bsp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="BSP Liability - the BSP liability of the order (null if the order is not a BSP order)")
    cd: Optional[StrictInt] = Field(default=None, description="Cancelled Date - the date the order was cancelled (null if the order is not cancelled)")
    id: Optional[StrictStr] = Field(default=None, description="Bet Id - the id of the order")
    ld: Optional[StrictInt] = Field(default=None, description="Lapsed Date - the date the order was lapsed (null if the order is not lapsed)")
    lsrc: Optional[StrictStr] = Field(default=None, description="Lapse Status Reason Code - the reason that some or all of this order has been lapsed (null if no portion of the order is lapsed")
    md: Optional[StrictInt] = Field(default=None, description="Matched Date - the date the order was matched (null if the order is not matched)")
    ot: Optional[StrictStr] = Field(default=None, description="Order Type - the type of the order (L = LIMIT, MOC = MARKET_ON_CLOSE, LOC = LIMIT_ON_CLOSE)")
    p: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Price - the original placed price of the order. Line markets operate at even-money odds of 2.0. However, price for these markets refers to the line positions available as defined by the markets min-max range and interval steps")
    pd: Optional[StrictInt] = Field(default=None, description="Placed Date - the date the order was placed")
    pt: Optional[StrictStr] = Field(default=None, description="Persistence Type - whether the order will persist at in play or not (L = LAPSE, P = PERSIST, MOC = Market On Close)")
    rac: Optional[StrictStr] = Field(default=None, description="Regulator Auth Code - the auth code returned by the regulator")
    rc: Optional[StrictStr] = Field(default=None, description="Regulator Code - the regulator of the order")
    rfo: Optional[StrictStr] = Field(default=None, description="Order Reference - the customer's order reference for this order (empty string if one was not set)")
    rfs: Optional[StrictStr] = Field(default=None, description="Strategy Reference - the customer's strategy reference for this order (empty string if one was not set)")
    s: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Size - the original placed size of the order")
    sc: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Size Cancelled - the amount of the order that has been cancelled")
    side: Optional[StrictStr] = Field(default=None, description="Side - the side of the order. For Line markets a 'B' bet refers to a SELL line and an 'L' bet refers to a BUY line.")
    sl: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Size Lapsed - the amount of the order that has been lapsed")
    sm: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Size Matched - the amount of the order that has been matched")
    sr: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Size Remaining - the amount of the order that is remaining unmatched")
    status: Optional[StrictStr] = Field(default=None, description="Status - the status of the order (E = EXECUTABLE, EC = EXECUTION_COMPLETE)")
    sv: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Size Voided - the amount of the order that has been voided")
    __properties: ClassVar[List[str]] = ["avp", "bsp", "cd", "id", "ld", "lsrc", "md", "ot", "p", "pd", "pt", "rac", "rc", "rfo", "rfs", "s", "sc", "side", "sl", "sm", "sr", "status", "sv"]

    @field_validator('ot')
    def ot_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['L', 'LOC', 'MOC']):
            raise ValueError("must be one of enum values ('L', 'LOC', 'MOC')")
        return value

    @field_validator('pt')
    def pt_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['L', 'P', 'MOC']):
            raise ValueError("must be one of enum values ('L', 'P', 'MOC')")
        return value

    @field_validator('side')
    def side_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['B', 'L']):
            raise ValueError("must be one of enum values ('B', 'L')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['E', 'EC']):
            raise ValueError("must be one of enum values ('E', 'EC')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Order from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Order from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "avp": obj.get("avp"),
            "bsp": obj.get("bsp"),
            "cd": obj.get("cd"),
            "id": obj.get("id"),
            "ld": obj.get("ld"),
            "lsrc": obj.get("lsrc"),
            "md": obj.get("md"),
            "ot": obj.get("ot"),
            "p": obj.get("p"),
            "pd": obj.get("pd"),
            "pt": obj.get("pt"),
            "rac": obj.get("rac"),
            "rc": obj.get("rc"),
            "rfo": obj.get("rfo"),
            "rfs": obj.get("rfs"),
            "s": obj.get("s"),
            "sc": obj.get("sc"),
            "side": obj.get("side"),
            "sl": obj.get("sl"),
            "sm": obj.get("sm"),
            "sr": obj.get("sr"),
            "status": obj.get("status"),
            "sv": obj.get("sv")
        })
        return _obj



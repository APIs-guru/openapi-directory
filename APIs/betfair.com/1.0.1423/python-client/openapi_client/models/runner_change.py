# coding: utf-8

"""
    Betfair: Exchange Streaming API

    API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)

    The version of the OpenAPI document: 1.0.1423
    Contact: bdp@betfair.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class RunnerChange(BaseModel):
    """
    RunnerChange
    """ # noqa: E501
    atb: Optional[List[List[Union[StrictFloat, StrictInt]]]] = Field(default=None, description="Available To Back - PriceVol tuple delta of price changes (0 vol is remove)")
    atl: Optional[List[List[Union[StrictFloat, StrictInt]]]] = Field(default=None, description="Available To Lay - PriceVol tuple delta of price changes (0 vol is remove)")
    batb: Optional[List[List[Union[StrictFloat, StrictInt]]]] = Field(default=None, description="Best Available To Back - LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)")
    batl: Optional[List[List[Union[StrictFloat, StrictInt]]]] = Field(default=None, description="Best Available To Lay - LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)")
    bdatb: Optional[List[List[Union[StrictFloat, StrictInt]]]] = Field(default=None, description="Best Display Available To Back (includes virtual prices)- LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)")
    bdatl: Optional[List[List[Union[StrictFloat, StrictInt]]]] = Field(default=None, description="Best Display Available To Lay (includes virtual prices)- LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)")
    hc: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Handicap - the handicap of the runner (selection) (null if not applicable)")
    id: Optional[StrictInt] = Field(default=None, description="Selection Id - the id of the runner (selection)")
    ltp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Last Traded Price - The last traded price (or null if un-changed)")
    spb: Optional[List[List[Union[StrictFloat, StrictInt]]]] = Field(default=None, description="Starting Price Back - PriceVol tuple delta of price changes (0 vol is remove)")
    spf: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Starting Price Far - The far starting price (or null if un-changed)")
    spl: Optional[List[List[Union[StrictFloat, StrictInt]]]] = Field(default=None, description="Starting Price Lay - PriceVol tuple delta of price changes (0 vol is remove)")
    spn: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Starting Price Near - The far starting price (or null if un-changed)")
    trd: Optional[List[List[Union[StrictFloat, StrictInt]]]] = Field(default=None, description="Traded - PriceVol tuple delta of price changes (0 vol is remove)")
    tv: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount matched. This value is truncated at 2dp.")
    __properties: ClassVar[List[str]] = ["atb", "atl", "batb", "batl", "bdatb", "bdatl", "hc", "id", "ltp", "spb", "spf", "spl", "spn", "trd", "tv"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RunnerChange from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RunnerChange from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "atb": obj.get("atb"),
            "atl": obj.get("atl"),
            "batb": obj.get("batb"),
            "batl": obj.get("batl"),
            "bdatb": obj.get("bdatb"),
            "bdatl": obj.get("bdatl"),
            "hc": obj.get("hc"),
            "id": obj.get("id"),
            "ltp": obj.get("ltp"),
            "spb": obj.get("spb"),
            "spf": obj.get("spf"),
            "spl": obj.get("spl"),
            "spn": obj.get("spn"),
            "trd": obj.get("trd"),
            "tv": obj.get("tv")
        })
        return _obj



# coding: utf-8

"""
    Betfair: Exchange Streaming API

    API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)

    The version of the OpenAPI document: 1.0.1423
    Contact: bdp@betfair.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.key_line_definition import KeyLineDefinition
from openapi_client.models.price_ladder_definition import PriceLadderDefinition
from openapi_client.models.runner_definition import RunnerDefinition
from typing import Optional, Set
from typing_extensions import Self

class MarketDefinition(BaseModel):
    """
    MarketDefinition
    """ # noqa: E501
    bet_delay: Optional[StrictInt] = Field(default=None, alias="betDelay")
    betting_type: Optional[StrictStr] = Field(default=None, alias="bettingType")
    bsp_market: Optional[StrictBool] = Field(default=None, alias="bspMarket")
    bsp_reconciled: Optional[StrictBool] = Field(default=None, alias="bspReconciled")
    complete: Optional[StrictBool] = None
    country_code: Optional[StrictStr] = Field(default=None, alias="countryCode")
    cross_matching: Optional[StrictBool] = Field(default=None, alias="crossMatching")
    discount_allowed: Optional[StrictBool] = Field(default=None, alias="discountAllowed")
    each_way_divisor: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="eachWayDivisor")
    event_id: Optional[StrictStr] = Field(default=None, alias="eventId")
    event_type_id: Optional[StrictStr] = Field(default=None, description="The Event Type the market is contained within.", alias="eventTypeId")
    in_play: Optional[StrictBool] = Field(default=None, alias="inPlay")
    key_line_definition: Optional[KeyLineDefinition] = Field(default=None, alias="keyLineDefinition")
    line_interval: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="For Handicap and Line markets, the lines available on this market will be between the range of lineMinUnit and lineMaxUnit, in increments of the lineInterval value. e.g. If unit is runs, lineMinUnit=10, lineMaxUnit=20 and lineInterval=0.5, then valid lines include 10, 10.5, 11, 11.5 up to 20 runs.", alias="lineInterval")
    line_max_unit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="For Handicap and Line markets, the maximum value for the outcome, in market units for this market (eg 100 runs).", alias="lineMaxUnit")
    line_min_unit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="For Handicap and Line markets, the minimum value for the outcome, in market units for this market (eg 0 runs).", alias="lineMinUnit")
    market_base_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="marketBaseRate")
    market_time: Optional[datetime] = Field(default=None, alias="marketTime")
    market_type: Optional[StrictStr] = Field(default=None, alias="marketType")
    number_of_active_runners: Optional[StrictInt] = Field(default=None, alias="numberOfActiveRunners")
    number_of_winners: Optional[StrictInt] = Field(default=None, alias="numberOfWinners")
    open_date: Optional[datetime] = Field(default=None, alias="openDate")
    persistence_enabled: Optional[StrictBool] = Field(default=None, alias="persistenceEnabled")
    price_ladder_definition: Optional[PriceLadderDefinition] = Field(default=None, alias="priceLadderDefinition")
    race_type: Optional[StrictStr] = Field(default=None, alias="raceType")
    regulators: Optional[List[StrictStr]] = Field(default=None, description="The market regulators.")
    runners: Optional[List[RunnerDefinition]] = None
    runners_voidable: Optional[StrictBool] = Field(default=None, alias="runnersVoidable")
    settled_time: Optional[datetime] = Field(default=None, alias="settledTime")
    status: Optional[StrictStr] = None
    suspend_time: Optional[datetime] = Field(default=None, alias="suspendTime")
    timezone: Optional[StrictStr] = None
    turn_in_play_enabled: Optional[StrictBool] = Field(default=None, alias="turnInPlayEnabled")
    venue: Optional[StrictStr] = None
    version: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["betDelay", "bettingType", "bspMarket", "bspReconciled", "complete", "countryCode", "crossMatching", "discountAllowed", "eachWayDivisor", "eventId", "eventTypeId", "inPlay", "keyLineDefinition", "lineInterval", "lineMaxUnit", "lineMinUnit", "marketBaseRate", "marketTime", "marketType", "numberOfActiveRunners", "numberOfWinners", "openDate", "persistenceEnabled", "priceLadderDefinition", "raceType", "regulators", "runners", "runnersVoidable", "settledTime", "status", "suspendTime", "timezone", "turnInPlayEnabled", "venue", "version"]

    @field_validator('betting_type')
    def betting_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ODDS', 'LINE', 'RANGE', 'ASIAN_HANDICAP_DOUBLE_LINE', 'ASIAN_HANDICAP_SINGLE_LINE']):
            raise ValueError("must be one of enum values ('ODDS', 'LINE', 'RANGE', 'ASIAN_HANDICAP_DOUBLE_LINE', 'ASIAN_HANDICAP_SINGLE_LINE')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INACTIVE', 'OPEN', 'SUSPENDED', 'CLOSED']):
            raise ValueError("must be one of enum values ('INACTIVE', 'OPEN', 'SUSPENDED', 'CLOSED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MarketDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of key_line_definition
        if self.key_line_definition:
            _dict['keyLineDefinition'] = self.key_line_definition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price_ladder_definition
        if self.price_ladder_definition:
            _dict['priceLadderDefinition'] = self.price_ladder_definition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in runners (list)
        _items = []
        if self.runners:
            for _item_runners in self.runners:
                if _item_runners:
                    _items.append(_item_runners.to_dict())
            _dict['runners'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MarketDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "betDelay": obj.get("betDelay"),
            "bettingType": obj.get("bettingType"),
            "bspMarket": obj.get("bspMarket"),
            "bspReconciled": obj.get("bspReconciled"),
            "complete": obj.get("complete"),
            "countryCode": obj.get("countryCode"),
            "crossMatching": obj.get("crossMatching"),
            "discountAllowed": obj.get("discountAllowed"),
            "eachWayDivisor": obj.get("eachWayDivisor"),
            "eventId": obj.get("eventId"),
            "eventTypeId": obj.get("eventTypeId"),
            "inPlay": obj.get("inPlay"),
            "keyLineDefinition": KeyLineDefinition.from_dict(obj["keyLineDefinition"]) if obj.get("keyLineDefinition") is not None else None,
            "lineInterval": obj.get("lineInterval"),
            "lineMaxUnit": obj.get("lineMaxUnit"),
            "lineMinUnit": obj.get("lineMinUnit"),
            "marketBaseRate": obj.get("marketBaseRate"),
            "marketTime": obj.get("marketTime"),
            "marketType": obj.get("marketType"),
            "numberOfActiveRunners": obj.get("numberOfActiveRunners"),
            "numberOfWinners": obj.get("numberOfWinners"),
            "openDate": obj.get("openDate"),
            "persistenceEnabled": obj.get("persistenceEnabled"),
            "priceLadderDefinition": PriceLadderDefinition.from_dict(obj["priceLadderDefinition"]) if obj.get("priceLadderDefinition") is not None else None,
            "raceType": obj.get("raceType"),
            "regulators": obj.get("regulators"),
            "runners": [RunnerDefinition.from_dict(_item) for _item in obj["runners"]] if obj.get("runners") is not None else None,
            "runnersVoidable": obj.get("runnersVoidable"),
            "settledTime": obj.get("settledTime"),
            "status": obj.get("status"),
            "suspendTime": obj.get("suspendTime"),
            "timezone": obj.get("timezone"),
            "turnInPlayEnabled": obj.get("turnInPlayEnabled"),
            "venue": obj.get("venue"),
            "version": obj.get("version")
        })
        return _obj



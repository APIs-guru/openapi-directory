# coding: utf-8

"""
    Betfair: Exchange Streaming API

    API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)

    The version of the OpenAPI document: 1.0.1423
    Contact: bdp@betfair.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.market_data_filter import MarketDataFilter
from openapi_client.models.market_filter import MarketFilter
from openapi_client.models.request_message import RequestMessage
from typing import Optional, Set
from typing_extensions import Self

class MarketSubscriptionMessage(RequestMessage):
    """
    MarketSubscriptionMessage
    """ # noqa: E501
    clk: Optional[StrictStr] = Field(default=None, description="Token value delta (received in MarketChangeMessage) that should be passed to resume a subscription")
    conflate_ms: Optional[StrictInt] = Field(default=None, description="Conflate Milliseconds - the conflation rate (looped back on initial image after validation: bounds are 0 to 120000)", alias="conflateMs")
    heartbeat_ms: Optional[StrictInt] = Field(default=None, description="Heartbeat Milliseconds - the heartbeat rate (looped back on initial image after validation: bounds are 500 to 5000)", alias="heartbeatMs")
    initial_clk: Optional[StrictStr] = Field(default=None, description="Token value (received in initial MarketChangeMessage) that should be passed to resume a subscription", alias="initialClk")
    market_data_filter: Optional[MarketDataFilter] = Field(default=None, alias="marketDataFilter")
    market_filter: Optional[MarketFilter] = Field(default=None, alias="marketFilter")
    segmentation_enabled: Optional[StrictBool] = Field(default=None, description="Segmentation Enabled - allow the server to send large sets of data in segments, instead of a single block", alias="segmentationEnabled")
    __properties: ClassVar[List[str]] = ["id", "op", "clk", "conflateMs", "heartbeatMs", "initialClk", "marketDataFilter", "marketFilter", "segmentationEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MarketSubscriptionMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of market_data_filter
        if self.market_data_filter:
            _dict['marketDataFilter'] = self.market_data_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of market_filter
        if self.market_filter:
            _dict['marketFilter'] = self.market_filter.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MarketSubscriptionMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "op": obj.get("op"),
            "clk": obj.get("clk"),
            "conflateMs": obj.get("conflateMs"),
            "heartbeatMs": obj.get("heartbeatMs"),
            "initialClk": obj.get("initialClk"),
            "marketDataFilter": MarketDataFilter.from_dict(obj["marketDataFilter"]) if obj.get("marketDataFilter") is not None else None,
            "marketFilter": MarketFilter.from_dict(obj["marketFilter"]) if obj.get("marketFilter") is not None else None,
            "segmentationEnabled": obj.get("segmentationEnabled")
        })
        return _obj



# coding: utf-8

"""
    Betfair: Exchange Streaming API

    API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)

    The version of the OpenAPI document: 1.0.1423
    Contact: bdp@betfair.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.market_definition import MarketDefinition
from openapi_client.models.runner_change import RunnerChange
from typing import Optional, Set
from typing_extensions import Self

class MarketChange(BaseModel):
    """
    MarketChange
    """ # noqa: E501
    con: Optional[StrictBool] = Field(default=None, description="Conflated - have more than a single change been combined (or null if not conflated)")
    id: Optional[StrictStr] = Field(default=None, description="Market Id - the id of the market")
    img: Optional[StrictBool] = Field(default=None, description="Image - replace existing prices / data with the data supplied: it is not a delta (or null if delta)")
    market_definition: Optional[MarketDefinition] = Field(default=None, alias="marketDefinition")
    rc: Optional[List[RunnerChange]] = Field(default=None, description="Runner Changes - a list of changes to runners (or null if un-changed)")
    tv: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount matched across the market. This value is truncated at 2dp (or null if un-changed)")
    __properties: ClassVar[List[str]] = ["con", "id", "img", "marketDefinition", "rc", "tv"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MarketChange from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of market_definition
        if self.market_definition:
            _dict['marketDefinition'] = self.market_definition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rc (list)
        _items = []
        if self.rc:
            for _item_rc in self.rc:
                if _item_rc:
                    _items.append(_item_rc.to_dict())
            _dict['rc'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MarketChange from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "con": obj.get("con"),
            "id": obj.get("id"),
            "img": obj.get("img"),
            "marketDefinition": MarketDefinition.from_dict(obj["marketDefinition"]) if obj.get("marketDefinition") is not None else None,
            "rc": [RunnerChange.from_dict(_item) for _item in obj["rc"]] if obj.get("rc") is not None else None,
            "tv": obj.get("tv")
        })
        return _obj



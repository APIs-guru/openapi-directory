# coding: utf-8

"""
    Betfair: Exchange Streaming API

    API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)

    The version of the OpenAPI document: 1.0.1423
    Contact: bdp@betfair.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.response_message import ResponseMessage
from typing import Optional, Set
from typing_extensions import Self

class StatusMessage(ResponseMessage):
    """
    StatusMessage
    """ # noqa: E501
    connection_closed: Optional[StrictBool] = Field(default=None, description="Is the connection now closed", alias="connectionClosed")
    connection_id: Optional[StrictStr] = Field(default=None, description="The connection id", alias="connectionId")
    connections_available: Optional[StrictInt] = Field(default=None, description="The number of connections available for this account at this moment in time. Present on responses to Authentication messages only.", alias="connectionsAvailable")
    error_code: Optional[StrictStr] = Field(default=None, description="The type of error in case of a failure", alias="errorCode")
    error_message: Optional[StrictStr] = Field(default=None, description="Additional message in case of a failure", alias="errorMessage")
    status_code: Optional[StrictStr] = Field(default=None, description="The status of the last request", alias="statusCode")
    __properties: ClassVar[List[str]] = ["id", "op", "connectionClosed", "connectionId", "connectionsAvailable", "errorCode", "errorMessage", "statusCode"]

    @field_validator('error_code')
    def error_code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NO_APP_KEY', 'INVALID_APP_KEY', 'NO_SESSION', 'INVALID_SESSION_INFORMATION', 'NOT_AUTHORIZED', 'INVALID_INPUT', 'INVALID_CLOCK', 'UNEXPECTED_ERROR', 'TIMEOUT', 'SUBSCRIPTION_LIMIT_EXCEEDED', 'INVALID_REQUEST', 'CONNECTION_FAILED', 'MAX_CONNECTION_LIMIT_EXCEEDED', 'TOO_MANY_REQUESTS']):
            raise ValueError("must be one of enum values ('NO_APP_KEY', 'INVALID_APP_KEY', 'NO_SESSION', 'INVALID_SESSION_INFORMATION', 'NOT_AUTHORIZED', 'INVALID_INPUT', 'INVALID_CLOCK', 'UNEXPECTED_ERROR', 'TIMEOUT', 'SUBSCRIPTION_LIMIT_EXCEEDED', 'INVALID_REQUEST', 'CONNECTION_FAILED', 'MAX_CONNECTION_LIMIT_EXCEEDED', 'TOO_MANY_REQUESTS')")
        return value

    @field_validator('status_code')
    def status_code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SUCCESS', 'FAILURE']):
            raise ValueError("must be one of enum values ('SUCCESS', 'FAILURE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StatusMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StatusMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "op": obj.get("op"),
            "connectionClosed": obj.get("connectionClosed"),
            "connectionId": obj.get("connectionId"),
            "connectionsAvailable": obj.get("connectionsAvailable"),
            "errorCode": obj.get("errorCode"),
            "errorMessage": obj.get("errorMessage"),
            "statusCode": obj.get("statusCode")
        })
        return _obj



# coding: utf-8

"""
    Betfair: Exchange Streaming API

    API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)

    The version of the OpenAPI document: 1.0.1423
    Contact: bdp@betfair.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.authentication_message import AuthenticationMessage
from openapi_client.models.heartbeat_message import HeartbeatMessage
from openapi_client.models.market_subscription_message import MarketSubscriptionMessage
from openapi_client.models.order_subscription_message import OrderSubscriptionMessage
from typing import Optional, Set
from typing_extensions import Self

class AllRequestTypesExample(BaseModel):
    """
    AllRequestTypesExample
    """ # noqa: E501
    authentication: Optional[AuthenticationMessage] = None
    heartbeat: Optional[HeartbeatMessage] = None
    market_subscription: Optional[MarketSubscriptionMessage] = Field(default=None, alias="marketSubscription")
    op_types: Optional[StrictStr] = Field(default=None, alias="opTypes")
    order_subscription_message: Optional[OrderSubscriptionMessage] = Field(default=None, alias="orderSubscriptionMessage")
    __properties: ClassVar[List[str]] = ["authentication", "heartbeat", "marketSubscription", "opTypes", "orderSubscriptionMessage"]

    @field_validator('op_types')
    def op_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['heartbeat', 'authentication', 'marketSubscription', 'orderSubscription']):
            raise ValueError("must be one of enum values ('heartbeat', 'authentication', 'marketSubscription', 'orderSubscription')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AllRequestTypesExample from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of authentication
        if self.authentication:
            _dict['authentication'] = self.authentication.to_dict()
        # override the default output from pydantic by calling `to_dict()` of heartbeat
        if self.heartbeat:
            _dict['heartbeat'] = self.heartbeat.to_dict()
        # override the default output from pydantic by calling `to_dict()` of market_subscription
        if self.market_subscription:
            _dict['marketSubscription'] = self.market_subscription.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order_subscription_message
        if self.order_subscription_message:
            _dict['orderSubscriptionMessage'] = self.order_subscription_message.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AllRequestTypesExample from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authentication": AuthenticationMessage.from_dict(obj["authentication"]) if obj.get("authentication") is not None else None,
            "heartbeat": HeartbeatMessage.from_dict(obj["heartbeat"]) if obj.get("heartbeat") is not None else None,
            "marketSubscription": MarketSubscriptionMessage.from_dict(obj["marketSubscription"]) if obj.get("marketSubscription") is not None else None,
            "opTypes": obj.get("opTypes"),
            "orderSubscriptionMessage": OrderSubscriptionMessage.from_dict(obj["orderSubscriptionMessage"]) if obj.get("orderSubscriptionMessage") is not None else None
        })
        return _obj



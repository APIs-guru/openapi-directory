# coding: utf-8

"""
    Betfair: Exchange Streaming API

    API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)

    The version of the OpenAPI document: 1.0.1423
    Contact: bdp@betfair.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.connection_message import ConnectionMessage
from openapi_client.models.market_change_message import MarketChangeMessage
from openapi_client.models.order_change_message import OrderChangeMessage
from openapi_client.models.status_message import StatusMessage
from typing import Optional, Set
from typing_extensions import Self

class AllResponseTypesExample(BaseModel):
    """
    AllResponseTypesExample
    """ # noqa: E501
    connection: Optional[ConnectionMessage] = None
    market_change_message: Optional[MarketChangeMessage] = Field(default=None, alias="marketChangeMessage")
    op_types: Optional[StrictStr] = Field(default=None, alias="opTypes")
    order_change_message: Optional[OrderChangeMessage] = Field(default=None, alias="orderChangeMessage")
    status: Optional[StatusMessage] = None
    __properties: ClassVar[List[str]] = ["connection", "marketChangeMessage", "opTypes", "orderChangeMessage", "status"]

    @field_validator('op_types')
    def op_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['connection', 'status', 'mcm', 'ocm']):
            raise ValueError("must be one of enum values ('connection', 'status', 'mcm', 'ocm')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AllResponseTypesExample from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of connection
        if self.connection:
            _dict['connection'] = self.connection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of market_change_message
        if self.market_change_message:
            _dict['marketChangeMessage'] = self.market_change_message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order_change_message
        if self.order_change_message:
            _dict['orderChangeMessage'] = self.order_change_message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AllResponseTypesExample from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "connection": ConnectionMessage.from_dict(obj["connection"]) if obj.get("connection") is not None else None,
            "marketChangeMessage": MarketChangeMessage.from_dict(obj["marketChangeMessage"]) if obj.get("marketChangeMessage") is not None else None,
            "opTypes": obj.get("opTypes"),
            "orderChangeMessage": OrderChangeMessage.from_dict(obj["orderChangeMessage"]) if obj.get("orderChangeMessage") is not None else None,
            "status": StatusMessage.from_dict(obj["status"]) if obj.get("status") is not None else None
        })
        return _obj



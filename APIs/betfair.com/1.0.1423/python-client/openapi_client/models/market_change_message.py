# coding: utf-8

"""
    Betfair: Exchange Streaming API

    API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)

    The version of the OpenAPI document: 1.0.1423
    Contact: bdp@betfair.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.market_change import MarketChange
from openapi_client.models.response_message import ResponseMessage
from typing import Optional, Set
from typing_extensions import Self

class MarketChangeMessage(ResponseMessage):
    """
    MarketChangeMessage
    """ # noqa: E501
    clk: Optional[StrictStr] = Field(default=None, description="Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)")
    conflate_ms: Optional[StrictInt] = Field(default=None, description="Conflate Milliseconds - the conflation rate (may differ from that requested if subscription is delayed)", alias="conflateMs")
    ct: Optional[StrictStr] = Field(default=None, description="Change Type - set to indicate the type of change - if null this is a delta)")
    heartbeat_ms: Optional[StrictInt] = Field(default=None, description="Heartbeat Milliseconds - the heartbeat rate (may differ from requested: bounds are 500 to 30000)", alias="heartbeatMs")
    initial_clk: Optional[StrictStr] = Field(default=None, description="Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)", alias="initialClk")
    mc: Optional[List[MarketChange]] = Field(default=None, description="MarketChanges - the modifications to markets (will be null on a heartbeat")
    pt: Optional[StrictInt] = Field(default=None, description="Publish Time (in millis since epoch) that the changes were generated")
    segment_type: Optional[StrictStr] = Field(default=None, description="Segment Type - if the change is split into multiple segments, this denotes the beginning and end of a change, and segments in between. Will be null if data is not segmented", alias="segmentType")
    status: Optional[StrictInt] = Field(default=None, description="Stream status: set to null if the exchange stream data is up to date and 503 if the downstream services are experiencing latencies")
    __properties: ClassVar[List[str]] = ["id", "op", "clk", "conflateMs", "ct", "heartbeatMs", "initialClk", "mc", "pt", "segmentType", "status"]

    @field_validator('ct')
    def ct_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SUB_IMAGE', 'RESUB_DELTA', 'HEARTBEAT']):
            raise ValueError("must be one of enum values ('SUB_IMAGE', 'RESUB_DELTA', 'HEARTBEAT')")
        return value

    @field_validator('segment_type')
    def segment_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SEG_START', 'SEG', 'SEG_END']):
            raise ValueError("must be one of enum values ('SEG_START', 'SEG', 'SEG_END')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MarketChangeMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in mc (list)
        _items = []
        if self.mc:
            for _item_mc in self.mc:
                if _item_mc:
                    _items.append(_item_mc.to_dict())
            _dict['mc'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MarketChangeMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "op": obj.get("op"),
            "clk": obj.get("clk"),
            "conflateMs": obj.get("conflateMs"),
            "ct": obj.get("ct"),
            "heartbeatMs": obj.get("heartbeatMs"),
            "initialClk": obj.get("initialClk"),
            "mc": [MarketChange.from_dict(_item) for _item in obj["mc"]] if obj.get("mc") is not None else None,
            "pt": obj.get("pt"),
            "segmentType": obj.get("segmentType"),
            "status": obj.get("status")
        })
        return _obj



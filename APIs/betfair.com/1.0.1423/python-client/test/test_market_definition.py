# coding: utf-8

"""
    Betfair: Exchange Streaming API

    API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)

    The version of the OpenAPI document: 1.0.1423
    Contact: bdp@betfair.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.market_definition import MarketDefinition

class TestMarketDefinition(unittest.TestCase):
    """MarketDefinition unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MarketDefinition:
        """Test MarketDefinition
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MarketDefinition`
        """
        model = MarketDefinition()
        if include_optional:
            return MarketDefinition(
                bet_delay = 56,
                betting_type = 'ODDS',
                bsp_market = True,
                bsp_reconciled = True,
                complete = True,
                country_code = '',
                cross_matching = True,
                discount_allowed = True,
                each_way_divisor = 1.337,
                event_id = '',
                event_type_id = '',
                in_play = True,
                key_line_definition = openapi_client.models.key_line_definition.KeyLineDefinition(
                    kl = [
                        openapi_client.models.key_line_selection.KeyLineSelection(
                            hc = 1.337, 
                            id = 56, )
                        ], ),
                line_interval = 1.337,
                line_max_unit = 1.337,
                line_min_unit = 1.337,
                market_base_rate = 1.337,
                market_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                market_type = '',
                number_of_active_runners = 56,
                number_of_winners = 56,
                open_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                persistence_enabled = True,
                price_ladder_definition = openapi_client.models.price_ladder_definition.PriceLadderDefinition(
                    type = 'CLASSIC', ),
                race_type = '',
                regulators = [
                    ''
                    ],
                runners = [
                    openapi_client.models.runner_definition.RunnerDefinition(
                        adjustment_factor = 1.337, 
                        bsp = 1.337, 
                        hc = 1.337, 
                        id = 56, 
                        removal_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        sort_priority = 56, 
                        status = 'ACTIVE', )
                    ],
                runners_voidable = True,
                settled_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                status = 'INACTIVE',
                suspend_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                timezone = '',
                turn_in_play_enabled = True,
                venue = '',
                version = 56
            )
        else:
            return MarketDefinition(
        )
        """

    def testMarketDefinition(self):
        """Test MarketDefinition"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

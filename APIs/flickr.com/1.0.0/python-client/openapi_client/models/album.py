# coding: utf-8

"""
    Flickr API Schema

    A subset of Flickr's API defined in Swagger format.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Album(BaseModel):
    """
    Album
    """ # noqa: E501
    can_comment: Optional[StrictBool] = None
    count_comments: Optional[Union[StrictFloat, StrictInt]] = None
    count_views: Optional[Union[StrictFloat, StrictInt]] = None
    date_create: Optional[Union[StrictFloat, StrictInt]] = None
    date_update: Optional[Union[StrictFloat, StrictInt]] = None
    description: Optional[StrictStr] = None
    farm: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    photos: Optional[Union[StrictFloat, StrictInt]] = None
    primary: Optional[StrictStr] = None
    secret: Optional[StrictStr] = None
    server: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    videos: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["can_comment", "count_comments", "count_views", "date_create", "date_update", "description", "farm", "id", "photos", "primary", "secret", "server", "title", "videos"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Album from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Album from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "can_comment": obj.get("can_comment"),
            "count_comments": obj.get("count_comments"),
            "count_views": obj.get("count_views"),
            "date_create": obj.get("date_create"),
            "date_update": obj.get("date_update"),
            "description": obj.get("description"),
            "farm": obj.get("farm"),
            "id": obj.get("id"),
            "photos": obj.get("photos"),
            "primary": obj.get("primary"),
            "secret": obj.get("secret"),
            "server": obj.get("server"),
            "title": obj.get("title"),
            "videos": obj.get("videos")
        })
        return _obj



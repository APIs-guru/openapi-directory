# coding: utf-8

"""
    Flickr API Schema

    A subset of Flickr's API defined in Swagger format.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cover import Cover
from openapi_client.models.get_favorites_context_by_id200_response_count import GetFavoritesContextByID200ResponseCount
from openapi_client.models.person_photos import PersonPhotos
from openapi_client.models.person_timezone import PersonTimezone
from openapi_client.models.photo_urls import PhotoURLs
from typing import Optional, Set
from typing_extensions import Self

class Person(BaseModel):
    """
    Person
    """ # noqa: E501
    can_buy_pro: Optional[StrictBool] = None
    cover: Optional[Cover] = None
    coverphoto: Optional[PhotoURLs] = None
    coverphoto_farm: Optional[StrictStr] = None
    coverphoto_server: Optional[StrictStr] = None
    description: Optional[GetFavoritesContextByID200ResponseCount] = None
    disable_keyboard_shortcuts: Optional[GetFavoritesContextByID200ResponseCount] = None
    expire: Optional[StrictBool] = None
    has_stats: Optional[StrictBool] = None
    iconfarm: Optional[StrictStr] = None
    iconserver: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    is_ad_free: Optional[StrictBool] = None
    ispro: Optional[StrictBool] = None
    location: Optional[GetFavoritesContextByID200ResponseCount] = None
    mbox_sha1sum: Optional[GetFavoritesContextByID200ResponseCount] = None
    mobileurl: Optional[GetFavoritesContextByID200ResponseCount] = None
    nsid: Optional[StrictStr] = None
    path_alias: Optional[StrictStr] = None
    photos: Optional[PersonPhotos] = None
    photosurl: Optional[GetFavoritesContextByID200ResponseCount] = None
    profileurl: Optional[GetFavoritesContextByID200ResponseCount] = None
    realname: Optional[GetFavoritesContextByID200ResponseCount] = None
    timezone: Optional[PersonTimezone] = None
    unread_messages: Optional[GetFavoritesContextByID200ResponseCount] = None
    user_secret: Optional[StrictStr] = None
    username: Optional[GetFavoritesContextByID200ResponseCount] = None
    yintl: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["can_buy_pro", "cover", "coverphoto", "coverphoto_farm", "coverphoto_server", "description", "disable_keyboard_shortcuts", "expire", "has_stats", "iconfarm", "iconserver", "id", "is_ad_free", "ispro", "location", "mbox_sha1sum", "mobileurl", "nsid", "path_alias", "photos", "photosurl", "profileurl", "realname", "timezone", "unread_messages", "user_secret", "username", "yintl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Person from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cover
        if self.cover:
            _dict['cover'] = self.cover.to_dict()
        # override the default output from pydantic by calling `to_dict()` of coverphoto
        if self.coverphoto:
            _dict['coverphoto'] = self.coverphoto.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of disable_keyboard_shortcuts
        if self.disable_keyboard_shortcuts:
            _dict['disable_keyboard_shortcuts'] = self.disable_keyboard_shortcuts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mbox_sha1sum
        if self.mbox_sha1sum:
            _dict['mbox_sha1sum'] = self.mbox_sha1sum.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mobileurl
        if self.mobileurl:
            _dict['mobileurl'] = self.mobileurl.to_dict()
        # override the default output from pydantic by calling `to_dict()` of photos
        if self.photos:
            _dict['photos'] = self.photos.to_dict()
        # override the default output from pydantic by calling `to_dict()` of photosurl
        if self.photosurl:
            _dict['photosurl'] = self.photosurl.to_dict()
        # override the default output from pydantic by calling `to_dict()` of profileurl
        if self.profileurl:
            _dict['profileurl'] = self.profileurl.to_dict()
        # override the default output from pydantic by calling `to_dict()` of realname
        if self.realname:
            _dict['realname'] = self.realname.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timezone
        if self.timezone:
            _dict['timezone'] = self.timezone.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unread_messages
        if self.unread_messages:
            _dict['unread_messages'] = self.unread_messages.to_dict()
        # override the default output from pydantic by calling `to_dict()` of username
        if self.username:
            _dict['username'] = self.username.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Person from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "can_buy_pro": obj.get("can_buy_pro"),
            "cover": Cover.from_dict(obj["cover"]) if obj.get("cover") is not None else None,
            "coverphoto": PhotoURLs.from_dict(obj["coverphoto"]) if obj.get("coverphoto") is not None else None,
            "coverphoto_farm": obj.get("coverphoto_farm"),
            "coverphoto_server": obj.get("coverphoto_server"),
            "description": GetFavoritesContextByID200ResponseCount.from_dict(obj["description"]) if obj.get("description") is not None else None,
            "disable_keyboard_shortcuts": GetFavoritesContextByID200ResponseCount.from_dict(obj["disable_keyboard_shortcuts"]) if obj.get("disable_keyboard_shortcuts") is not None else None,
            "expire": obj.get("expire"),
            "has_stats": obj.get("has_stats"),
            "iconfarm": obj.get("iconfarm"),
            "iconserver": obj.get("iconserver"),
            "id": obj.get("id"),
            "is_ad_free": obj.get("is_ad_free"),
            "ispro": obj.get("ispro"),
            "location": GetFavoritesContextByID200ResponseCount.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "mbox_sha1sum": GetFavoritesContextByID200ResponseCount.from_dict(obj["mbox_sha1sum"]) if obj.get("mbox_sha1sum") is not None else None,
            "mobileurl": GetFavoritesContextByID200ResponseCount.from_dict(obj["mobileurl"]) if obj.get("mobileurl") is not None else None,
            "nsid": obj.get("nsid"),
            "path_alias": obj.get("path_alias"),
            "photos": PersonPhotos.from_dict(obj["photos"]) if obj.get("photos") is not None else None,
            "photosurl": GetFavoritesContextByID200ResponseCount.from_dict(obj["photosurl"]) if obj.get("photosurl") is not None else None,
            "profileurl": GetFavoritesContextByID200ResponseCount.from_dict(obj["profileurl"]) if obj.get("profileurl") is not None else None,
            "realname": GetFavoritesContextByID200ResponseCount.from_dict(obj["realname"]) if obj.get("realname") is not None else None,
            "timezone": PersonTimezone.from_dict(obj["timezone"]) if obj.get("timezone") is not None else None,
            "unread_messages": GetFavoritesContextByID200ResponseCount.from_dict(obj["unread_messages"]) if obj.get("unread_messages") is not None else None,
            "user_secret": obj.get("user_secret"),
            "username": GetFavoritesContextByID200ResponseCount.from_dict(obj["username"]) if obj.get("username") is not None else None,
            "yintl": obj.get("yintl")
        })
        return _obj



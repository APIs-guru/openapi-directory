# coding: utf-8

"""
    Flickr API Schema

    A subset of Flickr's API defined in Swagger format.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_favorites_context_by_id200_response_count import GetFavoritesContextByID200ResponseCount
from openapi_client.models.owner import Owner
from openapi_client.models.photo_dates import PhotoDates
from openapi_client.models.photo_editability import PhotoEditability
from openapi_client.models.photo_notes import PhotoNotes
from openapi_client.models.photo_people import PhotoPeople
from openapi_client.models.photo_permissions import PhotoPermissions
from openapi_client.models.photo_tags import PhotoTags
from openapi_client.models.photo_urls import PhotoUrls
from openapi_client.models.photo_usage import PhotoUsage
from openapi_client.models.photo_visibility import PhotoVisibility
from typing import Optional, Set
from typing_extensions import Self

class Photo(BaseModel):
    """
    Photo
    """ # noqa: E501
    comments: Optional[GetFavoritesContextByID200ResponseCount] = None
    dates: Optional[PhotoDates] = None
    dateuploaded: Optional[StrictStr] = None
    description: Optional[GetFavoritesContextByID200ResponseCount] = None
    editability: Optional[PhotoEditability] = None
    farm: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    isfavorite: Optional[StrictBool] = None
    license: Optional[StrictStr] = None
    media: Optional[StrictStr] = None
    notes: Optional[PhotoNotes] = None
    originalsecret: Optional[StrictStr] = None
    owner: Optional[Owner] = None
    people: Optional[PhotoPeople] = None
    permissions: Optional[PhotoPermissions] = None
    publiceditability: Optional[PhotoEditability] = None
    rotation: Optional[StrictStr] = None
    safe: Optional[StrictBool] = None
    safety_level: Optional[StrictStr] = None
    secret: Optional[StrictStr] = None
    server: Optional[StrictStr] = None
    tags: Optional[PhotoTags] = None
    title: Optional[GetFavoritesContextByID200ResponseCount] = None
    urls: Optional[PhotoUrls] = None
    usage: Optional[PhotoUsage] = None
    views: Optional[StrictStr] = None
    visibility: Optional[PhotoVisibility] = None
    __properties: ClassVar[List[str]] = ["comments", "dates", "dateuploaded", "description", "editability", "farm", "id", "isfavorite", "license", "media", "notes", "originalsecret", "owner", "people", "permissions", "publiceditability", "rotation", "safe", "safety_level", "secret", "server", "tags", "title", "urls", "usage", "views", "visibility"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Photo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of comments
        if self.comments:
            _dict['comments'] = self.comments.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dates
        if self.dates:
            _dict['dates'] = self.dates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of editability
        if self.editability:
            _dict['editability'] = self.editability.to_dict()
        # override the default output from pydantic by calling `to_dict()` of notes
        if self.notes:
            _dict['notes'] = self.notes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of people
        if self.people:
            _dict['people'] = self.people.to_dict()
        # override the default output from pydantic by calling `to_dict()` of permissions
        if self.permissions:
            _dict['permissions'] = self.permissions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of publiceditability
        if self.publiceditability:
            _dict['publiceditability'] = self.publiceditability.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tags
        if self.tags:
            _dict['tags'] = self.tags.to_dict()
        # override the default output from pydantic by calling `to_dict()` of title
        if self.title:
            _dict['title'] = self.title.to_dict()
        # override the default output from pydantic by calling `to_dict()` of urls
        if self.urls:
            _dict['urls'] = self.urls.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usage
        if self.usage:
            _dict['usage'] = self.usage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of visibility
        if self.visibility:
            _dict['visibility'] = self.visibility.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Photo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comments": GetFavoritesContextByID200ResponseCount.from_dict(obj["comments"]) if obj.get("comments") is not None else None,
            "dates": PhotoDates.from_dict(obj["dates"]) if obj.get("dates") is not None else None,
            "dateuploaded": obj.get("dateuploaded"),
            "description": GetFavoritesContextByID200ResponseCount.from_dict(obj["description"]) if obj.get("description") is not None else None,
            "editability": PhotoEditability.from_dict(obj["editability"]) if obj.get("editability") is not None else None,
            "farm": obj.get("farm"),
            "id": obj.get("id"),
            "isfavorite": obj.get("isfavorite"),
            "license": obj.get("license"),
            "media": obj.get("media"),
            "notes": PhotoNotes.from_dict(obj["notes"]) if obj.get("notes") is not None else None,
            "originalsecret": obj.get("originalsecret"),
            "owner": Owner.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "people": PhotoPeople.from_dict(obj["people"]) if obj.get("people") is not None else None,
            "permissions": PhotoPermissions.from_dict(obj["permissions"]) if obj.get("permissions") is not None else None,
            "publiceditability": PhotoEditability.from_dict(obj["publiceditability"]) if obj.get("publiceditability") is not None else None,
            "rotation": obj.get("rotation"),
            "safe": obj.get("safe"),
            "safety_level": obj.get("safety_level"),
            "secret": obj.get("secret"),
            "server": obj.get("server"),
            "tags": PhotoTags.from_dict(obj["tags"]) if obj.get("tags") is not None else None,
            "title": GetFavoritesContextByID200ResponseCount.from_dict(obj["title"]) if obj.get("title") is not None else None,
            "urls": PhotoUrls.from_dict(obj["urls"]) if obj.get("urls") is not None else None,
            "usage": PhotoUsage.from_dict(obj["usage"]) if obj.get("usage") is not None else None,
            "views": obj.get("views"),
            "visibility": PhotoVisibility.from_dict(obj["visibility"]) if obj.get("visibility") is not None else None
        })
        return _obj



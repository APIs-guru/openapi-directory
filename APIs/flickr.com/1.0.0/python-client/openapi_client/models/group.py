# coding: utf-8

"""
    Flickr API Schema

    A subset of Flickr's API defined in Swagger format.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cover import Cover
from openapi_client.models.get_favorites_context_by_id200_response_count import GetFavoritesContextByID200ResponseCount
from openapi_client.models.group_blast import GroupBlast
from openapi_client.models.group_restrictions import GroupRestrictions
from openapi_client.models.group_roles import GroupRoles
from openapi_client.models.group_throttle import GroupThrottle
from openapi_client.models.photo_urls import PhotoURLs
from typing import Optional, Set
from typing_extensions import Self

class Group(BaseModel):
    """
    Group
    """ # noqa: E501
    blast: Optional[GroupBlast] = None
    cover: Optional[Cover] = None
    coverphoto_farm: Optional[StrictStr] = None
    coverphoto_server: Optional[StrictStr] = None
    coverphoto_url: Optional[PhotoURLs] = None
    description: Optional[GetFavoritesContextByID200ResponseCount] = None
    iconfarm: Optional[StrictStr] = None
    iconserver: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    is_admin: Optional[StrictBool] = None
    is_member: Optional[StrictBool] = None
    is_moderator: Optional[StrictBool] = None
    ispoolmoderated: Optional[StrictBool] = None
    lang: Optional[StrictStr] = None
    members: Optional[GetFavoritesContextByID200ResponseCount] = None
    name: Optional[GetFavoritesContextByID200ResponseCount] = None
    path_alias: Optional[StrictStr] = None
    pool_count: Optional[GetFavoritesContextByID200ResponseCount] = None
    pool_rows: Optional[StrictInt] = None
    privacy: Optional[GetFavoritesContextByID200ResponseCount] = None
    restrictions: Optional[GroupRestrictions] = None
    roles: Optional[GroupRoles] = None
    rules: Optional[GetFavoritesContextByID200ResponseCount] = None
    throttle: Optional[GroupThrottle] = None
    topic_count: Optional[GetFavoritesContextByID200ResponseCount] = None
    __properties: ClassVar[List[str]] = ["blast", "cover", "coverphoto_farm", "coverphoto_server", "coverphoto_url", "description", "iconfarm", "iconserver", "id", "is_admin", "is_member", "is_moderator", "ispoolmoderated", "lang", "members", "name", "path_alias", "pool_count", "pool_rows", "privacy", "restrictions", "roles", "rules", "throttle", "topic_count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Group from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of blast
        if self.blast:
            _dict['blast'] = self.blast.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cover
        if self.cover:
            _dict['cover'] = self.cover.to_dict()
        # override the default output from pydantic by calling `to_dict()` of coverphoto_url
        if self.coverphoto_url:
            _dict['coverphoto_url'] = self.coverphoto_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of members
        if self.members:
            _dict['members'] = self.members.to_dict()
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pool_count
        if self.pool_count:
            _dict['pool_count'] = self.pool_count.to_dict()
        # override the default output from pydantic by calling `to_dict()` of privacy
        if self.privacy:
            _dict['privacy'] = self.privacy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of restrictions
        if self.restrictions:
            _dict['restrictions'] = self.restrictions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of roles
        if self.roles:
            _dict['roles'] = self.roles.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rules
        if self.rules:
            _dict['rules'] = self.rules.to_dict()
        # override the default output from pydantic by calling `to_dict()` of throttle
        if self.throttle:
            _dict['throttle'] = self.throttle.to_dict()
        # override the default output from pydantic by calling `to_dict()` of topic_count
        if self.topic_count:
            _dict['topic_count'] = self.topic_count.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Group from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blast": GroupBlast.from_dict(obj["blast"]) if obj.get("blast") is not None else None,
            "cover": Cover.from_dict(obj["cover"]) if obj.get("cover") is not None else None,
            "coverphoto_farm": obj.get("coverphoto_farm"),
            "coverphoto_server": obj.get("coverphoto_server"),
            "coverphoto_url": PhotoURLs.from_dict(obj["coverphoto_url"]) if obj.get("coverphoto_url") is not None else None,
            "description": GetFavoritesContextByID200ResponseCount.from_dict(obj["description"]) if obj.get("description") is not None else None,
            "iconfarm": obj.get("iconfarm"),
            "iconserver": obj.get("iconserver"),
            "id": obj.get("id"),
            "is_admin": obj.get("is_admin"),
            "is_member": obj.get("is_member"),
            "is_moderator": obj.get("is_moderator"),
            "ispoolmoderated": obj.get("ispoolmoderated"),
            "lang": obj.get("lang"),
            "members": GetFavoritesContextByID200ResponseCount.from_dict(obj["members"]) if obj.get("members") is not None else None,
            "name": GetFavoritesContextByID200ResponseCount.from_dict(obj["name"]) if obj.get("name") is not None else None,
            "path_alias": obj.get("path_alias"),
            "pool_count": GetFavoritesContextByID200ResponseCount.from_dict(obj["pool_count"]) if obj.get("pool_count") is not None else None,
            "pool_rows": obj.get("pool_rows"),
            "privacy": GetFavoritesContextByID200ResponseCount.from_dict(obj["privacy"]) if obj.get("privacy") is not None else None,
            "restrictions": GroupRestrictions.from_dict(obj["restrictions"]) if obj.get("restrictions") is not None else None,
            "roles": GroupRoles.from_dict(obj["roles"]) if obj.get("roles") is not None else None,
            "rules": GetFavoritesContextByID200ResponseCount.from_dict(obj["rules"]) if obj.get("rules") is not None else None,
            "throttle": GroupThrottle.from_dict(obj["throttle"]) if obj.get("throttle") is not None else None,
            "topic_count": GetFavoritesContextByID200ResponseCount.from_dict(obj["topic_count"]) if obj.get("topic_count") is not None else None
        })
        return _obj



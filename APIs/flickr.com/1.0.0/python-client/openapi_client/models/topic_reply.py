# coding: utf-8

"""
    Flickr API Schema

    A subset of Flickr's API defined in Swagger format.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_favorites_context_by_id200_response_count import GetFavoritesContextByID200ResponseCount
from typing import Optional, Set
from typing_extensions import Self

class TopicReply(BaseModel):
    """
    TopicReply
    """ # noqa: E501
    author: Optional[StrictStr] = None
    author_is_deleted: Optional[StrictBool] = None
    author_path_alias: Optional[StrictStr] = None
    authorname: Optional[StrictStr] = None
    can_delete: Optional[StrictBool] = None
    can_edit: Optional[StrictBool] = None
    datecreate: Optional[StrictStr] = None
    iconfarm: Optional[StrictStr] = None
    iconserver: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    is_pro: Optional[StrictBool] = None
    lastedit: Optional[StrictStr] = None
    message: Optional[GetFavoritesContextByID200ResponseCount] = None
    __properties: ClassVar[List[str]] = ["author", "author_is_deleted", "author_path_alias", "authorname", "can_delete", "can_edit", "datecreate", "iconfarm", "iconserver", "id", "is_pro", "lastedit", "message"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TopicReply from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of message
        if self.message:
            _dict['message'] = self.message.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TopicReply from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "author": obj.get("author"),
            "author_is_deleted": obj.get("author_is_deleted"),
            "author_path_alias": obj.get("author_path_alias"),
            "authorname": obj.get("authorname"),
            "can_delete": obj.get("can_delete"),
            "can_edit": obj.get("can_edit"),
            "datecreate": obj.get("datecreate"),
            "iconfarm": obj.get("iconfarm"),
            "iconserver": obj.get("iconserver"),
            "id": obj.get("id"),
            "is_pro": obj.get("is_pro"),
            "lastedit": obj.get("lastedit"),
            "message": GetFavoritesContextByID200ResponseCount.from_dict(obj["message"]) if obj.get("message") is not None else None
        })
        return _obj



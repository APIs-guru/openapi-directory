# coding: utf-8

"""
    Flickr API Schema

    A subset of Flickr's API defined in Swagger format.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.get_group_by_id200_response import GetGroupByID200Response

class TestGetGroupByID200Response(unittest.TestCase):
    """GetGroupByID200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetGroupByID200Response:
        """Test GetGroupByID200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetGroupByID200Response`
        """
        model = GetGroupByID200Response()
        if include_optional:
            return GetGroupByID200Response(
                group = openapi_client.models.group.Group(
                    blast = openapi_client.models.group_blast.Group_blast(
                        _content = '', 
                        date_blast_added = '', 
                        user_id = '', ), 
                    cover = openapi_client.models.cover.Cover(
                        farm = '', 
                        id = '', 
                        isfamily = True, 
                        isfriend = True, 
                        ispublic = True, 
                        owner = '', 
                        secret = '', 
                        server = '', 
                        title = '', 
                        y = '', ), 
                    coverphoto_farm = '', 
                    coverphoto_server = '', 
                    coverphoto_url = openapi_client.models.photo_urls.PhotoURLs(
                        h = '', 
                        l = '', 
                        s = '', 
                        t = '', ), 
                    description = openapi_client.models.get_favorites_context_by_id_200_response_count.getFavoritesContextByID_200_response_count(
                        _content = '', ), 
                    iconfarm = '', 
                    iconserver = '', 
                    id = '', 
                    is_admin = True, 
                    is_member = True, 
                    is_moderator = True, 
                    ispoolmoderated = True, 
                    lang = '', 
                    members = openapi_client.models.get_favorites_context_by_id_200_response_count.getFavoritesContextByID_200_response_count(
                        _content = '', ), 
                    name = , 
                    path_alias = '', 
                    pool_count = , 
                    pool_rows = 56, 
                    privacy = , 
                    restrictions = openapi_client.models.group_restrictions.Group_restrictions(
                        art_ok = True, 
                        has_geo = True, 
                        images_ok = True, 
                        moderate_ok = True, 
                        photos_ok = True, 
                        restricted_ok = True, 
                        safe_ok = True, 
                        screens_ok = True, 
                        videos_ok = True, ), 
                    roles = openapi_client.models.group_roles.Group_roles(
                        admin = '', 
                        member = '', 
                        moderator = '', ), 
                    rules = , 
                    throttle = openapi_client.models.group_throttle.Group_throttle(
                        count = 56, 
                        mode = '', 
                        remaining = '', ), 
                    topic_count = , ),
                stat = ''
            )
        else:
            return GetGroupByID200Response(
        )
        """

    def testGetGroupByID200Response(self):
        """Test GetGroupByID200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

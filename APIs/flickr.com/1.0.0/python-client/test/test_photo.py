# coding: utf-8

"""
    Flickr API Schema

    A subset of Flickr's API defined in Swagger format.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.photo import Photo

class TestPhoto(unittest.TestCase):
    """Photo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Photo:
        """Test Photo
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Photo`
        """
        model = Photo()
        if include_optional:
            return Photo(
                comments = openapi_client.models.get_favorites_context_by_id_200_response_count.getFavoritesContextByID_200_response_count(
                    _content = '', ),
                dates = openapi_client.models.photo_dates.Photo_dates(
                    lastupdate = '', 
                    posted = '', 
                    taken = '', 
                    takengranularity = '', 
                    takenunknown = True, ),
                dateuploaded = '',
                description = openapi_client.models.get_favorites_context_by_id_200_response_count.getFavoritesContextByID_200_response_count(
                    _content = '', ),
                editability = openapi_client.models.photo_editability.Photo_editability(
                    canaddmeta = True, 
                    cancomment = True, ),
                farm = '',
                id = '',
                isfavorite = True,
                license = '',
                media = '',
                notes = openapi_client.models.photo_notes.Photo_notes(
                    note = [
                        openapi_client.models.note.Note(
                            description = '', )
                        ], ),
                originalsecret = '',
                owner = openapi_client.models.owner.Owner(
                    iconfarm = '', 
                    iconserver = '', 
                    is_ad_free = True, 
                    ispro = True, 
                    location = '', 
                    noindexfollow = True, 
                    nsid = '', 
                    path_alias = '', 
                    realname = '', 
                    username = '', ),
                people = openapi_client.models.photo_people.Photo_people(
                    haspeople = True, ),
                permissions = openapi_client.models.photo_permissions.Photo_permissions(
                    permaddmeta = '', 
                    permcomment = '', ),
                publiceditability = openapi_client.models.photo_editability.Photo_editability(
                    canaddmeta = True, 
                    cancomment = True, ),
                rotation = '',
                safe = True,
                safety_level = '',
                secret = '',
                server = '',
                tags = openapi_client.models.photo_tags.Photo_tags(
                    tag = [
                        openapi_client.models.tag.Tag(
                            _content = '', 
                            author = '', 
                            authorname = '', 
                            id = '', 
                            machine_tag = True, 
                            raw = '', )
                        ], ),
                title = openapi_client.models.get_favorites_context_by_id_200_response_count.getFavoritesContextByID_200_response_count(
                    _content = '', ),
                urls = openapi_client.models.photo_urls.Photo_urls(
                    url = [
                        openapi_client.models.url.URL(
                            _content = '', 
                            type = '', )
                        ], ),
                usage = openapi_client.models.photo_usage.Photo_usage(
                    canblog = True, 
                    candownload = True, 
                    canprint = True, 
                    canshare = True, ),
                views = '',
                visibility = openapi_client.models.photo_visibility.Photo_visibility(
                    isfamily = True, 
                    isfriend = True, 
                    ispublic = True, )
            )
        else:
            return Photo(
        )
        """

    def testPhoto(self):
        """Test Photo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

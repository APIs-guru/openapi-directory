# coding: utf-8

"""
    Flickr API Schema

    A subset of Flickr's API defined in Swagger format.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.person import Person

class TestPerson(unittest.TestCase):
    """Person unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Person:
        """Test Person
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Person`
        """
        model = Person()
        if include_optional:
            return Person(
                can_buy_pro = True,
                cover = openapi_client.models.cover.Cover(
                    farm = '', 
                    id = '', 
                    isfamily = True, 
                    isfriend = True, 
                    ispublic = True, 
                    owner = '', 
                    secret = '', 
                    server = '', 
                    title = '', 
                    y = '', ),
                coverphoto = openapi_client.models.photo_urls.PhotoURLs(
                    h = '', 
                    l = '', 
                    s = '', 
                    t = '', ),
                coverphoto_farm = '',
                coverphoto_server = '',
                description = openapi_client.models.get_favorites_context_by_id_200_response_count.getFavoritesContextByID_200_response_count(
                    _content = '', ),
                disable_keyboard_shortcuts = openapi_client.models.get_favorites_context_by_id_200_response_count.getFavoritesContextByID_200_response_count(
                    _content = '', ),
                expire = True,
                has_stats = True,
                iconfarm = '',
                iconserver = '',
                id = '',
                is_ad_free = True,
                ispro = True,
                location = openapi_client.models.get_favorites_context_by_id_200_response_count.getFavoritesContextByID_200_response_count(
                    _content = '', ),
                mbox_sha1sum = openapi_client.models.get_favorites_context_by_id_200_response_count.getFavoritesContextByID_200_response_count(
                    _content = '', ),
                mobileurl = openapi_client.models.get_favorites_context_by_id_200_response_count.getFavoritesContextByID_200_response_count(
                    _content = '', ),
                nsid = '',
                path_alias = '',
                photos = openapi_client.models.person_photos.Person_photos(
                    count = openapi_client.models.get_favorites_context_by_id_200_response_count.getFavoritesContextByID_200_response_count(
                        _content = '', ), 
                    firstdate = openapi_client.models.get_favorites_context_by_id_200_response_count.getFavoritesContextByID_200_response_count(
                        _content = '', ), 
                    firstdatetaken = , 
                    views = , ),
                photosurl = openapi_client.models.get_favorites_context_by_id_200_response_count.getFavoritesContextByID_200_response_count(
                    _content = '', ),
                profileurl = openapi_client.models.get_favorites_context_by_id_200_response_count.getFavoritesContextByID_200_response_count(
                    _content = '', ),
                realname = openapi_client.models.get_favorites_context_by_id_200_response_count.getFavoritesContextByID_200_response_count(
                    _content = '', ),
                timezone = openapi_client.models.person_timezone.Person_timezone(
                    label = '', 
                    offset = '', 
                    timezone_id = '', ),
                unread_messages = openapi_client.models.get_favorites_context_by_id_200_response_count.getFavoritesContextByID_200_response_count(
                    _content = '', ),
                user_secret = '',
                username = openapi_client.models.get_favorites_context_by_id_200_response_count.getFavoritesContextByID_200_response_count(
                    _content = '', ),
                yintl = ''
            )
        else:
            return Person(
        )
        """

    def testPerson(self):
        """Test Person"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

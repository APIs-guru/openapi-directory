# coding: utf-8

"""
    Flickr API Schema

    A subset of Flickr's API defined in Swagger format.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.get_photo_exif_by_id200_response_photo import GetPhotoExifByID200ResponsePhoto

class TestGetPhotoExifByID200ResponsePhoto(unittest.TestCase):
    """GetPhotoExifByID200ResponsePhoto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetPhotoExifByID200ResponsePhoto:
        """Test GetPhotoExifByID200ResponsePhoto
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetPhotoExifByID200ResponsePhoto`
        """
        model = GetPhotoExifByID200ResponsePhoto()
        if include_optional:
            return GetPhotoExifByID200ResponsePhoto(
                camera = '',
                exif = [
                    openapi_client.models.get_photo_exif_by_id_200_response_photo_exif_inner.getPhotoExifByID_200_response_photo_exif_inner(
                        label = '', 
                        raw = openapi_client.models.get_favorites_context_by_id_200_response_count.getFavoritesContextByID_200_response_count(
                            _content = '', ), 
                        tag = '', 
                        tagspace = '', 
                        tagspaceid = '', )
                    ],
                farm = '',
                id = '',
                secret = '',
                server = ''
            )
        else:
            return GetPhotoExifByID200ResponsePhoto(
        )
        """

    def testGetPhotoExifByID200ResponsePhoto(self):
        """Test GetPhotoExifByID200ResponsePhoto"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

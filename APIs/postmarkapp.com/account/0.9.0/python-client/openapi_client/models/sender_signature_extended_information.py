# coding: utf-8

"""
    Postmark Account-level API

    Postmark makes sending and receiving email incredibly easy. The Account-level API allows users to configure all Servers, Domains, and Sender Signatures associated with an Account. 

    The version of the OpenAPI document: 0.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SenderSignatureExtendedInformation(BaseModel):
    """
    
    """ # noqa: E501
    confirmed: Optional[StrictBool] = Field(default=None, alias="Confirmed")
    dkim_host: Optional[StrictStr] = Field(default=None, alias="DKIMHost")
    dkim_pending_host: Optional[StrictStr] = Field(default=None, alias="DKIMPendingHost")
    dkim_pending_text_value: Optional[StrictStr] = Field(default=None, alias="DKIMPendingTextValue")
    dkim_revoked_host: Optional[StrictStr] = Field(default=None, alias="DKIMRevokedHost")
    dkim_revoked_text_value: Optional[StrictStr] = Field(default=None, alias="DKIMRevokedTextValue")
    dkim_test_value: Optional[StrictStr] = Field(default=None, alias="DKIMTestValue")
    dkim_update_status: Optional[StrictStr] = Field(default=None, alias="DKIMUpdateStatus")
    dkim_verified: Optional[StrictBool] = Field(default=None, alias="DKIMVerified")
    domain: Optional[StrictStr] = Field(default=None, alias="Domain")
    email_address: Optional[StrictStr] = Field(default=None, alias="EmailAddress")
    id: Optional[StrictInt] = Field(default=None, alias="ID")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    reply_to_email_address: Optional[StrictStr] = Field(default=None, alias="ReplyToEmailAddress")
    return_path_domain: Optional[StrictStr] = Field(default=None, alias="ReturnPathDomain")
    return_path_domain_cname_value: Optional[StrictStr] = Field(default=None, alias="ReturnPathDomainCNAMEValue")
    return_path_domain_verified: Optional[StrictBool] = Field(default=None, alias="ReturnPathDomainVerified")
    spf_host: Optional[StrictStr] = Field(default=None, alias="SPFHost")
    spf_text_value: Optional[StrictStr] = Field(default=None, alias="SPFTextValue")
    spf_verified: Optional[StrictBool] = Field(default=None, alias="SPFVerified")
    safe_to_remove_revoked_key_from_dns: Optional[StrictBool] = Field(default=None, alias="SafeToRemoveRevokedKeyFromDNS")
    weak_dkim: Optional[StrictBool] = Field(default=None, alias="WeakDKIM")
    __properties: ClassVar[List[str]] = ["Confirmed", "DKIMHost", "DKIMPendingHost", "DKIMPendingTextValue", "DKIMRevokedHost", "DKIMRevokedTextValue", "DKIMTestValue", "DKIMUpdateStatus", "DKIMVerified", "Domain", "EmailAddress", "ID", "Name", "ReplyToEmailAddress", "ReturnPathDomain", "ReturnPathDomainCNAMEValue", "ReturnPathDomainVerified", "SPFHost", "SPFTextValue", "SPFVerified", "SafeToRemoveRevokedKeyFromDNS", "WeakDKIM"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SenderSignatureExtendedInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SenderSignatureExtendedInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Confirmed": obj.get("Confirmed"),
            "DKIMHost": obj.get("DKIMHost"),
            "DKIMPendingHost": obj.get("DKIMPendingHost"),
            "DKIMPendingTextValue": obj.get("DKIMPendingTextValue"),
            "DKIMRevokedHost": obj.get("DKIMRevokedHost"),
            "DKIMRevokedTextValue": obj.get("DKIMRevokedTextValue"),
            "DKIMTestValue": obj.get("DKIMTestValue"),
            "DKIMUpdateStatus": obj.get("DKIMUpdateStatus"),
            "DKIMVerified": obj.get("DKIMVerified"),
            "Domain": obj.get("Domain"),
            "EmailAddress": obj.get("EmailAddress"),
            "ID": obj.get("ID"),
            "Name": obj.get("Name"),
            "ReplyToEmailAddress": obj.get("ReplyToEmailAddress"),
            "ReturnPathDomain": obj.get("ReturnPathDomain"),
            "ReturnPathDomainCNAMEValue": obj.get("ReturnPathDomainCNAMEValue"),
            "ReturnPathDomainVerified": obj.get("ReturnPathDomainVerified"),
            "SPFHost": obj.get("SPFHost"),
            "SPFTextValue": obj.get("SPFTextValue"),
            "SPFVerified": obj.get("SPFVerified"),
            "SafeToRemoveRevokedKeyFromDNS": obj.get("SafeToRemoveRevokedKeyFromDNS"),
            "WeakDKIM": obj.get("WeakDKIM")
        })
        return _obj



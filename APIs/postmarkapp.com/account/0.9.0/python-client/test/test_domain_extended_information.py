# coding: utf-8

"""
    Postmark Account-level API

    Postmark makes sending and receiving email incredibly easy. The Account-level API allows users to configure all Servers, Domains, and Sender Signatures associated with an Account. 

    The version of the OpenAPI document: 0.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.domain_extended_information import DomainExtendedInformation

class TestDomainExtendedInformation(unittest.TestCase):
    """DomainExtendedInformation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DomainExtendedInformation:
        """Test DomainExtendedInformation
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DomainExtendedInformation`
        """
        model = DomainExtendedInformation()
        if include_optional:
            return DomainExtendedInformation(
                dkim_host = '',
                dkim_pending_host = '',
                dkim_pending_text_value = '',
                dkim_revoked_host = '',
                dkim_revoked_text_value = '',
                dkim_test_value = '',
                dkim_update_status = '',
                dkim_verified = True,
                id = 56,
                name = '',
                return_path_domain = '',
                return_path_domain_cname_value = '',
                return_path_domain_verified = True,
                spf_host = '',
                spf_text_value = '',
                spf_verified = True,
                safe_to_remove_revoked_key_from_dns = True,
                weak_dkim = True
            )
        else:
            return DomainExtendedInformation(
        )
        """

    def testDomainExtendedInformation(self):
        """Test DomainExtendedInformation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

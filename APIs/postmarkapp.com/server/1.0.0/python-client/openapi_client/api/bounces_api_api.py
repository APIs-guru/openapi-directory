# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.bounce_activation_response import BounceActivationResponse
from openapi_client.models.bounce_dump_response import BounceDumpResponse
from openapi_client.models.bounce_info_response import BounceInfoResponse
from openapi_client.models.bounce_search_response import BounceSearchResponse
from openapi_client.models.delivery_stats_response import DeliveryStatsResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class BouncesAPIApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def activate_bounce(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        bounceid: Annotated[StrictInt, Field(description="The ID of the Bounce to activate.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BounceActivationResponse:
        """Activate a bounce


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param bounceid: The ID of the Bounce to activate. (required)
        :type bounceid: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._activate_bounce_serialize(
            x_postmark_server_token=x_postmark_server_token,
            bounceid=bounceid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BounceActivationResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def activate_bounce_with_http_info(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        bounceid: Annotated[StrictInt, Field(description="The ID of the Bounce to activate.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BounceActivationResponse]:
        """Activate a bounce


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param bounceid: The ID of the Bounce to activate. (required)
        :type bounceid: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._activate_bounce_serialize(
            x_postmark_server_token=x_postmark_server_token,
            bounceid=bounceid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BounceActivationResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def activate_bounce_without_preload_content(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        bounceid: Annotated[StrictInt, Field(description="The ID of the Bounce to activate.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Activate a bounce


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param bounceid: The ID of the Bounce to activate. (required)
        :type bounceid: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._activate_bounce_serialize(
            x_postmark_server_token=x_postmark_server_token,
            bounceid=bounceid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BounceActivationResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _activate_bounce_serialize(
        self,
        x_postmark_server_token,
        bounceid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if bounceid is not None:
            _path_params['bounceid'] = bounceid
        # process the query parameters
        # process the header parameters
        if x_postmark_server_token is not None:
            _header_params['X-Postmark-Server-Token'] = x_postmark_server_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/bounces/{bounceid}/activate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def bounces_bounceid_dump_get(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        bounceid: Annotated[StrictInt, Field(description="The ID for the bounce dump to retrieve.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BounceDumpResponse:
        """Get bounce dump


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param bounceid: The ID for the bounce dump to retrieve. (required)
        :type bounceid: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bounces_bounceid_dump_get_serialize(
            x_postmark_server_token=x_postmark_server_token,
            bounceid=bounceid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BounceDumpResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def bounces_bounceid_dump_get_with_http_info(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        bounceid: Annotated[StrictInt, Field(description="The ID for the bounce dump to retrieve.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BounceDumpResponse]:
        """Get bounce dump


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param bounceid: The ID for the bounce dump to retrieve. (required)
        :type bounceid: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bounces_bounceid_dump_get_serialize(
            x_postmark_server_token=x_postmark_server_token,
            bounceid=bounceid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BounceDumpResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def bounces_bounceid_dump_get_without_preload_content(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        bounceid: Annotated[StrictInt, Field(description="The ID for the bounce dump to retrieve.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get bounce dump


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param bounceid: The ID for the bounce dump to retrieve. (required)
        :type bounceid: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bounces_bounceid_dump_get_serialize(
            x_postmark_server_token=x_postmark_server_token,
            bounceid=bounceid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BounceDumpResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _bounces_bounceid_dump_get_serialize(
        self,
        x_postmark_server_token,
        bounceid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if bounceid is not None:
            _path_params['bounceid'] = bounceid
        # process the query parameters
        # process the header parameters
        if x_postmark_server_token is not None:
            _header_params['X-Postmark-Server-Token'] = x_postmark_server_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/bounces/{bounceid}/dump',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_bounces(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        count: Annotated[int, Field(le=500, strict=True, description="Number of bounces to return per request. Max 500.")],
        offset: Annotated[StrictInt, Field(description="Number of bounces to skip.")],
        type: Annotated[Optional[StrictStr], Field(description="Filter by type of bounce")] = None,
        inactive: Annotated[Optional[StrictBool], Field(description="Filter by emails that were deactivated by Postmark due to the bounce. Set to true or false. If this isn't specified it will return both active and inactive.")] = None,
        email_filter: Annotated[Optional[StrictStr], Field(description="Filter by email address")] = None,
        message_id: Annotated[Optional[StrictStr], Field(description="Filter by messageID")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        todate: Annotated[Optional[date], Field(description="Filter messages up to the date specified. e.g. `2014-02-01`")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter messages starting from the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BounceSearchResponse:
        """Get bounces


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param count: Number of bounces to return per request. Max 500. (required)
        :type count: int
        :param offset: Number of bounces to skip. (required)
        :type offset: int
        :param type: Filter by type of bounce
        :type type: str
        :param inactive: Filter by emails that were deactivated by Postmark due to the bounce. Set to true or false. If this isn't specified it will return both active and inactive.
        :type inactive: bool
        :param email_filter: Filter by email address
        :type email_filter: str
        :param message_id: Filter by messageID
        :type message_id: str
        :param tag: Filter by tag
        :type tag: str
        :param todate: Filter messages up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param fromdate: Filter messages starting from the date specified. e.g. `2014-02-01`
        :type fromdate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_bounces_serialize(
            x_postmark_server_token=x_postmark_server_token,
            count=count,
            offset=offset,
            type=type,
            inactive=inactive,
            email_filter=email_filter,
            message_id=message_id,
            tag=tag,
            todate=todate,
            fromdate=fromdate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BounceSearchResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_bounces_with_http_info(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        count: Annotated[int, Field(le=500, strict=True, description="Number of bounces to return per request. Max 500.")],
        offset: Annotated[StrictInt, Field(description="Number of bounces to skip.")],
        type: Annotated[Optional[StrictStr], Field(description="Filter by type of bounce")] = None,
        inactive: Annotated[Optional[StrictBool], Field(description="Filter by emails that were deactivated by Postmark due to the bounce. Set to true or false. If this isn't specified it will return both active and inactive.")] = None,
        email_filter: Annotated[Optional[StrictStr], Field(description="Filter by email address")] = None,
        message_id: Annotated[Optional[StrictStr], Field(description="Filter by messageID")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        todate: Annotated[Optional[date], Field(description="Filter messages up to the date specified. e.g. `2014-02-01`")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter messages starting from the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BounceSearchResponse]:
        """Get bounces


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param count: Number of bounces to return per request. Max 500. (required)
        :type count: int
        :param offset: Number of bounces to skip. (required)
        :type offset: int
        :param type: Filter by type of bounce
        :type type: str
        :param inactive: Filter by emails that were deactivated by Postmark due to the bounce. Set to true or false. If this isn't specified it will return both active and inactive.
        :type inactive: bool
        :param email_filter: Filter by email address
        :type email_filter: str
        :param message_id: Filter by messageID
        :type message_id: str
        :param tag: Filter by tag
        :type tag: str
        :param todate: Filter messages up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param fromdate: Filter messages starting from the date specified. e.g. `2014-02-01`
        :type fromdate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_bounces_serialize(
            x_postmark_server_token=x_postmark_server_token,
            count=count,
            offset=offset,
            type=type,
            inactive=inactive,
            email_filter=email_filter,
            message_id=message_id,
            tag=tag,
            todate=todate,
            fromdate=fromdate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BounceSearchResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_bounces_without_preload_content(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        count: Annotated[int, Field(le=500, strict=True, description="Number of bounces to return per request. Max 500.")],
        offset: Annotated[StrictInt, Field(description="Number of bounces to skip.")],
        type: Annotated[Optional[StrictStr], Field(description="Filter by type of bounce")] = None,
        inactive: Annotated[Optional[StrictBool], Field(description="Filter by emails that were deactivated by Postmark due to the bounce. Set to true or false. If this isn't specified it will return both active and inactive.")] = None,
        email_filter: Annotated[Optional[StrictStr], Field(description="Filter by email address")] = None,
        message_id: Annotated[Optional[StrictStr], Field(description="Filter by messageID")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        todate: Annotated[Optional[date], Field(description="Filter messages up to the date specified. e.g. `2014-02-01`")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter messages starting from the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get bounces


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param count: Number of bounces to return per request. Max 500. (required)
        :type count: int
        :param offset: Number of bounces to skip. (required)
        :type offset: int
        :param type: Filter by type of bounce
        :type type: str
        :param inactive: Filter by emails that were deactivated by Postmark due to the bounce. Set to true or false. If this isn't specified it will return both active and inactive.
        :type inactive: bool
        :param email_filter: Filter by email address
        :type email_filter: str
        :param message_id: Filter by messageID
        :type message_id: str
        :param tag: Filter by tag
        :type tag: str
        :param todate: Filter messages up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param fromdate: Filter messages starting from the date specified. e.g. `2014-02-01`
        :type fromdate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_bounces_serialize(
            x_postmark_server_token=x_postmark_server_token,
            count=count,
            offset=offset,
            type=type,
            inactive=inactive,
            email_filter=email_filter,
            message_id=message_id,
            tag=tag,
            todate=todate,
            fromdate=fromdate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BounceSearchResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_bounces_serialize(
        self,
        x_postmark_server_token,
        count,
        offset,
        type,
        inactive,
        email_filter,
        message_id,
        tag,
        todate,
        fromdate,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if count is not None:
            
            _query_params.append(('count', count))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        if inactive is not None:
            
            _query_params.append(('inactive', inactive))
            
        if email_filter is not None:
            
            _query_params.append(('emailFilter', email_filter))
            
        if message_id is not None:
            
            _query_params.append(('messageID', message_id))
            
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if todate is not None:
            if isinstance(todate, date):
                _query_params.append(
                    (
                        'todate',
                        todate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('todate', todate))
            
        if fromdate is not None:
            if isinstance(fromdate, date):
                _query_params.append(
                    (
                        'fromdate',
                        fromdate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('fromdate', fromdate))
            
        # process the header parameters
        if x_postmark_server_token is not None:
            _header_params['X-Postmark-Server-Token'] = x_postmark_server_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/bounces',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_delivery_stats(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeliveryStatsResponse:
        """Get delivery stats


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_delivery_stats_serialize(
            x_postmark_server_token=x_postmark_server_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeliveryStatsResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_delivery_stats_with_http_info(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeliveryStatsResponse]:
        """Get delivery stats


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_delivery_stats_serialize(
            x_postmark_server_token=x_postmark_server_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeliveryStatsResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_delivery_stats_without_preload_content(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get delivery stats


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_delivery_stats_serialize(
            x_postmark_server_token=x_postmark_server_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeliveryStatsResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_delivery_stats_serialize(
        self,
        x_postmark_server_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_postmark_server_token is not None:
            _header_params['X-Postmark-Server-Token'] = x_postmark_server_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/deliverystats',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_single_bounce(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        bounceid: Annotated[StrictInt, Field(description="The ID of the bounce to retrieve.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BounceInfoResponse:
        """Get a single bounce


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param bounceid: The ID of the bounce to retrieve. (required)
        :type bounceid: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_single_bounce_serialize(
            x_postmark_server_token=x_postmark_server_token,
            bounceid=bounceid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BounceInfoResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_single_bounce_with_http_info(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        bounceid: Annotated[StrictInt, Field(description="The ID of the bounce to retrieve.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BounceInfoResponse]:
        """Get a single bounce


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param bounceid: The ID of the bounce to retrieve. (required)
        :type bounceid: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_single_bounce_serialize(
            x_postmark_server_token=x_postmark_server_token,
            bounceid=bounceid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BounceInfoResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_single_bounce_without_preload_content(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        bounceid: Annotated[StrictInt, Field(description="The ID of the bounce to retrieve.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a single bounce


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param bounceid: The ID of the bounce to retrieve. (required)
        :type bounceid: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_single_bounce_serialize(
            x_postmark_server_token=x_postmark_server_token,
            bounceid=bounceid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BounceInfoResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_single_bounce_serialize(
        self,
        x_postmark_server_token,
        bounceid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if bounceid is not None:
            _path_params['bounceid'] = bounceid
        # process the query parameters
        # process the header parameters
        if x_postmark_server_token is not None:
            _header_params['X-Postmark-Server-Token'] = x_postmark_server_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/bounces/{bounceid}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



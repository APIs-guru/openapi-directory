# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.inbound_message_full_details_response import InboundMessageFullDetailsResponse
from openapi_client.models.inbound_search_response import InboundSearchResponse
from openapi_client.models.message_click_search_response import MessageClickSearchResponse
from openapi_client.models.message_open_search_response import MessageOpenSearchResponse
from openapi_client.models.outbound_message_details_response import OutboundMessageDetailsResponse
from openapi_client.models.outbound_message_dump_response import OutboundMessageDumpResponse
from openapi_client.models.outbound_search_response import OutboundSearchResponse
from openapi_client.models.standard_postmark_response import StandardPostmarkResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class MessagesAPIApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def bypass_rules_for_inbound_message(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        messageid: Annotated[StrictStr, Field(description="The ID of the message which should bypass inbound rules.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> StandardPostmarkResponse:
        """Bypass rules for a blocked inbound message


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param messageid: The ID of the message which should bypass inbound rules. (required)
        :type messageid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bypass_rules_for_inbound_message_serialize(
            x_postmark_server_token=x_postmark_server_token,
            messageid=messageid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StandardPostmarkResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def bypass_rules_for_inbound_message_with_http_info(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        messageid: Annotated[StrictStr, Field(description="The ID of the message which should bypass inbound rules.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[StandardPostmarkResponse]:
        """Bypass rules for a blocked inbound message


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param messageid: The ID of the message which should bypass inbound rules. (required)
        :type messageid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bypass_rules_for_inbound_message_serialize(
            x_postmark_server_token=x_postmark_server_token,
            messageid=messageid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StandardPostmarkResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def bypass_rules_for_inbound_message_without_preload_content(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        messageid: Annotated[StrictStr, Field(description="The ID of the message which should bypass inbound rules.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Bypass rules for a blocked inbound message


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param messageid: The ID of the message which should bypass inbound rules. (required)
        :type messageid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bypass_rules_for_inbound_message_serialize(
            x_postmark_server_token=x_postmark_server_token,
            messageid=messageid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StandardPostmarkResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _bypass_rules_for_inbound_message_serialize(
        self,
        x_postmark_server_token,
        messageid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if messageid is not None:
            _path_params['messageid'] = messageid
        # process the query parameters
        # process the header parameters
        if x_postmark_server_token is not None:
            _header_params['X-Postmark-Server-Token'] = x_postmark_server_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/messages/inbound/{messageid}/bypass',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_clicks_for_single_outbound_message(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        messageid: Annotated[StrictStr, Field(description="The ID of the Outbound Message for which click statistics should be retrieved.")],
        count: Annotated[int, Field(le=500, strict=True, ge=1, description="Number of message clicks to return per request. Max 500.")],
        offset: Annotated[int, Field(strict=True, ge=0, description="Number of messages to skip.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MessageClickSearchResponse:
        """Retrieve Message Clicks


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param messageid: The ID of the Outbound Message for which click statistics should be retrieved. (required)
        :type messageid: str
        :param count: Number of message clicks to return per request. Max 500. (required)
        :type count: int
        :param offset: Number of messages to skip. (required)
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_clicks_for_single_outbound_message_serialize(
            x_postmark_server_token=x_postmark_server_token,
            messageid=messageid,
            count=count,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MessageClickSearchResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_clicks_for_single_outbound_message_with_http_info(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        messageid: Annotated[StrictStr, Field(description="The ID of the Outbound Message for which click statistics should be retrieved.")],
        count: Annotated[int, Field(le=500, strict=True, ge=1, description="Number of message clicks to return per request. Max 500.")],
        offset: Annotated[int, Field(strict=True, ge=0, description="Number of messages to skip.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MessageClickSearchResponse]:
        """Retrieve Message Clicks


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param messageid: The ID of the Outbound Message for which click statistics should be retrieved. (required)
        :type messageid: str
        :param count: Number of message clicks to return per request. Max 500. (required)
        :type count: int
        :param offset: Number of messages to skip. (required)
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_clicks_for_single_outbound_message_serialize(
            x_postmark_server_token=x_postmark_server_token,
            messageid=messageid,
            count=count,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MessageClickSearchResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_clicks_for_single_outbound_message_without_preload_content(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        messageid: Annotated[StrictStr, Field(description="The ID of the Outbound Message for which click statistics should be retrieved.")],
        count: Annotated[int, Field(le=500, strict=True, ge=1, description="Number of message clicks to return per request. Max 500.")],
        offset: Annotated[int, Field(strict=True, ge=0, description="Number of messages to skip.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve Message Clicks


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param messageid: The ID of the Outbound Message for which click statistics should be retrieved. (required)
        :type messageid: str
        :param count: Number of message clicks to return per request. Max 500. (required)
        :type count: int
        :param offset: Number of messages to skip. (required)
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_clicks_for_single_outbound_message_serialize(
            x_postmark_server_token=x_postmark_server_token,
            messageid=messageid,
            count=count,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MessageClickSearchResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_clicks_for_single_outbound_message_serialize(
        self,
        x_postmark_server_token,
        messageid,
        count,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if messageid is not None:
            _path_params['messageid'] = messageid
        # process the query parameters
        if count is not None:
            
            _query_params.append(('count', count))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        if x_postmark_server_token is not None:
            _header_params['X-Postmark-Server-Token'] = x_postmark_server_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/messages/outbound/clicks/{messageid}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_inbound_message_details(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        messageid: Annotated[StrictStr, Field(description="The ID of the message for which to details will be retrieved.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> InboundMessageFullDetailsResponse:
        """Inbound message details


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param messageid: The ID of the message for which to details will be retrieved. (required)
        :type messageid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_inbound_message_details_serialize(
            x_postmark_server_token=x_postmark_server_token,
            messageid=messageid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InboundMessageFullDetailsResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_inbound_message_details_with_http_info(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        messageid: Annotated[StrictStr, Field(description="The ID of the message for which to details will be retrieved.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[InboundMessageFullDetailsResponse]:
        """Inbound message details


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param messageid: The ID of the message for which to details will be retrieved. (required)
        :type messageid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_inbound_message_details_serialize(
            x_postmark_server_token=x_postmark_server_token,
            messageid=messageid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InboundMessageFullDetailsResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_inbound_message_details_without_preload_content(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        messageid: Annotated[StrictStr, Field(description="The ID of the message for which to details will be retrieved.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Inbound message details


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param messageid: The ID of the message for which to details will be retrieved. (required)
        :type messageid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_inbound_message_details_serialize(
            x_postmark_server_token=x_postmark_server_token,
            messageid=messageid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InboundMessageFullDetailsResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_inbound_message_details_serialize(
        self,
        x_postmark_server_token,
        messageid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if messageid is not None:
            _path_params['messageid'] = messageid
        # process the query parameters
        # process the header parameters
        if x_postmark_server_token is not None:
            _header_params['X-Postmark-Server-Token'] = x_postmark_server_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/messages/inbound/{messageid}/details',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_opens_for_single_outbound_message(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        messageid: Annotated[StrictStr, Field(description="The ID of the Outbound Message for which open statistics should be retrieved.")],
        count: Annotated[int, Field(le=500, strict=True, ge=1, description="Number of message opens to return per request. Max 500.")],
        offset: Annotated[int, Field(strict=True, ge=0, description="Number of messages to skip.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MessageOpenSearchResponse:
        """Retrieve Message Opens


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param messageid: The ID of the Outbound Message for which open statistics should be retrieved. (required)
        :type messageid: str
        :param count: Number of message opens to return per request. Max 500. (required)
        :type count: int
        :param offset: Number of messages to skip. (required)
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_opens_for_single_outbound_message_serialize(
            x_postmark_server_token=x_postmark_server_token,
            messageid=messageid,
            count=count,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MessageOpenSearchResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_opens_for_single_outbound_message_with_http_info(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        messageid: Annotated[StrictStr, Field(description="The ID of the Outbound Message for which open statistics should be retrieved.")],
        count: Annotated[int, Field(le=500, strict=True, ge=1, description="Number of message opens to return per request. Max 500.")],
        offset: Annotated[int, Field(strict=True, ge=0, description="Number of messages to skip.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MessageOpenSearchResponse]:
        """Retrieve Message Opens


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param messageid: The ID of the Outbound Message for which open statistics should be retrieved. (required)
        :type messageid: str
        :param count: Number of message opens to return per request. Max 500. (required)
        :type count: int
        :param offset: Number of messages to skip. (required)
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_opens_for_single_outbound_message_serialize(
            x_postmark_server_token=x_postmark_server_token,
            messageid=messageid,
            count=count,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MessageOpenSearchResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_opens_for_single_outbound_message_without_preload_content(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        messageid: Annotated[StrictStr, Field(description="The ID of the Outbound Message for which open statistics should be retrieved.")],
        count: Annotated[int, Field(le=500, strict=True, ge=1, description="Number of message opens to return per request. Max 500.")],
        offset: Annotated[int, Field(strict=True, ge=0, description="Number of messages to skip.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve Message Opens


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param messageid: The ID of the Outbound Message for which open statistics should be retrieved. (required)
        :type messageid: str
        :param count: Number of message opens to return per request. Max 500. (required)
        :type count: int
        :param offset: Number of messages to skip. (required)
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_opens_for_single_outbound_message_serialize(
            x_postmark_server_token=x_postmark_server_token,
            messageid=messageid,
            count=count,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MessageOpenSearchResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_opens_for_single_outbound_message_serialize(
        self,
        x_postmark_server_token,
        messageid,
        count,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if messageid is not None:
            _path_params['messageid'] = messageid
        # process the query parameters
        if count is not None:
            
            _query_params.append(('count', count))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        if x_postmark_server_token is not None:
            _header_params['X-Postmark-Server-Token'] = x_postmark_server_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/messages/outbound/opens/{messageid}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_outbound_message_details(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        messageid: Annotated[StrictStr, Field(description="The ID of the message for which to retrieve details.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OutboundMessageDetailsResponse:
        """Outbound message details


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param messageid: The ID of the message for which to retrieve details. (required)
        :type messageid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_message_details_serialize(
            x_postmark_server_token=x_postmark_server_token,
            messageid=messageid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OutboundMessageDetailsResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_outbound_message_details_with_http_info(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        messageid: Annotated[StrictStr, Field(description="The ID of the message for which to retrieve details.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OutboundMessageDetailsResponse]:
        """Outbound message details


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param messageid: The ID of the message for which to retrieve details. (required)
        :type messageid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_message_details_serialize(
            x_postmark_server_token=x_postmark_server_token,
            messageid=messageid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OutboundMessageDetailsResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_outbound_message_details_without_preload_content(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        messageid: Annotated[StrictStr, Field(description="The ID of the message for which to retrieve details.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Outbound message details


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param messageid: The ID of the message for which to retrieve details. (required)
        :type messageid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_message_details_serialize(
            x_postmark_server_token=x_postmark_server_token,
            messageid=messageid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OutboundMessageDetailsResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_outbound_message_details_serialize(
        self,
        x_postmark_server_token,
        messageid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if messageid is not None:
            _path_params['messageid'] = messageid
        # process the query parameters
        # process the header parameters
        if x_postmark_server_token is not None:
            _header_params['X-Postmark-Server-Token'] = x_postmark_server_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/messages/outbound/{messageid}/details',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_outbound_message_dump(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        messageid: Annotated[StrictStr, Field(description="The ID of the message for which to retrieve a dump.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OutboundMessageDumpResponse:
        """Outbound message dump


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param messageid: The ID of the message for which to retrieve a dump. (required)
        :type messageid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_message_dump_serialize(
            x_postmark_server_token=x_postmark_server_token,
            messageid=messageid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OutboundMessageDumpResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_outbound_message_dump_with_http_info(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        messageid: Annotated[StrictStr, Field(description="The ID of the message for which to retrieve a dump.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OutboundMessageDumpResponse]:
        """Outbound message dump


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param messageid: The ID of the message for which to retrieve a dump. (required)
        :type messageid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_message_dump_serialize(
            x_postmark_server_token=x_postmark_server_token,
            messageid=messageid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OutboundMessageDumpResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_outbound_message_dump_without_preload_content(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        messageid: Annotated[StrictStr, Field(description="The ID of the message for which to retrieve a dump.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Outbound message dump


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param messageid: The ID of the message for which to retrieve a dump. (required)
        :type messageid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_message_dump_serialize(
            x_postmark_server_token=x_postmark_server_token,
            messageid=messageid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OutboundMessageDumpResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_outbound_message_dump_serialize(
        self,
        x_postmark_server_token,
        messageid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if messageid is not None:
            _path_params['messageid'] = messageid
        # process the query parameters
        # process the header parameters
        if x_postmark_server_token is not None:
            _header_params['X-Postmark-Server-Token'] = x_postmark_server_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/messages/outbound/{messageid}/dump',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def retry_inbound_message_processing(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        messageid: Annotated[StrictStr, Field(description="The ID of the inbound message on which we should retry processing.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> StandardPostmarkResponse:
        """Retry a failed inbound message for processing


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param messageid: The ID of the inbound message on which we should retry processing. (required)
        :type messageid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retry_inbound_message_processing_serialize(
            x_postmark_server_token=x_postmark_server_token,
            messageid=messageid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StandardPostmarkResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def retry_inbound_message_processing_with_http_info(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        messageid: Annotated[StrictStr, Field(description="The ID of the inbound message on which we should retry processing.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[StandardPostmarkResponse]:
        """Retry a failed inbound message for processing


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param messageid: The ID of the inbound message on which we should retry processing. (required)
        :type messageid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retry_inbound_message_processing_serialize(
            x_postmark_server_token=x_postmark_server_token,
            messageid=messageid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StandardPostmarkResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def retry_inbound_message_processing_without_preload_content(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        messageid: Annotated[StrictStr, Field(description="The ID of the inbound message on which we should retry processing.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retry a failed inbound message for processing


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param messageid: The ID of the inbound message on which we should retry processing. (required)
        :type messageid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retry_inbound_message_processing_serialize(
            x_postmark_server_token=x_postmark_server_token,
            messageid=messageid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StandardPostmarkResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _retry_inbound_message_processing_serialize(
        self,
        x_postmark_server_token,
        messageid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if messageid is not None:
            _path_params['messageid'] = messageid
        # process the query parameters
        # process the header parameters
        if x_postmark_server_token is not None:
            _header_params['X-Postmark-Server-Token'] = x_postmark_server_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/messages/inbound/{messageid}/retry',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_clicks_for_outbound_messages(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        count: Annotated[StrictInt, Field(description="Number of message clicks to return per request. Max 500.")],
        offset: Annotated[StrictInt, Field(description="Number of messages to skip")],
        recipient: Annotated[Optional[StrictStr], Field(description="Filter by To, Cc, Bcc")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        client_name: Annotated[Optional[StrictStr], Field(description="Filter by client name, i.e. Outlook, Gmail")] = None,
        client_company: Annotated[Optional[StrictStr], Field(description="Filter by company, i.e. Microsoft, Apple, Google")] = None,
        client_family: Annotated[Optional[StrictStr], Field(description="Filter by client family, i.e. OS X, Chrome")] = None,
        os_name: Annotated[Optional[StrictStr], Field(description="Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7")] = None,
        os_family: Annotated[Optional[StrictStr], Field(description="Filter by kind of OS used without specific version, i.e. OS X, Windows")] = None,
        os_company: Annotated[Optional[StrictStr], Field(description="Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation")] = None,
        platform: Annotated[Optional[StrictStr], Field(description="Filter by platform, i.e. webmail, desktop, mobile")] = None,
        country: Annotated[Optional[StrictStr], Field(description="Filter by country messages were opened in, i.e. Denmark, Russia")] = None,
        region: Annotated[Optional[StrictStr], Field(description="Filter by full name of region messages were opened in, i.e. Moscow, New York")] = None,
        city: Annotated[Optional[StrictStr], Field(description="Filter by full name of region messages were opened in, i.e. Moscow, New York")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MessageClickSearchResponse:
        """Clicks for a all messages


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param count: Number of message clicks to return per request. Max 500. (required)
        :type count: int
        :param offset: Number of messages to skip (required)
        :type offset: int
        :param recipient: Filter by To, Cc, Bcc
        :type recipient: str
        :param tag: Filter by tag
        :type tag: str
        :param client_name: Filter by client name, i.e. Outlook, Gmail
        :type client_name: str
        :param client_company: Filter by company, i.e. Microsoft, Apple, Google
        :type client_company: str
        :param client_family: Filter by client family, i.e. OS X, Chrome
        :type client_family: str
        :param os_name: Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7
        :type os_name: str
        :param os_family: Filter by kind of OS used without specific version, i.e. OS X, Windows
        :type os_family: str
        :param os_company: Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation
        :type os_company: str
        :param platform: Filter by platform, i.e. webmail, desktop, mobile
        :type platform: str
        :param country: Filter by country messages were opened in, i.e. Denmark, Russia
        :type country: str
        :param region: Filter by full name of region messages were opened in, i.e. Moscow, New York
        :type region: str
        :param city: Filter by full name of region messages were opened in, i.e. Moscow, New York
        :type city: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_clicks_for_outbound_messages_serialize(
            x_postmark_server_token=x_postmark_server_token,
            count=count,
            offset=offset,
            recipient=recipient,
            tag=tag,
            client_name=client_name,
            client_company=client_company,
            client_family=client_family,
            os_name=os_name,
            os_family=os_family,
            os_company=os_company,
            platform=platform,
            country=country,
            region=region,
            city=city,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MessageClickSearchResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_clicks_for_outbound_messages_with_http_info(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        count: Annotated[StrictInt, Field(description="Number of message clicks to return per request. Max 500.")],
        offset: Annotated[StrictInt, Field(description="Number of messages to skip")],
        recipient: Annotated[Optional[StrictStr], Field(description="Filter by To, Cc, Bcc")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        client_name: Annotated[Optional[StrictStr], Field(description="Filter by client name, i.e. Outlook, Gmail")] = None,
        client_company: Annotated[Optional[StrictStr], Field(description="Filter by company, i.e. Microsoft, Apple, Google")] = None,
        client_family: Annotated[Optional[StrictStr], Field(description="Filter by client family, i.e. OS X, Chrome")] = None,
        os_name: Annotated[Optional[StrictStr], Field(description="Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7")] = None,
        os_family: Annotated[Optional[StrictStr], Field(description="Filter by kind of OS used without specific version, i.e. OS X, Windows")] = None,
        os_company: Annotated[Optional[StrictStr], Field(description="Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation")] = None,
        platform: Annotated[Optional[StrictStr], Field(description="Filter by platform, i.e. webmail, desktop, mobile")] = None,
        country: Annotated[Optional[StrictStr], Field(description="Filter by country messages were opened in, i.e. Denmark, Russia")] = None,
        region: Annotated[Optional[StrictStr], Field(description="Filter by full name of region messages were opened in, i.e. Moscow, New York")] = None,
        city: Annotated[Optional[StrictStr], Field(description="Filter by full name of region messages were opened in, i.e. Moscow, New York")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MessageClickSearchResponse]:
        """Clicks for a all messages


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param count: Number of message clicks to return per request. Max 500. (required)
        :type count: int
        :param offset: Number of messages to skip (required)
        :type offset: int
        :param recipient: Filter by To, Cc, Bcc
        :type recipient: str
        :param tag: Filter by tag
        :type tag: str
        :param client_name: Filter by client name, i.e. Outlook, Gmail
        :type client_name: str
        :param client_company: Filter by company, i.e. Microsoft, Apple, Google
        :type client_company: str
        :param client_family: Filter by client family, i.e. OS X, Chrome
        :type client_family: str
        :param os_name: Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7
        :type os_name: str
        :param os_family: Filter by kind of OS used without specific version, i.e. OS X, Windows
        :type os_family: str
        :param os_company: Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation
        :type os_company: str
        :param platform: Filter by platform, i.e. webmail, desktop, mobile
        :type platform: str
        :param country: Filter by country messages were opened in, i.e. Denmark, Russia
        :type country: str
        :param region: Filter by full name of region messages were opened in, i.e. Moscow, New York
        :type region: str
        :param city: Filter by full name of region messages were opened in, i.e. Moscow, New York
        :type city: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_clicks_for_outbound_messages_serialize(
            x_postmark_server_token=x_postmark_server_token,
            count=count,
            offset=offset,
            recipient=recipient,
            tag=tag,
            client_name=client_name,
            client_company=client_company,
            client_family=client_family,
            os_name=os_name,
            os_family=os_family,
            os_company=os_company,
            platform=platform,
            country=country,
            region=region,
            city=city,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MessageClickSearchResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_clicks_for_outbound_messages_without_preload_content(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        count: Annotated[StrictInt, Field(description="Number of message clicks to return per request. Max 500.")],
        offset: Annotated[StrictInt, Field(description="Number of messages to skip")],
        recipient: Annotated[Optional[StrictStr], Field(description="Filter by To, Cc, Bcc")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        client_name: Annotated[Optional[StrictStr], Field(description="Filter by client name, i.e. Outlook, Gmail")] = None,
        client_company: Annotated[Optional[StrictStr], Field(description="Filter by company, i.e. Microsoft, Apple, Google")] = None,
        client_family: Annotated[Optional[StrictStr], Field(description="Filter by client family, i.e. OS X, Chrome")] = None,
        os_name: Annotated[Optional[StrictStr], Field(description="Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7")] = None,
        os_family: Annotated[Optional[StrictStr], Field(description="Filter by kind of OS used without specific version, i.e. OS X, Windows")] = None,
        os_company: Annotated[Optional[StrictStr], Field(description="Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation")] = None,
        platform: Annotated[Optional[StrictStr], Field(description="Filter by platform, i.e. webmail, desktop, mobile")] = None,
        country: Annotated[Optional[StrictStr], Field(description="Filter by country messages were opened in, i.e. Denmark, Russia")] = None,
        region: Annotated[Optional[StrictStr], Field(description="Filter by full name of region messages were opened in, i.e. Moscow, New York")] = None,
        city: Annotated[Optional[StrictStr], Field(description="Filter by full name of region messages were opened in, i.e. Moscow, New York")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Clicks for a all messages


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param count: Number of message clicks to return per request. Max 500. (required)
        :type count: int
        :param offset: Number of messages to skip (required)
        :type offset: int
        :param recipient: Filter by To, Cc, Bcc
        :type recipient: str
        :param tag: Filter by tag
        :type tag: str
        :param client_name: Filter by client name, i.e. Outlook, Gmail
        :type client_name: str
        :param client_company: Filter by company, i.e. Microsoft, Apple, Google
        :type client_company: str
        :param client_family: Filter by client family, i.e. OS X, Chrome
        :type client_family: str
        :param os_name: Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7
        :type os_name: str
        :param os_family: Filter by kind of OS used without specific version, i.e. OS X, Windows
        :type os_family: str
        :param os_company: Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation
        :type os_company: str
        :param platform: Filter by platform, i.e. webmail, desktop, mobile
        :type platform: str
        :param country: Filter by country messages were opened in, i.e. Denmark, Russia
        :type country: str
        :param region: Filter by full name of region messages were opened in, i.e. Moscow, New York
        :type region: str
        :param city: Filter by full name of region messages were opened in, i.e. Moscow, New York
        :type city: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_clicks_for_outbound_messages_serialize(
            x_postmark_server_token=x_postmark_server_token,
            count=count,
            offset=offset,
            recipient=recipient,
            tag=tag,
            client_name=client_name,
            client_company=client_company,
            client_family=client_family,
            os_name=os_name,
            os_family=os_family,
            os_company=os_company,
            platform=platform,
            country=country,
            region=region,
            city=city,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MessageClickSearchResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_clicks_for_outbound_messages_serialize(
        self,
        x_postmark_server_token,
        count,
        offset,
        recipient,
        tag,
        client_name,
        client_company,
        client_family,
        os_name,
        os_family,
        os_company,
        platform,
        country,
        region,
        city,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if count is not None:
            
            _query_params.append(('count', count))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if recipient is not None:
            
            _query_params.append(('recipient', recipient))
            
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if client_name is not None:
            
            _query_params.append(('client_name', client_name))
            
        if client_company is not None:
            
            _query_params.append(('client_company', client_company))
            
        if client_family is not None:
            
            _query_params.append(('client_family', client_family))
            
        if os_name is not None:
            
            _query_params.append(('os_name', os_name))
            
        if os_family is not None:
            
            _query_params.append(('os_family', os_family))
            
        if os_company is not None:
            
            _query_params.append(('os_company', os_company))
            
        if platform is not None:
            
            _query_params.append(('platform', platform))
            
        if country is not None:
            
            _query_params.append(('country', country))
            
        if region is not None:
            
            _query_params.append(('region', region))
            
        if city is not None:
            
            _query_params.append(('city', city))
            
        # process the header parameters
        if x_postmark_server_token is not None:
            _header_params['X-Postmark-Server-Token'] = x_postmark_server_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/messages/outbound/clicks',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_inbound_messages(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        count: Annotated[StrictInt, Field(description="Number of messages to return per request. Max 500.")],
        offset: Annotated[StrictInt, Field(description="Number of messages to skip")],
        recipient: Annotated[Optional[StrictStr], Field(description="Filter by the user who was receiving the email")] = None,
        fromemail: Annotated[Optional[StrictStr], Field(description="Filter by the sender email address")] = None,
        subject: Annotated[Optional[StrictStr], Field(description="Filter by email subject")] = None,
        mailboxhash: Annotated[Optional[StrictStr], Field(description="Filter by mailboxhash")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Filter by status (`blocked`, `processed`, `queued`, `failed`, `scheduled`)")] = None,
        todate: Annotated[Optional[date], Field(description="Filter messages up to the date specified. e.g. `2014-02-01`")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter messages starting from the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> InboundSearchResponse:
        """Inbound message search


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param count: Number of messages to return per request. Max 500. (required)
        :type count: int
        :param offset: Number of messages to skip (required)
        :type offset: int
        :param recipient: Filter by the user who was receiving the email
        :type recipient: str
        :param fromemail: Filter by the sender email address
        :type fromemail: str
        :param subject: Filter by email subject
        :type subject: str
        :param mailboxhash: Filter by mailboxhash
        :type mailboxhash: str
        :param tag: Filter by tag
        :type tag: str
        :param status: Filter by status (`blocked`, `processed`, `queued`, `failed`, `scheduled`)
        :type status: str
        :param todate: Filter messages up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param fromdate: Filter messages starting from the date specified. e.g. `2014-02-01`
        :type fromdate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_inbound_messages_serialize(
            x_postmark_server_token=x_postmark_server_token,
            count=count,
            offset=offset,
            recipient=recipient,
            fromemail=fromemail,
            subject=subject,
            mailboxhash=mailboxhash,
            tag=tag,
            status=status,
            todate=todate,
            fromdate=fromdate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InboundSearchResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_inbound_messages_with_http_info(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        count: Annotated[StrictInt, Field(description="Number of messages to return per request. Max 500.")],
        offset: Annotated[StrictInt, Field(description="Number of messages to skip")],
        recipient: Annotated[Optional[StrictStr], Field(description="Filter by the user who was receiving the email")] = None,
        fromemail: Annotated[Optional[StrictStr], Field(description="Filter by the sender email address")] = None,
        subject: Annotated[Optional[StrictStr], Field(description="Filter by email subject")] = None,
        mailboxhash: Annotated[Optional[StrictStr], Field(description="Filter by mailboxhash")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Filter by status (`blocked`, `processed`, `queued`, `failed`, `scheduled`)")] = None,
        todate: Annotated[Optional[date], Field(description="Filter messages up to the date specified. e.g. `2014-02-01`")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter messages starting from the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[InboundSearchResponse]:
        """Inbound message search


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param count: Number of messages to return per request. Max 500. (required)
        :type count: int
        :param offset: Number of messages to skip (required)
        :type offset: int
        :param recipient: Filter by the user who was receiving the email
        :type recipient: str
        :param fromemail: Filter by the sender email address
        :type fromemail: str
        :param subject: Filter by email subject
        :type subject: str
        :param mailboxhash: Filter by mailboxhash
        :type mailboxhash: str
        :param tag: Filter by tag
        :type tag: str
        :param status: Filter by status (`blocked`, `processed`, `queued`, `failed`, `scheduled`)
        :type status: str
        :param todate: Filter messages up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param fromdate: Filter messages starting from the date specified. e.g. `2014-02-01`
        :type fromdate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_inbound_messages_serialize(
            x_postmark_server_token=x_postmark_server_token,
            count=count,
            offset=offset,
            recipient=recipient,
            fromemail=fromemail,
            subject=subject,
            mailboxhash=mailboxhash,
            tag=tag,
            status=status,
            todate=todate,
            fromdate=fromdate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InboundSearchResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_inbound_messages_without_preload_content(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        count: Annotated[StrictInt, Field(description="Number of messages to return per request. Max 500.")],
        offset: Annotated[StrictInt, Field(description="Number of messages to skip")],
        recipient: Annotated[Optional[StrictStr], Field(description="Filter by the user who was receiving the email")] = None,
        fromemail: Annotated[Optional[StrictStr], Field(description="Filter by the sender email address")] = None,
        subject: Annotated[Optional[StrictStr], Field(description="Filter by email subject")] = None,
        mailboxhash: Annotated[Optional[StrictStr], Field(description="Filter by mailboxhash")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Filter by status (`blocked`, `processed`, `queued`, `failed`, `scheduled`)")] = None,
        todate: Annotated[Optional[date], Field(description="Filter messages up to the date specified. e.g. `2014-02-01`")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter messages starting from the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Inbound message search


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param count: Number of messages to return per request. Max 500. (required)
        :type count: int
        :param offset: Number of messages to skip (required)
        :type offset: int
        :param recipient: Filter by the user who was receiving the email
        :type recipient: str
        :param fromemail: Filter by the sender email address
        :type fromemail: str
        :param subject: Filter by email subject
        :type subject: str
        :param mailboxhash: Filter by mailboxhash
        :type mailboxhash: str
        :param tag: Filter by tag
        :type tag: str
        :param status: Filter by status (`blocked`, `processed`, `queued`, `failed`, `scheduled`)
        :type status: str
        :param todate: Filter messages up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param fromdate: Filter messages starting from the date specified. e.g. `2014-02-01`
        :type fromdate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_inbound_messages_serialize(
            x_postmark_server_token=x_postmark_server_token,
            count=count,
            offset=offset,
            recipient=recipient,
            fromemail=fromemail,
            subject=subject,
            mailboxhash=mailboxhash,
            tag=tag,
            status=status,
            todate=todate,
            fromdate=fromdate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InboundSearchResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_inbound_messages_serialize(
        self,
        x_postmark_server_token,
        count,
        offset,
        recipient,
        fromemail,
        subject,
        mailboxhash,
        tag,
        status,
        todate,
        fromdate,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if count is not None:
            
            _query_params.append(('count', count))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if recipient is not None:
            
            _query_params.append(('recipient', recipient))
            
        if fromemail is not None:
            
            _query_params.append(('fromemail', fromemail))
            
        if subject is not None:
            
            _query_params.append(('subject', subject))
            
        if mailboxhash is not None:
            
            _query_params.append(('mailboxhash', mailboxhash))
            
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if todate is not None:
            if isinstance(todate, date):
                _query_params.append(
                    (
                        'todate',
                        todate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('todate', todate))
            
        if fromdate is not None:
            if isinstance(fromdate, date):
                _query_params.append(
                    (
                        'fromdate',
                        fromdate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('fromdate', fromdate))
            
        # process the header parameters
        if x_postmark_server_token is not None:
            _header_params['X-Postmark-Server-Token'] = x_postmark_server_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/messages/inbound',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_opens_for_outbound_messages(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        count: Annotated[StrictInt, Field(description="Number of message opens to return per request. Max 500.")],
        offset: Annotated[StrictInt, Field(description="Number of messages to skip")],
        recipient: Annotated[Optional[StrictStr], Field(description="Filter by To, Cc, Bcc")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        client_name: Annotated[Optional[StrictStr], Field(description="Filter by client name, i.e. Outlook, Gmail")] = None,
        client_company: Annotated[Optional[StrictStr], Field(description="Filter by company, i.e. Microsoft, Apple, Google")] = None,
        client_family: Annotated[Optional[StrictStr], Field(description="Filter by client family, i.e. OS X, Chrome")] = None,
        os_name: Annotated[Optional[StrictStr], Field(description="Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7")] = None,
        os_family: Annotated[Optional[StrictStr], Field(description="Filter by kind of OS used without specific version, i.e. OS X, Windows")] = None,
        os_company: Annotated[Optional[StrictStr], Field(description="Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation")] = None,
        platform: Annotated[Optional[StrictStr], Field(description="Filter by platform, i.e. webmail, desktop, mobile")] = None,
        country: Annotated[Optional[StrictStr], Field(description="Filter by country messages were opened in, i.e. Denmark, Russia")] = None,
        region: Annotated[Optional[StrictStr], Field(description="Filter by full name of region messages were opened in, i.e. Moscow, New York")] = None,
        city: Annotated[Optional[StrictStr], Field(description="Filter by full name of region messages were opened in, i.e. Moscow, New York")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MessageOpenSearchResponse:
        """Opens for all messages


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param count: Number of message opens to return per request. Max 500. (required)
        :type count: int
        :param offset: Number of messages to skip (required)
        :type offset: int
        :param recipient: Filter by To, Cc, Bcc
        :type recipient: str
        :param tag: Filter by tag
        :type tag: str
        :param client_name: Filter by client name, i.e. Outlook, Gmail
        :type client_name: str
        :param client_company: Filter by company, i.e. Microsoft, Apple, Google
        :type client_company: str
        :param client_family: Filter by client family, i.e. OS X, Chrome
        :type client_family: str
        :param os_name: Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7
        :type os_name: str
        :param os_family: Filter by kind of OS used without specific version, i.e. OS X, Windows
        :type os_family: str
        :param os_company: Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation
        :type os_company: str
        :param platform: Filter by platform, i.e. webmail, desktop, mobile
        :type platform: str
        :param country: Filter by country messages were opened in, i.e. Denmark, Russia
        :type country: str
        :param region: Filter by full name of region messages were opened in, i.e. Moscow, New York
        :type region: str
        :param city: Filter by full name of region messages were opened in, i.e. Moscow, New York
        :type city: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_opens_for_outbound_messages_serialize(
            x_postmark_server_token=x_postmark_server_token,
            count=count,
            offset=offset,
            recipient=recipient,
            tag=tag,
            client_name=client_name,
            client_company=client_company,
            client_family=client_family,
            os_name=os_name,
            os_family=os_family,
            os_company=os_company,
            platform=platform,
            country=country,
            region=region,
            city=city,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MessageOpenSearchResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_opens_for_outbound_messages_with_http_info(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        count: Annotated[StrictInt, Field(description="Number of message opens to return per request. Max 500.")],
        offset: Annotated[StrictInt, Field(description="Number of messages to skip")],
        recipient: Annotated[Optional[StrictStr], Field(description="Filter by To, Cc, Bcc")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        client_name: Annotated[Optional[StrictStr], Field(description="Filter by client name, i.e. Outlook, Gmail")] = None,
        client_company: Annotated[Optional[StrictStr], Field(description="Filter by company, i.e. Microsoft, Apple, Google")] = None,
        client_family: Annotated[Optional[StrictStr], Field(description="Filter by client family, i.e. OS X, Chrome")] = None,
        os_name: Annotated[Optional[StrictStr], Field(description="Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7")] = None,
        os_family: Annotated[Optional[StrictStr], Field(description="Filter by kind of OS used without specific version, i.e. OS X, Windows")] = None,
        os_company: Annotated[Optional[StrictStr], Field(description="Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation")] = None,
        platform: Annotated[Optional[StrictStr], Field(description="Filter by platform, i.e. webmail, desktop, mobile")] = None,
        country: Annotated[Optional[StrictStr], Field(description="Filter by country messages were opened in, i.e. Denmark, Russia")] = None,
        region: Annotated[Optional[StrictStr], Field(description="Filter by full name of region messages were opened in, i.e. Moscow, New York")] = None,
        city: Annotated[Optional[StrictStr], Field(description="Filter by full name of region messages were opened in, i.e. Moscow, New York")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MessageOpenSearchResponse]:
        """Opens for all messages


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param count: Number of message opens to return per request. Max 500. (required)
        :type count: int
        :param offset: Number of messages to skip (required)
        :type offset: int
        :param recipient: Filter by To, Cc, Bcc
        :type recipient: str
        :param tag: Filter by tag
        :type tag: str
        :param client_name: Filter by client name, i.e. Outlook, Gmail
        :type client_name: str
        :param client_company: Filter by company, i.e. Microsoft, Apple, Google
        :type client_company: str
        :param client_family: Filter by client family, i.e. OS X, Chrome
        :type client_family: str
        :param os_name: Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7
        :type os_name: str
        :param os_family: Filter by kind of OS used without specific version, i.e. OS X, Windows
        :type os_family: str
        :param os_company: Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation
        :type os_company: str
        :param platform: Filter by platform, i.e. webmail, desktop, mobile
        :type platform: str
        :param country: Filter by country messages were opened in, i.e. Denmark, Russia
        :type country: str
        :param region: Filter by full name of region messages were opened in, i.e. Moscow, New York
        :type region: str
        :param city: Filter by full name of region messages were opened in, i.e. Moscow, New York
        :type city: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_opens_for_outbound_messages_serialize(
            x_postmark_server_token=x_postmark_server_token,
            count=count,
            offset=offset,
            recipient=recipient,
            tag=tag,
            client_name=client_name,
            client_company=client_company,
            client_family=client_family,
            os_name=os_name,
            os_family=os_family,
            os_company=os_company,
            platform=platform,
            country=country,
            region=region,
            city=city,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MessageOpenSearchResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_opens_for_outbound_messages_without_preload_content(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        count: Annotated[StrictInt, Field(description="Number of message opens to return per request. Max 500.")],
        offset: Annotated[StrictInt, Field(description="Number of messages to skip")],
        recipient: Annotated[Optional[StrictStr], Field(description="Filter by To, Cc, Bcc")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        client_name: Annotated[Optional[StrictStr], Field(description="Filter by client name, i.e. Outlook, Gmail")] = None,
        client_company: Annotated[Optional[StrictStr], Field(description="Filter by company, i.e. Microsoft, Apple, Google")] = None,
        client_family: Annotated[Optional[StrictStr], Field(description="Filter by client family, i.e. OS X, Chrome")] = None,
        os_name: Annotated[Optional[StrictStr], Field(description="Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7")] = None,
        os_family: Annotated[Optional[StrictStr], Field(description="Filter by kind of OS used without specific version, i.e. OS X, Windows")] = None,
        os_company: Annotated[Optional[StrictStr], Field(description="Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation")] = None,
        platform: Annotated[Optional[StrictStr], Field(description="Filter by platform, i.e. webmail, desktop, mobile")] = None,
        country: Annotated[Optional[StrictStr], Field(description="Filter by country messages were opened in, i.e. Denmark, Russia")] = None,
        region: Annotated[Optional[StrictStr], Field(description="Filter by full name of region messages were opened in, i.e. Moscow, New York")] = None,
        city: Annotated[Optional[StrictStr], Field(description="Filter by full name of region messages were opened in, i.e. Moscow, New York")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Opens for all messages


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param count: Number of message opens to return per request. Max 500. (required)
        :type count: int
        :param offset: Number of messages to skip (required)
        :type offset: int
        :param recipient: Filter by To, Cc, Bcc
        :type recipient: str
        :param tag: Filter by tag
        :type tag: str
        :param client_name: Filter by client name, i.e. Outlook, Gmail
        :type client_name: str
        :param client_company: Filter by company, i.e. Microsoft, Apple, Google
        :type client_company: str
        :param client_family: Filter by client family, i.e. OS X, Chrome
        :type client_family: str
        :param os_name: Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7
        :type os_name: str
        :param os_family: Filter by kind of OS used without specific version, i.e. OS X, Windows
        :type os_family: str
        :param os_company: Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation
        :type os_company: str
        :param platform: Filter by platform, i.e. webmail, desktop, mobile
        :type platform: str
        :param country: Filter by country messages were opened in, i.e. Denmark, Russia
        :type country: str
        :param region: Filter by full name of region messages were opened in, i.e. Moscow, New York
        :type region: str
        :param city: Filter by full name of region messages were opened in, i.e. Moscow, New York
        :type city: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_opens_for_outbound_messages_serialize(
            x_postmark_server_token=x_postmark_server_token,
            count=count,
            offset=offset,
            recipient=recipient,
            tag=tag,
            client_name=client_name,
            client_company=client_company,
            client_family=client_family,
            os_name=os_name,
            os_family=os_family,
            os_company=os_company,
            platform=platform,
            country=country,
            region=region,
            city=city,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MessageOpenSearchResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_opens_for_outbound_messages_serialize(
        self,
        x_postmark_server_token,
        count,
        offset,
        recipient,
        tag,
        client_name,
        client_company,
        client_family,
        os_name,
        os_family,
        os_company,
        platform,
        country,
        region,
        city,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if count is not None:
            
            _query_params.append(('count', count))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if recipient is not None:
            
            _query_params.append(('recipient', recipient))
            
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if client_name is not None:
            
            _query_params.append(('client_name', client_name))
            
        if client_company is not None:
            
            _query_params.append(('client_company', client_company))
            
        if client_family is not None:
            
            _query_params.append(('client_family', client_family))
            
        if os_name is not None:
            
            _query_params.append(('os_name', os_name))
            
        if os_family is not None:
            
            _query_params.append(('os_family', os_family))
            
        if os_company is not None:
            
            _query_params.append(('os_company', os_company))
            
        if platform is not None:
            
            _query_params.append(('platform', platform))
            
        if country is not None:
            
            _query_params.append(('country', country))
            
        if region is not None:
            
            _query_params.append(('region', region))
            
        if city is not None:
            
            _query_params.append(('city', city))
            
        # process the header parameters
        if x_postmark_server_token is not None:
            _header_params['X-Postmark-Server-Token'] = x_postmark_server_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/messages/outbound/opens',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_outbound_messages(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        count: Annotated[StrictInt, Field(description="Number of messages to return per request. Max 500.")],
        offset: Annotated[StrictInt, Field(description="Number of messages to skip")],
        recipient: Annotated[Optional[StrictStr], Field(description="Filter by the user who was receiving the email")] = None,
        fromemail: Annotated[Optional[StrictStr], Field(description="Filter by the sender email address")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Filter by status (`queued` or `sent`)")] = None,
        todate: Annotated[Optional[date], Field(description="Filter messages up to the date specified. e.g. `2014-02-01`")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter messages starting from the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OutboundSearchResponse:
        """Outbound message search


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param count: Number of messages to return per request. Max 500. (required)
        :type count: int
        :param offset: Number of messages to skip (required)
        :type offset: int
        :param recipient: Filter by the user who was receiving the email
        :type recipient: str
        :param fromemail: Filter by the sender email address
        :type fromemail: str
        :param tag: Filter by tag
        :type tag: str
        :param status: Filter by status (`queued` or `sent`)
        :type status: str
        :param todate: Filter messages up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param fromdate: Filter messages starting from the date specified. e.g. `2014-02-01`
        :type fromdate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_outbound_messages_serialize(
            x_postmark_server_token=x_postmark_server_token,
            count=count,
            offset=offset,
            recipient=recipient,
            fromemail=fromemail,
            tag=tag,
            status=status,
            todate=todate,
            fromdate=fromdate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OutboundSearchResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_outbound_messages_with_http_info(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        count: Annotated[StrictInt, Field(description="Number of messages to return per request. Max 500.")],
        offset: Annotated[StrictInt, Field(description="Number of messages to skip")],
        recipient: Annotated[Optional[StrictStr], Field(description="Filter by the user who was receiving the email")] = None,
        fromemail: Annotated[Optional[StrictStr], Field(description="Filter by the sender email address")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Filter by status (`queued` or `sent`)")] = None,
        todate: Annotated[Optional[date], Field(description="Filter messages up to the date specified. e.g. `2014-02-01`")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter messages starting from the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OutboundSearchResponse]:
        """Outbound message search


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param count: Number of messages to return per request. Max 500. (required)
        :type count: int
        :param offset: Number of messages to skip (required)
        :type offset: int
        :param recipient: Filter by the user who was receiving the email
        :type recipient: str
        :param fromemail: Filter by the sender email address
        :type fromemail: str
        :param tag: Filter by tag
        :type tag: str
        :param status: Filter by status (`queued` or `sent`)
        :type status: str
        :param todate: Filter messages up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param fromdate: Filter messages starting from the date specified. e.g. `2014-02-01`
        :type fromdate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_outbound_messages_serialize(
            x_postmark_server_token=x_postmark_server_token,
            count=count,
            offset=offset,
            recipient=recipient,
            fromemail=fromemail,
            tag=tag,
            status=status,
            todate=todate,
            fromdate=fromdate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OutboundSearchResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_outbound_messages_without_preload_content(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        count: Annotated[StrictInt, Field(description="Number of messages to return per request. Max 500.")],
        offset: Annotated[StrictInt, Field(description="Number of messages to skip")],
        recipient: Annotated[Optional[StrictStr], Field(description="Filter by the user who was receiving the email")] = None,
        fromemail: Annotated[Optional[StrictStr], Field(description="Filter by the sender email address")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Filter by status (`queued` or `sent`)")] = None,
        todate: Annotated[Optional[date], Field(description="Filter messages up to the date specified. e.g. `2014-02-01`")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter messages starting from the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Outbound message search


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param count: Number of messages to return per request. Max 500. (required)
        :type count: int
        :param offset: Number of messages to skip (required)
        :type offset: int
        :param recipient: Filter by the user who was receiving the email
        :type recipient: str
        :param fromemail: Filter by the sender email address
        :type fromemail: str
        :param tag: Filter by tag
        :type tag: str
        :param status: Filter by status (`queued` or `sent`)
        :type status: str
        :param todate: Filter messages up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param fromdate: Filter messages starting from the date specified. e.g. `2014-02-01`
        :type fromdate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_outbound_messages_serialize(
            x_postmark_server_token=x_postmark_server_token,
            count=count,
            offset=offset,
            recipient=recipient,
            fromemail=fromemail,
            tag=tag,
            status=status,
            todate=todate,
            fromdate=fromdate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OutboundSearchResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_outbound_messages_serialize(
        self,
        x_postmark_server_token,
        count,
        offset,
        recipient,
        fromemail,
        tag,
        status,
        todate,
        fromdate,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if count is not None:
            
            _query_params.append(('count', count))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if recipient is not None:
            
            _query_params.append(('recipient', recipient))
            
        if fromemail is not None:
            
            _query_params.append(('fromemail', fromemail))
            
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if todate is not None:
            if isinstance(todate, date):
                _query_params.append(
                    (
                        'todate',
                        todate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('todate', todate))
            
        if fromdate is not None:
            if isinstance(fromdate, date):
                _query_params.append(
                    (
                        'fromdate',
                        fromdate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('fromdate', fromdate))
            
        # process the header parameters
        if x_postmark_server_token is not None:
            _header_params['X-Postmark-Server-Token'] = x_postmark_server_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/messages/outbound',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



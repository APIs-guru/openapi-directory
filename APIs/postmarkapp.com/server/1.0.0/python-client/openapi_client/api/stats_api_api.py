# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictStr
from typing import Any, Dict, Optional
from typing_extensions import Annotated
from openapi_client.models.get_bounce_counts200_response import GetBounceCounts200Response
from openapi_client.models.get_outbound_open_counts200_response import GetOutboundOpenCounts200Response
from openapi_client.models.get_outbound_open_counts_by_email_client200_response import GetOutboundOpenCountsByEmailClient200Response
from openapi_client.models.get_outbound_open_counts_by_platform200_response import GetOutboundOpenCountsByPlatform200Response
from openapi_client.models.get_spam_complaints200_response import GetSpamComplaints200Response
from openapi_client.models.get_tracked_email_counts200_response import GetTrackedEmailCounts200Response
from openapi_client.models.outbound_overview_stats_response import OutboundOverviewStatsResponse
from openapi_client.models.sent_counts_response import SentCountsResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class StatsAPIApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_bounce_counts(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetBounceCounts200Response:
        """Get bounce counts


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_bounce_counts_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetBounceCounts200Response",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_bounce_counts_with_http_info(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetBounceCounts200Response]:
        """Get bounce counts


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_bounce_counts_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetBounceCounts200Response",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_bounce_counts_without_preload_content(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get bounce counts


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_bounce_counts_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetBounceCounts200Response",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_bounce_counts_serialize(
        self,
        x_postmark_server_token,
        tag,
        fromdate,
        todate,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if fromdate is not None:
            if isinstance(fromdate, date):
                _query_params.append(
                    (
                        'fromdate',
                        fromdate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('fromdate', fromdate))
            
        if todate is not None:
            if isinstance(todate, date):
                _query_params.append(
                    (
                        'todate',
                        todate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('todate', todate))
            
        # process the header parameters
        if x_postmark_server_token is not None:
            _header_params['X-Postmark-Server-Token'] = x_postmark_server_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/stats/outbound/bounces',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_outbound_click_counts(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Get click counts


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_click_counts_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_outbound_click_counts_with_http_info(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Get click counts


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_click_counts_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_outbound_click_counts_without_preload_content(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get click counts


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_click_counts_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_outbound_click_counts_serialize(
        self,
        x_postmark_server_token,
        tag,
        fromdate,
        todate,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if fromdate is not None:
            if isinstance(fromdate, date):
                _query_params.append(
                    (
                        'fromdate',
                        fromdate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('fromdate', fromdate))
            
        if todate is not None:
            if isinstance(todate, date):
                _query_params.append(
                    (
                        'todate',
                        todate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('todate', todate))
            
        # process the header parameters
        if x_postmark_server_token is not None:
            _header_params['X-Postmark-Server-Token'] = x_postmark_server_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/stats/outbound/clicks',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_outbound_click_counts_by_browser_family(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Get browser usage by family


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_click_counts_by_browser_family_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_outbound_click_counts_by_browser_family_with_http_info(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Get browser usage by family


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_click_counts_by_browser_family_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_outbound_click_counts_by_browser_family_without_preload_content(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get browser usage by family


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_click_counts_by_browser_family_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_outbound_click_counts_by_browser_family_serialize(
        self,
        x_postmark_server_token,
        tag,
        fromdate,
        todate,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if fromdate is not None:
            if isinstance(fromdate, date):
                _query_params.append(
                    (
                        'fromdate',
                        fromdate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('fromdate', fromdate))
            
        if todate is not None:
            if isinstance(todate, date):
                _query_params.append(
                    (
                        'todate',
                        todate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('todate', todate))
            
        # process the header parameters
        if x_postmark_server_token is not None:
            _header_params['X-Postmark-Server-Token'] = x_postmark_server_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/stats/outbound/clicks/browserfamilies',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_outbound_click_counts_by_location(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Get clicks by body location


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_click_counts_by_location_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_outbound_click_counts_by_location_with_http_info(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Get clicks by body location


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_click_counts_by_location_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_outbound_click_counts_by_location_without_preload_content(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get clicks by body location


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_click_counts_by_location_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_outbound_click_counts_by_location_serialize(
        self,
        x_postmark_server_token,
        tag,
        fromdate,
        todate,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if fromdate is not None:
            if isinstance(fromdate, date):
                _query_params.append(
                    (
                        'fromdate',
                        fromdate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('fromdate', fromdate))
            
        if todate is not None:
            if isinstance(todate, date):
                _query_params.append(
                    (
                        'todate',
                        todate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('todate', todate))
            
        # process the header parameters
        if x_postmark_server_token is not None:
            _header_params['X-Postmark-Server-Token'] = x_postmark_server_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/stats/outbound/clicks/location',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_outbound_click_counts_by_platform(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Get browser plaform usage


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_click_counts_by_platform_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_outbound_click_counts_by_platform_with_http_info(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Get browser plaform usage


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_click_counts_by_platform_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_outbound_click_counts_by_platform_without_preload_content(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get browser plaform usage


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_click_counts_by_platform_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_outbound_click_counts_by_platform_serialize(
        self,
        x_postmark_server_token,
        tag,
        fromdate,
        todate,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if fromdate is not None:
            if isinstance(fromdate, date):
                _query_params.append(
                    (
                        'fromdate',
                        fromdate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('fromdate', fromdate))
            
        if todate is not None:
            if isinstance(todate, date):
                _query_params.append(
                    (
                        'todate',
                        todate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('todate', todate))
            
        # process the header parameters
        if x_postmark_server_token is not None:
            _header_params['X-Postmark-Server-Token'] = x_postmark_server_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/stats/outbound/clicks/platforms',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_outbound_open_counts(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetOutboundOpenCounts200Response:
        """Get email open counts


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_open_counts_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetOutboundOpenCounts200Response",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_outbound_open_counts_with_http_info(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetOutboundOpenCounts200Response]:
        """Get email open counts


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_open_counts_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetOutboundOpenCounts200Response",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_outbound_open_counts_without_preload_content(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get email open counts


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_open_counts_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetOutboundOpenCounts200Response",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_outbound_open_counts_serialize(
        self,
        x_postmark_server_token,
        tag,
        fromdate,
        todate,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if fromdate is not None:
            if isinstance(fromdate, date):
                _query_params.append(
                    (
                        'fromdate',
                        fromdate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('fromdate', fromdate))
            
        if todate is not None:
            if isinstance(todate, date):
                _query_params.append(
                    (
                        'todate',
                        todate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('todate', todate))
            
        # process the header parameters
        if x_postmark_server_token is not None:
            _header_params['X-Postmark-Server-Token'] = x_postmark_server_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/stats/outbound/opens',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_outbound_open_counts_by_email_client(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetOutboundOpenCountsByEmailClient200Response:
        """Get email client usage


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_open_counts_by_email_client_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetOutboundOpenCountsByEmailClient200Response",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_outbound_open_counts_by_email_client_with_http_info(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetOutboundOpenCountsByEmailClient200Response]:
        """Get email client usage


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_open_counts_by_email_client_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetOutboundOpenCountsByEmailClient200Response",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_outbound_open_counts_by_email_client_without_preload_content(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get email client usage


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_open_counts_by_email_client_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetOutboundOpenCountsByEmailClient200Response",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_outbound_open_counts_by_email_client_serialize(
        self,
        x_postmark_server_token,
        tag,
        fromdate,
        todate,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if fromdate is not None:
            if isinstance(fromdate, date):
                _query_params.append(
                    (
                        'fromdate',
                        fromdate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('fromdate', fromdate))
            
        if todate is not None:
            if isinstance(todate, date):
                _query_params.append(
                    (
                        'todate',
                        todate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('todate', todate))
            
        # process the header parameters
        if x_postmark_server_token is not None:
            _header_params['X-Postmark-Server-Token'] = x_postmark_server_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/stats/outbound/opens/emailclients',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_outbound_open_counts_by_platform(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetOutboundOpenCountsByPlatform200Response:
        """Get email platform usage


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_open_counts_by_platform_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetOutboundOpenCountsByPlatform200Response",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_outbound_open_counts_by_platform_with_http_info(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetOutboundOpenCountsByPlatform200Response]:
        """Get email platform usage


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_open_counts_by_platform_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetOutboundOpenCountsByPlatform200Response",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_outbound_open_counts_by_platform_without_preload_content(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get email platform usage


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_open_counts_by_platform_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetOutboundOpenCountsByPlatform200Response",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_outbound_open_counts_by_platform_serialize(
        self,
        x_postmark_server_token,
        tag,
        fromdate,
        todate,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if fromdate is not None:
            if isinstance(fromdate, date):
                _query_params.append(
                    (
                        'fromdate',
                        fromdate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('fromdate', fromdate))
            
        if todate is not None:
            if isinstance(todate, date):
                _query_params.append(
                    (
                        'todate',
                        todate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('todate', todate))
            
        # process the header parameters
        if x_postmark_server_token is not None:
            _header_params['X-Postmark-Server-Token'] = x_postmark_server_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/stats/outbound/opens/platforms',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_outbound_overview_statistics(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OutboundOverviewStatsResponse:
        """Get outbound overview


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_overview_statistics_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OutboundOverviewStatsResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_outbound_overview_statistics_with_http_info(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OutboundOverviewStatsResponse]:
        """Get outbound overview


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_overview_statistics_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OutboundOverviewStatsResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_outbound_overview_statistics_without_preload_content(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get outbound overview


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_outbound_overview_statistics_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OutboundOverviewStatsResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_outbound_overview_statistics_serialize(
        self,
        x_postmark_server_token,
        tag,
        fromdate,
        todate,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if fromdate is not None:
            if isinstance(fromdate, date):
                _query_params.append(
                    (
                        'fromdate',
                        fromdate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('fromdate', fromdate))
            
        if todate is not None:
            if isinstance(todate, date):
                _query_params.append(
                    (
                        'todate',
                        todate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('todate', todate))
            
        # process the header parameters
        if x_postmark_server_token is not None:
            _header_params['X-Postmark-Server-Token'] = x_postmark_server_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/stats/outbound',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_sent_counts(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SentCountsResponse:
        """Get sent counts


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sent_counts_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SentCountsResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_sent_counts_with_http_info(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SentCountsResponse]:
        """Get sent counts


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sent_counts_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SentCountsResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_sent_counts_without_preload_content(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get sent counts


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sent_counts_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SentCountsResponse",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_sent_counts_serialize(
        self,
        x_postmark_server_token,
        tag,
        fromdate,
        todate,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if fromdate is not None:
            if isinstance(fromdate, date):
                _query_params.append(
                    (
                        'fromdate',
                        fromdate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('fromdate', fromdate))
            
        if todate is not None:
            if isinstance(todate, date):
                _query_params.append(
                    (
                        'todate',
                        todate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('todate', todate))
            
        # process the header parameters
        if x_postmark_server_token is not None:
            _header_params['X-Postmark-Server-Token'] = x_postmark_server_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/stats/outbound/sends',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_spam_complaints(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSpamComplaints200Response:
        """Get spam complaints


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_spam_complaints_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSpamComplaints200Response",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_spam_complaints_with_http_info(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSpamComplaints200Response]:
        """Get spam complaints


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_spam_complaints_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSpamComplaints200Response",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_spam_complaints_without_preload_content(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats up to the date specified. e.g. `2014-02-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get spam complaints


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_spam_complaints_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSpamComplaints200Response",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_spam_complaints_serialize(
        self,
        x_postmark_server_token,
        tag,
        fromdate,
        todate,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if fromdate is not None:
            if isinstance(fromdate, date):
                _query_params.append(
                    (
                        'fromdate',
                        fromdate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('fromdate', fromdate))
            
        if todate is not None:
            if isinstance(todate, date):
                _query_params.append(
                    (
                        'todate',
                        todate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('todate', todate))
            
        # process the header parameters
        if x_postmark_server_token is not None:
            _header_params['X-Postmark-Server-Token'] = x_postmark_server_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/stats/outbound/spam',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tracked_email_counts(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetTrackedEmailCounts200Response:
        """Get tracked email counts


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tracked_email_counts_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTrackedEmailCounts200Response",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tracked_email_counts_with_http_info(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetTrackedEmailCounts200Response]:
        """Get tracked email counts


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tracked_email_counts_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTrackedEmailCounts200Response",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tracked_email_counts_without_preload_content(
        self,
        x_postmark_server_token: Annotated[StrictStr, Field(description="The token associated with the Server on which this request will operate.")],
        tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        fromdate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        todate: Annotated[Optional[date], Field(description="Filter stats starting from the date specified. e.g. `2014-01-01`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get tracked email counts


        :param x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :type x_postmark_server_token: str
        :param tag: Filter by tag
        :type tag: str
        :param fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type fromdate: date
        :param todate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :type todate: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tracked_email_counts_serialize(
            x_postmark_server_token=x_postmark_server_token,
            tag=tag,
            fromdate=fromdate,
            todate=todate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTrackedEmailCounts200Response",
            '422': "StandardPostmarkResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tracked_email_counts_serialize(
        self,
        x_postmark_server_token,
        tag,
        fromdate,
        todate,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if fromdate is not None:
            if isinstance(fromdate, date):
                _query_params.append(
                    (
                        'fromdate',
                        fromdate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('fromdate', fromdate))
            
        if todate is not None:
            if isinstance(todate, date):
                _query_params.append(
                    (
                        'todate',
                        todate.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('todate', todate))
            
        # process the header parameters
        if x_postmark_server_token is not None:
            _header_params['X-Postmark-Server-Token'] = x_postmark_server_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/stats/outbound/tracked',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



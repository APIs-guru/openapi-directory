# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.extended_message_click_event_information_client import ExtendedMessageClickEventInformationClient
from openapi_client.models.extended_message_click_event_information_geo import ExtendedMessageClickEventInformationGeo
from openapi_client.models.extended_message_click_event_information_os import ExtendedMessageClickEventInformationOS
from typing import Optional, Set
from typing_extensions import Self

class ExtendedMessageClickEventInformation(BaseModel):
    """
    
    """ # noqa: E501
    click_location: Optional[StrictStr] = Field(default=None, alias="ClickLocation")
    client: Optional[ExtendedMessageClickEventInformationClient] = Field(default=None, alias="Client")
    geo: Optional[ExtendedMessageClickEventInformationGeo] = Field(default=None, alias="Geo")
    message_id: Optional[StrictStr] = Field(default=None, alias="MessageID")
    os: Optional[ExtendedMessageClickEventInformationOS] = Field(default=None, alias="OS")
    original_link: Optional[StrictStr] = Field(default=None, alias="OriginalLink")
    platform: Optional[StrictStr] = Field(default=None, alias="Platform")
    received_at: Optional[datetime] = Field(default=None, alias="ReceivedAt")
    recipient: Optional[StrictStr] = Field(default=None, alias="Recipient")
    tag: Optional[StrictStr] = Field(default=None, alias="Tag")
    user_agent: Optional[StrictStr] = Field(default=None, alias="UserAgent")
    __properties: ClassVar[List[str]] = ["ClickLocation", "Client", "Geo", "MessageID", "OS", "OriginalLink", "Platform", "ReceivedAt", "Recipient", "Tag", "UserAgent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExtendedMessageClickEventInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client
        if self.client:
            _dict['Client'] = self.client.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geo
        if self.geo:
            _dict['Geo'] = self.geo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of os
        if self.os:
            _dict['OS'] = self.os.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExtendedMessageClickEventInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ClickLocation": obj.get("ClickLocation"),
            "Client": ExtendedMessageClickEventInformationClient.from_dict(obj["Client"]) if obj.get("Client") is not None else None,
            "Geo": ExtendedMessageClickEventInformationGeo.from_dict(obj["Geo"]) if obj.get("Geo") is not None else None,
            "MessageID": obj.get("MessageID"),
            "OS": ExtendedMessageClickEventInformationOS.from_dict(obj["OS"]) if obj.get("OS") is not None else None,
            "OriginalLink": obj.get("OriginalLink"),
            "Platform": obj.get("Platform"),
            "ReceivedAt": obj.get("ReceivedAt"),
            "Recipient": obj.get("Recipient"),
            "Tag": obj.get("Tag"),
            "UserAgent": obj.get("UserAgent")
        })
        return _obj



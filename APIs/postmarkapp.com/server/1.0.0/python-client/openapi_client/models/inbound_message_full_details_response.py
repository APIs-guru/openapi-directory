# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.attachment import Attachment
from openapi_client.models.email_name_address_pair import EmailNameAddressPair
from openapi_client.models.inbound_message_detail_from_full import InboundMessageDetailFromFull
from openapi_client.models.message_header import MessageHeader
from typing import Optional, Set
from typing_extensions import Self

class InboundMessageFullDetailsResponse(BaseModel):
    """
    InboundMessageFullDetailsResponse
    """ # noqa: E501
    attachments: Optional[List[Attachment]] = Field(default=None, alias="Attachments")
    blocked_reason: Optional[StrictStr] = Field(default=None, alias="BlockedReason")
    cc: Optional[StrictStr] = Field(default=None, alias="Cc")
    cc_full: Optional[List[EmailNameAddressPair]] = Field(default=None, alias="CcFull")
    var_date: Optional[StrictStr] = Field(default=None, alias="Date")
    var_from: Optional[StrictStr] = Field(default=None, alias="From")
    from_full: Optional[InboundMessageDetailFromFull] = Field(default=None, alias="FromFull")
    from_name: Optional[StrictStr] = Field(default=None, alias="FromName")
    headers: Optional[List[MessageHeader]] = Field(default=None, alias="Headers")
    html_body: Optional[StrictStr] = Field(default=None, alias="HtmlBody")
    mailbox_hash: Optional[StrictStr] = Field(default=None, alias="MailboxHash")
    message_id: Optional[StrictStr] = Field(default=None, alias="MessageID")
    original_recipient: Optional[StrictStr] = Field(default=None, alias="OriginalRecipient")
    reply_to: Optional[StrictStr] = Field(default=None, alias="ReplyTo")
    status: Optional[StrictStr] = Field(default=None, alias="Status")
    subject: Optional[StrictStr] = Field(default=None, alias="Subject")
    tag: Optional[StrictStr] = Field(default=None, alias="Tag")
    text_body: Optional[StrictStr] = Field(default=None, alias="TextBody")
    to: Optional[StrictStr] = Field(default=None, alias="To")
    to_full: Optional[List[EmailNameAddressPair]] = Field(default=None, alias="ToFull")
    __properties: ClassVar[List[str]] = ["Attachments", "BlockedReason", "Cc", "CcFull", "Date", "From", "FromFull", "FromName", "Headers", "HtmlBody", "MailboxHash", "MessageID", "OriginalRecipient", "ReplyTo", "Status", "Subject", "Tag", "TextBody", "To", "ToFull"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InboundMessageFullDetailsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['Attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cc_full (list)
        _items = []
        if self.cc_full:
            for _item_cc_full in self.cc_full:
                if _item_cc_full:
                    _items.append(_item_cc_full.to_dict())
            _dict['CcFull'] = _items
        # override the default output from pydantic by calling `to_dict()` of from_full
        if self.from_full:
            _dict['FromFull'] = self.from_full.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in headers (list)
        _items = []
        if self.headers:
            for _item_headers in self.headers:
                if _item_headers:
                    _items.append(_item_headers.to_dict())
            _dict['Headers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in to_full (list)
        _items = []
        if self.to_full:
            for _item_to_full in self.to_full:
                if _item_to_full:
                    _items.append(_item_to_full.to_dict())
            _dict['ToFull'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InboundMessageFullDetailsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Attachments": [Attachment.from_dict(_item) for _item in obj["Attachments"]] if obj.get("Attachments") is not None else None,
            "BlockedReason": obj.get("BlockedReason"),
            "Cc": obj.get("Cc"),
            "CcFull": [EmailNameAddressPair.from_dict(_item) for _item in obj["CcFull"]] if obj.get("CcFull") is not None else None,
            "Date": obj.get("Date"),
            "From": obj.get("From"),
            "FromFull": InboundMessageDetailFromFull.from_dict(obj["FromFull"]) if obj.get("FromFull") is not None else None,
            "FromName": obj.get("FromName"),
            "Headers": [MessageHeader.from_dict(_item) for _item in obj["Headers"]] if obj.get("Headers") is not None else None,
            "HtmlBody": obj.get("HtmlBody"),
            "MailboxHash": obj.get("MailboxHash"),
            "MessageID": obj.get("MessageID"),
            "OriginalRecipient": obj.get("OriginalRecipient"),
            "ReplyTo": obj.get("ReplyTo"),
            "Status": obj.get("Status"),
            "Subject": obj.get("Subject"),
            "Tag": obj.get("Tag"),
            "TextBody": obj.get("TextBody"),
            "To": obj.get("To"),
            "ToFull": [EmailNameAddressPair.from_dict(_item) for _item in obj["ToFull"]] if obj.get("ToFull") is not None else None
        })
        return _obj



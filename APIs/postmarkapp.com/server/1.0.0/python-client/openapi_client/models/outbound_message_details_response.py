# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.attachment import Attachment
from openapi_client.models.email_name_address_pair import EmailNameAddressPair
from openapi_client.models.message_event_details import MessageEventDetails
from typing import Optional, Set
from typing_extensions import Self

class OutboundMessageDetailsResponse(BaseModel):
    """
    OutboundMessageDetailsResponse
    """ # noqa: E501
    attachments: Optional[List[Attachment]] = Field(default=None, alias="Attachments")
    bcc: Optional[List[EmailNameAddressPair]] = Field(default=None, alias="Bcc")
    body: Optional[StrictStr] = Field(default=None, alias="Body")
    cc: Optional[List[EmailNameAddressPair]] = Field(default=None, alias="Cc")
    var_from: Optional[StrictStr] = Field(default=None, alias="From")
    html_body: Optional[StrictStr] = Field(default=None, alias="HtmlBody")
    message_events: Optional[List[MessageEventDetails]] = Field(default=None, alias="MessageEvents")
    message_id: Optional[StrictStr] = Field(default=None, alias="MessageID")
    received_at: Optional[datetime] = Field(default=None, alias="ReceivedAt")
    recipients: Optional[List[StrictStr]] = Field(default=None, alias="Recipients")
    status: Optional[StrictStr] = Field(default=None, alias="Status")
    subject: Optional[StrictStr] = Field(default=None, alias="Subject")
    tag: Optional[StrictStr] = Field(default=None, alias="Tag")
    text_body: Optional[StrictStr] = Field(default=None, alias="TextBody")
    to: Optional[List[EmailNameAddressPair]] = Field(default=None, alias="To")
    track_links: Optional[StrictStr] = Field(default=None, alias="TrackLinks")
    track_opens: Optional[StrictBool] = Field(default=None, alias="TrackOpens")
    __properties: ClassVar[List[str]] = ["Attachments", "Bcc", "Body", "Cc", "From", "HtmlBody", "MessageEvents", "MessageID", "ReceivedAt", "Recipients", "Status", "Subject", "Tag", "TextBody", "To", "TrackLinks", "TrackOpens"]

    @field_validator('track_links')
    def track_links_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'HtmlAndText', 'HtmlOnly', 'TextOnly']):
            raise ValueError("must be one of enum values ('None', 'HtmlAndText', 'HtmlOnly', 'TextOnly')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OutboundMessageDetailsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['Attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in bcc (list)
        _items = []
        if self.bcc:
            for _item_bcc in self.bcc:
                if _item_bcc:
                    _items.append(_item_bcc.to_dict())
            _dict['Bcc'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cc (list)
        _items = []
        if self.cc:
            for _item_cc in self.cc:
                if _item_cc:
                    _items.append(_item_cc.to_dict())
            _dict['Cc'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in message_events (list)
        _items = []
        if self.message_events:
            for _item_message_events in self.message_events:
                if _item_message_events:
                    _items.append(_item_message_events.to_dict())
            _dict['MessageEvents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in to (list)
        _items = []
        if self.to:
            for _item_to in self.to:
                if _item_to:
                    _items.append(_item_to.to_dict())
            _dict['To'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OutboundMessageDetailsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Attachments": [Attachment.from_dict(_item) for _item in obj["Attachments"]] if obj.get("Attachments") is not None else None,
            "Bcc": [EmailNameAddressPair.from_dict(_item) for _item in obj["Bcc"]] if obj.get("Bcc") is not None else None,
            "Body": obj.get("Body"),
            "Cc": [EmailNameAddressPair.from_dict(_item) for _item in obj["Cc"]] if obj.get("Cc") is not None else None,
            "From": obj.get("From"),
            "HtmlBody": obj.get("HtmlBody"),
            "MessageEvents": [MessageEventDetails.from_dict(_item) for _item in obj["MessageEvents"]] if obj.get("MessageEvents") is not None else None,
            "MessageID": obj.get("MessageID"),
            "ReceivedAt": obj.get("ReceivedAt"),
            "Recipients": obj.get("Recipients"),
            "Status": obj.get("Status"),
            "Subject": obj.get("Subject"),
            "Tag": obj.get("Tag"),
            "TextBody": obj.get("TextBody"),
            "To": [EmailNameAddressPair.from_dict(_item) for _item in obj["To"]] if obj.get("To") is not None else None,
            "TrackLinks": obj.get("TrackLinks"),
            "TrackOpens": obj.get("TrackOpens")
        })
        return _obj



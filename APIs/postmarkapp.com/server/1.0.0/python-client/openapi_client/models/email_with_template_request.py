# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.attachment import Attachment
from openapi_client.models.message_header import MessageHeader
from typing import Optional, Set
from typing_extensions import Self

class EmailWithTemplateRequest(BaseModel):
    """
    EmailWithTemplateRequest
    """ # noqa: E501
    attachments: Optional[List[Attachment]] = Field(default=None, alias="Attachments")
    bcc: Optional[StrictStr] = Field(default=None, alias="Bcc")
    cc: Optional[StrictStr] = Field(default=None, alias="Cc")
    var_from: StrictStr = Field(alias="From")
    headers: Optional[List[MessageHeader]] = Field(default=None, alias="Headers")
    inline_css: Optional[StrictBool] = Field(default=True, alias="InlineCss")
    reply_to: Optional[StrictStr] = Field(default=None, alias="ReplyTo")
    tag: Optional[StrictStr] = Field(default=None, alias="Tag")
    template_alias: StrictStr = Field(description="Required if 'TemplateId' is not specified.", alias="TemplateAlias")
    template_id: StrictInt = Field(description="Required if 'TemplateAlias' is not specified.", alias="TemplateId")
    template_model: Dict[str, Any] = Field(alias="TemplateModel")
    to: StrictStr = Field(alias="To")
    track_links: Optional[StrictStr] = Field(default=None, description="Replace links in content to enable \"click tracking\" stats. Default is 'null', which uses the server's LinkTracking setting'.", alias="TrackLinks")
    track_opens: Optional[StrictBool] = Field(default=None, description="Activate open tracking for this email.", alias="TrackOpens")
    __properties: ClassVar[List[str]] = ["Attachments", "Bcc", "Cc", "From", "Headers", "InlineCss", "ReplyTo", "Tag", "TemplateAlias", "TemplateId", "TemplateModel", "To", "TrackLinks", "TrackOpens"]

    @field_validator('track_links')
    def track_links_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'HtmlAndText', 'HtmlOnly', 'TextOnly']):
            raise ValueError("must be one of enum values ('None', 'HtmlAndText', 'HtmlOnly', 'TextOnly')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EmailWithTemplateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['Attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in headers (list)
        _items = []
        if self.headers:
            for _item_headers in self.headers:
                if _item_headers:
                    _items.append(_item_headers.to_dict())
            _dict['Headers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EmailWithTemplateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Attachments": [Attachment.from_dict(_item) for _item in obj["Attachments"]] if obj.get("Attachments") is not None else None,
            "Bcc": obj.get("Bcc"),
            "Cc": obj.get("Cc"),
            "From": obj.get("From"),
            "Headers": [MessageHeader.from_dict(_item) for _item in obj["Headers"]] if obj.get("Headers") is not None else None,
            "InlineCss": obj.get("InlineCss") if obj.get("InlineCss") is not None else True,
            "ReplyTo": obj.get("ReplyTo"),
            "Tag": obj.get("Tag"),
            "TemplateAlias": obj.get("TemplateAlias"),
            "TemplateId": obj.get("TemplateId"),
            "TemplateModel": obj.get("TemplateModel"),
            "To": obj.get("To"),
            "TrackLinks": obj.get("TrackLinks"),
            "TrackOpens": obj.get("TrackOpens")
        })
        return _obj



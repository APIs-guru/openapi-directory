# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TemplateDetailResponse(BaseModel):
    """
    TemplateDetailResponse
    """ # noqa: E501
    active: Optional[StrictBool] = Field(default=None, description="Indicates that this template may be used for sending email.", alias="Active")
    alias: Optional[StrictStr] = Field(default=None, description="The user-supplied alias for this template.", alias="Alias")
    associated_server_id: Optional[StrictInt] = Field(default=None, description="The ID of the Server with which this template is associated.", alias="AssociatedServerId")
    html_body: Optional[StrictStr] = Field(default=None, description="The content to use for the HtmlBody when this template is used to send email.", alias="HtmlBody")
    name: Optional[StrictStr] = Field(default=None, description="The display name for the template.", alias="Name")
    subject: Optional[StrictStr] = Field(default=None, description="The content to use for the Subject when this template is used to send email.", alias="Subject")
    template_id: Optional[StrictInt] = Field(default=None, description="The ID associated with the template.", alias="TemplateID")
    text_body: Optional[StrictStr] = Field(default=None, description="The content to use for the TextBody when this template is used to send email.", alias="TextBody")
    __properties: ClassVar[List[str]] = ["Active", "Alias", "AssociatedServerId", "HtmlBody", "Name", "Subject", "TemplateID", "TextBody"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TemplateDetailResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TemplateDetailResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Active": obj.get("Active"),
            "Alias": obj.get("Alias"),
            "AssociatedServerId": obj.get("AssociatedServerId"),
            "HtmlBody": obj.get("HtmlBody"),
            "Name": obj.get("Name"),
            "Subject": obj.get("Subject"),
            "TemplateID": obj.get("TemplateID"),
            "TextBody": obj.get("TextBody")
        })
        return _obj



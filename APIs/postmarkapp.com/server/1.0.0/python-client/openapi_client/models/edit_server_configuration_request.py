# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EditServerConfigurationRequest(BaseModel):
    """
    EditServerConfigurationRequest
    """ # noqa: E501
    bounce_hook_url: Optional[StrictStr] = Field(default=None, alias="BounceHookUrl")
    click_hook_url: Optional[StrictStr] = Field(default=None, description="Webhook url allowing real-time notification when tracked links are clicked.", alias="ClickHookUrl")
    color: Optional[StrictStr] = Field(default=None, alias="Color")
    delivery_hook_url: Optional[StrictStr] = Field(default=None, alias="DeliveryHookUrl")
    inbound_domain: Optional[StrictStr] = Field(default=None, alias="InboundDomain")
    inbound_hook_url: Optional[StrictStr] = Field(default=None, alias="InboundHookUrl")
    inbound_spam_threshold: Optional[StrictInt] = Field(default=None, alias="InboundSpamThreshold")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    open_hook_url: Optional[StrictStr] = Field(default=None, alias="OpenHookUrl")
    post_first_open_only: Optional[StrictBool] = Field(default=None, alias="PostFirstOpenOnly")
    raw_email_enabled: Optional[StrictBool] = Field(default=None, alias="RawEmailEnabled")
    smtp_api_activated: Optional[StrictBool] = Field(default=None, alias="SmtpApiActivated")
    track_links: Optional[StrictStr] = Field(default=None, alias="TrackLinks")
    track_opens: Optional[StrictBool] = Field(default=None, alias="TrackOpens")
    __properties: ClassVar[List[str]] = ["BounceHookUrl", "ClickHookUrl", "Color", "DeliveryHookUrl", "InboundDomain", "InboundHookUrl", "InboundSpamThreshold", "Name", "OpenHookUrl", "PostFirstOpenOnly", "RawEmailEnabled", "SmtpApiActivated", "TrackLinks", "TrackOpens"]

    @field_validator('color')
    def color_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['purple', 'blue', 'turqoise', 'green', 'red', 'yellow', 'grey']):
            raise ValueError("must be one of enum values ('purple', 'blue', 'turqoise', 'green', 'red', 'yellow', 'grey')")
        return value

    @field_validator('track_links')
    def track_links_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'HtmlAndText', 'HtmlOnly', 'TextOnly']):
            raise ValueError("must be one of enum values ('None', 'HtmlAndText', 'HtmlOnly', 'TextOnly')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EditServerConfigurationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EditServerConfigurationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "BounceHookUrl": obj.get("BounceHookUrl"),
            "ClickHookUrl": obj.get("ClickHookUrl"),
            "Color": obj.get("Color"),
            "DeliveryHookUrl": obj.get("DeliveryHookUrl"),
            "InboundDomain": obj.get("InboundDomain"),
            "InboundHookUrl": obj.get("InboundHookUrl"),
            "InboundSpamThreshold": obj.get("InboundSpamThreshold"),
            "Name": obj.get("Name"),
            "OpenHookUrl": obj.get("OpenHookUrl"),
            "PostFirstOpenOnly": obj.get("PostFirstOpenOnly"),
            "RawEmailEnabled": obj.get("RawEmailEnabled"),
            "SmtpApiActivated": obj.get("SmtpApiActivated"),
            "TrackLinks": obj.get("TrackLinks"),
            "TrackOpens": obj.get("TrackOpens")
        })
        return _obj



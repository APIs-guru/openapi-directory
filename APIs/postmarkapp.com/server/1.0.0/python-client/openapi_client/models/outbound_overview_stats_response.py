# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OutboundOverviewStatsResponse(BaseModel):
    """
    
    """ # noqa: E501
    bounce_rate: Optional[StrictInt] = Field(default=None, alias="BounceRate")
    bounced: Optional[StrictInt] = Field(default=None, alias="Bounced")
    opens: Optional[StrictInt] = Field(default=None, alias="Opens")
    smtpapi_errors: Optional[StrictInt] = Field(default=None, alias="SMTPAPIErrors")
    sent: Optional[StrictInt] = Field(default=None, alias="Sent")
    spam_complaints: Optional[StrictInt] = Field(default=None, alias="SpamComplaints")
    spam_complaints_rate: Optional[StrictInt] = Field(default=None, alias="SpamComplaintsRate")
    total_clicks: Optional[StrictInt] = Field(default=None, alias="TotalClicks")
    total_tracked_links_sent: Optional[StrictInt] = Field(default=None, alias="TotalTrackedLinksSent")
    tracked: Optional[StrictInt] = Field(default=None, alias="Tracked")
    unique_links_clicked: Optional[StrictInt] = Field(default=None, alias="UniqueLinksClicked")
    unique_opens: Optional[StrictInt] = Field(default=None, alias="UniqueOpens")
    with_client_recorded: Optional[StrictInt] = Field(default=None, alias="WithClientRecorded")
    with_link_tracking: Optional[StrictInt] = Field(default=None, alias="WithLinkTracking")
    with_open_tracking: Optional[StrictInt] = Field(default=None, alias="WithOpenTracking")
    with_platform_recorded: Optional[StrictInt] = Field(default=None, alias="WithPlatformRecorded")
    __properties: ClassVar[List[str]] = ["BounceRate", "Bounced", "Opens", "SMTPAPIErrors", "Sent", "SpamComplaints", "SpamComplaintsRate", "TotalClicks", "TotalTrackedLinksSent", "Tracked", "UniqueLinksClicked", "UniqueOpens", "WithClientRecorded", "WithLinkTracking", "WithOpenTracking", "WithPlatformRecorded"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OutboundOverviewStatsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OutboundOverviewStatsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "BounceRate": obj.get("BounceRate"),
            "Bounced": obj.get("Bounced"),
            "Opens": obj.get("Opens"),
            "SMTPAPIErrors": obj.get("SMTPAPIErrors"),
            "Sent": obj.get("Sent"),
            "SpamComplaints": obj.get("SpamComplaints"),
            "SpamComplaintsRate": obj.get("SpamComplaintsRate"),
            "TotalClicks": obj.get("TotalClicks"),
            "TotalTrackedLinksSent": obj.get("TotalTrackedLinksSent"),
            "Tracked": obj.get("Tracked"),
            "UniqueLinksClicked": obj.get("UniqueLinksClicked"),
            "UniqueOpens": obj.get("UniqueOpens"),
            "WithClientRecorded": obj.get("WithClientRecorded"),
            "WithLinkTracking": obj.get("WithLinkTracking"),
            "WithOpenTracking": obj.get("WithOpenTracking"),
            "WithPlatformRecorded": obj.get("WithPlatformRecorded")
        })
        return _obj



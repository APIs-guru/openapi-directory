# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TemplateValidationRequest(BaseModel):
    """
    TemplateValidationRequest
    """ # noqa: E501
    html_body: Optional[StrictStr] = Field(default=None, description="The html body content to validate. Must be specified if Subject or TextBody are not. See our template language documentation for more information on the syntax for this field. ", alias="HtmlBody")
    inline_css_for_html_test_render: Optional[StrictBool] = Field(default=True, description="When HtmlBody is specified, the test render will have style blocks inlined as style attributes on matching html elements. You may disable the css inlining behavior by passing false for this parameter. ", alias="InlineCssForHtmlTestRender")
    subject: Optional[StrictStr] = Field(default=None, description="The subject content to validate. Must be specified if HtmlBody or TextBody are not. See our template language documentation for more information on the syntax for this field. ", alias="Subject")
    test_render_model: Optional[Dict[str, Any]] = Field(default=None, description="The model to be used when rendering test content.", alias="TestRenderModel")
    text_body: Optional[StrictStr] = Field(default=None, description="The text body content to validate. Must be specified if HtmlBody or Subject are not. See our template language documentation for more information on the syntax for this field. ", alias="TextBody")
    __properties: ClassVar[List[str]] = ["HtmlBody", "InlineCssForHtmlTestRender", "Subject", "TestRenderModel", "TextBody"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TemplateValidationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TemplateValidationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "HtmlBody": obj.get("HtmlBody"),
            "InlineCssForHtmlTestRender": obj.get("InlineCssForHtmlTestRender") if obj.get("InlineCssForHtmlTestRender") is not None else True,
            "Subject": obj.get("Subject"),
            "TestRenderModel": obj.get("TestRenderModel"),
            "TextBody": obj.get("TextBody")
        })
        return _obj



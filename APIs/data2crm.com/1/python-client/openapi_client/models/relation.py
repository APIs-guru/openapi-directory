# coding: utf-8

"""
    Data2CRM.API

    <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.account_relation import AccountRelation
from openapi_client.models.attachment_relation import AttachmentRelation
from openapi_client.models.call_relation import CallRelation
from openapi_client.models.campaign_relation import CampaignRelation
from openapi_client.models.case_relation import CaseRelation
from openapi_client.models.comment_relation import CommentRelation
from openapi_client.models.contact_relation import ContactRelation
from openapi_client.models.email_relation import EmailRelation
from openapi_client.models.event_relation import EventRelation
from openapi_client.models.invoice_item_relation import InvoiceItemRelation
from openapi_client.models.invoice_relation import InvoiceRelation
from openapi_client.models.lead_relation import LeadRelation
from openapi_client.models.meeting_relation import MeetingRelation
from openapi_client.models.note_relation import NoteRelation
from openapi_client.models.opportunity_product_relation import OpportunityProductRelation
from openapi_client.models.opportunity_relation import OpportunityRelation
from openapi_client.models.post_relation import PostRelation
from openapi_client.models.price_book_item_relation import PriceBookItemRelation
from openapi_client.models.price_book_relation import PriceBookRelation
from openapi_client.models.product_relation import ProductRelation
from openapi_client.models.project_relation import ProjectRelation
from openapi_client.models.quote_item_relation import QuoteItemRelation
from openapi_client.models.quote_relation import QuoteRelation
from openapi_client.models.tag_relation import TagRelation
from openapi_client.models.task_relation import TaskRelation
from openapi_client.models.ticket_relation import TicketRelation
from openapi_client.models.user_relation import UserRelation
from typing import Optional, Set
from typing_extensions import Self

class Relation(BaseModel):
    """
    Relation
    """ # noqa: E501
    account: Optional[List[AccountRelation]] = Field(default=None, description="Account")
    attachment: Optional[List[AttachmentRelation]] = Field(default=None, description="Attachment")
    call: Optional[List[CallRelation]] = Field(default=None, description="Call")
    campaign: Optional[List[CampaignRelation]] = Field(default=None, description="Campaign")
    case: Optional[List[CaseRelation]] = Field(default=None, description="Case")
    comment: Optional[List[CommentRelation]] = Field(default=None, description="Comment")
    contact: Optional[List[ContactRelation]] = Field(default=None, description="Contact")
    email: Optional[List[EmailRelation]] = Field(default=None, description="Email")
    event: Optional[List[EventRelation]] = Field(default=None, description="Event")
    invoice: Optional[List[InvoiceRelation]] = Field(default=None, description="Invoice")
    invoice_item: Optional[List[InvoiceItemRelation]] = Field(default=None, description="Invoice Item", alias="invoiceItem")
    lead: Optional[List[LeadRelation]] = Field(default=None, description="Lead")
    meeting: Optional[List[MeetingRelation]] = Field(default=None, description="Meeting")
    note: Optional[List[NoteRelation]] = Field(default=None, description="Note")
    opportunity: Optional[List[OpportunityRelation]] = Field(default=None, description="Opportunity")
    opportunity_product: Optional[List[OpportunityProductRelation]] = Field(default=None, description="Opportunity Product", alias="opportunityProduct")
    post: Optional[List[PostRelation]] = Field(default=None, description="Post")
    price_book: Optional[List[PriceBookRelation]] = Field(default=None, description="Price Book", alias="priceBook")
    price_book_item: Optional[List[PriceBookItemRelation]] = Field(default=None, description="Price Book Item", alias="priceBookItem")
    product: Optional[List[ProductRelation]] = Field(default=None, description="Product")
    project: Optional[List[ProjectRelation]] = Field(default=None, description="Project")
    quote: Optional[List[QuoteRelation]] = Field(default=None, description="Quote")
    quote_item: Optional[List[QuoteItemRelation]] = Field(default=None, description="Quote Item", alias="quoteItem")
    tag: Optional[List[TagRelation]] = Field(default=None, description="Tag")
    task: Optional[List[TaskRelation]] = Field(default=None, description="Task")
    ticket: Optional[List[TicketRelation]] = Field(default=None, description="Ticket")
    user: Optional[List[UserRelation]] = Field(default=None, description="User")
    __properties: ClassVar[List[str]] = ["account", "attachment", "call", "campaign", "case", "comment", "contact", "email", "event", "invoice", "invoiceItem", "lead", "meeting", "note", "opportunity", "opportunityProduct", "post", "priceBook", "priceBookItem", "product", "project", "quote", "quoteItem", "tag", "task", "ticket", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Relation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in account (list)
        _items = []
        if self.account:
            for _item_account in self.account:
                if _item_account:
                    _items.append(_item_account.to_dict())
            _dict['account'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attachment (list)
        _items = []
        if self.attachment:
            for _item_attachment in self.attachment:
                if _item_attachment:
                    _items.append(_item_attachment.to_dict())
            _dict['attachment'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in call (list)
        _items = []
        if self.call:
            for _item_call in self.call:
                if _item_call:
                    _items.append(_item_call.to_dict())
            _dict['call'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in campaign (list)
        _items = []
        if self.campaign:
            for _item_campaign in self.campaign:
                if _item_campaign:
                    _items.append(_item_campaign.to_dict())
            _dict['campaign'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in case (list)
        _items = []
        if self.case:
            for _item_case in self.case:
                if _item_case:
                    _items.append(_item_case.to_dict())
            _dict['case'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in comment (list)
        _items = []
        if self.comment:
            for _item_comment in self.comment:
                if _item_comment:
                    _items.append(_item_comment.to_dict())
            _dict['comment'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in contact (list)
        _items = []
        if self.contact:
            for _item_contact in self.contact:
                if _item_contact:
                    _items.append(_item_contact.to_dict())
            _dict['contact'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in email (list)
        _items = []
        if self.email:
            for _item_email in self.email:
                if _item_email:
                    _items.append(_item_email.to_dict())
            _dict['email'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in event (list)
        _items = []
        if self.event:
            for _item_event in self.event:
                if _item_event:
                    _items.append(_item_event.to_dict())
            _dict['event'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in invoice (list)
        _items = []
        if self.invoice:
            for _item_invoice in self.invoice:
                if _item_invoice:
                    _items.append(_item_invoice.to_dict())
            _dict['invoice'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in invoice_item (list)
        _items = []
        if self.invoice_item:
            for _item_invoice_item in self.invoice_item:
                if _item_invoice_item:
                    _items.append(_item_invoice_item.to_dict())
            _dict['invoiceItem'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in lead (list)
        _items = []
        if self.lead:
            for _item_lead in self.lead:
                if _item_lead:
                    _items.append(_item_lead.to_dict())
            _dict['lead'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in meeting (list)
        _items = []
        if self.meeting:
            for _item_meeting in self.meeting:
                if _item_meeting:
                    _items.append(_item_meeting.to_dict())
            _dict['meeting'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in note (list)
        _items = []
        if self.note:
            for _item_note in self.note:
                if _item_note:
                    _items.append(_item_note.to_dict())
            _dict['note'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in opportunity (list)
        _items = []
        if self.opportunity:
            for _item_opportunity in self.opportunity:
                if _item_opportunity:
                    _items.append(_item_opportunity.to_dict())
            _dict['opportunity'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in opportunity_product (list)
        _items = []
        if self.opportunity_product:
            for _item_opportunity_product in self.opportunity_product:
                if _item_opportunity_product:
                    _items.append(_item_opportunity_product.to_dict())
            _dict['opportunityProduct'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in post (list)
        _items = []
        if self.post:
            for _item_post in self.post:
                if _item_post:
                    _items.append(_item_post.to_dict())
            _dict['post'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in price_book (list)
        _items = []
        if self.price_book:
            for _item_price_book in self.price_book:
                if _item_price_book:
                    _items.append(_item_price_book.to_dict())
            _dict['priceBook'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in price_book_item (list)
        _items = []
        if self.price_book_item:
            for _item_price_book_item in self.price_book_item:
                if _item_price_book_item:
                    _items.append(_item_price_book_item.to_dict())
            _dict['priceBookItem'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in product (list)
        _items = []
        if self.product:
            for _item_product in self.product:
                if _item_product:
                    _items.append(_item_product.to_dict())
            _dict['product'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in project (list)
        _items = []
        if self.project:
            for _item_project in self.project:
                if _item_project:
                    _items.append(_item_project.to_dict())
            _dict['project'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in quote (list)
        _items = []
        if self.quote:
            for _item_quote in self.quote:
                if _item_quote:
                    _items.append(_item_quote.to_dict())
            _dict['quote'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in quote_item (list)
        _items = []
        if self.quote_item:
            for _item_quote_item in self.quote_item:
                if _item_quote_item:
                    _items.append(_item_quote_item.to_dict())
            _dict['quoteItem'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tag (list)
        _items = []
        if self.tag:
            for _item_tag in self.tag:
                if _item_tag:
                    _items.append(_item_tag.to_dict())
            _dict['tag'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in task (list)
        _items = []
        if self.task:
            for _item_task in self.task:
                if _item_task:
                    _items.append(_item_task.to_dict())
            _dict['task'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ticket (list)
        _items = []
        if self.ticket:
            for _item_ticket in self.ticket:
                if _item_ticket:
                    _items.append(_item_ticket.to_dict())
            _dict['ticket'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in user (list)
        _items = []
        if self.user:
            for _item_user in self.user:
                if _item_user:
                    _items.append(_item_user.to_dict())
            _dict['user'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Relation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account": [AccountRelation.from_dict(_item) for _item in obj["account"]] if obj.get("account") is not None else None,
            "attachment": [AttachmentRelation.from_dict(_item) for _item in obj["attachment"]] if obj.get("attachment") is not None else None,
            "call": [CallRelation.from_dict(_item) for _item in obj["call"]] if obj.get("call") is not None else None,
            "campaign": [CampaignRelation.from_dict(_item) for _item in obj["campaign"]] if obj.get("campaign") is not None else None,
            "case": [CaseRelation.from_dict(_item) for _item in obj["case"]] if obj.get("case") is not None else None,
            "comment": [CommentRelation.from_dict(_item) for _item in obj["comment"]] if obj.get("comment") is not None else None,
            "contact": [ContactRelation.from_dict(_item) for _item in obj["contact"]] if obj.get("contact") is not None else None,
            "email": [EmailRelation.from_dict(_item) for _item in obj["email"]] if obj.get("email") is not None else None,
            "event": [EventRelation.from_dict(_item) for _item in obj["event"]] if obj.get("event") is not None else None,
            "invoice": [InvoiceRelation.from_dict(_item) for _item in obj["invoice"]] if obj.get("invoice") is not None else None,
            "invoiceItem": [InvoiceItemRelation.from_dict(_item) for _item in obj["invoiceItem"]] if obj.get("invoiceItem") is not None else None,
            "lead": [LeadRelation.from_dict(_item) for _item in obj["lead"]] if obj.get("lead") is not None else None,
            "meeting": [MeetingRelation.from_dict(_item) for _item in obj["meeting"]] if obj.get("meeting") is not None else None,
            "note": [NoteRelation.from_dict(_item) for _item in obj["note"]] if obj.get("note") is not None else None,
            "opportunity": [OpportunityRelation.from_dict(_item) for _item in obj["opportunity"]] if obj.get("opportunity") is not None else None,
            "opportunityProduct": [OpportunityProductRelation.from_dict(_item) for _item in obj["opportunityProduct"]] if obj.get("opportunityProduct") is not None else None,
            "post": [PostRelation.from_dict(_item) for _item in obj["post"]] if obj.get("post") is not None else None,
            "priceBook": [PriceBookRelation.from_dict(_item) for _item in obj["priceBook"]] if obj.get("priceBook") is not None else None,
            "priceBookItem": [PriceBookItemRelation.from_dict(_item) for _item in obj["priceBookItem"]] if obj.get("priceBookItem") is not None else None,
            "product": [ProductRelation.from_dict(_item) for _item in obj["product"]] if obj.get("product") is not None else None,
            "project": [ProjectRelation.from_dict(_item) for _item in obj["project"]] if obj.get("project") is not None else None,
            "quote": [QuoteRelation.from_dict(_item) for _item in obj["quote"]] if obj.get("quote") is not None else None,
            "quoteItem": [QuoteItemRelation.from_dict(_item) for _item in obj["quoteItem"]] if obj.get("quoteItem") is not None else None,
            "tag": [TagRelation.from_dict(_item) for _item in obj["tag"]] if obj.get("tag") is not None else None,
            "task": [TaskRelation.from_dict(_item) for _item in obj["task"]] if obj.get("task") is not None else None,
            "ticket": [TicketRelation.from_dict(_item) for _item in obj["ticket"]] if obj.get("ticket") is not None else None,
            "user": [UserRelation.from_dict(_item) for _item in obj["user"]] if obj.get("user") is not None else None
        })
        return _obj



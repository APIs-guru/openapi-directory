# coding: utf-8

"""
    Data2CRM.API

    <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FieldEntity(BaseModel):
    """
    FieldEntity
    """ # noqa: E501
    array_item: Optional[StrictStr] = Field(default=None, description="Array Item", alias="arrayItem")
    entity: Optional[List[StrictStr]] = Field(default=None, description="Entity")
    format: Optional[StrictStr] = Field(default=None, description="Format")
    id: Optional[StrictStr] = Field(default=None, description="Field Identifier")
    is_enum: Optional[StrictBool] = Field(default=None, description="Is Enum", alias="isEnum")
    label: Optional[StrictStr] = Field(default=None, description="Label")
    limit: Optional[StrictInt] = Field(default=None, description="Limit")
    methods: Optional[Dict[str, Any]] = None
    name: Optional[StrictStr] = Field(default=None, description="Name")
    relation: Optional[List[StrictStr]] = Field(default=None, description="Relation")
    type: Optional[StrictStr] = Field(default=None, description="Type")
    __properties: ClassVar[List[str]] = ["arrayItem", "entity", "format", "id", "isEnum", "label", "limit", "methods", "name", "relation", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FieldEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FieldEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "arrayItem": obj.get("arrayItem"),
            "entity": obj.get("entity"),
            "format": obj.get("format"),
            "id": obj.get("id"),
            "isEnum": obj.get("isEnum"),
            "label": obj.get("label"),
            "limit": obj.get("limit"),
            "methods": obj.get("methods"),
            "name": obj.get("name"),
            "relation": obj.get("relation"),
            "type": obj.get("type")
        })
        return _obj



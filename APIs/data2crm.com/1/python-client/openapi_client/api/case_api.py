# coding: utf-8

"""
    Data2CRM.API

    <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.aggregate import Aggregate
from openapi_client.models.bulk_entity import BulkEntity
from openapi_client.models.bulk_entity_relation import BulkEntityRelation
from openapi_client.models.case_describe import CaseDescribe
from openapi_client.models.cases_entity import CasesEntity
from openapi_client.models.cases_entity_relation import CasesEntityRelation
from openapi_client.models.count import Count

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class CaseApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_case_entity(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        body: Annotated[CasesEntity, Field(description="Add case into the system")],
        x_api2_crm_native_enable: Annotated[Optional[StrictStr], Field(description="Return native response")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CasesEntityRelation:
        """POST for case

        Add case into the system

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param body: Add case into the system (required)
        :type body: CasesEntity
        :param x_api2_crm_native_enable: Return native response
        :type x_api2_crm_native_enable: str
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_case_entity_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            body=body,
            x_api2_crm_native_enable=x_api2_crm_native_enable,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CasesEntityRelation",
            '400': None,
            '404': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_case_entity_with_http_info(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        body: Annotated[CasesEntity, Field(description="Add case into the system")],
        x_api2_crm_native_enable: Annotated[Optional[StrictStr], Field(description="Return native response")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CasesEntityRelation]:
        """POST for case

        Add case into the system

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param body: Add case into the system (required)
        :type body: CasesEntity
        :param x_api2_crm_native_enable: Return native response
        :type x_api2_crm_native_enable: str
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_case_entity_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            body=body,
            x_api2_crm_native_enable=x_api2_crm_native_enable,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CasesEntityRelation",
            '400': None,
            '404': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_case_entity_without_preload_content(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        body: Annotated[CasesEntity, Field(description="Add case into the system")],
        x_api2_crm_native_enable: Annotated[Optional[StrictStr], Field(description="Return native response")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """POST for case

        Add case into the system

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param body: Add case into the system (required)
        :type body: CasesEntity
        :param x_api2_crm_native_enable: Return native response
        :type x_api2_crm_native_enable: str
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_case_entity_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            body=body,
            x_api2_crm_native_enable=x_api2_crm_native_enable,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CasesEntityRelation",
            '400': None,
            '404': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_case_entity_serialize(
        self,
        x_api2_crm_user_key,
        x_api2_crm_application_key,
        body,
        x_api2_crm_native_enable,
        x_api2_crm_describe_lifetime,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_api2_crm_user_key is not None:
            _header_params['X-API2CRM-USER-KEY'] = x_api2_crm_user_key
        if x_api2_crm_application_key is not None:
            _header_params['X-API2CRM-APPLICATION-KEY'] = x_api2_crm_application_key
        if x_api2_crm_native_enable is not None:
            _header_params['X-API2CRM-NATIVE-ENABLE'] = x_api2_crm_native_enable
        if x_api2_crm_describe_lifetime is not None:
            _header_params['X-API2CRM-DESCRIBE-LIFETIME'] = x_api2_crm_describe_lifetime
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/application/entity/case',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_case_entity_bulk(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        body: Annotated[BulkEntity, Field(description="Add case into the system")],
        x_api2_crm_native_enable: Annotated[Optional[StrictStr], Field(description="Return native response")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BulkEntityRelation:
        """POST bulk  for case

        Add case into the system

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param body: Add case into the system (required)
        :type body: BulkEntity
        :param x_api2_crm_native_enable: Return native response
        :type x_api2_crm_native_enable: str
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_case_entity_bulk_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            body=body,
            x_api2_crm_native_enable=x_api2_crm_native_enable,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "BulkEntityRelation",
            '400': None,
            '404': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_case_entity_bulk_with_http_info(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        body: Annotated[BulkEntity, Field(description="Add case into the system")],
        x_api2_crm_native_enable: Annotated[Optional[StrictStr], Field(description="Return native response")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BulkEntityRelation]:
        """POST bulk  for case

        Add case into the system

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param body: Add case into the system (required)
        :type body: BulkEntity
        :param x_api2_crm_native_enable: Return native response
        :type x_api2_crm_native_enable: str
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_case_entity_bulk_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            body=body,
            x_api2_crm_native_enable=x_api2_crm_native_enable,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "BulkEntityRelation",
            '400': None,
            '404': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_case_entity_bulk_without_preload_content(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        body: Annotated[BulkEntity, Field(description="Add case into the system")],
        x_api2_crm_native_enable: Annotated[Optional[StrictStr], Field(description="Return native response")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """POST bulk  for case

        Add case into the system

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param body: Add case into the system (required)
        :type body: BulkEntity
        :param x_api2_crm_native_enable: Return native response
        :type x_api2_crm_native_enable: str
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_case_entity_bulk_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            body=body,
            x_api2_crm_native_enable=x_api2_crm_native_enable,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "BulkEntityRelation",
            '400': None,
            '404': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_case_entity_bulk_serialize(
        self,
        x_api2_crm_user_key,
        x_api2_crm_application_key,
        body,
        x_api2_crm_native_enable,
        x_api2_crm_describe_lifetime,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_api2_crm_user_key is not None:
            _header_params['X-API2CRM-USER-KEY'] = x_api2_crm_user_key
        if x_api2_crm_application_key is not None:
            _header_params['X-API2CRM-APPLICATION-KEY'] = x_api2_crm_application_key
        if x_api2_crm_native_enable is not None:
            _header_params['X-API2CRM-NATIVE-ENABLE'] = x_api2_crm_native_enable
        if x_api2_crm_describe_lifetime is not None:
            _header_params['X-API2CRM-DESCRIBE-LIFETIME'] = x_api2_crm_describe_lifetime
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/application/entity/case/bulk',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_case_collection_bulk(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        body: BulkEntity,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BulkEntity:
        """DELETE bulk  for case


        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param body: (required)
        :type body: BulkEntity
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_case_collection_bulk_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BulkEntity",
            '204': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_case_collection_bulk_with_http_info(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        body: BulkEntity,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BulkEntity]:
        """DELETE bulk  for case


        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param body: (required)
        :type body: BulkEntity
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_case_collection_bulk_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BulkEntity",
            '204': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_case_collection_bulk_without_preload_content(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        body: BulkEntity,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """DELETE bulk  for case


        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param body: (required)
        :type body: BulkEntity
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_case_collection_bulk_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BulkEntity",
            '204': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_case_collection_bulk_serialize(
        self,
        x_api2_crm_user_key,
        x_api2_crm_application_key,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_api2_crm_user_key is not None:
            _header_params['X-API2CRM-USER-KEY'] = x_api2_crm_user_key
        if x_api2_crm_application_key is not None:
            _header_params['X-API2CRM-APPLICATION-KEY'] = x_api2_crm_application_key
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/application/entity/case/bulk',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_case_entity(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        case_id: Annotated[StrictStr, Field(description="Case Identifier")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """DELETE for case

        Delete case information

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param case_id: Case Identifier (required)
        :type case_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_case_entity_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            case_id=case_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_case_entity_with_http_info(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        case_id: Annotated[StrictStr, Field(description="Case Identifier")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """DELETE for case

        Delete case information

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param case_id: Case Identifier (required)
        :type case_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_case_entity_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            case_id=case_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_case_entity_without_preload_content(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        case_id: Annotated[StrictStr, Field(description="Case Identifier")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """DELETE for case

        Delete case information

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param case_id: Case Identifier (required)
        :type case_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_case_entity_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            case_id=case_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_case_entity_serialize(
        self,
        x_api2_crm_user_key,
        x_api2_crm_application_key,
        case_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if case_id is not None:
            _path_params['case_id'] = case_id
        # process the query parameters
        # process the header parameters
        if x_api2_crm_user_key is not None:
            _header_params['X-API2CRM-USER-KEY'] = x_api2_crm_user_key
        if x_api2_crm_application_key is not None:
            _header_params['X-API2CRM-APPLICATION-KEY'] = x_api2_crm_application_key
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/application/entity/case/{case_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_case_aggregate(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        x_api2_crm_native_enable: Annotated[Optional[StrictStr], Field(description="Return native response")] = None,
        x_api2_crm_data_enable: Annotated[Optional[StrictStr], Field(description="Data Enable")] = None,
        x_api2_crm_data_build: Annotated[Optional[StrictStr], Field(description="Data Build")] = None,
        x_api2_crm_data_is_final: Annotated[Optional[StrictStr], Field(description="Data Is Final")] = None,
        x_api2_crm_data_strategy: Annotated[Optional[StrictStr], Field(description="Data Strategy")] = None,
        x_api2_crm_data_coherent_entities: Annotated[Optional[StrictStr], Field(description="Coherent Entities")] = None,
        x_api2_crm_data_always_actual: Annotated[Optional[StrictStr], Field(description="Data Is Actual")] = None,
        x_api2_crm_data_actual_at: Annotated[Optional[datetime], Field(description="Data Actual At")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        pipeline: Annotated[Optional[StrictStr], Field(description="Pipeline")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Aggregate:
        """AGGREGATE for case

        Returns aggregate for cases

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param x_api2_crm_native_enable: Return native response
        :type x_api2_crm_native_enable: str
        :param x_api2_crm_data_enable: Data Enable
        :type x_api2_crm_data_enable: str
        :param x_api2_crm_data_build: Data Build
        :type x_api2_crm_data_build: str
        :param x_api2_crm_data_is_final: Data Is Final
        :type x_api2_crm_data_is_final: str
        :param x_api2_crm_data_strategy: Data Strategy
        :type x_api2_crm_data_strategy: str
        :param x_api2_crm_data_coherent_entities: Coherent Entities
        :type x_api2_crm_data_coherent_entities: str
        :param x_api2_crm_data_always_actual: Data Is Actual
        :type x_api2_crm_data_always_actual: str
        :param x_api2_crm_data_actual_at: Data Actual At
        :type x_api2_crm_data_actual_at: datetime
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param filter: Filter
        :type filter: str
        :param pipeline: Pipeline
        :type pipeline: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_case_aggregate_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            x_api2_crm_native_enable=x_api2_crm_native_enable,
            x_api2_crm_data_enable=x_api2_crm_data_enable,
            x_api2_crm_data_build=x_api2_crm_data_build,
            x_api2_crm_data_is_final=x_api2_crm_data_is_final,
            x_api2_crm_data_strategy=x_api2_crm_data_strategy,
            x_api2_crm_data_coherent_entities=x_api2_crm_data_coherent_entities,
            x_api2_crm_data_always_actual=x_api2_crm_data_always_actual,
            x_api2_crm_data_actual_at=x_api2_crm_data_actual_at,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            filter=filter,
            pipeline=pipeline,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Aggregate",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_case_aggregate_with_http_info(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        x_api2_crm_native_enable: Annotated[Optional[StrictStr], Field(description="Return native response")] = None,
        x_api2_crm_data_enable: Annotated[Optional[StrictStr], Field(description="Data Enable")] = None,
        x_api2_crm_data_build: Annotated[Optional[StrictStr], Field(description="Data Build")] = None,
        x_api2_crm_data_is_final: Annotated[Optional[StrictStr], Field(description="Data Is Final")] = None,
        x_api2_crm_data_strategy: Annotated[Optional[StrictStr], Field(description="Data Strategy")] = None,
        x_api2_crm_data_coherent_entities: Annotated[Optional[StrictStr], Field(description="Coherent Entities")] = None,
        x_api2_crm_data_always_actual: Annotated[Optional[StrictStr], Field(description="Data Is Actual")] = None,
        x_api2_crm_data_actual_at: Annotated[Optional[datetime], Field(description="Data Actual At")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        pipeline: Annotated[Optional[StrictStr], Field(description="Pipeline")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Aggregate]:
        """AGGREGATE for case

        Returns aggregate for cases

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param x_api2_crm_native_enable: Return native response
        :type x_api2_crm_native_enable: str
        :param x_api2_crm_data_enable: Data Enable
        :type x_api2_crm_data_enable: str
        :param x_api2_crm_data_build: Data Build
        :type x_api2_crm_data_build: str
        :param x_api2_crm_data_is_final: Data Is Final
        :type x_api2_crm_data_is_final: str
        :param x_api2_crm_data_strategy: Data Strategy
        :type x_api2_crm_data_strategy: str
        :param x_api2_crm_data_coherent_entities: Coherent Entities
        :type x_api2_crm_data_coherent_entities: str
        :param x_api2_crm_data_always_actual: Data Is Actual
        :type x_api2_crm_data_always_actual: str
        :param x_api2_crm_data_actual_at: Data Actual At
        :type x_api2_crm_data_actual_at: datetime
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param filter: Filter
        :type filter: str
        :param pipeline: Pipeline
        :type pipeline: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_case_aggregate_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            x_api2_crm_native_enable=x_api2_crm_native_enable,
            x_api2_crm_data_enable=x_api2_crm_data_enable,
            x_api2_crm_data_build=x_api2_crm_data_build,
            x_api2_crm_data_is_final=x_api2_crm_data_is_final,
            x_api2_crm_data_strategy=x_api2_crm_data_strategy,
            x_api2_crm_data_coherent_entities=x_api2_crm_data_coherent_entities,
            x_api2_crm_data_always_actual=x_api2_crm_data_always_actual,
            x_api2_crm_data_actual_at=x_api2_crm_data_actual_at,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            filter=filter,
            pipeline=pipeline,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Aggregate",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_case_aggregate_without_preload_content(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        x_api2_crm_native_enable: Annotated[Optional[StrictStr], Field(description="Return native response")] = None,
        x_api2_crm_data_enable: Annotated[Optional[StrictStr], Field(description="Data Enable")] = None,
        x_api2_crm_data_build: Annotated[Optional[StrictStr], Field(description="Data Build")] = None,
        x_api2_crm_data_is_final: Annotated[Optional[StrictStr], Field(description="Data Is Final")] = None,
        x_api2_crm_data_strategy: Annotated[Optional[StrictStr], Field(description="Data Strategy")] = None,
        x_api2_crm_data_coherent_entities: Annotated[Optional[StrictStr], Field(description="Coherent Entities")] = None,
        x_api2_crm_data_always_actual: Annotated[Optional[StrictStr], Field(description="Data Is Actual")] = None,
        x_api2_crm_data_actual_at: Annotated[Optional[datetime], Field(description="Data Actual At")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        pipeline: Annotated[Optional[StrictStr], Field(description="Pipeline")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """AGGREGATE for case

        Returns aggregate for cases

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param x_api2_crm_native_enable: Return native response
        :type x_api2_crm_native_enable: str
        :param x_api2_crm_data_enable: Data Enable
        :type x_api2_crm_data_enable: str
        :param x_api2_crm_data_build: Data Build
        :type x_api2_crm_data_build: str
        :param x_api2_crm_data_is_final: Data Is Final
        :type x_api2_crm_data_is_final: str
        :param x_api2_crm_data_strategy: Data Strategy
        :type x_api2_crm_data_strategy: str
        :param x_api2_crm_data_coherent_entities: Coherent Entities
        :type x_api2_crm_data_coherent_entities: str
        :param x_api2_crm_data_always_actual: Data Is Actual
        :type x_api2_crm_data_always_actual: str
        :param x_api2_crm_data_actual_at: Data Actual At
        :type x_api2_crm_data_actual_at: datetime
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param filter: Filter
        :type filter: str
        :param pipeline: Pipeline
        :type pipeline: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_case_aggregate_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            x_api2_crm_native_enable=x_api2_crm_native_enable,
            x_api2_crm_data_enable=x_api2_crm_data_enable,
            x_api2_crm_data_build=x_api2_crm_data_build,
            x_api2_crm_data_is_final=x_api2_crm_data_is_final,
            x_api2_crm_data_strategy=x_api2_crm_data_strategy,
            x_api2_crm_data_coherent_entities=x_api2_crm_data_coherent_entities,
            x_api2_crm_data_always_actual=x_api2_crm_data_always_actual,
            x_api2_crm_data_actual_at=x_api2_crm_data_actual_at,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            filter=filter,
            pipeline=pipeline,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Aggregate",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_case_aggregate_serialize(
        self,
        x_api2_crm_user_key,
        x_api2_crm_application_key,
        x_api2_crm_native_enable,
        x_api2_crm_data_enable,
        x_api2_crm_data_build,
        x_api2_crm_data_is_final,
        x_api2_crm_data_strategy,
        x_api2_crm_data_coherent_entities,
        x_api2_crm_data_always_actual,
        x_api2_crm_data_actual_at,
        x_api2_crm_describe_lifetime,
        filter,
        pipeline,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if pipeline is not None:
            
            _query_params.append(('pipeline', pipeline))
            
        # process the header parameters
        if x_api2_crm_user_key is not None:
            _header_params['X-API2CRM-USER-KEY'] = x_api2_crm_user_key
        if x_api2_crm_application_key is not None:
            _header_params['X-API2CRM-APPLICATION-KEY'] = x_api2_crm_application_key
        if x_api2_crm_native_enable is not None:
            _header_params['X-API2CRM-NATIVE-ENABLE'] = x_api2_crm_native_enable
        if x_api2_crm_data_enable is not None:
            _header_params['X-API2CRM-DATA-ENABLE'] = x_api2_crm_data_enable
        if x_api2_crm_data_build is not None:
            _header_params['X-API2CRM-DATA-BUILD'] = x_api2_crm_data_build
        if x_api2_crm_data_is_final is not None:
            _header_params['X-API2CRM-DATA-IS-FINAL'] = x_api2_crm_data_is_final
        if x_api2_crm_data_strategy is not None:
            _header_params['X-API2CRM-DATA-STRATEGY'] = x_api2_crm_data_strategy
        if x_api2_crm_data_coherent_entities is not None:
            _header_params['X-API2CRM-DATA-COHERENT-ENTITIES'] = x_api2_crm_data_coherent_entities
        if x_api2_crm_data_always_actual is not None:
            _header_params['X-API2CRM-DATA-ALWAYS-ACTUAL'] = x_api2_crm_data_always_actual
        if x_api2_crm_data_actual_at is not None:
            _header_params['X-API2CRM-DATA-ACTUAL-AT'] = x_api2_crm_data_actual_at
        if x_api2_crm_describe_lifetime is not None:
            _header_params['X-API2CRM-DESCRIBE-LIFETIME'] = x_api2_crm_describe_lifetime
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/application/entity/case/aggregate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_case_collection(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        x_api2_crm_native_enable: Annotated[Optional[StrictStr], Field(description="Return native response")] = None,
        x_api2_crm_data_enable: Annotated[Optional[StrictStr], Field(description="Data Enable")] = None,
        x_api2_crm_data_build: Annotated[Optional[StrictStr], Field(description="Data Build")] = None,
        x_api2_crm_data_is_final: Annotated[Optional[StrictStr], Field(description="Data Is Final")] = None,
        x_api2_crm_data_strategy: Annotated[Optional[StrictStr], Field(description="Data Strategy")] = None,
        x_api2_crm_data_coherent_entities: Annotated[Optional[StrictStr], Field(description="Coherent Entities")] = None,
        x_api2_crm_data_always_actual: Annotated[Optional[StrictStr], Field(description="Data Is Actual")] = None,
        x_api2_crm_data_actual_at: Annotated[Optional[datetime], Field(description="Data Actual At")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Amount of results (default: 25)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page to show (default: 1)")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="Expand relations")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to include in the response")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Specifies ascending or descending sort on existing fields")] = None,
        unique: Annotated[Optional[StrictStr], Field(description="Find all unique values for selected field")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[CasesEntity]:
        """GET for case

        Returns all cases from the system

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param x_api2_crm_native_enable: Return native response
        :type x_api2_crm_native_enable: str
        :param x_api2_crm_data_enable: Data Enable
        :type x_api2_crm_data_enable: str
        :param x_api2_crm_data_build: Data Build
        :type x_api2_crm_data_build: str
        :param x_api2_crm_data_is_final: Data Is Final
        :type x_api2_crm_data_is_final: str
        :param x_api2_crm_data_strategy: Data Strategy
        :type x_api2_crm_data_strategy: str
        :param x_api2_crm_data_coherent_entities: Coherent Entities
        :type x_api2_crm_data_coherent_entities: str
        :param x_api2_crm_data_always_actual: Data Is Actual
        :type x_api2_crm_data_always_actual: str
        :param x_api2_crm_data_actual_at: Data Actual At
        :type x_api2_crm_data_actual_at: datetime
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param page_size: Amount of results (default: 25)
        :type page_size: int
        :param page: Page to show (default: 1)
        :type page: int
        :param filter: Filter
        :type filter: str
        :param expand: Expand relations
        :type expand: str
        :param fields: Comma-separated list of fields to include in the response
        :type fields: str
        :param sort: Specifies ascending or descending sort on existing fields
        :type sort: str
        :param unique: Find all unique values for selected field
        :type unique: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_case_collection_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            x_api2_crm_native_enable=x_api2_crm_native_enable,
            x_api2_crm_data_enable=x_api2_crm_data_enable,
            x_api2_crm_data_build=x_api2_crm_data_build,
            x_api2_crm_data_is_final=x_api2_crm_data_is_final,
            x_api2_crm_data_strategy=x_api2_crm_data_strategy,
            x_api2_crm_data_coherent_entities=x_api2_crm_data_coherent_entities,
            x_api2_crm_data_always_actual=x_api2_crm_data_always_actual,
            x_api2_crm_data_actual_at=x_api2_crm_data_actual_at,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            page_size=page_size,
            page=page,
            filter=filter,
            expand=expand,
            fields=fields,
            sort=sort,
            unique=unique,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[CasesEntity]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_case_collection_with_http_info(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        x_api2_crm_native_enable: Annotated[Optional[StrictStr], Field(description="Return native response")] = None,
        x_api2_crm_data_enable: Annotated[Optional[StrictStr], Field(description="Data Enable")] = None,
        x_api2_crm_data_build: Annotated[Optional[StrictStr], Field(description="Data Build")] = None,
        x_api2_crm_data_is_final: Annotated[Optional[StrictStr], Field(description="Data Is Final")] = None,
        x_api2_crm_data_strategy: Annotated[Optional[StrictStr], Field(description="Data Strategy")] = None,
        x_api2_crm_data_coherent_entities: Annotated[Optional[StrictStr], Field(description="Coherent Entities")] = None,
        x_api2_crm_data_always_actual: Annotated[Optional[StrictStr], Field(description="Data Is Actual")] = None,
        x_api2_crm_data_actual_at: Annotated[Optional[datetime], Field(description="Data Actual At")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Amount of results (default: 25)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page to show (default: 1)")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="Expand relations")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to include in the response")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Specifies ascending or descending sort on existing fields")] = None,
        unique: Annotated[Optional[StrictStr], Field(description="Find all unique values for selected field")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[CasesEntity]]:
        """GET for case

        Returns all cases from the system

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param x_api2_crm_native_enable: Return native response
        :type x_api2_crm_native_enable: str
        :param x_api2_crm_data_enable: Data Enable
        :type x_api2_crm_data_enable: str
        :param x_api2_crm_data_build: Data Build
        :type x_api2_crm_data_build: str
        :param x_api2_crm_data_is_final: Data Is Final
        :type x_api2_crm_data_is_final: str
        :param x_api2_crm_data_strategy: Data Strategy
        :type x_api2_crm_data_strategy: str
        :param x_api2_crm_data_coherent_entities: Coherent Entities
        :type x_api2_crm_data_coherent_entities: str
        :param x_api2_crm_data_always_actual: Data Is Actual
        :type x_api2_crm_data_always_actual: str
        :param x_api2_crm_data_actual_at: Data Actual At
        :type x_api2_crm_data_actual_at: datetime
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param page_size: Amount of results (default: 25)
        :type page_size: int
        :param page: Page to show (default: 1)
        :type page: int
        :param filter: Filter
        :type filter: str
        :param expand: Expand relations
        :type expand: str
        :param fields: Comma-separated list of fields to include in the response
        :type fields: str
        :param sort: Specifies ascending or descending sort on existing fields
        :type sort: str
        :param unique: Find all unique values for selected field
        :type unique: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_case_collection_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            x_api2_crm_native_enable=x_api2_crm_native_enable,
            x_api2_crm_data_enable=x_api2_crm_data_enable,
            x_api2_crm_data_build=x_api2_crm_data_build,
            x_api2_crm_data_is_final=x_api2_crm_data_is_final,
            x_api2_crm_data_strategy=x_api2_crm_data_strategy,
            x_api2_crm_data_coherent_entities=x_api2_crm_data_coherent_entities,
            x_api2_crm_data_always_actual=x_api2_crm_data_always_actual,
            x_api2_crm_data_actual_at=x_api2_crm_data_actual_at,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            page_size=page_size,
            page=page,
            filter=filter,
            expand=expand,
            fields=fields,
            sort=sort,
            unique=unique,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[CasesEntity]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_case_collection_without_preload_content(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        x_api2_crm_native_enable: Annotated[Optional[StrictStr], Field(description="Return native response")] = None,
        x_api2_crm_data_enable: Annotated[Optional[StrictStr], Field(description="Data Enable")] = None,
        x_api2_crm_data_build: Annotated[Optional[StrictStr], Field(description="Data Build")] = None,
        x_api2_crm_data_is_final: Annotated[Optional[StrictStr], Field(description="Data Is Final")] = None,
        x_api2_crm_data_strategy: Annotated[Optional[StrictStr], Field(description="Data Strategy")] = None,
        x_api2_crm_data_coherent_entities: Annotated[Optional[StrictStr], Field(description="Coherent Entities")] = None,
        x_api2_crm_data_always_actual: Annotated[Optional[StrictStr], Field(description="Data Is Actual")] = None,
        x_api2_crm_data_actual_at: Annotated[Optional[datetime], Field(description="Data Actual At")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Amount of results (default: 25)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page to show (default: 1)")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="Expand relations")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to include in the response")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Specifies ascending or descending sort on existing fields")] = None,
        unique: Annotated[Optional[StrictStr], Field(description="Find all unique values for selected field")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """GET for case

        Returns all cases from the system

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param x_api2_crm_native_enable: Return native response
        :type x_api2_crm_native_enable: str
        :param x_api2_crm_data_enable: Data Enable
        :type x_api2_crm_data_enable: str
        :param x_api2_crm_data_build: Data Build
        :type x_api2_crm_data_build: str
        :param x_api2_crm_data_is_final: Data Is Final
        :type x_api2_crm_data_is_final: str
        :param x_api2_crm_data_strategy: Data Strategy
        :type x_api2_crm_data_strategy: str
        :param x_api2_crm_data_coherent_entities: Coherent Entities
        :type x_api2_crm_data_coherent_entities: str
        :param x_api2_crm_data_always_actual: Data Is Actual
        :type x_api2_crm_data_always_actual: str
        :param x_api2_crm_data_actual_at: Data Actual At
        :type x_api2_crm_data_actual_at: datetime
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param page_size: Amount of results (default: 25)
        :type page_size: int
        :param page: Page to show (default: 1)
        :type page: int
        :param filter: Filter
        :type filter: str
        :param expand: Expand relations
        :type expand: str
        :param fields: Comma-separated list of fields to include in the response
        :type fields: str
        :param sort: Specifies ascending or descending sort on existing fields
        :type sort: str
        :param unique: Find all unique values for selected field
        :type unique: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_case_collection_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            x_api2_crm_native_enable=x_api2_crm_native_enable,
            x_api2_crm_data_enable=x_api2_crm_data_enable,
            x_api2_crm_data_build=x_api2_crm_data_build,
            x_api2_crm_data_is_final=x_api2_crm_data_is_final,
            x_api2_crm_data_strategy=x_api2_crm_data_strategy,
            x_api2_crm_data_coherent_entities=x_api2_crm_data_coherent_entities,
            x_api2_crm_data_always_actual=x_api2_crm_data_always_actual,
            x_api2_crm_data_actual_at=x_api2_crm_data_actual_at,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            page_size=page_size,
            page=page,
            filter=filter,
            expand=expand,
            fields=fields,
            sort=sort,
            unique=unique,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[CasesEntity]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_case_collection_serialize(
        self,
        x_api2_crm_user_key,
        x_api2_crm_application_key,
        x_api2_crm_native_enable,
        x_api2_crm_data_enable,
        x_api2_crm_data_build,
        x_api2_crm_data_is_final,
        x_api2_crm_data_strategy,
        x_api2_crm_data_coherent_entities,
        x_api2_crm_data_always_actual,
        x_api2_crm_data_actual_at,
        x_api2_crm_describe_lifetime,
        page_size,
        page,
        filter,
        expand,
        fields,
        sort,
        unique,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if expand is not None:
            
            _query_params.append(('expand', expand))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if unique is not None:
            
            _query_params.append(('unique', unique))
            
        # process the header parameters
        if x_api2_crm_user_key is not None:
            _header_params['X-API2CRM-USER-KEY'] = x_api2_crm_user_key
        if x_api2_crm_application_key is not None:
            _header_params['X-API2CRM-APPLICATION-KEY'] = x_api2_crm_application_key
        if x_api2_crm_native_enable is not None:
            _header_params['X-API2CRM-NATIVE-ENABLE'] = x_api2_crm_native_enable
        if x_api2_crm_data_enable is not None:
            _header_params['X-API2CRM-DATA-ENABLE'] = x_api2_crm_data_enable
        if x_api2_crm_data_build is not None:
            _header_params['X-API2CRM-DATA-BUILD'] = x_api2_crm_data_build
        if x_api2_crm_data_is_final is not None:
            _header_params['X-API2CRM-DATA-IS-FINAL'] = x_api2_crm_data_is_final
        if x_api2_crm_data_strategy is not None:
            _header_params['X-API2CRM-DATA-STRATEGY'] = x_api2_crm_data_strategy
        if x_api2_crm_data_coherent_entities is not None:
            _header_params['X-API2CRM-DATA-COHERENT-ENTITIES'] = x_api2_crm_data_coherent_entities
        if x_api2_crm_data_always_actual is not None:
            _header_params['X-API2CRM-DATA-ALWAYS-ACTUAL'] = x_api2_crm_data_always_actual
        if x_api2_crm_data_actual_at is not None:
            _header_params['X-API2CRM-DATA-ACTUAL-AT'] = x_api2_crm_data_actual_at
        if x_api2_crm_describe_lifetime is not None:
            _header_params['X-API2CRM-DESCRIBE-LIFETIME'] = x_api2_crm_describe_lifetime
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/application/entity/case/list',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_case_count_collection(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        x_api2_crm_data_enable: Annotated[Optional[StrictStr], Field(description="Data Enable")] = None,
        x_api2_crm_data_build: Annotated[Optional[StrictStr], Field(description="Data Build")] = None,
        x_api2_crm_data_is_final: Annotated[Optional[StrictStr], Field(description="Data Is Final")] = None,
        x_api2_crm_data_strategy: Annotated[Optional[StrictStr], Field(description="Data Strategy")] = None,
        x_api2_crm_data_coherent_entities: Annotated[Optional[StrictStr], Field(description="Coherent Entities")] = None,
        x_api2_crm_data_always_actual: Annotated[Optional[StrictStr], Field(description="Data Is Actual")] = None,
        x_api2_crm_data_actual_at: Annotated[Optional[datetime], Field(description="Data Actual At")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Count:
        """COUNT for case

        Count all cases from the system

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param x_api2_crm_data_enable: Data Enable
        :type x_api2_crm_data_enable: str
        :param x_api2_crm_data_build: Data Build
        :type x_api2_crm_data_build: str
        :param x_api2_crm_data_is_final: Data Is Final
        :type x_api2_crm_data_is_final: str
        :param x_api2_crm_data_strategy: Data Strategy
        :type x_api2_crm_data_strategy: str
        :param x_api2_crm_data_coherent_entities: Coherent Entities
        :type x_api2_crm_data_coherent_entities: str
        :param x_api2_crm_data_always_actual: Data Is Actual
        :type x_api2_crm_data_always_actual: str
        :param x_api2_crm_data_actual_at: Data Actual At
        :type x_api2_crm_data_actual_at: datetime
        :param filter: Filter
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_case_count_collection_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            x_api2_crm_data_enable=x_api2_crm_data_enable,
            x_api2_crm_data_build=x_api2_crm_data_build,
            x_api2_crm_data_is_final=x_api2_crm_data_is_final,
            x_api2_crm_data_strategy=x_api2_crm_data_strategy,
            x_api2_crm_data_coherent_entities=x_api2_crm_data_coherent_entities,
            x_api2_crm_data_always_actual=x_api2_crm_data_always_actual,
            x_api2_crm_data_actual_at=x_api2_crm_data_actual_at,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Count",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_case_count_collection_with_http_info(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        x_api2_crm_data_enable: Annotated[Optional[StrictStr], Field(description="Data Enable")] = None,
        x_api2_crm_data_build: Annotated[Optional[StrictStr], Field(description="Data Build")] = None,
        x_api2_crm_data_is_final: Annotated[Optional[StrictStr], Field(description="Data Is Final")] = None,
        x_api2_crm_data_strategy: Annotated[Optional[StrictStr], Field(description="Data Strategy")] = None,
        x_api2_crm_data_coherent_entities: Annotated[Optional[StrictStr], Field(description="Coherent Entities")] = None,
        x_api2_crm_data_always_actual: Annotated[Optional[StrictStr], Field(description="Data Is Actual")] = None,
        x_api2_crm_data_actual_at: Annotated[Optional[datetime], Field(description="Data Actual At")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Count]:
        """COUNT for case

        Count all cases from the system

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param x_api2_crm_data_enable: Data Enable
        :type x_api2_crm_data_enable: str
        :param x_api2_crm_data_build: Data Build
        :type x_api2_crm_data_build: str
        :param x_api2_crm_data_is_final: Data Is Final
        :type x_api2_crm_data_is_final: str
        :param x_api2_crm_data_strategy: Data Strategy
        :type x_api2_crm_data_strategy: str
        :param x_api2_crm_data_coherent_entities: Coherent Entities
        :type x_api2_crm_data_coherent_entities: str
        :param x_api2_crm_data_always_actual: Data Is Actual
        :type x_api2_crm_data_always_actual: str
        :param x_api2_crm_data_actual_at: Data Actual At
        :type x_api2_crm_data_actual_at: datetime
        :param filter: Filter
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_case_count_collection_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            x_api2_crm_data_enable=x_api2_crm_data_enable,
            x_api2_crm_data_build=x_api2_crm_data_build,
            x_api2_crm_data_is_final=x_api2_crm_data_is_final,
            x_api2_crm_data_strategy=x_api2_crm_data_strategy,
            x_api2_crm_data_coherent_entities=x_api2_crm_data_coherent_entities,
            x_api2_crm_data_always_actual=x_api2_crm_data_always_actual,
            x_api2_crm_data_actual_at=x_api2_crm_data_actual_at,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Count",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_case_count_collection_without_preload_content(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        x_api2_crm_data_enable: Annotated[Optional[StrictStr], Field(description="Data Enable")] = None,
        x_api2_crm_data_build: Annotated[Optional[StrictStr], Field(description="Data Build")] = None,
        x_api2_crm_data_is_final: Annotated[Optional[StrictStr], Field(description="Data Is Final")] = None,
        x_api2_crm_data_strategy: Annotated[Optional[StrictStr], Field(description="Data Strategy")] = None,
        x_api2_crm_data_coherent_entities: Annotated[Optional[StrictStr], Field(description="Coherent Entities")] = None,
        x_api2_crm_data_always_actual: Annotated[Optional[StrictStr], Field(description="Data Is Actual")] = None,
        x_api2_crm_data_actual_at: Annotated[Optional[datetime], Field(description="Data Actual At")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """COUNT for case

        Count all cases from the system

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param x_api2_crm_data_enable: Data Enable
        :type x_api2_crm_data_enable: str
        :param x_api2_crm_data_build: Data Build
        :type x_api2_crm_data_build: str
        :param x_api2_crm_data_is_final: Data Is Final
        :type x_api2_crm_data_is_final: str
        :param x_api2_crm_data_strategy: Data Strategy
        :type x_api2_crm_data_strategy: str
        :param x_api2_crm_data_coherent_entities: Coherent Entities
        :type x_api2_crm_data_coherent_entities: str
        :param x_api2_crm_data_always_actual: Data Is Actual
        :type x_api2_crm_data_always_actual: str
        :param x_api2_crm_data_actual_at: Data Actual At
        :type x_api2_crm_data_actual_at: datetime
        :param filter: Filter
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_case_count_collection_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            x_api2_crm_data_enable=x_api2_crm_data_enable,
            x_api2_crm_data_build=x_api2_crm_data_build,
            x_api2_crm_data_is_final=x_api2_crm_data_is_final,
            x_api2_crm_data_strategy=x_api2_crm_data_strategy,
            x_api2_crm_data_coherent_entities=x_api2_crm_data_coherent_entities,
            x_api2_crm_data_always_actual=x_api2_crm_data_always_actual,
            x_api2_crm_data_actual_at=x_api2_crm_data_actual_at,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Count",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_case_count_collection_serialize(
        self,
        x_api2_crm_user_key,
        x_api2_crm_application_key,
        x_api2_crm_data_enable,
        x_api2_crm_data_build,
        x_api2_crm_data_is_final,
        x_api2_crm_data_strategy,
        x_api2_crm_data_coherent_entities,
        x_api2_crm_data_always_actual,
        x_api2_crm_data_actual_at,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        # process the header parameters
        if x_api2_crm_user_key is not None:
            _header_params['X-API2CRM-USER-KEY'] = x_api2_crm_user_key
        if x_api2_crm_application_key is not None:
            _header_params['X-API2CRM-APPLICATION-KEY'] = x_api2_crm_application_key
        if x_api2_crm_data_enable is not None:
            _header_params['X-API2CRM-DATA-ENABLE'] = x_api2_crm_data_enable
        if x_api2_crm_data_build is not None:
            _header_params['X-API2CRM-DATA-BUILD'] = x_api2_crm_data_build
        if x_api2_crm_data_is_final is not None:
            _header_params['X-API2CRM-DATA-IS-FINAL'] = x_api2_crm_data_is_final
        if x_api2_crm_data_strategy is not None:
            _header_params['X-API2CRM-DATA-STRATEGY'] = x_api2_crm_data_strategy
        if x_api2_crm_data_coherent_entities is not None:
            _header_params['X-API2CRM-DATA-COHERENT-ENTITIES'] = x_api2_crm_data_coherent_entities
        if x_api2_crm_data_always_actual is not None:
            _header_params['X-API2CRM-DATA-ALWAYS-ACTUAL'] = x_api2_crm_data_always_actual
        if x_api2_crm_data_actual_at is not None:
            _header_params['X-API2CRM-DATA-ACTUAL-AT'] = x_api2_crm_data_actual_at
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/application/entity/case/count',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_case_describe(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        x_api2_crm_data_enable: Annotated[Optional[StrictStr], Field(description="Data Enable")] = None,
        x_api2_crm_data_build: Annotated[Optional[StrictStr], Field(description="Data Build")] = None,
        x_api2_crm_data_is_final: Annotated[Optional[StrictStr], Field(description="Data Is Final")] = None,
        x_api2_crm_data_strategy: Annotated[Optional[StrictStr], Field(description="Data Strategy")] = None,
        x_api2_crm_data_coherent_entities: Annotated[Optional[StrictStr], Field(description="Coherent Entities")] = None,
        x_api2_crm_data_always_actual: Annotated[Optional[StrictStr], Field(description="Data Is Actual")] = None,
        x_api2_crm_data_actual_at: Annotated[Optional[datetime], Field(description="Data Actual At")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CaseDescribe:
        """DESCRIBE for case

        Returns describe for cases

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param x_api2_crm_data_enable: Data Enable
        :type x_api2_crm_data_enable: str
        :param x_api2_crm_data_build: Data Build
        :type x_api2_crm_data_build: str
        :param x_api2_crm_data_is_final: Data Is Final
        :type x_api2_crm_data_is_final: str
        :param x_api2_crm_data_strategy: Data Strategy
        :type x_api2_crm_data_strategy: str
        :param x_api2_crm_data_coherent_entities: Coherent Entities
        :type x_api2_crm_data_coherent_entities: str
        :param x_api2_crm_data_always_actual: Data Is Actual
        :type x_api2_crm_data_always_actual: str
        :param x_api2_crm_data_actual_at: Data Actual At
        :type x_api2_crm_data_actual_at: datetime
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_case_describe_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            x_api2_crm_data_enable=x_api2_crm_data_enable,
            x_api2_crm_data_build=x_api2_crm_data_build,
            x_api2_crm_data_is_final=x_api2_crm_data_is_final,
            x_api2_crm_data_strategy=x_api2_crm_data_strategy,
            x_api2_crm_data_coherent_entities=x_api2_crm_data_coherent_entities,
            x_api2_crm_data_always_actual=x_api2_crm_data_always_actual,
            x_api2_crm_data_actual_at=x_api2_crm_data_actual_at,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CaseDescribe",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_case_describe_with_http_info(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        x_api2_crm_data_enable: Annotated[Optional[StrictStr], Field(description="Data Enable")] = None,
        x_api2_crm_data_build: Annotated[Optional[StrictStr], Field(description="Data Build")] = None,
        x_api2_crm_data_is_final: Annotated[Optional[StrictStr], Field(description="Data Is Final")] = None,
        x_api2_crm_data_strategy: Annotated[Optional[StrictStr], Field(description="Data Strategy")] = None,
        x_api2_crm_data_coherent_entities: Annotated[Optional[StrictStr], Field(description="Coherent Entities")] = None,
        x_api2_crm_data_always_actual: Annotated[Optional[StrictStr], Field(description="Data Is Actual")] = None,
        x_api2_crm_data_actual_at: Annotated[Optional[datetime], Field(description="Data Actual At")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CaseDescribe]:
        """DESCRIBE for case

        Returns describe for cases

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param x_api2_crm_data_enable: Data Enable
        :type x_api2_crm_data_enable: str
        :param x_api2_crm_data_build: Data Build
        :type x_api2_crm_data_build: str
        :param x_api2_crm_data_is_final: Data Is Final
        :type x_api2_crm_data_is_final: str
        :param x_api2_crm_data_strategy: Data Strategy
        :type x_api2_crm_data_strategy: str
        :param x_api2_crm_data_coherent_entities: Coherent Entities
        :type x_api2_crm_data_coherent_entities: str
        :param x_api2_crm_data_always_actual: Data Is Actual
        :type x_api2_crm_data_always_actual: str
        :param x_api2_crm_data_actual_at: Data Actual At
        :type x_api2_crm_data_actual_at: datetime
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_case_describe_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            x_api2_crm_data_enable=x_api2_crm_data_enable,
            x_api2_crm_data_build=x_api2_crm_data_build,
            x_api2_crm_data_is_final=x_api2_crm_data_is_final,
            x_api2_crm_data_strategy=x_api2_crm_data_strategy,
            x_api2_crm_data_coherent_entities=x_api2_crm_data_coherent_entities,
            x_api2_crm_data_always_actual=x_api2_crm_data_always_actual,
            x_api2_crm_data_actual_at=x_api2_crm_data_actual_at,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CaseDescribe",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_case_describe_without_preload_content(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        x_api2_crm_data_enable: Annotated[Optional[StrictStr], Field(description="Data Enable")] = None,
        x_api2_crm_data_build: Annotated[Optional[StrictStr], Field(description="Data Build")] = None,
        x_api2_crm_data_is_final: Annotated[Optional[StrictStr], Field(description="Data Is Final")] = None,
        x_api2_crm_data_strategy: Annotated[Optional[StrictStr], Field(description="Data Strategy")] = None,
        x_api2_crm_data_coherent_entities: Annotated[Optional[StrictStr], Field(description="Coherent Entities")] = None,
        x_api2_crm_data_always_actual: Annotated[Optional[StrictStr], Field(description="Data Is Actual")] = None,
        x_api2_crm_data_actual_at: Annotated[Optional[datetime], Field(description="Data Actual At")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """DESCRIBE for case

        Returns describe for cases

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param x_api2_crm_data_enable: Data Enable
        :type x_api2_crm_data_enable: str
        :param x_api2_crm_data_build: Data Build
        :type x_api2_crm_data_build: str
        :param x_api2_crm_data_is_final: Data Is Final
        :type x_api2_crm_data_is_final: str
        :param x_api2_crm_data_strategy: Data Strategy
        :type x_api2_crm_data_strategy: str
        :param x_api2_crm_data_coherent_entities: Coherent Entities
        :type x_api2_crm_data_coherent_entities: str
        :param x_api2_crm_data_always_actual: Data Is Actual
        :type x_api2_crm_data_always_actual: str
        :param x_api2_crm_data_actual_at: Data Actual At
        :type x_api2_crm_data_actual_at: datetime
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_case_describe_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            x_api2_crm_data_enable=x_api2_crm_data_enable,
            x_api2_crm_data_build=x_api2_crm_data_build,
            x_api2_crm_data_is_final=x_api2_crm_data_is_final,
            x_api2_crm_data_strategy=x_api2_crm_data_strategy,
            x_api2_crm_data_coherent_entities=x_api2_crm_data_coherent_entities,
            x_api2_crm_data_always_actual=x_api2_crm_data_always_actual,
            x_api2_crm_data_actual_at=x_api2_crm_data_actual_at,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CaseDescribe",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_case_describe_serialize(
        self,
        x_api2_crm_user_key,
        x_api2_crm_application_key,
        x_api2_crm_data_enable,
        x_api2_crm_data_build,
        x_api2_crm_data_is_final,
        x_api2_crm_data_strategy,
        x_api2_crm_data_coherent_entities,
        x_api2_crm_data_always_actual,
        x_api2_crm_data_actual_at,
        x_api2_crm_describe_lifetime,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_api2_crm_user_key is not None:
            _header_params['X-API2CRM-USER-KEY'] = x_api2_crm_user_key
        if x_api2_crm_application_key is not None:
            _header_params['X-API2CRM-APPLICATION-KEY'] = x_api2_crm_application_key
        if x_api2_crm_data_enable is not None:
            _header_params['X-API2CRM-DATA-ENABLE'] = x_api2_crm_data_enable
        if x_api2_crm_data_build is not None:
            _header_params['X-API2CRM-DATA-BUILD'] = x_api2_crm_data_build
        if x_api2_crm_data_is_final is not None:
            _header_params['X-API2CRM-DATA-IS-FINAL'] = x_api2_crm_data_is_final
        if x_api2_crm_data_strategy is not None:
            _header_params['X-API2CRM-DATA-STRATEGY'] = x_api2_crm_data_strategy
        if x_api2_crm_data_coherent_entities is not None:
            _header_params['X-API2CRM-DATA-COHERENT-ENTITIES'] = x_api2_crm_data_coherent_entities
        if x_api2_crm_data_always_actual is not None:
            _header_params['X-API2CRM-DATA-ALWAYS-ACTUAL'] = x_api2_crm_data_always_actual
        if x_api2_crm_data_actual_at is not None:
            _header_params['X-API2CRM-DATA-ACTUAL-AT'] = x_api2_crm_data_actual_at
        if x_api2_crm_describe_lifetime is not None:
            _header_params['X-API2CRM-DESCRIBE-LIFETIME'] = x_api2_crm_describe_lifetime
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/application/entity/case/describe',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_case_entity(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        case_id: Annotated[StrictStr, Field(description="Case Identifier")],
        x_api2_crm_native_enable: Annotated[Optional[StrictStr], Field(description="Return native response")] = None,
        x_api2_crm_data_enable: Annotated[Optional[StrictStr], Field(description="Data Enable")] = None,
        x_api2_crm_data_build: Annotated[Optional[StrictStr], Field(description="Data Build")] = None,
        x_api2_crm_data_is_final: Annotated[Optional[StrictStr], Field(description="Data Is Final")] = None,
        x_api2_crm_data_strategy: Annotated[Optional[StrictStr], Field(description="Data Strategy")] = None,
        x_api2_crm_data_coherent_entities: Annotated[Optional[StrictStr], Field(description="Coherent Entities")] = None,
        x_api2_crm_data_always_actual: Annotated[Optional[StrictStr], Field(description="Data Is Actual")] = None,
        x_api2_crm_data_actual_at: Annotated[Optional[datetime], Field(description="Data Actual At")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="Expand relations")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to include in the response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CasesEntity:
        """GET for case

        Return case information

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param case_id: Case Identifier (required)
        :type case_id: str
        :param x_api2_crm_native_enable: Return native response
        :type x_api2_crm_native_enable: str
        :param x_api2_crm_data_enable: Data Enable
        :type x_api2_crm_data_enable: str
        :param x_api2_crm_data_build: Data Build
        :type x_api2_crm_data_build: str
        :param x_api2_crm_data_is_final: Data Is Final
        :type x_api2_crm_data_is_final: str
        :param x_api2_crm_data_strategy: Data Strategy
        :type x_api2_crm_data_strategy: str
        :param x_api2_crm_data_coherent_entities: Coherent Entities
        :type x_api2_crm_data_coherent_entities: str
        :param x_api2_crm_data_always_actual: Data Is Actual
        :type x_api2_crm_data_always_actual: str
        :param x_api2_crm_data_actual_at: Data Actual At
        :type x_api2_crm_data_actual_at: datetime
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param expand: Expand relations
        :type expand: str
        :param fields: Comma-separated list of fields to include in the response
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_case_entity_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            case_id=case_id,
            x_api2_crm_native_enable=x_api2_crm_native_enable,
            x_api2_crm_data_enable=x_api2_crm_data_enable,
            x_api2_crm_data_build=x_api2_crm_data_build,
            x_api2_crm_data_is_final=x_api2_crm_data_is_final,
            x_api2_crm_data_strategy=x_api2_crm_data_strategy,
            x_api2_crm_data_coherent_entities=x_api2_crm_data_coherent_entities,
            x_api2_crm_data_always_actual=x_api2_crm_data_always_actual,
            x_api2_crm_data_actual_at=x_api2_crm_data_actual_at,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            expand=expand,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CasesEntity",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_case_entity_with_http_info(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        case_id: Annotated[StrictStr, Field(description="Case Identifier")],
        x_api2_crm_native_enable: Annotated[Optional[StrictStr], Field(description="Return native response")] = None,
        x_api2_crm_data_enable: Annotated[Optional[StrictStr], Field(description="Data Enable")] = None,
        x_api2_crm_data_build: Annotated[Optional[StrictStr], Field(description="Data Build")] = None,
        x_api2_crm_data_is_final: Annotated[Optional[StrictStr], Field(description="Data Is Final")] = None,
        x_api2_crm_data_strategy: Annotated[Optional[StrictStr], Field(description="Data Strategy")] = None,
        x_api2_crm_data_coherent_entities: Annotated[Optional[StrictStr], Field(description="Coherent Entities")] = None,
        x_api2_crm_data_always_actual: Annotated[Optional[StrictStr], Field(description="Data Is Actual")] = None,
        x_api2_crm_data_actual_at: Annotated[Optional[datetime], Field(description="Data Actual At")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="Expand relations")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to include in the response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CasesEntity]:
        """GET for case

        Return case information

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param case_id: Case Identifier (required)
        :type case_id: str
        :param x_api2_crm_native_enable: Return native response
        :type x_api2_crm_native_enable: str
        :param x_api2_crm_data_enable: Data Enable
        :type x_api2_crm_data_enable: str
        :param x_api2_crm_data_build: Data Build
        :type x_api2_crm_data_build: str
        :param x_api2_crm_data_is_final: Data Is Final
        :type x_api2_crm_data_is_final: str
        :param x_api2_crm_data_strategy: Data Strategy
        :type x_api2_crm_data_strategy: str
        :param x_api2_crm_data_coherent_entities: Coherent Entities
        :type x_api2_crm_data_coherent_entities: str
        :param x_api2_crm_data_always_actual: Data Is Actual
        :type x_api2_crm_data_always_actual: str
        :param x_api2_crm_data_actual_at: Data Actual At
        :type x_api2_crm_data_actual_at: datetime
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param expand: Expand relations
        :type expand: str
        :param fields: Comma-separated list of fields to include in the response
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_case_entity_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            case_id=case_id,
            x_api2_crm_native_enable=x_api2_crm_native_enable,
            x_api2_crm_data_enable=x_api2_crm_data_enable,
            x_api2_crm_data_build=x_api2_crm_data_build,
            x_api2_crm_data_is_final=x_api2_crm_data_is_final,
            x_api2_crm_data_strategy=x_api2_crm_data_strategy,
            x_api2_crm_data_coherent_entities=x_api2_crm_data_coherent_entities,
            x_api2_crm_data_always_actual=x_api2_crm_data_always_actual,
            x_api2_crm_data_actual_at=x_api2_crm_data_actual_at,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            expand=expand,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CasesEntity",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_case_entity_without_preload_content(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        case_id: Annotated[StrictStr, Field(description="Case Identifier")],
        x_api2_crm_native_enable: Annotated[Optional[StrictStr], Field(description="Return native response")] = None,
        x_api2_crm_data_enable: Annotated[Optional[StrictStr], Field(description="Data Enable")] = None,
        x_api2_crm_data_build: Annotated[Optional[StrictStr], Field(description="Data Build")] = None,
        x_api2_crm_data_is_final: Annotated[Optional[StrictStr], Field(description="Data Is Final")] = None,
        x_api2_crm_data_strategy: Annotated[Optional[StrictStr], Field(description="Data Strategy")] = None,
        x_api2_crm_data_coherent_entities: Annotated[Optional[StrictStr], Field(description="Coherent Entities")] = None,
        x_api2_crm_data_always_actual: Annotated[Optional[StrictStr], Field(description="Data Is Actual")] = None,
        x_api2_crm_data_actual_at: Annotated[Optional[datetime], Field(description="Data Actual At")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="Expand relations")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to include in the response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """GET for case

        Return case information

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param case_id: Case Identifier (required)
        :type case_id: str
        :param x_api2_crm_native_enable: Return native response
        :type x_api2_crm_native_enable: str
        :param x_api2_crm_data_enable: Data Enable
        :type x_api2_crm_data_enable: str
        :param x_api2_crm_data_build: Data Build
        :type x_api2_crm_data_build: str
        :param x_api2_crm_data_is_final: Data Is Final
        :type x_api2_crm_data_is_final: str
        :param x_api2_crm_data_strategy: Data Strategy
        :type x_api2_crm_data_strategy: str
        :param x_api2_crm_data_coherent_entities: Coherent Entities
        :type x_api2_crm_data_coherent_entities: str
        :param x_api2_crm_data_always_actual: Data Is Actual
        :type x_api2_crm_data_always_actual: str
        :param x_api2_crm_data_actual_at: Data Actual At
        :type x_api2_crm_data_actual_at: datetime
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param expand: Expand relations
        :type expand: str
        :param fields: Comma-separated list of fields to include in the response
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_case_entity_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            case_id=case_id,
            x_api2_crm_native_enable=x_api2_crm_native_enable,
            x_api2_crm_data_enable=x_api2_crm_data_enable,
            x_api2_crm_data_build=x_api2_crm_data_build,
            x_api2_crm_data_is_final=x_api2_crm_data_is_final,
            x_api2_crm_data_strategy=x_api2_crm_data_strategy,
            x_api2_crm_data_coherent_entities=x_api2_crm_data_coherent_entities,
            x_api2_crm_data_always_actual=x_api2_crm_data_always_actual,
            x_api2_crm_data_actual_at=x_api2_crm_data_actual_at,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            expand=expand,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CasesEntity",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_case_entity_serialize(
        self,
        x_api2_crm_user_key,
        x_api2_crm_application_key,
        case_id,
        x_api2_crm_native_enable,
        x_api2_crm_data_enable,
        x_api2_crm_data_build,
        x_api2_crm_data_is_final,
        x_api2_crm_data_strategy,
        x_api2_crm_data_coherent_entities,
        x_api2_crm_data_always_actual,
        x_api2_crm_data_actual_at,
        x_api2_crm_describe_lifetime,
        expand,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if case_id is not None:
            _path_params['case_id'] = case_id
        # process the query parameters
        if expand is not None:
            
            _query_params.append(('expand', expand))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        # process the header parameters
        if x_api2_crm_user_key is not None:
            _header_params['X-API2CRM-USER-KEY'] = x_api2_crm_user_key
        if x_api2_crm_application_key is not None:
            _header_params['X-API2CRM-APPLICATION-KEY'] = x_api2_crm_application_key
        if x_api2_crm_native_enable is not None:
            _header_params['X-API2CRM-NATIVE-ENABLE'] = x_api2_crm_native_enable
        if x_api2_crm_data_enable is not None:
            _header_params['X-API2CRM-DATA-ENABLE'] = x_api2_crm_data_enable
        if x_api2_crm_data_build is not None:
            _header_params['X-API2CRM-DATA-BUILD'] = x_api2_crm_data_build
        if x_api2_crm_data_is_final is not None:
            _header_params['X-API2CRM-DATA-IS-FINAL'] = x_api2_crm_data_is_final
        if x_api2_crm_data_strategy is not None:
            _header_params['X-API2CRM-DATA-STRATEGY'] = x_api2_crm_data_strategy
        if x_api2_crm_data_coherent_entities is not None:
            _header_params['X-API2CRM-DATA-COHERENT-ENTITIES'] = x_api2_crm_data_coherent_entities
        if x_api2_crm_data_always_actual is not None:
            _header_params['X-API2CRM-DATA-ALWAYS-ACTUAL'] = x_api2_crm_data_always_actual
        if x_api2_crm_data_actual_at is not None:
            _header_params['X-API2CRM-DATA-ACTUAL-AT'] = x_api2_crm_data_actual_at
        if x_api2_crm_describe_lifetime is not None:
            _header_params['X-API2CRM-DESCRIBE-LIFETIME'] = x_api2_crm_describe_lifetime
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/application/entity/case/{case_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_case_entity(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        case_id: Annotated[StrictStr, Field(description="Case Identifier")],
        body: Annotated[CasesEntity, Field(description="Update case information")],
        x_api2_crm_native_enable: Annotated[Optional[StrictStr], Field(description="Return native response")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CasesEntityRelation:
        """PUT for case

        Update case information

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param case_id: Case Identifier (required)
        :type case_id: str
        :param body: Update case information (required)
        :type body: CasesEntity
        :param x_api2_crm_native_enable: Return native response
        :type x_api2_crm_native_enable: str
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_case_entity_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            case_id=case_id,
            body=body,
            x_api2_crm_native_enable=x_api2_crm_native_enable,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CasesEntityRelation",
            '400': None,
            '404': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_case_entity_with_http_info(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        case_id: Annotated[StrictStr, Field(description="Case Identifier")],
        body: Annotated[CasesEntity, Field(description="Update case information")],
        x_api2_crm_native_enable: Annotated[Optional[StrictStr], Field(description="Return native response")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CasesEntityRelation]:
        """PUT for case

        Update case information

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param case_id: Case Identifier (required)
        :type case_id: str
        :param body: Update case information (required)
        :type body: CasesEntity
        :param x_api2_crm_native_enable: Return native response
        :type x_api2_crm_native_enable: str
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_case_entity_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            case_id=case_id,
            body=body,
            x_api2_crm_native_enable=x_api2_crm_native_enable,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CasesEntityRelation",
            '400': None,
            '404': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_case_entity_without_preload_content(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        case_id: Annotated[StrictStr, Field(description="Case Identifier")],
        body: Annotated[CasesEntity, Field(description="Update case information")],
        x_api2_crm_native_enable: Annotated[Optional[StrictStr], Field(description="Return native response")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """PUT for case

        Update case information

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param case_id: Case Identifier (required)
        :type case_id: str
        :param body: Update case information (required)
        :type body: CasesEntity
        :param x_api2_crm_native_enable: Return native response
        :type x_api2_crm_native_enable: str
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_case_entity_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            case_id=case_id,
            body=body,
            x_api2_crm_native_enable=x_api2_crm_native_enable,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CasesEntityRelation",
            '400': None,
            '404': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_case_entity_serialize(
        self,
        x_api2_crm_user_key,
        x_api2_crm_application_key,
        case_id,
        body,
        x_api2_crm_native_enable,
        x_api2_crm_describe_lifetime,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if case_id is not None:
            _path_params['case_id'] = case_id
        # process the query parameters
        # process the header parameters
        if x_api2_crm_user_key is not None:
            _header_params['X-API2CRM-USER-KEY'] = x_api2_crm_user_key
        if x_api2_crm_application_key is not None:
            _header_params['X-API2CRM-APPLICATION-KEY'] = x_api2_crm_application_key
        if x_api2_crm_native_enable is not None:
            _header_params['X-API2CRM-NATIVE-ENABLE'] = x_api2_crm_native_enable
        if x_api2_crm_describe_lifetime is not None:
            _header_params['X-API2CRM-DESCRIBE-LIFETIME'] = x_api2_crm_describe_lifetime
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/application/entity/case/{case_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_case_entity_bulk(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        body: BulkEntity,
        x_api2_crm_native_enable: Annotated[Optional[StrictStr], Field(description="Return native response")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BulkEntityRelation:
        """PUT bulk  for case


        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param body: (required)
        :type body: BulkEntity
        :param x_api2_crm_native_enable: Return native response
        :type x_api2_crm_native_enable: str
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_case_entity_bulk_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            body=body,
            x_api2_crm_native_enable=x_api2_crm_native_enable,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BulkEntityRelation",
            '400': None,
            '404': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_case_entity_bulk_with_http_info(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        body: BulkEntity,
        x_api2_crm_native_enable: Annotated[Optional[StrictStr], Field(description="Return native response")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BulkEntityRelation]:
        """PUT bulk  for case


        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param body: (required)
        :type body: BulkEntity
        :param x_api2_crm_native_enable: Return native response
        :type x_api2_crm_native_enable: str
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_case_entity_bulk_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            body=body,
            x_api2_crm_native_enable=x_api2_crm_native_enable,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BulkEntityRelation",
            '400': None,
            '404': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_case_entity_bulk_without_preload_content(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        body: BulkEntity,
        x_api2_crm_native_enable: Annotated[Optional[StrictStr], Field(description="Return native response")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """PUT bulk  for case


        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param body: (required)
        :type body: BulkEntity
        :param x_api2_crm_native_enable: Return native response
        :type x_api2_crm_native_enable: str
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_case_entity_bulk_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            body=body,
            x_api2_crm_native_enable=x_api2_crm_native_enable,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BulkEntityRelation",
            '400': None,
            '404': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_case_entity_bulk_serialize(
        self,
        x_api2_crm_user_key,
        x_api2_crm_application_key,
        body,
        x_api2_crm_native_enable,
        x_api2_crm_describe_lifetime,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_api2_crm_user_key is not None:
            _header_params['X-API2CRM-USER-KEY'] = x_api2_crm_user_key
        if x_api2_crm_application_key is not None:
            _header_params['X-API2CRM-APPLICATION-KEY'] = x_api2_crm_application_key
        if x_api2_crm_native_enable is not None:
            _header_params['X-API2CRM-NATIVE-ENABLE'] = x_api2_crm_native_enable
        if x_api2_crm_describe_lifetime is not None:
            _header_params['X-API2CRM-DESCRIBE-LIFETIME'] = x_api2_crm_describe_lifetime
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/application/entity/case/bulk',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    Data2CRM.API

    <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.count import Count
from openapi_client.models.entity_entity import EntityEntity

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class EntityApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_entity_collection(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        x_api2_crm_native_enable: Annotated[Optional[StrictStr], Field(description="Return native response")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Amount of results (default: 25)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page to show (default: 1)")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to include in the response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[EntityEntity]:
        """GET for entity

        Returns all entities from the system

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param x_api2_crm_native_enable: Return native response
        :type x_api2_crm_native_enable: str
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param page_size: Amount of results (default: 25)
        :type page_size: int
        :param page: Page to show (default: 1)
        :type page: int
        :param filter: Filter
        :type filter: str
        :param fields: Comma-separated list of fields to include in the response
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_entity_collection_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            x_api2_crm_native_enable=x_api2_crm_native_enable,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            page_size=page_size,
            page=page,
            filter=filter,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[EntityEntity]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_entity_collection_with_http_info(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        x_api2_crm_native_enable: Annotated[Optional[StrictStr], Field(description="Return native response")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Amount of results (default: 25)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page to show (default: 1)")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to include in the response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[EntityEntity]]:
        """GET for entity

        Returns all entities from the system

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param x_api2_crm_native_enable: Return native response
        :type x_api2_crm_native_enable: str
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param page_size: Amount of results (default: 25)
        :type page_size: int
        :param page: Page to show (default: 1)
        :type page: int
        :param filter: Filter
        :type filter: str
        :param fields: Comma-separated list of fields to include in the response
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_entity_collection_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            x_api2_crm_native_enable=x_api2_crm_native_enable,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            page_size=page_size,
            page=page,
            filter=filter,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[EntityEntity]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_entity_collection_without_preload_content(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        x_api2_crm_native_enable: Annotated[Optional[StrictStr], Field(description="Return native response")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Amount of results (default: 25)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page to show (default: 1)")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to include in the response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """GET for entity

        Returns all entities from the system

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param x_api2_crm_native_enable: Return native response
        :type x_api2_crm_native_enable: str
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param page_size: Amount of results (default: 25)
        :type page_size: int
        :param page: Page to show (default: 1)
        :type page: int
        :param filter: Filter
        :type filter: str
        :param fields: Comma-separated list of fields to include in the response
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_entity_collection_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            x_api2_crm_native_enable=x_api2_crm_native_enable,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            page_size=page_size,
            page=page,
            filter=filter,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[EntityEntity]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_entity_collection_serialize(
        self,
        x_api2_crm_user_key,
        x_api2_crm_application_key,
        x_api2_crm_native_enable,
        x_api2_crm_describe_lifetime,
        page_size,
        page,
        filter,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        # process the header parameters
        if x_api2_crm_user_key is not None:
            _header_params['X-API2CRM-USER-KEY'] = x_api2_crm_user_key
        if x_api2_crm_application_key is not None:
            _header_params['X-API2CRM-APPLICATION-KEY'] = x_api2_crm_application_key
        if x_api2_crm_native_enable is not None:
            _header_params['X-API2CRM-NATIVE-ENABLE'] = x_api2_crm_native_enable
        if x_api2_crm_describe_lifetime is not None:
            _header_params['X-API2CRM-DESCRIBE-LIFETIME'] = x_api2_crm_describe_lifetime
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/application/entity/list',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_entity_count_collection(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Count:
        """COUNT for entity

        Count all entities from the system

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_entity_count_collection_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Count",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_entity_count_collection_with_http_info(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Count]:
        """COUNT for entity

        Count all entities from the system

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_entity_count_collection_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Count",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_entity_count_collection_without_preload_content(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """COUNT for entity

        Count all entities from the system

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_entity_count_collection_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Count",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_entity_count_collection_serialize(
        self,
        x_api2_crm_user_key,
        x_api2_crm_application_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_api2_crm_user_key is not None:
            _header_params['X-API2CRM-USER-KEY'] = x_api2_crm_user_key
        if x_api2_crm_application_key is not None:
            _header_params['X-API2CRM-APPLICATION-KEY'] = x_api2_crm_application_key
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/application/entity/count',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_entity_entity(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        entity_id: Annotated[StrictStr, Field(description="Entity Identifier")],
        x_api2_crm_native_enable: Annotated[Optional[StrictStr], Field(description="Return native response")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to include in the response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> EntityEntity:
        """GET for entity

        Return entity information

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param entity_id: Entity Identifier (required)
        :type entity_id: str
        :param x_api2_crm_native_enable: Return native response
        :type x_api2_crm_native_enable: str
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param fields: Comma-separated list of fields to include in the response
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_entity_entity_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            entity_id=entity_id,
            x_api2_crm_native_enable=x_api2_crm_native_enable,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EntityEntity",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_entity_entity_with_http_info(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        entity_id: Annotated[StrictStr, Field(description="Entity Identifier")],
        x_api2_crm_native_enable: Annotated[Optional[StrictStr], Field(description="Return native response")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to include in the response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[EntityEntity]:
        """GET for entity

        Return entity information

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param entity_id: Entity Identifier (required)
        :type entity_id: str
        :param x_api2_crm_native_enable: Return native response
        :type x_api2_crm_native_enable: str
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param fields: Comma-separated list of fields to include in the response
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_entity_entity_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            entity_id=entity_id,
            x_api2_crm_native_enable=x_api2_crm_native_enable,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EntityEntity",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_entity_entity_without_preload_content(
        self,
        x_api2_crm_user_key: Annotated[StrictStr, Field(description="User Key")],
        x_api2_crm_application_key: Annotated[StrictStr, Field(description="Application Key")],
        entity_id: Annotated[StrictStr, Field(description="Entity Identifier")],
        x_api2_crm_native_enable: Annotated[Optional[StrictStr], Field(description="Return native response")] = None,
        x_api2_crm_describe_lifetime: Annotated[Optional[StrictStr], Field(description="Describe lifetime")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to include in the response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """GET for entity

        Return entity information

        :param x_api2_crm_user_key: User Key (required)
        :type x_api2_crm_user_key: str
        :param x_api2_crm_application_key: Application Key (required)
        :type x_api2_crm_application_key: str
        :param entity_id: Entity Identifier (required)
        :type entity_id: str
        :param x_api2_crm_native_enable: Return native response
        :type x_api2_crm_native_enable: str
        :param x_api2_crm_describe_lifetime: Describe lifetime
        :type x_api2_crm_describe_lifetime: str
        :param fields: Comma-separated list of fields to include in the response
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_entity_entity_serialize(
            x_api2_crm_user_key=x_api2_crm_user_key,
            x_api2_crm_application_key=x_api2_crm_application_key,
            entity_id=entity_id,
            x_api2_crm_native_enable=x_api2_crm_native_enable,
            x_api2_crm_describe_lifetime=x_api2_crm_describe_lifetime,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EntityEntity",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_entity_entity_serialize(
        self,
        x_api2_crm_user_key,
        x_api2_crm_application_key,
        entity_id,
        x_api2_crm_native_enable,
        x_api2_crm_describe_lifetime,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if entity_id is not None:
            _path_params['entity_id'] = entity_id
        # process the query parameters
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        # process the header parameters
        if x_api2_crm_user_key is not None:
            _header_params['X-API2CRM-USER-KEY'] = x_api2_crm_user_key
        if x_api2_crm_application_key is not None:
            _header_params['X-API2CRM-APPLICATION-KEY'] = x_api2_crm_application_key
        if x_api2_crm_native_enable is not None:
            _header_params['X-API2CRM-NATIVE-ENABLE'] = x_api2_crm_native_enable
        if x_api2_crm_describe_lifetime is not None:
            _header_params['X-API2CRM-DESCRIBE-LIFETIME'] = x_api2_crm_describe_lifetime
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/application/entity/{entity_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



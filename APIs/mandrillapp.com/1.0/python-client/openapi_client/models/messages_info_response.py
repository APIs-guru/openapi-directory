# coding: utf-8

"""
    Mandrill

    Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.messages_info_response_clicks_detail_inner import MessagesInfoResponseClicksDetailInner
from openapi_client.models.messages_info_response_metadata import MessagesInfoResponseMetadata
from openapi_client.models.messages_info_response_opens_detail_inner import MessagesInfoResponseOpensDetailInner
from openapi_client.models.messages_info_response_smtp_events_inner import MessagesInfoResponseSmtpEventsInner
from typing import Optional, Set
from typing_extensions import Self

class MessagesInfoResponse(BaseModel):
    """
    MessagesInfoResponse
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, alias="_id")
    clicks: Optional[StrictInt] = None
    clicks_detail: Optional[List[MessagesInfoResponseClicksDetailInner]] = None
    email: Optional[StrictStr] = None
    metadata: Optional[MessagesInfoResponseMetadata] = None
    opens: Optional[StrictInt] = None
    opens_detail: Optional[List[MessagesInfoResponseOpensDetailInner]] = None
    sender: Optional[StrictStr] = None
    smtp_events: Optional[List[MessagesInfoResponseSmtpEventsInner]] = None
    state: Optional[StrictStr] = None
    subject: Optional[StrictStr] = None
    tags: Optional[List[StrictStr]] = None
    template: Optional[StrictStr] = None
    ts: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["_id", "clicks", "clicks_detail", "email", "metadata", "opens", "opens_detail", "sender", "smtp_events", "state", "subject", "tags", "template", "ts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MessagesInfoResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in clicks_detail (list)
        _items = []
        if self.clicks_detail:
            for _item_clicks_detail in self.clicks_detail:
                if _item_clicks_detail:
                    _items.append(_item_clicks_detail.to_dict())
            _dict['clicks_detail'] = _items
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in opens_detail (list)
        _items = []
        if self.opens_detail:
            for _item_opens_detail in self.opens_detail:
                if _item_opens_detail:
                    _items.append(_item_opens_detail.to_dict())
            _dict['opens_detail'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in smtp_events (list)
        _items = []
        if self.smtp_events:
            for _item_smtp_events in self.smtp_events:
                if _item_smtp_events:
                    _items.append(_item_smtp_events.to_dict())
            _dict['smtp_events'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MessagesInfoResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_id": obj.get("_id"),
            "clicks": obj.get("clicks"),
            "clicks_detail": [MessagesInfoResponseClicksDetailInner.from_dict(_item) for _item in obj["clicks_detail"]] if obj.get("clicks_detail") is not None else None,
            "email": obj.get("email"),
            "metadata": MessagesInfoResponseMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "opens": obj.get("opens"),
            "opens_detail": [MessagesInfoResponseOpensDetailInner.from_dict(_item) for _item in obj["opens_detail"]] if obj.get("opens_detail") is not None else None,
            "sender": obj.get("sender"),
            "smtp_events": [MessagesInfoResponseSmtpEventsInner.from_dict(_item) for _item in obj["smtp_events"]] if obj.get("smtp_events") is not None else None,
            "state": obj.get("state"),
            "subject": obj.get("subject"),
            "tags": obj.get("tags"),
            "template": obj.get("template"),
            "ts": obj.get("ts")
        })
        return _obj



# coding: utf-8

"""
    Mandrill

    Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.messages_content_response_attachments_inner import MessagesContentResponseAttachmentsInner
from openapi_client.models.messages_content_response_headers import MessagesContentResponseHeaders
from openapi_client.models.messages_content_response_to import MessagesContentResponseTo
from openapi_client.models.messages_parse_response_attachments_inner import MessagesParseResponseAttachmentsInner
from typing import Optional, Set
from typing_extensions import Self

class MessagesParseResponse(BaseModel):
    """
    MessagesParseResponse
    """ # noqa: E501
    attachments: Optional[List[MessagesParseResponseAttachmentsInner]] = None
    from_email: Optional[StrictStr] = None
    from_name: Optional[StrictStr] = None
    headers: Optional[MessagesContentResponseHeaders] = None
    html: Optional[StrictStr] = None
    images: Optional[List[MessagesContentResponseAttachmentsInner]] = None
    subject: Optional[StrictStr] = None
    text: Optional[StrictStr] = None
    to: Optional[List[MessagesContentResponseTo]] = None
    __properties: ClassVar[List[str]] = ["attachments", "from_email", "from_name", "headers", "html", "images", "subject", "text", "to"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MessagesParseResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of headers
        if self.headers:
            _dict['headers'] = self.headers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item_images in self.images:
                if _item_images:
                    _items.append(_item_images.to_dict())
            _dict['images'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in to (list)
        _items = []
        if self.to:
            for _item_to in self.to:
                if _item_to:
                    _items.append(_item_to.to_dict())
            _dict['to'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MessagesParseResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attachments": [MessagesParseResponseAttachmentsInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "from_email": obj.get("from_email"),
            "from_name": obj.get("from_name"),
            "headers": MessagesContentResponseHeaders.from_dict(obj["headers"]) if obj.get("headers") is not None else None,
            "html": obj.get("html"),
            "images": [MessagesContentResponseAttachmentsInner.from_dict(_item) for _item in obj["images"]] if obj.get("images") is not None else None,
            "subject": obj.get("subject"),
            "text": obj.get("text"),
            "to": [MessagesContentResponseTo.from_dict(_item) for _item in obj["to"]] if obj.get("to") is not None else None
        })
        return _obj



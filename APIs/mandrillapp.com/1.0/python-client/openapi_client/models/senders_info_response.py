# coding: utf-8

"""
    Mandrill

    Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.senders_info_response_stats import SendersInfoResponseStats
from typing import Optional, Set
from typing_extensions import Self

class SendersInfoResponse(BaseModel):
    """
    SendersInfoResponse
    """ # noqa: E501
    address: Optional[StrictStr] = None
    clicks: Optional[StrictInt] = None
    complaints: Optional[StrictInt] = None
    created_at: Optional[StrictStr] = None
    hard_bounces: Optional[StrictInt] = None
    opens: Optional[StrictInt] = None
    rejects: Optional[StrictInt] = None
    sent: Optional[StrictInt] = None
    soft_bounces: Optional[StrictInt] = None
    stats: Optional[SendersInfoResponseStats] = None
    unsubs: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["address", "clicks", "complaints", "created_at", "hard_bounces", "opens", "rejects", "sent", "soft_bounces", "stats", "unsubs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SendersInfoResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of stats
        if self.stats:
            _dict['stats'] = self.stats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SendersInfoResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "clicks": obj.get("clicks"),
            "complaints": obj.get("complaints"),
            "created_at": obj.get("created_at"),
            "hard_bounces": obj.get("hard_bounces"),
            "opens": obj.get("opens"),
            "rejects": obj.get("rejects"),
            "sent": obj.get("sent"),
            "soft_bounces": obj.get("soft_bounces"),
            "stats": SendersInfoResponseStats.from_dict(obj["stats"]) if obj.get("stats") is not None else None,
            "unsubs": obj.get("unsubs")
        })
        return _obj



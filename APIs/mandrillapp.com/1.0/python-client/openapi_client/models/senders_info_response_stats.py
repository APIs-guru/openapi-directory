# coding: utf-8

"""
    Mandrill

    Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.senders_info_response_stats_last30_days import SendersInfoResponseStatsLast30Days
from typing import Optional, Set
from typing_extensions import Self

class SendersInfoResponseStats(BaseModel):
    """
    SendersInfoResponseStats
    """ # noqa: E501
    last_30_days: Optional[SendersInfoResponseStatsLast30Days] = None
    last_60_days: Optional[SendersInfoResponseStatsLast30Days] = None
    last_7_days: Optional[SendersInfoResponseStatsLast30Days] = None
    last_90_days: Optional[SendersInfoResponseStatsLast30Days] = None
    today: Optional[SendersInfoResponseStatsLast30Days] = None
    __properties: ClassVar[List[str]] = ["last_30_days", "last_60_days", "last_7_days", "last_90_days", "today"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SendersInfoResponseStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of last_30_days
        if self.last_30_days:
            _dict['last_30_days'] = self.last_30_days.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_60_days
        if self.last_60_days:
            _dict['last_60_days'] = self.last_60_days.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_7_days
        if self.last_7_days:
            _dict['last_7_days'] = self.last_7_days.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_90_days
        if self.last_90_days:
            _dict['last_90_days'] = self.last_90_days.to_dict()
        # override the default output from pydantic by calling `to_dict()` of today
        if self.today:
            _dict['today'] = self.today.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SendersInfoResponseStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "last_30_days": SendersInfoResponseStatsLast30Days.from_dict(obj["last_30_days"]) if obj.get("last_30_days") is not None else None,
            "last_60_days": SendersInfoResponseStatsLast30Days.from_dict(obj["last_60_days"]) if obj.get("last_60_days") is not None else None,
            "last_7_days": SendersInfoResponseStatsLast30Days.from_dict(obj["last_7_days"]) if obj.get("last_7_days") is not None else None,
            "last_90_days": SendersInfoResponseStatsLast30Days.from_dict(obj["last_90_days"]) if obj.get("last_90_days") is not None else None,
            "today": SendersInfoResponseStatsLast30Days.from_dict(obj["today"]) if obj.get("today") is not None else None
        })
        return _obj



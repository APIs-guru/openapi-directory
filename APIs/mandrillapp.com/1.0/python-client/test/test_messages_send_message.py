# coding: utf-8

"""
    Mandrill

    Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.messages_send_message import MessagesSendMessage

class TestMessagesSendMessage(unittest.TestCase):
    """MessagesSendMessage unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MessagesSendMessage:
        """Test MessagesSendMessage
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MessagesSendMessage`
        """
        model = MessagesSendMessage()
        if include_optional:
            return MessagesSendMessage(
                attachments = [
                    openapi_client.models.messages_content_response_attachments_inner.messages_content_response_attachments_inner(
                        content = '', 
                        name = '', 
                        type = '', )
                    ],
                bcc_address = '',
                from_email = '',
                from_name = '',
                global_merge_vars = [
                    openapi_client.models.messages_send_message_global_merge_vars_inner.messages_send_message_global_merge_vars_inner(
                        content = '', 
                        name = '', )
                    ],
                google_analytics_campaign = '',
                google_analytics_domains = [
                    ''
                    ],
                headers = openapi_client.models.messages_content_response_headers.messages_content_response_headers(
                    reply_to = '', ),
                html = '',
                images = [
                    openapi_client.models.messages_content_response_attachments_inner.messages_content_response_attachments_inner(
                        content = '', 
                        name = '', 
                        type = '', )
                    ],
                important = True,
                merge = True,
                merge_vars = [
                    openapi_client.models.messages_send_message_merge_vars_inner.messages_send_message_merge_vars_inner(
                        rcpt = '', 
                        vars = [
                            openapi_client.models.messages_send_message_global_merge_vars_inner.messages_send_message_global_merge_vars_inner(
                                content = '', 
                                name = '', )
                            ], )
                    ],
                metadata = openapi_client.models.messages_send_message_metadata.messages_send_message_metadata(
                    website = '', ),
                recipient_metadata = [
                    openapi_client.models.messages_send_message_recipient_metadata_inner.messages_send_message_recipient_metadata_inner(
                        rcpt = '', 
                        values = openapi_client.models.messages_send_message_recipient_metadata_inner_values.messages_send_message_recipient_metadata_inner_values(
                            user_id = 56, ), )
                    ],
                subaccount = '',
                subject = '',
                tags = [
                    ''
                    ],
                text = '',
                to = [
                    openapi_client.models.messages_send_message_to_inner.messages_send_message_to_inner(
                        email = '', 
                        name = '', 
                        type = '', )
                    ]
            )
        else:
            return MessagesSendMessage(
        )
        """

    def testMessagesSendMessage(self):
        """Test MessagesSendMessage"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

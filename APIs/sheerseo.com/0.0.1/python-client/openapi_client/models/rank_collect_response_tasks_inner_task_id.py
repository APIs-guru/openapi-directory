# coding: utf-8

"""
    SheerSEO API

    Sheerseo API has 2 stages:<br>First stage - initiating the task: You fill in your task and receive in return the task id. <br>Second stage - collecting the results: send a request containing the task ids you got at the first stage and collecting the results.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RankCollectResponseTasksInnerTaskId(BaseModel):
    """
    the id of the task you want to look for
    """ # noqa: E501
    error_message: Optional[StrictStr] = Field(default=None, description="error message in case task status is invalid")
    keyword: Optional[StrictStr] = Field(default=None, description="keyword (search term)")
    local_pack_rank: Optional[StrictInt] = Field(default=None, description="relevent only to google: show the local pack rank of the domain in case exist")
    localization_code: Optional[StrictStr] = Field(default=None, description="A code for the localization, which is a combination of country and language")
    localization_zip: Optional[StrictStr] = Field(default=None, description="option to localize the results per zip code")
    rank: Optional[StrictInt] = Field(default=None, description="the exact rank of the domain in the search engine asked")
    ready: Optional[StrictStr] = Field(default=None, description="task ready indicator")
    search_engine: Optional[StrictStr] = Field(default=None, description="google/bing/google_mobile")
    status: Optional[StrictStr] = Field(default=None, description="task status in terms of success")
    __properties: ClassVar[List[str]] = ["error_message", "keyword", "local_pack_rank", "localization_code", "localization_zip", "rank", "ready", "search_engine", "status"]

    @field_validator('localization_code')
    def localization_code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['us', 'uk', 'au', 'br', 'be_dutch', 'be_french', 'ca', 'de', 'es', 'ie', 'il', 'nl', 'sg', 'za', 'it', 'is', 'ch', 'fr', 'se', 'at', 'dk', 'nz', 'gr', 'in', 'ms', 'pl', 'hk', 'id', 'ru', 'ae', 'fi', 'pt', 'mx', 'tr', 'cl', 'jp', 'ar']):
            raise ValueError("must be one of enum values ('us', 'uk', 'au', 'br', 'be_dutch', 'be_french', 'ca', 'de', 'es', 'ie', 'il', 'nl', 'sg', 'za', 'it', 'is', 'ch', 'fr', 'se', 'at', 'dk', 'nz', 'gr', 'in', 'ms', 'pl', 'hk', 'id', 'ru', 'ae', 'fi', 'pt', 'mx', 'tr', 'cl', 'jp', 'ar')")
        return value

    @field_validator('ready')
    def ready_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['true', 'false']):
            raise ValueError("must be one of enum values ('true', 'false')")
        return value

    @field_validator('search_engine')
    def search_engine_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['google', 'bing', 'google_mobile']):
            raise ValueError("must be one of enum values ('google', 'bing', 'google_mobile')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ok', 'invalid']):
            raise ValueError("must be one of enum values ('ok', 'invalid')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RankCollectResponseTasksInnerTaskId from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RankCollectResponseTasksInnerTaskId from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "error_message": obj.get("error_message"),
            "keyword": obj.get("keyword"),
            "local_pack_rank": obj.get("local_pack_rank"),
            "localization_code": obj.get("localization_code"),
            "localization_zip": obj.get("localization_zip"),
            "rank": obj.get("rank"),
            "ready": obj.get("ready"),
            "search_engine": obj.get("search_engine"),
            "status": obj.get("status")
        })
        return _obj



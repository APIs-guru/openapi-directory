# coding: utf-8

"""
    Billingo API v3

    This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.

    The version of the OpenAPI document: 3.0.7
    Contact: hello@billingo.hu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.currency import Currency
from openapi_client.models.document_insert_items_inner import DocumentInsertItemsInner
from openapi_client.models.document_insert_type import DocumentInsertType
from openapi_client.models.document_language import DocumentLanguage
from openapi_client.models.document_settings import DocumentSettings
from openapi_client.models.payment_method import PaymentMethod
from typing import Optional, Set
from typing_extensions import Self

class DocumentInsert(BaseModel):
    """
    DocumentInsert
    """ # noqa: E501
    bank_account_id: Optional[StrictInt] = None
    block_id: StrictInt
    comment: Optional[StrictStr] = None
    conversion_rate: Optional[Union[StrictFloat, StrictInt]] = None
    currency: Currency
    due_date: date
    electronic: Optional[StrictBool] = False
    fulfillment_date: date
    items: Optional[List[DocumentInsertItemsInner]] = None
    language: DocumentLanguage
    paid: Optional[StrictBool] = False
    partner_id: StrictInt
    payment_method: PaymentMethod
    settings: Optional[DocumentSettings] = None
    type: DocumentInsertType
    vendor_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["bank_account_id", "block_id", "comment", "conversion_rate", "currency", "due_date", "electronic", "fulfillment_date", "items", "language", "paid", "partner_id", "payment_method", "settings", "type", "vendor_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentInsert from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of settings
        if self.settings:
            _dict['settings'] = self.settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentInsert from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bank_account_id": obj.get("bank_account_id"),
            "block_id": obj.get("block_id"),
            "comment": obj.get("comment"),
            "conversion_rate": obj.get("conversion_rate"),
            "currency": obj.get("currency"),
            "due_date": obj.get("due_date"),
            "electronic": obj.get("electronic") if obj.get("electronic") is not None else False,
            "fulfillment_date": obj.get("fulfillment_date"),
            "items": [DocumentInsertItemsInner.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "language": obj.get("language"),
            "paid": obj.get("paid") if obj.get("paid") is not None else False,
            "partner_id": obj.get("partner_id"),
            "payment_method": obj.get("payment_method"),
            "settings": DocumentSettings.from_dict(obj["settings"]) if obj.get("settings") is not None else None,
            "type": obj.get("type"),
            "vendor_id": obj.get("vendor_id")
        })
        return _obj



# coding: utf-8

"""
    Billingo API v3

    This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.

    The version of the OpenAPI document: 3.0.7
    Contact: hello@billingo.hu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address import Address
from openapi_client.models.document_bank_account import DocumentBankAccount
from typing import Optional, Set
from typing_extensions import Self

class DocumentOrganization(BaseModel):
    """
    DocumentOrganization
    """ # noqa: E501
    address: Optional[Address] = None
    bank_account: Optional[DocumentBankAccount] = None
    cash_settled: Optional[StrictBool] = None
    eu_tax_number: Optional[StrictStr] = None
    ev_number: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    small_taxpayer: Optional[StrictBool] = None
    tax_number: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["address", "bank_account", "cash_settled", "eu_tax_number", "ev_number", "name", "small_taxpayer", "tax_number"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentOrganization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bank_account
        if self.bank_account:
            _dict['bank_account'] = self.bank_account.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentOrganization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": Address.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "bank_account": DocumentBankAccount.from_dict(obj["bank_account"]) if obj.get("bank_account") is not None else None,
            "cash_settled": obj.get("cash_settled"),
            "eu_tax_number": obj.get("eu_tax_number"),
            "ev_number": obj.get("ev_number"),
            "name": obj.get("name"),
            "small_taxpayer": obj.get("small_taxpayer"),
            "tax_number": obj.get("tax_number")
        })
        return _obj



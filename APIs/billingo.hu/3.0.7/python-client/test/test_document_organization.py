# coding: utf-8

"""
    Billingo API v3

    This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.

    The version of the OpenAPI document: 3.0.7
    Contact: hello@billingo.hu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.document_organization import DocumentOrganization

class TestDocumentOrganization(unittest.TestCase):
    """DocumentOrganization unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DocumentOrganization:
        """Test DocumentOrganization
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DocumentOrganization`
        """
        model = DocumentOrganization()
        if include_optional:
            return DocumentOrganization(
                address = openapi_client.models.address.Address(
                    address = '', 
                    city = '', 
                    country_code = '', 
                    post_code = '', ),
                bank_account = openapi_client.models.document_bank_account.DocumentBankAccount(
                    account_number = '', 
                    account_number_iban = '', 
                    id = 56, 
                    name = '', 
                    swift = '', ),
                cash_settled = True,
                eu_tax_number = '',
                ev_number = '',
                name = '',
                small_taxpayer = True,
                tax_number = ''
            )
        else:
            return DocumentOrganization(
        )
        """

    def testDocumentOrganization(self):
        """Test DocumentOrganization"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Billingo API v3

    This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.

    The version of the OpenAPI document: 3.0.7
    Contact: hello@billingo.hu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.document import Document

class TestDocument(unittest.TestCase):
    """Document unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Document:
        """Test Document
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Document`
        """
        model = Document()
        if include_optional:
            return Document(
                block_id = 56,
                cancelled = True,
                comment = '',
                conversion_rate = 1.337,
                currency = 'AUD',
                due_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                electronic = True,
                fulfillment_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                gross_total = 1.337,
                id = 56,
                invoice_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                invoice_number = 'PREFIX / 2020-000001',
                items = [
                    openapi_client.models.document_item.DocumentItem(
                        gross_amount = 1.337, 
                        name = '', 
                        net_amount = 1.337, 
                        net_unit_amount = 1.337, 
                        product_id = 56, 
                        quantity = 1.337, 
                        vat = '0%', 
                        vat_amount = 1.337, )
                    ],
                language = 'de',
                notification_status = 'closed',
                organization = openapi_client.models.document_organization.DocumentOrganization(
                    address = openapi_client.models.address.Address(
                        address = '', 
                        city = '', 
                        country_code = '', 
                        post_code = '', ), 
                    bank_account = openapi_client.models.document_bank_account.DocumentBankAccount(
                        account_number = '', 
                        account_number_iban = '', 
                        id = 56, 
                        name = '', 
                        swift = '', ), 
                    cash_settled = True, 
                    eu_tax_number = '', 
                    ev_number = '', 
                    name = '', 
                    small_taxpayer = True, 
                    tax_number = '', ),
                paid_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                partner = None,
                payment_method = 'aruhitel',
                payment_status = 'expired',
                settings = openapi_client.models.document_settings.DocumentSettings(
                    mediated_service = True, 
                    online_payment = '', 
                    place_id = 56, 
                    round = 'five', 
                    without_financial_fulfillment = True, ),
                summary = openapi_client.models.document_summary.DocumentSummary(
                    gross_amount_local = 1.337, 
                    net_amount = 1.337, 
                    net_amount_local = 1.337, 
                    vat_amount = 1.337, 
                    vat_amount_local = 1.337, 
                    vat_rate_summary = [
                        openapi_client.models.document_vat_rate_summary.DocumentVatRateSummary(
                            vat_name = '', 
                            vat_percentage = 1.337, 
                            vat_rate_gross_amount = 1.337, 
                            vat_rate_net_amount = 1.337, 
                            vat_rate_vat_amount = 1.337, 
                            vat_rate_vat_amount_local = 1.337, )
                        ], ),
                tags = [
                    ''
                    ],
                type = 'advance'
            )
        else:
            return Document(
        )
        """

    def testDocument(self):
        """Test Document"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Billingo API v3

    This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.

    The version of the OpenAPI document: 3.0.7
    Contact: hello@billingo.hu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.document_block_list import DocumentBlockList

class TestDocumentBlockList(unittest.TestCase):
    """DocumentBlockList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DocumentBlockList:
        """Test DocumentBlockList
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DocumentBlockList`
        """
        model = DocumentBlockList()
        if include_optional:
            return DocumentBlockList(
                current_page = 56,
                data = [
                    openapi_client.models.document_block.DocumentBlock(
                        custom_field1 = '', 
                        custom_field2 = '', 
                        id = 56, 
                        name = '', 
                        prefix = '', )
                    ],
                last_page = 56,
                next_page_url = '',
                per_page = 56,
                prev_page_url = '',
                total = 56
            )
        else:
            return DocumentBlockList(
        )
        """

    def testDocumentBlockList(self):
        """Test DocumentBlockList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    PowerTools Developer

    Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.

    The version of the OpenAPI document: 2021.1.01
    Contact: support@apptigent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.output_stock_price import OutputStockPrice

class TestOutputStockPrice(unittest.TestCase):
    """OutputStockPrice unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OutputStockPrice:
        """Test OutputStockPrice
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OutputStockPrice`
        """
        model = OutputStockPrice()
        if include_optional:
            return OutputStockPrice(
                result = [
                    openapi_client.models.output_stock_price_result_inner.outputStockPrice_result_inner(
                        close = 1.337, 
                        date = '', 
                        exchange = '', 
                        high = 1.337, 
                        low = 1.337, 
                        open = 1.337, 
                        symbol = '', 
                        volume = 1.337, )
                    ]
            )
        else:
            return OutputStockPrice(
        )
        """

    def testOutputStockPrice(self):
        """Test OutputStockPrice"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

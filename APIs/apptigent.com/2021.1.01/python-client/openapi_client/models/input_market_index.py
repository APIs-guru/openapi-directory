# coding: utf-8

"""
    PowerTools Developer

    Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.

    The version of the OpenAPI document: 2021.1.01
    Contact: support@apptigent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class InputMarketIndex(BaseModel):
    """
    InputMarketIndex
    """ # noqa: E501
    var_date: Optional[StrictStr] = Field(default=None, description="Date (yyyy-MM-dd, leave empty for last trading day)", alias="date")
    symbol: StrictStr = Field(description="Market index")
    __properties: ClassVar[List[str]] = ["date", "symbol"]

    @field_validator('symbol')
    def symbol_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['DJA.INDX (Dow Jones Composite Average)', 'DJI.INDX (Dow Jones Industrial Average)', 'DJT.INDX (Dow Jones Transportation)', 'DJUS.INDX (Dow Jones US)', 'DXY.INDX (US Dollar Index)', 'GDOW.INDX (Global Dow USD)', 'NY.INDX (NYSE US 100 Index)', 'NYA.INDX (NYSE Composite)', 'IXIC.INDX (NASDAQ Composite)', 'NDX.INDX (NASDAQ 100)', 'GSPC.INDX (S&P 500)', 'ES.INDX (S&P 500 Futures)', 'MID.INDX (S&P Midcap 400)', 'GPTSE.INDX (S&P TSX Composite Index [Canada])', 'FTSE.INDX (FTSE 100 Index [UK])', 'CDAXX.INDX (DAX Composite Index [Germany])', 'GDAXI.INDX (DAX Index [Germany])', 'HSCE.INDX (Hang Seng China Enterprise (CEI))', 'HSI.INDX (Hang Seng Index [Hong Kong])', 'N100.INDX (EuroNext 100)', 'N225.INDX (Nikkei 225 Index)', 'RTSI.INDX (RTSI Index [Russia])', 'SSEC.INDX (Shanghai Composite)', 'SSMI.INDX (Swiss Market Index)']):
            raise ValueError("must be one of enum values ('DJA.INDX (Dow Jones Composite Average)', 'DJI.INDX (Dow Jones Industrial Average)', 'DJT.INDX (Dow Jones Transportation)', 'DJUS.INDX (Dow Jones US)', 'DXY.INDX (US Dollar Index)', 'GDOW.INDX (Global Dow USD)', 'NY.INDX (NYSE US 100 Index)', 'NYA.INDX (NYSE Composite)', 'IXIC.INDX (NASDAQ Composite)', 'NDX.INDX (NASDAQ 100)', 'GSPC.INDX (S&P 500)', 'ES.INDX (S&P 500 Futures)', 'MID.INDX (S&P Midcap 400)', 'GPTSE.INDX (S&P TSX Composite Index [Canada])', 'FTSE.INDX (FTSE 100 Index [UK])', 'CDAXX.INDX (DAX Composite Index [Germany])', 'GDAXI.INDX (DAX Index [Germany])', 'HSCE.INDX (Hang Seng China Enterprise (CEI))', 'HSI.INDX (Hang Seng Index [Hong Kong])', 'N100.INDX (EuroNext 100)', 'N225.INDX (Nikkei 225 Index)', 'RTSI.INDX (RTSI Index [Russia])', 'SSEC.INDX (Shanghai Composite)', 'SSMI.INDX (Swiss Market Index)')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InputMarketIndex from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InputMarketIndex from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "symbol": obj.get("symbol")
        })
        return _obj



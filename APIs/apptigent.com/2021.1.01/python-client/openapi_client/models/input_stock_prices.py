# coding: utf-8

"""
    PowerTools Developer

    Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.

    The version of the OpenAPI document: 2021.1.01
    Contact: support@apptigent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class InputStockPrices(BaseModel):
    """
    InputStockPrices
    """ # noqa: E501
    var_date: Optional[StrictStr] = Field(default=None, description="Date (yyyy-MM-dd, leave empty for latest)", alias="date")
    exchange: Optional[StrictStr] = Field(default=None, description="Stock exchange")
    symbols: StrictStr = Field(description="Stock ticker symbols (comma-separated, max 20)")
    __properties: ClassVar[List[str]] = ["date", "exchange", "symbols"]

    @field_validator('exchange')
    def exchange_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['XNYS (New York Stock Exchange)', 'XNAS (NASDAQ Stock Exchange)', 'XBRU (Euronext Brussels)', 'XTSE (Toronto Stock Exchange)', 'XCNQ (Candadian Securities Exchange)', 'XSHG (Shanghai Stock Exchange)', 'XCSE (Copenhagen Stock Exchange)', 'XPAR (Euronext Paris)', 'XFRA (Deutsche Borse)', 'XHKG (Hong Kong Stock Exchange)', 'XNSE (National Stock Exchange India)', 'XTAE (Tel Aviv Stock Exchange)', 'XNGO (Nagoya Stock Exchange)', 'XFKA (Fukuoka Stock Exchange)', 'XSAP (Sapporo Stock Exchange)', 'XMEX (Mexican Stock Exchange)', 'XNZE (New Zealand Stock Exchange)', 'XLIS (Euronext Lisbon)', 'MISX (Moscow Stock Exchange)', 'XSES (Singapore Stock Exchange)', 'XLON (London Stock Exchange)', 'XASE (American Stock Exchange)', 'XASX (Australia Stock Exchange)', 'XDFM (Dubai Financial Market)', 'XBKK (Stock Exchange of Thailand)', 'XSWX (SIX Swiss Exchange)', 'XSTO (Stockholm Stock Exchange)', 'BMEX (Bolsas y Mercados Españoles)', 'XJSE (Johannesburg Stock Exchange)']):
            raise ValueError("must be one of enum values ('XNYS (New York Stock Exchange)', 'XNAS (NASDAQ Stock Exchange)', 'XBRU (Euronext Brussels)', 'XTSE (Toronto Stock Exchange)', 'XCNQ (Candadian Securities Exchange)', 'XSHG (Shanghai Stock Exchange)', 'XCSE (Copenhagen Stock Exchange)', 'XPAR (Euronext Paris)', 'XFRA (Deutsche Borse)', 'XHKG (Hong Kong Stock Exchange)', 'XNSE (National Stock Exchange India)', 'XTAE (Tel Aviv Stock Exchange)', 'XNGO (Nagoya Stock Exchange)', 'XFKA (Fukuoka Stock Exchange)', 'XSAP (Sapporo Stock Exchange)', 'XMEX (Mexican Stock Exchange)', 'XNZE (New Zealand Stock Exchange)', 'XLIS (Euronext Lisbon)', 'MISX (Moscow Stock Exchange)', 'XSES (Singapore Stock Exchange)', 'XLON (London Stock Exchange)', 'XASE (American Stock Exchange)', 'XASX (Australia Stock Exchange)', 'XDFM (Dubai Financial Market)', 'XBKK (Stock Exchange of Thailand)', 'XSWX (SIX Swiss Exchange)', 'XSTO (Stockholm Stock Exchange)', 'BMEX (Bolsas y Mercados Españoles)', 'XJSE (Johannesburg Stock Exchange)')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InputStockPrices from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InputStockPrices from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "exchange": obj.get("exchange"),
            "symbols": obj.get("symbols")
        })
        return _obj



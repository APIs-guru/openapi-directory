# coding: utf-8

"""
    Etherpad API

    Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.

    The version of the OpenAPI document: 1.2.15
    Contact: support@example.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_sessions_of_author_using_get200_response_data import ListSessionsOfAuthorUsingGET200ResponseData

class TestListSessionsOfAuthorUsingGET200ResponseData(unittest.TestCase):
    """ListSessionsOfAuthorUsingGET200ResponseData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListSessionsOfAuthorUsingGET200ResponseData:
        """Test ListSessionsOfAuthorUsingGET200ResponseData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListSessionsOfAuthorUsingGET200ResponseData`
        """
        model = ListSessionsOfAuthorUsingGET200ResponseData()
        if include_optional:
            return ListSessionsOfAuthorUsingGET200ResponseData(
                sessions = [
                    openapi_client.models.get_session_info_using_get_200_response_data_info.getSessionInfoUsingGET_200_response_data_info(
                        author_id = '', 
                        group_id = '', 
                        id = '', 
                        valid_until = 56, )
                    ]
            )
        else:
            return ListSessionsOfAuthorUsingGET200ResponseData(
        )
        """

    def testListSessionsOfAuthorUsingGET200ResponseData(self):
        """Test ListSessionsOfAuthorUsingGET200ResponseData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Etherpad API

    Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.

    The version of the OpenAPI document: 1.2.15
    Contact: support@example.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_chat_head_using_get200_response_data_chat_head import GetChatHeadUsingGET200ResponseDataChatHead
from typing import Optional, Set
from typing_extensions import Self

class GetChatHeadUsingGET200ResponseData(BaseModel):
    """
    GetChatHeadUsingGET200ResponseData
    """ # noqa: E501
    chat_head: Optional[GetChatHeadUsingGET200ResponseDataChatHead] = Field(default=None, alias="chatHead")
    __properties: ClassVar[List[str]] = ["chatHead"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetChatHeadUsingGET200ResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of chat_head
        if self.chat_head:
            _dict['chatHead'] = self.chat_head.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetChatHeadUsingGET200ResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chatHead": GetChatHeadUsingGET200ResponseDataChatHead.from_dict(obj["chatHead"]) if obj.get("chatHead") is not None else None
        })
        return _obj



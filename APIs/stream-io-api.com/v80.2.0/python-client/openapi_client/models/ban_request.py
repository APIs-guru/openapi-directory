# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.user_object_request import UserObjectRequest
from typing import Optional, Set
from typing_extensions import Self

class BanRequest(BaseModel):
    """
    BanRequest
    """ # noqa: E501
    banned_by: Optional[UserObjectRequest] = None
    banned_by_id: Optional[StrictStr] = Field(default=None, description="User ID who issued a ban")
    id: Optional[StrictStr] = Field(default=None, description="Channel ID to ban user in")
    ip_ban: Optional[StrictBool] = Field(default=None, description="Whether to perform IP ban or not")
    reason: Optional[StrictStr] = Field(default=None, description="Ban reason")
    shadow: Optional[StrictBool] = Field(default=None, description="Whether to perform shadow ban or not")
    target_user_id: StrictStr = Field(description="ID of user to ban")
    timeout: Optional[StrictInt] = Field(default=None, description="Timeout of ban in minutes. User will be unbanned after this period of time")
    type: Optional[StrictStr] = Field(default=None, description="Channel type to ban user in")
    user: Optional[UserObjectRequest] = None
    user_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["banned_by", "banned_by_id", "id", "ip_ban", "reason", "shadow", "target_user_id", "timeout", "type", "user", "user_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BanRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of banned_by
        if self.banned_by:
            _dict['banned_by'] = self.banned_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BanRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "banned_by": UserObjectRequest.from_dict(obj["banned_by"]) if obj.get("banned_by") is not None else None,
            "banned_by_id": obj.get("banned_by_id"),
            "id": obj.get("id"),
            "ip_ban": obj.get("ip_ban"),
            "reason": obj.get("reason"),
            "shadow": obj.get("shadow"),
            "target_user_id": obj.get("target_user_id"),
            "timeout": obj.get("timeout"),
            "type": obj.get("type"),
            "user": UserObjectRequest.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "user_id": obj.get("user_id")
        })
        return _obj



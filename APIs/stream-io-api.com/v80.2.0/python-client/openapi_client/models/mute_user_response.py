# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.own_user import OwnUser
from openapi_client.models.user_mute import UserMute
from typing import Optional, Set
from typing_extensions import Self

class MuteUserResponse(BaseModel):
    """
    MuteUserResponse
    """ # noqa: E501
    duration: StrictStr
    mute: Optional[UserMute] = None
    mutes: Optional[List[Optional[UserMute]]] = Field(default=None, description="Object with mutes (if multiple users were muted)")
    own_user: Optional[OwnUser] = None
    __properties: ClassVar[List[str]] = ["duration", "mute", "mutes", "own_user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MuteUserResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of mute
        if self.mute:
            _dict['mute'] = self.mute.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in mutes (list)
        _items = []
        if self.mutes:
            for _item_mutes in self.mutes:
                if _item_mutes:
                    _items.append(_item_mutes.to_dict())
            _dict['mutes'] = _items
        # override the default output from pydantic by calling `to_dict()` of own_user
        if self.own_user:
            _dict['own_user'] = self.own_user.to_dict()
        # set to None if mute (nullable) is None
        # and model_fields_set contains the field
        if self.mute is None and "mute" in self.model_fields_set:
            _dict['mute'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MuteUserResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "duration": obj.get("duration"),
            "mute": UserMute.from_dict(obj["mute"]) if obj.get("mute") is not None else None,
            "mutes": [UserMute.from_dict(_item) for _item in obj["mutes"]] if obj.get("mutes") is not None else None,
            "own_user": OwnUser.from_dict(obj["own_user"]) if obj.get("own_user") is not None else None
        })
        return _obj



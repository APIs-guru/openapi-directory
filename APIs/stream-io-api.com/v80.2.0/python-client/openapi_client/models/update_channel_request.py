# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.channel_member_request import ChannelMemberRequest
from openapi_client.models.channel_request import ChannelRequest
from openapi_client.models.message_request import MessageRequest
from openapi_client.models.user_object_request import UserObjectRequest
from typing import Optional, Set
from typing_extensions import Self

class UpdateChannelRequest(BaseModel):
    """
    UpdateChannelRequest
    """ # noqa: E501
    accept_invite: Optional[StrictBool] = Field(default=None, description="Set to `true` to accept the invite")
    add_members: Optional[List[Optional[ChannelMemberRequest]]] = Field(default=None, description="List of user IDs to add to the channel")
    add_moderators: List[StrictStr] = Field(description="List of user IDs to make channel moderators")
    assign_roles: Optional[List[Optional[ChannelMemberRequest]]] = Field(default=None, description="List of channel member role assignments. If any specified user is not part of the channel, the request will fail")
    cooldown: Optional[Annotated[int, Field(le=120, strict=True, ge=0)]] = Field(default=None, description="Sets cool down period for the channel in seconds")
    data: Optional[ChannelRequest] = None
    demote_moderators: List[StrictStr] = Field(description="List of user IDs to take away moderators status from")
    hide_history: Optional[StrictBool] = Field(default=None, description="Set to `true` to hide channel's history when adding new members")
    invites: Optional[List[Optional[ChannelMemberRequest]]] = Field(default=None, description="List of user IDs to invite to the channel")
    message: Optional[MessageRequest] = None
    reject_invite: Optional[StrictBool] = Field(default=None, description="Set to `true` to reject the invite")
    remove_members: List[StrictStr] = Field(description="List of user IDs to remove from the channel")
    skip_push: Optional[StrictBool] = Field(default=None, description="When `message` is set disables all push notifications for it")
    user: Optional[UserObjectRequest] = None
    user_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["accept_invite", "add_members", "add_moderators", "assign_roles", "cooldown", "data", "demote_moderators", "hide_history", "invites", "message", "reject_invite", "remove_members", "skip_push", "user", "user_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateChannelRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in add_members (list)
        _items = []
        if self.add_members:
            for _item_add_members in self.add_members:
                if _item_add_members:
                    _items.append(_item_add_members.to_dict())
            _dict['add_members'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in assign_roles (list)
        _items = []
        if self.assign_roles:
            for _item_assign_roles in self.assign_roles:
                if _item_assign_roles:
                    _items.append(_item_assign_roles.to_dict())
            _dict['assign_roles'] = _items
        # override the default output from pydantic by calling `to_dict()` of data
        if self.data:
            _dict['data'] = self.data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in invites (list)
        _items = []
        if self.invites:
            for _item_invites in self.invites:
                if _item_invites:
                    _items.append(_item_invites.to_dict())
            _dict['invites'] = _items
        # override the default output from pydantic by calling `to_dict()` of message
        if self.message:
            _dict['message'] = self.message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateChannelRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accept_invite": obj.get("accept_invite"),
            "add_members": [ChannelMemberRequest.from_dict(_item) for _item in obj["add_members"]] if obj.get("add_members") is not None else None,
            "add_moderators": obj.get("add_moderators"),
            "assign_roles": [ChannelMemberRequest.from_dict(_item) for _item in obj["assign_roles"]] if obj.get("assign_roles") is not None else None,
            "cooldown": obj.get("cooldown"),
            "data": ChannelRequest.from_dict(obj["data"]) if obj.get("data") is not None else None,
            "demote_moderators": obj.get("demote_moderators"),
            "hide_history": obj.get("hide_history"),
            "invites": [ChannelMemberRequest.from_dict(_item) for _item in obj["invites"]] if obj.get("invites") is not None else None,
            "message": MessageRequest.from_dict(obj["message"]) if obj.get("message") is not None else None,
            "reject_invite": obj.get("reject_invite"),
            "remove_members": obj.get("remove_members"),
            "skip_push": obj.get("skip_push"),
            "user": UserObjectRequest.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "user_id": obj.get("user_id")
        })
        return _obj



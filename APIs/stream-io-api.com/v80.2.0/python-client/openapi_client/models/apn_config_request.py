# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class APNConfigRequest(BaseModel):
    """
    APNConfigRequest
    """ # noqa: E501
    disabled: Optional[StrictBool] = Field(default=None, alias="Disabled")
    auth_key: Optional[StrictStr] = None
    auth_type: Optional[StrictStr] = None
    bundle_id: Optional[StrictStr] = None
    development: Optional[StrictBool] = None
    host: Optional[StrictStr] = None
    key_id: Optional[StrictStr] = None
    notification_template: Optional[StrictStr] = None
    p12_cert: Optional[StrictStr] = None
    team_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["Disabled", "auth_key", "auth_type", "bundle_id", "development", "host", "key_id", "notification_template", "p12_cert", "team_id"]

    @field_validator('auth_type')
    def auth_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['certificate', 'token']):
            raise ValueError("must be one of enum values ('certificate', 'token')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of APNConfigRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of APNConfigRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Disabled": obj.get("Disabled"),
            "auth_key": obj.get("auth_key"),
            "auth_type": obj.get("auth_type"),
            "bundle_id": obj.get("bundle_id"),
            "development": obj.get("development"),
            "host": obj.get("host"),
            "key_id": obj.get("key_id"),
            "notification_template": obj.get("notification_template"),
            "p12_cert": obj.get("p12_cert"),
            "team_id": obj.get("team_id")
        })
        return _obj



# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.attachment_request import AttachmentRequest
from openapi_client.models.user_object_request import UserObjectRequest
from typing import Optional, Set
from typing_extensions import Self

class MessageRequest(BaseModel):
    """
    Represents any chat message
    """ # noqa: E501
    attachments: List[Optional[AttachmentRequest]] = Field(description="Array of message attachments")
    cid: Optional[List[StrictInt]] = Field(default=None, description="Channel unique identifier in <type>:<id> format")
    html: Optional[StrictStr] = Field(default=None, description="Contains HTML markup of the message. Can only be set when using server-side API")
    id: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Message ID is unique string identifier of the message")
    mentioned_users: Optional[List[StrictStr]] = Field(default=None, description="List of mentioned users")
    mml: Optional[StrictStr] = Field(default=None, description="Should be empty if `text` is provided. Can only be set when using server-side API")
    parent: Optional[List[StrictInt]] = None
    parent_id: Optional[StrictStr] = Field(default=None, description="ID of parent message (thread)")
    pin_expires: Optional[datetime] = Field(default=None, description="Date when pinned message expires")
    pinned: Optional[StrictBool] = Field(default=None, description="Whether message is pinned or not")
    pinned_at: Optional[datetime] = Field(default=None, description="Date when message got pinned")
    pinned_by: Optional[List[StrictInt]] = Field(default=None, description="Contains user who pinned the message")
    quoted_message_id: Optional[StrictStr] = None
    reaction_scores: Optional[List[StrictInt]] = Field(default=None, description="An object containing scores of reactions of each type. Key: reaction type (string), value: total score of reactions (int)")
    show_in_channel: Optional[StrictBool] = Field(default=None, description="Whether thread reply should be shown in the channel as well")
    silent: Optional[StrictBool] = Field(default=None, description="Whether message is silent or not")
    text: Optional[StrictStr] = Field(default=None, description="Text of the message. Should be empty if `mml` is provided")
    type: Optional[StrictStr] = Field(default=None, description="Contains type of the message")
    user: Optional[UserObjectRequest] = None
    user_id: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["attachments", "cid", "html", "id", "mentioned_users", "mml", "parent", "parent_id", "pin_expires", "pinned", "pinned_at", "pinned_by", "quoted_message_id", "reaction_scores", "show_in_channel", "silent", "text", "type", "user", "user_id"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['regular', 'ephemeral', 'error', 'reply', 'system', 'deleted']):
            raise ValueError("must be one of enum values ('regular', 'ephemeral', 'error', 'reply', 'system', 'deleted')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MessageRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if pinned_at (nullable) is None
        # and model_fields_set contains the field
        if self.pinned_at is None and "pinned_at" in self.model_fields_set:
            _dict['pinned_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MessageRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attachments": [AttachmentRequest.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "cid": obj.get("cid"),
            "html": obj.get("html"),
            "id": obj.get("id"),
            "mentioned_users": obj.get("mentioned_users"),
            "mml": obj.get("mml"),
            "parent": obj.get("parent"),
            "parent_id": obj.get("parent_id"),
            "pin_expires": obj.get("pin_expires"),
            "pinned": obj.get("pinned"),
            "pinned_at": obj.get("pinned_at"),
            "pinned_by": obj.get("pinned_by"),
            "quoted_message_id": obj.get("quoted_message_id"),
            "reaction_scores": obj.get("reaction_scores"),
            "show_in_channel": obj.get("show_in_channel"),
            "silent": obj.get("silent"),
            "text": obj.get("text"),
            "type": obj.get("type"),
            "user": UserObjectRequest.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "user_id": obj.get("user_id")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj



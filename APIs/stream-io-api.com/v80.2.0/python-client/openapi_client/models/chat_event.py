# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.any_event import AnyEvent
from openapi_client.models.channel_created_event import ChannelCreatedEvent
from openapi_client.models.channel_deleted_event import ChannelDeletedEvent
from openapi_client.models.channel_frozen_event import ChannelFrozenEvent
from openapi_client.models.channel_hidden_event import ChannelHiddenEvent
from openapi_client.models.channel_kicked_event import ChannelKickedEvent
from openapi_client.models.channel_muted_event import ChannelMutedEvent
from openapi_client.models.channel_truncated_event import ChannelTruncatedEvent
from openapi_client.models.channel_un_frozen_event import ChannelUnFrozenEvent
from openapi_client.models.channel_unmuted_event import ChannelUnmutedEvent
from openapi_client.models.channel_updated_event import ChannelUpdatedEvent
from openapi_client.models.channel_visible_event import ChannelVisibleEvent
from openapi_client.models.health_check_event import HealthCheckEvent
from openapi_client.models.member_added_event import MemberAddedEvent
from openapi_client.models.member_removed_event import MemberRemovedEvent
from openapi_client.models.member_updated_event import MemberUpdatedEvent
from openapi_client.models.message_deleted_event import MessageDeletedEvent
from openapi_client.models.message_flagged_event import MessageFlaggedEvent
from openapi_client.models.message_new_event import MessageNewEvent
from openapi_client.models.message_read_event import MessageReadEvent
from openapi_client.models.message_unblocked_event import MessageUnblockedEvent
from openapi_client.models.message_updated_event import MessageUpdatedEvent
from openapi_client.models.notification_added_to_channel_event import NotificationAddedToChannelEvent
from openapi_client.models.notification_channel_deleted_event import NotificationChannelDeletedEvent
from openapi_client.models.notification_channel_mutes_updated_event import NotificationChannelMutesUpdatedEvent
from openapi_client.models.notification_channel_truncated_event import NotificationChannelTruncatedEvent
from openapi_client.models.notification_invite_accepted_event import NotificationInviteAcceptedEvent
from openapi_client.models.notification_invite_rejected_event import NotificationInviteRejectedEvent
from openapi_client.models.notification_invited_event import NotificationInvitedEvent
from openapi_client.models.notification_mark_read_event import NotificationMarkReadEvent
from openapi_client.models.notification_mark_unread_event import NotificationMarkUnreadEvent
from openapi_client.models.notification_mutes_updated_event import NotificationMutesUpdatedEvent
from openapi_client.models.notification_new_message_event import NotificationNewMessageEvent
from openapi_client.models.notification_removed_from_channel_event import NotificationRemovedFromChannelEvent
from openapi_client.models.reaction_deleted_event import ReactionDeletedEvent
from openapi_client.models.reaction_new_event import ReactionNewEvent
from openapi_client.models.reaction_updated_event import ReactionUpdatedEvent
from openapi_client.models.typing_start_event import TypingStartEvent
from openapi_client.models.typing_stop_event import TypingStopEvent
from openapi_client.models.user_banned_event import UserBannedEvent
from openapi_client.models.user_deactivated_event import UserDeactivatedEvent
from openapi_client.models.user_deleted_event import UserDeletedEvent
from openapi_client.models.user_flagged_event import UserFlaggedEvent
from openapi_client.models.user_muted_event import UserMutedEvent
from openapi_client.models.user_presence_changed_event import UserPresenceChangedEvent
from openapi_client.models.user_reactivated_event import UserReactivatedEvent
from openapi_client.models.user_unbanned_event import UserUnbannedEvent
from openapi_client.models.user_unmuted_event import UserUnmutedEvent
from openapi_client.models.user_unread_reminder_event import UserUnreadReminderEvent
from openapi_client.models.user_updated_event import UserUpdatedEvent
from openapi_client.models.user_watching_start_event import UserWatchingStartEvent
from openapi_client.models.user_watching_stop_event import UserWatchingStopEvent
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

CHATEVENT_ONE_OF_SCHEMAS = ["AnyEvent", "ChannelCreatedEvent", "ChannelDeletedEvent", "ChannelFrozenEvent", "ChannelHiddenEvent", "ChannelKickedEvent", "ChannelMutedEvent", "ChannelTruncatedEvent", "ChannelUnFrozenEvent", "ChannelUnmutedEvent", "ChannelUpdatedEvent", "ChannelVisibleEvent", "HealthCheckEvent", "MemberAddedEvent", "MemberRemovedEvent", "MemberUpdatedEvent", "MessageDeletedEvent", "MessageFlaggedEvent", "MessageNewEvent", "MessageReadEvent", "MessageUnblockedEvent", "MessageUpdatedEvent", "NotificationAddedToChannelEvent", "NotificationChannelDeletedEvent", "NotificationChannelMutesUpdatedEvent", "NotificationChannelTruncatedEvent", "NotificationInviteAcceptedEvent", "NotificationInviteRejectedEvent", "NotificationInvitedEvent", "NotificationMarkReadEvent", "NotificationMarkUnreadEvent", "NotificationMutesUpdatedEvent", "NotificationNewMessageEvent", "NotificationRemovedFromChannelEvent", "ReactionDeletedEvent", "ReactionNewEvent", "ReactionUpdatedEvent", "TypingStartEvent", "TypingStopEvent", "UserBannedEvent", "UserDeactivatedEvent", "UserDeletedEvent", "UserFlaggedEvent", "UserMutedEvent", "UserPresenceChangedEvent", "UserReactivatedEvent", "UserUnbannedEvent", "UserUnmutedEvent", "UserUnreadReminderEvent", "UserUpdatedEvent", "UserWatchingStartEvent", "UserWatchingStopEvent"]

class ChatEvent(BaseModel):
    """
    The discriminator object for all websocket events, you should use this to map event payloads to their own type
    """
    # data type: AnyEvent
    oneof_schema_1_validator: Optional[AnyEvent] = None
    # data type: AnyEvent
    oneof_schema_2_validator: Optional[AnyEvent] = None
    # data type: ChannelCreatedEvent
    oneof_schema_3_validator: Optional[ChannelCreatedEvent] = None
    # data type: ChannelDeletedEvent
    oneof_schema_4_validator: Optional[ChannelDeletedEvent] = None
    # data type: ChannelFrozenEvent
    oneof_schema_5_validator: Optional[ChannelFrozenEvent] = None
    # data type: ChannelHiddenEvent
    oneof_schema_6_validator: Optional[ChannelHiddenEvent] = None
    # data type: ChannelKickedEvent
    oneof_schema_7_validator: Optional[ChannelKickedEvent] = None
    # data type: ChannelMutedEvent
    oneof_schema_8_validator: Optional[ChannelMutedEvent] = None
    # data type: ChannelTruncatedEvent
    oneof_schema_9_validator: Optional[ChannelTruncatedEvent] = None
    # data type: ChannelUnFrozenEvent
    oneof_schema_10_validator: Optional[ChannelUnFrozenEvent] = None
    # data type: ChannelUnmutedEvent
    oneof_schema_11_validator: Optional[ChannelUnmutedEvent] = None
    # data type: ChannelUpdatedEvent
    oneof_schema_12_validator: Optional[ChannelUpdatedEvent] = None
    # data type: ChannelVisibleEvent
    oneof_schema_13_validator: Optional[ChannelVisibleEvent] = None
    # data type: HealthCheckEvent
    oneof_schema_14_validator: Optional[HealthCheckEvent] = None
    # data type: MemberAddedEvent
    oneof_schema_15_validator: Optional[MemberAddedEvent] = None
    # data type: MemberRemovedEvent
    oneof_schema_16_validator: Optional[MemberRemovedEvent] = None
    # data type: MemberUpdatedEvent
    oneof_schema_17_validator: Optional[MemberUpdatedEvent] = None
    # data type: MessageDeletedEvent
    oneof_schema_18_validator: Optional[MessageDeletedEvent] = None
    # data type: MessageFlaggedEvent
    oneof_schema_19_validator: Optional[MessageFlaggedEvent] = None
    # data type: MessageNewEvent
    oneof_schema_20_validator: Optional[MessageNewEvent] = None
    # data type: MessageReadEvent
    oneof_schema_21_validator: Optional[MessageReadEvent] = None
    # data type: MessageUnblockedEvent
    oneof_schema_22_validator: Optional[MessageUnblockedEvent] = None
    # data type: MessageUpdatedEvent
    oneof_schema_23_validator: Optional[MessageUpdatedEvent] = None
    # data type: NotificationAddedToChannelEvent
    oneof_schema_24_validator: Optional[NotificationAddedToChannelEvent] = None
    # data type: NotificationChannelDeletedEvent
    oneof_schema_25_validator: Optional[NotificationChannelDeletedEvent] = None
    # data type: NotificationChannelMutesUpdatedEvent
    oneof_schema_26_validator: Optional[NotificationChannelMutesUpdatedEvent] = None
    # data type: NotificationChannelTruncatedEvent
    oneof_schema_27_validator: Optional[NotificationChannelTruncatedEvent] = None
    # data type: NotificationInviteAcceptedEvent
    oneof_schema_28_validator: Optional[NotificationInviteAcceptedEvent] = None
    # data type: NotificationInviteRejectedEvent
    oneof_schema_29_validator: Optional[NotificationInviteRejectedEvent] = None
    # data type: NotificationInvitedEvent
    oneof_schema_30_validator: Optional[NotificationInvitedEvent] = None
    # data type: NotificationMarkReadEvent
    oneof_schema_31_validator: Optional[NotificationMarkReadEvent] = None
    # data type: NotificationMarkUnreadEvent
    oneof_schema_32_validator: Optional[NotificationMarkUnreadEvent] = None
    # data type: NotificationMutesUpdatedEvent
    oneof_schema_33_validator: Optional[NotificationMutesUpdatedEvent] = None
    # data type: NotificationNewMessageEvent
    oneof_schema_34_validator: Optional[NotificationNewMessageEvent] = None
    # data type: NotificationRemovedFromChannelEvent
    oneof_schema_35_validator: Optional[NotificationRemovedFromChannelEvent] = None
    # data type: ReactionDeletedEvent
    oneof_schema_36_validator: Optional[ReactionDeletedEvent] = None
    # data type: ReactionNewEvent
    oneof_schema_37_validator: Optional[ReactionNewEvent] = None
    # data type: ReactionUpdatedEvent
    oneof_schema_38_validator: Optional[ReactionUpdatedEvent] = None
    # data type: TypingStartEvent
    oneof_schema_39_validator: Optional[TypingStartEvent] = None
    # data type: TypingStopEvent
    oneof_schema_40_validator: Optional[TypingStopEvent] = None
    # data type: UserBannedEvent
    oneof_schema_41_validator: Optional[UserBannedEvent] = None
    # data type: UserDeactivatedEvent
    oneof_schema_42_validator: Optional[UserDeactivatedEvent] = None
    # data type: UserDeletedEvent
    oneof_schema_43_validator: Optional[UserDeletedEvent] = None
    # data type: UserFlaggedEvent
    oneof_schema_44_validator: Optional[UserFlaggedEvent] = None
    # data type: UserMutedEvent
    oneof_schema_45_validator: Optional[UserMutedEvent] = None
    # data type: UserPresenceChangedEvent
    oneof_schema_46_validator: Optional[UserPresenceChangedEvent] = None
    # data type: UserReactivatedEvent
    oneof_schema_47_validator: Optional[UserReactivatedEvent] = None
    # data type: UserUnbannedEvent
    oneof_schema_48_validator: Optional[UserUnbannedEvent] = None
    # data type: UserUnmutedEvent
    oneof_schema_49_validator: Optional[UserUnmutedEvent] = None
    # data type: UserUnreadReminderEvent
    oneof_schema_50_validator: Optional[UserUnreadReminderEvent] = None
    # data type: UserUpdatedEvent
    oneof_schema_51_validator: Optional[UserUpdatedEvent] = None
    # data type: UserWatchingStartEvent
    oneof_schema_52_validator: Optional[UserWatchingStartEvent] = None
    # data type: UserWatchingStopEvent
    oneof_schema_53_validator: Optional[UserWatchingStopEvent] = None
    actual_instance: Optional[Union[AnyEvent, ChannelCreatedEvent, ChannelDeletedEvent, ChannelFrozenEvent, ChannelHiddenEvent, ChannelKickedEvent, ChannelMutedEvent, ChannelTruncatedEvent, ChannelUnFrozenEvent, ChannelUnmutedEvent, ChannelUpdatedEvent, ChannelVisibleEvent, HealthCheckEvent, MemberAddedEvent, MemberRemovedEvent, MemberUpdatedEvent, MessageDeletedEvent, MessageFlaggedEvent, MessageNewEvent, MessageReadEvent, MessageUnblockedEvent, MessageUpdatedEvent, NotificationAddedToChannelEvent, NotificationChannelDeletedEvent, NotificationChannelMutesUpdatedEvent, NotificationChannelTruncatedEvent, NotificationInviteAcceptedEvent, NotificationInviteRejectedEvent, NotificationInvitedEvent, NotificationMarkReadEvent, NotificationMarkUnreadEvent, NotificationMutesUpdatedEvent, NotificationNewMessageEvent, NotificationRemovedFromChannelEvent, ReactionDeletedEvent, ReactionNewEvent, ReactionUpdatedEvent, TypingStartEvent, TypingStopEvent, UserBannedEvent, UserDeactivatedEvent, UserDeletedEvent, UserFlaggedEvent, UserMutedEvent, UserPresenceChangedEvent, UserReactivatedEvent, UserUnbannedEvent, UserUnmutedEvent, UserUnreadReminderEvent, UserUpdatedEvent, UserWatchingStartEvent, UserWatchingStopEvent]] = None
    one_of_schemas: Set[str] = { "AnyEvent", "ChannelCreatedEvent", "ChannelDeletedEvent", "ChannelFrozenEvent", "ChannelHiddenEvent", "ChannelKickedEvent", "ChannelMutedEvent", "ChannelTruncatedEvent", "ChannelUnFrozenEvent", "ChannelUnmutedEvent", "ChannelUpdatedEvent", "ChannelVisibleEvent", "HealthCheckEvent", "MemberAddedEvent", "MemberRemovedEvent", "MemberUpdatedEvent", "MessageDeletedEvent", "MessageFlaggedEvent", "MessageNewEvent", "MessageReadEvent", "MessageUnblockedEvent", "MessageUpdatedEvent", "NotificationAddedToChannelEvent", "NotificationChannelDeletedEvent", "NotificationChannelMutesUpdatedEvent", "NotificationChannelTruncatedEvent", "NotificationInviteAcceptedEvent", "NotificationInviteRejectedEvent", "NotificationInvitedEvent", "NotificationMarkReadEvent", "NotificationMarkUnreadEvent", "NotificationMutesUpdatedEvent", "NotificationNewMessageEvent", "NotificationRemovedFromChannelEvent", "ReactionDeletedEvent", "ReactionNewEvent", "ReactionUpdatedEvent", "TypingStartEvent", "TypingStopEvent", "UserBannedEvent", "UserDeactivatedEvent", "UserDeletedEvent", "UserFlaggedEvent", "UserMutedEvent", "UserPresenceChangedEvent", "UserReactivatedEvent", "UserUnbannedEvent", "UserUnmutedEvent", "UserUnreadReminderEvent", "UserUpdatedEvent", "UserWatchingStartEvent", "UserWatchingStopEvent" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = ChatEvent.model_construct()
        error_messages = []
        match = 0
        # validate data type: AnyEvent
        if not isinstance(v, AnyEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AnyEvent`")
        else:
            match += 1
        # validate data type: AnyEvent
        if not isinstance(v, AnyEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AnyEvent`")
        else:
            match += 1
        # validate data type: ChannelCreatedEvent
        if not isinstance(v, ChannelCreatedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ChannelCreatedEvent`")
        else:
            match += 1
        # validate data type: ChannelDeletedEvent
        if not isinstance(v, ChannelDeletedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ChannelDeletedEvent`")
        else:
            match += 1
        # validate data type: ChannelFrozenEvent
        if not isinstance(v, ChannelFrozenEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ChannelFrozenEvent`")
        else:
            match += 1
        # validate data type: ChannelHiddenEvent
        if not isinstance(v, ChannelHiddenEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ChannelHiddenEvent`")
        else:
            match += 1
        # validate data type: ChannelKickedEvent
        if not isinstance(v, ChannelKickedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ChannelKickedEvent`")
        else:
            match += 1
        # validate data type: ChannelMutedEvent
        if not isinstance(v, ChannelMutedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ChannelMutedEvent`")
        else:
            match += 1
        # validate data type: ChannelTruncatedEvent
        if not isinstance(v, ChannelTruncatedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ChannelTruncatedEvent`")
        else:
            match += 1
        # validate data type: ChannelUnFrozenEvent
        if not isinstance(v, ChannelUnFrozenEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ChannelUnFrozenEvent`")
        else:
            match += 1
        # validate data type: ChannelUnmutedEvent
        if not isinstance(v, ChannelUnmutedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ChannelUnmutedEvent`")
        else:
            match += 1
        # validate data type: ChannelUpdatedEvent
        if not isinstance(v, ChannelUpdatedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ChannelUpdatedEvent`")
        else:
            match += 1
        # validate data type: ChannelVisibleEvent
        if not isinstance(v, ChannelVisibleEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ChannelVisibleEvent`")
        else:
            match += 1
        # validate data type: HealthCheckEvent
        if not isinstance(v, HealthCheckEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `HealthCheckEvent`")
        else:
            match += 1
        # validate data type: MemberAddedEvent
        if not isinstance(v, MemberAddedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MemberAddedEvent`")
        else:
            match += 1
        # validate data type: MemberRemovedEvent
        if not isinstance(v, MemberRemovedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MemberRemovedEvent`")
        else:
            match += 1
        # validate data type: MemberUpdatedEvent
        if not isinstance(v, MemberUpdatedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MemberUpdatedEvent`")
        else:
            match += 1
        # validate data type: MessageDeletedEvent
        if not isinstance(v, MessageDeletedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MessageDeletedEvent`")
        else:
            match += 1
        # validate data type: MessageFlaggedEvent
        if not isinstance(v, MessageFlaggedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MessageFlaggedEvent`")
        else:
            match += 1
        # validate data type: MessageNewEvent
        if not isinstance(v, MessageNewEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MessageNewEvent`")
        else:
            match += 1
        # validate data type: MessageReadEvent
        if not isinstance(v, MessageReadEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MessageReadEvent`")
        else:
            match += 1
        # validate data type: MessageUnblockedEvent
        if not isinstance(v, MessageUnblockedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MessageUnblockedEvent`")
        else:
            match += 1
        # validate data type: MessageUpdatedEvent
        if not isinstance(v, MessageUpdatedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MessageUpdatedEvent`")
        else:
            match += 1
        # validate data type: NotificationAddedToChannelEvent
        if not isinstance(v, NotificationAddedToChannelEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NotificationAddedToChannelEvent`")
        else:
            match += 1
        # validate data type: NotificationChannelDeletedEvent
        if not isinstance(v, NotificationChannelDeletedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NotificationChannelDeletedEvent`")
        else:
            match += 1
        # validate data type: NotificationChannelMutesUpdatedEvent
        if not isinstance(v, NotificationChannelMutesUpdatedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NotificationChannelMutesUpdatedEvent`")
        else:
            match += 1
        # validate data type: NotificationChannelTruncatedEvent
        if not isinstance(v, NotificationChannelTruncatedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NotificationChannelTruncatedEvent`")
        else:
            match += 1
        # validate data type: NotificationInviteAcceptedEvent
        if not isinstance(v, NotificationInviteAcceptedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NotificationInviteAcceptedEvent`")
        else:
            match += 1
        # validate data type: NotificationInviteRejectedEvent
        if not isinstance(v, NotificationInviteRejectedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NotificationInviteRejectedEvent`")
        else:
            match += 1
        # validate data type: NotificationInvitedEvent
        if not isinstance(v, NotificationInvitedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NotificationInvitedEvent`")
        else:
            match += 1
        # validate data type: NotificationMarkReadEvent
        if not isinstance(v, NotificationMarkReadEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NotificationMarkReadEvent`")
        else:
            match += 1
        # validate data type: NotificationMarkUnreadEvent
        if not isinstance(v, NotificationMarkUnreadEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NotificationMarkUnreadEvent`")
        else:
            match += 1
        # validate data type: NotificationMutesUpdatedEvent
        if not isinstance(v, NotificationMutesUpdatedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NotificationMutesUpdatedEvent`")
        else:
            match += 1
        # validate data type: NotificationNewMessageEvent
        if not isinstance(v, NotificationNewMessageEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NotificationNewMessageEvent`")
        else:
            match += 1
        # validate data type: NotificationRemovedFromChannelEvent
        if not isinstance(v, NotificationRemovedFromChannelEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NotificationRemovedFromChannelEvent`")
        else:
            match += 1
        # validate data type: ReactionDeletedEvent
        if not isinstance(v, ReactionDeletedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ReactionDeletedEvent`")
        else:
            match += 1
        # validate data type: ReactionNewEvent
        if not isinstance(v, ReactionNewEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ReactionNewEvent`")
        else:
            match += 1
        # validate data type: ReactionUpdatedEvent
        if not isinstance(v, ReactionUpdatedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ReactionUpdatedEvent`")
        else:
            match += 1
        # validate data type: TypingStartEvent
        if not isinstance(v, TypingStartEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TypingStartEvent`")
        else:
            match += 1
        # validate data type: TypingStopEvent
        if not isinstance(v, TypingStopEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TypingStopEvent`")
        else:
            match += 1
        # validate data type: UserBannedEvent
        if not isinstance(v, UserBannedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserBannedEvent`")
        else:
            match += 1
        # validate data type: UserDeactivatedEvent
        if not isinstance(v, UserDeactivatedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserDeactivatedEvent`")
        else:
            match += 1
        # validate data type: UserDeletedEvent
        if not isinstance(v, UserDeletedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserDeletedEvent`")
        else:
            match += 1
        # validate data type: UserFlaggedEvent
        if not isinstance(v, UserFlaggedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserFlaggedEvent`")
        else:
            match += 1
        # validate data type: UserMutedEvent
        if not isinstance(v, UserMutedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserMutedEvent`")
        else:
            match += 1
        # validate data type: UserPresenceChangedEvent
        if not isinstance(v, UserPresenceChangedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserPresenceChangedEvent`")
        else:
            match += 1
        # validate data type: UserReactivatedEvent
        if not isinstance(v, UserReactivatedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserReactivatedEvent`")
        else:
            match += 1
        # validate data type: UserUnbannedEvent
        if not isinstance(v, UserUnbannedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserUnbannedEvent`")
        else:
            match += 1
        # validate data type: UserUnmutedEvent
        if not isinstance(v, UserUnmutedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserUnmutedEvent`")
        else:
            match += 1
        # validate data type: UserUnreadReminderEvent
        if not isinstance(v, UserUnreadReminderEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserUnreadReminderEvent`")
        else:
            match += 1
        # validate data type: UserUpdatedEvent
        if not isinstance(v, UserUpdatedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserUpdatedEvent`")
        else:
            match += 1
        # validate data type: UserWatchingStartEvent
        if not isinstance(v, UserWatchingStartEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserWatchingStartEvent`")
        else:
            match += 1
        # validate data type: UserWatchingStopEvent
        if not isinstance(v, UserWatchingStopEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserWatchingStopEvent`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in ChatEvent with oneOf schemas: AnyEvent, ChannelCreatedEvent, ChannelDeletedEvent, ChannelFrozenEvent, ChannelHiddenEvent, ChannelKickedEvent, ChannelMutedEvent, ChannelTruncatedEvent, ChannelUnFrozenEvent, ChannelUnmutedEvent, ChannelUpdatedEvent, ChannelVisibleEvent, HealthCheckEvent, MemberAddedEvent, MemberRemovedEvent, MemberUpdatedEvent, MessageDeletedEvent, MessageFlaggedEvent, MessageNewEvent, MessageReadEvent, MessageUnblockedEvent, MessageUpdatedEvent, NotificationAddedToChannelEvent, NotificationChannelDeletedEvent, NotificationChannelMutesUpdatedEvent, NotificationChannelTruncatedEvent, NotificationInviteAcceptedEvent, NotificationInviteRejectedEvent, NotificationInvitedEvent, NotificationMarkReadEvent, NotificationMarkUnreadEvent, NotificationMutesUpdatedEvent, NotificationNewMessageEvent, NotificationRemovedFromChannelEvent, ReactionDeletedEvent, ReactionNewEvent, ReactionUpdatedEvent, TypingStartEvent, TypingStopEvent, UserBannedEvent, UserDeactivatedEvent, UserDeletedEvent, UserFlaggedEvent, UserMutedEvent, UserPresenceChangedEvent, UserReactivatedEvent, UserUnbannedEvent, UserUnmutedEvent, UserUnreadReminderEvent, UserUpdatedEvent, UserWatchingStartEvent, UserWatchingStopEvent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in ChatEvent with oneOf schemas: AnyEvent, ChannelCreatedEvent, ChannelDeletedEvent, ChannelFrozenEvent, ChannelHiddenEvent, ChannelKickedEvent, ChannelMutedEvent, ChannelTruncatedEvent, ChannelUnFrozenEvent, ChannelUnmutedEvent, ChannelUpdatedEvent, ChannelVisibleEvent, HealthCheckEvent, MemberAddedEvent, MemberRemovedEvent, MemberUpdatedEvent, MessageDeletedEvent, MessageFlaggedEvent, MessageNewEvent, MessageReadEvent, MessageUnblockedEvent, MessageUpdatedEvent, NotificationAddedToChannelEvent, NotificationChannelDeletedEvent, NotificationChannelMutesUpdatedEvent, NotificationChannelTruncatedEvent, NotificationInviteAcceptedEvent, NotificationInviteRejectedEvent, NotificationInvitedEvent, NotificationMarkReadEvent, NotificationMarkUnreadEvent, NotificationMutesUpdatedEvent, NotificationNewMessageEvent, NotificationRemovedFromChannelEvent, ReactionDeletedEvent, ReactionNewEvent, ReactionUpdatedEvent, TypingStartEvent, TypingStopEvent, UserBannedEvent, UserDeactivatedEvent, UserDeletedEvent, UserFlaggedEvent, UserMutedEvent, UserPresenceChangedEvent, UserReactivatedEvent, UserUnbannedEvent, UserUnmutedEvent, UserUnreadReminderEvent, UserUpdatedEvent, UserWatchingStartEvent, UserWatchingStopEvent. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into AnyEvent
        try:
            instance.actual_instance = AnyEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AnyEvent
        try:
            instance.actual_instance = AnyEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ChannelCreatedEvent
        try:
            instance.actual_instance = ChannelCreatedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ChannelDeletedEvent
        try:
            instance.actual_instance = ChannelDeletedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ChannelFrozenEvent
        try:
            instance.actual_instance = ChannelFrozenEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ChannelHiddenEvent
        try:
            instance.actual_instance = ChannelHiddenEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ChannelKickedEvent
        try:
            instance.actual_instance = ChannelKickedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ChannelMutedEvent
        try:
            instance.actual_instance = ChannelMutedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ChannelTruncatedEvent
        try:
            instance.actual_instance = ChannelTruncatedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ChannelUnFrozenEvent
        try:
            instance.actual_instance = ChannelUnFrozenEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ChannelUnmutedEvent
        try:
            instance.actual_instance = ChannelUnmutedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ChannelUpdatedEvent
        try:
            instance.actual_instance = ChannelUpdatedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ChannelVisibleEvent
        try:
            instance.actual_instance = ChannelVisibleEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into HealthCheckEvent
        try:
            instance.actual_instance = HealthCheckEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MemberAddedEvent
        try:
            instance.actual_instance = MemberAddedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MemberRemovedEvent
        try:
            instance.actual_instance = MemberRemovedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MemberUpdatedEvent
        try:
            instance.actual_instance = MemberUpdatedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MessageDeletedEvent
        try:
            instance.actual_instance = MessageDeletedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MessageFlaggedEvent
        try:
            instance.actual_instance = MessageFlaggedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MessageNewEvent
        try:
            instance.actual_instance = MessageNewEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MessageReadEvent
        try:
            instance.actual_instance = MessageReadEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MessageUnblockedEvent
        try:
            instance.actual_instance = MessageUnblockedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MessageUpdatedEvent
        try:
            instance.actual_instance = MessageUpdatedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NotificationAddedToChannelEvent
        try:
            instance.actual_instance = NotificationAddedToChannelEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NotificationChannelDeletedEvent
        try:
            instance.actual_instance = NotificationChannelDeletedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NotificationChannelMutesUpdatedEvent
        try:
            instance.actual_instance = NotificationChannelMutesUpdatedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NotificationChannelTruncatedEvent
        try:
            instance.actual_instance = NotificationChannelTruncatedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NotificationInviteAcceptedEvent
        try:
            instance.actual_instance = NotificationInviteAcceptedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NotificationInviteRejectedEvent
        try:
            instance.actual_instance = NotificationInviteRejectedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NotificationInvitedEvent
        try:
            instance.actual_instance = NotificationInvitedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NotificationMarkReadEvent
        try:
            instance.actual_instance = NotificationMarkReadEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NotificationMarkUnreadEvent
        try:
            instance.actual_instance = NotificationMarkUnreadEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NotificationMutesUpdatedEvent
        try:
            instance.actual_instance = NotificationMutesUpdatedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NotificationNewMessageEvent
        try:
            instance.actual_instance = NotificationNewMessageEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NotificationRemovedFromChannelEvent
        try:
            instance.actual_instance = NotificationRemovedFromChannelEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ReactionDeletedEvent
        try:
            instance.actual_instance = ReactionDeletedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ReactionNewEvent
        try:
            instance.actual_instance = ReactionNewEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ReactionUpdatedEvent
        try:
            instance.actual_instance = ReactionUpdatedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TypingStartEvent
        try:
            instance.actual_instance = TypingStartEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TypingStopEvent
        try:
            instance.actual_instance = TypingStopEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserBannedEvent
        try:
            instance.actual_instance = UserBannedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserDeactivatedEvent
        try:
            instance.actual_instance = UserDeactivatedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserDeletedEvent
        try:
            instance.actual_instance = UserDeletedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserFlaggedEvent
        try:
            instance.actual_instance = UserFlaggedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserMutedEvent
        try:
            instance.actual_instance = UserMutedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserPresenceChangedEvent
        try:
            instance.actual_instance = UserPresenceChangedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserReactivatedEvent
        try:
            instance.actual_instance = UserReactivatedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserUnbannedEvent
        try:
            instance.actual_instance = UserUnbannedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserUnmutedEvent
        try:
            instance.actual_instance = UserUnmutedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserUnreadReminderEvent
        try:
            instance.actual_instance = UserUnreadReminderEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserUpdatedEvent
        try:
            instance.actual_instance = UserUpdatedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserWatchingStartEvent
        try:
            instance.actual_instance = UserWatchingStartEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserWatchingStopEvent
        try:
            instance.actual_instance = UserWatchingStopEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into ChatEvent with oneOf schemas: AnyEvent, ChannelCreatedEvent, ChannelDeletedEvent, ChannelFrozenEvent, ChannelHiddenEvent, ChannelKickedEvent, ChannelMutedEvent, ChannelTruncatedEvent, ChannelUnFrozenEvent, ChannelUnmutedEvent, ChannelUpdatedEvent, ChannelVisibleEvent, HealthCheckEvent, MemberAddedEvent, MemberRemovedEvent, MemberUpdatedEvent, MessageDeletedEvent, MessageFlaggedEvent, MessageNewEvent, MessageReadEvent, MessageUnblockedEvent, MessageUpdatedEvent, NotificationAddedToChannelEvent, NotificationChannelDeletedEvent, NotificationChannelMutesUpdatedEvent, NotificationChannelTruncatedEvent, NotificationInviteAcceptedEvent, NotificationInviteRejectedEvent, NotificationInvitedEvent, NotificationMarkReadEvent, NotificationMarkUnreadEvent, NotificationMutesUpdatedEvent, NotificationNewMessageEvent, NotificationRemovedFromChannelEvent, ReactionDeletedEvent, ReactionNewEvent, ReactionUpdatedEvent, TypingStartEvent, TypingStopEvent, UserBannedEvent, UserDeactivatedEvent, UserDeletedEvent, UserFlaggedEvent, UserMutedEvent, UserPresenceChangedEvent, UserReactivatedEvent, UserUnbannedEvent, UserUnmutedEvent, UserUnreadReminderEvent, UserUpdatedEvent, UserWatchingStartEvent, UserWatchingStopEvent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ChatEvent with oneOf schemas: AnyEvent, ChannelCreatedEvent, ChannelDeletedEvent, ChannelFrozenEvent, ChannelHiddenEvent, ChannelKickedEvent, ChannelMutedEvent, ChannelTruncatedEvent, ChannelUnFrozenEvent, ChannelUnmutedEvent, ChannelUpdatedEvent, ChannelVisibleEvent, HealthCheckEvent, MemberAddedEvent, MemberRemovedEvent, MemberUpdatedEvent, MessageDeletedEvent, MessageFlaggedEvent, MessageNewEvent, MessageReadEvent, MessageUnblockedEvent, MessageUpdatedEvent, NotificationAddedToChannelEvent, NotificationChannelDeletedEvent, NotificationChannelMutesUpdatedEvent, NotificationChannelTruncatedEvent, NotificationInviteAcceptedEvent, NotificationInviteRejectedEvent, NotificationInvitedEvent, NotificationMarkReadEvent, NotificationMarkUnreadEvent, NotificationMutesUpdatedEvent, NotificationNewMessageEvent, NotificationRemovedFromChannelEvent, ReactionDeletedEvent, ReactionNewEvent, ReactionUpdatedEvent, TypingStartEvent, TypingStopEvent, UserBannedEvent, UserDeactivatedEvent, UserDeletedEvent, UserFlaggedEvent, UserMutedEvent, UserPresenceChangedEvent, UserReactivatedEvent, UserUnbannedEvent, UserUnmutedEvent, UserUnreadReminderEvent, UserUpdatedEvent, UserWatchingStartEvent, UserWatchingStopEvent. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AnyEvent, ChannelCreatedEvent, ChannelDeletedEvent, ChannelFrozenEvent, ChannelHiddenEvent, ChannelKickedEvent, ChannelMutedEvent, ChannelTruncatedEvent, ChannelUnFrozenEvent, ChannelUnmutedEvent, ChannelUpdatedEvent, ChannelVisibleEvent, HealthCheckEvent, MemberAddedEvent, MemberRemovedEvent, MemberUpdatedEvent, MessageDeletedEvent, MessageFlaggedEvent, MessageNewEvent, MessageReadEvent, MessageUnblockedEvent, MessageUpdatedEvent, NotificationAddedToChannelEvent, NotificationChannelDeletedEvent, NotificationChannelMutesUpdatedEvent, NotificationChannelTruncatedEvent, NotificationInviteAcceptedEvent, NotificationInviteRejectedEvent, NotificationInvitedEvent, NotificationMarkReadEvent, NotificationMarkUnreadEvent, NotificationMutesUpdatedEvent, NotificationNewMessageEvent, NotificationRemovedFromChannelEvent, ReactionDeletedEvent, ReactionNewEvent, ReactionUpdatedEvent, TypingStartEvent, TypingStopEvent, UserBannedEvent, UserDeactivatedEvent, UserDeletedEvent, UserFlaggedEvent, UserMutedEvent, UserPresenceChangedEvent, UserReactivatedEvent, UserUnbannedEvent, UserUnmutedEvent, UserUnreadReminderEvent, UserUpdatedEvent, UserWatchingStartEvent, UserWatchingStopEvent]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



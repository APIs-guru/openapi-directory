# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.flag_details import FlagDetails
from openapi_client.models.message import Message
from openapi_client.models.user_object import UserObject
from typing import Optional, Set
from typing_extensions import Self

class Flag(BaseModel):
    """
    Contains information about flagged user or message
    """ # noqa: E501
    approved_at: Optional[datetime] = Field(default=None, description="Date of the approval")
    created_at: datetime = Field(description="Date/time of creation")
    created_by_automod: StrictBool
    details: Optional[FlagDetails] = None
    rejected_at: Optional[datetime] = Field(default=None, description="Date of the rejection")
    reviewed_at: Optional[datetime] = Field(default=None, description="Date of the review")
    target_message: Optional[Message] = None
    target_message_id: Optional[StrictStr] = Field(default=None, description="ID of flagged message")
    target_user: Optional[UserObject] = None
    updated_at: datetime = Field(description="Date/time of the last update")
    user: Optional[UserObject] = None
    __properties: ClassVar[List[str]] = ["approved_at", "created_at", "created_by_automod", "details", "rejected_at", "reviewed_at", "target_message", "target_message_id", "target_user", "updated_at", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Flag from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of details
        if self.details:
            _dict['details'] = self.details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_message
        if self.target_message:
            _dict['target_message'] = self.target_message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_user
        if self.target_user:
            _dict['target_user'] = self.target_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # set to None if target_message (nullable) is None
        # and model_fields_set contains the field
        if self.target_message is None and "target_message" in self.model_fields_set:
            _dict['target_message'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Flag from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "approved_at": obj.get("approved_at"),
            "created_at": obj.get("created_at"),
            "created_by_automod": obj.get("created_by_automod"),
            "details": FlagDetails.from_dict(obj["details"]) if obj.get("details") is not None else None,
            "rejected_at": obj.get("rejected_at"),
            "reviewed_at": obj.get("reviewed_at"),
            "target_message": Message.from_dict(obj["target_message"]) if obj.get("target_message") is not None else None,
            "target_message_id": obj.get("target_message_id"),
            "target_user": UserObject.from_dict(obj["target_user"]) if obj.get("target_user") is not None else None,
            "updated_at": obj.get("updated_at"),
            "user": UserObject.from_dict(obj["user"]) if obj.get("user") is not None else None
        })
        return _obj



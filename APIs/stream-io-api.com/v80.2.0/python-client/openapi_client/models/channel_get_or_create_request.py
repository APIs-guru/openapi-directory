# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.channel_request import ChannelRequest
from openapi_client.models.message_pagination_params_request import MessagePaginationParamsRequest
from openapi_client.models.pagination_params_request import PaginationParamsRequest
from typing import Optional, Set
from typing_extensions import Self

class ChannelGetOrCreateRequest(BaseModel):
    """
    ChannelGetOrCreateRequest
    """ # noqa: E501
    client_id: Optional[StrictStr] = None
    connection_id: Optional[StrictStr] = None
    data: Optional[ChannelRequest] = None
    hide_for_creator: Optional[StrictBool] = Field(default=None, description="Whether this channel will be hidden for the user who created the channel or not")
    members: Optional[PaginationParamsRequest] = None
    messages: Optional[MessagePaginationParamsRequest] = None
    presence: Optional[StrictBool] = Field(default=None, description="Fetch user presence info")
    state: Optional[StrictBool] = Field(default=None, description="Refresh channel state")
    watch: Optional[StrictBool] = Field(default=None, description="Start watching the channel")
    watchers: Optional[PaginationParamsRequest] = None
    __properties: ClassVar[List[str]] = ["client_id", "connection_id", "data", "hide_for_creator", "members", "messages", "presence", "state", "watch", "watchers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChannelGetOrCreateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data
        if self.data:
            _dict['data'] = self.data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of members
        if self.members:
            _dict['members'] = self.members.to_dict()
        # override the default output from pydantic by calling `to_dict()` of messages
        if self.messages:
            _dict['messages'] = self.messages.to_dict()
        # override the default output from pydantic by calling `to_dict()` of watchers
        if self.watchers:
            _dict['watchers'] = self.watchers.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChannelGetOrCreateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "client_id": obj.get("client_id"),
            "connection_id": obj.get("connection_id"),
            "data": ChannelRequest.from_dict(obj["data"]) if obj.get("data") is not None else None,
            "hide_for_creator": obj.get("hide_for_creator"),
            "members": PaginationParamsRequest.from_dict(obj["members"]) if obj.get("members") is not None else None,
            "messages": MessagePaginationParamsRequest.from_dict(obj["messages"]) if obj.get("messages") is not None else None,
            "presence": obj.get("presence"),
            "state": obj.get("state"),
            "watch": obj.get("watch"),
            "watchers": PaginationParamsRequest.from_dict(obj["watchers"]) if obj.get("watchers") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.message import Message
from openapi_client.models.user_object import UserObject
from typing import Optional, Set
from typing_extensions import Self

class MessageUpdatedEvent(BaseModel):
    """
    MessageUpdatedEvent
    """ # noqa: E501
    channel_id: StrictStr
    channel_type: StrictStr
    cid: StrictStr
    created_at: datetime
    message: Optional[Message] = None
    team: Optional[StrictStr] = None
    thread_participants: Optional[List[UserObject]] = None
    type: StrictStr
    user: Optional[UserObject] = None
    __properties: ClassVar[List[str]] = ["channel_id", "channel_type", "cid", "created_at", "message", "team", "thread_participants", "type", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MessageUpdatedEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of message
        if self.message:
            _dict['message'] = self.message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in thread_participants (list)
        _items = []
        if self.thread_participants:
            for _item_thread_participants in self.thread_participants:
                if _item_thread_participants:
                    _items.append(_item_thread_participants.to_dict())
            _dict['thread_participants'] = _items
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict['message'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MessageUpdatedEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channel_id": obj.get("channel_id"),
            "channel_type": obj.get("channel_type"),
            "cid": obj.get("cid"),
            "created_at": obj.get("created_at"),
            "message": Message.from_dict(obj["message"]) if obj.get("message") is not None else None,
            "team": obj.get("team"),
            "thread_participants": [UserObject.from_dict(_item) for _item in obj["thread_participants"]] if obj.get("thread_participants") is not None else None,
            "type": obj.get("type") if obj.get("type") is not None else 'message.updated',
            "user": UserObject.from_dict(obj["user"]) if obj.get("user") is not None else None
        })
        return _obj



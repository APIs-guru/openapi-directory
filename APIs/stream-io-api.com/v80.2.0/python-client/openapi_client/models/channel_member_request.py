# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.user_object_request import UserObjectRequest
from typing import Optional, Set
from typing_extensions import Self

class ChannelMemberRequest(BaseModel):
    """
    ChannelMemberRequest
    """ # noqa: E501
    ban_expires: Optional[datetime] = Field(default=None, description="Expiration date of the ban")
    banned: Optional[StrictBool] = Field(default=None, description="Whether member is banned this channel or not")
    channel_role: Optional[StrictStr] = Field(default=None, description="Role of the member in the channel")
    created_at: Optional[datetime] = Field(default=None, description="Date/time of creation")
    deleted_at: Optional[datetime] = None
    invite_accepted_at: Optional[datetime] = Field(default=None, description="Date when invite was accepted")
    invite_rejected_at: Optional[datetime] = Field(default=None, description="Date when invite was rejected")
    invited: Optional[StrictBool] = Field(default=None, description="Whether member was invited or not")
    is_moderator: Optional[StrictBool] = Field(default=None, description="Whether member is channel moderator or not")
    role: Optional[StrictStr] = Field(default=None, description="Permission level of the member in the channel (DEPRECATED: use channel_role instead)")
    shadow_banned: Optional[StrictBool] = Field(default=None, description="Whether member is shadow banned in this channel or not")
    updated_at: Optional[datetime] = Field(default=None, description="Date/time of the last update")
    user: Optional[UserObjectRequest] = None
    user_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["ban_expires", "banned", "channel_role", "created_at", "deleted_at", "invite_accepted_at", "invite_rejected_at", "invited", "is_moderator", "role", "shadow_banned", "updated_at", "user", "user_id"]

    @field_validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['member', 'moderator', 'admin', 'owner']):
            raise ValueError("must be one of enum values ('member', 'moderator', 'admin', 'owner')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChannelMemberRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChannelMemberRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ban_expires": obj.get("ban_expires"),
            "banned": obj.get("banned"),
            "channel_role": obj.get("channel_role"),
            "created_at": obj.get("created_at"),
            "deleted_at": obj.get("deleted_at"),
            "invite_accepted_at": obj.get("invite_accepted_at"),
            "invite_rejected_at": obj.get("invite_rejected_at"),
            "invited": obj.get("invited"),
            "is_moderator": obj.get("is_moderator"),
            "role": obj.get("role"),
            "shadow_banned": obj.get("shadow_banned"),
            "updated_at": obj.get("updated_at"),
            "user": UserObjectRequest.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "user_id": obj.get("user_id")
        })
        return _obj



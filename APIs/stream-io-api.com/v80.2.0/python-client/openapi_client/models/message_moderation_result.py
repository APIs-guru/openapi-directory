# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.moderation_response import ModerationResponse
from openapi_client.models.thresholds import Thresholds
from typing import Optional, Set
from typing_extensions import Self

class MessageModerationResult(BaseModel):
    """
    MessageModerationResult
    """ # noqa: E501
    action: StrictStr
    ai_moderation_response: Optional[ModerationResponse] = None
    blocked_word: Optional[StrictStr] = None
    blocklist_name: Optional[StrictStr] = None
    created_at: datetime
    message_id: StrictStr
    moderated_by: Optional[StrictStr] = None
    moderation_thresholds: Optional[Thresholds] = None
    updated_at: datetime
    user_bad_karma: StrictBool
    user_karma: Union[StrictFloat, StrictInt]
    __properties: ClassVar[List[str]] = ["action", "ai_moderation_response", "blocked_word", "blocklist_name", "created_at", "message_id", "moderated_by", "moderation_thresholds", "updated_at", "user_bad_karma", "user_karma"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MessageModerationResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ai_moderation_response
        if self.ai_moderation_response:
            _dict['ai_moderation_response'] = self.ai_moderation_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of moderation_thresholds
        if self.moderation_thresholds:
            _dict['moderation_thresholds'] = self.moderation_thresholds.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MessageModerationResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "ai_moderation_response": ModerationResponse.from_dict(obj["ai_moderation_response"]) if obj.get("ai_moderation_response") is not None else None,
            "blocked_word": obj.get("blocked_word"),
            "blocklist_name": obj.get("blocklist_name"),
            "created_at": obj.get("created_at"),
            "message_id": obj.get("message_id"),
            "moderated_by": obj.get("moderated_by"),
            "moderation_thresholds": Thresholds.from_dict(obj["moderation_thresholds"]) if obj.get("moderation_thresholds") is not None else None,
            "updated_at": obj.get("updated_at"),
            "user_bad_karma": obj.get("user_bad_karma"),
            "user_karma": obj.get("user_karma")
        })
        return _obj



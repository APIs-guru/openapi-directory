# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.apn_config_request import APNConfigRequest
from openapi_client.models.async_moderation_configuration_request import AsyncModerationConfigurationRequest
from openapi_client.models.config_request import ConfigRequest
from openapi_client.models.file_upload_config_request import FileUploadConfigRequest
from openapi_client.models.firebase_config_request import FirebaseConfigRequest
from openapi_client.models.huawei_config_request import HuaweiConfigRequest
from openapi_client.models.push_config_request import PushConfigRequest
from openapi_client.models.xiaomi_config_request import XiaomiConfigRequest
from typing import Optional, Set
from typing_extensions import Self

class UpdateAppRequest(BaseModel):
    """
    UpdateAppRequest
    """ # noqa: E501
    agora_options: Optional[ConfigRequest] = None
    apn_config: Optional[APNConfigRequest] = None
    async_moderation_config: Optional[AsyncModerationConfigurationRequest] = None
    async_url_enrich_enabled: Optional[StrictBool] = None
    auto_translation_enabled: Optional[StrictBool] = None
    before_message_send_hook_url: Optional[StrictStr] = None
    cdn_expiration_seconds: Optional[Annotated[int, Field(le=1209600, strict=True, ge=14400)]] = None
    channel_hide_members_only: Optional[StrictBool] = None
    custom_action_handler_url: Optional[StrictStr] = None
    disable_auth_checks: Optional[StrictBool] = None
    disable_permissions_checks: Optional[StrictBool] = None
    enforce_unique_usernames: Optional[StrictStr] = None
    file_upload_config: Optional[FileUploadConfigRequest] = None
    firebase_config: Optional[FirebaseConfigRequest] = None
    grants: Optional[Dict[str, List[StrictStr]]] = None
    hms_options: Optional[ConfigRequest] = None
    huawei_config: Optional[HuaweiConfigRequest] = None
    image_moderation_block_labels: Optional[List[StrictStr]] = None
    image_moderation_enabled: Optional[StrictBool] = None
    image_moderation_labels: Optional[List[StrictStr]] = None
    image_upload_config: Optional[FileUploadConfigRequest] = None
    migrate_permissions_to_v2: Optional[StrictBool] = None
    multi_tenant_enabled: Optional[StrictBool] = None
    permission_version: Optional[StrictStr] = None
    push_config: Optional[PushConfigRequest] = None
    reminders_interval: Optional[Annotated[int, Field(le=86400, strict=True, ge=60)]] = None
    revoke_tokens_issued_before: Optional[datetime] = None
    sqs_key: Optional[StrictStr] = None
    sqs_secret: Optional[StrictStr] = None
    sqs_url: Optional[StrictStr] = None
    user_search_disallowed_roles: Optional[List[StrictStr]] = None
    video_provider: Optional[StrictStr] = None
    webhook_events: Optional[List[StrictStr]] = None
    webhook_url: Optional[StrictStr] = None
    xiaomi_config: Optional[XiaomiConfigRequest] = None
    __properties: ClassVar[List[str]] = ["agora_options", "apn_config", "async_moderation_config", "async_url_enrich_enabled", "auto_translation_enabled", "before_message_send_hook_url", "cdn_expiration_seconds", "channel_hide_members_only", "custom_action_handler_url", "disable_auth_checks", "disable_permissions_checks", "enforce_unique_usernames", "file_upload_config", "firebase_config", "grants", "hms_options", "huawei_config", "image_moderation_block_labels", "image_moderation_enabled", "image_moderation_labels", "image_upload_config", "migrate_permissions_to_v2", "multi_tenant_enabled", "permission_version", "push_config", "reminders_interval", "revoke_tokens_issued_before", "sqs_key", "sqs_secret", "sqs_url", "user_search_disallowed_roles", "video_provider", "webhook_events", "webhook_url", "xiaomi_config"]

    @field_validator('enforce_unique_usernames')
    def enforce_unique_usernames_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['false', 'app', 'team']):
            raise ValueError("must be one of enum values ('false', 'app', 'team')")
        return value

    @field_validator('permission_version')
    def permission_version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['v1', 'v2']):
            raise ValueError("must be one of enum values ('v1', 'v2')")
        return value

    @field_validator('video_provider')
    def video_provider_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['agora', 'hms']):
            raise ValueError("must be one of enum values ('agora', 'hms')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateAppRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of agora_options
        if self.agora_options:
            _dict['agora_options'] = self.agora_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of apn_config
        if self.apn_config:
            _dict['apn_config'] = self.apn_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of async_moderation_config
        if self.async_moderation_config:
            _dict['async_moderation_config'] = self.async_moderation_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of file_upload_config
        if self.file_upload_config:
            _dict['file_upload_config'] = self.file_upload_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of firebase_config
        if self.firebase_config:
            _dict['firebase_config'] = self.firebase_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hms_options
        if self.hms_options:
            _dict['hms_options'] = self.hms_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of huawei_config
        if self.huawei_config:
            _dict['huawei_config'] = self.huawei_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_upload_config
        if self.image_upload_config:
            _dict['image_upload_config'] = self.image_upload_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of push_config
        if self.push_config:
            _dict['push_config'] = self.push_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of xiaomi_config
        if self.xiaomi_config:
            _dict['xiaomi_config'] = self.xiaomi_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateAppRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agora_options": ConfigRequest.from_dict(obj["agora_options"]) if obj.get("agora_options") is not None else None,
            "apn_config": APNConfigRequest.from_dict(obj["apn_config"]) if obj.get("apn_config") is not None else None,
            "async_moderation_config": AsyncModerationConfigurationRequest.from_dict(obj["async_moderation_config"]) if obj.get("async_moderation_config") is not None else None,
            "async_url_enrich_enabled": obj.get("async_url_enrich_enabled"),
            "auto_translation_enabled": obj.get("auto_translation_enabled"),
            "before_message_send_hook_url": obj.get("before_message_send_hook_url"),
            "cdn_expiration_seconds": obj.get("cdn_expiration_seconds"),
            "channel_hide_members_only": obj.get("channel_hide_members_only"),
            "custom_action_handler_url": obj.get("custom_action_handler_url"),
            "disable_auth_checks": obj.get("disable_auth_checks"),
            "disable_permissions_checks": obj.get("disable_permissions_checks"),
            "enforce_unique_usernames": obj.get("enforce_unique_usernames"),
            "file_upload_config": FileUploadConfigRequest.from_dict(obj["file_upload_config"]) if obj.get("file_upload_config") is not None else None,
            "firebase_config": FirebaseConfigRequest.from_dict(obj["firebase_config"]) if obj.get("firebase_config") is not None else None,
            "grants": obj.get("grants"),
            "hms_options": ConfigRequest.from_dict(obj["hms_options"]) if obj.get("hms_options") is not None else None,
            "huawei_config": HuaweiConfigRequest.from_dict(obj["huawei_config"]) if obj.get("huawei_config") is not None else None,
            "image_moderation_block_labels": obj.get("image_moderation_block_labels"),
            "image_moderation_enabled": obj.get("image_moderation_enabled"),
            "image_moderation_labels": obj.get("image_moderation_labels"),
            "image_upload_config": FileUploadConfigRequest.from_dict(obj["image_upload_config"]) if obj.get("image_upload_config") is not None else None,
            "migrate_permissions_to_v2": obj.get("migrate_permissions_to_v2"),
            "multi_tenant_enabled": obj.get("multi_tenant_enabled"),
            "permission_version": obj.get("permission_version"),
            "push_config": PushConfigRequest.from_dict(obj["push_config"]) if obj.get("push_config") is not None else None,
            "reminders_interval": obj.get("reminders_interval"),
            "revoke_tokens_issued_before": obj.get("revoke_tokens_issued_before"),
            "sqs_key": obj.get("sqs_key"),
            "sqs_secret": obj.get("sqs_secret"),
            "sqs_url": obj.get("sqs_url"),
            "user_search_disallowed_roles": obj.get("user_search_disallowed_roles"),
            "video_provider": obj.get("video_provider"),
            "webhook_events": obj.get("webhook_events"),
            "webhook_url": obj.get("webhook_url"),
            "xiaomi_config": XiaomiConfigRequest.from_dict(obj["xiaomi_config"]) if obj.get("xiaomi_config") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.sort_param import SortParam
from openapi_client.models.user_object import UserObject
from typing import Optional, Set
from typing_extensions import Self

class QueryBannedUsersRequest(BaseModel):
    """
    QueryBannedUsersRequest
    """ # noqa: E501
    created_at_after: Optional[datetime] = None
    created_at_after_or_equal: Optional[datetime] = None
    created_at_before: Optional[datetime] = None
    created_at_before_or_equal: Optional[datetime] = None
    filter_conditions: Dict[str, Any]
    limit: Optional[Annotated[int, Field(le=300, strict=True)]] = None
    offset: Optional[Annotated[int, Field(le=10000, strict=True)]] = None
    sort: Optional[List[Optional[SortParam]]] = None
    user: Optional[UserObject] = None
    user_id: Optional[StrictStr] = Field(default=None, description="**Server-side only**. User ID which server acts upon")
    __properties: ClassVar[List[str]] = ["created_at_after", "created_at_after_or_equal", "created_at_before", "created_at_before_or_equal", "filter_conditions", "limit", "offset", "sort", "user", "user_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryBannedUsersRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sort (list)
        _items = []
        if self.sort:
            for _item_sort in self.sort:
                if _item_sort:
                    _items.append(_item_sort.to_dict())
            _dict['sort'] = _items
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryBannedUsersRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created_at_after": obj.get("created_at_after"),
            "created_at_after_or_equal": obj.get("created_at_after_or_equal"),
            "created_at_before": obj.get("created_at_before"),
            "created_at_before_or_equal": obj.get("created_at_before_or_equal"),
            "filter_conditions": obj.get("filter_conditions"),
            "limit": obj.get("limit"),
            "offset": obj.get("offset"),
            "sort": [SortParam.from_dict(_item) for _item in obj["sort"]] if obj.get("sort") is not None else None,
            "user": UserObject.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "user_id": obj.get("user_id")
        })
        return _obj



# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.channel_response import ChannelResponse
from openapi_client.models.user_object import UserObject
from typing import Optional, Set
from typing_extensions import Self

class NotificationMarkUnreadEvent(BaseModel):
    """
    NotificationMarkUnreadEvent
    """ # noqa: E501
    channel: Optional[ChannelResponse] = None
    channel_id: StrictStr
    channel_type: StrictStr
    cid: StrictStr
    created_at: datetime
    first_unread_message_id: StrictStr
    last_read_at: datetime
    team: Optional[StrictStr] = None
    total_unread_count: StrictInt
    type: StrictStr
    unread_channels: StrictInt
    unread_count: StrictInt
    unread_messages: StrictInt
    user: Optional[UserObject] = None
    __properties: ClassVar[List[str]] = ["channel", "channel_id", "channel_type", "cid", "created_at", "first_unread_message_id", "last_read_at", "team", "total_unread_count", "type", "unread_channels", "unread_count", "unread_messages", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NotificationMarkUnreadEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of channel
        if self.channel:
            _dict['channel'] = self.channel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NotificationMarkUnreadEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channel": ChannelResponse.from_dict(obj["channel"]) if obj.get("channel") is not None else None,
            "channel_id": obj.get("channel_id"),
            "channel_type": obj.get("channel_type"),
            "cid": obj.get("cid"),
            "created_at": obj.get("created_at"),
            "first_unread_message_id": obj.get("first_unread_message_id"),
            "last_read_at": obj.get("last_read_at"),
            "team": obj.get("team"),
            "total_unread_count": obj.get("total_unread_count"),
            "type": obj.get("type") if obj.get("type") is not None else 'notification.mark_unread',
            "unread_channels": obj.get("unread_channels"),
            "unread_count": obj.get("unread_count"),
            "unread_messages": obj.get("unread_messages"),
            "user": UserObject.from_dict(obj["user"]) if obj.get("user") is not None else None
        })
        return _obj



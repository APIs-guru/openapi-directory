# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.channel_config_request import ChannelConfigRequest
from openapi_client.models.channel_member_request import ChannelMemberRequest
from openapi_client.models.user_object_request import UserObjectRequest
from typing import Optional, Set
from typing_extensions import Self

class ChannelRequest(BaseModel):
    """
    ChannelRequest
    """ # noqa: E501
    auto_translation_enabled: Optional[StrictBool] = Field(default=None, description="Enable or disable auto translation")
    auto_translation_language: Optional[StrictStr] = Field(default=None, description="Switch auto translation language")
    config_overrides: Optional[ChannelConfigRequest] = None
    created_by: Optional[UserObjectRequest] = None
    disabled: Optional[StrictBool] = None
    frozen: Optional[StrictBool] = Field(default=None, description="Freeze or unfreeze the channel")
    members: Optional[List[Optional[ChannelMemberRequest]]] = None
    own_capabilities: Optional[List[StrictInt]] = None
    team: Optional[StrictStr] = Field(default=None, description="Team the channel belongs to (if multi-tenant mode is enabled)")
    truncated_at: Optional[List[StrictInt]] = None
    truncated_by: Optional[List[StrictInt]] = None
    truncated_by_id: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["auto_translation_enabled", "auto_translation_language", "config_overrides", "created_by", "disabled", "frozen", "members", "own_capabilities", "team", "truncated_at", "truncated_by", "truncated_by_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChannelRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config_overrides
        if self.config_overrides:
            _dict['config_overrides'] = self.config_overrides.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in members (list)
        _items = []
        if self.members:
            for _item_members in self.members:
                if _item_members:
                    _items.append(_item_members.to_dict())
            _dict['members'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChannelRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auto_translation_enabled": obj.get("auto_translation_enabled"),
            "auto_translation_language": obj.get("auto_translation_language"),
            "config_overrides": ChannelConfigRequest.from_dict(obj["config_overrides"]) if obj.get("config_overrides") is not None else None,
            "created_by": UserObjectRequest.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "disabled": obj.get("disabled"),
            "frozen": obj.get("frozen"),
            "members": [ChannelMemberRequest.from_dict(_item) for _item in obj["members"]] if obj.get("members") is not None else None,
            "own_capabilities": obj.get("own_capabilities"),
            "team": obj.get("team"),
            "truncated_at": obj.get("truncated_at"),
            "truncated_by": obj.get("truncated_by"),
            "truncated_by_id": obj.get("truncated_by_id")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj



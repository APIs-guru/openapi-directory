# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeleteUsersRequest(BaseModel):
    """
    DeleteUsersRequest
    """ # noqa: E501
    conversations: Optional[StrictStr] = Field(default=None, description="Conversation channels delete mode. Conversation channel is any channel which only has two members one of which is the user being deleted.  * null or empty string - doesn't delete any conversation channels * soft - marks all conversation channels as deleted (same effect as Delete Channels with 'hard' option disabled) * hard - deletes channel and all its data completely including messages (same effect as Delete Channels with 'hard' option enabled) ")
    messages: Optional[StrictStr] = Field(default=None, description="Message delete mode.  * null or empty string - doesn't delete user messages * soft - marks all user messages as deleted without removing any related message data * pruning - marks all user messages as deleted, nullifies message information and removes some message data such as reactions and flags * hard - deletes messages completely with all related information ")
    new_channel_owner_id: Optional[StrictStr] = None
    user: Optional[StrictStr] = Field(default=None, description="User delete mode.  * soft - marks user as deleted and retains all user data * pruning - marks user as deleted and nullifies user information * hard - deletes user completely. Requires 'hard' option for messages and conversations as well ")
    user_ids: List[StrictStr] = Field(description="IDs of users to delete")
    __properties: ClassVar[List[str]] = ["conversations", "messages", "new_channel_owner_id", "user", "user_ids"]

    @field_validator('conversations')
    def conversations_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['soft', 'hard']):
            raise ValueError("must be one of enum values ('soft', 'hard')")
        return value

    @field_validator('messages')
    def messages_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['soft', 'pruning', 'hard']):
            raise ValueError("must be one of enum values ('soft', 'pruning', 'hard')")
        return value

    @field_validator('user')
    def user_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['soft', 'pruning', 'hard']):
            raise ValueError("must be one of enum values ('soft', 'pruning', 'hard')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeleteUsersRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeleteUsersRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conversations": obj.get("conversations"),
            "messages": obj.get("messages"),
            "new_channel_owner_id": obj.get("new_channel_owner_id"),
            "user": obj.get("user"),
            "user_ids": obj.get("user_ids")
        })
        return _obj



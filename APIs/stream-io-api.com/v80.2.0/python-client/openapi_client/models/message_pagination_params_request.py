# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class MessagePaginationParamsRequest(BaseModel):
    """
    MessagePaginationParamsRequest
    """ # noqa: E501
    created_at_after: Optional[datetime] = None
    created_at_after_or_equal: Optional[datetime] = None
    created_at_around: Optional[datetime] = None
    created_at_before: Optional[datetime] = None
    created_at_before_or_equal: Optional[datetime] = None
    id_around: Optional[StrictStr] = None
    id_gt: Optional[StrictStr] = None
    id_gte: Optional[StrictStr] = None
    id_lt: Optional[StrictStr] = None
    id_lte: Optional[StrictStr] = None
    limit: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    offset: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["created_at_after", "created_at_after_or_equal", "created_at_around", "created_at_before", "created_at_before_or_equal", "id_around", "id_gt", "id_gte", "id_lt", "id_lte", "limit", "offset"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MessagePaginationParamsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MessagePaginationParamsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created_at_after": obj.get("created_at_after"),
            "created_at_after_or_equal": obj.get("created_at_after_or_equal"),
            "created_at_around": obj.get("created_at_around"),
            "created_at_before": obj.get("created_at_before"),
            "created_at_before_or_equal": obj.get("created_at_before_or_equal"),
            "id_around": obj.get("id_around"),
            "id_gt": obj.get("id_gt"),
            "id_gte": obj.get("id_gte"),
            "id_lt": obj.get("id_lt"),
            "id_lte": obj.get("id_lte"),
            "limit": obj.get("limit"),
            "offset": obj.get("offset")
        })
        return _obj



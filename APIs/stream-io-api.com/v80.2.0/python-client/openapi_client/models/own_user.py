# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.channel_mute import ChannelMute
from openapi_client.models.device import Device
from openapi_client.models.push_notification_settings import PushNotificationSettings
from openapi_client.models.user_mute import UserMute
from typing import Optional, Set
from typing_extensions import Self

class OwnUser(BaseModel):
    """
    OwnUser
    """ # noqa: E501
    banned: StrictBool
    channel_mutes: List[Optional[ChannelMute]]
    created_at: datetime
    deactivated_at: Optional[datetime] = None
    deleted_at: Optional[datetime] = None
    devices: List[Optional[Device]]
    id: StrictStr
    invisible: Optional[StrictBool] = None
    language: StrictStr
    last_active: Optional[datetime] = None
    latest_hidden_channels: Optional[List[StrictStr]] = None
    mutes: List[Optional[UserMute]]
    online: StrictBool
    push_notifications: Optional[PushNotificationSettings] = None
    role: StrictStr
    teams: Optional[List[StrictStr]] = None
    total_unread_count: StrictInt
    unread_channels: StrictInt
    unread_count: StrictInt
    updated_at: datetime
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["banned", "channel_mutes", "created_at", "deactivated_at", "deleted_at", "devices", "id", "invisible", "language", "last_active", "latest_hidden_channels", "mutes", "online", "push_notifications", "role", "teams", "total_unread_count", "unread_channels", "unread_count", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OwnUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in channel_mutes (list)
        _items = []
        if self.channel_mutes:
            for _item_channel_mutes in self.channel_mutes:
                if _item_channel_mutes:
                    _items.append(_item_channel_mutes.to_dict())
            _dict['channel_mutes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in devices (list)
        _items = []
        if self.devices:
            for _item_devices in self.devices:
                if _item_devices:
                    _items.append(_item_devices.to_dict())
            _dict['devices'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in mutes (list)
        _items = []
        if self.mutes:
            for _item_mutes in self.mutes:
                if _item_mutes:
                    _items.append(_item_mutes.to_dict())
            _dict['mutes'] = _items
        # override the default output from pydantic by calling `to_dict()` of push_notifications
        if self.push_notifications:
            _dict['push_notifications'] = self.push_notifications.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OwnUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "banned": obj.get("banned"),
            "channel_mutes": [ChannelMute.from_dict(_item) for _item in obj["channel_mutes"]] if obj.get("channel_mutes") is not None else None,
            "created_at": obj.get("created_at"),
            "deactivated_at": obj.get("deactivated_at"),
            "deleted_at": obj.get("deleted_at"),
            "devices": [Device.from_dict(_item) for _item in obj["devices"]] if obj.get("devices") is not None else None,
            "id": obj.get("id"),
            "invisible": obj.get("invisible"),
            "language": obj.get("language"),
            "last_active": obj.get("last_active"),
            "latest_hidden_channels": obj.get("latest_hidden_channels"),
            "mutes": [UserMute.from_dict(_item) for _item in obj["mutes"]] if obj.get("mutes") is not None else None,
            "online": obj.get("online"),
            "push_notifications": PushNotificationSettings.from_dict(obj["push_notifications"]) if obj.get("push_notifications") is not None else None,
            "role": obj.get("role"),
            "teams": obj.get("teams"),
            "total_unread_count": obj.get("total_unread_count"),
            "unread_channels": obj.get("unread_channels"),
            "unread_count": obj.get("unread_count"),
            "updated_at": obj.get("updated_at")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj



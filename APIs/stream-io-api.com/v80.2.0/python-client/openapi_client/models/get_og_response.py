# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.action import Action
from openapi_client.models.images import Images
from openapi_client.models.model_field import ModelField
from typing import Optional, Set
from typing_extensions import Self

class GetOGResponse(BaseModel):
    """
    GetOGResponse
    """ # noqa: E501
    actions: Optional[List[Optional[Action]]] = None
    asset_url: Optional[StrictStr] = Field(default=None, description="URL of detected video or audio")
    author_icon: Optional[StrictStr] = None
    author_link: Optional[StrictStr] = Field(default=None, description="og:site")
    author_name: Optional[StrictStr] = Field(default=None, description="og:site_name")
    color: Optional[StrictStr] = None
    duration: StrictStr
    fallback: Optional[StrictStr] = None
    fields: Optional[List[Optional[ModelField]]] = None
    footer: Optional[StrictStr] = None
    footer_icon: Optional[StrictStr] = None
    giphy: Optional[Images] = None
    image_url: Optional[StrictStr] = Field(default=None, description="URL of detected image")
    og_scrape_url: Optional[StrictStr] = Field(default=None, description="extracted url from the text")
    original_height: Optional[StrictInt] = None
    original_width: Optional[StrictInt] = None
    pretext: Optional[StrictStr] = None
    text: Optional[StrictStr] = Field(default=None, description="og:description")
    thumb_url: Optional[StrictStr] = Field(default=None, description="URL of detected thumb image")
    title: Optional[StrictStr] = Field(default=None, description="og:title")
    title_link: Optional[StrictStr] = Field(default=None, description="og:url")
    type: Optional[StrictStr] = Field(default=None, description="Attachment type, could be empty, image, audio or video")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["actions", "asset_url", "author_icon", "author_link", "author_name", "color", "duration", "fallback", "fields", "footer", "footer_icon", "giphy", "image_url", "og_scrape_url", "original_height", "original_width", "pretext", "text", "thumb_url", "title", "title_link", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetOGResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item_actions in self.actions:
                if _item_actions:
                    _items.append(_item_actions.to_dict())
            _dict['actions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fields (list)
        _items = []
        if self.fields:
            for _item_fields in self.fields:
                if _item_fields:
                    _items.append(_item_fields.to_dict())
            _dict['fields'] = _items
        # override the default output from pydantic by calling `to_dict()` of giphy
        if self.giphy:
            _dict['giphy'] = self.giphy.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetOGResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actions": [Action.from_dict(_item) for _item in obj["actions"]] if obj.get("actions") is not None else None,
            "asset_url": obj.get("asset_url"),
            "author_icon": obj.get("author_icon"),
            "author_link": obj.get("author_link"),
            "author_name": obj.get("author_name"),
            "color": obj.get("color"),
            "duration": obj.get("duration"),
            "fallback": obj.get("fallback"),
            "fields": [ModelField.from_dict(_item) for _item in obj["fields"]] if obj.get("fields") is not None else None,
            "footer": obj.get("footer"),
            "footer_icon": obj.get("footer_icon"),
            "giphy": Images.from_dict(obj["giphy"]) if obj.get("giphy") is not None else None,
            "image_url": obj.get("image_url"),
            "og_scrape_url": obj.get("og_scrape_url"),
            "original_height": obj.get("original_height"),
            "original_width": obj.get("original_width"),
            "pretext": obj.get("pretext"),
            "text": obj.get("text"),
            "thumb_url": obj.get("thumb_url"),
            "title": obj.get("title"),
            "title_link": obj.get("title_link"),
            "type": obj.get("type")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj



# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.attachment import Attachment
from typing import Optional, Set
from typing_extensions import Self

class Campaign(BaseModel):
    """
    Campaign
    """ # noqa: E501
    attachments: List[Optional[Attachment]]
    channel_type: Annotated[str, Field(strict=True, max_length=64)]
    completed_at: Optional[datetime] = None
    created_at: datetime
    defaults: Dict[str, StrictStr]
    description: Annotated[str, Field(strict=True, max_length=1024)]
    details: Optional[StrictStr] = None
    errored_messages: Optional[StrictInt] = None
    failed_at: Optional[datetime] = None
    id: StrictStr
    name: Annotated[str, Field(strict=True, max_length=256)]
    resumed_at: Optional[datetime] = None
    scheduled_at: Optional[datetime] = None
    scheduled_for: Optional[datetime] = None
    segment_id: StrictStr
    sender_id: StrictStr
    sent_messages: Optional[StrictInt] = None
    status: Optional[StrictStr] = None
    stopped_at: Optional[datetime] = None
    task_id: Optional[StrictStr] = None
    text: StrictStr
    updated_at: datetime
    __properties: ClassVar[List[str]] = ["attachments", "channel_type", "completed_at", "created_at", "defaults", "description", "details", "errored_messages", "failed_at", "id", "name", "resumed_at", "scheduled_at", "scheduled_for", "segment_id", "sender_id", "sent_messages", "status", "stopped_at", "task_id", "text", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Campaign from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Campaign from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attachments": [Attachment.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "channel_type": obj.get("channel_type"),
            "completed_at": obj.get("completed_at"),
            "created_at": obj.get("created_at"),
            "defaults": obj.get("defaults"),
            "description": obj.get("description"),
            "details": obj.get("details"),
            "errored_messages": obj.get("errored_messages"),
            "failed_at": obj.get("failed_at"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "resumed_at": obj.get("resumed_at"),
            "scheduled_at": obj.get("scheduled_at"),
            "scheduled_for": obj.get("scheduled_for"),
            "segment_id": obj.get("segment_id"),
            "sender_id": obj.get("sender_id"),
            "sent_messages": obj.get("sent_messages"),
            "status": obj.get("status"),
            "stopped_at": obj.get("stopped_at"),
            "task_id": obj.get("task_id"),
            "text": obj.get("text"),
            "updated_at": obj.get("updated_at")
        })
        return _obj



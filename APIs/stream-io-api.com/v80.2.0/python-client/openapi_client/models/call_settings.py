# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.audio_settings import AudioSettings
from openapi_client.models.backstage_settings import BackstageSettings
from openapi_client.models.broadcast_settings import BroadcastSettings
from openapi_client.models.geofence_settings import GeofenceSettings
from openapi_client.models.record_settings import RecordSettings
from openapi_client.models.ring_settings import RingSettings
from openapi_client.models.screensharing_settings import ScreensharingSettings
from openapi_client.models.transcription_settings import TranscriptionSettings
from openapi_client.models.video_settings import VideoSettings
from typing import Optional, Set
from typing_extensions import Self

class CallSettings(BaseModel):
    """
    CallSettings
    """ # noqa: E501
    audio: Optional[AudioSettings] = None
    backstage: Optional[BackstageSettings] = None
    broadcasting: Optional[BroadcastSettings] = None
    geofencing: Optional[GeofenceSettings] = None
    recording: Optional[RecordSettings] = None
    ring: Optional[RingSettings] = None
    screensharing: Optional[ScreensharingSettings] = None
    transcription: Optional[TranscriptionSettings] = None
    video: Optional[VideoSettings] = None
    __properties: ClassVar[List[str]] = ["audio", "backstage", "broadcasting", "geofencing", "recording", "ring", "screensharing", "transcription", "video"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CallSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of audio
        if self.audio:
            _dict['audio'] = self.audio.to_dict()
        # override the default output from pydantic by calling `to_dict()` of backstage
        if self.backstage:
            _dict['backstage'] = self.backstage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of broadcasting
        if self.broadcasting:
            _dict['broadcasting'] = self.broadcasting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geofencing
        if self.geofencing:
            _dict['geofencing'] = self.geofencing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recording
        if self.recording:
            _dict['recording'] = self.recording.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ring
        if self.ring:
            _dict['ring'] = self.ring.to_dict()
        # override the default output from pydantic by calling `to_dict()` of screensharing
        if self.screensharing:
            _dict['screensharing'] = self.screensharing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transcription
        if self.transcription:
            _dict['transcription'] = self.transcription.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video
        if self.video:
            _dict['video'] = self.video.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CallSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audio": AudioSettings.from_dict(obj["audio"]) if obj.get("audio") is not None else None,
            "backstage": BackstageSettings.from_dict(obj["backstage"]) if obj.get("backstage") is not None else None,
            "broadcasting": BroadcastSettings.from_dict(obj["broadcasting"]) if obj.get("broadcasting") is not None else None,
            "geofencing": GeofenceSettings.from_dict(obj["geofencing"]) if obj.get("geofencing") is not None else None,
            "recording": RecordSettings.from_dict(obj["recording"]) if obj.get("recording") is not None else None,
            "ring": RingSettings.from_dict(obj["ring"]) if obj.get("ring") is not None else None,
            "screensharing": ScreensharingSettings.from_dict(obj["screensharing"]) if obj.get("screensharing") is not None else None,
            "transcription": TranscriptionSettings.from_dict(obj["transcription"]) if obj.get("transcription") is not None else None,
            "video": VideoSettings.from_dict(obj["video"]) if obj.get("video") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.channel_member import ChannelMember
from openapi_client.models.channel_response import ChannelResponse
from openapi_client.models.message import Message
from openapi_client.models.pending_message import PendingMessage
from openapi_client.models.read import Read
from openapi_client.models.user_object import UserObject
from typing import Optional, Set
from typing_extensions import Self

class ChannelStateResponse(BaseModel):
    """
    ChannelStateResponse
    """ # noqa: E501
    channel: Optional[ChannelResponse] = None
    duration: StrictStr
    hidden: Optional[StrictBool] = None
    hide_messages_before: Optional[datetime] = None
    members: List[Optional[ChannelMember]]
    membership: Optional[ChannelMember] = None
    messages: List[Optional[Message]]
    pending_messages: Optional[List[Optional[PendingMessage]]] = None
    pinned_messages: List[Optional[Message]]
    read: Optional[List[Optional[Read]]] = None
    watcher_count: Optional[StrictInt] = None
    watchers: Optional[List[UserObject]] = None
    __properties: ClassVar[List[str]] = ["channel", "duration", "hidden", "hide_messages_before", "members", "membership", "messages", "pending_messages", "pinned_messages", "read", "watcher_count", "watchers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChannelStateResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of channel
        if self.channel:
            _dict['channel'] = self.channel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in members (list)
        _items = []
        if self.members:
            for _item_members in self.members:
                if _item_members:
                    _items.append(_item_members.to_dict())
            _dict['members'] = _items
        # override the default output from pydantic by calling `to_dict()` of membership
        if self.membership:
            _dict['membership'] = self.membership.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item_messages in self.messages:
                if _item_messages:
                    _items.append(_item_messages.to_dict())
            _dict['messages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pending_messages (list)
        _items = []
        if self.pending_messages:
            for _item_pending_messages in self.pending_messages:
                if _item_pending_messages:
                    _items.append(_item_pending_messages.to_dict())
            _dict['pending_messages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pinned_messages (list)
        _items = []
        if self.pinned_messages:
            for _item_pinned_messages in self.pinned_messages:
                if _item_pinned_messages:
                    _items.append(_item_pinned_messages.to_dict())
            _dict['pinned_messages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in read (list)
        _items = []
        if self.read:
            for _item_read in self.read:
                if _item_read:
                    _items.append(_item_read.to_dict())
            _dict['read'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in watchers (list)
        _items = []
        if self.watchers:
            for _item_watchers in self.watchers:
                if _item_watchers:
                    _items.append(_item_watchers.to_dict())
            _dict['watchers'] = _items
        # set to None if membership (nullable) is None
        # and model_fields_set contains the field
        if self.membership is None and "membership" in self.model_fields_set:
            _dict['membership'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChannelStateResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channel": ChannelResponse.from_dict(obj["channel"]) if obj.get("channel") is not None else None,
            "duration": obj.get("duration"),
            "hidden": obj.get("hidden"),
            "hide_messages_before": obj.get("hide_messages_before"),
            "members": [ChannelMember.from_dict(_item) for _item in obj["members"]] if obj.get("members") is not None else None,
            "membership": ChannelMember.from_dict(obj["membership"]) if obj.get("membership") is not None else None,
            "messages": [Message.from_dict(_item) for _item in obj["messages"]] if obj.get("messages") is not None else None,
            "pending_messages": [PendingMessage.from_dict(_item) for _item in obj["pending_messages"]] if obj.get("pending_messages") is not None else None,
            "pinned_messages": [Message.from_dict(_item) for _item in obj["pinned_messages"]] if obj.get("pinned_messages") is not None else None,
            "read": [Read.from_dict(_item) for _item in obj["read"]] if obj.get("read") is not None else None,
            "watcher_count": obj.get("watcher_count"),
            "watchers": [UserObject.from_dict(_item) for _item in obj["watchers"]] if obj.get("watchers") is not None else None
        })
        return _obj



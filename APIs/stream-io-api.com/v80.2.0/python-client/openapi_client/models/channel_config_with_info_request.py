# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.command_request import CommandRequest
from openapi_client.models.thresholds_request import ThresholdsRequest
from typing import Optional, Set
from typing_extensions import Self

class ChannelConfigWithInfoRequest(BaseModel):
    """
    ChannelConfigWithInfoRequest
    """ # noqa: E501
    automod: StrictStr
    automod_behavior: Optional[StrictStr] = None
    automod_thresholds: Optional[ThresholdsRequest] = None
    blocklist: Optional[StrictStr] = None
    blocklist_behavior: Optional[StrictStr] = None
    commands: Optional[List[Optional[CommandRequest]]] = None
    connect_events: Optional[StrictBool] = None
    created_at: Optional[datetime] = None
    custom_events: Optional[StrictBool] = None
    grants: Optional[Dict[str, List[StrictStr]]] = None
    max_message_length: Optional[Annotated[int, Field(le=20000, strict=True)]] = None
    message_retention: Optional[StrictStr] = None
    mutes: Optional[StrictBool] = None
    name: Optional[StrictStr] = None
    push_notifications: Optional[StrictBool] = None
    quotes: Optional[StrictBool] = None
    reactions: Optional[StrictBool] = None
    read_events: Optional[StrictBool] = None
    reminders: Optional[StrictBool] = None
    replies: Optional[StrictBool] = None
    search: Optional[StrictBool] = None
    typing_events: Optional[StrictBool] = None
    updated_at: Optional[datetime] = None
    uploads: Optional[StrictBool] = None
    url_enrichment: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["automod", "automod_behavior", "automod_thresholds", "blocklist", "blocklist_behavior", "commands", "connect_events", "created_at", "custom_events", "grants", "max_message_length", "message_retention", "mutes", "name", "push_notifications", "quotes", "reactions", "read_events", "reminders", "replies", "search", "typing_events", "updated_at", "uploads", "url_enrichment"]

    @field_validator('automod')
    def automod_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['disabled', 'simple', 'AI']):
            raise ValueError("must be one of enum values ('disabled', 'simple', 'AI')")
        return value

    @field_validator('automod_behavior')
    def automod_behavior_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['flag', 'block']):
            raise ValueError("must be one of enum values ('flag', 'block')")
        return value

    @field_validator('blocklist_behavior')
    def blocklist_behavior_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['flag', 'block']):
            raise ValueError("must be one of enum values ('flag', 'block')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChannelConfigWithInfoRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of automod_thresholds
        if self.automod_thresholds:
            _dict['automod_thresholds'] = self.automod_thresholds.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in commands (list)
        _items = []
        if self.commands:
            for _item_commands in self.commands:
                if _item_commands:
                    _items.append(_item_commands.to_dict())
            _dict['commands'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChannelConfigWithInfoRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "automod": obj.get("automod"),
            "automod_behavior": obj.get("automod_behavior"),
            "automod_thresholds": ThresholdsRequest.from_dict(obj["automod_thresholds"]) if obj.get("automod_thresholds") is not None else None,
            "blocklist": obj.get("blocklist"),
            "blocklist_behavior": obj.get("blocklist_behavior"),
            "commands": [CommandRequest.from_dict(_item) for _item in obj["commands"]] if obj.get("commands") is not None else None,
            "connect_events": obj.get("connect_events"),
            "created_at": obj.get("created_at"),
            "custom_events": obj.get("custom_events"),
            "grants": obj.get("grants"),
            "max_message_length": obj.get("max_message_length"),
            "message_retention": obj.get("message_retention"),
            "mutes": obj.get("mutes"),
            "name": obj.get("name"),
            "push_notifications": obj.get("push_notifications"),
            "quotes": obj.get("quotes"),
            "reactions": obj.get("reactions"),
            "read_events": obj.get("read_events"),
            "reminders": obj.get("reminders"),
            "replies": obj.get("replies"),
            "search": obj.get("search"),
            "typing_events": obj.get("typing_events"),
            "updated_at": obj.get("updated_at"),
            "uploads": obj.get("uploads"),
            "url_enrichment": obj.get("url_enrichment")
        })
        return _obj



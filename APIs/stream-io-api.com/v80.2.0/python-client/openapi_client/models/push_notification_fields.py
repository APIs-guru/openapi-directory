# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.apn_config_fields import APNConfigFields
from openapi_client.models.firebase_config_fields import FirebaseConfigFields
from openapi_client.models.huawei_config_fields import HuaweiConfigFields
from openapi_client.models.push_provider import PushProvider
from openapi_client.models.xiaomi_config_fields import XiaomiConfigFields
from typing import Optional, Set
from typing_extensions import Self

class PushNotificationFields(BaseModel):
    """
    PushNotificationFields
    """ # noqa: E501
    apn: APNConfigFields
    firebase: FirebaseConfigFields
    huawei: HuaweiConfigFields
    offline_only: StrictBool
    providers: Optional[List[Optional[PushProvider]]] = None
    version: StrictStr
    xiaomi: XiaomiConfigFields
    __properties: ClassVar[List[str]] = ["apn", "firebase", "huawei", "offline_only", "providers", "version", "xiaomi"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PushNotificationFields from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of apn
        if self.apn:
            _dict['apn'] = self.apn.to_dict()
        # override the default output from pydantic by calling `to_dict()` of firebase
        if self.firebase:
            _dict['firebase'] = self.firebase.to_dict()
        # override the default output from pydantic by calling `to_dict()` of huawei
        if self.huawei:
            _dict['huawei'] = self.huawei.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in providers (list)
        _items = []
        if self.providers:
            for _item_providers in self.providers:
                if _item_providers:
                    _items.append(_item_providers.to_dict())
            _dict['providers'] = _items
        # override the default output from pydantic by calling `to_dict()` of xiaomi
        if self.xiaomi:
            _dict['xiaomi'] = self.xiaomi.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PushNotificationFields from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apn": APNConfigFields.from_dict(obj["apn"]) if obj.get("apn") is not None else None,
            "firebase": FirebaseConfigFields.from_dict(obj["firebase"]) if obj.get("firebase") is not None else None,
            "huawei": HuaweiConfigFields.from_dict(obj["huawei"]) if obj.get("huawei") is not None else None,
            "offline_only": obj.get("offline_only"),
            "providers": [PushProvider.from_dict(_item) for _item in obj["providers"]] if obj.get("providers") is not None else None,
            "version": obj.get("version"),
            "xiaomi": XiaomiConfigFields.from_dict(obj["xiaomi"]) if obj.get("xiaomi") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.attachment import Attachment
from openapi_client.models.channel_response import ChannelResponse
from openapi_client.models.message import Message
from openapi_client.models.reaction import Reaction
from openapi_client.models.user_object import UserObject
from typing import Optional, Set
from typing_extensions import Self

class SearchResultMessage(BaseModel):
    """
    SearchResultMessage
    """ # noqa: E501
    attachments: List[Optional[Attachment]]
    before_message_send_failed: Optional[StrictBool] = None
    channel: Optional[ChannelResponse] = None
    cid: StrictStr
    command: Optional[StrictStr] = None
    created_at: datetime
    deleted_at: Optional[datetime] = None
    html: StrictStr
    i18n: Optional[Dict[str, StrictStr]] = None
    id: StrictStr
    image_labels: Optional[Dict[str, List[StrictStr]]] = None
    latest_reactions: List[Optional[Reaction]]
    mentioned_users: List[UserObject]
    mml: Optional[StrictStr] = None
    own_reactions: List[Optional[Reaction]]
    parent_id: Optional[StrictStr] = None
    pin_expires: Optional[datetime] = None
    pinned: StrictBool
    pinned_at: Optional[datetime] = None
    pinned_by: Optional[UserObject] = None
    quoted_message: Optional[Message] = None
    quoted_message_id: Optional[StrictStr] = None
    reaction_counts: Dict[str, StrictInt]
    reaction_scores: Dict[str, StrictInt]
    reply_count: StrictInt
    shadowed: StrictBool
    show_in_channel: Optional[StrictBool] = None
    silent: StrictBool
    text: StrictStr
    thread_participants: Optional[List[UserObject]] = None
    type: StrictStr
    updated_at: datetime
    user: Optional[UserObject] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["attachments", "before_message_send_failed", "channel", "cid", "command", "created_at", "deleted_at", "html", "i18n", "id", "image_labels", "latest_reactions", "mentioned_users", "mml", "own_reactions", "parent_id", "pin_expires", "pinned", "pinned_at", "pinned_by", "quoted_message", "quoted_message_id", "reaction_counts", "reaction_scores", "reply_count", "shadowed", "show_in_channel", "silent", "text", "thread_participants", "type", "updated_at", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchResultMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of channel
        if self.channel:
            _dict['channel'] = self.channel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in latest_reactions (list)
        _items = []
        if self.latest_reactions:
            for _item_latest_reactions in self.latest_reactions:
                if _item_latest_reactions:
                    _items.append(_item_latest_reactions.to_dict())
            _dict['latest_reactions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in mentioned_users (list)
        _items = []
        if self.mentioned_users:
            for _item_mentioned_users in self.mentioned_users:
                if _item_mentioned_users:
                    _items.append(_item_mentioned_users.to_dict())
            _dict['mentioned_users'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in own_reactions (list)
        _items = []
        if self.own_reactions:
            for _item_own_reactions in self.own_reactions:
                if _item_own_reactions:
                    _items.append(_item_own_reactions.to_dict())
            _dict['own_reactions'] = _items
        # override the default output from pydantic by calling `to_dict()` of pinned_by
        if self.pinned_by:
            _dict['pinned_by'] = self.pinned_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quoted_message
        if self.quoted_message:
            _dict['quoted_message'] = self.quoted_message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in thread_participants (list)
        _items = []
        if self.thread_participants:
            for _item_thread_participants in self.thread_participants:
                if _item_thread_participants:
                    _items.append(_item_thread_participants.to_dict())
            _dict['thread_participants'] = _items
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if quoted_message (nullable) is None
        # and model_fields_set contains the field
        if self.quoted_message is None and "quoted_message" in self.model_fields_set:
            _dict['quoted_message'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchResultMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attachments": [Attachment.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "before_message_send_failed": obj.get("before_message_send_failed"),
            "channel": ChannelResponse.from_dict(obj["channel"]) if obj.get("channel") is not None else None,
            "cid": obj.get("cid"),
            "command": obj.get("command"),
            "created_at": obj.get("created_at"),
            "deleted_at": obj.get("deleted_at"),
            "html": obj.get("html"),
            "i18n": obj.get("i18n"),
            "id": obj.get("id"),
            "image_labels": obj.get("image_labels"),
            "latest_reactions": [Reaction.from_dict(_item) for _item in obj["latest_reactions"]] if obj.get("latest_reactions") is not None else None,
            "mentioned_users": [UserObject.from_dict(_item) for _item in obj["mentioned_users"]] if obj.get("mentioned_users") is not None else None,
            "mml": obj.get("mml"),
            "own_reactions": [Reaction.from_dict(_item) for _item in obj["own_reactions"]] if obj.get("own_reactions") is not None else None,
            "parent_id": obj.get("parent_id"),
            "pin_expires": obj.get("pin_expires"),
            "pinned": obj.get("pinned"),
            "pinned_at": obj.get("pinned_at"),
            "pinned_by": UserObject.from_dict(obj["pinned_by"]) if obj.get("pinned_by") is not None else None,
            "quoted_message": Message.from_dict(obj["quoted_message"]) if obj.get("quoted_message") is not None else None,
            "quoted_message_id": obj.get("quoted_message_id"),
            "reaction_counts": obj.get("reaction_counts"),
            "reaction_scores": obj.get("reaction_scores"),
            "reply_count": obj.get("reply_count"),
            "shadowed": obj.get("shadowed"),
            "show_in_channel": obj.get("show_in_channel"),
            "silent": obj.get("silent"),
            "text": obj.get("text"),
            "thread_participants": [UserObject.from_dict(_item) for _item in obj["thread_participants"]] if obj.get("thread_participants") is not None else None,
            "type": obj.get("type"),
            "updated_at": obj.get("updated_at"),
            "user": UserObject.from_dict(obj["user"]) if obj.get("user") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj



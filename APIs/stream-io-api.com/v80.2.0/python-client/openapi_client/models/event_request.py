# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.channel_member_request import ChannelMemberRequest
from openapi_client.models.channel_response_request import ChannelResponseRequest
from openapi_client.models.message_request1 import MessageRequest1
from openapi_client.models.moderation_response_request import ModerationResponseRequest
from openapi_client.models.own_user_request import OwnUserRequest
from openapi_client.models.reaction_request import ReactionRequest
from openapi_client.models.user_object_request import UserObjectRequest
from typing import Optional, Set
from typing_extensions import Self

class EventRequest(BaseModel):
    """
    Represents an BaseEvent that happened in Stream Chat
    """ # noqa: E501
    automoderation: Optional[StrictBool] = Field(default=None, description="Only applicable to `message.flagged` BaseEvent.")
    automoderation_scores: Optional[ModerationResponseRequest] = None
    channel: Optional[ChannelResponseRequest] = None
    channel_id: Optional[StrictStr] = None
    channel_type: Optional[StrictStr] = None
    cid: Optional[StrictStr] = Field(default=None, description="Channel CID (<type>:<id>)")
    connection_id: Optional[StrictStr] = Field(default=None, description="Only applicable to `health.check` BaseEvent")
    created_at: Optional[datetime] = Field(default=None, description="Date/time of creation")
    created_by: Optional[UserObjectRequest] = None
    me: Optional[OwnUserRequest] = None
    member: Optional[ChannelMemberRequest] = None
    message: Optional[MessageRequest1] = None
    parent_id: Optional[StrictStr] = Field(default=None, description="ID of thread. Used in typing events")
    reaction: Optional[ReactionRequest] = None
    reason: Optional[StrictStr] = Field(default=None, description="Ban reason. Only applicable to `user.banned` BaseEvent")
    team: Optional[StrictStr] = None
    type: StrictStr = Field(description="Event type. To use custom BaseEvent types see Custom Events documentation")
    user: Optional[UserObjectRequest] = None
    user_id: Optional[StrictStr] = None
    watcher_count: Optional[StrictInt] = Field(default=None, description="Number of watchers who received this BaseEvent")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["automoderation", "automoderation_scores", "channel", "channel_id", "channel_type", "cid", "connection_id", "created_at", "created_by", "me", "member", "message", "parent_id", "reaction", "reason", "team", "type", "user", "user_id", "watcher_count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of automoderation_scores
        if self.automoderation_scores:
            _dict['automoderation_scores'] = self.automoderation_scores.to_dict()
        # override the default output from pydantic by calling `to_dict()` of channel
        if self.channel:
            _dict['channel'] = self.channel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of me
        if self.me:
            _dict['me'] = self.me.to_dict()
        # override the default output from pydantic by calling `to_dict()` of member
        if self.member:
            _dict['member'] = self.member.to_dict()
        # override the default output from pydantic by calling `to_dict()` of message
        if self.message:
            _dict['message'] = self.message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reaction
        if self.reaction:
            _dict['reaction'] = self.reaction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if member (nullable) is None
        # and model_fields_set contains the field
        if self.member is None and "member" in self.model_fields_set:
            _dict['member'] = None

        # set to None if reaction (nullable) is None
        # and model_fields_set contains the field
        if self.reaction is None and "reaction" in self.model_fields_set:
            _dict['reaction'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "automoderation": obj.get("automoderation"),
            "automoderation_scores": ModerationResponseRequest.from_dict(obj["automoderation_scores"]) if obj.get("automoderation_scores") is not None else None,
            "channel": ChannelResponseRequest.from_dict(obj["channel"]) if obj.get("channel") is not None else None,
            "channel_id": obj.get("channel_id"),
            "channel_type": obj.get("channel_type"),
            "cid": obj.get("cid"),
            "connection_id": obj.get("connection_id"),
            "created_at": obj.get("created_at"),
            "created_by": UserObjectRequest.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "me": OwnUserRequest.from_dict(obj["me"]) if obj.get("me") is not None else None,
            "member": ChannelMemberRequest.from_dict(obj["member"]) if obj.get("member") is not None else None,
            "message": MessageRequest1.from_dict(obj["message"]) if obj.get("message") is not None else None,
            "parent_id": obj.get("parent_id"),
            "reaction": ReactionRequest.from_dict(obj["reaction"]) if obj.get("reaction") is not None else None,
            "reason": obj.get("reason"),
            "team": obj.get("team"),
            "type": obj.get("type"),
            "user": UserObjectRequest.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "user_id": obj.get("user_id"),
            "watcher_count": obj.get("watcher_count")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj



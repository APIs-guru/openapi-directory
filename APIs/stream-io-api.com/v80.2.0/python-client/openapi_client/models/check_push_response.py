# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.device_error_info import DeviceErrorInfo
from typing import Optional, Set
from typing_extensions import Self

class CheckPushResponse(BaseModel):
    """
    CheckPushResponse
    """ # noqa: E501
    device_errors: Optional[Dict[str, DeviceErrorInfo]] = Field(default=None, description="Object with device errors")
    duration: StrictStr
    general_errors: Optional[List[StrictStr]] = Field(default=None, description="List of general errors")
    rendered_apn_template: Optional[StrictStr] = None
    rendered_firebase_template: Optional[StrictStr] = None
    rendered_message: Optional[Dict[str, StrictStr]] = None
    skip_devices: Optional[StrictBool] = Field(default=None, description="Don't require existing devices to render templates")
    __properties: ClassVar[List[str]] = ["device_errors", "duration", "general_errors", "rendered_apn_template", "rendered_firebase_template", "rendered_message", "skip_devices"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CheckPushResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in device_errors (dict)
        _field_dict = {}
        if self.device_errors:
            for _key_device_errors in self.device_errors:
                if self.device_errors[_key_device_errors]:
                    _field_dict[_key_device_errors] = self.device_errors[_key_device_errors].to_dict()
            _dict['device_errors'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CheckPushResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "device_errors": dict(
                (_k, DeviceErrorInfo.from_dict(_v))
                for _k, _v in obj["device_errors"].items()
            )
            if obj.get("device_errors") is not None
            else None,
            "duration": obj.get("duration"),
            "general_errors": obj.get("general_errors"),
            "rendered_apn_template": obj.get("rendered_apn_template"),
            "rendered_firebase_template": obj.get("rendered_firebase_template"),
            "rendered_message": obj.get("rendered_message"),
            "skip_devices": obj.get("skip_devices")
        })
        return _obj



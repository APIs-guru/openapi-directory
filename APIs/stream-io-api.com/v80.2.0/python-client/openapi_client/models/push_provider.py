# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PushProvider(BaseModel):
    """
    PushProvider
    """ # noqa: E501
    apn_auth_key: Optional[StrictStr] = None
    apn_auth_type: Optional[StrictStr] = None
    apn_development: Optional[StrictBool] = None
    apn_host: Optional[StrictStr] = None
    apn_key_id: Optional[StrictStr] = None
    apn_notification_template: Optional[StrictStr] = None
    apn_p12_cert: Optional[StrictStr] = None
    apn_team_id: Optional[StrictStr] = None
    apn_topic: Optional[StrictStr] = None
    created_at: datetime
    description: Optional[Annotated[str, Field(strict=True, max_length=128)]] = None
    disabled_at: Optional[datetime] = None
    disabled_reason: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    firebase_apn_template: Optional[StrictStr] = None
    firebase_credentials: Optional[StrictStr] = None
    firebase_data_template: Optional[StrictStr] = None
    firebase_notification_template: Optional[StrictStr] = None
    firebase_server_key: Optional[StrictStr] = None
    huawei_app_id: Optional[StrictStr] = None
    huawei_app_secret: Optional[StrictStr] = None
    name: Annotated[str, Field(min_length=1, strict=True, max_length=36)]
    type: StrictInt
    updated_at: datetime
    xiaomi_app_secret: Optional[StrictStr] = None
    xiaomi_package_name: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["apn_auth_key", "apn_auth_type", "apn_development", "apn_host", "apn_key_id", "apn_notification_template", "apn_p12_cert", "apn_team_id", "apn_topic", "created_at", "description", "disabled_at", "disabled_reason", "firebase_apn_template", "firebase_credentials", "firebase_data_template", "firebase_notification_template", "firebase_server_key", "huawei_app_id", "huawei_app_secret", "name", "type", "updated_at", "xiaomi_app_secret", "xiaomi_package_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PushProvider from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PushProvider from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apn_auth_key": obj.get("apn_auth_key"),
            "apn_auth_type": obj.get("apn_auth_type"),
            "apn_development": obj.get("apn_development"),
            "apn_host": obj.get("apn_host"),
            "apn_key_id": obj.get("apn_key_id"),
            "apn_notification_template": obj.get("apn_notification_template"),
            "apn_p12_cert": obj.get("apn_p12_cert"),
            "apn_team_id": obj.get("apn_team_id"),
            "apn_topic": obj.get("apn_topic"),
            "created_at": obj.get("created_at"),
            "description": obj.get("description"),
            "disabled_at": obj.get("disabled_at"),
            "disabled_reason": obj.get("disabled_reason"),
            "firebase_apn_template": obj.get("firebase_apn_template"),
            "firebase_credentials": obj.get("firebase_credentials"),
            "firebase_data_template": obj.get("firebase_data_template"),
            "firebase_notification_template": obj.get("firebase_notification_template"),
            "firebase_server_key": obj.get("firebase_server_key"),
            "huawei_app_id": obj.get("huawei_app_id"),
            "huawei_app_secret": obj.get("huawei_app_secret"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "updated_at": obj.get("updated_at"),
            "xiaomi_app_secret": obj.get("xiaomi_app_secret"),
            "xiaomi_package_name": obj.get("xiaomi_package_name")
        })
        return _obj



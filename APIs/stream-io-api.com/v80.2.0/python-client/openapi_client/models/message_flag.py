# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.message import Message
from openapi_client.models.message_moderation_result import MessageModerationResult
from openapi_client.models.user_object import UserObject
from typing import Optional, Set
from typing_extensions import Self

class MessageFlag(BaseModel):
    """
    MessageFlag
    """ # noqa: E501
    approved_at: Optional[datetime] = None
    created_at: datetime
    created_by_automod: StrictBool
    message: Optional[Message] = None
    moderation_result: Optional[MessageModerationResult] = None
    rejected_at: Optional[datetime] = None
    reviewed_at: Optional[datetime] = None
    reviewed_by: Optional[UserObject] = None
    updated_at: datetime
    user: Optional[UserObject] = None
    __properties: ClassVar[List[str]] = ["approved_at", "created_at", "created_by_automod", "message", "moderation_result", "rejected_at", "reviewed_at", "reviewed_by", "updated_at", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MessageFlag from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of message
        if self.message:
            _dict['message'] = self.message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of moderation_result
        if self.moderation_result:
            _dict['moderation_result'] = self.moderation_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reviewed_by
        if self.reviewed_by:
            _dict['reviewed_by'] = self.reviewed_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict['message'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MessageFlag from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "approved_at": obj.get("approved_at"),
            "created_at": obj.get("created_at"),
            "created_by_automod": obj.get("created_by_automod"),
            "message": Message.from_dict(obj["message"]) if obj.get("message") is not None else None,
            "moderation_result": MessageModerationResult.from_dict(obj["moderation_result"]) if obj.get("moderation_result") is not None else None,
            "rejected_at": obj.get("rejected_at"),
            "reviewed_at": obj.get("reviewed_at"),
            "reviewed_by": UserObject.from_dict(obj["reviewed_by"]) if obj.get("reviewed_by") is not None else None,
            "updated_at": obj.get("updated_at"),
            "user": UserObject.from_dict(obj["user"]) if obj.get("user") is not None else None
        })
        return _obj



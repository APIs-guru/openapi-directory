# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.user_object_request import UserObjectRequest
from typing import Optional, Set
from typing_extensions import Self

class SyncRequest(BaseModel):
    """
    SyncRequest
    """ # noqa: E501
    channel_cids: Optional[List[StrictStr]] = Field(default=None, description="List of channel CIDs to sync")
    client_id: Optional[StrictStr] = None
    connection_id: Optional[StrictStr] = None
    last_sync_at: datetime = Field(description="Date from which synchronization should happen")
    user: Optional[UserObjectRequest] = None
    user_id: Optional[StrictStr] = None
    watch: Optional[StrictBool] = Field(default=None, description="If set to true this will start watching requested and newly added channels that user has access to. If error occurred with this option enabled and it is not an input error - channels will still be watched.")
    with_inaccessible_cids: Optional[StrictBool] = Field(default=None, description="If set to true this will add 'inaccessible_cids' to response type")
    __properties: ClassVar[List[str]] = ["channel_cids", "client_id", "connection_id", "last_sync_at", "user", "user_id", "watch", "with_inaccessible_cids"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SyncRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SyncRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channel_cids": obj.get("channel_cids"),
            "client_id": obj.get("client_id"),
            "connection_id": obj.get("connection_id"),
            "last_sync_at": obj.get("last_sync_at"),
            "user": UserObjectRequest.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "user_id": obj.get("user_id"),
            "watch": obj.get("watch"),
            "with_inaccessible_cids": obj.get("with_inaccessible_cids")
        })
        return _obj



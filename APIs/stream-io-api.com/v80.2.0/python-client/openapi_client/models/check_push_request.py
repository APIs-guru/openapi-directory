# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.user_object_request import UserObjectRequest
from typing import Optional, Set
from typing_extensions import Self

class CheckPushRequest(BaseModel):
    """
    CheckPushRequest
    """ # noqa: E501
    apn_template: Optional[StrictStr] = Field(default=None, description="Push message template for APN")
    firebase_data_template: Optional[StrictStr] = Field(default=None, description="Push message data template for Firebase")
    firebase_template: Optional[StrictStr] = Field(default=None, description="Push message template for Firebase")
    message_id: Optional[StrictStr] = Field(default=None, description="Message ID to send push notification for")
    push_provider_name: Optional[StrictStr] = Field(default=None, description="Name of push provider")
    push_provider_type: Optional[StrictStr] = Field(default=None, description="Push provider type")
    skip_devices: Optional[StrictBool] = Field(default=None, description="Don't require existing devices to render templates")
    user: Optional[UserObjectRequest] = None
    user_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["apn_template", "firebase_data_template", "firebase_template", "message_id", "push_provider_name", "push_provider_type", "skip_devices", "user", "user_id"]

    @field_validator('push_provider_type')
    def push_provider_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['firebase', 'apn', 'huawei', 'xiaomi']):
            raise ValueError("must be one of enum values ('firebase', 'apn', 'huawei', 'xiaomi')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CheckPushRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CheckPushRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apn_template": obj.get("apn_template"),
            "firebase_data_template": obj.get("firebase_data_template"),
            "firebase_template": obj.get("firebase_template"),
            "message_id": obj.get("message_id"),
            "push_provider_name": obj.get("push_provider_name"),
            "push_provider_type": obj.get("push_provider_type"),
            "skip_devices": obj.get("skip_devices"),
            "user": UserObjectRequest.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "user_id": obj.get("user_id")
        })
        return _obj



# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ChannelConfigRequest(BaseModel):
    """
    Channel configuration overrides
    """ # noqa: E501
    blocklist: Optional[StrictStr] = None
    blocklist_behavior: Optional[StrictStr] = None
    commands: Optional[List[StrictStr]] = None
    grants: Optional[Dict[str, List[StrictStr]]] = None
    max_message_length: Optional[Annotated[int, Field(le=20000, strict=True)]] = Field(default=None, description="Overrides max message length")
    quotes: Optional[StrictBool] = Field(default=None, description="Enables message quotes")
    reactions: Optional[StrictBool] = Field(default=None, description="Enables or disables reactions")
    replies: Optional[StrictBool] = Field(default=None, description="Enables message replies (threads)")
    typing_events: Optional[StrictBool] = Field(default=None, description="Enables or disables typing events")
    uploads: Optional[StrictBool] = Field(default=None, description="Enables or disables file uploads")
    url_enrichment: Optional[StrictBool] = Field(default=None, description="Enables or disables URL enrichment")
    __properties: ClassVar[List[str]] = ["blocklist", "blocklist_behavior", "commands", "grants", "max_message_length", "quotes", "reactions", "replies", "typing_events", "uploads", "url_enrichment"]

    @field_validator('blocklist_behavior')
    def blocklist_behavior_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['flag', 'block']):
            raise ValueError("must be one of enum values ('flag', 'block')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChannelConfigRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChannelConfigRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blocklist": obj.get("blocklist"),
            "blocklist_behavior": obj.get("blocklist_behavior"),
            "commands": obj.get("commands"),
            "grants": obj.get("grants"),
            "max_message_length": obj.get("max_message_length"),
            "quotes": obj.get("quotes"),
            "reactions": obj.get("reactions"),
            "replies": obj.get("replies"),
            "typing_events": obj.get("typing_events"),
            "uploads": obj.get("uploads"),
            "url_enrichment": obj.get("url_enrichment")
        })
        return _obj



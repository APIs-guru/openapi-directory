# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.call_type import CallType
from openapi_client.models.channel_config import ChannelConfig
from openapi_client.models.config import Config
from openapi_client.models.file_upload_config import FileUploadConfig
from openapi_client.models.policy import Policy
from openapi_client.models.push_notification_fields import PushNotificationFields
from typing import Optional, Set
from typing_extensions import Self

class App(BaseModel):
    """
    App
    """ # noqa: E501
    agora_options: Optional[Config] = None
    async_url_enrich_enabled: StrictBool
    auto_translation_enabled: Optional[StrictBool] = None
    before_message_send_hook_url: Optional[StrictStr] = None
    call_types: Dict[str, Optional[CallType]]
    campaign_enabled: StrictBool
    cdn_expiration_seconds: StrictInt
    channel_configs: Dict[str, ChannelConfig] = Field(description="Object with channel configs")
    custom_action_handler_url: StrictStr
    disable_auth_checks: StrictBool
    disable_permissions_checks: StrictBool
    enforce_unique_usernames: StrictStr
    file_upload_config: FileUploadConfig
    grants: Dict[str, List[StrictStr]]
    hms_options: Optional[Config] = None
    image_moderation_enabled: StrictBool
    image_moderation_labels: Optional[List[StrictStr]] = None
    image_upload_config: FileUploadConfig
    multi_tenant_enabled: StrictBool
    name: StrictStr
    organization: StrictStr
    permission_version: StrictStr
    policies: Dict[str, List[Policy]]
    push_notifications: PushNotificationFields
    reminders_interval: StrictInt
    revoke_tokens_issued_before: Optional[datetime] = None
    search_backend: StrictStr = Field(description="Backend implementation used for search")
    sqs_key: StrictStr
    sqs_secret: StrictStr
    sqs_url: StrictStr
    suspended: StrictBool
    suspended_explanation: StrictStr
    user_search_disallowed_roles: List[StrictStr]
    video_provider: StrictStr
    webhook_events: List[StrictStr]
    webhook_url: StrictStr
    __properties: ClassVar[List[str]] = ["agora_options", "async_url_enrich_enabled", "auto_translation_enabled", "before_message_send_hook_url", "call_types", "campaign_enabled", "cdn_expiration_seconds", "channel_configs", "custom_action_handler_url", "disable_auth_checks", "disable_permissions_checks", "enforce_unique_usernames", "file_upload_config", "grants", "hms_options", "image_moderation_enabled", "image_moderation_labels", "image_upload_config", "multi_tenant_enabled", "name", "organization", "permission_version", "policies", "push_notifications", "reminders_interval", "revoke_tokens_issued_before", "search_backend", "sqs_key", "sqs_secret", "sqs_url", "suspended", "suspended_explanation", "user_search_disallowed_roles", "video_provider", "webhook_events", "webhook_url"]

    @field_validator('search_backend')
    def search_backend_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['elasticsearch', 'postgres', 'disabled']):
            raise ValueError("must be one of enum values ('elasticsearch', 'postgres', 'disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of App from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of agora_options
        if self.agora_options:
            _dict['agora_options'] = self.agora_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in call_types (dict)
        _field_dict = {}
        if self.call_types:
            for _key_call_types in self.call_types:
                if self.call_types[_key_call_types]:
                    _field_dict[_key_call_types] = self.call_types[_key_call_types].to_dict()
            _dict['call_types'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in channel_configs (dict)
        _field_dict = {}
        if self.channel_configs:
            for _key_channel_configs in self.channel_configs:
                if self.channel_configs[_key_channel_configs]:
                    _field_dict[_key_channel_configs] = self.channel_configs[_key_channel_configs].to_dict()
            _dict['channel_configs'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of file_upload_config
        if self.file_upload_config:
            _dict['file_upload_config'] = self.file_upload_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hms_options
        if self.hms_options:
            _dict['hms_options'] = self.hms_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_upload_config
        if self.image_upload_config:
            _dict['image_upload_config'] = self.image_upload_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in policies (dict of array)
        _field_dict_of_array = {}
        if self.policies:
            for _key_policies in self.policies:
                if self.policies[_key_policies] is not None:
                    _field_dict_of_array[_key_policies] = [
                        _item.to_dict() for _item in self.policies[_key_policies]
                    ]
            _dict['policies'] = _field_dict_of_array
        # override the default output from pydantic by calling `to_dict()` of push_notifications
        if self.push_notifications:
            _dict['push_notifications'] = self.push_notifications.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of App from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agora_options": Config.from_dict(obj["agora_options"]) if obj.get("agora_options") is not None else None,
            "async_url_enrich_enabled": obj.get("async_url_enrich_enabled"),
            "auto_translation_enabled": obj.get("auto_translation_enabled"),
            "before_message_send_hook_url": obj.get("before_message_send_hook_url"),
            "call_types": dict(
                (_k, CallType.from_dict(_v))
                for _k, _v in obj["call_types"].items()
            )
            if obj.get("call_types") is not None
            else None,
            "campaign_enabled": obj.get("campaign_enabled"),
            "cdn_expiration_seconds": obj.get("cdn_expiration_seconds"),
            "channel_configs": dict(
                (_k, ChannelConfig.from_dict(_v))
                for _k, _v in obj["channel_configs"].items()
            )
            if obj.get("channel_configs") is not None
            else None,
            "custom_action_handler_url": obj.get("custom_action_handler_url"),
            "disable_auth_checks": obj.get("disable_auth_checks"),
            "disable_permissions_checks": obj.get("disable_permissions_checks"),
            "enforce_unique_usernames": obj.get("enforce_unique_usernames"),
            "file_upload_config": FileUploadConfig.from_dict(obj["file_upload_config"]) if obj.get("file_upload_config") is not None else None,
            "grants": obj.get("grants"),
            "hms_options": Config.from_dict(obj["hms_options"]) if obj.get("hms_options") is not None else None,
            "image_moderation_enabled": obj.get("image_moderation_enabled"),
            "image_moderation_labels": obj.get("image_moderation_labels"),
            "image_upload_config": FileUploadConfig.from_dict(obj["image_upload_config"]) if obj.get("image_upload_config") is not None else None,
            "multi_tenant_enabled": obj.get("multi_tenant_enabled"),
            "name": obj.get("name"),
            "organization": obj.get("organization"),
            "permission_version": obj.get("permission_version"),
            "policies": dict(
                (_k,
                        [Policy.from_dict(_item) for _item in _v]
                        if _v is not None
                        else None
                )
                for _k, _v in obj.get("policies", {}).items()
            ),
            "push_notifications": PushNotificationFields.from_dict(obj["push_notifications"]) if obj.get("push_notifications") is not None else None,
            "reminders_interval": obj.get("reminders_interval"),
            "revoke_tokens_issued_before": obj.get("revoke_tokens_issued_before"),
            "search_backend": obj.get("search_backend"),
            "sqs_key": obj.get("sqs_key"),
            "sqs_secret": obj.get("sqs_secret"),
            "sqs_url": obj.get("sqs_url"),
            "suspended": obj.get("suspended"),
            "suspended_explanation": obj.get("suspended_explanation"),
            "user_search_disallowed_roles": obj.get("user_search_disallowed_roles"),
            "video_provider": obj.get("video_provider"),
            "webhook_events": obj.get("webhook_events"),
            "webhook_url": obj.get("webhook_url")
        })
        return _obj



# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.message_request import MessageRequest
from typing import Optional, Set
from typing_extensions import Self

class SendMessageRequest(BaseModel):
    """
    Contains all information needed to send new message
    """ # noqa: E501
    force_moderation: Optional[StrictBool] = Field(default=None, description="Enable moderation on server-side requests")
    is_pending_message: Optional[StrictBool] = Field(default=None, description="Make the message a pending message. This message will not be viewable to others until it is committed.")
    keep_channel_hidden: Optional[StrictBool] = Field(default=None, description="Keeps the channel hidden for the sender")
    message: MessageRequest
    pending_message_metadata: Optional[Dict[str, StrictStr]] = None
    skip_enrich_url: Optional[StrictBool] = Field(default=None, description="Do not try to enrich the links within message")
    skip_push: Optional[StrictBool] = Field(default=None, description="Disables all push notifications for this message")
    __properties: ClassVar[List[str]] = ["force_moderation", "is_pending_message", "keep_channel_hidden", "message", "pending_message_metadata", "skip_enrich_url", "skip_push"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SendMessageRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of message
        if self.message:
            _dict['message'] = self.message.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SendMessageRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "force_moderation": obj.get("force_moderation"),
            "is_pending_message": obj.get("is_pending_message"),
            "keep_channel_hidden": obj.get("keep_channel_hidden"),
            "message": MessageRequest.from_dict(obj["message"]) if obj.get("message") is not None else None,
            "pending_message_metadata": obj.get("pending_message_metadata"),
            "skip_enrich_url": obj.get("skip_enrich_url"),
            "skip_push": obj.get("skip_push")
        })
        return _obj



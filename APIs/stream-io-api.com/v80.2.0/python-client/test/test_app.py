# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.app import App

class TestApp(unittest.TestCase):
    """App unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> App:
        """Test App
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `App`
        """
        model = App()
        if include_optional:
            return App(
                agora_options = openapi_client.models.config.Config(
                    app_certificate = '', 
                    app_id = '', 
                    default_role = 'attendee', 
                    role_map = {
                        'key' : ''
                        }, ),
                async_url_enrich_enabled = True,
                auto_translation_enabled = True,
                before_message_send_hook_url = '',
                call_types = {
                    'key' : openapi_client.models.call_type.CallType(
                        app_pk = 56, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        name = '', 
                        pk = 56, 
                        settings = openapi_client.models.call_settings.CallSettings(
                            audio = openapi_client.models.audio_settings.AudioSettings(
                                access_request_enabled = True, 
                                opus_dtx_enabled = True, 
                                redundant_coding_enabled = True, ), 
                            backstage = openapi_client.models.backstage_settings.BackstageSettings(
                                enabled = True, ), 
                            broadcasting = openapi_client.models.broadcast_settings.BroadcastSettings(
                                enabled = True, 
                                hls = openapi_client.models.hls_settings.HLSSettings(
                                    auto_on = True, 
                                    enabled = True, 
                                    quality_tracks = [
                                        ''
                                        ], ), ), 
                            geofencing = openapi_client.models.geofence_settings.GeofenceSettings(
                                names = [
                                    ''
                                    ], ), 
                            recording = openapi_client.models.record_settings.RecordSettings(
                                audio_only = True, 
                                mode = 'available', 
                                quality = 'audio-only', ), 
                            ring = openapi_client.models.ring_settings.RingSettings(
                                auto_cancel_timeout_ms = 56, 
                                auto_reject_timeout_ms = 56, ), 
                            screensharing = openapi_client.models.screensharing_settings.ScreensharingSettings(
                                access_request_enabled = True, 
                                enabled = True, ), 
                            transcription = openapi_client.models.transcription_settings.TranscriptionSettings(
                                closed_caption_mode = '', 
                                mode = 'available', ), 
                            video = openapi_client.models.video_settings.VideoSettings(
                                access_request_enabled = True, 
                                enabled = True, ), ), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    },
                campaign_enabled = True,
                cdn_expiration_seconds = 56,
                channel_configs = {
                    'key' : openapi_client.models.channel_config.ChannelConfig(
                        automod = 'disabled', 
                        automod_behavior = 'flag', 
                        automod_thresholds = openapi_client.models.auto_moderation_thresholds.Auto moderation thresholds(
                            explicit = openapi_client.models.label_thresholds.LabelThresholds(
                                block = 0, 
                                flag = 0, ), 
                            spam = openapi_client.models.label_thresholds.LabelThresholds(
                                block = 0, 
                                flag = 0, ), 
                            toxic = , ), 
                        blocklist = '', 
                        blocklist_behavior = 'flag', 
                        commands = [
                            ''
                            ], 
                        connect_events = True, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        custom_events = True, 
                        max_message_length = 56, 
                        message_retention = '', 
                        mutes = True, 
                        name = '', 
                        push_notifications = True, 
                        quotes = True, 
                        reactions = True, 
                        read_events = True, 
                        reminders = True, 
                        replies = True, 
                        search = True, 
                        typing_events = True, 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        uploads = True, 
                        url_enrichment = True, )
                    },
                custom_action_handler_url = '',
                disable_auth_checks = True,
                disable_permissions_checks = True,
                enforce_unique_usernames = '',
                file_upload_config = openapi_client.models.file_upload_config.FileUploadConfig(
                    allowed_file_extensions = [
                        ''
                        ], 
                    allowed_mime_types = [
                        ''
                        ], 
                    blocked_file_extensions = [
                        ''
                        ], 
                    blocked_mime_types = [
                        ''
                        ], ),
                grants = {
                    'key' : [
                        ''
                        ]
                    },
                hms_options = openapi_client.models.config.Config(
                    app_certificate = '', 
                    app_id = '', 
                    default_role = 'attendee', 
                    role_map = {
                        'key' : ''
                        }, ),
                image_moderation_enabled = True,
                image_moderation_labels = [
                    ''
                    ],
                image_upload_config = openapi_client.models.file_upload_config.FileUploadConfig(
                    allowed_file_extensions = [
                        ''
                        ], 
                    allowed_mime_types = [
                        ''
                        ], 
                    blocked_file_extensions = [
                        ''
                        ], 
                    blocked_mime_types = [
                        ''
                        ], ),
                multi_tenant_enabled = True,
                name = '',
                organization = '',
                permission_version = '',
                policies = {
                    'key' : [
                        openapi_client.models.policy.Policy(
                            action = 56, 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            name = '', 
                            owner = True, 
                            priority = 56, 
                            resources = [
                                ''
                                ], 
                            roles = [
                                ''
                                ], 
                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ]
                    },
                push_notifications = openapi_client.models.push_notification_fields.PushNotificationFields(
                    apn = openapi_client.models.apn_config_fields.APNConfigFields(
                        auth_key = '', 
                        auth_type = '', 
                        bundle_id = '', 
                        development = True, 
                        enabled = True, 
                        host = '', 
                        key_id = '', 
                        notification_template = '', 
                        p12_cert = '', 
                        team_id = '', ), 
                    firebase = openapi_client.models.firebase_config_fields.FirebaseConfigFields(
                        apn_template = '', 
                        credentials_json = '', 
                        data_template = '', 
                        enabled = True, 
                        notification_template = '', 
                        server_key = '', ), 
                    huawei = openapi_client.models.huawei_config_fields.HuaweiConfigFields(
                        enabled = True, 
                        id = '', 
                        secret = '', ), 
                    offline_only = True, 
                    providers = [
                        openapi_client.models.push_provider.PushProvider(
                            apn_auth_key = '', 
                            apn_auth_type = '', 
                            apn_development = True, 
                            apn_host = '', 
                            apn_key_id = '', 
                            apn_notification_template = '', 
                            apn_p12_cert = '', 
                            apn_team_id = '', 
                            apn_topic = '', 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            description = '', 
                            disabled_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            disabled_reason = '', 
                            firebase_apn_template = '', 
                            firebase_credentials = '', 
                            firebase_data_template = '', 
                            firebase_notification_template = '', 
                            firebase_server_key = '', 
                            huawei_app_id = '', 
                            huawei_app_secret = '', 
                            name = '0', 
                            type = 56, 
                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            xiaomi_app_secret = '', 
                            xiaomi_package_name = '', )
                        ], 
                    version = '', 
                    xiaomi = openapi_client.models.xiaomi_config_fields.XiaomiConfigFields(
                        enabled = True, 
                        package_name = '', 
                        secret = '', ), ),
                reminders_interval = 56,
                revoke_tokens_issued_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                search_backend = 'elasticsearch',
                sqs_key = '',
                sqs_secret = '',
                sqs_url = '',
                suspended = True,
                suspended_explanation = '',
                user_search_disallowed_roles = [
                    ''
                    ],
                video_provider = '',
                webhook_events = [
                    ''
                    ],
                webhook_url = ''
            )
        else:
            return App(
                async_url_enrich_enabled = True,
                call_types = {
                    'key' : openapi_client.models.call_type.CallType(
                        app_pk = 56, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        name = '', 
                        pk = 56, 
                        settings = openapi_client.models.call_settings.CallSettings(
                            audio = openapi_client.models.audio_settings.AudioSettings(
                                access_request_enabled = True, 
                                opus_dtx_enabled = True, 
                                redundant_coding_enabled = True, ), 
                            backstage = openapi_client.models.backstage_settings.BackstageSettings(
                                enabled = True, ), 
                            broadcasting = openapi_client.models.broadcast_settings.BroadcastSettings(
                                enabled = True, 
                                hls = openapi_client.models.hls_settings.HLSSettings(
                                    auto_on = True, 
                                    enabled = True, 
                                    quality_tracks = [
                                        ''
                                        ], ), ), 
                            geofencing = openapi_client.models.geofence_settings.GeofenceSettings(
                                names = [
                                    ''
                                    ], ), 
                            recording = openapi_client.models.record_settings.RecordSettings(
                                audio_only = True, 
                                mode = 'available', 
                                quality = 'audio-only', ), 
                            ring = openapi_client.models.ring_settings.RingSettings(
                                auto_cancel_timeout_ms = 56, 
                                auto_reject_timeout_ms = 56, ), 
                            screensharing = openapi_client.models.screensharing_settings.ScreensharingSettings(
                                access_request_enabled = True, 
                                enabled = True, ), 
                            transcription = openapi_client.models.transcription_settings.TranscriptionSettings(
                                closed_caption_mode = '', 
                                mode = 'available', ), 
                            video = openapi_client.models.video_settings.VideoSettings(
                                access_request_enabled = True, 
                                enabled = True, ), ), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    },
                campaign_enabled = True,
                cdn_expiration_seconds = 56,
                channel_configs = {
                    'key' : openapi_client.models.channel_config.ChannelConfig(
                        automod = 'disabled', 
                        automod_behavior = 'flag', 
                        automod_thresholds = openapi_client.models.auto_moderation_thresholds.Auto moderation thresholds(
                            explicit = openapi_client.models.label_thresholds.LabelThresholds(
                                block = 0, 
                                flag = 0, ), 
                            spam = openapi_client.models.label_thresholds.LabelThresholds(
                                block = 0, 
                                flag = 0, ), 
                            toxic = , ), 
                        blocklist = '', 
                        blocklist_behavior = 'flag', 
                        commands = [
                            ''
                            ], 
                        connect_events = True, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        custom_events = True, 
                        max_message_length = 56, 
                        message_retention = '', 
                        mutes = True, 
                        name = '', 
                        push_notifications = True, 
                        quotes = True, 
                        reactions = True, 
                        read_events = True, 
                        reminders = True, 
                        replies = True, 
                        search = True, 
                        typing_events = True, 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        uploads = True, 
                        url_enrichment = True, )
                    },
                custom_action_handler_url = '',
                disable_auth_checks = True,
                disable_permissions_checks = True,
                enforce_unique_usernames = '',
                file_upload_config = openapi_client.models.file_upload_config.FileUploadConfig(
                    allowed_file_extensions = [
                        ''
                        ], 
                    allowed_mime_types = [
                        ''
                        ], 
                    blocked_file_extensions = [
                        ''
                        ], 
                    blocked_mime_types = [
                        ''
                        ], ),
                grants = {
                    'key' : [
                        ''
                        ]
                    },
                image_moderation_enabled = True,
                image_upload_config = openapi_client.models.file_upload_config.FileUploadConfig(
                    allowed_file_extensions = [
                        ''
                        ], 
                    allowed_mime_types = [
                        ''
                        ], 
                    blocked_file_extensions = [
                        ''
                        ], 
                    blocked_mime_types = [
                        ''
                        ], ),
                multi_tenant_enabled = True,
                name = '',
                organization = '',
                permission_version = '',
                policies = {
                    'key' : [
                        openapi_client.models.policy.Policy(
                            action = 56, 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            name = '', 
                            owner = True, 
                            priority = 56, 
                            resources = [
                                ''
                                ], 
                            roles = [
                                ''
                                ], 
                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ]
                    },
                push_notifications = openapi_client.models.push_notification_fields.PushNotificationFields(
                    apn = openapi_client.models.apn_config_fields.APNConfigFields(
                        auth_key = '', 
                        auth_type = '', 
                        bundle_id = '', 
                        development = True, 
                        enabled = True, 
                        host = '', 
                        key_id = '', 
                        notification_template = '', 
                        p12_cert = '', 
                        team_id = '', ), 
                    firebase = openapi_client.models.firebase_config_fields.FirebaseConfigFields(
                        apn_template = '', 
                        credentials_json = '', 
                        data_template = '', 
                        enabled = True, 
                        notification_template = '', 
                        server_key = '', ), 
                    huawei = openapi_client.models.huawei_config_fields.HuaweiConfigFields(
                        enabled = True, 
                        id = '', 
                        secret = '', ), 
                    offline_only = True, 
                    providers = [
                        openapi_client.models.push_provider.PushProvider(
                            apn_auth_key = '', 
                            apn_auth_type = '', 
                            apn_development = True, 
                            apn_host = '', 
                            apn_key_id = '', 
                            apn_notification_template = '', 
                            apn_p12_cert = '', 
                            apn_team_id = '', 
                            apn_topic = '', 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            description = '', 
                            disabled_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            disabled_reason = '', 
                            firebase_apn_template = '', 
                            firebase_credentials = '', 
                            firebase_data_template = '', 
                            firebase_notification_template = '', 
                            firebase_server_key = '', 
                            huawei_app_id = '', 
                            huawei_app_secret = '', 
                            name = '0', 
                            type = 56, 
                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            xiaomi_app_secret = '', 
                            xiaomi_package_name = '', )
                        ], 
                    version = '', 
                    xiaomi = openapi_client.models.xiaomi_config_fields.XiaomiConfigFields(
                        enabled = True, 
                        package_name = '', 
                        secret = '', ), ),
                reminders_interval = 56,
                search_backend = 'elasticsearch',
                sqs_key = '',
                sqs_secret = '',
                sqs_url = '',
                suspended = True,
                suspended_explanation = '',
                user_search_disallowed_roles = [
                    ''
                    ],
                video_provider = '',
                webhook_events = [
                    ''
                    ],
                webhook_url = '',
        )
        """

    def testApp(self):
        """Test App"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

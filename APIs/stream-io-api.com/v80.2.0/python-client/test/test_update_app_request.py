# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.update_app_request import UpdateAppRequest

class TestUpdateAppRequest(unittest.TestCase):
    """UpdateAppRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UpdateAppRequest:
        """Test UpdateAppRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UpdateAppRequest`
        """
        model = UpdateAppRequest()
        if include_optional:
            return UpdateAppRequest(
                agora_options = openapi_client.models.config_request.ConfigRequest(
                    app_certificate = '', 
                    app_id = '', 
                    default_role = 'attendee', 
                    role_map = {
                        'key' : ''
                        }, ),
                apn_config = openapi_client.models.apn_config_request.APNConfigRequest(
                    disabled = True, 
                    auth_key = '', 
                    auth_type = 'certificate', 
                    bundle_id = '', 
                    development = True, 
                    host = '', 
                    key_id = '', 
                    notification_template = '', 
                    p12_cert = '', 
                    team_id = '', ),
                async_moderation_config = openapi_client.models.async_moderation_configuration_request.AsyncModerationConfigurationRequest(
                    callback = openapi_client.models.async_moderation_callback_config_request.AsyncModerationCallbackConfigRequest(
                        mode = 'CALLBACK_MODE_NONE', 
                        server_url = '', ), 
                    timeout_ms = 56, ),
                async_url_enrich_enabled = True,
                auto_translation_enabled = True,
                before_message_send_hook_url = '',
                cdn_expiration_seconds = 14400,
                channel_hide_members_only = True,
                custom_action_handler_url = '',
                disable_auth_checks = True,
                disable_permissions_checks = True,
                enforce_unique_usernames = 'false',
                file_upload_config = openapi_client.models.file_upload_config_request.FileUploadConfigRequest(
                    allowed_file_extensions = [
                        ''
                        ], 
                    allowed_mime_types = [
                        ''
                        ], 
                    blocked_file_extensions = [
                        ''
                        ], 
                    blocked_mime_types = [
                        ''
                        ], ),
                firebase_config = openapi_client.models.firebase_config_request.FirebaseConfigRequest(
                    disabled = True, 
                    apn_template = '', 
                    credentials_json = '', 
                    data_template = '', 
                    notification_template = '', 
                    server_key = '', ),
                grants = {
                    'key' : [
                        ''
                        ]
                    },
                hms_options = openapi_client.models.config_request.ConfigRequest(
                    app_certificate = '', 
                    app_id = '', 
                    default_role = 'attendee', 
                    role_map = {
                        'key' : ''
                        }, ),
                huawei_config = openapi_client.models.huawei_config_request.HuaweiConfigRequest(
                    disabled = True, 
                    id = '', 
                    secret = '', ),
                image_moderation_block_labels = [
                    ''
                    ],
                image_moderation_enabled = True,
                image_moderation_labels = [
                    ''
                    ],
                image_upload_config = openapi_client.models.file_upload_config_request.FileUploadConfigRequest(
                    allowed_file_extensions = [
                        ''
                        ], 
                    allowed_mime_types = [
                        ''
                        ], 
                    blocked_file_extensions = [
                        ''
                        ], 
                    blocked_mime_types = [
                        ''
                        ], ),
                migrate_permissions_to_v2 = True,
                multi_tenant_enabled = True,
                permission_version = 'v1',
                push_config = openapi_client.models.push_config_request.PushConfigRequest(
                    offline_only = True, 
                    version = 'v1', ),
                reminders_interval = 60,
                revoke_tokens_issued_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                sqs_key = '',
                sqs_secret = '',
                sqs_url = '',
                user_search_disallowed_roles = [
                    ''
                    ],
                video_provider = 'agora',
                webhook_events = [
                    ''
                    ],
                webhook_url = '',
                xiaomi_config = openapi_client.models.xiaomi_config_request.XiaomiConfigRequest(
                    disabled = True, 
                    package_name = '', 
                    secret = '', )
            )
        else:
            return UpdateAppRequest(
        )
        """

    def testUpdateAppRequest(self):
        """Test UpdateAppRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

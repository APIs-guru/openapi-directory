# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.search_result_message import SearchResultMessage

class TestSearchResultMessage(unittest.TestCase):
    """SearchResultMessage unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SearchResultMessage:
        """Test SearchResultMessage
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SearchResultMessage`
        """
        model = SearchResultMessage()
        if include_optional:
            return SearchResultMessage(
                attachments = [
                    { }
                    ],
                before_message_send_failed = True,
                channel = { },
                cid = '',
                command = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                html = '',
                i18n = {
                    'key' : ''
                    },
                id = '',
                image_labels = {
                    'key' : [
                        ''
                        ]
                    },
                latest_reactions = [
                    { }
                    ],
                mentioned_users = [
                    { }
                    ],
                mml = '',
                own_reactions = [
                    { }
                    ],
                parent_id = '',
                pin_expires = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                pinned = True,
                pinned_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                pinned_by = { },
                quoted_message = { },
                quoted_message_id = '',
                reaction_counts = {
                    'key' : 56
                    },
                reaction_scores = {
                    'key' : 56
                    },
                reply_count = 56,
                shadowed = True,
                show_in_channel = True,
                silent = True,
                text = '',
                thread_participants = [
                    { }
                    ],
                type = '',
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                user = { }
            )
        else:
            return SearchResultMessage(
                attachments = [
                    { }
                    ],
                cid = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                html = '',
                id = '',
                latest_reactions = [
                    { }
                    ],
                mentioned_users = [
                    { }
                    ],
                own_reactions = [
                    { }
                    ],
                pinned = True,
                reaction_counts = {
                    'key' : 56
                    },
                reaction_scores = {
                    'key' : 56
                    },
                reply_count = 56,
                shadowed = True,
                silent = True,
                text = '',
                type = '',
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
        )
        """

    def testSearchResultMessage(self):
        """Test SearchResultMessage"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

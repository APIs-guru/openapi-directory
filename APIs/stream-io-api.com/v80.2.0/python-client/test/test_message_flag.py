# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.message_flag import MessageFlag

class TestMessageFlag(unittest.TestCase):
    """MessageFlag unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MessageFlag:
        """Test MessageFlag
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MessageFlag`
        """
        model = MessageFlag()
        if include_optional:
            return MessageFlag(
                approved_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_by_automod = True,
                message = { },
                moderation_result = openapi_client.models.message_moderation_result.MessageModerationResult(
                    action = '', 
                    ai_moderation_response = openapi_client.models.moderation_response.ModerationResponse(
                        action = '', 
                        automod_response = null, 
                        explicit = 1.337, 
                        spam = 1.337, 
                        toxic = 1.337, ), 
                    blocked_word = '', 
                    blocklist_name = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    message_id = '', 
                    moderated_by = '', 
                    moderation_thresholds = openapi_client.models.auto_moderation_thresholds.Auto moderation thresholds(
                        explicit = openapi_client.models.label_thresholds.LabelThresholds(
                            block = 0, 
                            flag = 0, ), 
                        spam = openapi_client.models.label_thresholds.LabelThresholds(
                            block = 0, 
                            flag = 0, ), 
                        toxic = , ), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    user_bad_karma = True, 
                    user_karma = 1.337, ),
                rejected_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                reviewed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                reviewed_by = { },
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                user = { }
            )
        else:
            return MessageFlag(
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_by_automod = True,
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
        )
        """

    def testMessageFlag(self):
        """Test MessageFlag"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

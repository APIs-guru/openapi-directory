# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.chat_event import ChatEvent

class TestChatEvent(unittest.TestCase):
    """ChatEvent unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ChatEvent:
        """Test ChatEvent
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ChatEvent`
        """
        model = ChatEvent()
        if include_optional:
            return ChatEvent(
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                type = 'user.watching.stop',
                channel = { },
                channel_id = '',
                channel_type = '',
                cid = '',
                team = '',
                clear_history = True,
                user = { },
                message = { },
                me = { },
                member = openapi_client.models.channel_member.Channel member(
                    ban_expires = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    banned = True, 
                    channel_role = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    invite_accepted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    invite_rejected_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    invited = True, 
                    is_moderator = True, 
                    role = 'member', 
                    shadow_banned = True, 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    user = { }, 
                    user_id = '', ),
                hard_delete = True,
                thread_participants = [
                    { }
                    ],
                flag = openapi_client.models.flag.Flag(
                    approved_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    created_by_automod = True, 
                    details = { }, 
                    rejected_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    reviewed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    target_message = { }, 
                    target_message_id = '', 
                    target_user = { }, 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    user = { }, ),
                watcher_count = 56,
                last_read_message_id = '',
                total_unread_count = 56,
                unread_channels = 56,
                unread_count = 56,
                first_unread_message_id = '',
                last_read_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                unread_messages = 56,
                reaction = { },
                parent_id = '',
                created_by = { },
                expiration = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                reason = '',
                shadow = True,
                delete_conversation_channels = True,
                mark_messages_deleted = True,
                target_user = '',
                target_users = [
                    ''
                    ],
                channels = {
                    'key' : openapi_client.models.channel_messages.ChannelMessages(
                        channel = { }, 
                        messages = [
                            { }
                            ], )
                    }
            )
        else:
            return ChatEvent(
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                type = 'user.watching.stop',
                channel_id = '',
                channel_type = '',
                cid = '',
                clear_history = True,
                message = { },
                me = { },
                hard_delete = True,
                watcher_count = 56,
                total_unread_count = 56,
                unread_channels = 56,
                unread_count = 56,
                first_unread_message_id = '',
                last_read_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                unread_messages = 56,
                reaction = { },
                created_by = { },
                shadow = True,
                delete_conversation_channels = True,
                mark_messages_deleted = True,
                channels = {
                    'key' : openapi_client.models.channel_messages.ChannelMessages(
                        channel = { }, 
                        messages = [
                            { }
                            ], )
                    },
        )
        """

    def testChatEvent(self):
        """Test ChatEvent"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

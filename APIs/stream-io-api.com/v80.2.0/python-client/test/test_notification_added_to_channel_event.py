# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.notification_added_to_channel_event import NotificationAddedToChannelEvent

class TestNotificationAddedToChannelEvent(unittest.TestCase):
    """NotificationAddedToChannelEvent unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NotificationAddedToChannelEvent:
        """Test NotificationAddedToChannelEvent
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NotificationAddedToChannelEvent`
        """
        model = NotificationAddedToChannelEvent()
        if include_optional:
            return NotificationAddedToChannelEvent(
                channel = { },
                channel_id = '',
                channel_type = '',
                cid = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                member = openapi_client.models.channel_member.Channel member(
                    ban_expires = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    banned = True, 
                    channel_role = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    invite_accepted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    invite_rejected_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    invited = True, 
                    is_moderator = True, 
                    role = 'member', 
                    shadow_banned = True, 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    user = { }, 
                    user_id = '', ),
                type = 'notification.added_to_channel'
            )
        else:
            return NotificationAddedToChannelEvent(
                channel_id = '',
                channel_type = '',
                cid = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                type = 'notification.added_to_channel',
        )
        """

    def testNotificationAddedToChannelEvent(self):
        """Test NotificationAddedToChannelEvent"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

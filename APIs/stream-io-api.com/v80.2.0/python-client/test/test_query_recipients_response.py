# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.query_recipients_response import QueryRecipientsResponse

class TestQueryRecipientsResponse(unittest.TestCase):
    """QueryRecipientsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> QueryRecipientsResponse:
        """Test QueryRecipientsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `QueryRecipientsResponse`
        """
        model = QueryRecipientsResponse()
        if include_optional:
            return QueryRecipientsResponse(
                campaigns = {
                    'key' : openapi_client.models.campaign.Campaign(
                        attachments = [
                            { }
                            ], 
                        channel_type = '', 
                        completed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        defaults = {
                            'key' : ''
                            }, 
                        description = '', 
                        details = '', 
                        errored_messages = 56, 
                        failed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        id = '', 
                        name = '', 
                        resumed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        scheduled_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        scheduled_for = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        segment_id = '', 
                        sender_id = '', 
                        sent_messages = 56, 
                        status = '', 
                        stopped_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        task_id = '', 
                        text = '', 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    },
                channels = {
                    'key' : { }
                    },
                duration = '',
                recipients = [
                    openapi_client.models.recipient.Recipient(
                        campaign_id = '', 
                        channel_cid = '', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        details = '', 
                        message_id = '', 
                        receiver_id = '', 
                        status = '', 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                segments = {
                    'key' : openapi_client.models.segment.Segment(
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        description = '', 
                        filter = {
                            'key' : null
                            }, 
                        id = '', 
                        in_use = True, 
                        name = '', 
                        size = 56, 
                        status = '', 
                        type = 'user', 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    },
                users = {
                    'key' : { }
                    }
            )
        else:
            return QueryRecipientsResponse(
                campaigns = {
                    'key' : openapi_client.models.campaign.Campaign(
                        attachments = [
                            { }
                            ], 
                        channel_type = '', 
                        completed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        defaults = {
                            'key' : ''
                            }, 
                        description = '', 
                        details = '', 
                        errored_messages = 56, 
                        failed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        id = '', 
                        name = '', 
                        resumed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        scheduled_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        scheduled_for = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        segment_id = '', 
                        sender_id = '', 
                        sent_messages = 56, 
                        status = '', 
                        stopped_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        task_id = '', 
                        text = '', 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    },
                channels = {
                    'key' : { }
                    },
                duration = '',
                recipients = [
                    openapi_client.models.recipient.Recipient(
                        campaign_id = '', 
                        channel_cid = '', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        details = '', 
                        message_id = '', 
                        receiver_id = '', 
                        status = '', 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                segments = {
                    'key' : openapi_client.models.segment.Segment(
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        description = '', 
                        filter = {
                            'key' : null
                            }, 
                        id = '', 
                        in_use = True, 
                        name = '', 
                        size = 56, 
                        status = '', 
                        type = 'user', 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    },
                users = {
                    'key' : { }
                    },
        )
        """

    def testQueryRecipientsResponse(self):
        """Test QueryRecipientsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

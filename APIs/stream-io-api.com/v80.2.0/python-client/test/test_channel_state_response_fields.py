# coding: utf-8

"""
    Stream Chat API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v80.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.channel_state_response_fields import ChannelStateResponseFields

class TestChannelStateResponseFields(unittest.TestCase):
    """ChannelStateResponseFields unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ChannelStateResponseFields:
        """Test ChannelStateResponseFields
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ChannelStateResponseFields`
        """
        model = ChannelStateResponseFields()
        if include_optional:
            return ChannelStateResponseFields(
                channel = { },
                hidden = True,
                hide_messages_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                members = [
                    openapi_client.models.channel_member.Channel member(
                        ban_expires = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        banned = True, 
                        channel_role = '', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        invite_accepted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        invite_rejected_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        invited = True, 
                        is_moderator = True, 
                        role = 'member', 
                        shadow_banned = True, 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        user = { }, 
                        user_id = '', )
                    ],
                membership = openapi_client.models.channel_member.Channel member(
                    ban_expires = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    banned = True, 
                    channel_role = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    invite_accepted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    invite_rejected_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    invited = True, 
                    is_moderator = True, 
                    role = 'member', 
                    shadow_banned = True, 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    user = { }, 
                    user_id = '', ),
                messages = [
                    { }
                    ],
                pending_messages = [
                    openapi_client.models.pending_message.PendingMessage(
                        channel = { }, 
                        message = { }, 
                        metadata = {
                            'key' : ''
                            }, 
                        user = { }, )
                    ],
                pinned_messages = [
                    { }
                    ],
                read = [
                    openapi_client.models.read.Read(
                        last_read = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_read_message_id = '', 
                        unread_messages = 56, 
                        user = { }, )
                    ],
                watcher_count = 56,
                watchers = [
                    { }
                    ]
            )
        else:
            return ChannelStateResponseFields(
                members = [
                    openapi_client.models.channel_member.Channel member(
                        ban_expires = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        banned = True, 
                        channel_role = '', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        invite_accepted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        invite_rejected_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        invited = True, 
                        is_moderator = True, 
                        role = 'member', 
                        shadow_banned = True, 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        user = { }, 
                        user_id = '', )
                    ],
                messages = [
                    { }
                    ],
                pinned_messages = [
                    { }
                    ],
        )
        """

    def testChannelStateResponseFields(self):
        """Test ChannelStateResponseFields"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

openapi: 3.0.0
servers:
  - url: https://unify.apideck.com
info:
  contact:
    email: hello@apideck.com
    url: https://developers.apideck.com
  description: |+
    Welcome to the HRIS API.

    You can use this API to access all HRIS API endpoints.

    ## Base URL

    The base URL for all API requests is `https://unify.apideck.com`

    We also provide a [Mock API](https://developers.apideck.com/mock-api) that can be used for testing purposes: `https://mock-api.apideck.com`

    ## GraphQL

    Use the [GraphQL playground](https://developers.apideck.com/graphql/playground) to test out the GraphQL API.

    ## Headers

    Custom headers that are expected as part of the request. Note that [RFC7230](https://tools.ietf.org/html/rfc7230) states header names are case insensitive.

    | Name                  | Type    | Required | Description                                                                                                                                                    |
    | --------------------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- |
    | x-apideck-consumer-id | String  | Yes      | The id of the customer stored inside Apideck Vault. This can be a user id, account id, device id or whatever entity that can have integration within your app. |
    | x-apideck-service-id  | String  | No       | Describe the service you want to call (e.g., pipedrive). Only needed when a customer has activated multiple integrations for the same Unified API.             |
    | x-apideck-raw         | Boolean | No       | Include raw response. Mostly used for debugging purposes.                                                                                                      |
    | x-apideck-app-id      | String  | Yes      | The application id of your Unify application. Available at https://app.apideck.com/unify/api-keys.                                                             |
    | Authorization         | String  | Yes      | Bearer API KEY                                                                                                                                                 |

    ## Authorization

    You can interact with the API through the authorization methods below.

    <!-- ReDoc-Inject: <security-definitions> -->

    ## Pagination

    All API resources have support for bulk retrieval via list APIs.  Apideck uses cursor-based pagination via the optional `cursor` and `limit` parameters.

    To fetch the first page of results, call the list API without a `cursor` parameter. Afterwards you can fetch subsequent pages by providing a cursor parameter. You will find the next cursor in the response body in `meta.cursors.next`. If `meta.cursors.next` is `null` you're at the end of the list.

    In the REST API you can also use the `links` from the response for added convenience. Simply call the URL in `links.next` to get the next page of results.

    ### Query Parameters

    | Name   | Type   | Required | Description                                                                                                        |
    | ------ | ------ | -------- | ------------------------------------------------------------------------------------------------------------------ |
    | cursor | String | No       | Cursor to start from. You can find cursors for next & previous pages in the meta.cursors property of the response. |
    | limit  | Number | No       | Number of results to return. Minimum 1, Maximum 200, Default 20                                                    |

    ### Response Body

    | Name                  | Type   | Description                                                        |
    | --------------------- | ------ | ------------------------------------------------------------------ |
    | meta.cursors.previous | String | Cursor to navigate to the previous page of results through the API |
    | meta.cursors.current  | String | Cursor to navigate to the current page of results through the API  |
    | meta.cursors.next     | String | Cursor to navigate to the next page of results through the API     |
    | meta.items_on_page    | Number | Number of items returned in the data property of the response      |
    | links.previous        | String | Link to navigate to the previous page of results through the API   |
    | links.current         | String | Link to navigate to the current page of results through the API    |
    | links.next            | String | Link to navigate to the next page of results through the API       |

    ⚠️ `meta.cursors.previous`/`links.previous` is not available for all connectors.

    ## SDKs and API Clients

    We currently offer a [Node.js](https://developers.apideck.com/sdks/node), [PHP](https://developers.apideck.com/sdks/php) and [.NET](https://developers.apideck.com/sdks/dot-net) SDK.
    Need another SDK? [Request the SDK of your choice](https://integrations.apideck.com/request).

    ## Debugging

    Because of the nature of the abstraction we do in Apideck Unify we still provide the option to the receive raw requests and responses being handled underlying. By including the raw flag `?raw=true` in your requests you can still receive the full request. Please note that this increases the response size and can introduce extra latency.

    ## Errors

    The API returns standard HTTP response codes to indicate success or failure of the API requests. For errors, we also return a customized error message inside the JSON response. You can see the returned HTTP status codes below.

    | Code | Title                | Description                                                                                                                                                                                              |
    | ---- | -------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
    | 200  | OK                   | The request message has been successfully processed, and it has produced a response. The response message varies, depending on the request method and the requested data.                                |
    | 201  | Created              | The request has been fulfilled and has resulted in one or more new resources being created.                                                                                                              |
    | 204  | No Content           | The server has successfully fulfilled the request and that there is no additional content to send in the response payload body.                                                                          |
    | 400  | Bad Request          | The receiving server cannot understand the request because of malformed syntax. Do not repeat the request without first modifying it; check the request for errors, fix them and then retry the request. |
    | 401  | Unauthorized         | The request has not been applied because it lacks valid authentication credentials for the target resource.                                                                                              |
    | 402  | Payment Required     | Subscription data is incomplete or out of date. You'll need to provide payment details to continue.                                                                                                      |
    | 403  | Forbidden            | You do not have the appropriate user rights to access the request. Do not repeat the request.                                                                                                            |
    | 404  | Not Found            | The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.                                                                           |
    | 409  | Conflict             | The request could not be completed due to a conflict with the current state of the target resource.                                                                                                      |
    | 422  | Unprocessable Entity | The server understands the content type of the request entity, and the syntax of the request entity is correct but was unable to process the contained instructions.                                     |
    | 429  | Too Many Requests    | You sent too many requests in a given amount of time ("rate limit"). Try again later                                                                                                                     |
    | 5xx  | Server Errors        | Something went wrong with the Unify API. These errors are logged on our side. You can contact our team to resolve the issue.                                                                             |

    ### Handling errors

    The Unify API and SDKs can produce errors for many reasons, such as a failed requests due to misconfigured integrations, invalid parameters, authentication errors, and network unavailability.

    ### Error Types

    #### RequestValidationError

    Request is not valid for the current endpoint. The response body will include details on the validation error. Check the spelling and types of your attributes, and ensure you are not passing data that is outside of the specification.

    #### UnsupportedFiltersError

    Filters in the request are valid, but not supported by the connector. Remove the unsupported filter(s) to get a successful response.

    #### UnsupportedSortFieldError

    Sort field (`sort[by]`) in the request is valid, but not supported by the connector. Replace or remove the sort field to get a successful response.

    #### InvalidCursorError

    Pagination cursor in the request is not valid for the current connector. Make sure to use a cursor returned from the API, for the same connector.

    #### ConnectorExecutionError

    A Unified API request made via one of our downstream connectors returned an unexpected error. The `status_code` returned is proxied through to error response along with their original response via the error detail.

    #### UnauthorizedError

    We were unable to authorize the request as made. This can happen for a number of reasons, from missing header params to passing an incorrect authorization token. Verify your Api Key is being set correctly in the authorization header. ie: `Authorization: 'Bearer sk_live_***'`

    #### ConnectorCredentialsError

    A request using a given connector has not been authorized. Ensure the connector you are trying to use has been configured correctly and been authorized for use.

    #### ConnectorDisabledError

    A request has been made to a connector that has since been disabled. This may be temporary - You can contact our team to resolve the issue.

    #### ConnectorRateLimitError

    You sent too many request to a connector. These rate limits vary from connector to connector. You will need to try again later.

    #### RequestLimitError

    You have reached the number of requests included in your Free Tier Subscription. You will no be able to make further requests until this limit resets at the end of the month, or talk to us about upgrading your subscription to continue immediately.

    #### EntityNotFoundError

    You've made a request for a resource or route that does not exist. Verify your path parameters or any identifiers used to fetch this resource.

    #### OAuthCredentialsNotFoundError

    When adding a connector integration that implements OAuth, both a `client_id` and `client_secret` must be provided before any authorizations can be performed. Verify the integration has been configured properly before continuing.

    #### IntegrationNotFoundError

    The requested connector integration could not be found associated to your `application_id`. Verify your `application_id` is correct, and that this connector has been added and configured for your application.

    #### ConnectionNotFoundError

    A valid connection could not be found associated to your `application_id`. Something _may_ have interrupted the authorization flow. You may need to start the connector authorization process again.

    #### ConnectionSettingsError

    The connector has required settings that were not supplied. Verify `connection.settings` contains all required settings for the connector to be callable.

    #### ConnectorNotFoundError

    A request was made for an unknown connector. Verify your `service_id` is spelled correctly, and that this connector is enabled for your provided `unified_api`.

    #### OAuthRedirectUriError

    A request was made either in a connector authorization flow, or attempting to revoke connector access without a valid `redirect_uri`. This is the url the user should be returned to on completion of process.

    #### OAuthInvalidStateError

    The state param is required and is used to ensure the outgoing authorization state has not been altered before the user is redirected back. It also contains required params needed to identify the connector being used. If this has been altered, the authorization will not succeed.

    #### OAuthCodeExchangeError

    When attempting to exchange the authorization code for an `access_token` during an OAuth flow, an error occurred. This may be temporary. You can reattempt authorization or contact our team to resolve the issue.

    #### OAuthConnectorError

    It seems something went wrong on the connector side. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.

    #### MappingError

    There was an error attempting to retrieve the mapping for a given attribute. We've been notified and are working to fix this issue.

    #### ConnectorMappingNotFoundError

    It seems the implementation for this connector is incomplete. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.

    #### ConnectorResponseMappingNotFoundError

    We were unable to retrieve the response mapping for this connector. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.

    #### ConnectorOperationMappingNotFoundError

    Connector mapping has not been implemented for the requested operation. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.

    #### ConnectorWorkflowMappingError

    The composite api calls required for this operation have not been mapped entirely. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.

    #### ConnectorOperationUnsupportedError

    You're attempting a call that is not supported by the connector. It's likely this operation is supported by another connector, but we're unable to implement for this one.

    #### PaginationNotSupportedError

    Pagination is not yet supported for this connector, try removing limit and/or cursor from the query. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.

    ## API Design

    ### API Styles and data formats

    #### REST API

    The API is organized around [REST](https://restfulapi.net/), providing simple and predictable URIs to access and modify objects. Requests support standard HTTP methods like GET, PUT, POST, and DELETE and standard status codes. JSON is returned by all API responses, including errors. In all API requests, you must set the content-type HTTP header to application/json. All API requests must be made over HTTPS. Calls made over HTTP will fail.

    ##### Available HTTP methods

    The Apideck API uses HTTP verbs to understand if you want to read (GET), delete (DELETE) or create (POST) an object. When your web application cannot do a POST or DELETE, we provide the ability to set the method through the query parameter \_method.

    ```
    POST /messages
    GET /messages
    GET /messages/{messageId}
    PATCH /messages/{messageId}
    DELETE /messages/{messageId}
    ```

    Response bodies are always UTF-8 encoded JSON objects, unless explicitly documented otherwise. For some endpoints and use cases we divert from REST to provide a better developer experience.

    ### Schema

    All API requests and response bodies adhere to a common JSON format representing individual items, collections of items, links to related items and additional meta data.

    ### Meta

    Meta data can be represented as a top level member named “meta”. Any information may be provided in the meta data. It’s most common use is to return the total number of records when requesting a collection of resources.

    ### Idempotence (upcoming)

    To prevent the creation of duplicate resources, every POST method (such as one that creates a consumer record) must specify a unique value for the X-Unique-Transaction-ID header name. Uniquely identifying each unique POST request ensures that the API processes a given request once and only once.

    Uniquely identifying new resource-creation POSTs is especially important when the outcome of a response is ambiguous because of a transient service interruption, such as a server-side timeout or network disruption. If a service interruption occurs, then the client application can safely retry the uniquely identified request without creating duplicate operations. (API endpoints that guarantee that every uniquely identified request is processed only once no matter how many times that uniquely identifiable request is made are described as idempotent.)

    ### Request IDs

    Each API request has an associated request identifier. You can find this value in the response headers, under Request-Id. You can also find request identifiers in the URLs of individual request logs in your Dashboard. If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution.

    ### Fixed field types

    #### Dates

    The dates returned by the API are all represented in UTC (ISO8601 format).

    This example `2019-11-14T00:55:31.820Z` is defined by the ISO 8601 standard. The T in the middle separates the year-month-day portion from the hour-minute-second portion. The Z on the end means UTC, that is, an offset-from-UTC of zero hours-minutes-seconds. The Z is pronounced "Zulu" per military/aviation tradition.

    The ISO 8601 standard is more modern. The formats are wisely designed to be easy to parse by machine as well as easy to read by humans across cultures.

    #### Prices and Currencies

    All prices returned by the API are represented as integer amounts in a currency’s smallest unit. For example, $5 USD would be returned as 500 (i.e, 500 cents).

    For zero-decimal currencies, amounts will still be provided as an integer but without the need to divide by 100. For example, an amount of ¥5 (JPY) would be returned as 5.

    All currency codes conform to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).

    ## Support

    If you have problems or need help with your case, you can always reach out to our Support.

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: HRIS API
  version: 8.70.2
  x-apideck-api: hris
  x-apideck-sdk-support: true
  x-apisguru-categories:
    - developer_tools
  x-logo:
    url: https://developers.apideck.com/icon.png
  x-origin:
    - format: openapi
      url: https://raw.githubusercontent.com/apideck-libraries/openapi-specs/master/hris.yml
      version: "3.0"
  x-providerName: apideck.com
  x-serviceName: hris
  x-tags:
    - partner
externalDocs:
  description: Apideck Developer Docs
  url: https://developers.apideck.com
security:
  - apiKey: []
tags:
  - description: ""
    name: Employees
    x-apideck-model:
      $ref: "#/components/schemas/Employee"
    x-apideck-resource-id: employees
  - description: ""
    name: Companies
    x-apideck-model:
      $ref: "#/components/schemas/HrisCompany"
    x-apideck-resource-id: companies
  - description: ""
    name: Departments
    x-apideck-model:
      $ref: "#/components/schemas/Department"
    x-apideck-resource-id: departments
  - description: ""
    name: Payrolls
    x-apideck-model:
      $ref: "#/components/schemas/Payroll"
    x-apideck-resource-id: payrolls
  - description: ""
    name: Employee Payrolls
    x-apideck-model:
      $ref: "#/components/schemas/EmployeePayroll"
    x-apideck-resource-id: employee-payrolls
  - description: ""
    name: Employee Schedules
    x-apideck-model:
      $ref: "#/components/schemas/EmployeeSchedules"
    x-apideck-resource-id: employee-schedules
  - description: ""
    name: Jobs
    x-apideck-model:
      $ref: "#/components/schemas/HrisJobs"
    x-apideck-resource-id: jobs
  - description: ""
    name: Time Off Requests
    x-apideck-model:
      $ref: "#/components/schemas/TimeOffRequest"
    x-apideck-resource-id: TimeOffRequests
paths:
  /hris/companies:
    get:
      description: List Companies
      operationId: companiesAll
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/cursor"
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          $ref: "#/components/responses/GetHrisCompaniesResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: List Companies
      tags:
        - Companies
      x-apideck-api: hris
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.hris.companiesAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: hrisCompanies
    post:
      description: Create Company
      operationId: companiesAdd
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HrisCompany"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/CreateHrisCompanyResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Create Company
      tags:
        - Companies
      x-apideck-api: hris
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              company: {
                legal_name: 'SpaceX',
                display_name: 'SpaceX',
                subdomain: 'company',
                status: 'active',
                company_number: '123456-AB',
                addresses: [
                  {
                    id: '123',
                    type: 'primary',
                    string: '25 Spring Street, Blackburn, VIC 3130',
                    name: 'HQ US',
                    line1: 'Main street',
                    line2: 'apt #',
                    line3: 'Suite #',
                    line4: 'delivery instructions',
                    street_number: '25',
                    city: 'San Francisco',
                    state: 'CA',
                    postal_code: '94104',
                    country: 'US',
                    latitude: '40.759211',
                    longitude: '-73.984638',
                    county: 'Santa Clara',
                    contact_name: 'Elon Musk',
                    salutation: 'Mr',
                    phone_number: '111-111-1111',
                    fax: '122-111-1111',
                    email: 'elon@musk.com',
                    website: 'https://elonmusk.com',
                    row_version: '1-12345'
                  }
                ],
                phone_numbers: [
                  {
                    id: '12345',
                    country_code: '1',
                    area_code: '323',
                    number: '111-111-1111',
                    extension: '105',
                    type: 'primary'
                  }
                ],
                emails: [
                  {
                    id: '123',
                    email: 'elon@musk.com',
                    type: 'primary'
                  }
                ],
                websites: [
                  {
                    id: '12345',
                    url: 'http://example.com',
                    type: 'primary'
                  }
                ],
                debtor_id: '12345'
              }
            }

            try {
              const { data } = await apideck.hris.companiesAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  "/hris/companies/{id}":
    delete:
      description: Delete Company
      operationId: companiesDelete
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/DeleteHrisCompanyResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Delete Company
      tags:
        - Companies
      x-apideck-api: hris
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.hris.companiesDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    get:
      description: Get Company
      operationId: companiesOne
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/GetHrisCompanyResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Get Company
      tags:
        - Companies
      x-apideck-api: hris
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.hris.companiesOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      description: Update Company
      operationId: companiesUpdate
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HrisCompany"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/UpdateHrisCompanyResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Update Company
      tags:
        - Companies
      x-apideck-api: hris
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              company: {
                legal_name: 'SpaceX',
                display_name: 'SpaceX',
                subdomain: 'company',
                status: 'active',
                company_number: '123456-AB',
                addresses: [
                  {
                    id: '123',
                    type: 'primary',
                    string: '25 Spring Street, Blackburn, VIC 3130',
                    name: 'HQ US',
                    line1: 'Main street',
                    line2: 'apt #',
                    line3: 'Suite #',
                    line4: 'delivery instructions',
                    street_number: '25',
                    city: 'San Francisco',
                    state: 'CA',
                    postal_code: '94104',
                    country: 'US',
                    latitude: '40.759211',
                    longitude: '-73.984638',
                    county: 'Santa Clara',
                    contact_name: 'Elon Musk',
                    salutation: 'Mr',
                    phone_number: '111-111-1111',
                    fax: '122-111-1111',
                    email: 'elon@musk.com',
                    website: 'https://elonmusk.com',
                    row_version: '1-12345'
                  }
                ],
                phone_numbers: [
                  {
                    id: '12345',
                    country_code: '1',
                    area_code: '323',
                    number: '111-111-1111',
                    extension: '105',
                    type: 'primary'
                  }
                ],
                emails: [
                  {
                    id: '123',
                    email: 'elon@musk.com',
                    type: 'primary'
                  }
                ],
                websites: [
                  {
                    id: '12345',
                    url: 'http://example.com',
                    type: 'primary'
                  }
                ],
                debtor_id: '12345'
              }
            }

            try {
              const { data } = await apideck.hris.companiesUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /hris/departments:
    get:
      description: List Departments
      operationId: departmentsAll
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/cursor"
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          $ref: "#/components/responses/GetDepartmentsResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: List Departments
      tags:
        - Departments
      x-apideck-api: hris
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.hris.departmentsAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: departments
    post:
      description: Create Department
      operationId: departmentsAdd
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Department"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/CreateDepartmentResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Create Department
      tags:
        - Departments
      x-apideck-api: hris
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              department: {
                name: 'R&D',
                code: '2',
                description: 'R&D'
              }
            }

            try {
              const { data } = await apideck.hris.departmentsAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  "/hris/departments/{id}":
    delete:
      description: Delete Department
      operationId: departmentsDelete
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/DeleteDepartmentResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Delete Department
      tags:
        - Departments
      x-apideck-api: hris
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.hris.departmentsDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    get:
      description: Get Department
      operationId: departmentsOne
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/GetDepartmentResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Get Department
      tags:
        - Departments
      x-apideck-api: hris
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.hris.departmentsOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      description: Update Department
      operationId: departmentsUpdate
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Department"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/UpdateDepartmentResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Update Department
      tags:
        - Departments
      x-apideck-api: hris
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              department: {
                name: 'R&D',
                code: '2',
                description: 'R&D'
              }
            }

            try {
              const { data } = await apideck.hris.departmentsUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /hris/employees:
    get:
      description: List Employees
      operationId: employeesAll
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/cursor"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/employeesFilter"
      responses:
        "200":
          $ref: "#/components/responses/GetEmployeesResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: List Employees
      tags:
        - Employees
      x-apideck-api: hris
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.hris.employeesAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: employees
    post:
      description: Create Employee
      operationId: employeesAdd
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Employee"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/CreateEmployeeResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Create Employee
      tags:
        - Employees
      x-apideck-api: hris
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              employee: {
                first_name: 'Elon',
                last_name: 'Musk',
                middle_name: 'D.',
                display_name: 'Technoking',
                preferred_name: 'Elon Musk',
                initials: 'EM',
                salutation: 'Mr',
                title: 'CEO',
                marital_status: 'married',
                partner: {
                  first_name: 'Elon',
                  last_name: 'Musk',
                  middle_name: 'D.',
                  gender: 'male',
                  initials: 'EM',
                  birthday: '2000-08-12',
                  deceased_on: '2000-08-12'
                },
                division: 'Europe',
                department: 'R&D',
                department_id: '12345',
                team: {
                  id: '1234',
                  name: 'Full Stack Engineers'
                },
                company_id: '23456',
                company_name: 'SpaceX',
                employment_start_date: '2021-10-26',
                employment_end_date: '2028-10-26',
                employee_number: '123456-AB',
                employment_status: 'active',
                employment_role: {
                  type: 'contractor',
                  sub_type: 'full_time'
                },
                manager: {
                  name: 'Elon Musk',
                  first_name: 'Elon',
                  last_name: 'Musk',
                  email: 'elon@musk.com'
                },
                direct_reports: [
                  'a0d636c6-43b3-4bde-8c70-85b707d992f4',
                  'a98lfd96-43b3-4bde-8c70-85b707d992e6'
                ],
                social_security_number: '123456789',
                birthday: '2000-08-12',
                deceased_on: '2000-08-12',
                country_of_birth: 'US',
                description: 'A description',
                gender: 'male',
                pronouns: 'she,her',
                preferred_language: 'EN',
                languages: ['EN'],
                nationalities: ['US'],
                photo_url: 'https://unavatar.io/elon-musk',
                timezone: 'Europe/London',
                source: 'lever',
                source_id: '12345',
                record_url: 'https://app.intercom.io/contacts/12345',
                jobs: [
                  {
                    title: 'CEO',
                    role: 'Sales',
                    start_date: '2020-08-12',
                    end_date: '2020-08-12',
                    compensation_rate: 72000,
                    currency: 'USD',
                    payment_unit: 'year',
                    hired_at: '2020-08-12',
                    is_primary: true,
                    location: {
                      id: '123',
                      type: 'primary',
                      string: '25 Spring Street, Blackburn, VIC 3130',
                      name: 'HQ US',
                      line1: 'Main street',
                      line2: 'apt #',
                      line3: 'Suite #',
                      line4: 'delivery instructions',
                      street_number: '25',
                      city: 'San Francisco',
                      state: 'CA',
                      postal_code: '94104',
                      country: 'US',
                      latitude: '40.759211',
                      longitude: '-73.984638',
                      county: 'Santa Clara',
                      contact_name: 'Elon Musk',
                      salutation: 'Mr',
                      phone_number: '111-111-1111',
                      fax: '122-111-1111',
                      email: 'elon@musk.com',
                      website: 'https://elonmusk.com',
                      row_version: '1-12345'
                    }
                  }
                ],
                compensations: [
                  {
                    id: '3404301363494309004',
                    job_id: '3490439050957906679',
                    rate: 50,
                    payment_unit: 'hour',
                    flsa_status: 'nonexempt',
                    effective_date: '2021-06-11'
                  }
                ],
                works_remote: true,
                addresses: [
                  {
                    id: '123',
                    type: 'primary',
                    string: '25 Spring Street, Blackburn, VIC 3130',
                    name: 'HQ US',
                    line1: 'Main street',
                    line2: 'apt #',
                    line3: 'Suite #',
                    line4: 'delivery instructions',
                    street_number: '25',
                    city: 'San Francisco',
                    state: 'CA',
                    postal_code: '94104',
                    country: 'US',
                    latitude: '40.759211',
                    longitude: '-73.984638',
                    county: 'Santa Clara',
                    contact_name: 'Elon Musk',
                    salutation: 'Mr',
                    phone_number: '111-111-1111',
                    fax: '122-111-1111',
                    email: 'elon@musk.com',
                    website: 'https://elonmusk.com',
                    row_version: '1-12345'
                  }
                ],
                phone_numbers: [
                  {
                    id: '12345',
                    country_code: '1',
                    area_code: '323',
                    number: '111-111-1111',
                    extension: '105',
                    type: 'primary'
                  }
                ],
                emails: [
                  {
                    id: '123',
                    email: 'elon@musk.com',
                    type: 'primary'
                  }
                ],
                custom_fields: [
                  {
                    id: '2389328923893298',
                    name: 'employee_level',
                    description: 'Employee Level',
                    value: 'Uses Salesforce and Marketo'
                  }
                ],
                social_links: [
                  {
                    id: '12345',
                    url: 'https://www.twitter.com/apideck-io',
                    type: 'twitter'
                  }
                ],
                tax_code: '1111',
                tax_id: '234-32-0000',
                dietary_preference: 'Veggie',
                food_allergies: ['No allergies'],
                tags: ['New'],
                row_version: '1-12345',
                deleted: true
              }
            }

            try {
              const { data } = await apideck.hris.employeesAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  "/hris/employees/{id}":
    delete:
      description: Delete Employee
      operationId: employeesDelete
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/DeleteEmployeeResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Delete Employee
      tags:
        - Employees
      x-apideck-api: hris
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.hris.employeesDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    get:
      description: Get Employee
      operationId: employeesOne
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/GetEmployeeResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Get Employee
      tags:
        - Employees
      x-apideck-api: hris
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.hris.employeesOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      description: Update Employee
      operationId: employeesUpdate
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Employee"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/UpdateEmployeeResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Update Employee
      tags:
        - Employees
      x-apideck-api: hris
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              employee: {
                first_name: 'Elon',
                last_name: 'Musk',
                middle_name: 'D.',
                display_name: 'Technoking',
                preferred_name: 'Elon Musk',
                initials: 'EM',
                salutation: 'Mr',
                title: 'CEO',
                marital_status: 'married',
                partner: {
                  first_name: 'Elon',
                  last_name: 'Musk',
                  middle_name: 'D.',
                  gender: 'male',
                  initials: 'EM',
                  birthday: '2000-08-12',
                  deceased_on: '2000-08-12'
                },
                division: 'Europe',
                department: 'R&D',
                department_id: '12345',
                team: {
                  id: '1234',
                  name: 'Full Stack Engineers'
                },
                company_id: '23456',
                company_name: 'SpaceX',
                employment_start_date: '2021-10-26',
                employment_end_date: '2028-10-26',
                employee_number: '123456-AB',
                employment_status: 'active',
                employment_role: {
                  type: 'contractor',
                  sub_type: 'full_time'
                },
                manager: {
                  name: 'Elon Musk',
                  first_name: 'Elon',
                  last_name: 'Musk',
                  email: 'elon@musk.com'
                },
                direct_reports: [
                  'a0d636c6-43b3-4bde-8c70-85b707d992f4',
                  'a98lfd96-43b3-4bde-8c70-85b707d992e6'
                ],
                social_security_number: '123456789',
                birthday: '2000-08-12',
                deceased_on: '2000-08-12',
                country_of_birth: 'US',
                description: 'A description',
                gender: 'male',
                pronouns: 'she,her',
                preferred_language: 'EN',
                languages: ['EN'],
                nationalities: ['US'],
                photo_url: 'https://unavatar.io/elon-musk',
                timezone: 'Europe/London',
                source: 'lever',
                source_id: '12345',
                record_url: 'https://app.intercom.io/contacts/12345',
                jobs: [
                  {
                    title: 'CEO',
                    role: 'Sales',
                    start_date: '2020-08-12',
                    end_date: '2020-08-12',
                    compensation_rate: 72000,
                    currency: 'USD',
                    payment_unit: 'year',
                    hired_at: '2020-08-12',
                    is_primary: true,
                    location: {
                      id: '123',
                      type: 'primary',
                      string: '25 Spring Street, Blackburn, VIC 3130',
                      name: 'HQ US',
                      line1: 'Main street',
                      line2: 'apt #',
                      line3: 'Suite #',
                      line4: 'delivery instructions',
                      street_number: '25',
                      city: 'San Francisco',
                      state: 'CA',
                      postal_code: '94104',
                      country: 'US',
                      latitude: '40.759211',
                      longitude: '-73.984638',
                      county: 'Santa Clara',
                      contact_name: 'Elon Musk',
                      salutation: 'Mr',
                      phone_number: '111-111-1111',
                      fax: '122-111-1111',
                      email: 'elon@musk.com',
                      website: 'https://elonmusk.com',
                      row_version: '1-12345'
                    }
                  }
                ],
                compensations: [
                  {
                    id: '3404301363494309004',
                    job_id: '3490439050957906679',
                    rate: 50,
                    payment_unit: 'hour',
                    flsa_status: 'nonexempt',
                    effective_date: '2021-06-11'
                  }
                ],
                works_remote: true,
                addresses: [
                  {
                    id: '123',
                    type: 'primary',
                    string: '25 Spring Street, Blackburn, VIC 3130',
                    name: 'HQ US',
                    line1: 'Main street',
                    line2: 'apt #',
                    line3: 'Suite #',
                    line4: 'delivery instructions',
                    street_number: '25',
                    city: 'San Francisco',
                    state: 'CA',
                    postal_code: '94104',
                    country: 'US',
                    latitude: '40.759211',
                    longitude: '-73.984638',
                    county: 'Santa Clara',
                    contact_name: 'Elon Musk',
                    salutation: 'Mr',
                    phone_number: '111-111-1111',
                    fax: '122-111-1111',
                    email: 'elon@musk.com',
                    website: 'https://elonmusk.com',
                    row_version: '1-12345'
                  }
                ],
                phone_numbers: [
                  {
                    id: '12345',
                    country_code: '1',
                    area_code: '323',
                    number: '111-111-1111',
                    extension: '105',
                    type: 'primary'
                  }
                ],
                emails: [
                  {
                    id: '123',
                    email: 'elon@musk.com',
                    type: 'primary'
                  }
                ],
                custom_fields: [
                  {
                    id: '2389328923893298',
                    name: 'employee_level',
                    description: 'Employee Level',
                    value: 'Uses Salesforce and Marketo'
                  }
                ],
                social_links: [
                  {
                    id: '12345',
                    url: 'https://www.twitter.com/apideck-io',
                    type: 'twitter'
                  }
                ],
                tax_code: '1111',
                tax_id: '234-32-0000',
                dietary_preference: 'Veggie',
                food_allergies: ['No allergies'],
                tags: ['New'],
                row_version: '1-12345',
                deleted: true
              }
            }

            try {
              const { data } = await apideck.hris.employeesUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  "/hris/jobs/employees/{employee_id}":
    get:
      description: List Jobs for employee.
      operationId: jobsAll
      parameters:
        - $ref: "#/components/parameters/employeeId"
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
      responses:
        "200":
          $ref: "#/components/responses/GetHrisJobsResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: List Jobs
      tags:
        - Jobs
      x-apideck-api: hris
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.hris.jobsAll({
                employeeId: 'employee_id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: jobs
  "/hris/jobs/employees/{employee_id}/jobs/{job_id}":
    get:
      description: A Job for employee.
      operationId: jobsOne
      parameters:
        - $ref: "#/components/parameters/jobId"
        - $ref: "#/components/parameters/employeeId"
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
      responses:
        "200":
          $ref: "#/components/responses/GetHrisJobResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: One Job
      tags:
        - Jobs
      x-apideck-api: hris
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              jobId: 'job_id_example',
              employeeId: 'employee_id_example'
            }

            try {
              const { data } = await apideck.hris.jobsOne(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /hris/payrolls:
    get:
      description: List Payroll
      operationId: payrollsAll
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/payrollsFilter"
      responses:
        "200":
          $ref: "#/components/responses/GetPayrollsResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: List Payroll
      tags:
        - Payrolls
      x-apideck-api: hris
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.hris.payrollsAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: payrolls
  "/hris/payrolls/employees/{employee_id}":
    get:
      description: List payrolls for employee
      operationId: employeePayrollsAll
      parameters:
        - $ref: "#/components/parameters/employeeId"
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/payrollsFilter"
      responses:
        "200":
          $ref: "#/components/responses/GetEmployeePayrollsResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: List Employee Payrolls
      tags:
        - Employee Payrolls
      x-apideck-api: hris
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.hris.employeePayrollsAll({
                employeeId: 'employee_id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: employeePayrolls
  "/hris/payrolls/employees/{employee_id}/payrolls/{payroll_id}":
    get:
      description: Get payroll for employee
      operationId: employeePayrollsOne
      parameters:
        - $ref: "#/components/parameters/payrollId"
        - $ref: "#/components/parameters/employeeId"
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
      responses:
        "200":
          $ref: "#/components/responses/GetEmployeePayrollResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Get Employee Payroll
      tags:
        - Employee Payrolls
      x-apideck-api: hris
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              payrollId: 'payroll_id_example',
              employeeId: 'employee_id_example'
            }

            try {
              const { data } = await apideck.hris.employeePayrollsOne(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: employeePayroll
  "/hris/payrolls/{payroll_id}":
    get:
      description: Get Payroll
      operationId: payrollsOne
      parameters:
        - $ref: "#/components/parameters/payrollId"
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
      responses:
        "200":
          $ref: "#/components/responses/GetPayrollResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Get Payroll
      tags:
        - Payrolls
      x-apideck-api: hris
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.hris.payrollsOne({
                payrollId: 'payroll_id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: payroll
  "/hris/schedules/employees/{employee_id}":
    get:
      description: List schedules for employee, a schedule is a work pattern, not the actual worked hours, for an employee.
      operationId: employeeSchedulesAll
      parameters:
        - $ref: "#/components/parameters/employeeId"
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
      responses:
        "200":
          $ref: "#/components/responses/GetEmployeeSchedulesResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: List Employee Schedules
      tags:
        - Employee Schedules
      x-apideck-api: hris
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.hris.employeeSchedulesAll({
                employeeId: 'employee_id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: employeeSchedules
  /hris/time-off-requests:
    get:
      description: List Time Off Requests
      operationId: timeOffRequestsAll
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/cursor"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/timeOffRequestsFilter"
      responses:
        "200":
          $ref: "#/components/responses/GetTimeOffRequestsResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: List Time Off Requests
      tags:
        - Time Off Requests
      x-apideck-api: hris
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.hris.timeOffRequestsAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: timeOffRequests
    post:
      description: Create Time Off Request
      operationId: timeOffRequestsAdd
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TimeOffRequest"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/CreateTimeOffRequestResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Create Time Off Request
      tags:
        - Time Off Requests
      x-apideck-api: hris
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              timeOffRequest: {
                employee_id: '12345',
                policy_id: '12345',
                status: 'approved',
                description: 'Enjoying some sun.',
                start_date: '2022-04-01',
                end_date: '2022-04-01',
                request_date: '2022-03-21',
                request_type: 'vacaction',
                approval_date: '2022-03-21',
                units: 'hours',
                amount: 3.5,
                notes: {
                  employee: 'Relaxing on the beach for a few hours.',
                  manager: 'Enjoy!'
                }
              }
            }

            try {
              const { data } = await apideck.hris.timeOffRequestsAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  "/hris/time-off-requests/{id}":
    delete:
      description: Delete Time Off Request
      operationId: timeOffRequestsDelete
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/DeleteTimeOffRequestResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Delete Time Off Request
      tags:
        - Time Off Requests
      x-apideck-api: hris
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.hris.timeOffRequestsDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    get:
      description: Get Time Off Request
      operationId: timeOffRequestsOne
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/GetTimeOffRequestResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Get Time Off Request
      tags:
        - Time Off Requests
      x-apideck-api: hris
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.hris.timeOffRequestsOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      description: Update Time Off Request
      operationId: timeOffRequestsUpdate
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TimeOffRequest"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/UpdateTimeOffRequestResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Update Time Off Request
      tags:
        - Time Off Requests
      x-apideck-api: hris
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              timeOffRequest: {
                employee_id: '12345',
                policy_id: '12345',
                status: 'approved',
                description: 'Enjoying some sun.',
                start_date: '2022-04-01',
                end_date: '2022-04-01',
                request_date: '2022-03-21',
                request_type: 'vacaction',
                approval_date: '2022-03-21',
                units: 'hours',
                amount: 3.5,
                notes: {
                  employee: 'Relaxing on the beach for a few hours.',
                  manager: 'Enjoy!'
                }
              }
            }

            try {
              const { data } = await apideck.hris.timeOffRequestsUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
components:
  parameters:
    applicationId:
      description: The ID of your Unify application
      in: header
      name: x-apideck-app-id
      required: true
      schema:
        type: string
    companyId:
      description: ID of the company you are acting upon.
      in: path
      name: company_id
      required: true
      schema:
        type: string
    consumerId:
      description: ID of the consumer which you want to get or push data from
      in: header
      name: x-apideck-consumer-id
      required: true
      schema:
        type: string
    cursor:
      description: Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
      in: query
      name: cursor
      schema:
        nullable: true
        type: string
    employeeId:
      description: ID of the employee you are acting upon.
      in: path
      name: employee_id
      required: true
      schema:
        type: string
    employeesFilter:
      description: Apply filters
      explode: true
      in: query
      name: filter
      schema:
        $ref: "#/components/schemas/EmployeesFilter"
      style: deepObject
    id:
      description: ID of the record you are acting upon.
      in: path
      name: id
      required: true
      schema:
        type: string
    jobId:
      description: ID of the job you are acting upon.
      in: path
      name: job_id
      required: true
      schema:
        type: string
    limit:
      description: Number of records to return
      in: query
      name: limit
      schema:
        default: 20
        maximum: 200
        minimum: 1
        type: integer
    payrollId:
      description: ID of the payroll you are acting upon.
      in: path
      name: payroll_id
      required: true
      schema:
        type: string
    payrollsFilter:
      description: Apply filters
      explode: true
      in: query
      name: filter
      schema:
        $ref: "#/components/schemas/PayrollsFilter"
      style: deepObject
    raw:
      description: Include raw response. Mostly used for debugging purposes
      in: query
      name: raw
      schema:
        default: false
        type: boolean
    serviceId:
      description: Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
      in: header
      name: x-apideck-service-id
      schema:
        type: string
    timeOffRequestsFilter:
      description: Apply filters
      explode: true
      in: query
      name: filter
      schema:
        $ref: "#/components/schemas/TimeOffRequestsFilter"
      style: deepObject
  responses:
    BadRequestResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BadRequestResponse"
      description: Bad Request
    CreateDepartmentResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateDepartmentResponse"
      description: Departments
    CreateEmployeeResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateEmployeeResponse"
      description: Employees
    CreateHrisCompanyResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateHrisCompanyResponse"
      description: Companies
    CreateTimeOffRequestResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateTimeOffRequestResponse"
      description: TimeOffRequests
    DeleteDepartmentResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeleteDepartmentResponse"
      description: Departments
    DeleteEmployeeResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeleteEmployeeResponse"
      description: Employees
    DeleteHrisCompanyResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeleteHrisCompanyResponse"
      description: Companies
    DeleteTimeOffRequestResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeleteTimeOffRequestResponse"
      description: TimeOffRequests
    GetDepartmentResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetDepartmentResponse"
      description: Departments
    GetDepartmentsResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetDepartmentsResponse"
      description: Departments
    GetEmployeePayrollResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetEmployeePayrollResponse"
      description: Payrolls
    GetEmployeePayrollsResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetEmployeePayrollsResponse"
      description: EmployeePayrolls
    GetEmployeeResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetEmployeeResponse"
      description: Employees
    GetEmployeeSchedulesResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetEmployeeSchedulesResponse"
      description: EmployeeSchedules
    GetEmployeesResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetEmployeesResponse"
      description: Employees
    GetHrisCompaniesResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetHrisCompaniesResponse"
      description: Companies
    GetHrisCompanyResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetHrisCompanyResponse"
      description: Company
    GetHrisJobResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetHrisJobResponse"
      description: Job
    GetHrisJobsResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetHrisJobsResponse"
      description: Jobs
    GetPayrollResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetPayrollResponse"
      description: Payrolls
    GetPayrollsResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetPayrollsResponse"
      description: Payrolls
    GetTimeOffRequestResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetTimeOffRequestResponse"
      description: TimeOffRequests
    GetTimeOffRequestsResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetTimeOffRequestsResponse"
      description: TimeOffRequests
    NotFoundResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotFoundResponse"
      description: The specified resource was not found
    NotImplementedResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotImplementedResponse"
      description: Not Implemented
    PaymentRequiredResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PaymentRequiredResponse"
      description: Payment Required
    TimeOffRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TimeOffRequest"
      description: TimeOffRequests
    TooManyRequestsResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TooManyRequestsResponse"
      description: Too Many Requests
    UnauthorizedResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UnauthorizedResponse"
      description: Unauthorized
    UnexpectedErrorResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UnexpectedErrorResponse"
      description: Unexpected error
    UnprocessableResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UnprocessableResponse"
      description: Unprocessable
    UpdateDepartmentResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateDepartmentResponse"
      description: Departments
    UpdateEmployeeResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateEmployeeResponse"
      description: Employees
    UpdateHrisCompanyResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateHrisCompanyResponse"
      description: Companies
    UpdateTimeOffRequestResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateTimeOffRequestResponse"
      description: TimeOffRequests
  schemas:
    Address:
      additionalProperties: false
      properties:
        city:
          description: Name of city.
          example: San Francisco
          nullable: true
          type: string
        contact_name:
          example: Elon Musk
          nullable: true
          type: string
        country:
          description: country code according to ISO 3166-1 alpha-2.
          example: US
          nullable: true
          type: string
        county:
          description: Address field that holds a sublocality, such as a county
          example: Santa Clara
          nullable: true
          type: string
        email:
          example: elon@musk.com
          nullable: true
          type: string
        fax:
          example: 122-111-1111
          nullable: true
          type: string
        id:
          example: "123"
          nullable: true
          type: string
        latitude:
          example: "40.759211"
          nullable: true
          type: string
        line1:
          description: "Line 1 of the address e.g. number, street, suite, apt #, etc."
          example: Main street
          nullable: true
          type: string
        line2:
          description: Line 2 of the address
          example: "apt #"
          nullable: true
          type: string
        line3:
          description: Line 3 of the address
          example: "Suite #"
          nullable: true
          type: string
        line4:
          description: Line 4 of the address
          example: delivery instructions
          nullable: true
          type: string
        longitude:
          example: "-73.984638"
          nullable: true
          type: string
        name:
          example: HQ US
          nullable: true
          type: string
        phone_number:
          example: 111-111-1111
          nullable: true
          type: string
        postal_code:
          description: Zip code or equivalent.
          example: "94104"
          nullable: true
          type: string
        row_version:
          $ref: "#/components/schemas/RowVersion"
        salutation:
          example: Mr
          nullable: true
          type: string
        state:
          description: Name of state
          example: CA
          nullable: true
          type: string
        street_number:
          description: Street number
          example: "25"
          nullable: true
          type: string
        string:
          example: 25 Spring Street, Blackburn, VIC 3130
          nullable: true
          title: The address string. Some APIs don't provide structured address data.
          type: string
        type:
          enum:
            - primary
            - secondary
            - home
            - office
            - shipping
            - billing
            - other
          example: primary
          type: string
          x-apideck-enum-id: addresses.type
          x-graphql-type-name: AddressType
        website:
          example: https://elonmusk.com
          nullable: true
          type: string
      type: object
      x-apideck-schema-id: Address
      x-apideck-weights:
        city: high
        contact_name: edge-case
        country: high
        county: edge-case
        email: edge-case
        fax: edge-case
        id: edge-case
        latitude: low
        line1: high
        line2: low
        line3: edge-case
        line4: edge-case
        longitude: low
        name: edge-case
        phone_number: edge-case
        postal_code: high
        row_version: edge-case
        salutation: edge-case
        state: high
        street_number: low
        string: low
        type: critical
        website: edge-case
    BadRequestResponse:
      properties:
        detail:
          anyOf:
            - example: Missing property foobar
              type: string
            - example:
                missing:
                  - foobar: required
              type: object
          description: Contains parameter or domain specific information related to the error and why it occurred.
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Bad Request
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Invalid Params
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#requestvalidationerror
          type: string
        status_code:
          description: HTTP status code
          example: 400
          type: number
        type_name:
          description: The type of error returned
          example: RequestValidationError
          type: string
      type: object
      x-apideck-schema-id: BadRequest
    Benefit:
      properties:
        employee_deduction:
          description: The amount deducted for benefit.
          example: 142.94
          type: number
        employer_contribution:
          description: The amount of employer contribution.
          example: 141.14
          type: number
        name:
          description: The name of the benefit.
          example: Health Insurance
          type: string
      type: object
      x-apideck-schema-id: Benefit
      x-apideck-weights:
        employee_deduction: high
        employer_contribution: high
        name: critical
    CompanyId:
      example: "23456"
      nullable: true
      title: Company ID
      type: string
    CompanyName:
      example: SpaceX
      nullable: true
      title: Company name
      type: string
    Compensation:
      additionalProperties: false
      properties:
        benefits:
          description: An array of employee benefits for the pay period.
          items:
            $ref: "#/components/schemas/Benefit"
          type: array
        deductions:
          description: An array of employee deductions for the pay period.
          items:
            $ref: "#/components/schemas/Deduction"
          type: array
        employee_id:
          $ref: "#/components/schemas/Id"
        gross_pay:
          description: The employee's gross pay. Only available when payroll has been processed
          example: 3000
          type: number
        net_pay:
          description: The employee's net pay. Only available when payroll has been processed
          example: 2199.93
          type: number
        taxes:
          description: An array of employer and employee taxes for the pay period.
          items:
            $ref: "#/components/schemas/Tax"
          type: array
      required:
        - employee_id
      type: object
      x-apideck-schema-id: Compensation
      x-apideck-weights:
        benefits: high
        deductions: high
        employee_id: critical
        gross_pay: critical
        net_pay: high
        taxes: high
    CreateDepartmentResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: add
          type: string
        resource:
          description: Unified API resource name
          example: Departments
          type: string
        service:
          description: Apideck ID of service provider
          example: workday
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: CreateDepartmentResponse
    CreateEmployeeResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: add
          type: string
        resource:
          description: Unified API resource name
          example: Employees
          type: string
        service:
          description: Apideck ID of service provider
          example: sage-hr
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: CreateEmployeeResponse
    CreateHrisCompanyResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: add
          type: string
        resource:
          description: Unified API resource name
          example: Companies
          type: string
        service:
          description: Apideck ID of service provider
          example: undefined
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: CreateHrisCompanyResponse
    CreateTimeOffRequestResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: add
          type: string
        resource:
          description: Unified API resource name
          example: TimeOffRequests
          type: string
        service:
          description: Apideck ID of service provider
          example: bamboohr
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    CreatedAt:
      example: 2020-09-30T07:43:32.000Z
      format: date-time
      readOnly: true
      title: Created at (timestamp)
      type: string
    CreatedBy:
      example: "12345"
      nullable: true
      readOnly: true
      title: Created by
      type: string
    Currency:
      description: Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
      enum:
        - UNKNOWN_CURRENCY
        - AED
        - AFN
        - ALL
        - AMD
        - ANG
        - AOA
        - ARS
        - AUD
        - AWG
        - AZN
        - BAM
        - BBD
        - BDT
        - BGN
        - BHD
        - BIF
        - BMD
        - BND
        - BOB
        - BOV
        - BRL
        - BSD
        - BTN
        - BWP
        - BYR
        - BZD
        - CAD
        - CDF
        - CHE
        - CHF
        - CHW
        - CLF
        - CLP
        - CNY
        - COP
        - COU
        - CRC
        - CUC
        - CUP
        - CVE
        - CZK
        - DJF
        - DKK
        - DOP
        - DZD
        - EGP
        - ERN
        - ETB
        - EUR
        - FJD
        - FKP
        - GBP
        - GEL
        - GHS
        - GIP
        - GMD
        - GNF
        - GTQ
        - GYD
        - HKD
        - HNL
        - HRK
        - HTG
        - HUF
        - IDR
        - ILS
        - INR
        - IQD
        - IRR
        - ISK
        - JMD
        - JOD
        - JPY
        - KES
        - KGS
        - KHR
        - KMF
        - KPW
        - KRW
        - KWD
        - KYD
        - KZT
        - LAK
        - LBP
        - LKR
        - LRD
        - LSL
        - LTL
        - LVL
        - LYD
        - MAD
        - MDL
        - MGA
        - MKD
        - MMK
        - MNT
        - MOP
        - MRO
        - MUR
        - MVR
        - MWK
        - MXN
        - MXV
        - MYR
        - MZN
        - NAD
        - NGN
        - NIO
        - NOK
        - NPR
        - NZD
        - OMR
        - PAB
        - PEN
        - PGK
        - PHP
        - PKR
        - PLN
        - PYG
        - QAR
        - RON
        - RSD
        - RUB
        - RWF
        - SAR
        - SBD
        - SCR
        - SDG
        - SEK
        - SGD
        - SHP
        - SLL
        - SOS
        - SRD
        - SSP
        - STD
        - SVC
        - SYP
        - SZL
        - THB
        - TJS
        - TMT
        - TND
        - TOP
        - TRC
        - TRY
        - TTD
        - TWD
        - TZS
        - UAH
        - UGX
        - USD
        - USN
        - USS
        - UYI
        - UYU
        - UZS
        - VEF
        - VND
        - VUV
        - WST
        - XAF
        - XAG
        - XAU
        - XBA
        - XBB
        - XBC
        - XBD
        - XCD
        - XDR
        - XOF
        - XPD
        - XPF
        - XPT
        - XTS
        - XXX
        - YER
        - ZAR
        - ZMK
        - ZMW
        - BTC
      example: USD
      nullable: true
      title: Currency
      type: string
      x-apideck-enum-coverage-ignore: true
      x-apideck-enum-id: currencies
      x-enum-elements:
        - description: Unknown currency
          name: UNKNOWN_CURRENCY
        - description: United Arab Emirates dirham
          name: AED
        - description: Afghan afghani
          name: AFN
        - description: Albanian lek
          name: ALL
        - description: Armenian dram
          name: AMD
        - description: Netherlands Antillean guilder
          name: ANG
        - description: Angolan kwanza
          name: AOA
        - description: Argentine peso
          name: ARS
        - description: Australian dollar
          name: AUD
        - description: Aruban florin
          name: AWG
        - description: Azerbaijani manat
          name: AZN
        - description: Bosnia and Herzegovina convertible mark
          name: BAM
        - description: Barbados dollar
          name: BBD
        - description: Bangladeshi taka
          name: BDT
        - description: Bulgarian lev
          name: BGN
        - description: Bahraini dinar
          name: BHD
        - description: Burundian franc
          name: BIF
        - description: Bermudian dollar
          name: BMD
        - description: Brunei dollar
          name: BND
        - description: Boliviano
          name: BOB
        - description: Bolivian Mvdol
          name: BOV
        - description: Brazilian real
          name: BRL
        - description: Bahamian dollar
          name: BSD
        - description: Bhutanese ngultrum
          name: BTN
        - description: Botswana pula
          name: BWP
        - description: Belarusian ruble
          name: BYR
        - description: Belize dollar
          name: BZD
        - description: Canadian dollar
          name: CAD
        - description: Congolese franc
          name: CDF
        - description: WIR Euro
          name: CHE
        - description: Swiss franc
          name: CHF
        - description: WIR Franc
          name: CHW
        - description: Unidad de Fomento
          name: CLF
        - description: Chilean peso
          name: CLP
        - description: Chinese yuan
          name: CNY
        - description: Colombian peso
          name: COP
        - description: Unidad de Valor Real
          name: COU
        - description: Costa Rican colon
          name: CRC
        - description: Cuban convertible peso
          name: CUC
        - description: Cuban peso
          name: CUP
        - description: Cape Verdean escudo
          name: CVE
        - description: Czech koruna
          name: CZK
        - description: Djiboutian franc
          name: DJF
        - description: Danish krone
          name: DKK
        - description: Dominican peso
          name: DOP
        - description: Algerian dinar
          name: DZD
        - description: Egyptian pound
          name: EGP
        - description: Eritrean nakfa
          name: ERN
        - description: Ethiopian birr
          name: ETB
        - description: Euro
          name: EUR
        - description: Fiji dollar
          name: FJD
        - description: Falkland Islands pound
          name: FKP
        - description: Pound sterling
          name: GBP
        - description: Georgian lari
          name: GEL
        - description: Ghanaian cedi
          name: GHS
        - description: Gibraltar pound
          name: GIP
        - description: Gambian dalasi
          name: GMD
        - description: Guinean franc
          name: GNF
        - description: Guatemalan quetzal
          name: GTQ
        - description: Guyanese dollar
          name: GYD
        - description: Hong Kong dollar
          name: HKD
        - description: Honduran lempira
          name: HNL
        - description: Croatian kuna
          name: HRK
        - description: Haitian gourde
          name: HTG
        - description: Hungarian forint
          name: HUF
        - description: Indonesian rupiah
          name: IDR
        - description: Israeli new shekel
          name: ILS
        - description: Indian rupee
          name: INR
        - description: Iraqi dinar
          name: IQD
        - description: Iranian rial
          name: IRR
        - description: Icelandic króna
          name: ISK
        - description: Jamaican dollar
          name: JMD
        - description: Jordanian dinar
          name: JOD
        - description: Japanese yen
          name: JPY
        - description: Kenyan shilling
          name: KES
        - description: Kyrgyzstani som
          name: KGS
        - description: Cambodian riel
          name: KHR
        - description: Comoro franc
          name: KMF
        - description: North Korean won
          name: KPW
        - description: South Korean won
          name: KRW
        - description: Kuwaiti dinar
          name: KWD
        - description: Cayman Islands dollar
          name: KYD
        - description: Kazakhstani tenge
          name: KZT
        - description: Lao kip
          name: LAK
        - description: Lebanese pound
          name: LBP
        - description: Sri Lankan rupee
          name: LKR
        - description: Liberian dollar
          name: LRD
        - description: Lesotho loti
          name: LSL
        - description: Lithuanian litas
          name: LTL
        - description: Latvian lats
          name: LVL
        - description: Libyan dinar
          name: LYD
        - description: Moroccan dirham
          name: MAD
        - description: Moldovan leu
          name: MDL
        - description: Malagasy ariary
          name: MGA
        - description: Macedonian denar
          name: MKD
        - description: Myanmar kyat
          name: MMK
        - description: Mongolian tögrög
          name: MNT
        - description: Macanese pataca
          name: MOP
        - description: Mauritanian ouguiya
          name: MRO
        - description: Mauritian rupee
          name: MUR
        - description: Maldivian rufiyaa
          name: MVR
        - description: Malawian kwacha
          name: MWK
        - description: Mexican peso
          name: MXN
        - description: Mexican Unidad de Inversion
          name: MXV
        - description: Malaysian ringgit
          name: MYR
        - description: Mozambican metical
          name: MZN
        - description: Namibian dollar
          name: NAD
        - description: Nigerian naira
          name: NGN
        - description: Nicaraguan córdoba
          name: NIO
        - description: Norwegian krone
          name: NOK
        - description: Nepalese rupee
          name: NPR
        - description: New Zealand dollar
          name: NZD
        - description: Omani rial
          name: OMR
        - description: Panamanian balboa
          name: PAB
        - description: Peruvian sol
          name: PEN
        - description: Papua New Guinean kina
          name: PGK
        - description: Philippine peso
          name: PHP
        - description: Pakistani rupee
          name: PKR
        - description: Polish złoty
          name: PLN
        - description: Paraguayan guaraní
          name: PYG
        - description: Qatari riyal
          name: QAR
        - description: Romanian leu
          name: RON
        - description: Serbian dinar
          name: RSD
        - description: Russian ruble
          name: RUB
        - description: Rwandan franc
          name: RWF
        - description: Saudi riyal
          name: SAR
        - description: Solomon Islands dollar
          name: SBD
        - description: Seychelles rupee
          name: SCR
        - description: Sudanese pound
          name: SDG
        - description: Swedish krona
          name: SEK
        - description: Singapore dollar
          name: SGD
        - description: Saint Helena pound
          name: SHP
        - description: Sierra Leonean leone
          name: SLL
        - description: Somali shilling
          name: SOS
        - description: Surinamese dollar
          name: SRD
        - description: South Sudanese pound
          name: SSP
        - description: São Tomé and Príncipe dobra
          name: STD
        - description: Salvadoran colón
          name: SVC
        - description: Syrian pound
          name: SYP
        - description: Swazi lilangeni
          name: SZL
        - description: Thai baht
          name: THB
        - description: Tajikstani somoni
          name: TJS
        - description: Turkmenistan manat
          name: TMT
        - description: Tunisian dinar
          name: TND
        - description: Tongan pa'anga
          name: TOP
        - description: Turkish lira
          name: TRY
        - description: Trinidad and Tobago dollar
          name: TTD
        - description: New Taiwan dollar
          name: TWD
        - description: Tanzanian shilling
          name: TZS
        - description: Ukrainian hryvnia
          name: UAH
        - description: Ugandan shilling
          name: UGX
        - description: United States dollar
          name: USD
        - description: United States dollar (next day)
          name: USN
        - description: United States dollar (same day)
          name: USS
        - description: Uruguay Peso en Unidedades Indexadas
          name: UYI
        - description: Uruguyan peso
          name: UYU
        - description: Uzbekistan som
          name: UZS
        - description: Venezuelan bolívar soberano
          name: VEF
        - description: Vietnamese đồng
          name: VND
        - description: Vanuatu vatu
          name: VUV
        - description: Samoan tala
          name: WST
        - description: CFA franc BEAC
          name: XAF
        - description: Silver
          name: XAG
        - description: Gold
          name: XAU
        - description: European Composite Unit
          name: XBA
        - description: European Monetary Unit
          name: XBB
        - description: European Unit of Account 9
          name: XBC
        - description: European Unit of Account 17
          name: XBD
        - description: East Caribbean dollar
          name: XCD
        - description: Special drawing rights (International Monetary Fund)
          name: XDR
        - description: CFA franc BCEAO
          name: XOF
        - description: Palladium
          name: XPD
        - description: CFP franc
          name: XPF
        - description: Platinum
          name: XPT
        - description: Code reserved for testing
          name: XTS
        - description: No currency
          name: XXX
        - description: Yemeni rial
          name: YER
        - description: South African rand
          name: ZAR
        - description: Zambian kwacha
          name: ZMK
        - description: Zambian kwacha
          name: ZMW
        - description: Bitcoin
          name: BTC
    CustomField:
      additionalProperties: false
      properties:
        description:
          description: More information about the custom field
          example: Employee Level
          title: Description
          type: string
        id:
          example: "2389328923893298"
          title: ID
          type: string
        name:
          description: Name of the custom field.
          example: employee_level
          title: Name
          type: string
        value:
          anyOf:
            - example: Uses Salesforce and Marketo
              nullable: true
              type: string
            - example: 10
              nullable: true
              type: number
            - example: true
              nullable: true
              type: boolean
            - items:
                type: string
              type: array
      required:
        - id
      type: object
      x-apideck-schema-id: CustomField
      x-apideck-weights:
        description: edge-case
        id: critical
        name: medium
        value: critical
    Deduction:
      properties:
        amount:
          description: The amount deducted.
          example: 10.97
          type: number
        name:
          description: The name of the deduction.
          example: Company Car
          type: string
      type: object
      x-apideck-schema-id: Deduction
      x-apideck-weights:
        amount: critical
        name: critical
    DeleteDepartmentResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: delete
          type: string
        resource:
          description: Unified API resource name
          example: Departments
          type: string
        service:
          description: Apideck ID of service provider
          example: workday
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: DeleteDepartmentResponse
    DeleteEmployeeResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: delete
          type: string
        resource:
          description: Unified API resource name
          example: Employees
          type: string
        service:
          description: Apideck ID of service provider
          example: sage-hr
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: DeleteEmployeeResponse
    DeleteHrisCompanyResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: delete
          type: string
        resource:
          description: Unified API resource name
          example: Companies
          type: string
        service:
          description: Apideck ID of service provider
          example: undefined
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: DeleteHrisCompanyResponse
    DeleteTimeOffRequestResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: delete
          type: string
        resource:
          description: Unified API resource name
          example: TimeOffRequests
          type: string
        service:
          description: Apideck ID of service provider
          example: bamboohr
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    Department:
      additionalProperties: false
      properties:
        code:
          example: "2"
          nullable: true
          title: Code
          type: string
        created_at:
          $ref: "#/components/schemas/CreatedAt"
        created_by:
          $ref: "#/components/schemas/CreatedBy"
        description:
          example: R&D
          nullable: true
          title: Description
          type: string
        id:
          $ref: "#/components/schemas/Id"
        name:
          description: Department name
          example: R&D
          nullable: true
          title: Name
          type: string
        updated_at:
          $ref: "#/components/schemas/UpdatedAt"
        updated_by:
          $ref: "#/components/schemas/UpdatedBy"
      type: object
      x-apideck-schema-id: Department
      x-apideck-weights:
        code: medium
        created_at: medium
        created_by: edge-case
        description: low
        id: critical
        name: critical
        updated_at: medium
        updated_by: edge-case
    Description:
      example: A description
      nullable: true
      title: Description
      type: string
    Division:
      description: The division the user is currently in.
      example: Europe
      nullable: true
      title: Division
      type: string
    Email:
      additionalProperties: false
      properties:
        email:
          example: elon@musk.com
          format: email
          minLength: 1
          type: string
        id:
          example: "123"
          type: string
        type:
          enum:
            - primary
            - secondary
            - work
            - personal
            - billing
            - other
          example: primary
          type: string
          x-apideck-enum-id: emails.type
          x-graphql-type-name: EmailType
      required:
        - email
      type: object
      x-apideck-schema-id: Email
      x-apideck-weights:
        email: critical
        id: edge-case
        type: critical
    Employee:
      additionalProperties: false
      properties:
        addresses:
          items:
            $ref: "#/components/schemas/Address"
          type: array
        birthday:
          example: 2000-08-12
          format: date
          nullable: true
          type: string
        company_id:
          $ref: "#/components/schemas/CompanyId"
        company_name:
          $ref: "#/components/schemas/CompanyName"
        compensations:
          items:
            example:
              effective_date: 2021-06-11
              flsa_status: nonexempt
              id: "3404301363494309004"
              job_id: "3490439050957906679"
              payment_unit: hour
              rate: 50
            properties:
              currency:
                $ref: "#/components/schemas/Currency"
              effective_date:
                description: The effective date for this compensation.
                example: 2020-08-12
                readOnly: false
                type: string
              flsa_status:
                description: The FLSA status for this compensation.
                enum:
                  - exempt
                  - salaried-nonexempt
                  - nonexempt
                  - owner
                readOnly: false
                type: string
                x-apideck-enum-id: employees.compensations.flsa_status
              id:
                $ref: "#/components/schemas/Id"
              job_id:
                description: The ID of the job to which the compensation belongs.
                example: "12345"
                readOnly: true
                type: string
              payment_unit:
                $ref: "#/components/schemas/PaymentUnit"
              rate:
                description: The amount paid per payment unit.
                example: 72000
                readOnly: false
                type: number
            type: object
            x-apideck-weights:
              currency: high
              effective_date: low
              flsa_status: edge-case
              id: critical
              job_id: medium
              payment_unit: medium
              rate: high
          type: array
        country_of_birth:
          description: country code according to ISO 3166-1 alpha-2.
          example: US
          maxLength: 2
          minLength: 2
          nullable: true
          type: string
        created_at:
          $ref: "#/components/schemas/CreatedAt"
        created_by:
          $ref: "#/components/schemas/CreatedBy"
        custom_fields:
          items:
            $ref: "#/components/schemas/CustomField"
          type: array
        deceased_on:
          example: 2000-08-12
          format: date
          nullable: true
          type: string
        deleted:
          example: true
          nullable: true
          title: Deleted
          type: boolean
        department:
          description: The department the user is currently in.
          example: R&D
          nullable: true
          title: Department
          type: string
        department_id:
          description: Unique identifier of the department ID this employee belongs to.
          example: "12345"
          nullable: true
          title: Department ID
          type: string
        description:
          $ref: "#/components/schemas/Description"
        dietary_preference:
          description: Indicate the employee's dietary preference.
          example: Veggie
          nullable: true
          title: Dietary preference
          type: string
        direct_reports:
          example:
            - a0d636c6-43b3-4bde-8c70-85b707d992f4
            - a98lfd96-43b3-4bde-8c70-85b707d992e6
          items:
            type: string
          nullable: true
          type: array
        display_name:
          example: Technoking
          nullable: true
          title: Display name
          type: string
        division:
          $ref: "#/components/schemas/Division"
        emails:
          items:
            $ref: "#/components/schemas/Email"
          type: array
        employee_number:
          $ref: "#/components/schemas/EmployeeNumber"
        employment_end_date:
          description: A Start Date is the date that the employee ended working at the company
          example: 2028-10-26
          nullable: true
          title: Employee end date
          type: string
        employment_role:
          properties:
            sub_type:
              enum:
                - full_time
                - part_time
                - hourly
              nullable: true
              type: string
              x-apideck-enum-id: employees.employment_role.sub_type
            type:
              enum:
                - contractor
                - employee
                - freelance
                - temp
                - intership
                - other
              nullable: true
              type: string
              x-apideck-enum-id: employees.employment_role.type
          type: object
          x-apideck-weights:
            sub_type: medium
            type: critical
        employment_start_date:
          description: A Start Date is the date that the employee started working at the company
          example: 2021-10-26
          nullable: true
          title: Employee start date
          type: string
        employment_status:
          enum:
            - active
            - inactive
            - terminated
            - other
          example: active
          nullable: true
          type: string
          x-apideck-enum-id: employees.employment_status
        first_name:
          $ref: "#/components/schemas/FirstName"
        food_allergies:
          description: Indicate the employee's food allergies.
          example:
            - No allergies
          items:
            type: string
          nullable: true
          title: Food allergies
          type: array
        gender:
          $ref: "#/components/schemas/Gender"
        id:
          $ref: "#/components/schemas/Id"
        initials:
          example: EM
          nullable: true
          title: Initials
          type: string
        jobs:
          items:
            properties:
              compensation_rate:
                example: 72000
                title: The compensation rate of the job.
                type: number
              currency:
                $ref: "#/components/schemas/Currency"
              employee_id:
                $ref: "#/components/schemas/Id"
              end_date:
                example: 2020-08-12
                format: date
                nullable: true
                type: string
              hired_at:
                example: 2020-08-12
                format: date
                nullable: true
                type: string
              id:
                $ref: "#/components/schemas/Id"
              is_primary:
                description: Indicates whether this the employee's primary job
                example: true
                nullable: true
                title: Primary
                type: boolean
              location:
                $ref: "#/components/schemas/Address"
              payment_unit:
                $ref: "#/components/schemas/PaymentUnit"
              role:
                example: Sales
                nullable: true
                title: Job role
                type: string
              start_date:
                example: 2020-08-12
                format: date
                nullable: true
                type: string
              title:
                $ref: "#/components/schemas/Title"
            type: object
            x-apideck-weights:
              compensation_rate: medium
              currency: medium
              employee_id: edge-case
              end_date: high
              hired_at: medium
              id: critical
              is_primary: medium
              location: medium
              payment_unit: medium
              role: medium
              start_date: high
              title: critical
          type: array
        languages:
          items:
            $ref: "#/components/schemas/Language"
          type: array
        last_name:
          $ref: "#/components/schemas/LastName"
        manager:
          properties:
            email:
              example: elon@musk.com
              format: email
              nullable: true
              type: string
            first_name:
              $ref: "#/components/schemas/FirstName"
            id:
              $ref: "#/components/schemas/Id"
            last_name:
              $ref: "#/components/schemas/LastName"
            name:
              example: Elon Musk
              nullable: true
              title: Name
              type: string
          type: object
          x-apideck-weights:
            email: medium
            first_name: medium
            id: critical
            last_name: medium
            name: medium
        marital_status:
          example: married
          nullable: true
          title: Marital status
          type: string
        middle_name:
          $ref: "#/components/schemas/MiddleName"
        nationalities:
          items:
            description: country code according to ISO 3166-1 alpha-2.
            example: US
            nullable: true
            title: Nationality
            type: string
          type: array
        partner:
          additionalProperties: false
          properties:
            birthday:
              example: 2000-08-12
              format: date
              nullable: true
              type: string
            deceased_on:
              example: 2000-08-12
              format: date
              nullable: true
              type: string
            first_name:
              $ref: "#/components/schemas/FirstName"
            gender:
              $ref: "#/components/schemas/Gender"
            id:
              $ref: "#/components/schemas/Id"
            initials:
              example: EM
              nullable: true
              title: Initials
              type: string
            last_name:
              $ref: "#/components/schemas/LastName"
            middle_name:
              $ref: "#/components/schemas/MiddleName"
          type: object
          x-apideck-schema-id: Person
          x-apideck-weights:
            birthday: low
            deceased_on: low
            first_name: critical
            id: low
            initials: medium
            last_name: critical
        phone_numbers:
          items:
            $ref: "#/components/schemas/PhoneNumber"
          type: array
        photo_url:
          $ref: "#/components/schemas/PhotoUrl"
        preferred_language:
          $ref: "#/components/schemas/Language"
        preferred_name:
          example: Elon Musk
          nullable: true
          title: Preferred name
          type: string
        pronouns:
          example: she,her
          nullable: true
          title: Pronouns
          type: string
        record_url:
          example: https://app.intercom.io/contacts/12345
          nullable: true
          title: Record URL
          type: string
        row_version:
          $ref: "#/components/schemas/RowVersion"
        salutation:
          example: Mr
          nullable: true
          type: string
        social_links:
          items:
            additionalProperties: false
            properties:
              id:
                example: "12345"
                nullable: true
                type: string
              type:
                example: twitter
                nullable: true
                type: string
              url:
                example: https://www.twitter.com/apideck-io
                minLength: 1
                type: string
            required:
              - url
            type: object
            x-apideck-schema-id: SocialLink
            x-apideck-weights:
              id: edge-case
              type: critical
              url: critical
          type: array
        social_security_number:
          example: "123456789"
          nullable: true
          title: Social Security Number
          type: string
        source:
          description: When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from.
          example: lever
          nullable: true
          title: Source
          type: string
        source_id:
          description: Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS).
          example: "12345"
          nullable: true
          title: Source ID
          type: string
        tags:
          example:
            - New
          items:
            type: string
          type: array
          x-apideck-schema-id: Tags
        tax_code:
          example: "1111"
          nullable: true
          title: Tax Code
          type: string
        tax_id:
          example: 234-32-0000
          nullable: true
          title: Tax ID
          type: string
        team:
          additionalProperties: false
          description: The team the user is currently in.
          nullable: true
          properties:
            id:
              example: "1234"
              nullable: true
              type: string
            name:
              example: Full Stack Engineers
              nullable: true
              type: string
          type: object
          x-apideck-schema-id: Team
        timezone:
          example: Europe/London
          nullable: true
          title: Timezone
          type: string
        title:
          $ref: "#/components/schemas/Title"
        updated_at:
          $ref: "#/components/schemas/UpdatedAt"
        updated_by:
          $ref: "#/components/schemas/UpdatedBy"
        works_remote:
          description: Indicates whether the employee works remote
          example: true
          nullable: true
          title: Remote
          type: boolean
      required:
        - id
      type: object
      x-apideck-schema-id: Employee
      x-apideck-weights:
        addresses: high
        birthday: high
        company_id: high
        company_name: medium
        compensations: medium
        country_of_birth: high
        created_at: medium
        created_by: edge-case
        custom_fields: edge-case
        deceased_on: low
        deleted: medium
        department: medium
        description: edge-case
        dietary_preference: edge-case
        direct_reports: edge-case
        display_name: edge-case
        division: medium
        emails: high
        employee_number: high
        employment_end_date: high
        employment_role: high
        employment_start_date: high
        employment_status: high
        first_name: critical
        food_allergies: edge-case
        gender: high
        id: medium
        initials: low
        jobs: high
        languages: low
        last_name: critical
        manager: medium
        marital_status: medium
        middle_name: medium
        nationalities: high
        partner: low
        phone_numbers: high
        photo_url: medium
        preferred_language: high
        preferred_name: medium
        pronouns: medium
        row_version: edge-case
        salutation: medium
        social_links: edge-case
        social_security_number: edge-case
        source: edge-case
        source_id: edge-case
        tags: low
        tax_code: edge-case
        tax_id: edge-case
        team: medium
        timezone: low
        title: critical
        updated_at: high
        updated_by: edge-case
        works_remote: low
    EmployeeNumber:
      description: An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
      example: 123456-AB
      nullable: true
      title: Employee number
      type: string
    EmployeePayroll:
      properties:
        employee:
          $ref: "#/components/schemas/Employee"
        payroll:
          $ref: "#/components/schemas/Payroll"
      type: object
      x-apideck-schema-id: EmployeePayroll
      x-apideck-weights:
        employee: critical
        payroll: critical
    EmployeePayrolls:
      properties:
        employee:
          $ref: "#/components/schemas/Employee"
        payrolls:
          items:
            $ref: "#/components/schemas/Payroll"
          type: array
      type: object
      x-apideck-schema-id: EmployeePayrolls
      x-apideck-weights:
        employee: critical
        payrolls: critical
    EmployeeSchedules:
      properties:
        employee:
          $ref: "#/components/schemas/Employee"
        schedules:
          items:
            $ref: "#/components/schemas/Schedule"
          type: array
      type: object
      x-apideck-schema-id: EmployeeSchedules
    EmployeesFilter:
      additionalProperties: false
      example:
        company_id: "1234"
        email: elon@tesla.com
        employee_number: 123456-AB
        employment_status: active
        first_name: Elon
        last_name: Musk
        manager_id: "1234"
        title: Manager
      properties:
        company_id:
          description: Company ID to filter on
          example: "1234"
          type: string
        email:
          description: Email to filter on
          example: elon@tesla.com
          type: string
        employee_number:
          description: Employee number to filter on
          example: 123456-AB
          type: string
        employment_status:
          description: Employment status to filter on
          enum:
            - active
            - inactive
            - terminated
            - other
          example: active
          type: string
          x-graphql-type-name: EmploymentStatusFilter
        first_name:
          description: First Name to filter on
          example: Elon
          type: string
        last_name:
          description: Last Name to filter on
          example: Musk
          type: string
        manager_id:
          description: Manager id to filter on
          example: "1234"
          type: string
        title:
          description: Job title to filter on
          example: Manager
          type: string
      type: object
      x-apideck-schema-id: EmployeesFilter
      x-graphql-type-name: EmployeesFilter
    FirstName:
      example: Elon
      nullable: true
      title: First name
      type: string
    Gender:
      enum:
        - male
        - female
        - unisex
        - other
        - not_specified
      example: male
      nullable: true
      type: string
      x-apideck-enum-id: genders
    GetDepartmentResponse:
      properties:
        data:
          $ref: "#/components/schemas/Department"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: Departments
          type: string
        service:
          description: Apideck ID of service provider
          example: workday
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: GetDepartmentResponse
      x-graphql-type-name: Department
    GetDepartmentsResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/Department"
          type: array
        links:
          $ref: "#/components/schemas/Links"
        meta:
          $ref: "#/components/schemas/Meta"
        operation:
          description: Operation performed
          example: all
          type: string
        resource:
          description: Unified API resource name
          example: Departments
          type: string
        service:
          description: Apideck ID of service provider
          example: workday
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: GetDepartmentsResponse
      x-graphql-type-name: DepartmentList
    GetEmployeePayrollResponse:
      properties:
        data:
          $ref: "#/components/schemas/EmployeePayroll"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: Companies
          type: string
        service:
          description: Apideck ID of service provider
          example: undefined
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: GetEmployeePayrollResponse
      x-graphql-type-name: EmployeePayroll
    GetEmployeePayrollsResponse:
      properties:
        data:
          $ref: "#/components/schemas/EmployeePayrolls"
        operation:
          description: Operation performed
          example: all
          type: string
        resource:
          description: Unified API resource name
          example: Employees
          type: string
        service:
          description: Apideck ID of service provider
          example: sage-hr
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: GetEmployeePayrollsResponse
      x-graphql-type-name: EmployeePayrollList
    GetEmployeeResponse:
      properties:
        data:
          $ref: "#/components/schemas/Employee"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: Employees
          type: string
        service:
          description: Apideck ID of service provider
          example: sage-hr
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: GetEmployeeResponse
      x-graphql-type-name: Employee
    GetEmployeeSchedulesResponse:
      properties:
        data:
          $ref: "#/components/schemas/EmployeeSchedules"
        operation:
          description: Operation performed
          example: all
          type: string
        resource:
          description: Unified API resource name
          example: Employees
          type: string
        service:
          description: Apideck ID of service provider
          example: sage-hr
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: GetEmployeeSchedulesResponse
      x-graphql-type-name: EmployeeSchedulesList
    GetEmployeesResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/Employee"
          type: array
        links:
          $ref: "#/components/schemas/Links"
        meta:
          $ref: "#/components/schemas/Meta"
        operation:
          description: Operation performed
          example: all
          type: string
        resource:
          description: Unified API resource name
          example: Employees
          type: string
        service:
          description: Apideck ID of service provider
          example: sage-hr
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: GetEmployeesResponse
      x-graphql-type-name: EmployeeList
    GetHrisCompaniesResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/HrisCompany"
          type: array
        links:
          $ref: "#/components/schemas/Links"
        meta:
          $ref: "#/components/schemas/Meta"
        operation:
          description: Operation performed
          example: all
          type: string
        resource:
          description: Unified API resource name
          example: Companies
          type: string
        service:
          description: Apideck ID of service provider
          example: undefined
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: GetHrisCompaniesResponse
      x-graphql-type-name: HrisCompanyList
    GetHrisCompanyResponse:
      properties:
        data:
          $ref: "#/components/schemas/HrisCompany"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: Companies
          type: string
        service:
          description: Apideck ID of service provider
          example: undefined
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: GetHrisCompanyResponse
      x-graphql-type-name: HrisCompany
    GetHrisJobResponse:
      properties:
        data:
          $ref: "#/components/schemas/HrisJob"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: Employees
          type: string
        service:
          description: Apideck ID of service provider
          example: sage-hr
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: GetHrisJobResponse
      x-graphql-type-name: Job
    GetHrisJobsResponse:
      properties:
        data:
          $ref: "#/components/schemas/HrisJobs"
        operation:
          description: Operation performed
          example: all
          type: string
        resource:
          description: Unified API resource name
          example: Employees
          type: string
        service:
          description: Apideck ID of service provider
          example: sage-hr
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: GetHrisJobsResponse
      x-graphql-type-name: JobsList
    GetPayrollResponse:
      properties:
        data:
          $ref: "#/components/schemas/Payroll"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: Companies
          type: string
        service:
          description: Apideck ID of service provider
          example: undefined
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: GetPayrollResponse
      x-graphql-type-name: Payroll
    GetPayrollsResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/Payroll"
          type: array
        operation:
          description: Operation performed
          example: all
          type: string
        resource:
          description: Unified API resource name
          example: Employees
          type: string
        service:
          description: Apideck ID of service provider
          example: sage-hr
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: GetPayrollsResponse
      x-graphql-type-name: PayrollList
    GetTimeOffRequestResponse:
      properties:
        data:
          $ref: "#/components/schemas/TimeOffRequest"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: TimeOffRequests
          type: string
        service:
          description: Apideck ID of service provider
          example: bamboohr
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-graphql-type-name: TimeOffRequest
    GetTimeOffRequestsResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/TimeOffRequest"
          type: array
        links:
          $ref: "#/components/schemas/Links"
        meta:
          $ref: "#/components/schemas/Meta"
        operation:
          description: Operation performed
          example: all
          type: string
        resource:
          description: Unified API resource name
          example: TimeOffRequests
          type: string
        service:
          description: Apideck ID of service provider
          example: bamboohr
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-graphql-type-name: TimeOffRequestList
    HrisCompany:
      additionalProperties: false
      properties:
        addresses:
          items:
            $ref: "#/components/schemas/Address"
          type: array
        company_number:
          description: An Company Number, Company ID or Company Code, is a unique number that has been assigned to each company.
          example: 123456-AB
          nullable: true
          title: Company number
          type: string
        created_at:
          $ref: "#/components/schemas/CreatedAt"
        created_by:
          $ref: "#/components/schemas/CreatedBy"
        debtor_id:
          example: "12345"
          minLength: 1
          type: string
        deleted:
          example: false
          readOnly: true
          type: boolean
        display_name:
          example: SpaceX
          minLength: 1
          type: string
        emails:
          items:
            $ref: "#/components/schemas/Email"
          type: array
        id:
          $ref: "#/components/schemas/Id"
        legal_name:
          example: SpaceX
          minLength: 1
          type: string
        phone_numbers:
          items:
            $ref: "#/components/schemas/PhoneNumber"
          type: array
        status:
          enum:
            - active
            - inactive
            - trial
            - other
          example: active
          type: string
          x-apideck-enum-id: companies.status
        subdomain:
          example: company
          minLength: 1
          type: string
        updated_at:
          $ref: "#/components/schemas/UpdatedAt"
        updated_by:
          $ref: "#/components/schemas/UpdatedBy"
        websites:
          items:
            $ref: "#/components/schemas/Website"
          type: array
      required:
        - legal_name
      type: object
      x-apideck-schema-id: HrisCompany
      x-apideck-weights:
        company_number: high
        debtor_id: edge-case
        id: critical
        legal_name: critical
        subdomain: low
        updated_at: high
    HrisEventType:
      enum:
        - "*"
        - hris.employee.created
        - hris.employee.updated
        - hris.employee.deleted
        - hris.company.created
        - hris.company.updated
        - hris.company.deleted
      example: hris.employee.created
      type: string
    HrisJob:
      properties:
        department:
          description: Department name
          example: Brussels Office
          nullable: true
          type: string
        employee_id:
          description: Id of the employee
          type: string
        employment_status:
          enum:
            - active
            - inactive
            - terminated
            - other
          example: active
          nullable: true
          type: string
          x-apideck-enum-id: employees.employment_status
        end_date:
          example: 2020-08-12
          format: date
          nullable: true
          type: string
        id:
          $ref: "#/components/schemas/Id"
        location:
          additionalProperties: false
          properties:
            name:
              example: HQ US
              nullable: true
              type: string
          type: object
        start_date:
          example: 2020-08-12
          format: date
          nullable: true
          type: string
        title:
          $ref: "#/components/schemas/Title"
      type: object
      x-apideck-schema-id: HrisJob
      x-apideck-weights:
        department: medium
        employee_id: critical
        employment_status: high
        end_date: high
        id: critical
        location: medium
        start_date: high
        title: critical
    HrisJobs:
      properties:
        employee:
          $ref: "#/components/schemas/Employee"
        jobs:
          items:
            $ref: "#/components/schemas/HrisJob"
          type: array
      type: object
      x-apideck-schema-id: HrisJobs
    Id:
      example: "12345"
      readOnly: true
      type: string
    Language:
      description: language code according to ISO 639-1. For the United States - EN
      example: EN
      nullable: true
      type: string
    LastName:
      example: Musk
      nullable: true
      title: Last name
      type: string
    Links:
      description: Links to navigate to previous or next pages through the API
      properties:
        current:
          description: Link to navigate to the current page through the API
          example: https://unify.apideck.com/crm/companies
          type: string
        next:
          description: Link to navigate to the previous page through the API
          example: https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM
          nullable: true
          type: string
        previous:
          description: Link to navigate to the previous page through the API
          example: https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D
          nullable: true
          type: string
      type: object
      x-apideck-schema-id: Links
    Meta:
      description: Response metadata
      properties:
        cursors:
          description: Cursors to navigate to previous or next pages through the API
          properties:
            current:
              description: Cursor to navigate to the current page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjI=
              nullable: true
              type: string
            next:
              description: Cursor to navigate to the next page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjM=
              nullable: true
              type: string
            previous:
              description: Cursor to navigate to the previous page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjE=
              nullable: true
              type: string
          type: object
        items_on_page:
          description: Number of items returned in the data property of the response
          example: 50
          type: integer
      type: object
      x-apideck-schema-id: Meta
    MiddleName:
      example: D.
      nullable: true
      title: Middle name
      type: string
    NotFoundResponse:
      properties:
        detail:
          anyOf:
            - example: "Could not find widget with id: '123'"
              type: string
            - example:
                not_found:
                  entity: widget
                  id: "123"
              type: object
          description: Contains parameter or domain specific information related to the error and why it occurred.
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Not Found
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Unknown Widget
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#entitynotfounderror
          type: string
        status_code:
          description: HTTP status code
          example: 404
          type: number
        type_name:
          description: The type of error returned
          example: EntityNotFoundError
          type: string
      type: object
      x-apideck-schema-id: NotFound
    NotImplementedResponse:
      properties:
        detail:
          anyOf:
            - example: Failed to retrieve Widget tokenUrl from 'components.securitySchemes.OAuth2.flows'
              type: string
            - type: object
          description: Contains parameter or domain specific information related to the error and why it occurred.
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Not Implemented
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Unmapped Attribute
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#mappingerror
          type: string
        status_code:
          description: HTTP status code
          example: 501
          type: number
        type_name:
          description: The type of error returned
          example: MappingError
          type: string
      type: object
      x-apideck-schema-id: NotImplemented
    PaymentRequiredResponse:
      properties:
        detail:
          description: Contains parameter or domain specific information related to the error and why it occurred.
          example: You have reached your limit of 2000
          type: string
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Payment Required
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Request Limit Reached
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#requestlimiterror
          type: string
        status_code:
          description: HTTP status code
          example: 402
          type: number
        type_name:
          description: The type of error returned
          example: RequestLimitError
          type: string
      type: object
      x-apideck-schema-id: PaymentRequired
    PaymentUnit:
      enum:
        - hour
        - week
        - month
        - year
        - paycheck
      example: year
      type: string
      x-apideck-enum-id: payment_unit
    Payroll:
      additionalProperties: false
      properties:
        check_date:
          description: The date on which employees will be paid for the payroll.
          example: 2022-04-08
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
        company_id:
          $ref: "#/components/schemas/CompanyId"
        compensations:
          description: An array of compensations for the payroll.
          items:
            $ref: "#/components/schemas/Compensation"
          type: array
        end_date:
          description: The end date, inclusive, of the pay period.
          example: 2022-04-21
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
        id:
          $ref: "#/components/schemas/Id"
        processed:
          description: Whether or not the payroll has been successfully processed. Note that processed payrolls cannot be updated.
          example: false
          type: boolean
        processed_date:
          description: The date the payroll was processed.
          example: 2022-04-08
          nullable: true
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
        start_date:
          description: The start date, inclusive, of the pay period.
          example: 2022-04-08
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
        totals:
          $ref: "#/components/schemas/PayrollTotals"
          description: The overview of the payroll totals.
          type: object
      required:
        - id
        - processed
        - check_date
        - start_date
        - end_date
      type: object
      x-apideck-schema-id: Payroll
      x-apideck-weights:
        check_date: critical
        company_id: high
        compensations: medium
        end_date: critical
        id: critical
        processed: critical
        processed_date: medium
        start_date: critical
        totals: high
    PayrollTotals:
      properties:
        check_amount:
          description: The total check amount for the payroll.
          example: 27966.23
          type: number
        company_debit:
          description: The total company debit for the payroll.
          example: 27992.49
          type: number
        employee_benefit_deductions:
          description: The total amount of employee deducted benefits for the payroll.
          example: 0
          type: number
        employee_taxes:
          description: The total amount of employee paid taxes for the payroll.
          example: 6616.39
          type: number
        employer_benefit_contributions:
          description: The total amount of company contributed benefits for the payroll.
          example: 0
          type: number
        employer_taxes:
          description: The total amount of employer paid taxes for the payroll.
          example: 2038.93
          type: number
        gross_pay:
          description: The gross pay amount for the payroll.
          example: 27966.23
          type: number
        net_pay:
          description: The net pay amount for the payroll.
          example: 19337.17
          type: number
        tax_debit:
          description: The total tax debit for the payroll.
          example: 8655.32
          type: number
      type: object
      x-apideck-schema-id: PayrollTotals
    PayrollsFilter:
      additionalProperties: false
      example:
        end_date: 2022-04-21
        start_date: 2022-04-08
      properties:
        end_date:
          description: Return payrolls whose pay period is before the end date
          example: 2022-04-21
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
        start_date:
          description: Return payrolls whose pay period is after the start date
          example: 2022-04-08
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
      type: object
      x-apideck-schema-id: PayrollsFilter
      x-graphql-type-name: PayrollsFilter
    PhoneNumber:
      additionalProperties: false
      properties:
        area_code:
          example: "323"
          nullable: true
          title: Area code
          type: string
        country_code:
          example: "1"
          nullable: true
          title: Country code
          type: string
        extension:
          example: "105"
          nullable: true
          title: Phone extension
          type: string
        id:
          example: "12345"
          nullable: true
          type: string
        number:
          example: 111-111-1111
          minLength: 1
          title: Phone number
          type: string
        type:
          enum:
            - primary
            - secondary
            - home
            - work
            - office
            - mobile
            - assistant
            - fax
            - direct-dial-in
            - personal
            - other
          example: primary
          type: string
          x-apideck-enum-id: phone_numbers.type
          x-graphql-type-name: PhoneType
      required:
        - number
      type: object
      x-apideck-schema-id: PhoneNumber
      x-apideck-weights:
        area_code: edge-case
        country_code: edge-case
        extension: edge-case
        id: edge-case
        number: critical
        type: critical
    PhotoUrl:
      example: https://unavatar.io/elon-musk
      nullable: true
      title: Photo URL
      type: string
    RowVersion:
      example: 1-12345
      nullable: true
      title: Row version
      type: string
    Schedule:
      additionalProperties: false
      properties:
        end_date:
          description: The end date, inclusive, of the schedule period.
          example: 2022-04-21
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
        id:
          $ref: "#/components/schemas/Id"
        start_date:
          description: The start date, inclusive, of the schedule period.
          example: 2022-04-08
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
        work_pattern:
          properties:
            even_weeks:
              properties:
                hours_friday:
                  example: 4
                  format: double
                  maximum: 24
                  minimum: 0
                  nullable: false
                  pattern: ^(\d{1,2})(\.\d{1,2})?$
                  readOnly: false
                  type: number
                hours_monday:
                  example: 8
                  format: double
                  maximum: 24
                  minimum: 0
                  nullable: false
                  pattern: ^(\d{1,2})(\.\d{1,2})?$
                  readOnly: false
                  type: number
                hours_saturday:
                  example: 0
                  format: double
                  maximum: 24
                  minimum: 0
                  nullable: false
                  pattern: ^(\d{1,2})(\.\d{1,2})?$
                  readOnly: false
                  type: number
                hours_sunday:
                  example: 0
                  format: double
                  maximum: 24
                  minimum: 0
                  nullable: false
                  pattern: ^(\d{1,2})(\.\d{1,2})?$
                  readOnly: false
                  type: number
                hours_thursday:
                  example: 7.5
                  format: double
                  maximum: 24
                  minimum: 0
                  nullable: false
                  pattern: ^(\d{1,2})(\.\d{1,2})?$
                  readOnly: false
                  type: number
                hours_tuesday:
                  example: 8
                  format: double
                  maximum: 24
                  minimum: 0
                  nullable: false
                  pattern: ^(\d{1,2})(\.\d{1,2})?$
                  readOnly: false
                  type: number
                hours_wednesday:
                  example: 4
                  format: double
                  maximum: 24
                  minimum: 0
                  nullable: false
                  pattern: ^(\d{1,2})(\.\d{1,2})?$
                  readOnly: false
                  type: number
              type: object
            odd_weeks:
              properties:
                hours_friday:
                  example: 4
                  format: double
                  maximum: 24
                  minimum: 0
                  nullable: false
                  pattern: ^(\d{1,2})(\.\d{1,2})?$
                  readOnly: false
                  type: number
                hours_monday:
                  example: 8
                  format: double
                  maximum: 24
                  minimum: 0
                  nullable: false
                  pattern: ^(\d{1,2})(\.\d{1,2})?$
                  readOnly: false
                  type: number
                hours_saturday:
                  example: 0
                  format: double
                  maximum: 24
                  minimum: 0
                  nullable: false
                  pattern: ^(\d{1,2})(\.\d{1,2})?$
                  readOnly: false
                  type: number
                hours_sunday:
                  example: 0
                  format: double
                  maximum: 24
                  minimum: 0
                  nullable: false
                  pattern: ^(\d{1,2})(\.\d{1,2})?$
                  readOnly: false
                  type: number
                hours_thursday:
                  example: 7.5
                  format: double
                  maximum: 24
                  minimum: 0
                  nullable: false
                  pattern: ^(\d{1,2})(\.\d{1,2})?$
                  readOnly: false
                  type: number
                hours_tuesday:
                  example: 8
                  format: double
                  maximum: 24
                  minimum: 0
                  nullable: false
                  pattern: ^(\d{1,2})(\.\d{1,2})?$
                  readOnly: false
                  type: number
                hours_wednesday:
                  example: 4
                  format: double
                  maximum: 24
                  minimum: 0
                  nullable: false
                  pattern: ^(\d{1,2})(\.\d{1,2})?$
                  readOnly: false
                  type: number
              type: object
          type: object
      required:
        - id
        - start_date
        - end_date
        - work_pattern
      type: object
      x-apideck-schema-id: Schedule
      x-apideck-weights:
        end_date: critical
        id: critical
        start_date: critical
        work_pattern: critical
    Tax:
      properties:
        amount:
          description: The amount of the tax.
          example: 1.97
          type: number
        employer:
          description: Paid by employer.
          example: false
          type: boolean
        name:
          description: The name of the tax.
          example: CA State Income Tax
          type: string
      type: object
      x-apideck-schema-id: Tax
      x-apideck-weights:
        amount: high
        employer: high
        name: high
    TimeOffRequest:
      additionalProperties: false
      properties:
        amount:
          description: The amount of time off requested.
          example: 3.5
          type: number
        approval_date:
          description: The date the request was approved
          example: 2022-03-21
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
        created_at:
          $ref: "#/components/schemas/CreatedAt"
        created_by:
          $ref: "#/components/schemas/CreatedBy"
        description:
          description: Description of the time off request.
          example: Enjoying some sun.
          title: Description
          type: string
        employee_id:
          description: ID of the employee
          example: "12345"
          title: Employee ID
          type: string
        end_date:
          description: The end date of the time off request.
          example: 2022-04-01
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
        id:
          $ref: "#/components/schemas/Id"
        notes:
          properties:
            employee:
              example: Relaxing on the beach for a few hours.
              title: Employee note
              type: string
            manager:
              example: Enjoy!
              title: Manager note
              type: string
          type: object
        policy_id:
          description: ID of the policy
          example: "12345"
          title: Policy ID
          type: string
        request_date:
          description: The date the request was made.
          example: 2022-03-21
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
        request_type:
          description: The type of request
          enum:
            - vacaction
            - sick
            - personal
            - jury_duty
            - volunteer
            - bereavement
            - other
          example: vacaction
          type: string
          x-apideck-enum-id: time-off-requests.type
          x-graphql-type-name: TimeOffRequestType
        start_date:
          description: The start date of the time off request.
          example: 2022-04-01
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
        status:
          description: The status of the time off request.
          enum:
            - requested
            - approved
            - declined
            - cancelled
            - deleted
            - other
          example: approved
          title: Status
          type: string
          x-apideck-enum-id: time-off-requests.status
          x-graphql-type-name: TimeOffRequestStatus
        units:
          description: "The unit of time off requested. Possible values include: `hours`, `days`, or `other`."
          enum:
            - days
            - hours
            - other
          example: hours
          type: string
          x-apideck-enum-id: time-off-requests.units
          x-graphql-type-name: TimeOffRequestUnits
        updated_at:
          $ref: "#/components/schemas/UpdatedAt"
        updated_by:
          $ref: "#/components/schemas/UpdatedBy"
      type: object
      x-apideck-weights:
        created_at: medium
        created_by: edge-case
        id: high
        updated_at: medium
        updated_by: edge-case
    TimeOffRequestsFilter:
      additionalProperties: false
      example:
        end_date: 2022-04-21
        start_date: 2022-04-08
      properties:
        end_date:
          description: End date
          example: 2022-04-21
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
        start_date:
          description: Start date
          example: 2022-04-08
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
      type: object
      x-graphql-type-name: TimeOffRequestsFilter
    Title:
      example: CEO
      nullable: true
      title: Job title
      type: string
    TooManyRequestsResponse:
      properties:
        detail:
          properties:
            context:
              type: string
            error:
              additionalProperties: true
              type: object
          type: object
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 6585)
          example: Too Many Requests
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Connector Rate Limit Error
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#connectorratelimiterror
          type: string
        status_code:
          description: HTTP status code
          example: 429
          type: number
        type_name:
          description: The type of error returned
          example: ConnectorRateLimitError
          type: string
      type: object
      x-apideck-schema-id: TooManyRequests
    UnauthorizedResponse:
      properties:
        detail:
          description: Contains parameter or domain specific information related to the error and why it occurred.
          example: Failed to generate valid JWT Session. Verify applicationId is correct
          type: string
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Unauthorized
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Unauthorized Request
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#unauthorizederror
          type: string
        status_code:
          description: HTTP status code
          example: 401
          type: number
        type_name:
          description: The type of error returned
          example: UnauthorizedError
          type: string
      type: object
      x-apideck-schema-id: Unauthorized
    UnexpectedErrorResponse:
      properties:
        detail:
          anyOf:
            - example: "Missing Header: x-apideck-consumer-id"
              type: string
            - example:
                missing:
                  - x-apideck-consumer-id: required
              type: object
          description: Contains parameter or domain specific information related to the error and why it occurred.
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Bad Request
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Invalid Params
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#unauthorizederror
          type: string
        status_code:
          description: HTTP status code
          example: 400
          type: number
        type_name:
          description: The type of error returned
          example: RequestHeadersValidationError
          type: string
      type: object
      x-apideck-schema-id: Error
    UnifiedId:
      properties:
        id:
          example: "12345"
          readOnly: true
          type: string
      required:
        - id
      title: UnifiedId
      type: object
      x-apideck-schema-id: Id
    UnprocessableResponse:
      properties:
        detail:
          description: Contains parameter or domain specific information related to the error and why it occurred.
          example: Unprocessable request, please verify your request headers and body.
          type: string
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Unprocessable Entity
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Invalid State
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#invalidstateerror
          type: string
        status_code:
          description: HTTP status code
          example: 422
          type: number
        type_name:
          description: The type of error returned
          example: InvalidStateError
          type: string
      type: object
      x-apideck-schema-id: Unprocessable
    UpdateDepartmentResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: update
          type: string
        resource:
          description: Unified API resource name
          example: Departments
          type: string
        service:
          description: Apideck ID of service provider
          example: workday
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: UpdateDepartmentResponse
    UpdateEmployeeResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: update
          type: string
        resource:
          description: Unified API resource name
          example: Employees
          type: string
        service:
          description: Apideck ID of service provider
          example: sage-hr
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: UpdateEmployeeResponse
    UpdateHrisCompanyResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: update
          type: string
        resource:
          description: Unified API resource name
          example: Companies
          type: string
        service:
          description: Apideck ID of service provider
          example: undefined
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: UpdateHrisCompanyResponse
    UpdateTimeOffRequestResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: update
          type: string
        resource:
          description: Unified API resource name
          example: TimeOffRequests
          type: string
        service:
          description: Apideck ID of service provider
          example: bamboohr
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    UpdatedAt:
      example: 2020-09-30T07:43:32.000Z
      format: date-time
      readOnly: true
      title: Updated at (timestamp)
      type: string
    UpdatedBy:
      example: "12345"
      nullable: true
      readOnly: true
      type: string
    WebhookEvent:
      allOf:
        - properties:
            entity_id:
              description: The service provider's ID of the entity that triggered this event
              example: 123456ASDF
              type: string
            entity_type:
              description: The type entity that triggered this event
              example: Company
              type: string
            entity_url:
              description: The url to retrieve entity detail.
              example: https://unify.apideck.com/crm/contacts/123456
              type: string
            event_id:
              description: Unique reference to this request event
              example: 9755c355-56c3-4a2f-a2da-86ff4411fccb
              type: string
            execution_attempt:
              description: The current count this request event has been attempted
              example: 2
              type: number
            occurred_at:
              description: ISO Datetime for when the original event occurred
              example: 2021-10-01T03:14:55.419Z
              type: string
            service_id:
              description: Service provider identifier
              example: close
              type: string
          type: object
          x-apideck-schema-id: WebhookEvent
        - properties:
            event_type:
              $ref: "#/components/schemas/HrisEventType"
          type: object
      x-sdk-exclude: true
    Website:
      additionalProperties: false
      properties:
        id:
          example: "12345"
          nullable: true
          type: string
        type:
          enum:
            - primary
            - secondary
            - work
            - personal
            - other
          example: primary
          type: string
          x-apideck-enum-id: websites.type
          x-graphql-type-name: WebsiteType
        url:
          example: http://example.com
          minLength: 1
          type: string
      required:
        - url
      type: object
      x-apideck-schema-id: Website
      x-apideck-weights:
        id: edge-case
        type: critical
        url: critical
  securitySchemes:
    apiKey:
      description: |
        To use API you have to sign up and get your own API key. Unify API accounts have sandbox mode and live mode API keys. 
        To change modes just use the appropriate key to get a live or test object. You can find your API keys on the unify settings of your Apideck app.
        Your Apideck application_id can also be found on the same page.

        Authenticate your API requests by including your test or live secret API key in the request header. 

        - Bearer authorization header: `Authorization: Bearer <your-apideck-api-key>`
        - Application id header: `x-apideck-app-id: <your-apideck-app-id>`

        You should use the public keys on the SDKs and the secret keys to authenticate API requests.

        **Do not share or include your secret API keys on client side code.** Your API keys carry significant privileges. Please ensure to keep them 100% secure and be sure to not share your secret API keys in areas that are publicly accessible like GitHub.

        Learn how to set the Authorization header inside Postman https://learning.postman.com/docs/postman/sending-api-requests/authorization/#api-key

        Go to Unify to grab your API KEY https://app.apideck.com/unify/api-keys
      in: header
      name: Authorization
      type: apiKey
x-webhooks:
  CompanyCreated:
    post:
      description: Company created
      operationId: companyCreated
      parameters:
        - description: The type of event that was triggered
          in: header
          name: x-apideck-event-type
          required: true
          schema:
            $ref: "#/components/schemas/HrisEventType"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookEvent"
      responses:
        "200":
          description: Return a 200 status to indicate that the data was received successfully
      summary: Company created
      tags:
        - Webhook Events
      x-apideck-event-type: hris.company.created
  CompanyDeleted:
    post:
      description: Company deleted
      operationId: companyDeleted
      parameters:
        - description: The type of event that was triggered
          in: header
          name: x-apideck-event-type
          required: true
          schema:
            $ref: "#/components/schemas/HrisEventType"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookEvent"
      responses:
        "200":
          description: Return a 200 status to indicate that the data was received successfully
      summary: Company deleted
      tags:
        - Webhook Events
      x-apideck-event-type: hris.company.deleted
  CompanyUpdated:
    post:
      description: Company updated
      operationId: companyUpdated
      parameters:
        - description: The type of event that was triggered
          in: header
          name: x-apideck-event-type
          required: true
          schema:
            $ref: "#/components/schemas/HrisEventType"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookEvent"
      responses:
        "200":
          description: Return a 200 status to indicate that the data was received successfully
      summary: Company updated
      tags:
        - Webhook Events
      x-apideck-event-type: hris.company.updated
  EmployeeCreated:
    post:
      description: Employee created
      operationId: employeeCreated
      parameters:
        - description: The type of event that was triggered
          in: header
          name: x-apideck-event-type
          required: true
          schema:
            $ref: "#/components/schemas/HrisEventType"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookEvent"
      responses:
        "200":
          description: Return a 200 status to indicate that the data was received successfully
      summary: Employee created
      tags:
        - Webhook Events
      x-apideck-event-type: hris.employee.created
  EmployeeDeleted:
    post:
      description: Employee deleted
      operationId: employeeDeleted
      parameters:
        - description: The type of event that was triggered
          in: header
          name: x-apideck-event-type
          required: true
          schema:
            $ref: "#/components/schemas/HrisEventType"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookEvent"
      responses:
        "200":
          description: Return a 200 status to indicate that the data was received successfully
      summary: Employee deleted
      tags:
        - Webhook Events
      x-apideck-event-type: hris.employee.deleted
  EmployeeUpdated:
    post:
      description: Employee updated
      operationId: employeeUpdated
      parameters:
        - description: The type of event that was triggered
          in: header
          name: x-apideck-event-type
          required: true
          schema:
            $ref: "#/components/schemas/HrisEventType"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookEvent"
      responses:
        "200":
          description: Return a 200 status to indicate that the data was received successfully
      summary: Employee updated
      tags:
        - Webhook Events
      x-apideck-event-type: hris.employee.updated
  x-sdk-exclude: true

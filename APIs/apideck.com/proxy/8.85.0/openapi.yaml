openapi: 3.0.3
servers:
  - description: Production server
    url: https://unify.apideck.com
info:
  contact:
    email: hello@apideck.com
    url: https://developers.apideck.com
  description: |+
    Welcome to the Proxy API.

    You can use this API to access all Proxy API endpoints.

    ## Base URL

    The base URL for all API requests is `https://unify.apideck.com`

    ## Headers

    Custom headers that are expected as part of the request. Note that [RFC7230](https://tools.ietf.org/html/rfc7230) states header names are case insensitive.

    | Name                               | Type   | Required | Description |
    | ---------------------------------- | ------ | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
    | Authorization                      | String | Yes      | Bearer API KEY |
    | x-apideck-app-id                   | String | Yes      | The application id of your Unify application. Available at https://app.apideck.com/unify/api-keys. |
    | x-apideck-consumer-id              | String | Yes      | The id of the customer stored inside Apideck Vault. This can be a user id, account id, device id or whatever entity that can have integration within your app.                       |
    | x-apideck-downstream-url           | String | Yes      | Downstream URL to forward the request too |
    | x-apideck-downstream-authorization | String | No       | Downstream authorization header. This will skip the Vault token injection. |
    | x-apideck-downstream-method        | String | No       | Downstream method. If not provided the upstream method will be inherited, depending on the verb/method of the request this will contain the request body you want to POST/PATCH/PUT. |
    | x-apideck-service-id               | String | No       | Describe the service you want to call (e.g., pipedrive). Only needed when a customer has activated multiple integrations for the same Unified API.                                   |

    ## Authorization

    You can interact with the API through the authorization methods below.

    ### apiKey

    To use API you have to sign up and get your own API key. Unify API accounts have sandbox mode and live mode API keys. To change modes just use the appropriate key to get a live or test object. You can find your API keys on the unify settings of your Apideck app. Your Apideck application_id can also be found on the same page.

    Authenticate your API requests by including your test or live secret API key in the request header.

    - Bearer authorization header: Authorization: Bearer <your-apideck-api-key>
    - Application id header: x-apideck-app-id: <your-apideck-app-id>
      You should use the public keys on the SDKs and the secret keys to authenticate API requests.

    **Do not share or include your secret API keys on client side code.** Your API keys carry significant privileges. Please ensure to keep them 100% secure and be sure to not share your secret API keys in areas that are publicly accessible like GitHub.

    Learn how to set the Authorization header inside Postman https://learning.postman.com/docs/postman/sending-api-requests/authorization/#api-key

    Go to Unify to grab your API KEY https://app.apideck.com/unify/api-keys

    | Security Scheme Type      | HTTP   |
    | ------------------------- | ------ |
    | HTTP Authorization Scheme | bearer |

    ### applicationId

    The ID of your Unify application

    | Security Scheme Type  | API Key          |
    | --------------------- | ---------------- |
    | Header parameter name | x-apideck-app-id |

    ## Static IP

    Some of the APIs you want to use can require a static IP. Apideck's static IP feature allows you to the Proxy API with a fixed IP avoiding the need for you to set up your own infrastructure. This feature is currently available to all Apideck customers.
    To use this feature, the API Vendor will need to whitelist the associated static IP addresses.
    The provided static IP addresses are fixed to their specified region and shared by all customers who use this feature.

    - EU Central 1: **18.197.244.247**
    - Other: upcoming

      More info about our data security can be found at [https://compliance.apideck.com/](https://compliance.apideck.com/)

    ## Limitations

    ### Timeout

    The request timeout is set at 30 seconds.

    ### Response Size

    The Proxy API has no response size limit. For responses larger than 2MB, the Proxy API will redirect to a temporary URL. In this case the usual Apideck response headers will be returned in the redirect response. Most HTTP clients will handle this redirect automatically.

    ```
    GET /proxy
    < 301 Moved Permanently
    < x-apideck-request-id: {{requestId}}
    < Location: {{temporaryUrl}}

    GET {{temporaryUrl}}
    < {{responseBody}}
    ```

    ## SDKs and API Clients

    Upcoming. [Request the SDK of your choice](https://integrations.apideck.com/request).

    ## Errors

    The API returns standard HTTP response codes to indicate success or failure of the API requests. For errors, we also return a customized error message inside the JSON response. You can see the returned HTTP status codes below.

    | Code | Title                | Description |
    | ---- | -------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
    | 200  | OK                   | The request message has been successfully processed, and it has produced a response. The response message varies, depending on the request method and the requested data.                                |
    | 201  | Created              | The request has been fulfilled and has resulted in one or more new resources being created. |
    | 204  | No Content           | The server has successfully fulfilled the request and that there is no additional content to send in the response payload body. |
    | 400  | Bad Request          | The receiving server cannot understand the request because of malformed syntax. Do not repeat the request without first modifying it; check the request for errors, fix them and then retry the request. |
    | 401  | Unauthorized         | The request has not been applied because it lacks valid authentication credentials for the target resource. |
    | 402  | Payment Required     | Subscription data is incomplete or out of date. You'll need to provide payment details to continue. |
    | 403  | Forbidden            | You do not have the appropriate user rights to access the request. Do not repeat the request. |
    | 404  | Not Found            | The origin server did not find a current representation for the target resource or is not willing to disclose that one exists. |
    | 409  | Conflict             | The request could not be completed due to a conflict with the current state of the target resource. |
    | 422  | Unprocessable Entity | The server understands the content type of the request entity, and the syntax of the request entity is correct but was unable to process the contained instructions.                                     |
    | 429  | Too Many Requests    | You sent too many requests in a given amount of time ("rate limit"). Try again later. |
    | 5xx  | Server Errors        | Something went wrong with the Unify API. These errors are logged on our side. You can contact our team to resolve the issue. |

    ### Handling errors

    The Unify API and SDKs can produce errors for many reasons, such as a failed requests due to misconfigured integrations, invalid parameters, authentication errors, and network unavailability.

    ### Error Types

    #### RequestValidationError

    Request is not valid for the current endpoint. The response body will include details on the validation error. Check the spelling and types of your attributes, and ensure you are not passing data that is outside of the specification.

    #### UnsupportedFiltersError

    Filters in the request are valid, but not supported by the connector. Remove the unsupported filter(s) to get a successful response.

    #### InvalidCursorError

    Pagination cursor in the request is not valid for the current connector. Make sure to use a cursor returned from the API, for the same connector.

    #### ConnectorExecutionError

    A Unified API request made via one of our downstream connectors returned an unexpected error. The `status_code` returned is proxied through to error response along with their original response via the error detail.

    #### UnauthorizedError

    We were unable to authorize the request as made. This can happen for a number of reasons, from missing header params to passing an incorrect authorization token. Verify your Api Key is being set correctly in the authorization header. ie: `Authorization: 'Bearer sk_live_***'`

    #### ConnectorCredentialsError

    A request using a given connector has not been authorized. Ensure the connector you are trying to use has been configured correctly and been authorized for use.

    #### ConnectorDisabledError

    A request has been made to a connector that has since been disabled. This may be temporary - You can contact our team to resolve the issue.

    #### RequestLimitError

    You have reached the number of requests included in your Free Tier Subscription. You will no be able to make further requests until this limit resets at the end of the month, or talk to us about upgrading your subscription to continue immediately.

    #### EntityNotFoundError

    You've made a request for a resource or route that does not exist. Verify your path parameters or any identifiers used to fetch this resource.

    #### OAuthCredentialsNotFoundError

    When adding a connector integration that implements OAuth, both a `client_id` and `client_secret` must be provided before any authorizations can be performed. Verify the integration has been configured properly before continuing.

    #### IntegrationNotFoundError

    The requested connector integration could not be found associated to your `application_id`. Verify your `application_id` is correct, and that this connector has been added and configured for your application.

    #### ConnectionNotFoundError

    A valid connection could not be found associated to your `application_id`. Something _may_ have interrupted the authorization flow. You may need to start the connector authorization process again.

    #### ConnectorNotFoundError

    A request was made for an unknown connector. Verify your `service_id` is spelled correctly, and that this connector is enabled for your provided `unified_api`.

    #### OAuthRedirectUriError

    A request was made either in a connector authorization flow, or attempting to revoke connector access without a valid `redirect_uri`. This is the url the user should be returned to on completion of process.

    #### OAuthInvalidStateError

    The state param is required and is used to ensure the outgoing authorization state has not been altered before the user is redirected back. It also contains required params needed to identify the connector being used. If this has been altered, the authorization will not succeed.

    #### OAuthCodeExchangeError

    When attempting to exchange the authorization code for an `access_token` during an OAuth flow, an error occurred. This may be temporary. You can reattempt authorization or contact our team to resolve the issue.

    #### OAuthConnectorError

    It seems something went wrong on the connector side. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.

    #### MappingError

    There was an error attempting to retrieve the mapping for a given attribute. We've been notified and are working to fix this issue.

    #### ConnectorMappingNotFoundError

    It seems the implementation for this connector is incomplete. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.

    #### ConnectorResponseMappingNotFoundError

    We were unable to retrieve the response mapping for this connector. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.

    #### ConnectorOperationMappingNotFoundError

    Connector mapping has not been implemented for the requested operation. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.

    #### ConnectorWorkflowMappingError

    The composite api calls required for this operation have not been mapped entirely. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.

    #### PaginationNotSupportedError

    Pagination is not yet supported for this connector, try removing limit and/or cursor from the query. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.

    ## API Design

    ### API Styles and data formats

    #### REST API

    The API is organized around [REST](https://restfulapi.net/), providing simple and predictable URIs to access and modify objects. Requests support standard HTTP methods like GET, PUT, POST, and DELETE and standard status codes. JSON is returned by all API responses, including errors. In all API requests, you must set the content-type HTTP header to application/json. All API requests must be made over HTTPS. Calls made over HTTP will fail.

    ### Request IDs

    Each API request has an associated request identifier. You can find this value in the response headers, under Request-Id. You can also find request identifiers in the URLs of individual request logs in your Dashboard. If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution.

    ## Support

    If you have problems or need help with your case, you can always reach out to our Support.

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Proxy API
  version: 8.85.0
  x-apideck-api: proxy
  x-apisguru-categories:
    - developer_tools
  x-logo:
    url: https://developers.apideck.com/icon.png
  x-origin:
    - format: openapi
      url: https://raw.githubusercontent.com/apideck-libraries/openapi-specs/master/proxy.yml
      version: "3.0"
  x-providerName: apideck.com
  x-serviceName: proxy
  x-tags:
    - partner
externalDocs:
  description: Apideck Developer Docs
  url: https://developers.apideck.com
security:
  - apiKey: []
    applicationId: []
tags:
  - description: ""
    name: Execute
paths:
  /proxy:
    delete:
      description: |
        Proxies a downstream DELETE request to a service and injects the necessary credentials into a request stored in Vault. This allows you to have an additional security layer and logging without needing to rely on Unify for normalization.
        **Note**: Vault will proxy all data to the downstream URL and method/verb in the headers.
      operationId: deleteProxy
      parameters:
        - $ref: "#/components/parameters/x-apideck-consumer-id"
        - $ref: "#/components/parameters/x-apideck-app-id"
        - $ref: "#/components/parameters/x-apideck-service-id"
        - $ref: "#/components/parameters/x-apideck-downstream-url"
        - $ref: "#/components/parameters/x-apideck-downstream-authorization"
      responses:
        "200":
          $ref: "#/components/responses/Ok"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ProxyError"
      security:
        - apiKey: []
      summary: DELETE
      tags:
        - Execute
      x-graphql-exclude: true
      x-sdk-exclude: true
    get:
      description: |
        Proxies a downstream GET request to a service and injects the necessary credentials into a request stored in Vault. This allows you to have an additional security layer and logging without needing to rely on Unify for normalization.
        **Note**: Vault will proxy all data to the downstream URL and method/verb in the headers.
      operationId: getProxy
      parameters:
        - $ref: "#/components/parameters/x-apideck-consumer-id"
        - $ref: "#/components/parameters/x-apideck-app-id"
        - $ref: "#/components/parameters/x-apideck-service-id"
        - $ref: "#/components/parameters/x-apideck-downstream-url"
        - $ref: "#/components/parameters/x-apideck-downstream-authorization"
      responses:
        "200":
          $ref: "#/components/responses/Ok"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ProxyError"
      security:
        - apiKey: []
      summary: GET
      tags:
        - Execute
      x-graphql-exclude: true
      x-sdk-exclude: true
    options:
      description: |
        Proxies a downstream OPTION request to a service and injects the necessary credentials into a request stored in Vault. This allows you to have an additional security layer and logging without needing to rely on Unify for normalization.
        **Note**: Vault will proxy all data to the downstream URL and method/verb in the headers.
      operationId: optionsProxy
      parameters:
        - $ref: "#/components/parameters/x-apideck-consumer-id"
        - $ref: "#/components/parameters/x-apideck-app-id"
        - $ref: "#/components/parameters/x-apideck-service-id"
        - $ref: "#/components/parameters/x-apideck-downstream-url"
        - $ref: "#/components/parameters/x-apideck-downstream-authorization"
      responses:
        "200":
          $ref: "#/components/responses/Ok"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ProxyError"
      security:
        - apiKey: []
      summary: OPTIONS
      tags:
        - Execute
      x-graphql-exclude: true
      x-sdk-exclude: true
    patch:
      description: |
        Proxies a downstream PATCH request to a service and injects the necessary credentials into a request stored in Vault. This allows you to have an additional security layer and logging without needing to rely on Unify for normalization.
        **Note**: Vault will proxy all data to the downstream URL and method/verb in the headers.
      operationId: patchProxy
      parameters:
        - $ref: "#/components/parameters/x-apideck-consumer-id"
        - $ref: "#/components/parameters/x-apideck-app-id"
        - $ref: "#/components/parameters/x-apideck-service-id"
        - $ref: "#/components/parameters/x-apideck-downstream-url"
        - $ref: "#/components/parameters/x-apideck-downstream-authorization"
      requestBody:
        content:
          "*/*":
            schema:
              anyOf:
                - example:
                    addresses:
                      - address_1: 747 Howard St
                        address_2: Room 3
                        city: San Francisco
                        country: US
                        label: business
                        state: CA
                        zipcode: "94103"
                    contacts:
                      - emails:
                          - email: gob@example.com
                            type: office
                        name: Gob
                        phones:
                          - phone: "8004445555"
                            type: office
                        title: Sr. Vice President
                    description: Best. Show. Ever.
                    name: Bluth Company
                    url: http://thebluthcompany.tumblr.com/
                  properties: {}
                  type: object
                - type: string
        description: Depending on the verb/method of the request this will contain the request body you want to POST/PATCH/PUT.
        required: false
      responses:
        "200":
          $ref: "#/components/responses/Ok"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ProxyError"
      security:
        - apiKey: []
      summary: PATCH
      tags:
        - Execute
      x-graphql-exclude: true
      x-sdk-exclude: true
    post:
      description: |
        Proxies a downstream POST request to a service and injects the necessary credentials into a request stored in Vault. This allows you to have an additional security layer and logging without needing to rely on Unify for normalization.
        **Note**: Vault will proxy all data to the downstream URL and method/verb in the headers.
      operationId: postProxy
      parameters:
        - $ref: "#/components/parameters/x-apideck-consumer-id"
        - $ref: "#/components/parameters/x-apideck-app-id"
        - $ref: "#/components/parameters/x-apideck-service-id"
        - $ref: "#/components/parameters/x-apideck-downstream-url"
        - $ref: "#/components/parameters/x-apideck-downstream-authorization"
      requestBody:
        content:
          "*/*":
            schema:
              anyOf:
                - example:
                    addresses:
                      - address_1: 747 Howard St
                        address_2: Room 3
                        city: San Francisco
                        country: US
                        label: business
                        state: CA
                        zipcode: "94103"
                    contacts:
                      - emails:
                          - email: gob@example.com
                            type: office
                        name: Gob
                        phones:
                          - phone: "8004445555"
                            type: office
                        title: Sr. Vice President
                    description: Best. Show. Ever.
                    name: Bluth Company
                    url: http://thebluthcompany.tumblr.com/
                  properties: {}
                  type: object
                - type: string
        description: Depending on the verb/method of the request this will contain the request body you want to POST/PATCH/PUT.
        required: false
      responses:
        "200":
          $ref: "#/components/responses/Ok"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ProxyError"
      security:
        - apiKey: []
      summary: POST
      tags:
        - Execute
      x-graphql-exclude: true
      x-sdk-exclude: true
    put:
      description: |
        Proxies a downstream PUT request to a service and injects the necessary credentials into a request stored in Vault. This allows you to have an additional security layer and logging without needing to rely on Unify for normalization.
        **Note**: Vault will proxy all data to the downstream URL and method/verb in the headers.
      operationId: putProxy
      parameters:
        - $ref: "#/components/parameters/x-apideck-consumer-id"
        - $ref: "#/components/parameters/x-apideck-app-id"
        - $ref: "#/components/parameters/x-apideck-service-id"
        - $ref: "#/components/parameters/x-apideck-downstream-url"
        - $ref: "#/components/parameters/x-apideck-downstream-authorization"
      requestBody:
        content:
          "*/*":
            schema:
              anyOf:
                - example:
                    addresses:
                      - address_1: 747 Howard St
                        address_2: Room 3
                        city: San Francisco
                        country: US
                        label: business
                        state: CA
                        zipcode: "94103"
                    contacts:
                      - emails:
                          - email: gob@example.com
                            type: office
                        name: Gob
                        phones:
                          - phone: "8004445555"
                            type: office
                        title: Sr. Vice President
                    description: Best. Show. Ever.
                    name: Rich Company
                    url: http://therichcompany.tumblr.com/
                  properties: {}
                  type: object
                - type: string
        description: Depending on the verb/method of the request this will contain the request body you want to POST/PATCH/PUT.
        required: false
      responses:
        "200":
          $ref: "#/components/responses/Ok"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ProxyError"
      security:
        - apiKey: []
      summary: PUT
      tags:
        - Execute
      x-graphql-exclude: true
      x-sdk-exclude: true
components:
  parameters:
    id:
      description: ID of the record you are acting upon.
      in: path
      name: id
      required: true
      schema:
        type: string
    raw:
      description: Include raw response. Mostly used for debugging purposes
      in: query
      name: raw
      schema:
        default: false
        type: boolean
    x-apideck-app-id:
      description: The ID of your Unify application
      in: header
      name: x-apideck-app-id
      required: true
      schema:
        type: string
    x-apideck-consumer-id:
      description: ID of the consumer which you want to get or push data from
      in: header
      name: x-apideck-consumer-id
      required: true
      schema:
        type: string
    x-apideck-downstream-authorization:
      description: Downstream authorization header. This will skip the Vault token injection.
      example: Bearer XXXXXXXXXXXXXXXXX
      in: header
      name: x-apideck-downstream-authorization
      required: false
      schema:
        type: string
    x-apideck-downstream-method:
      description: Downstream method. If not provided the upstream method will be inherited,
      example: GET
      in: header
      name: x-apideck-downstream-method
      required: false
      schema:
        type: string
    x-apideck-downstream-url:
      description: Downstream URL
      example: https://api.close.com/api/v1/lead
      in: header
      name: x-apideck-downstream-url
      required: true
      schema:
        type: string
    x-apideck-service-id:
      description: Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
      example: close
      in: header
      name: x-apideck-service-id
      required: true
      schema:
        type: string
  responses:
    Ok:
      content:
        application/json:
          example: {}
          schema: {}
      description: Ok
    ProxyError:
      content:
        application/json:
          schema: {}
      description: Proxy error
      headers:
        x-apideck-downstream-error:
          schema:
            description: Indicates if the error returned in the body is from the downstream
            type: boolean
    Unauthorized:
      content:
        application/json:
          schema:
            properties:
              detail:
                description: Contains parameter or domain specific information related to the error and why it occurred.
                example: Failed to generate valid JWT Session. Verify applicationId is correct
                type: string
              error:
                description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
                example: Unauthorized
                type: string
              message:
                description: A human-readable message providing more details about the error.
                example: Unauthorized Request
                type: string
              ref:
                description: Link to documentation of error type
                example: https://developers.apideck.com/errors#unauthorizederror
                type: string
              status_code:
                description: HTTP status code
                example: 401
                type: number
              type_name:
                description: The type of error returned
                example: UnauthorizedError
                type: string
            type: object
            x-apideck-schema-id: Unauthorized
      description: Unauthorized
  securitySchemes:
    apiKey:
      description: |
        To use API you have to sign up and get your own API key. Unify API accounts have sandbox mode and live mode API keys. 
        To change modes just use the appropriate key to get a live or test object. You can find your API keys on the unify settings of your Apideck app.
        Your Apideck application_id can also be found on the same page.

        Authenticate your API requests by including your test or live secret API key in the request header. 

        - Bearer authorization header: `Authorization: Bearer <your-apideck-api-key>`
        - Application id header: `x-apideck-app-id: <your-apideck-app-id>`

        You should use the public keys on the SDKs and the secret keys to authenticate API requests.

        **Do not share or include your secret API keys on client side code.** Your API keys carry significant privileges. Please ensure to keep them 100% secure and be sure to not share your secret API keys in areas that are publicly accessible like GitHub.

        Learn how to set the Authorization header inside Postman https://learning.postman.com/docs/postman/sending-api-requests/authorization/#api-key

        Go to Unify to grab your API KEY https://app.apideck.com/unify/api-keys
      in: header
      name: Authorization
      type: apiKey
    applicationId:
      description: The ID of your Unify application
      in: header
      name: x-apideck-app-id
      type: apiKey

openapi: 3.0.0
servers:
  - url: https://unify.apideck.com
info:
  contact:
    email: hello@apideck.com
    url: https://developers.apideck.com
  description: |+
    Welcome to the SMS API.

    You can use this API to access all SMS API endpoints.

    ## Base URL

    The base URL for all API requests is `https://unify.apideck.com`

    We also provide a [Mock API](https://developers.apideck.com/mock-api) that can be used for testing purposes: `https://mock-api.apideck.com`

    ## GraphQL

    Use the [GraphQL playground](https://developers.apideck.com/graphql/playground) to test out the GraphQL API.

    ## Headers

    Custom headers that are expected as part of the request. Note that [RFC7230](https://tools.ietf.org/html/rfc7230) states header names are case insensitive.

    | Name                  | Type    | Required | Description                                                                                                                                                    |
    | --------------------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- |
    | x-apideck-consumer-id | String  | Yes      | The id of the customer stored inside Apideck Vault. This can be a user id, account id, device id or whatever entity that can have integration within your app. |
    | x-apideck-service-id  | String  | No       | Describe the service you want to call (e.g., pipedrive). Only needed when a customer has activated multiple integrations for the same Unified API.             |
    | x-apideck-raw         | Boolean | No       | Include raw response. Mostly used for debugging purposes.                                                                                                      |
    | x-apideck-app-id      | String  | Yes      | The application id of your Unify application. Available at https://app.apideck.com/unify/api-keys.                                                             |
    | Authorization         | String  | Yes      | Bearer API KEY                                                                                                                                                 |

    ## Authorization

    You can interact with the API through the authorization methods below.

    <!-- ReDoc-Inject: <security-definitions> -->

    ## Pagination

    All API resources have support for bulk retrieval via list APIs.  Apideck uses cursor-based pagination via the optional `cursor` and `limit` parameters.

    To fetch the first page of results, call the list API without a `cursor` parameter. Afterwards you can fetch subsequent pages by providing a cursor parameter. You will find the next cursor in the response body in `meta.cursors.next`. If `meta.cursors.next` is `null` you're at the end of the list.

    In the REST API you can also use the `links` from the response for added convenience. Simply call the URL in `links.next` to get the next page of results.

    ### Query Parameters

    | Name   | Type   | Required | Description                                                                                                        |
    | ------ | ------ | -------- | ------------------------------------------------------------------------------------------------------------------ |
    | cursor | String | No       | Cursor to start from. You can find cursors for next & previous pages in the meta.cursors property of the response. |
    | limit  | Number | No       | Number of results to return. Minimum 1, Maximum 200, Default 20                                                    |

    ### Response Body

    | Name                  | Type   | Description                                                        |
    | --------------------- | ------ | ------------------------------------------------------------------ |
    | meta.cursors.previous | String | Cursor to navigate to the previous page of results through the API |
    | meta.cursors.current  | String | Cursor to navigate to the current page of results through the API  |
    | meta.cursors.next     | String | Cursor to navigate to the next page of results through the API     |
    | meta.items_on_page    | Number | Number of items returned in the data property of the response      |
    | links.previous        | String | Link to navigate to the previous page of results through the API   |
    | links.current         | String | Link to navigate to the current page of results through the API    |
    | links.next            | String | Link to navigate to the next page of results through the API       |

    ⚠️ `meta.cursors.previous`/`links.previous` is not available for all connectors.

    ## SDKs and API Clients

    We currently offer a [Node.js](https://developers.apideck.com/sdks/node), [PHP](https://developers.apideck.com/sdks/php) and [.NET](https://developers.apideck.com/sdks/dot-net) SDK.
    Need another SDK? [Request the SDK of your choice](https://integrations.apideck.com/request).

    ## Debugging

    Because of the nature of the abstraction we do in Apideck Unify we still provide the option to the receive raw requests and responses being handled underlying. By including the raw flag `?raw=true` in your requests you can still receive the full request. Please note that this increases the response size and can introduce extra latency.

    ## Errors

    The API returns standard HTTP response codes to indicate success or failure of the API requests. For errors, we also return a customized error message inside the JSON response. You can see the returned HTTP status codes below.

    | Code | Title                | Description                                                                                                                                                                                              |
    | ---- | -------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
    | 200  | OK                   | The request message has been successfully processed, and it has produced a response. The response message varies, depending on the request method and the requested data.                                |
    | 201  | Created              | The request has been fulfilled and has resulted in one or more new resources being created.                                                                                                              |
    | 204  | No Content           | The server has successfully fulfilled the request and that there is no additional content to send in the response payload body.                                                                          |
    | 400  | Bad Request          | The receiving server cannot understand the request because of malformed syntax. Do not repeat the request without first modifying it; check the request for errors, fix them and then retry the request. |
    | 401  | Unauthorized         | The request has not been applied because it lacks valid authentication credentials for the target resource.                                                                                              |
    | 402  | Payment Required     | Subscription data is incomplete or out of date. You'll need to provide payment details to continue.                                                                                                      |
    | 403  | Forbidden            | You do not have the appropriate user rights to access the request. Do not repeat the request.                                                                                                            |
    | 404  | Not Found            | The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.                                                                           |
    | 409  | Conflict             | The request could not be completed due to a conflict with the current state of the target resource.                                                                                                      |
    | 422  | Unprocessable Entity | The server understands the content type of the request entity, and the syntax of the request entity is correct but was unable to process the contained instructions.                                     |
    | 429  | Too Many Requests    | You sent too many requests in a given amount of time ("rate limit"). Try again later                                                                                                                     |
    | 5xx  | Server Errors        | Something went wrong with the Unify API. These errors are logged on our side. You can contact our team to resolve the issue.                                                                             |

    ### Handling errors

    The Unify API and SDKs can produce errors for many reasons, such as a failed requests due to misconfigured integrations, invalid parameters, authentication errors, and network unavailability.

    ### Error Types

    #### RequestValidationError

    Request is not valid for the current endpoint. The response body will include details on the validation error. Check the spelling and types of your attributes, and ensure you are not passing data that is outside of the specification.

    #### UnsupportedFiltersError

    Filters in the request are valid, but not supported by the connector. Remove the unsupported filter(s) to get a successful response.

    #### UnsupportedSortFieldError

    Sort field (`sort[by]`) in the request is valid, but not supported by the connector. Replace or remove the sort field to get a successful response.

    #### InvalidCursorError

    Pagination cursor in the request is not valid for the current connector. Make sure to use a cursor returned from the API, for the same connector.

    #### ConnectorExecutionError

    A Unified API request made via one of our downstream connectors returned an unexpected error. The `status_code` returned is proxied through to error response along with their original response via the error detail.

    #### UnauthorizedError

    We were unable to authorize the request as made. This can happen for a number of reasons, from missing header params to passing an incorrect authorization token. Verify your Api Key is being set correctly in the authorization header. ie: `Authorization: 'Bearer sk_live_***'`

    #### ConnectorCredentialsError

    A request using a given connector has not been authorized. Ensure the connector you are trying to use has been configured correctly and been authorized for use.

    #### ConnectorDisabledError

    A request has been made to a connector that has since been disabled. This may be temporary - You can contact our team to resolve the issue.

    #### ConnectorRateLimitError

    You sent too many request to a connector. These rate limits vary from connector to connector. You will need to try again later.

    #### RequestLimitError

    You have reached the number of requests included in your Free Tier Subscription. You will no be able to make further requests until this limit resets at the end of the month, or talk to us about upgrading your subscription to continue immediately.

    #### EntityNotFoundError

    You've made a request for a resource or route that does not exist. Verify your path parameters or any identifiers used to fetch this resource.

    #### OAuthCredentialsNotFoundError

    When adding a connector integration that implements OAuth, both a `client_id` and `client_secret` must be provided before any authorizations can be performed. Verify the integration has been configured properly before continuing.

    #### IntegrationNotFoundError

    The requested connector integration could not be found associated to your `application_id`. Verify your `application_id` is correct, and that this connector has been added and configured for your application.

    #### ConnectionNotFoundError

    A valid connection could not be found associated to your `application_id`. Something _may_ have interrupted the authorization flow. You may need to start the connector authorization process again.

    #### ConnectionSettingsError

    The connector has required settings that were not supplied. Verify `connection.settings` contains all required settings for the connector to be callable.

    #### ConnectorNotFoundError

    A request was made for an unknown connector. Verify your `service_id` is spelled correctly, and that this connector is enabled for your provided `unified_api`.

    #### OAuthRedirectUriError

    A request was made either in a connector authorization flow, or attempting to revoke connector access without a valid `redirect_uri`. This is the url the user should be returned to on completion of process.

    #### OAuthInvalidStateError

    The state param is required and is used to ensure the outgoing authorization state has not been altered before the user is redirected back. It also contains required params needed to identify the connector being used. If this has been altered, the authorization will not succeed.

    #### OAuthCodeExchangeError

    When attempting to exchange the authorization code for an `access_token` during an OAuth flow, an error occurred. This may be temporary. You can reattempt authorization or contact our team to resolve the issue.

    #### OAuthConnectorError

    It seems something went wrong on the connector side. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.

    #### MappingError

    There was an error attempting to retrieve the mapping for a given attribute. We've been notified and are working to fix this issue.

    #### ConnectorMappingNotFoundError

    It seems the implementation for this connector is incomplete. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.

    #### ConnectorResponseMappingNotFoundError

    We were unable to retrieve the response mapping for this connector. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.

    #### ConnectorOperationMappingNotFoundError

    Connector mapping has not been implemented for the requested operation. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.

    #### ConnectorWorkflowMappingError

    The composite api calls required for this operation have not been mapped entirely. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.

    #### ConnectorOperationUnsupportedError

    You're attempting a call that is not supported by the connector. It's likely this operation is supported by another connector, but we're unable to implement for this one.

    #### PaginationNotSupportedError

    Pagination is not yet supported for this connector, try removing limit and/or cursor from the query. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.

    ## API Design

    ### API Styles and data formats

    #### REST API

    The API is organized around [REST](https://restfulapi.net/), providing simple and predictable URIs to access and modify objects. Requests support standard HTTP methods like GET, PUT, POST, and DELETE and standard status codes. JSON is returned by all API responses, including errors. In all API requests, you must set the content-type HTTP header to application/json. All API requests must be made over HTTPS. Calls made over HTTP will fail.

    ##### Available HTTP methods

    The Apideck API uses HTTP verbs to understand if you want to read (GET), delete (DELETE) or create (POST) an object. When your web application cannot do a POST or DELETE, we provide the ability to set the method through the query parameter \_method.

    ```
    POST /messages
    GET /messages
    GET /messages/{messageId}
    PATCH /messages/{messageId}
    DELETE /messages/{messageId}
    ```

    Response bodies are always UTF-8 encoded JSON objects, unless explicitly documented otherwise. For some endpoints and use cases we divert from REST to provide a better developer experience.

    ### Schema

    All API requests and response bodies adhere to a common JSON format representing individual items, collections of items, links to related items and additional meta data.

    ### Meta

    Meta data can be represented as a top level member named “meta”. Any information may be provided in the meta data. It’s most common use is to return the total number of records when requesting a collection of resources.

    ### Idempotence (upcoming)

    To prevent the creation of duplicate resources, every POST method (such as one that creates a consumer record) must specify a unique value for the X-Unique-Transaction-ID header name. Uniquely identifying each unique POST request ensures that the API processes a given request once and only once.

    Uniquely identifying new resource-creation POSTs is especially important when the outcome of a response is ambiguous because of a transient service interruption, such as a server-side timeout or network disruption. If a service interruption occurs, then the client application can safely retry the uniquely identified request without creating duplicate operations. (API endpoints that guarantee that every uniquely identified request is processed only once no matter how many times that uniquely identifiable request is made are described as idempotent.)

    ### Request IDs

    Each API request has an associated request identifier. You can find this value in the response headers, under Request-Id. You can also find request identifiers in the URLs of individual request logs in your Dashboard. If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution.

    ### Fixed field types

    #### Dates

    The dates returned by the API are all represented in UTC (ISO8601 format).

    This example `2019-11-14T00:55:31.820Z` is defined by the ISO 8601 standard. The T in the middle separates the year-month-day portion from the hour-minute-second portion. The Z on the end means UTC, that is, an offset-from-UTC of zero hours-minutes-seconds. The Z is pronounced "Zulu" per military/aviation tradition.

    The ISO 8601 standard is more modern. The formats are wisely designed to be easy to parse by machine as well as easy to read by humans across cultures.

    #### Prices and Currencies

    All prices returned by the API are represented as integer amounts in a currency’s smallest unit. For example, $5 USD would be returned as 500 (i.e, 500 cents).

    For zero-decimal currencies, amounts will still be provided as an integer but without the need to divide by 100. For example, an amount of ¥5 (JPY) would be returned as 5.

    All currency codes conform to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).

    ## Support

    If you have problems or need help with your case, you can always reach out to our Support.

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: SMS API
  version: 8.70.2
  x-apideck-api: sms
  x-apideck-sdk-support: true
  x-apisguru-categories:
    - developer_tools
  x-logo:
    url: https://developers.apideck.com/icon.png
  x-origin:
    - format: openapi
      url: https://raw.githubusercontent.com/apideck-libraries/openapi-specs/master/sms.yml
      version: "3.0"
  x-providerName: apideck.com
  x-serviceName: sms
  x-tags:
    - partner
externalDocs:
  description: Apideck Developer Docs
  url: https://developers.apideck.com
security:
  - apiKey: []
tags:
  - description: ""
    name: Messages
    x-apideck-model:
      $ref: "#/components/schemas/Message"
    x-apideck-resource-id: messages
paths:
  /sms/messages:
    get:
      description: List Messages
      operationId: messagesAll
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/cursor"
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          $ref: "#/components/responses/GetMessagesResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: List Messages
      tags:
        - Messages
      x-apideck-api: sms
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.sms.messagesAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: messages
    post:
      description: Create Message
      operationId: messagesAdd
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Message"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/CreateMessageResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Create Message
      tags:
        - Messages
      x-apideck-api: sms
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              message: {
                from: '+15017122661',
                to: '+15017122662',
                subject: 'Picture',
                body: 'Hi! How are you doing?',
                type: 'sms',
                scheduled_at: '2020-09-30T07:43:32.000Z',
                webhook_url: 'https://unify.apideck.com/webhook/webhooks/eyz329dkffdl4949/x/sms',
                reference: 'CUST001',
                messaging_service_id: '123456'
              }
            }

            try {
              const { data } = await apideck.sms.messagesAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  "/sms/messages/{id}":
    delete:
      description: Delete Message
      operationId: messagesDelete
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/DeleteMessageResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Delete Message
      tags:
        - Messages
      x-apideck-api: sms
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.sms.messagesDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    get:
      description: Get Message
      operationId: messagesOne
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/GetMessageResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Get Message
      tags:
        - Messages
      x-apideck-api: sms
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.sms.messagesOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      description: Update Message
      operationId: messagesUpdate
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Message"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/UpdateMessageResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Update Message
      tags:
        - Messages
      x-apideck-api: sms
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              message: {
                from: '+15017122661',
                to: '+15017122662',
                subject: 'Picture',
                body: 'Hi! How are you doing?',
                type: 'sms',
                scheduled_at: '2020-09-30T07:43:32.000Z',
                webhook_url: 'https://unify.apideck.com/webhook/webhooks/eyz329dkffdl4949/x/sms',
                reference: 'CUST001',
                messaging_service_id: '123456'
              }
            }

            try {
              const { data } = await apideck.sms.messagesUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
components:
  parameters:
    applicationId:
      description: The ID of your Unify application
      in: header
      name: x-apideck-app-id
      required: true
      schema:
        type: string
    consumerId:
      description: ID of the consumer which you want to get or push data from
      in: header
      name: x-apideck-consumer-id
      required: true
      schema:
        type: string
    cursor:
      description: Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
      in: query
      name: cursor
      schema:
        nullable: true
        type: string
    id:
      description: ID of the record you are acting upon.
      in: path
      name: id
      required: true
      schema:
        type: string
    limit:
      description: Number of records to return
      in: query
      name: limit
      schema:
        default: 20
        maximum: 200
        minimum: 1
        type: integer
    raw:
      description: Include raw response. Mostly used for debugging purposes
      in: query
      name: raw
      schema:
        default: false
        type: boolean
    serviceId:
      description: Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
      in: header
      name: x-apideck-service-id
      schema:
        type: string
  responses:
    BadRequestResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BadRequestResponse"
      description: Bad Request
    CreateMessageResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateMessageResponse"
      description: Messages
    DeleteMessageResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeleteMessageResponse"
      description: Messages
    GetMessageResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetMessageResponse"
      description: Messages
    GetMessagesResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetMessagesResponse"
      description: Messages
    NotFoundResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotFoundResponse"
      description: The specified resource was not found
    NotImplementedResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotImplementedResponse"
      description: Not Implemented
    PaymentRequiredResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PaymentRequiredResponse"
      description: Payment Required
    TooManyRequestsResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TooManyRequestsResponse"
      description: Too Many Requests
    UnauthorizedResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UnauthorizedResponse"
      description: Unauthorized
    UnexpectedErrorResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UnexpectedErrorResponse"
      description: Unexpected error
    UnprocessableResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UnprocessableResponse"
      description: Unprocessable
    UpdateMessageResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateMessageResponse"
      description: Messages
  schemas:
    BadRequestResponse:
      properties:
        detail:
          anyOf:
            - example: Missing property foobar
              type: string
            - example:
                missing:
                  - foobar: required
              type: object
          description: Contains parameter or domain specific information related to the error and why it occurred.
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Bad Request
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Invalid Params
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#requestvalidationerror
          type: string
        status_code:
          description: HTTP status code
          example: 400
          type: number
        type_name:
          description: The type of error returned
          example: RequestValidationError
          type: string
      type: object
      x-apideck-schema-id: BadRequest
    CreateMessageResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: add
          type: string
        resource:
          description: Unified API resource name
          example: Messages
          type: string
        service:
          description: Apideck ID of service provider
          example: twilio
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: CreateMessageResponse
    Currency:
      description: Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
      enum:
        - UNKNOWN_CURRENCY
        - AED
        - AFN
        - ALL
        - AMD
        - ANG
        - AOA
        - ARS
        - AUD
        - AWG
        - AZN
        - BAM
        - BBD
        - BDT
        - BGN
        - BHD
        - BIF
        - BMD
        - BND
        - BOB
        - BOV
        - BRL
        - BSD
        - BTN
        - BWP
        - BYR
        - BZD
        - CAD
        - CDF
        - CHE
        - CHF
        - CHW
        - CLF
        - CLP
        - CNY
        - COP
        - COU
        - CRC
        - CUC
        - CUP
        - CVE
        - CZK
        - DJF
        - DKK
        - DOP
        - DZD
        - EGP
        - ERN
        - ETB
        - EUR
        - FJD
        - FKP
        - GBP
        - GEL
        - GHS
        - GIP
        - GMD
        - GNF
        - GTQ
        - GYD
        - HKD
        - HNL
        - HRK
        - HTG
        - HUF
        - IDR
        - ILS
        - INR
        - IQD
        - IRR
        - ISK
        - JMD
        - JOD
        - JPY
        - KES
        - KGS
        - KHR
        - KMF
        - KPW
        - KRW
        - KWD
        - KYD
        - KZT
        - LAK
        - LBP
        - LKR
        - LRD
        - LSL
        - LTL
        - LVL
        - LYD
        - MAD
        - MDL
        - MGA
        - MKD
        - MMK
        - MNT
        - MOP
        - MRO
        - MUR
        - MVR
        - MWK
        - MXN
        - MXV
        - MYR
        - MZN
        - NAD
        - NGN
        - NIO
        - NOK
        - NPR
        - NZD
        - OMR
        - PAB
        - PEN
        - PGK
        - PHP
        - PKR
        - PLN
        - PYG
        - QAR
        - RON
        - RSD
        - RUB
        - RWF
        - SAR
        - SBD
        - SCR
        - SDG
        - SEK
        - SGD
        - SHP
        - SLL
        - SOS
        - SRD
        - SSP
        - STD
        - SVC
        - SYP
        - SZL
        - THB
        - TJS
        - TMT
        - TND
        - TOP
        - TRC
        - TRY
        - TTD
        - TWD
        - TZS
        - UAH
        - UGX
        - USD
        - USN
        - USS
        - UYI
        - UYU
        - UZS
        - VEF
        - VND
        - VUV
        - WST
        - XAF
        - XAG
        - XAU
        - XBA
        - XBB
        - XBC
        - XBD
        - XCD
        - XDR
        - XOF
        - XPD
        - XPF
        - XPT
        - XTS
        - XXX
        - YER
        - ZAR
        - ZMK
        - ZMW
        - BTC
      example: USD
      nullable: true
      title: Currency
      type: string
      x-apideck-enum-coverage-ignore: true
      x-apideck-enum-id: currencies
      x-enum-elements:
        - description: Unknown currency
          name: UNKNOWN_CURRENCY
        - description: United Arab Emirates dirham
          name: AED
        - description: Afghan afghani
          name: AFN
        - description: Albanian lek
          name: ALL
        - description: Armenian dram
          name: AMD
        - description: Netherlands Antillean guilder
          name: ANG
        - description: Angolan kwanza
          name: AOA
        - description: Argentine peso
          name: ARS
        - description: Australian dollar
          name: AUD
        - description: Aruban florin
          name: AWG
        - description: Azerbaijani manat
          name: AZN
        - description: Bosnia and Herzegovina convertible mark
          name: BAM
        - description: Barbados dollar
          name: BBD
        - description: Bangladeshi taka
          name: BDT
        - description: Bulgarian lev
          name: BGN
        - description: Bahraini dinar
          name: BHD
        - description: Burundian franc
          name: BIF
        - description: Bermudian dollar
          name: BMD
        - description: Brunei dollar
          name: BND
        - description: Boliviano
          name: BOB
        - description: Bolivian Mvdol
          name: BOV
        - description: Brazilian real
          name: BRL
        - description: Bahamian dollar
          name: BSD
        - description: Bhutanese ngultrum
          name: BTN
        - description: Botswana pula
          name: BWP
        - description: Belarusian ruble
          name: BYR
        - description: Belize dollar
          name: BZD
        - description: Canadian dollar
          name: CAD
        - description: Congolese franc
          name: CDF
        - description: WIR Euro
          name: CHE
        - description: Swiss franc
          name: CHF
        - description: WIR Franc
          name: CHW
        - description: Unidad de Fomento
          name: CLF
        - description: Chilean peso
          name: CLP
        - description: Chinese yuan
          name: CNY
        - description: Colombian peso
          name: COP
        - description: Unidad de Valor Real
          name: COU
        - description: Costa Rican colon
          name: CRC
        - description: Cuban convertible peso
          name: CUC
        - description: Cuban peso
          name: CUP
        - description: Cape Verdean escudo
          name: CVE
        - description: Czech koruna
          name: CZK
        - description: Djiboutian franc
          name: DJF
        - description: Danish krone
          name: DKK
        - description: Dominican peso
          name: DOP
        - description: Algerian dinar
          name: DZD
        - description: Egyptian pound
          name: EGP
        - description: Eritrean nakfa
          name: ERN
        - description: Ethiopian birr
          name: ETB
        - description: Euro
          name: EUR
        - description: Fiji dollar
          name: FJD
        - description: Falkland Islands pound
          name: FKP
        - description: Pound sterling
          name: GBP
        - description: Georgian lari
          name: GEL
        - description: Ghanaian cedi
          name: GHS
        - description: Gibraltar pound
          name: GIP
        - description: Gambian dalasi
          name: GMD
        - description: Guinean franc
          name: GNF
        - description: Guatemalan quetzal
          name: GTQ
        - description: Guyanese dollar
          name: GYD
        - description: Hong Kong dollar
          name: HKD
        - description: Honduran lempira
          name: HNL
        - description: Croatian kuna
          name: HRK
        - description: Haitian gourde
          name: HTG
        - description: Hungarian forint
          name: HUF
        - description: Indonesian rupiah
          name: IDR
        - description: Israeli new shekel
          name: ILS
        - description: Indian rupee
          name: INR
        - description: Iraqi dinar
          name: IQD
        - description: Iranian rial
          name: IRR
        - description: Icelandic króna
          name: ISK
        - description: Jamaican dollar
          name: JMD
        - description: Jordanian dinar
          name: JOD
        - description: Japanese yen
          name: JPY
        - description: Kenyan shilling
          name: KES
        - description: Kyrgyzstani som
          name: KGS
        - description: Cambodian riel
          name: KHR
        - description: Comoro franc
          name: KMF
        - description: North Korean won
          name: KPW
        - description: South Korean won
          name: KRW
        - description: Kuwaiti dinar
          name: KWD
        - description: Cayman Islands dollar
          name: KYD
        - description: Kazakhstani tenge
          name: KZT
        - description: Lao kip
          name: LAK
        - description: Lebanese pound
          name: LBP
        - description: Sri Lankan rupee
          name: LKR
        - description: Liberian dollar
          name: LRD
        - description: Lesotho loti
          name: LSL
        - description: Lithuanian litas
          name: LTL
        - description: Latvian lats
          name: LVL
        - description: Libyan dinar
          name: LYD
        - description: Moroccan dirham
          name: MAD
        - description: Moldovan leu
          name: MDL
        - description: Malagasy ariary
          name: MGA
        - description: Macedonian denar
          name: MKD
        - description: Myanmar kyat
          name: MMK
        - description: Mongolian tögrög
          name: MNT
        - description: Macanese pataca
          name: MOP
        - description: Mauritanian ouguiya
          name: MRO
        - description: Mauritian rupee
          name: MUR
        - description: Maldivian rufiyaa
          name: MVR
        - description: Malawian kwacha
          name: MWK
        - description: Mexican peso
          name: MXN
        - description: Mexican Unidad de Inversion
          name: MXV
        - description: Malaysian ringgit
          name: MYR
        - description: Mozambican metical
          name: MZN
        - description: Namibian dollar
          name: NAD
        - description: Nigerian naira
          name: NGN
        - description: Nicaraguan córdoba
          name: NIO
        - description: Norwegian krone
          name: NOK
        - description: Nepalese rupee
          name: NPR
        - description: New Zealand dollar
          name: NZD
        - description: Omani rial
          name: OMR
        - description: Panamanian balboa
          name: PAB
        - description: Peruvian sol
          name: PEN
        - description: Papua New Guinean kina
          name: PGK
        - description: Philippine peso
          name: PHP
        - description: Pakistani rupee
          name: PKR
        - description: Polish złoty
          name: PLN
        - description: Paraguayan guaraní
          name: PYG
        - description: Qatari riyal
          name: QAR
        - description: Romanian leu
          name: RON
        - description: Serbian dinar
          name: RSD
        - description: Russian ruble
          name: RUB
        - description: Rwandan franc
          name: RWF
        - description: Saudi riyal
          name: SAR
        - description: Solomon Islands dollar
          name: SBD
        - description: Seychelles rupee
          name: SCR
        - description: Sudanese pound
          name: SDG
        - description: Swedish krona
          name: SEK
        - description: Singapore dollar
          name: SGD
        - description: Saint Helena pound
          name: SHP
        - description: Sierra Leonean leone
          name: SLL
        - description: Somali shilling
          name: SOS
        - description: Surinamese dollar
          name: SRD
        - description: South Sudanese pound
          name: SSP
        - description: São Tomé and Príncipe dobra
          name: STD
        - description: Salvadoran colón
          name: SVC
        - description: Syrian pound
          name: SYP
        - description: Swazi lilangeni
          name: SZL
        - description: Thai baht
          name: THB
        - description: Tajikstani somoni
          name: TJS
        - description: Turkmenistan manat
          name: TMT
        - description: Tunisian dinar
          name: TND
        - description: Tongan pa'anga
          name: TOP
        - description: Turkish lira
          name: TRY
        - description: Trinidad and Tobago dollar
          name: TTD
        - description: New Taiwan dollar
          name: TWD
        - description: Tanzanian shilling
          name: TZS
        - description: Ukrainian hryvnia
          name: UAH
        - description: Ugandan shilling
          name: UGX
        - description: United States dollar
          name: USD
        - description: United States dollar (next day)
          name: USN
        - description: United States dollar (same day)
          name: USS
        - description: Uruguay Peso en Unidedades Indexadas
          name: UYI
        - description: Uruguyan peso
          name: UYU
        - description: Uzbekistan som
          name: UZS
        - description: Venezuelan bolívar soberano
          name: VEF
        - description: Vietnamese đồng
          name: VND
        - description: Vanuatu vatu
          name: VUV
        - description: Samoan tala
          name: WST
        - description: CFA franc BEAC
          name: XAF
        - description: Silver
          name: XAG
        - description: Gold
          name: XAU
        - description: European Composite Unit
          name: XBA
        - description: European Monetary Unit
          name: XBB
        - description: European Unit of Account 9
          name: XBC
        - description: European Unit of Account 17
          name: XBD
        - description: East Caribbean dollar
          name: XCD
        - description: Special drawing rights (International Monetary Fund)
          name: XDR
        - description: CFA franc BCEAO
          name: XOF
        - description: Palladium
          name: XPD
        - description: CFP franc
          name: XPF
        - description: Platinum
          name: XPT
        - description: Code reserved for testing
          name: XTS
        - description: No currency
          name: XXX
        - description: Yemeni rial
          name: YER
        - description: South African rand
          name: ZAR
        - description: Zambian kwacha
          name: ZMK
        - description: Zambian kwacha
          name: ZMW
        - description: Bitcoin
          name: BTC
    CustomField:
      additionalProperties: false
      properties:
        description:
          description: More information about the custom field
          example: Employee Level
          title: Description
          type: string
        id:
          example: "2389328923893298"
          title: ID
          type: string
        name:
          description: Name of the custom field.
          example: employee_level
          title: Name
          type: string
        value:
          anyOf:
            - example: Uses Salesforce and Marketo
              nullable: true
              type: string
            - example: 10
              nullable: true
              type: number
            - example: true
              nullable: true
              type: boolean
            - items:
                type: string
              type: array
      required:
        - id
      type: object
      x-apideck-schema-id: CustomField
      x-apideck-weights:
        description: edge-case
        id: critical
        name: medium
        value: critical
    DeleteMessageResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: delete
          type: string
        resource:
          description: Unified API resource name
          example: Messages
          type: string
        service:
          description: Apideck ID of service provider
          example: twilio
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: DeleteMessageResponse
    Email:
      additionalProperties: false
      properties:
        email:
          example: elon@musk.com
          format: email
          minLength: 1
          type: string
        id:
          example: "123"
          type: string
        type:
          enum:
            - primary
            - secondary
            - work
            - personal
            - billing
            - other
          example: primary
          type: string
          x-apideck-enum-id: emails.type
          x-graphql-type-name: EmailType
      required:
        - email
      type: object
      x-apideck-schema-id: Email
      x-apideck-weights:
        email: critical
        id: edge-case
        type: critical
    GetMessageResponse:
      properties:
        data:
          $ref: "#/components/schemas/Message"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: Messages
          type: string
        service:
          description: Apideck ID of service provider
          example: twilio
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: GetMessageResponse
      x-graphql-type-name: Message
    GetMessagesResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/Message"
          type: array
        links:
          $ref: "#/components/schemas/Links"
        meta:
          $ref: "#/components/schemas/Meta"
        operation:
          description: Operation performed
          example: all
          type: string
        resource:
          description: Unified API resource name
          example: Messages
          type: string
        service:
          description: Apideck ID of service provider
          example: twilio
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: GetMessagesResponse
      x-graphql-type-name: MessageList
    Links:
      description: Links to navigate to previous or next pages through the API
      properties:
        current:
          description: Link to navigate to the current page through the API
          example: https://unify.apideck.com/crm/companies
          type: string
        next:
          description: Link to navigate to the previous page through the API
          example: https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM
          nullable: true
          type: string
        previous:
          description: Link to navigate to the previous page through the API
          example: https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D
          nullable: true
          type: string
      type: object
      x-apideck-schema-id: Links
    Message:
      additionalProperties: false
      properties:
        body:
          description: The message text.
          example: Hi! How are you doing?
          maxLength: 1600
          title: Message Body
          type: string
        created_at:
          example: 2020-09-30T07:43:32.000Z
          format: date-time
          readOnly: true
          title: Created at (timestamp)
          type: string
        created_by:
          example: "12345"
          nullable: true
          readOnly: true
          title: Created by
          type: string
        direction:
          description: The direction of the message.
          enum:
            - inbound
            - outbound-api
            - outbound-call
            - outbound-reply
            - unknown
          example: outbound-api
          readOnly: true
          title: Direction
          type: string
          x-apideck-enum-id: messages.direction
        error:
          description: The error returned if your message status is failed or undelivered.
          example:
            code: X1
            message: Something went wrong
          properties:
            code:
              description: The error_code provides more information about the failure. If the message was successful, this value is null
              example: X1
              readOnly: true
              title: Error Code
              type: string
            message:
              example: Something went wrong
              readOnly: true
              title: Error Message
              type: string
          readOnly: true
          title: Error
          type: object
        from:
          description: The phone number that initiated the message.
          example: "+15017122661"
          title: From
          type: string
        id:
          example: "12345"
          readOnly: true
          type: string
        messaging_service_id:
          description: The ID of the Messaging Service used with the message. In case of Plivo this links to the Powerpack ID.
          example: "123456"
          title: Messaging Service ID
          type: string
        number_of_media_files:
          description: The number of media files associated with the message.
          example: 1
          readOnly: true
          title: Number of media files
          type: integer
        number_of_units:
          description: The number of units that make up the complete message. Messages can be split up due to the constraints of the message size.
          example: 1
          readOnly: true
          title: Number of units
          type: integer
        price:
          description: Price of the message.
          example:
            currency: USD
            per_unit: "0.01"
            total_amount: "0.01"
          properties:
            currency:
              $ref: "#/components/schemas/Currency"
            per_unit:
              description: ""
              example: "0.01"
              readOnly: true
              title: Price per unit
              type: string
            total_amount:
              description: ""
              example: "0.01"
              readOnly: true
              title: Price Amount
              type: string
          readOnly: true
          title: Price
          type: object
        reference:
          description: A client reference.
          example: CUST001
          title: Reference
          type: string
        scheduled_at:
          description: The scheduled date and time of the message.
          example: 2020-09-30T07:43:32.000Z
          format: date-time
          type: string
        sent_at:
          description: The date and time that the message was sent
          example: 2020-09-30T07:43:32.000Z
          format: date-time
          readOnly: true
          type: string
        status:
          description: Status of the delivery of the message.
          enum:
            - accepted
            - scheduled
            - canceled
            - queued
            - sending
            - sent
            - failed
            - delivered
            - undelivered
            - receiving
            - received
            - read
          example: sent
          readOnly: true
          title: Status
          type: string
          x-apideck-enum-id: messages.status
        subject:
          example: Picture
          title: Message Subject
          type: string
        to:
          description: The phone number that received the message.
          example: "+15017122662"
          title: Message Body
          type: string
        type:
          description: Set to sms for SMS messages and mms for MMS messages.
          enum:
            - sms
            - mms
          example: sms
          title: Message type
          type: string
          x-apideck-enum-id: messages.type
        updated_at:
          example: 2020-09-30T07:43:32.000Z
          format: date-time
          readOnly: true
          title: Updated at (timestamp)
          type: string
        updated_by:
          example: "12345"
          nullable: true
          readOnly: true
          type: string
        webhook_url:
          description: Define a webhook to receive delivery notifications.
          example: https://unify.apideck.com/webhook/webhooks/eyz329dkffdl4949/x/sms
          title: Webhook URL
          type: string
      required:
        - from
        - to
        - body
      type: object
      x-apideck-schema-id: Message
      x-apideck-weights:
        body: critical
        error: edge-case
        from: critical
        id: critical
        messaging_service_id: edge-case
        number_of_media_files: edge-case
        number_of_units: low
        price: edge-case
        status: high
        subject: medium
        to: critical
        type: high
        webhook_url: low
    Meta:
      description: Response metadata
      properties:
        cursors:
          description: Cursors to navigate to previous or next pages through the API
          properties:
            current:
              description: Cursor to navigate to the current page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjI=
              nullable: true
              type: string
            next:
              description: Cursor to navigate to the next page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjM=
              nullable: true
              type: string
            previous:
              description: Cursor to navigate to the previous page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjE=
              nullable: true
              type: string
          type: object
        items_on_page:
          description: Number of items returned in the data property of the response
          example: 50
          type: integer
      type: object
      x-apideck-schema-id: Meta
    NotFoundResponse:
      properties:
        detail:
          anyOf:
            - example: "Could not find widget with id: '123'"
              type: string
            - example:
                not_found:
                  entity: widget
                  id: "123"
              type: object
          description: Contains parameter or domain specific information related to the error and why it occurred.
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Not Found
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Unknown Widget
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#entitynotfounderror
          type: string
        status_code:
          description: HTTP status code
          example: 404
          type: number
        type_name:
          description: The type of error returned
          example: EntityNotFoundError
          type: string
      type: object
      x-apideck-schema-id: NotFound
    NotImplementedResponse:
      properties:
        detail:
          anyOf:
            - example: Failed to retrieve Widget tokenUrl from 'components.securitySchemes.OAuth2.flows'
              type: string
            - type: object
          description: Contains parameter or domain specific information related to the error and why it occurred.
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Not Implemented
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Unmapped Attribute
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#mappingerror
          type: string
        status_code:
          description: HTTP status code
          example: 501
          type: number
        type_name:
          description: The type of error returned
          example: MappingError
          type: string
      type: object
      x-apideck-schema-id: NotImplemented
    PaymentRequiredResponse:
      properties:
        detail:
          description: Contains parameter or domain specific information related to the error and why it occurred.
          example: You have reached your limit of 2000
          type: string
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Payment Required
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Request Limit Reached
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#requestlimiterror
          type: string
        status_code:
          description: HTTP status code
          example: 402
          type: number
        type_name:
          description: The type of error returned
          example: RequestLimitError
          type: string
      type: object
      x-apideck-schema-id: PaymentRequired
    Tags:
      example:
        - New
      items:
        type: string
      type: array
      x-apideck-schema-id: Tags
    TooManyRequestsResponse:
      properties:
        detail:
          properties:
            context:
              type: string
            error:
              additionalProperties: true
              type: object
          type: object
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 6585)
          example: Too Many Requests
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Connector Rate Limit Error
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#connectorratelimiterror
          type: string
        status_code:
          description: HTTP status code
          example: 429
          type: number
        type_name:
          description: The type of error returned
          example: ConnectorRateLimitError
          type: string
      type: object
      x-apideck-schema-id: TooManyRequests
    UnauthorizedResponse:
      properties:
        detail:
          description: Contains parameter or domain specific information related to the error and why it occurred.
          example: Failed to generate valid JWT Session. Verify applicationId is correct
          type: string
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Unauthorized
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Unauthorized Request
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#unauthorizederror
          type: string
        status_code:
          description: HTTP status code
          example: 401
          type: number
        type_name:
          description: The type of error returned
          example: UnauthorizedError
          type: string
      type: object
      x-apideck-schema-id: Unauthorized
    UnexpectedErrorResponse:
      properties:
        detail:
          anyOf:
            - example: "Missing Header: x-apideck-consumer-id"
              type: string
            - example:
                missing:
                  - x-apideck-consumer-id: required
              type: object
          description: Contains parameter or domain specific information related to the error and why it occurred.
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Bad Request
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Invalid Params
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#unauthorizederror
          type: string
        status_code:
          description: HTTP status code
          example: 400
          type: number
        type_name:
          description: The type of error returned
          example: RequestHeadersValidationError
          type: string
      type: object
      x-apideck-schema-id: Error
    UnifiedId:
      properties:
        id:
          example: "12345"
          readOnly: true
          type: string
      required:
        - id
      title: UnifiedId
      type: object
      x-apideck-schema-id: Id
    UnprocessableResponse:
      properties:
        detail:
          description: Contains parameter or domain specific information related to the error and why it occurred.
          example: Unprocessable request, please verify your request headers and body.
          type: string
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Unprocessable Entity
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Invalid State
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#invalidstateerror
          type: string
        status_code:
          description: HTTP status code
          example: 422
          type: number
        type_name:
          description: The type of error returned
          example: InvalidStateError
          type: string
      type: object
      x-apideck-schema-id: Unprocessable
    UpdateMessageResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: update
          type: string
        resource:
          description: Unified API resource name
          example: Messages
          type: string
        service:
          description: Apideck ID of service provider
          example: twilio
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: UpdateMessageResponse
  securitySchemes:
    apiKey:
      description: |
        To use API you have to sign up and get your own API key. Unify API accounts have sandbox mode and live mode API keys. 
        To change modes just use the appropriate key to get a live or test object. You can find your API keys on the unify settings of your Apideck app.
        Your Apideck application_id can also be found on the same page.

        Authenticate your API requests by including your test or live secret API key in the request header. 

        - Bearer authorization header: `Authorization: Bearer <your-apideck-api-key>`
        - Application id header: `x-apideck-app-id: <your-apideck-app-id>`

        You should use the public keys on the SDKs and the secret keys to authenticate API requests.

        **Do not share or include your secret API keys on client side code.** Your API keys carry significant privileges. Please ensure to keep them 100% secure and be sure to not share your secret API keys in areas that are publicly accessible like GitHub.

        Learn how to set the Authorization header inside Postman https://learning.postman.com/docs/postman/sending-api-requests/authorization/#api-key

        Go to Unify to grab your API KEY https://app.apideck.com/unify/api-keys
      in: header
      name: Authorization
      type: apiKey

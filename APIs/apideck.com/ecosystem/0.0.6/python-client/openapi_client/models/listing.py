# coding: utf-8

"""
    Ecosystem API

    Ecosystem API

    The version of the OpenAPI document: 0.0.6
    Contact: hello@apideck.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.category import Category
from openapi_client.models.collection import Collection
from openapi_client.models.file import File
from openapi_client.models.logo import Logo
from openapi_client.models.media import Media
from openapi_client.models.partner import Partner
from openapi_client.models.product import Product
from openapi_client.models.screenshot import Screenshot
from openapi_client.models.translation import Translation
from typing import Optional, Set
from typing_extensions import Self

class Listing(BaseModel):
    """
    Listing
    """ # noqa: E501
    automate_id: Optional[StrictStr] = None
    blendr_id: Optional[StrictStr] = None
    card_background_color: Optional[StrictStr] = None
    card_background_image: Optional[File] = None
    categories: Optional[List[Category]] = None
    cloud_service_id: Optional[StrictStr] = None
    collections: Optional[List[Collection]] = None
    combidesk_id: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    description: Optional[StrictStr] = None
    detail_page_disabled: Optional[StrictBool] = None
    external_id: Optional[StrictStr] = None
    features: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    integromat_id: Optional[StrictStr] = None
    logo: Optional[Logo] = None
    media: Optional[List[Media]] = None
    meta_tag_description: Optional[StrictStr] = None
    meta_tag_keywords: Optional[StrictStr] = None
    meta_tag_title: Optional[StrictStr] = None
    microsoft_flow_id: Optional[StrictStr] = None
    name: StrictStr
    native_integration: Optional[StrictBool] = None
    native_integration_link: Optional[StrictStr] = None
    partner: Optional[Partner] = None
    piesync_id: Optional[StrictStr] = None
    pricing: Optional[StrictStr] = None
    products: Optional[List[Product]] = None
    published: Optional[StrictBool] = None
    published_at: Optional[datetime] = None
    screenshots: Optional[List[Screenshot]] = None
    segment_id: Optional[StrictStr] = None
    slug: StrictStr
    sticky: Optional[StrictBool] = None
    tag_line: Optional[StrictStr] = None
    third_party_integration: Optional[StrictBool] = None
    third_party_integration_link: Optional[StrictStr] = None
    translations: Optional[List[Translation]] = None
    tray_io_id: Optional[StrictStr] = None
    unify_connector_id: Optional[StrictStr] = None
    upcoming: Optional[StrictBool] = None
    updated_at: Optional[datetime] = None
    zapier_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["automate_id", "blendr_id", "card_background_color", "card_background_image", "categories", "cloud_service_id", "collections", "combidesk_id", "created_at", "description", "detail_page_disabled", "external_id", "features", "id", "integromat_id", "logo", "media", "meta_tag_description", "meta_tag_keywords", "meta_tag_title", "microsoft_flow_id", "name", "native_integration", "native_integration_link", "partner", "piesync_id", "pricing", "products", "published", "published_at", "screenshots", "segment_id", "slug", "sticky", "tag_line", "third_party_integration", "third_party_integration_link", "translations", "tray_io_id", "unify_connector_id", "upcoming", "updated_at", "zapier_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Listing from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "external_id",
            "id",
            "published_at",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of card_background_image
        if self.card_background_image:
            _dict['card_background_image'] = self.card_background_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in categories (list)
        _items = []
        if self.categories:
            for _item_categories in self.categories:
                if _item_categories:
                    _items.append(_item_categories.to_dict())
            _dict['categories'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in collections (list)
        _items = []
        if self.collections:
            for _item_collections in self.collections:
                if _item_collections:
                    _items.append(_item_collections.to_dict())
            _dict['collections'] = _items
        # override the default output from pydantic by calling `to_dict()` of logo
        if self.logo:
            _dict['logo'] = self.logo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in media (list)
        _items = []
        if self.media:
            for _item_media in self.media:
                if _item_media:
                    _items.append(_item_media.to_dict())
            _dict['media'] = _items
        # override the default output from pydantic by calling `to_dict()` of partner
        if self.partner:
            _dict['partner'] = self.partner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in products (list)
        _items = []
        if self.products:
            for _item_products in self.products:
                if _item_products:
                    _items.append(_item_products.to_dict())
            _dict['products'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in screenshots (list)
        _items = []
        if self.screenshots:
            for _item_screenshots in self.screenshots:
                if _item_screenshots:
                    _items.append(_item_screenshots.to_dict())
            _dict['screenshots'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in translations (list)
        _items = []
        if self.translations:
            for _item_translations in self.translations:
                if _item_translations:
                    _items.append(_item_translations.to_dict())
            _dict['translations'] = _items
        # set to None if translations (nullable) is None
        # and model_fields_set contains the field
        if self.translations is None and "translations" in self.model_fields_set:
            _dict['translations'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Listing from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "automate_id": obj.get("automate_id"),
            "blendr_id": obj.get("blendr_id"),
            "card_background_color": obj.get("card_background_color"),
            "card_background_image": File.from_dict(obj["card_background_image"]) if obj.get("card_background_image") is not None else None,
            "categories": [Category.from_dict(_item) for _item in obj["categories"]] if obj.get("categories") is not None else None,
            "cloud_service_id": obj.get("cloud_service_id"),
            "collections": [Collection.from_dict(_item) for _item in obj["collections"]] if obj.get("collections") is not None else None,
            "combidesk_id": obj.get("combidesk_id"),
            "created_at": obj.get("created_at"),
            "description": obj.get("description"),
            "detail_page_disabled": obj.get("detail_page_disabled"),
            "external_id": obj.get("external_id"),
            "features": obj.get("features"),
            "id": obj.get("id"),
            "integromat_id": obj.get("integromat_id"),
            "logo": Logo.from_dict(obj["logo"]) if obj.get("logo") is not None else None,
            "media": [Media.from_dict(_item) for _item in obj["media"]] if obj.get("media") is not None else None,
            "meta_tag_description": obj.get("meta_tag_description"),
            "meta_tag_keywords": obj.get("meta_tag_keywords"),
            "meta_tag_title": obj.get("meta_tag_title"),
            "microsoft_flow_id": obj.get("microsoft_flow_id"),
            "name": obj.get("name"),
            "native_integration": obj.get("native_integration"),
            "native_integration_link": obj.get("native_integration_link"),
            "partner": Partner.from_dict(obj["partner"]) if obj.get("partner") is not None else None,
            "piesync_id": obj.get("piesync_id"),
            "pricing": obj.get("pricing"),
            "products": [Product.from_dict(_item) for _item in obj["products"]] if obj.get("products") is not None else None,
            "published": obj.get("published"),
            "published_at": obj.get("published_at"),
            "screenshots": [Screenshot.from_dict(_item) for _item in obj["screenshots"]] if obj.get("screenshots") is not None else None,
            "segment_id": obj.get("segment_id"),
            "slug": obj.get("slug"),
            "sticky": obj.get("sticky"),
            "tag_line": obj.get("tag_line"),
            "third_party_integration": obj.get("third_party_integration"),
            "third_party_integration_link": obj.get("third_party_integration_link"),
            "translations": [Translation.from_dict(_item) for _item in obj["translations"]] if obj.get("translations") is not None else None,
            "tray_io_id": obj.get("tray_io_id"),
            "unify_connector_id": obj.get("unify_connector_id"),
            "upcoming": obj.get("upcoming"),
            "updated_at": obj.get("updated_at"),
            "zapier_id": obj.get("zapier_id")
        })
        return _obj



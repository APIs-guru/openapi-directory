# coding: utf-8

"""
    Ecosystem API

    Ecosystem API

    The version of the OpenAPI document: 0.0.6
    Contact: hello@apideck.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ListingSettings(BaseModel):
    """
    ListingSettings
    """ # noqa: E501
    description_text_template: Optional[StrictStr] = None
    description_title: Optional[StrictStr] = None
    features_text_template: Optional[StrictStr] = None
    features_title: Optional[StrictStr] = None
    install_button_label: Optional[StrictStr] = None
    name_postfix: Optional[StrictStr] = None
    naming: Optional[StrictStr] = None
    native_integration_link: Optional[StrictStr] = None
    pricing_disabled: Optional[StrictBool] = None
    pricing_text_template: Optional[StrictStr] = None
    pricing_title: Optional[StrictStr] = None
    sidebar_position: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["description_text_template", "description_title", "features_text_template", "features_title", "install_button_label", "name_postfix", "naming", "native_integration_link", "pricing_disabled", "pricing_text_template", "pricing_title", "sidebar_position"]

    @field_validator('naming')
    def naming_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LISTING', 'LISTINGS', 'INTEGRATIONS', 'APPS', 'CONNECTORS', 'DATASOURCES', 'ADDONS', 'PLUGINS', 'PARTNERS', 'CHANNELS', 'CONNECTIONS', 'EXTENSIONS']):
            raise ValueError("must be one of enum values ('LISTING', 'LISTINGS', 'INTEGRATIONS', 'APPS', 'CONNECTORS', 'DATASOURCES', 'ADDONS', 'PLUGINS', 'PARTNERS', 'CHANNELS', 'CONNECTIONS', 'EXTENSIONS')")
        return value

    @field_validator('sidebar_position')
    def sidebar_position_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TOP', 'LEFT', 'RIGHT', 'HIDDEN']):
            raise ValueError("must be one of enum values ('TOP', 'LEFT', 'RIGHT', 'HIDDEN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListingSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListingSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description_text_template": obj.get("description_text_template"),
            "description_title": obj.get("description_title"),
            "features_text_template": obj.get("features_text_template"),
            "features_title": obj.get("features_title"),
            "install_button_label": obj.get("install_button_label"),
            "name_postfix": obj.get("name_postfix"),
            "naming": obj.get("naming"),
            "native_integration_link": obj.get("native_integration_link"),
            "pricing_disabled": obj.get("pricing_disabled"),
            "pricing_text_template": obj.get("pricing_text_template"),
            "pricing_title": obj.get("pricing_title"),
            "sidebar_position": obj.get("sidebar_position")
        })
        return _obj



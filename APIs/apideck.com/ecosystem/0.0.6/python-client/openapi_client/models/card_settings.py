# coding: utf-8

"""
    Ecosystem API

    Ecosystem API

    The version of the OpenAPI document: 0.0.6
    Contact: hello@apideck.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CardSettings(BaseModel):
    """
    CardSettings
    """ # noqa: E501
    background_color: Optional[StrictStr] = None
    border_color: Optional[StrictStr] = None
    border_radius: Optional[StrictStr] = None
    border_size: Optional[StrictStr] = None
    color: Optional[StrictStr] = None
    columns: Optional[StrictInt] = None
    description_lines: Optional[StrictInt] = None
    icon_border_radius: Optional[StrictStr] = None
    icon_shadow_enabled: Optional[StrictBool] = None
    icon_size: Optional[StrictInt] = None
    shadow_enabled: Optional[StrictBool] = None
    show_action: Optional[StrictBool] = None
    show_badges: Optional[StrictBool] = None
    show_category: Optional[StrictBool] = None
    show_description: Optional[StrictBool] = None
    style: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["background_color", "border_color", "border_radius", "border_size", "color", "columns", "description_lines", "icon_border_radius", "icon_shadow_enabled", "icon_size", "shadow_enabled", "show_action", "show_badges", "show_category", "show_description", "style"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CardSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CardSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "background_color": obj.get("background_color"),
            "border_color": obj.get("border_color"),
            "border_radius": obj.get("border_radius"),
            "border_size": obj.get("border_size"),
            "color": obj.get("color"),
            "columns": obj.get("columns"),
            "description_lines": obj.get("description_lines"),
            "icon_border_radius": obj.get("icon_border_radius"),
            "icon_shadow_enabled": obj.get("icon_shadow_enabled"),
            "icon_size": obj.get("icon_size"),
            "shadow_enabled": obj.get("shadow_enabled"),
            "show_action": obj.get("show_action"),
            "show_badges": obj.get("show_badges"),
            "show_category": obj.get("show_category"),
            "show_description": obj.get("show_description"),
            "style": obj.get("style")
        })
        return _obj



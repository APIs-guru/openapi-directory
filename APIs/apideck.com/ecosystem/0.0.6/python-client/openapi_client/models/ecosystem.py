# coding: utf-8

"""
    Ecosystem API

    Ecosystem API

    The version of the OpenAPI document: 0.0.6
    Contact: hello@apideck.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.card_settings import CardSettings
from openapi_client.models.cta_settings import CTASettings
from openapi_client.models.custom_settings import CustomSettings
from openapi_client.models.integration_settings import IntegrationSettings
from openapi_client.models.lead_form_settings import LeadFormSettings
from openapi_client.models.listing_settings import ListingSettings
from openapi_client.models.masthead_settings import MastheadSettings
from openapi_client.models.meta_tag_settings import MetaTagSettings
from typing import Optional, Set
from typing_extensions import Self

class Ecosystem(BaseModel):
    """
    Ecosystem
    """ # noqa: E501
    about: Optional[StrictStr] = None
    alternatives_background_color: Optional[StrictStr] = None
    alternatives_color: Optional[StrictStr] = None
    attribution: Optional[StrictBool] = None
    body_background_color: Optional[StrictStr] = None
    body_button_background_color: Optional[StrictStr] = None
    body_button_color: Optional[StrictStr] = None
    body_color: Optional[StrictStr] = None
    body_link_color: Optional[StrictStr] = None
    card_settings: Optional[CardSettings] = None
    categories_count_badge: Optional[StrictBool] = None
    categories_show_max_items: Optional[StrictInt] = None
    collections_count_badge: Optional[StrictBool] = None
    collections_title: Optional[StrictStr] = None
    create_link: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    cta_settings: Optional[CTASettings] = None
    custom_domain: Optional[StrictStr] = None
    custom_settings: Optional[CustomSettings] = None
    detail_pages_enabled: Optional[StrictBool] = None
    footer_background_color: Optional[StrictStr] = None
    footer_color: Optional[StrictStr] = None
    google_site_verification_id: Optional[StrictStr] = None
    hide_install_buttons: Optional[StrictBool] = None
    home_page_collection_category_cards: Optional[StrictBool] = None
    home_page_show_all_listings: Optional[StrictBool] = None
    id: Optional[StrictStr] = None
    installation_request_flow_enabled: Optional[StrictBool] = None
    integration_settings: Optional[IntegrationSettings] = None
    is_published: StrictBool
    lead_form_settings: Optional[LeadFormSettings] = None
    listing_settings: Optional[ListingSettings] = None
    masthead_settings: Optional[MastheadSettings] = None
    menu_position: Optional[StrictStr] = None
    menu_style: Optional[StrictStr] = None
    meta_tag_settings: Optional[MetaTagSettings] = None
    name: StrictStr
    navigation_background_color: Optional[StrictStr] = None
    navigation_color: Optional[StrictStr] = None
    navigation_logo_post_fix: Optional[StrictStr] = None
    navigation_mobile_menu_type: Optional[StrictStr] = None
    navigation_sticky: Optional[StrictBool] = None
    primary_color: Optional[StrictStr] = None
    privacy_link: Optional[StrictStr] = None
    request_link: Optional[StrictStr] = None
    shadow_page_description: Optional[StrictStr] = None
    shadow_pages_enabled: Optional[StrictBool] = None
    show_attribution_badge: Optional[StrictBool] = None
    show_requested_listings: Optional[StrictBool] = None
    slug: StrictStr
    terms_link: Optional[StrictStr] = None
    total_published_listings: Optional[StrictInt] = None
    unify_application_id: Optional[StrictStr] = None
    updated_at: Optional[datetime] = None
    utm_campaign: Optional[StrictStr] = None
    website: Optional[StrictStr] = None
    zaps_menu_title: Optional[StrictStr] = None
    zaps_page_enabled: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["about", "alternatives_background_color", "alternatives_color", "attribution", "body_background_color", "body_button_background_color", "body_button_color", "body_color", "body_link_color", "card_settings", "categories_count_badge", "categories_show_max_items", "collections_count_badge", "collections_title", "create_link", "created_at", "cta_settings", "custom_domain", "custom_settings", "detail_pages_enabled", "footer_background_color", "footer_color", "google_site_verification_id", "hide_install_buttons", "home_page_collection_category_cards", "home_page_show_all_listings", "id", "installation_request_flow_enabled", "integration_settings", "is_published", "lead_form_settings", "listing_settings", "masthead_settings", "menu_position", "menu_style", "meta_tag_settings", "name", "navigation_background_color", "navigation_color", "navigation_logo_post_fix", "navigation_mobile_menu_type", "navigation_sticky", "primary_color", "privacy_link", "request_link", "shadow_page_description", "shadow_pages_enabled", "show_attribution_badge", "show_requested_listings", "slug", "terms_link", "total_published_listings", "unify_application_id", "updated_at", "utm_campaign", "website", "zaps_menu_title", "zaps_page_enabled"]

    @field_validator('menu_position')
    def menu_position_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TOP', 'LEFT', 'RIGHT', 'HIDDEN']):
            raise ValueError("must be one of enum values ('TOP', 'LEFT', 'RIGHT', 'HIDDEN')")
        return value

    @field_validator('menu_style')
    def menu_style_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LIST', 'PILL', 'FILTER']):
            raise ValueError("must be one of enum values ('LIST', 'PILL', 'FILTER')")
        return value

    @field_validator('navigation_mobile_menu_type')
    def navigation_mobile_menu_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ICON', 'TEXT']):
            raise ValueError("must be one of enum values ('ICON', 'TEXT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Ecosystem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "id",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of card_settings
        if self.card_settings:
            _dict['card_settings'] = self.card_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cta_settings
        if self.cta_settings:
            _dict['cta_settings'] = self.cta_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_settings
        if self.custom_settings:
            _dict['custom_settings'] = self.custom_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of integration_settings
        if self.integration_settings:
            _dict['integration_settings'] = self.integration_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lead_form_settings
        if self.lead_form_settings:
            _dict['lead_form_settings'] = self.lead_form_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of listing_settings
        if self.listing_settings:
            _dict['listing_settings'] = self.listing_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of masthead_settings
        if self.masthead_settings:
            _dict['masthead_settings'] = self.masthead_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of meta_tag_settings
        if self.meta_tag_settings:
            _dict['meta_tag_settings'] = self.meta_tag_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Ecosystem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "about": obj.get("about"),
            "alternatives_background_color": obj.get("alternatives_background_color"),
            "alternatives_color": obj.get("alternatives_color"),
            "attribution": obj.get("attribution"),
            "body_background_color": obj.get("body_background_color"),
            "body_button_background_color": obj.get("body_button_background_color"),
            "body_button_color": obj.get("body_button_color"),
            "body_color": obj.get("body_color"),
            "body_link_color": obj.get("body_link_color"),
            "card_settings": CardSettings.from_dict(obj["card_settings"]) if obj.get("card_settings") is not None else None,
            "categories_count_badge": obj.get("categories_count_badge"),
            "categories_show_max_items": obj.get("categories_show_max_items"),
            "collections_count_badge": obj.get("collections_count_badge"),
            "collections_title": obj.get("collections_title"),
            "create_link": obj.get("create_link"),
            "created_at": obj.get("created_at"),
            "cta_settings": CTASettings.from_dict(obj["cta_settings"]) if obj.get("cta_settings") is not None else None,
            "custom_domain": obj.get("custom_domain"),
            "custom_settings": CustomSettings.from_dict(obj["custom_settings"]) if obj.get("custom_settings") is not None else None,
            "detail_pages_enabled": obj.get("detail_pages_enabled"),
            "footer_background_color": obj.get("footer_background_color"),
            "footer_color": obj.get("footer_color"),
            "google_site_verification_id": obj.get("google_site_verification_id"),
            "hide_install_buttons": obj.get("hide_install_buttons"),
            "home_page_collection_category_cards": obj.get("home_page_collection_category_cards"),
            "home_page_show_all_listings": obj.get("home_page_show_all_listings"),
            "id": obj.get("id"),
            "installation_request_flow_enabled": obj.get("installation_request_flow_enabled"),
            "integration_settings": IntegrationSettings.from_dict(obj["integration_settings"]) if obj.get("integration_settings") is not None else None,
            "is_published": obj.get("is_published"),
            "lead_form_settings": LeadFormSettings.from_dict(obj["lead_form_settings"]) if obj.get("lead_form_settings") is not None else None,
            "listing_settings": ListingSettings.from_dict(obj["listing_settings"]) if obj.get("listing_settings") is not None else None,
            "masthead_settings": MastheadSettings.from_dict(obj["masthead_settings"]) if obj.get("masthead_settings") is not None else None,
            "menu_position": obj.get("menu_position"),
            "menu_style": obj.get("menu_style"),
            "meta_tag_settings": MetaTagSettings.from_dict(obj["meta_tag_settings"]) if obj.get("meta_tag_settings") is not None else None,
            "name": obj.get("name"),
            "navigation_background_color": obj.get("navigation_background_color"),
            "navigation_color": obj.get("navigation_color"),
            "navigation_logo_post_fix": obj.get("navigation_logo_post_fix"),
            "navigation_mobile_menu_type": obj.get("navigation_mobile_menu_type"),
            "navigation_sticky": obj.get("navigation_sticky"),
            "primary_color": obj.get("primary_color"),
            "privacy_link": obj.get("privacy_link"),
            "request_link": obj.get("request_link"),
            "shadow_page_description": obj.get("shadow_page_description"),
            "shadow_pages_enabled": obj.get("shadow_pages_enabled"),
            "show_attribution_badge": obj.get("show_attribution_badge"),
            "show_requested_listings": obj.get("show_requested_listings"),
            "slug": obj.get("slug"),
            "terms_link": obj.get("terms_link"),
            "total_published_listings": obj.get("total_published_listings"),
            "unify_application_id": obj.get("unify_application_id"),
            "updated_at": obj.get("updated_at"),
            "utm_campaign": obj.get("utm_campaign"),
            "website": obj.get("website"),
            "zaps_menu_title": obj.get("zaps_menu_title"),
            "zaps_page_enabled": obj.get("zaps_page_enabled")
        })
        return _obj



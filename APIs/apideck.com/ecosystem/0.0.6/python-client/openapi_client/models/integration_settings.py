# coding: utf-8

"""
    Ecosystem API

    Ecosystem API

    The version of the OpenAPI document: 0.0.6
    Contact: hello@apideck.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IntegrationSettings(BaseModel):
    """
    IntegrationSettings
    """ # noqa: E501
    albacross_id: Optional[StrictStr] = None
    automate_enabled: Optional[StrictBool] = None
    blendr_enabled: Optional[StrictBool] = None
    combidesk_enabled: Optional[StrictBool] = None
    crisp_id: Optional[StrictStr] = None
    drift_id: Optional[StrictStr] = None
    google_analytics_id: Optional[StrictStr] = None
    google_tag_manager_id: Optional[StrictStr] = None
    heap_id: Optional[StrictStr] = None
    hubspot_portal_id: Optional[StrictStr] = None
    integromat_enabled: Optional[StrictBool] = None
    intercom_app_id: Optional[StrictStr] = None
    iubenda_cookie_policy_id: Optional[StrictStr] = None
    iubenda_site_id: Optional[StrictStr] = None
    journy_io_domain: Optional[StrictStr] = None
    journy_io_id: Optional[StrictStr] = None
    livechat_id: Optional[StrictStr] = None
    metomic_id: Optional[StrictStr] = None
    microsoft_flow_enabled: Optional[StrictBool] = None
    microsoft_flow_id: Optional[StrictStr] = None
    onetrust_id: Optional[StrictStr] = None
    piesync_enabled: Optional[StrictBool] = None
    segment_enabled: Optional[StrictBool] = None
    segment_id: Optional[StrictStr] = None
    tray_io_enabled: Optional[StrictBool] = None
    zapier_beta_link: Optional[StrictStr] = None
    zapier_enabled: Optional[StrictBool] = None
    zapier_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["albacross_id", "automate_enabled", "blendr_enabled", "combidesk_enabled", "crisp_id", "drift_id", "google_analytics_id", "google_tag_manager_id", "heap_id", "hubspot_portal_id", "integromat_enabled", "intercom_app_id", "iubenda_cookie_policy_id", "iubenda_site_id", "journy_io_domain", "journy_io_id", "livechat_id", "metomic_id", "microsoft_flow_enabled", "microsoft_flow_id", "onetrust_id", "piesync_enabled", "segment_enabled", "segment_id", "tray_io_enabled", "zapier_beta_link", "zapier_enabled", "zapier_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IntegrationSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IntegrationSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "albacross_id": obj.get("albacross_id"),
            "automate_enabled": obj.get("automate_enabled"),
            "blendr_enabled": obj.get("blendr_enabled"),
            "combidesk_enabled": obj.get("combidesk_enabled"),
            "crisp_id": obj.get("crisp_id"),
            "drift_id": obj.get("drift_id"),
            "google_analytics_id": obj.get("google_analytics_id"),
            "google_tag_manager_id": obj.get("google_tag_manager_id"),
            "heap_id": obj.get("heap_id"),
            "hubspot_portal_id": obj.get("hubspot_portal_id"),
            "integromat_enabled": obj.get("integromat_enabled"),
            "intercom_app_id": obj.get("intercom_app_id"),
            "iubenda_cookie_policy_id": obj.get("iubenda_cookie_policy_id"),
            "iubenda_site_id": obj.get("iubenda_site_id"),
            "journy_io_domain": obj.get("journy_io_domain"),
            "journy_io_id": obj.get("journy_io_id"),
            "livechat_id": obj.get("livechat_id"),
            "metomic_id": obj.get("metomic_id"),
            "microsoft_flow_enabled": obj.get("microsoft_flow_enabled"),
            "microsoft_flow_id": obj.get("microsoft_flow_id"),
            "onetrust_id": obj.get("onetrust_id"),
            "piesync_enabled": obj.get("piesync_enabled"),
            "segment_enabled": obj.get("segment_enabled"),
            "segment_id": obj.get("segment_id"),
            "tray_io_enabled": obj.get("tray_io_enabled"),
            "zapier_beta_link": obj.get("zapier_beta_link"),
            "zapier_enabled": obj.get("zapier_enabled"),
            "zapier_id": obj.get("zapier_id")
        })
        return _obj



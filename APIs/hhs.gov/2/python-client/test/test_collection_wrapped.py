# coding: utf-8

"""
    HHS Media Services API

    <div class=\"swagger-ui-wrap extraFooter\"><h3>Common Features / Behaviors</h3> <div class=\"features\"> <ul> <li><strong>* \"sort\" param:</strong> supports multi column sorting through the use of commas as delimiters, and a hyphen to denote descending order. <br/> <strong><span>Examples:</span></strong> <ul> <li><span class=\"example\">name</span><span class=\"description\">sort results by name ascending</span></li> <li><span class=\"example\">-name</span><span class=\"description\">sort results by name descending</span></li> <li><span class=\"example\">-name,id</span><span class=\"description\">sort results by name descending and then by id ascending</span></li> <li><span class=\"example\">id,-dateContentAuthored</span><span class=\"description\">sort results by id ascending and then date descending</span></li> </ul> </li> <li><strong>Date formats:</strong> Date input format is expected to be based on <a href=\"http://www.ietf.org/rfc/rfc3339.txt\">RFC 3339</a>. <br/> <span><strong>Example:</strong></span> <ul><li>2013-11-18T18:43:01Z</li></ul> </li> </ul> </div> </div>

    The version of the OpenAPI document: 2
    Contact: syndicationadmin@hhs.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.collection_wrapped import CollectionWrapped

class TestCollectionWrapped(unittest.TestCase):
    """CollectionWrapped unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CollectionWrapped:
        """Test CollectionWrapped
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CollectionWrapped`
        """
        model = CollectionWrapped()
        if include_optional:
            return CollectionWrapped(
                callback = '',
                meta = openapi_client.models.meta.Meta(
                    messages = [
                        openapi_client.models.message.Message(
                            error_code = '', 
                            error_detail = '', 
                            error_message = '', 
                            user_message = '', )
                        ], 
                    pagination = openapi_client.models.pagination.Pagination(
                        count = 56, 
                        current_url = '', 
                        max = 56, 
                        next_url = '', 
                        offset = 56, 
                        page_num = 56, 
                        previous_url = '', 
                        sort = '', 
                        total = 56, 
                        total_pages = 56, ), 
                    status = 56, ),
                results = [
                    openapi_client.models.collection.Collection(
                        campaigns = [
                            openapi_client.models.campaign.Campaign(
                                contact_email = '', 
                                description = '', 
                                end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                id = 56, 
                                name = '', 
                                source = openapi_client.models.source.Source(
                                    acronym = '', 
                                    contact_email = '', 
                                    id = 56, 
                                    large_logo_url = '', 
                                    name = '', 
                                    small_logo_url = '', 
                                    website_url = '', ), 
                                start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), )
                            ], 
                        created_by = '', 
                        custom_attribution_url = '', 
                        custom_preview_url = '', 
                        custom_thumbnail_url = '', 
                        date_content_authored = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        date_content_published = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        date_content_reviewed = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        date_content_updated = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        date_syndication_captured = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        date_syndication_updated = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        date_syndication_visible = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        description = '', 
                        extended_attributes = [
                            openapi_client.models.extended_attribute.ExtendedAttribute(
                                id = 56, 
                                name = '', 
                                value = '', )
                            ], 
                        external_guid = '', 
                        foreign_syndication_api_url = '', 
                        hash = '', 
                        id = 56, 
                        language = openapi_client.models.language.Language(
                            id = 56, 
                            is_active = True, 
                            iso_code = '', 
                            name = '', ), 
                        media_type = '', 
                        name = '', 
                        source = openapi_client.models.source.Source(
                            acronym = '', 
                            contact_email = '', 
                            id = 56, 
                            large_logo_url = '', 
                            name = '', 
                            small_logo_url = '', 
                            website_url = '', ), 
                        source_url = '', 
                        target_url = '', )
                    ]
            )
        else:
            return CollectionWrapped(
        )
        """

    def testCollectionWrapped(self):
        """Test CollectionWrapped"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

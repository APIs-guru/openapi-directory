# coding: utf-8

"""
    HHS Media Services API

    <div class=\"swagger-ui-wrap extraFooter\"><h3>Common Features / Behaviors</h3> <div class=\"features\"> <ul> <li><strong>* \"sort\" param:</strong> supports multi column sorting through the use of commas as delimiters, and a hyphen to denote descending order. <br/> <strong><span>Examples:</span></strong> <ul> <li><span class=\"example\">name</span><span class=\"description\">sort results by name ascending</span></li> <li><span class=\"example\">-name</span><span class=\"description\">sort results by name descending</span></li> <li><span class=\"example\">-name,id</span><span class=\"description\">sort results by name descending and then by id ascending</span></li> <li><span class=\"example\">id,-dateContentAuthored</span><span class=\"description\">sort results by id ascending and then date descending</span></li> </ul> </li> <li><strong>Date formats:</strong> Date input format is expected to be based on <a href=\"http://www.ietf.org/rfc/rfc3339.txt\">RFC 3339</a>. <br/> <span><strong>Example:</strong></span> <ul><li>2013-11-18T18:43:01Z</li></ul> </li> </ul> </div> </div>

    The version of the OpenAPI document: 2
    Contact: syndicationadmin@hhs.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.campaign import Campaign
from openapi_client.models.extended_attribute import ExtendedAttribute
from openapi_client.models.language import Language
from openapi_client.models.source import Source
from typing import Optional, Set
from typing_extensions import Self

class Image(BaseModel):
    """
    Image
    """ # noqa: E501
    campaigns: Optional[List[Campaign]] = None
    created_by: Optional[StrictStr] = Field(default=None, alias="createdBy")
    custom_attribution_url: Optional[StrictStr] = Field(default=None, alias="customAttributionUrl")
    custom_preview_url: Optional[StrictStr] = Field(default=None, alias="customPreviewUrl")
    custom_thumbnail_url: Optional[StrictStr] = Field(default=None, alias="customThumbnailUrl")
    date_content_authored: Optional[date] = Field(default=None, alias="dateContentAuthored")
    date_content_published: Optional[date] = Field(default=None, alias="dateContentPublished")
    date_content_reviewed: Optional[date] = Field(default=None, alias="dateContentReviewed")
    date_content_updated: Optional[date] = Field(default=None, alias="dateContentUpdated")
    date_syndication_captured: Optional[date] = Field(default=None, alias="dateSyndicationCaptured")
    date_syndication_updated: Optional[date] = Field(default=None, alias="dateSyndicationUpdated")
    date_syndication_visible: Optional[date] = Field(default=None, alias="dateSyndicationVisible")
    description: Optional[StrictStr] = None
    extended_attributes: Optional[List[ExtendedAttribute]] = Field(default=None, alias="extendedAttributes")
    external_guid: Optional[StrictStr] = Field(default=None, alias="externalGuid")
    foreign_syndication_api_url: Optional[StrictStr] = Field(default=None, alias="foreignSyndicationAPIUrl")
    hash: Optional[StrictStr] = None
    height: Optional[StrictInt] = None
    id: Optional[StrictInt] = None
    language: Optional[Language] = None
    media_type: Optional[StrictStr] = Field(default=None, alias="mediaType")
    name: Optional[StrictStr] = None
    source: Optional[Source] = None
    source_url: Optional[StrictStr] = Field(default=None, alias="sourceUrl")
    target_url: Optional[StrictStr] = Field(default=None, alias="targetUrl")
    width: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["campaigns", "createdBy", "customAttributionUrl", "customPreviewUrl", "customThumbnailUrl", "dateContentAuthored", "dateContentPublished", "dateContentReviewed", "dateContentUpdated", "dateSyndicationCaptured", "dateSyndicationUpdated", "dateSyndicationVisible", "description", "extendedAttributes", "externalGuid", "foreignSyndicationAPIUrl", "hash", "height", "id", "language", "mediaType", "name", "source", "sourceUrl", "targetUrl", "width"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Image from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in campaigns (list)
        _items = []
        if self.campaigns:
            for _item_campaigns in self.campaigns:
                if _item_campaigns:
                    _items.append(_item_campaigns.to_dict())
            _dict['campaigns'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in extended_attributes (list)
        _items = []
        if self.extended_attributes:
            for _item_extended_attributes in self.extended_attributes:
                if _item_extended_attributes:
                    _items.append(_item_extended_attributes.to_dict())
            _dict['extendedAttributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of language
        if self.language:
            _dict['language'] = self.language.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Image from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "campaigns": [Campaign.from_dict(_item) for _item in obj["campaigns"]] if obj.get("campaigns") is not None else None,
            "createdBy": obj.get("createdBy"),
            "customAttributionUrl": obj.get("customAttributionUrl"),
            "customPreviewUrl": obj.get("customPreviewUrl"),
            "customThumbnailUrl": obj.get("customThumbnailUrl"),
            "dateContentAuthored": obj.get("dateContentAuthored"),
            "dateContentPublished": obj.get("dateContentPublished"),
            "dateContentReviewed": obj.get("dateContentReviewed"),
            "dateContentUpdated": obj.get("dateContentUpdated"),
            "dateSyndicationCaptured": obj.get("dateSyndicationCaptured"),
            "dateSyndicationUpdated": obj.get("dateSyndicationUpdated"),
            "dateSyndicationVisible": obj.get("dateSyndicationVisible"),
            "description": obj.get("description"),
            "extendedAttributes": [ExtendedAttribute.from_dict(_item) for _item in obj["extendedAttributes"]] if obj.get("extendedAttributes") is not None else None,
            "externalGuid": obj.get("externalGuid"),
            "foreignSyndicationAPIUrl": obj.get("foreignSyndicationAPIUrl"),
            "hash": obj.get("hash"),
            "height": obj.get("height"),
            "id": obj.get("id"),
            "language": Language.from_dict(obj["language"]) if obj.get("language") is not None else None,
            "mediaType": obj.get("mediaType"),
            "name": obj.get("name"),
            "source": Source.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "sourceUrl": obj.get("sourceUrl"),
            "targetUrl": obj.get("targetUrl"),
            "width": obj.get("width")
        })
        return _obj



# coding: utf-8

"""
    IX-API

     This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 

    The version of the OpenAPI document: 2.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.point_of_presence import PointOfPresence

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class PopsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def pops_list(
        self,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by id")] = None,
        facility: Annotated[Optional[StrictStr], Field(description="Filter by facility")] = None,
        metro_area_network: Annotated[Optional[StrictStr], Field(description="Filter by metro_area_network")] = None,
        capability_media_type: Annotated[Optional[StrictStr], Field(description="Filter by capability_media_type")] = None,
        capability_speed: Annotated[Optional[StrictInt], Field(description="Filter by capability_speed")] = None,
        capability_speed__lt: Annotated[Optional[StrictInt], Field(description="Filter by capability_speed__lt")] = None,
        capability_speed__lte: Annotated[Optional[StrictInt], Field(description="Filter by capability_speed__lte")] = None,
        capability_speed__gt: Annotated[Optional[StrictInt], Field(description="Filter by capability_speed__gt")] = None,
        capability_speed__gte: Annotated[Optional[StrictInt], Field(description="Filter by capability_speed__gte")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[PointOfPresence]:
        """pops_list

        List all PoPs

        :param id: Filter by id
        :type id: List[str]
        :param facility: Filter by facility
        :type facility: str
        :param metro_area_network: Filter by metro_area_network
        :type metro_area_network: str
        :param capability_media_type: Filter by capability_media_type
        :type capability_media_type: str
        :param capability_speed: Filter by capability_speed
        :type capability_speed: int
        :param capability_speed__lt: Filter by capability_speed__lt
        :type capability_speed__lt: int
        :param capability_speed__lte: Filter by capability_speed__lte
        :type capability_speed__lte: int
        :param capability_speed__gt: Filter by capability_speed__gt
        :type capability_speed__gt: int
        :param capability_speed__gte: Filter by capability_speed__gte
        :type capability_speed__gte: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pops_list_serialize(
            id=id,
            facility=facility,
            metro_area_network=metro_area_network,
            capability_media_type=capability_media_type,
            capability_speed=capability_speed,
            capability_speed__lt=capability_speed__lt,
            capability_speed__lte=capability_speed__lte,
            capability_speed__gt=capability_speed__gt,
            capability_speed__gte=capability_speed__gte,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[PointOfPresence]",
            '400': "AccountsList400Response",
            '401': "AccountsList401Response",
            '403': "AccountsList403Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def pops_list_with_http_info(
        self,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by id")] = None,
        facility: Annotated[Optional[StrictStr], Field(description="Filter by facility")] = None,
        metro_area_network: Annotated[Optional[StrictStr], Field(description="Filter by metro_area_network")] = None,
        capability_media_type: Annotated[Optional[StrictStr], Field(description="Filter by capability_media_type")] = None,
        capability_speed: Annotated[Optional[StrictInt], Field(description="Filter by capability_speed")] = None,
        capability_speed__lt: Annotated[Optional[StrictInt], Field(description="Filter by capability_speed__lt")] = None,
        capability_speed__lte: Annotated[Optional[StrictInt], Field(description="Filter by capability_speed__lte")] = None,
        capability_speed__gt: Annotated[Optional[StrictInt], Field(description="Filter by capability_speed__gt")] = None,
        capability_speed__gte: Annotated[Optional[StrictInt], Field(description="Filter by capability_speed__gte")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[PointOfPresence]]:
        """pops_list

        List all PoPs

        :param id: Filter by id
        :type id: List[str]
        :param facility: Filter by facility
        :type facility: str
        :param metro_area_network: Filter by metro_area_network
        :type metro_area_network: str
        :param capability_media_type: Filter by capability_media_type
        :type capability_media_type: str
        :param capability_speed: Filter by capability_speed
        :type capability_speed: int
        :param capability_speed__lt: Filter by capability_speed__lt
        :type capability_speed__lt: int
        :param capability_speed__lte: Filter by capability_speed__lte
        :type capability_speed__lte: int
        :param capability_speed__gt: Filter by capability_speed__gt
        :type capability_speed__gt: int
        :param capability_speed__gte: Filter by capability_speed__gte
        :type capability_speed__gte: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pops_list_serialize(
            id=id,
            facility=facility,
            metro_area_network=metro_area_network,
            capability_media_type=capability_media_type,
            capability_speed=capability_speed,
            capability_speed__lt=capability_speed__lt,
            capability_speed__lte=capability_speed__lte,
            capability_speed__gt=capability_speed__gt,
            capability_speed__gte=capability_speed__gte,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[PointOfPresence]",
            '400': "AccountsList400Response",
            '401': "AccountsList401Response",
            '403': "AccountsList403Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def pops_list_without_preload_content(
        self,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by id")] = None,
        facility: Annotated[Optional[StrictStr], Field(description="Filter by facility")] = None,
        metro_area_network: Annotated[Optional[StrictStr], Field(description="Filter by metro_area_network")] = None,
        capability_media_type: Annotated[Optional[StrictStr], Field(description="Filter by capability_media_type")] = None,
        capability_speed: Annotated[Optional[StrictInt], Field(description="Filter by capability_speed")] = None,
        capability_speed__lt: Annotated[Optional[StrictInt], Field(description="Filter by capability_speed__lt")] = None,
        capability_speed__lte: Annotated[Optional[StrictInt], Field(description="Filter by capability_speed__lte")] = None,
        capability_speed__gt: Annotated[Optional[StrictInt], Field(description="Filter by capability_speed__gt")] = None,
        capability_speed__gte: Annotated[Optional[StrictInt], Field(description="Filter by capability_speed__gte")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """pops_list

        List all PoPs

        :param id: Filter by id
        :type id: List[str]
        :param facility: Filter by facility
        :type facility: str
        :param metro_area_network: Filter by metro_area_network
        :type metro_area_network: str
        :param capability_media_type: Filter by capability_media_type
        :type capability_media_type: str
        :param capability_speed: Filter by capability_speed
        :type capability_speed: int
        :param capability_speed__lt: Filter by capability_speed__lt
        :type capability_speed__lt: int
        :param capability_speed__lte: Filter by capability_speed__lte
        :type capability_speed__lte: int
        :param capability_speed__gt: Filter by capability_speed__gt
        :type capability_speed__gt: int
        :param capability_speed__gte: Filter by capability_speed__gte
        :type capability_speed__gte: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pops_list_serialize(
            id=id,
            facility=facility,
            metro_area_network=metro_area_network,
            capability_media_type=capability_media_type,
            capability_speed=capability_speed,
            capability_speed__lt=capability_speed__lt,
            capability_speed__lte=capability_speed__lte,
            capability_speed__gt=capability_speed__gt,
            capability_speed__gte=capability_speed__gte,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[PointOfPresence]",
            '400': "AccountsList400Response",
            '401': "AccountsList401Response",
            '403': "AccountsList403Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _pops_list_serialize(
        self,
        id,
        facility,
        metro_area_network,
        capability_media_type,
        capability_speed,
        capability_speed__lt,
        capability_speed__lte,
        capability_speed__gt,
        capability_speed__gte,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'id': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if facility is not None:
            
            _query_params.append(('facility', facility))
            
        if metro_area_network is not None:
            
            _query_params.append(('metro_area_network', metro_area_network))
            
        if capability_media_type is not None:
            
            _query_params.append(('capability_media_type', capability_media_type))
            
        if capability_speed is not None:
            
            _query_params.append(('capability_speed', capability_speed))
            
        if capability_speed__lt is not None:
            
            _query_params.append(('capability_speed__lt', capability_speed__lt))
            
        if capability_speed__lte is not None:
            
            _query_params.append(('capability_speed__lte', capability_speed__lte))
            
        if capability_speed__gt is not None:
            
            _query_params.append(('capability_speed__gt', capability_speed__gt))
            
        if capability_speed__gte is not None:
            
            _query_params.append(('capability_speed__gte', capability_speed__gte))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/pops',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def pops_read(
        self,
        id: Annotated[StrictStr, Field(description="Get by id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PointOfPresence:
        """pops_read

        Get a single point of presence

        :param id: Get by id (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pops_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PointOfPresence",
            '401': "AccountsList401Response",
            '403': "AccountsList403Response",
            '404': "AccountsRead404Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def pops_read_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Get by id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PointOfPresence]:
        """pops_read

        Get a single point of presence

        :param id: Get by id (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pops_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PointOfPresence",
            '401': "AccountsList401Response",
            '403': "AccountsList403Response",
            '404': "AccountsRead404Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def pops_read_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Get by id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """pops_read

        Get a single point of presence

        :param id: Get by id (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pops_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PointOfPresence",
            '401': "AccountsList401Response",
            '403': "AccountsList403Response",
            '404': "AccountsRead404Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _pops_read_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/pops/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    IX-API

     This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 

    The version of the OpenAPI document: 2.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.product_offering import ProductOffering
from openapi_client.models.product_offering_partial import ProductOfferingPartial

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ProductOfferingsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def product_offerings_list(
        self,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by id")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Filter by type")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Filter by name")] = None,
        handover_metro_area: Annotated[Optional[StrictStr], Field(description="Filter by handover_metro_area")] = None,
        handover_metro_area_network: Annotated[Optional[StrictStr], Field(description="Filter by handover_metro_area_network")] = None,
        service_metro_area: Annotated[Optional[StrictStr], Field(description="Filter by service_metro_area")] = None,
        service_metro_area_network: Annotated[Optional[StrictStr], Field(description="Filter by service_metro_area_network")] = None,
        service_provider: Annotated[Optional[StrictStr], Field(description="Filter by service_provider")] = None,
        downgrade_allowed: Annotated[Optional[StrictStr], Field(description="Filter by downgrade_allowed")] = None,
        upgrade_allowed: Annotated[Optional[StrictStr], Field(description="Filter by upgrade_allowed")] = None,
        bandwidth: Annotated[Optional[StrictInt], Field(description="Find product offerings where bandwidth is within the range of `bandwidth_min` and `bandwidth_max`.")] = None,
        physical_port_speed: Annotated[Optional[StrictInt], Field(description="Filter by physical_port_speed")] = None,
        service_provider_region: Annotated[Optional[StrictStr], Field(description="Filter by service_provider_region")] = None,
        service_provider_pop: Annotated[Optional[StrictStr], Field(description="Filter by service_provider_pop")] = None,
        delivery_method: Annotated[Optional[StrictStr], Field(description="Filter by delivery_method")] = None,
        cloud_key: Annotated[Optional[StrictStr], Field(description="For product offerings of type `cloud_vc`, if the `service_provider_workflow` is `provider_first` the `cloud_key` will be used for filtering the relevant offerings.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Returned objects only have properties which are present in the list of fields. The required `type` property is *implicitly* included. The results are *deduplicated*. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ProductOfferingPartial]:
        """product_offerings_list

        List all (filtered) products-offerings available on the platform

        :param id: Filter by id
        :type id: List[str]
        :param type: Filter by type
        :type type: str
        :param name: Filter by name
        :type name: str
        :param handover_metro_area: Filter by handover_metro_area
        :type handover_metro_area: str
        :param handover_metro_area_network: Filter by handover_metro_area_network
        :type handover_metro_area_network: str
        :param service_metro_area: Filter by service_metro_area
        :type service_metro_area: str
        :param service_metro_area_network: Filter by service_metro_area_network
        :type service_metro_area_network: str
        :param service_provider: Filter by service_provider
        :type service_provider: str
        :param downgrade_allowed: Filter by downgrade_allowed
        :type downgrade_allowed: str
        :param upgrade_allowed: Filter by upgrade_allowed
        :type upgrade_allowed: str
        :param bandwidth: Find product offerings where bandwidth is within the range of `bandwidth_min` and `bandwidth_max`.
        :type bandwidth: int
        :param physical_port_speed: Filter by physical_port_speed
        :type physical_port_speed: int
        :param service_provider_region: Filter by service_provider_region
        :type service_provider_region: str
        :param service_provider_pop: Filter by service_provider_pop
        :type service_provider_pop: str
        :param delivery_method: Filter by delivery_method
        :type delivery_method: str
        :param cloud_key: For product offerings of type `cloud_vc`, if the `service_provider_workflow` is `provider_first` the `cloud_key` will be used for filtering the relevant offerings.
        :type cloud_key: str
        :param fields: Returned objects only have properties which are present in the list of fields. The required `type` property is *implicitly* included. The results are *deduplicated*. 
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_offerings_list_serialize(
            id=id,
            type=type,
            name=name,
            handover_metro_area=handover_metro_area,
            handover_metro_area_network=handover_metro_area_network,
            service_metro_area=service_metro_area,
            service_metro_area_network=service_metro_area_network,
            service_provider=service_provider,
            downgrade_allowed=downgrade_allowed,
            upgrade_allowed=upgrade_allowed,
            bandwidth=bandwidth,
            physical_port_speed=physical_port_speed,
            service_provider_region=service_provider_region,
            service_provider_pop=service_provider_pop,
            delivery_method=delivery_method,
            cloud_key=cloud_key,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ProductOfferingPartial]",
            '400': "AccountsList400Response",
            '401': "AccountsList401Response",
            '403': "AccountsList403Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_offerings_list_with_http_info(
        self,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by id")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Filter by type")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Filter by name")] = None,
        handover_metro_area: Annotated[Optional[StrictStr], Field(description="Filter by handover_metro_area")] = None,
        handover_metro_area_network: Annotated[Optional[StrictStr], Field(description="Filter by handover_metro_area_network")] = None,
        service_metro_area: Annotated[Optional[StrictStr], Field(description="Filter by service_metro_area")] = None,
        service_metro_area_network: Annotated[Optional[StrictStr], Field(description="Filter by service_metro_area_network")] = None,
        service_provider: Annotated[Optional[StrictStr], Field(description="Filter by service_provider")] = None,
        downgrade_allowed: Annotated[Optional[StrictStr], Field(description="Filter by downgrade_allowed")] = None,
        upgrade_allowed: Annotated[Optional[StrictStr], Field(description="Filter by upgrade_allowed")] = None,
        bandwidth: Annotated[Optional[StrictInt], Field(description="Find product offerings where bandwidth is within the range of `bandwidth_min` and `bandwidth_max`.")] = None,
        physical_port_speed: Annotated[Optional[StrictInt], Field(description="Filter by physical_port_speed")] = None,
        service_provider_region: Annotated[Optional[StrictStr], Field(description="Filter by service_provider_region")] = None,
        service_provider_pop: Annotated[Optional[StrictStr], Field(description="Filter by service_provider_pop")] = None,
        delivery_method: Annotated[Optional[StrictStr], Field(description="Filter by delivery_method")] = None,
        cloud_key: Annotated[Optional[StrictStr], Field(description="For product offerings of type `cloud_vc`, if the `service_provider_workflow` is `provider_first` the `cloud_key` will be used for filtering the relevant offerings.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Returned objects only have properties which are present in the list of fields. The required `type` property is *implicitly* included. The results are *deduplicated*. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ProductOfferingPartial]]:
        """product_offerings_list

        List all (filtered) products-offerings available on the platform

        :param id: Filter by id
        :type id: List[str]
        :param type: Filter by type
        :type type: str
        :param name: Filter by name
        :type name: str
        :param handover_metro_area: Filter by handover_metro_area
        :type handover_metro_area: str
        :param handover_metro_area_network: Filter by handover_metro_area_network
        :type handover_metro_area_network: str
        :param service_metro_area: Filter by service_metro_area
        :type service_metro_area: str
        :param service_metro_area_network: Filter by service_metro_area_network
        :type service_metro_area_network: str
        :param service_provider: Filter by service_provider
        :type service_provider: str
        :param downgrade_allowed: Filter by downgrade_allowed
        :type downgrade_allowed: str
        :param upgrade_allowed: Filter by upgrade_allowed
        :type upgrade_allowed: str
        :param bandwidth: Find product offerings where bandwidth is within the range of `bandwidth_min` and `bandwidth_max`.
        :type bandwidth: int
        :param physical_port_speed: Filter by physical_port_speed
        :type physical_port_speed: int
        :param service_provider_region: Filter by service_provider_region
        :type service_provider_region: str
        :param service_provider_pop: Filter by service_provider_pop
        :type service_provider_pop: str
        :param delivery_method: Filter by delivery_method
        :type delivery_method: str
        :param cloud_key: For product offerings of type `cloud_vc`, if the `service_provider_workflow` is `provider_first` the `cloud_key` will be used for filtering the relevant offerings.
        :type cloud_key: str
        :param fields: Returned objects only have properties which are present in the list of fields. The required `type` property is *implicitly* included. The results are *deduplicated*. 
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_offerings_list_serialize(
            id=id,
            type=type,
            name=name,
            handover_metro_area=handover_metro_area,
            handover_metro_area_network=handover_metro_area_network,
            service_metro_area=service_metro_area,
            service_metro_area_network=service_metro_area_network,
            service_provider=service_provider,
            downgrade_allowed=downgrade_allowed,
            upgrade_allowed=upgrade_allowed,
            bandwidth=bandwidth,
            physical_port_speed=physical_port_speed,
            service_provider_region=service_provider_region,
            service_provider_pop=service_provider_pop,
            delivery_method=delivery_method,
            cloud_key=cloud_key,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ProductOfferingPartial]",
            '400': "AccountsList400Response",
            '401': "AccountsList401Response",
            '403': "AccountsList403Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_offerings_list_without_preload_content(
        self,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by id")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Filter by type")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Filter by name")] = None,
        handover_metro_area: Annotated[Optional[StrictStr], Field(description="Filter by handover_metro_area")] = None,
        handover_metro_area_network: Annotated[Optional[StrictStr], Field(description="Filter by handover_metro_area_network")] = None,
        service_metro_area: Annotated[Optional[StrictStr], Field(description="Filter by service_metro_area")] = None,
        service_metro_area_network: Annotated[Optional[StrictStr], Field(description="Filter by service_metro_area_network")] = None,
        service_provider: Annotated[Optional[StrictStr], Field(description="Filter by service_provider")] = None,
        downgrade_allowed: Annotated[Optional[StrictStr], Field(description="Filter by downgrade_allowed")] = None,
        upgrade_allowed: Annotated[Optional[StrictStr], Field(description="Filter by upgrade_allowed")] = None,
        bandwidth: Annotated[Optional[StrictInt], Field(description="Find product offerings where bandwidth is within the range of `bandwidth_min` and `bandwidth_max`.")] = None,
        physical_port_speed: Annotated[Optional[StrictInt], Field(description="Filter by physical_port_speed")] = None,
        service_provider_region: Annotated[Optional[StrictStr], Field(description="Filter by service_provider_region")] = None,
        service_provider_pop: Annotated[Optional[StrictStr], Field(description="Filter by service_provider_pop")] = None,
        delivery_method: Annotated[Optional[StrictStr], Field(description="Filter by delivery_method")] = None,
        cloud_key: Annotated[Optional[StrictStr], Field(description="For product offerings of type `cloud_vc`, if the `service_provider_workflow` is `provider_first` the `cloud_key` will be used for filtering the relevant offerings.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Returned objects only have properties which are present in the list of fields. The required `type` property is *implicitly* included. The results are *deduplicated*. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_offerings_list

        List all (filtered) products-offerings available on the platform

        :param id: Filter by id
        :type id: List[str]
        :param type: Filter by type
        :type type: str
        :param name: Filter by name
        :type name: str
        :param handover_metro_area: Filter by handover_metro_area
        :type handover_metro_area: str
        :param handover_metro_area_network: Filter by handover_metro_area_network
        :type handover_metro_area_network: str
        :param service_metro_area: Filter by service_metro_area
        :type service_metro_area: str
        :param service_metro_area_network: Filter by service_metro_area_network
        :type service_metro_area_network: str
        :param service_provider: Filter by service_provider
        :type service_provider: str
        :param downgrade_allowed: Filter by downgrade_allowed
        :type downgrade_allowed: str
        :param upgrade_allowed: Filter by upgrade_allowed
        :type upgrade_allowed: str
        :param bandwidth: Find product offerings where bandwidth is within the range of `bandwidth_min` and `bandwidth_max`.
        :type bandwidth: int
        :param physical_port_speed: Filter by physical_port_speed
        :type physical_port_speed: int
        :param service_provider_region: Filter by service_provider_region
        :type service_provider_region: str
        :param service_provider_pop: Filter by service_provider_pop
        :type service_provider_pop: str
        :param delivery_method: Filter by delivery_method
        :type delivery_method: str
        :param cloud_key: For product offerings of type `cloud_vc`, if the `service_provider_workflow` is `provider_first` the `cloud_key` will be used for filtering the relevant offerings.
        :type cloud_key: str
        :param fields: Returned objects only have properties which are present in the list of fields. The required `type` property is *implicitly* included. The results are *deduplicated*. 
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_offerings_list_serialize(
            id=id,
            type=type,
            name=name,
            handover_metro_area=handover_metro_area,
            handover_metro_area_network=handover_metro_area_network,
            service_metro_area=service_metro_area,
            service_metro_area_network=service_metro_area_network,
            service_provider=service_provider,
            downgrade_allowed=downgrade_allowed,
            upgrade_allowed=upgrade_allowed,
            bandwidth=bandwidth,
            physical_port_speed=physical_port_speed,
            service_provider_region=service_provider_region,
            service_provider_pop=service_provider_pop,
            delivery_method=delivery_method,
            cloud_key=cloud_key,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ProductOfferingPartial]",
            '400': "AccountsList400Response",
            '401': "AccountsList401Response",
            '403': "AccountsList403Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_offerings_list_serialize(
        self,
        id,
        type,
        name,
        handover_metro_area,
        handover_metro_area_network,
        service_metro_area,
        service_metro_area_network,
        service_provider,
        downgrade_allowed,
        upgrade_allowed,
        bandwidth,
        physical_port_speed,
        service_provider_region,
        service_provider_pop,
        delivery_method,
        cloud_key,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'id': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if handover_metro_area is not None:
            
            _query_params.append(('handover_metro_area', handover_metro_area))
            
        if handover_metro_area_network is not None:
            
            _query_params.append(('handover_metro_area_network', handover_metro_area_network))
            
        if service_metro_area is not None:
            
            _query_params.append(('service_metro_area', service_metro_area))
            
        if service_metro_area_network is not None:
            
            _query_params.append(('service_metro_area_network', service_metro_area_network))
            
        if service_provider is not None:
            
            _query_params.append(('service_provider', service_provider))
            
        if downgrade_allowed is not None:
            
            _query_params.append(('downgrade_allowed', downgrade_allowed))
            
        if upgrade_allowed is not None:
            
            _query_params.append(('upgrade_allowed', upgrade_allowed))
            
        if bandwidth is not None:
            
            _query_params.append(('bandwidth', bandwidth))
            
        if physical_port_speed is not None:
            
            _query_params.append(('physical_port_speed', physical_port_speed))
            
        if service_provider_region is not None:
            
            _query_params.append(('service_provider_region', service_provider_region))
            
        if service_provider_pop is not None:
            
            _query_params.append(('service_provider_pop', service_provider_pop))
            
        if delivery_method is not None:
            
            _query_params.append(('delivery_method', delivery_method))
            
        if cloud_key is not None:
            
            _query_params.append(('cloud_key', cloud_key))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/product-offerings',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_offerings_read(
        self,
        id: Annotated[StrictStr, Field(description="Get by id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductOffering:
        """product_offerings_read

        Get a single products-offering by id.

        :param id: Get by id (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_offerings_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductOffering",
            '401': "AccountsList401Response",
            '403': "AccountsList403Response",
            '404': "AccountsRead404Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_offerings_read_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Get by id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductOffering]:
        """product_offerings_read

        Get a single products-offering by id.

        :param id: Get by id (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_offerings_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductOffering",
            '401': "AccountsList401Response",
            '403': "AccountsList403Response",
            '404': "AccountsRead404Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_offerings_read_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Get by id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_offerings_read

        Get a single products-offering by id.

        :param id: Get by id (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_offerings_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductOffering",
            '401': "AccountsList401Response",
            '403': "AccountsList403Response",
            '404': "AccountsRead404Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_offerings_read_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/product-offerings/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



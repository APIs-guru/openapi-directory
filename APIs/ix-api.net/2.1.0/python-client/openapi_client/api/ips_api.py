# coding: utf-8

"""
    IX-API

     This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 

    The version of the OpenAPI document: 2.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.ip_address import IpAddress
from openapi_client.models.ip_address_request import IpAddressRequest
from openapi_client.models.ip_address_update import IpAddressUpdate
from openapi_client.models.ip_address_update_partial import IpAddressUpdatePartial

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class IpsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def ips_create(
        self,
        ip_address_request: Annotated[Optional[IpAddressRequest], Field(description="IP-Address / Prefix allocation Request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> IpAddress:
        """ips_create

        Add an ip host address or network prefix.

        :param ip_address_request: IP-Address / Prefix allocation Request
        :type ip_address_request: IpAddressRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ips_create_serialize(
            ip_address_request=ip_address_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "IpAddress",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def ips_create_with_http_info(
        self,
        ip_address_request: Annotated[Optional[IpAddressRequest], Field(description="IP-Address / Prefix allocation Request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[IpAddress]:
        """ips_create

        Add an ip host address or network prefix.

        :param ip_address_request: IP-Address / Prefix allocation Request
        :type ip_address_request: IpAddressRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ips_create_serialize(
            ip_address_request=ip_address_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "IpAddress",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def ips_create_without_preload_content(
        self,
        ip_address_request: Annotated[Optional[IpAddressRequest], Field(description="IP-Address / Prefix allocation Request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """ips_create

        Add an ip host address or network prefix.

        :param ip_address_request: IP-Address / Prefix allocation Request
        :type ip_address_request: IpAddressRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ips_create_serialize(
            ip_address_request=ip_address_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "IpAddress",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _ips_create_serialize(
        self,
        ip_address_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if ip_address_request is not None:
            _body_params = ip_address_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/ips',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def ips_list(
        self,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by id")] = None,
        managing_account: Annotated[Optional[StrictStr], Field(description="Filter by managing_account")] = None,
        consuming_account: Annotated[Optional[StrictStr], Field(description="Filter by consuming_account")] = None,
        external_ref: Annotated[Optional[StrictStr], Field(description="Filter by external_ref")] = None,
        network_service: Annotated[Optional[StrictStr], Field(description="Filter by network_service")] = None,
        network_service_config: Annotated[Optional[StrictStr], Field(description="Filter by network_service_config")] = None,
        network_feature: Annotated[Optional[StrictStr], Field(description="Filter by network_feature")] = None,
        network_feature_config: Annotated[Optional[StrictStr], Field(description="Filter by network_feature_config")] = None,
        version: Annotated[Optional[StrictInt], Field(description="Filter by version")] = None,
        fqdn: Annotated[Optional[StrictStr], Field(description="Filter by fqdn")] = None,
        prefix_length: Annotated[Optional[StrictInt], Field(description="Filter by prefix_length")] = None,
        valid_not_before: Annotated[Optional[StrictStr], Field(description="Filter by valid_not_before")] = None,
        valid_not_after: Annotated[Optional[StrictStr], Field(description="Filter by valid_not_after")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[IpAddress]:
        """ips_list

        List all ip addresses (and prefixes).

        :param id: Filter by id
        :type id: List[str]
        :param managing_account: Filter by managing_account
        :type managing_account: str
        :param consuming_account: Filter by consuming_account
        :type consuming_account: str
        :param external_ref: Filter by external_ref
        :type external_ref: str
        :param network_service: Filter by network_service
        :type network_service: str
        :param network_service_config: Filter by network_service_config
        :type network_service_config: str
        :param network_feature: Filter by network_feature
        :type network_feature: str
        :param network_feature_config: Filter by network_feature_config
        :type network_feature_config: str
        :param version: Filter by version
        :type version: int
        :param fqdn: Filter by fqdn
        :type fqdn: str
        :param prefix_length: Filter by prefix_length
        :type prefix_length: int
        :param valid_not_before: Filter by valid_not_before
        :type valid_not_before: str
        :param valid_not_after: Filter by valid_not_after
        :type valid_not_after: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ips_list_serialize(
            id=id,
            managing_account=managing_account,
            consuming_account=consuming_account,
            external_ref=external_ref,
            network_service=network_service,
            network_service_config=network_service_config,
            network_feature=network_feature,
            network_feature_config=network_feature_config,
            version=version,
            fqdn=fqdn,
            prefix_length=prefix_length,
            valid_not_before=valid_not_before,
            valid_not_after=valid_not_after,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IpAddress]",
            '400': "AccountsList400Response",
            '401': "AccountsList401Response",
            '403': "AccountsList403Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def ips_list_with_http_info(
        self,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by id")] = None,
        managing_account: Annotated[Optional[StrictStr], Field(description="Filter by managing_account")] = None,
        consuming_account: Annotated[Optional[StrictStr], Field(description="Filter by consuming_account")] = None,
        external_ref: Annotated[Optional[StrictStr], Field(description="Filter by external_ref")] = None,
        network_service: Annotated[Optional[StrictStr], Field(description="Filter by network_service")] = None,
        network_service_config: Annotated[Optional[StrictStr], Field(description="Filter by network_service_config")] = None,
        network_feature: Annotated[Optional[StrictStr], Field(description="Filter by network_feature")] = None,
        network_feature_config: Annotated[Optional[StrictStr], Field(description="Filter by network_feature_config")] = None,
        version: Annotated[Optional[StrictInt], Field(description="Filter by version")] = None,
        fqdn: Annotated[Optional[StrictStr], Field(description="Filter by fqdn")] = None,
        prefix_length: Annotated[Optional[StrictInt], Field(description="Filter by prefix_length")] = None,
        valid_not_before: Annotated[Optional[StrictStr], Field(description="Filter by valid_not_before")] = None,
        valid_not_after: Annotated[Optional[StrictStr], Field(description="Filter by valid_not_after")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[IpAddress]]:
        """ips_list

        List all ip addresses (and prefixes).

        :param id: Filter by id
        :type id: List[str]
        :param managing_account: Filter by managing_account
        :type managing_account: str
        :param consuming_account: Filter by consuming_account
        :type consuming_account: str
        :param external_ref: Filter by external_ref
        :type external_ref: str
        :param network_service: Filter by network_service
        :type network_service: str
        :param network_service_config: Filter by network_service_config
        :type network_service_config: str
        :param network_feature: Filter by network_feature
        :type network_feature: str
        :param network_feature_config: Filter by network_feature_config
        :type network_feature_config: str
        :param version: Filter by version
        :type version: int
        :param fqdn: Filter by fqdn
        :type fqdn: str
        :param prefix_length: Filter by prefix_length
        :type prefix_length: int
        :param valid_not_before: Filter by valid_not_before
        :type valid_not_before: str
        :param valid_not_after: Filter by valid_not_after
        :type valid_not_after: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ips_list_serialize(
            id=id,
            managing_account=managing_account,
            consuming_account=consuming_account,
            external_ref=external_ref,
            network_service=network_service,
            network_service_config=network_service_config,
            network_feature=network_feature,
            network_feature_config=network_feature_config,
            version=version,
            fqdn=fqdn,
            prefix_length=prefix_length,
            valid_not_before=valid_not_before,
            valid_not_after=valid_not_after,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IpAddress]",
            '400': "AccountsList400Response",
            '401': "AccountsList401Response",
            '403': "AccountsList403Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def ips_list_without_preload_content(
        self,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by id")] = None,
        managing_account: Annotated[Optional[StrictStr], Field(description="Filter by managing_account")] = None,
        consuming_account: Annotated[Optional[StrictStr], Field(description="Filter by consuming_account")] = None,
        external_ref: Annotated[Optional[StrictStr], Field(description="Filter by external_ref")] = None,
        network_service: Annotated[Optional[StrictStr], Field(description="Filter by network_service")] = None,
        network_service_config: Annotated[Optional[StrictStr], Field(description="Filter by network_service_config")] = None,
        network_feature: Annotated[Optional[StrictStr], Field(description="Filter by network_feature")] = None,
        network_feature_config: Annotated[Optional[StrictStr], Field(description="Filter by network_feature_config")] = None,
        version: Annotated[Optional[StrictInt], Field(description="Filter by version")] = None,
        fqdn: Annotated[Optional[StrictStr], Field(description="Filter by fqdn")] = None,
        prefix_length: Annotated[Optional[StrictInt], Field(description="Filter by prefix_length")] = None,
        valid_not_before: Annotated[Optional[StrictStr], Field(description="Filter by valid_not_before")] = None,
        valid_not_after: Annotated[Optional[StrictStr], Field(description="Filter by valid_not_after")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """ips_list

        List all ip addresses (and prefixes).

        :param id: Filter by id
        :type id: List[str]
        :param managing_account: Filter by managing_account
        :type managing_account: str
        :param consuming_account: Filter by consuming_account
        :type consuming_account: str
        :param external_ref: Filter by external_ref
        :type external_ref: str
        :param network_service: Filter by network_service
        :type network_service: str
        :param network_service_config: Filter by network_service_config
        :type network_service_config: str
        :param network_feature: Filter by network_feature
        :type network_feature: str
        :param network_feature_config: Filter by network_feature_config
        :type network_feature_config: str
        :param version: Filter by version
        :type version: int
        :param fqdn: Filter by fqdn
        :type fqdn: str
        :param prefix_length: Filter by prefix_length
        :type prefix_length: int
        :param valid_not_before: Filter by valid_not_before
        :type valid_not_before: str
        :param valid_not_after: Filter by valid_not_after
        :type valid_not_after: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ips_list_serialize(
            id=id,
            managing_account=managing_account,
            consuming_account=consuming_account,
            external_ref=external_ref,
            network_service=network_service,
            network_service_config=network_service_config,
            network_feature=network_feature,
            network_feature_config=network_feature_config,
            version=version,
            fqdn=fqdn,
            prefix_length=prefix_length,
            valid_not_before=valid_not_before,
            valid_not_after=valid_not_after,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IpAddress]",
            '400': "AccountsList400Response",
            '401': "AccountsList401Response",
            '403': "AccountsList403Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _ips_list_serialize(
        self,
        id,
        managing_account,
        consuming_account,
        external_ref,
        network_service,
        network_service_config,
        network_feature,
        network_feature_config,
        version,
        fqdn,
        prefix_length,
        valid_not_before,
        valid_not_after,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'id': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if managing_account is not None:
            
            _query_params.append(('managing_account', managing_account))
            
        if consuming_account is not None:
            
            _query_params.append(('consuming_account', consuming_account))
            
        if external_ref is not None:
            
            _query_params.append(('external_ref', external_ref))
            
        if network_service is not None:
            
            _query_params.append(('network_service', network_service))
            
        if network_service_config is not None:
            
            _query_params.append(('network_service_config', network_service_config))
            
        if network_feature is not None:
            
            _query_params.append(('network_feature', network_feature))
            
        if network_feature_config is not None:
            
            _query_params.append(('network_feature_config', network_feature_config))
            
        if version is not None:
            
            _query_params.append(('version', version))
            
        if fqdn is not None:
            
            _query_params.append(('fqdn', fqdn))
            
        if prefix_length is not None:
            
            _query_params.append(('prefix_length', prefix_length))
            
        if valid_not_before is not None:
            
            _query_params.append(('valid_not_before', valid_not_before))
            
        if valid_not_after is not None:
            
            _query_params.append(('valid_not_after', valid_not_after))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/ips',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def ips_partial_update(
        self,
        id: Annotated[StrictStr, Field(description="Get by id")],
        ip_address_update_partial: Annotated[Optional[IpAddressUpdatePartial], Field(description="IP-Address Update")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> IpAddress:
        """ips_partial_update

        Update parts of an ip address.   As with the `PUT` opertaion, IP addresses, where you don't have update rights, will yield a `resource access denied` error when attempting an update.  If the ip address was allocated for you, you might not be able to change anything but the `fqdn`.

        :param id: Get by id (required)
        :type id: str
        :param ip_address_update_partial: IP-Address Update
        :type ip_address_update_partial: IpAddressUpdatePartial
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ips_partial_update_serialize(
            id=id,
            ip_address_update_partial=ip_address_update_partial,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IpAddress",
            '400': "AccountsList400Response",
            '401': "AccountsList401Response",
            '403': "AccountsList403Response",
            '404': "AccountsRead404Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def ips_partial_update_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Get by id")],
        ip_address_update_partial: Annotated[Optional[IpAddressUpdatePartial], Field(description="IP-Address Update")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[IpAddress]:
        """ips_partial_update

        Update parts of an ip address.   As with the `PUT` opertaion, IP addresses, where you don't have update rights, will yield a `resource access denied` error when attempting an update.  If the ip address was allocated for you, you might not be able to change anything but the `fqdn`.

        :param id: Get by id (required)
        :type id: str
        :param ip_address_update_partial: IP-Address Update
        :type ip_address_update_partial: IpAddressUpdatePartial
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ips_partial_update_serialize(
            id=id,
            ip_address_update_partial=ip_address_update_partial,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IpAddress",
            '400': "AccountsList400Response",
            '401': "AccountsList401Response",
            '403': "AccountsList403Response",
            '404': "AccountsRead404Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def ips_partial_update_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Get by id")],
        ip_address_update_partial: Annotated[Optional[IpAddressUpdatePartial], Field(description="IP-Address Update")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """ips_partial_update

        Update parts of an ip address.   As with the `PUT` opertaion, IP addresses, where you don't have update rights, will yield a `resource access denied` error when attempting an update.  If the ip address was allocated for you, you might not be able to change anything but the `fqdn`.

        :param id: Get by id (required)
        :type id: str
        :param ip_address_update_partial: IP-Address Update
        :type ip_address_update_partial: IpAddressUpdatePartial
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ips_partial_update_serialize(
            id=id,
            ip_address_update_partial=ip_address_update_partial,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IpAddress",
            '400': "AccountsList400Response",
            '401': "AccountsList401Response",
            '403': "AccountsList403Response",
            '404': "AccountsRead404Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _ips_partial_update_serialize(
        self,
        id,
        ip_address_update_partial,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if ip_address_update_partial is not None:
            _body_params = ip_address_update_partial


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/merge-patch+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/ips/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def ips_read(
        self,
        id: Annotated[StrictStr, Field(description="Get by id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> IpAddress:
        """ips_read

        Get a single ip addresses by it's id.

        :param id: Get by id (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ips_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IpAddress",
            '401': "AccountsList401Response",
            '403': "AccountsList403Response",
            '404': "AccountsRead404Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def ips_read_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Get by id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[IpAddress]:
        """ips_read

        Get a single ip addresses by it's id.

        :param id: Get by id (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ips_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IpAddress",
            '401': "AccountsList401Response",
            '403': "AccountsList403Response",
            '404': "AccountsRead404Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def ips_read_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Get by id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """ips_read

        Get a single ip addresses by it's id.

        :param id: Get by id (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ips_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IpAddress",
            '401': "AccountsList401Response",
            '403': "AccountsList403Response",
            '404': "AccountsRead404Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _ips_read_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/ips/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def ips_update(
        self,
        id: Annotated[StrictStr, Field(description="Get by id")],
        ip_address_update: Annotated[Optional[IpAddressUpdate], Field(description="IP-Address Update")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> IpAddress:
        """ips_update

        Update an ip address object.  You can only update IP addresses within your current scope. Not all addresses you can read you can update.  If the ip address was allocated for you, you might not be able to change anything but the `fqdn`.

        :param id: Get by id (required)
        :type id: str
        :param ip_address_update: IP-Address Update
        :type ip_address_update: IpAddressUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ips_update_serialize(
            id=id,
            ip_address_update=ip_address_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IpAddress",
            '400': "AccountsList400Response",
            '401': "AccountsList401Response",
            '403': "AccountsList403Response",
            '404': "AccountsRead404Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def ips_update_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Get by id")],
        ip_address_update: Annotated[Optional[IpAddressUpdate], Field(description="IP-Address Update")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[IpAddress]:
        """ips_update

        Update an ip address object.  You can only update IP addresses within your current scope. Not all addresses you can read you can update.  If the ip address was allocated for you, you might not be able to change anything but the `fqdn`.

        :param id: Get by id (required)
        :type id: str
        :param ip_address_update: IP-Address Update
        :type ip_address_update: IpAddressUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ips_update_serialize(
            id=id,
            ip_address_update=ip_address_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IpAddress",
            '400': "AccountsList400Response",
            '401': "AccountsList401Response",
            '403': "AccountsList403Response",
            '404': "AccountsRead404Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def ips_update_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Get by id")],
        ip_address_update: Annotated[Optional[IpAddressUpdate], Field(description="IP-Address Update")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """ips_update

        Update an ip address object.  You can only update IP addresses within your current scope. Not all addresses you can read you can update.  If the ip address was allocated for you, you might not be able to change anything but the `fqdn`.

        :param id: Get by id (required)
        :type id: str
        :param ip_address_update: IP-Address Update
        :type ip_address_update: IpAddressUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ips_update_serialize(
            id=id,
            ip_address_update=ip_address_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IpAddress",
            '400': "AccountsList400Response",
            '401': "AccountsList401Response",
            '403': "AccountsList403Response",
            '404': "AccountsRead404Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _ips_update_serialize(
        self,
        id,
        ip_address_update,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if ip_address_update is not None:
            _body_params = ip_address_update


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/ips/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



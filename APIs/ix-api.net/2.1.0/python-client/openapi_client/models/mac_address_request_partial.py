# coding: utf-8

"""
    IX-API

     This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 

    The version of the OpenAPI document: 2.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class MacAddressRequestPartial(BaseModel):
    """
    MAC-Address Request
    """ # noqa: E501
    address: Optional[StrictStr] = Field(default=None, description="Unicast MAC address, formatted hexadecimal values with colons. ")
    consuming_account: Optional[StrictStr] = Field(default=None, description="The `id` of the account consuming a service.  Used to be `owning_customer`. ")
    external_ref: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="Reference field, free to use for the API user.")
    managing_account: Optional[StrictStr] = Field(default=None, description="The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. ")
    valid_not_after: Optional[datetime] = None
    valid_not_before: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["address", "consuming_account", "external_ref", "managing_account", "valid_not_after", "valid_not_before"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MacAddressRequestPartial from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if external_ref (nullable) is None
        # and model_fields_set contains the field
        if self.external_ref is None and "external_ref" in self.model_fields_set:
            _dict['external_ref'] = None

        # set to None if valid_not_after (nullable) is None
        # and model_fields_set contains the field
        if self.valid_not_after is None and "valid_not_after" in self.model_fields_set:
            _dict['valid_not_after'] = None

        # set to None if valid_not_before (nullable) is None
        # and model_fields_set contains the field
        if self.valid_not_before is None and "valid_not_before" in self.model_fields_set:
            _dict['valid_not_before'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MacAddressRequestPartial from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "consuming_account": obj.get("consuming_account"),
            "external_ref": obj.get("external_ref"),
            "managing_account": obj.get("managing_account"),
            "valid_not_after": obj.get("valid_not_after"),
            "valid_not_before": obj.get("valid_not_before")
        })
        return _obj



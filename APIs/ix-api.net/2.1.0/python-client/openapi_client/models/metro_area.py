# coding: utf-8

"""
    IX-API

     This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 

    The version of the OpenAPI document: 2.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class MetroArea(BaseModel):
    """
    MetroArea
    """ # noqa: E501
    display_name: Annotated[str, Field(strict=True, max_length=64)] = Field(description="The name of the metro area. Likely the same as the IATA code. ")
    facilities: List[StrictStr] = Field(description="List of facilities the metro area network.")
    iata_code: Annotated[str, Field(strict=True, max_length=3)] = Field(description="The three letter IATA airport code for identiying the metro area. ")
    id: Annotated[str, Field(strict=True, max_length=80)]
    metro_area_networks: List[StrictStr] = Field(description="List of networks in the metro area.")
    un_locode: Annotated[str, Field(strict=True, max_length=6)] = Field(description="The UN/LOCODE for identifying the metro area. ")
    __properties: ClassVar[List[str]] = ["display_name", "facilities", "iata_code", "id", "metro_area_networks", "un_locode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetroArea from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetroArea from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "display_name": obj.get("display_name"),
            "facilities": obj.get("facilities"),
            "iata_code": obj.get("iata_code"),
            "id": obj.get("id"),
            "metro_area_networks": obj.get("metro_area_networks"),
            "un_locode": obj.get("un_locode")
        })
        return _obj



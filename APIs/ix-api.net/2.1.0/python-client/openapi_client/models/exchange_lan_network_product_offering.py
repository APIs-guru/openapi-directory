# coding: utf-8

"""
    IX-API

     This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 

    The version of the OpenAPI document: 2.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ExchangeLanNetworkProductOffering(BaseModel):
    """
    ExchangeLanNetworkProductOffering
    """ # noqa: E501
    bandwidth_max: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(description="When not `null`, this value enforces a mandatory rate limit for all network service configs.")
    bandwidth_min: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(description="When configuring access to the network service, at least this `capacity` must be provided.")
    display_name: Annotated[str, Field(strict=True, max_length=256)]
    downgrade_allowed: StrictBool = Field(description="Indicates if the service can be migrated to a lower bandwidth.")
    exchange_lan_network_service: StrictStr = Field(description="The id of the exchange lan network service.")
    handover_metro_area: StrictStr = Field(description="Id of the `MetroArea`. The network service will be accessed from this metro area. ")
    handover_metro_area_network: StrictStr = Field(description="Id of the `MetroAreaNetwork`. The service will be accessed through the handover metro area network. ")
    id: Annotated[str, Field(strict=True, max_length=80)]
    name: Annotated[str, Field(strict=True, max_length=160)] = Field(description="Name of the product")
    physical_port_speed: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(description="If the service is dependent on the speed of the physical port this field denotes the speed.")
    provider_vlans: StrictStr = Field(description="The `NetworkService` provides `single` or `multi`ple vlans.")
    resource_type: StrictStr = Field(description="The resource type refers to an ix-api resource. ")
    service_metro_area: StrictStr = Field(description="Id of the `MetroArea`. The service is delivered in this metro area. ")
    service_metro_area_network: StrictStr = Field(description="Id of the `MetroAreaNetwork`. The service is directly provided on the metro area network. ")
    service_provider: StrictStr = Field(description="The name of the provider providing the service. ")
    type: StrictStr
    upgrade_allowed: StrictBool = Field(description="Indicates if the service can be migrated to a higher bandwidth.")
    __properties: ClassVar[List[str]] = ["bandwidth_max", "bandwidth_min", "display_name", "downgrade_allowed", "exchange_lan_network_service", "handover_metro_area", "handover_metro_area_network", "id", "name", "physical_port_speed", "provider_vlans", "resource_type", "service_metro_area", "service_metro_area_network", "service_provider", "type", "upgrade_allowed"]

    @field_validator('provider_vlans')
    def provider_vlans_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['single', 'multi']):
            raise ValueError("must be one of enum values ('single', 'multi')")
        return value

    @field_validator('resource_type')
    def resource_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['connection', 'demarc', 'network_service', 'network_service_config']):
            raise ValueError("must be one of enum values ('connection', 'demarc', 'network_service', 'network_service_config')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExchangeLanNetworkProductOffering from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if bandwidth_max (nullable) is None
        # and model_fields_set contains the field
        if self.bandwidth_max is None and "bandwidth_max" in self.model_fields_set:
            _dict['bandwidth_max'] = None

        # set to None if bandwidth_min (nullable) is None
        # and model_fields_set contains the field
        if self.bandwidth_min is None and "bandwidth_min" in self.model_fields_set:
            _dict['bandwidth_min'] = None

        # set to None if physical_port_speed (nullable) is None
        # and model_fields_set contains the field
        if self.physical_port_speed is None and "physical_port_speed" in self.model_fields_set:
            _dict['physical_port_speed'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExchangeLanNetworkProductOffering from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bandwidth_max": obj.get("bandwidth_max"),
            "bandwidth_min": obj.get("bandwidth_min"),
            "display_name": obj.get("display_name"),
            "downgrade_allowed": obj.get("downgrade_allowed"),
            "exchange_lan_network_service": obj.get("exchange_lan_network_service"),
            "handover_metro_area": obj.get("handover_metro_area"),
            "handover_metro_area_network": obj.get("handover_metro_area_network"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "physical_port_speed": obj.get("physical_port_speed"),
            "provider_vlans": obj.get("provider_vlans"),
            "resource_type": obj.get("resource_type"),
            "service_metro_area": obj.get("service_metro_area"),
            "service_metro_area_network": obj.get("service_metro_area_network"),
            "service_provider": obj.get("service_provider"),
            "type": obj.get("type"),
            "upgrade_allowed": obj.get("upgrade_allowed")
        })
        return _obj



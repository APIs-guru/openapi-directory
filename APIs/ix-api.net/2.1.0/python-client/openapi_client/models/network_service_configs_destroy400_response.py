# coding: utf-8

"""
    IX-API

     This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 

    The version of the OpenAPI document: 2.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NetworkServiceConfigsDestroy400Response(BaseModel):
    """
    NetworkServiceConfigsDestroy400Response
    """ # noqa: E501
    detail: Optional[StrictStr] = Field(default=None, description="A human-readable explanation specific to this occurrence of the problem.")
    instance: Optional[StrictStr] = Field(default=None, description="A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced.")
    status: Optional[Any] = None
    title: Optional[Any] = None
    type: StrictStr
    charged_until: Optional[date] = Field(default=None, description="The date until the service is payed for. Typically `â‰¥ decommission_at`.")
    decommission_at: Optional[date] = Field(default=None, description="This field denotes the first possible cancellation date of the service.  See the service `cancellation-policy` for details.")
    __properties: ClassVar[List[str]] = ["detail", "instance", "status", "title", "type", "charged_until", "decommission_at"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['https://errors.ix-api.net/v2/cancellation-policy-error.html', 'https://errors.ix-api.net/v2/unable-to-fulfill.html']):
            raise ValueError("must be one of enum values ('https://errors.ix-api.net/v2/cancellation-policy-error.html', 'https://errors.ix-api.net/v2/unable-to-fulfill.html')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkServiceConfigsDestroy400Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkServiceConfigsDestroy400Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "detail": obj.get("detail"),
            "instance": obj.get("instance"),
            "status": obj.get("status"),
            "title": obj.get("title"),
            "type": obj.get("type"),
            "charged_until": obj.get("charged_until"),
            "decommission_at": obj.get("decommission_at")
        })
        return _obj



# coding: utf-8

"""
    IX-API

     This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 

    The version of the OpenAPI document: 2.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class RouteServerNetworkFeatureConfigRequestPartial(BaseModel):
    """
    Route Server Network Feature Config Request
    """ # noqa: E501
    as_set_v4: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="AS-SET of the customer for IPv4 prefix filtering. This is used to generate filters on the router servers.  Only valid referenced prefixes within the AS-SET are allowed inbound to the route server. All other routes are filtered.  This field is *required* if the route server network feature only supports the `af_inet` address family. If multiple address families are supported, it is optional if the `as_set_v6` is provided.  Important: The format has to be: \"AS-SET@IRR\". IRR is the database where the AS-SET is registred. Typically used IRR's are RADB, RIPE, NTTCOM, APNIC, ALTDB, LEVEL3, ARIN, AFRINIC, LACNIC ")
    as_set_v6: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="AS-SET of the customer for IPv6. This is used to generate filters on the router servers. Only valid referenced prefixes within the AS-SET are allowed inbound to the route server. All other routes are filtered.  This field is *required* if the route server network feature only supports the `af_inet6` address family. If multiple address families are supported, it is optional if the `as_set_v4` is provided.  Important: The format has to be: \"AS-SET@IRR\". IRR is the database where the AS-SET is registred. Typically used IRR's are RADB, RIPE, NTTCOM, APNIC, ALTDB, LEVEL3, ARIN, AFRINIC, LACNIC ")
    asn: Optional[Annotated[int, Field(le=4294967295, strict=True, ge=0)]] = Field(default=None, description="The ASN of the peer. ")
    bgp_session_type: Optional[StrictStr] = Field(default=None, description="The session type describes which of the both parties will open the connection. If set to passive, the customer router needs to open the connection. If its set to active, the route server will open the connection. The standard behavior on most exchanges is passive. ")
    billing_account: Optional[StrictStr] = Field(default=None, description="An account requires billing_information to be used as a `billing_account`.")
    consuming_account: Optional[StrictStr] = Field(default=None, description="The `id` of the account consuming a service.  Used to be `owning_customer`. ")
    contract_ref: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. ")
    external_ref: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="Reference field, free to use for the API user.")
    insert_ixp_asn: Optional[StrictBool] = Field(default=True, description="Insert the ASN of the exchange into the AS path. This function is only used in special cases. In 99% of all cases, it should be false. ")
    ip: Optional[StrictStr] = Field(default=None, description="The BGP session will be established from this IP address. Only IPs assigned to the corresponding network service config can be used.")
    managing_account: Optional[StrictStr] = Field(default=None, description="The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. ")
    max_prefix_v4: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Announcing more than `max_prefix` IPv4 prefixes the bgp session will be droped. ")
    max_prefix_v6: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Announcing more than `max_prefix` IPv6 prefixes the bgp session will be droped. ")
    network_feature: Optional[StrictStr] = None
    network_service_config: Optional[StrictStr] = None
    password: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default='', description="The cleartext BGP session password")
    purchase_order: Optional[Annotated[str, Field(strict=True, max_length=80)]] = Field(default='', description="Purchase Order ID which will be displayed on the invoice. ")
    role_assignments: Optional[List[StrictStr]] = Field(default=None, description="A set of `RoleAssignment`s. See the documentation on the specific `required_contact_roles`, `nfc_required_contact_roles` or `nsc_required_contact_roles` on what `RoleAssignment`s to provide. ")
    session_mode: Optional[StrictStr] = Field(default=None, description="Set the session mode with the routeserver. ")
    type: StrictStr
    __properties: ClassVar[List[str]] = ["as_set_v4", "as_set_v6", "asn", "bgp_session_type", "billing_account", "consuming_account", "contract_ref", "external_ref", "insert_ixp_asn", "ip", "managing_account", "max_prefix_v4", "max_prefix_v6", "network_feature", "network_service_config", "password", "purchase_order", "role_assignments", "session_mode", "type"]

    @field_validator('bgp_session_type')
    def bgp_session_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['active', 'passive']):
            raise ValueError("must be one of enum values ('active', 'passive')")
        return value

    @field_validator('session_mode')
    def session_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['public', 'collector']):
            raise ValueError("must be one of enum values ('public', 'collector')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RouteServerNetworkFeatureConfigRequestPartial from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if as_set_v4 (nullable) is None
        # and model_fields_set contains the field
        if self.as_set_v4 is None and "as_set_v4" in self.model_fields_set:
            _dict['as_set_v4'] = None

        # set to None if as_set_v6 (nullable) is None
        # and model_fields_set contains the field
        if self.as_set_v6 is None and "as_set_v6" in self.model_fields_set:
            _dict['as_set_v6'] = None

        # set to None if contract_ref (nullable) is None
        # and model_fields_set contains the field
        if self.contract_ref is None and "contract_ref" in self.model_fields_set:
            _dict['contract_ref'] = None

        # set to None if external_ref (nullable) is None
        # and model_fields_set contains the field
        if self.external_ref is None and "external_ref" in self.model_fields_set:
            _dict['external_ref'] = None

        # set to None if max_prefix_v4 (nullable) is None
        # and model_fields_set contains the field
        if self.max_prefix_v4 is None and "max_prefix_v4" in self.model_fields_set:
            _dict['max_prefix_v4'] = None

        # set to None if max_prefix_v6 (nullable) is None
        # and model_fields_set contains the field
        if self.max_prefix_v6 is None and "max_prefix_v6" in self.model_fields_set:
            _dict['max_prefix_v6'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RouteServerNetworkFeatureConfigRequestPartial from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "as_set_v4": obj.get("as_set_v4"),
            "as_set_v6": obj.get("as_set_v6"),
            "asn": obj.get("asn"),
            "bgp_session_type": obj.get("bgp_session_type"),
            "billing_account": obj.get("billing_account"),
            "consuming_account": obj.get("consuming_account"),
            "contract_ref": obj.get("contract_ref"),
            "external_ref": obj.get("external_ref"),
            "insert_ixp_asn": obj.get("insert_ixp_asn") if obj.get("insert_ixp_asn") is not None else True,
            "ip": obj.get("ip"),
            "managing_account": obj.get("managing_account"),
            "max_prefix_v4": obj.get("max_prefix_v4"),
            "max_prefix_v6": obj.get("max_prefix_v6"),
            "network_feature": obj.get("network_feature"),
            "network_service_config": obj.get("network_service_config"),
            "password": obj.get("password") if obj.get("password") is not None else '',
            "purchase_order": obj.get("purchase_order") if obj.get("purchase_order") is not None else '',
            "role_assignments": obj.get("role_assignments"),
            "session_mode": obj.get("session_mode"),
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    IX-API

     This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 

    The version of the OpenAPI document: 2.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.ixp_specific_feature_flag import IXPSpecificFeatureFlag
from typing import Optional, Set
from typing_extensions import Self

class RouteServerNetworkFeature(BaseModel):
    """
    RouteServerNetworkFeature
    """ # noqa: E501
    address_families: List[StrictStr] = Field(description="When creating a route server feature config, remember to specify which address family or families to use:  If the route server network feature only supports `af_inet`, then the `as_set_v4` in the network feature config is required.  If only `af_inet6` is supported, then the `as_set_v6` is required.  If both `af_inet` and `af_inet6` are supported, either `as_set_v4` or `as_set_v6` is required, but both can be provided in the network service config. ")
    asn: Annotated[int, Field(strict=True, ge=0)]
    available_bgp_session_types: List[StrictStr] = Field(description="The route server provides the following session modes. ")
    flags: List[IXPSpecificFeatureFlag] = Field(description="A list of IXP specific feature flags. This can be used to see if e.g. RPKI hard filtering is available.")
    fqdn: Annotated[str, Field(strict=True, max_length=80)] = Field(description="The FQDN of the route server. ")
    id: StrictStr
    ip_v4: StrictStr = Field(description="IPv4 address in [dot-decimal notation](https://en.wikipedia.org/wiki/Dot-decimal_notation) notation. ")
    ip_v6: StrictStr = Field(description="IPv6 address in hexadecimal colon separated notation. ")
    looking_glass_url: Optional[StrictStr] = Field(default=None, description="The url of the looking glass. ")
    name: Annotated[str, Field(strict=True, max_length=80)]
    network_service: StrictStr
    nfc_required_contact_roles: Optional[List[StrictStr]] = Field(default=None, description="The configuration will require at least one of each of the specified roles assigned to contacts.  The role assignments is associated with the network feature config through the `role_assignments` list property.")
    required: StrictBool
    session_mode: StrictStr = Field(description="When creating a route server feature config, remember to specify the same session_mode as the route server. ")
    type: StrictStr
    __properties: ClassVar[List[str]] = ["address_families", "asn", "available_bgp_session_types", "flags", "fqdn", "id", "ip_v4", "ip_v6", "looking_glass_url", "name", "network_service", "nfc_required_contact_roles", "required", "session_mode", "type"]

    @field_validator('address_families')
    def address_families_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['af_inet', 'af_inet6']):
                raise ValueError("each list item must be one of ('af_inet', 'af_inet6')")
        return value

    @field_validator('available_bgp_session_types')
    def available_bgp_session_types_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['active', 'passive']):
                raise ValueError("each list item must be one of ('active', 'passive')")
        return value

    @field_validator('session_mode')
    def session_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['public', 'collector']):
            raise ValueError("must be one of enum values ('public', 'collector')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RouteServerNetworkFeature from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "nfc_required_contact_roles",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in flags (list)
        _items = []
        if self.flags:
            for _item_flags in self.flags:
                if _item_flags:
                    _items.append(_item_flags.to_dict())
            _dict['flags'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RouteServerNetworkFeature from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address_families": obj.get("address_families"),
            "asn": obj.get("asn"),
            "available_bgp_session_types": obj.get("available_bgp_session_types"),
            "flags": [IXPSpecificFeatureFlag.from_dict(_item) for _item in obj["flags"]] if obj.get("flags") is not None else None,
            "fqdn": obj.get("fqdn"),
            "id": obj.get("id"),
            "ip_v4": obj.get("ip_v4"),
            "ip_v6": obj.get("ip_v6"),
            "looking_glass_url": obj.get("looking_glass_url"),
            "name": obj.get("name"),
            "network_service": obj.get("network_service"),
            "nfc_required_contact_roles": obj.get("nfc_required_contact_roles"),
            "required": obj.get("required"),
            "session_mode": obj.get("session_mode"),
            "type": obj.get("type")
        })
        return _obj



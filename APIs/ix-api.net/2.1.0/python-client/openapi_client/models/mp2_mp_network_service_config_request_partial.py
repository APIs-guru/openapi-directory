# coding: utf-8

"""
    IX-API

     This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 

    The version of the OpenAPI document: 2.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.vlan_config import VlanConfig
from typing import Optional, Set
from typing_extensions import Self

class MP2MPNetworkServiceConfigRequestPartial(BaseModel):
    """
    MP2MP Network Service Config Request
    """ # noqa: E501
    billing_account: Optional[StrictStr] = Field(default=None, description="An account requires billing_information to be used as a `billing_account`.")
    capacity: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The capacity of the service in Mbps. If set to Null, the maximum capacity will be used, i.e. the virtual circuit is not rate-limited.  An exchange may choose to constrain the available capacity range of a `ProductOffering`.  That means, the service can consume up to the total bandwidth of the `Connection`.  Typically the service is charged based on the capacity.")
    connection: Optional[StrictStr] = Field(default=None, description="The id of the connection to use for this `NetworkServiceConfig`.")
    consuming_account: Optional[StrictStr] = Field(default=None, description="The `id` of the account consuming a service.  Used to be `owning_customer`. ")
    contract_ref: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. ")
    external_ref: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="Reference field, free to use for the API user.")
    macs: Optional[List[StrictStr]] = None
    managing_account: Optional[StrictStr] = Field(default=None, description="The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. ")
    network_feature_configs: Optional[List[StrictStr]] = Field(default=None, description="A list of ids of `NetworkFeatureConfig`s. ")
    network_service: Optional[StrictStr] = Field(default=None, description="The id of the `NetworkService` to configure.")
    purchase_order: Optional[Annotated[str, Field(strict=True, max_length=80)]] = Field(default='', description="Purchase Order ID which will be displayed on the invoice. ")
    role_assignments: Optional[List[StrictStr]] = Field(default=None, description="A set of `RoleAssignment`s. See the documentation on the specific `required_contact_roles`, `nfc_required_contact_roles` or `nsc_required_contact_roles` on what `RoleAssignment`s to provide. ")
    type: StrictStr
    vlan_config: Optional[VlanConfig] = None
    __properties: ClassVar[List[str]] = ["billing_account", "capacity", "connection", "consuming_account", "contract_ref", "external_ref", "macs", "managing_account", "network_feature_configs", "network_service", "purchase_order", "role_assignments", "type", "vlan_config"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MP2MPNetworkServiceConfigRequestPartial from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "network_feature_configs",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of vlan_config
        if self.vlan_config:
            _dict['vlan_config'] = self.vlan_config.to_dict()
        # set to None if capacity (nullable) is None
        # and model_fields_set contains the field
        if self.capacity is None and "capacity" in self.model_fields_set:
            _dict['capacity'] = None

        # set to None if contract_ref (nullable) is None
        # and model_fields_set contains the field
        if self.contract_ref is None and "contract_ref" in self.model_fields_set:
            _dict['contract_ref'] = None

        # set to None if external_ref (nullable) is None
        # and model_fields_set contains the field
        if self.external_ref is None and "external_ref" in self.model_fields_set:
            _dict['external_ref'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MP2MPNetworkServiceConfigRequestPartial from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billing_account": obj.get("billing_account"),
            "capacity": obj.get("capacity"),
            "connection": obj.get("connection"),
            "consuming_account": obj.get("consuming_account"),
            "contract_ref": obj.get("contract_ref"),
            "external_ref": obj.get("external_ref"),
            "macs": obj.get("macs"),
            "managing_account": obj.get("managing_account"),
            "network_feature_configs": obj.get("network_feature_configs"),
            "network_service": obj.get("network_service"),
            "purchase_order": obj.get("purchase_order") if obj.get("purchase_order") is not None else '',
            "role_assignments": obj.get("role_assignments"),
            "type": obj.get("type"),
            "vlan_config": VlanConfig.from_dict(obj["vlan_config"]) if obj.get("vlan_config") is not None else None
        })
        return _obj



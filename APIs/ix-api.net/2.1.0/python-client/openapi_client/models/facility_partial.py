# coding: utf-8

"""
    IX-API

     This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 

    The version of the OpenAPI document: 2.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class FacilityPartial(BaseModel):
    """
    Facility
    """ # noqa: E501
    address_country: Optional[Annotated[str, Field(strict=True, max_length=2)]] = Field(default=None, description="ISO 3166-1 alpha-2 country code, for example DE ")
    address_locality: Optional[Annotated[str, Field(strict=True, max_length=80)]] = Field(default=None, description="The locality/city. For example, Mountain View.")
    address_region: Optional[Annotated[str, Field(strict=True, max_length=80)]] = Field(default=None, description="The region. For example, CA")
    id: Optional[Annotated[str, Field(strict=True, max_length=80)]] = None
    metro_area: Optional[StrictStr] = Field(default=None, description="Id of the `MetroArea` the DC is located in. ")
    name: Optional[Annotated[str, Field(strict=True, max_length=80)]] = Field(default=None, description="Name of the Datacenter as called by the operator ")
    organisation_name: Optional[Annotated[str, Field(strict=True, max_length=80)]] = Field(default=None, description="Name of Datacenter operator ")
    peeringdb_facility_id: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(default=None, description="[PeeringDB](https://www.peeringdb.com) facitlity ID, can be extracted from the url https://www.peeringdb.com/fac/$id ")
    pops: Optional[List[StrictStr]] = Field(default=None, description="List of pops in the `Facility`.")
    postal_code: Optional[Annotated[str, Field(strict=True, max_length=18)]] = Field(default=None, description="A postal code. For example, 9404")
    street_address: Optional[Annotated[str, Field(strict=True, max_length=80)]] = Field(default=None, description="The street address. For example, 1600 Amphitheatre Pkwy.")
    __properties: ClassVar[List[str]] = ["address_country", "address_locality", "address_region", "id", "metro_area", "name", "organisation_name", "peeringdb_facility_id", "pops", "postal_code", "street_address"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FacilityPartial from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if peeringdb_facility_id (nullable) is None
        # and model_fields_set contains the field
        if self.peeringdb_facility_id is None and "peeringdb_facility_id" in self.model_fields_set:
            _dict['peeringdb_facility_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FacilityPartial from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address_country": obj.get("address_country"),
            "address_locality": obj.get("address_locality"),
            "address_region": obj.get("address_region"),
            "id": obj.get("id"),
            "metro_area": obj.get("metro_area"),
            "name": obj.get("name"),
            "organisation_name": obj.get("organisation_name"),
            "peeringdb_facility_id": obj.get("peeringdb_facility_id"),
            "pops": obj.get("pops"),
            "postal_code": obj.get("postal_code"),
            "street_address": obj.get("street_address")
        })
        return _obj



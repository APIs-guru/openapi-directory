# coding: utf-8

"""
    IX-API

     This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 

    The version of the OpenAPI document: 2.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class HealthResponse(BaseModel):
    """
    HealthResponse
    """ # noqa: E501
    checks: Optional[Dict[str, Dict[str, StrictStr]]] = Field(default=None, description="The \"checks\" object MAY have a number of unique keys, one for each logical downstream dependency or sub-component.  Since each sub-component may be backed by several nodes with varying health statuses, these keys point to arrays of objects. In case of a single-node sub-component (or if presence of nodes is not relevant), a single-element array SHOULD be used as the value, for consistency.  Please see https://tools.ietf.org/id/draft-inadarei-api-health-check-04.html#the-checks-object for details.")
    description: Optional[StrictStr] = Field(default=None, description="A human-friendly description of the service.")
    links: Optional[Dict[str, StrictStr]] = Field(default=None, description="Is an object containing link relations and URIs [RFC3986] for external links that MAY contain more information about the health of the endpoint.")
    notes: Optional[List[StrictStr]] = Field(default=None, description="Array of notes relevant to current state of health.")
    output: Optional[StrictStr] = Field(default=None, description="Raw error output, in case of \"fail\" or \"warn\" states.")
    release_id: Optional[StrictStr] = Field(default=None, description="Release version of the api implementation. ", alias="releaseId")
    service_id: Optional[StrictStr] = Field(default=None, description="A unique identifier of the service, in the application scope.", alias="serviceId")
    status: StrictStr = Field(description="status indicates whether the service status is acceptable or not.")
    version: Optional[StrictStr] = Field(default=None, description="Public version of the service. ")
    __properties: ClassVar[List[str]] = ["checks", "description", "links", "notes", "output", "releaseId", "serviceId", "status", "version"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['pass', 'fail', 'warn']):
            raise ValueError("must be one of enum values ('pass', 'fail', 'warn')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HealthResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HealthResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "checks": obj.get("checks"),
            "description": obj.get("description"),
            "links": obj.get("links"),
            "notes": obj.get("notes"),
            "output": obj.get("output"),
            "releaseId": obj.get("releaseId"),
            "serviceId": obj.get("serviceId"),
            "status": obj.get("status"),
            "version": obj.get("version")
        })
        return _obj



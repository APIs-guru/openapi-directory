# coding: utf-8

"""
    IX-API

     This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 

    The version of the OpenAPI document: 2.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class PortPartial(BaseModel):
    """
    Port
    """ # noqa: E501
    billing_account: Optional[StrictStr] = Field(default=None, description="An account requires billing_information to be used as a `billing_account`.")
    connection: Optional[StrictStr] = None
    consuming_account: Optional[StrictStr] = Field(default=None, description="The `id` of the account consuming a service.  Used to be `owning_customer`. ")
    contract_ref: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. ")
    device: Optional[StrictStr] = Field(default=None, description="The device the port. ")
    external_ref: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="Reference field, free to use for the API user.")
    id: Optional[Annotated[str, Field(strict=True, max_length=80)]] = None
    managing_account: Optional[StrictStr] = Field(default=None, description="The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. ")
    media_type: Optional[Annotated[str, Field(strict=True, max_length=20)]] = Field(default=None, description="The media type of the port. Query the device's capabilities for available types. ")
    name: Optional[Annotated[str, Field(strict=True, max_length=80)]] = Field(default='', description="Name of the port (set by the exchange)")
    pop: Optional[StrictStr] = Field(default=None, description="Same as the `pop` of the `device`. ")
    purchase_order: Optional[Annotated[str, Field(strict=True, max_length=80)]] = Field(default='', description="Purchase Order ID which will be displayed on the invoice. ")
    role_assignments: Optional[List[StrictStr]] = Field(default=None, description="A set of `RoleAssignment`s. See the documentation on the specific `required_contact_roles`, `nfc_required_contact_roles` or `nsc_required_contact_roles` on what `RoleAssignment`s to provide. ")
    speed: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    state: Optional[StrictStr] = None
    status: Optional[List[Status]] = None
    __properties: ClassVar[List[str]] = ["billing_account", "connection", "consuming_account", "contract_ref", "device", "external_ref", "id", "managing_account", "media_type", "name", "pop", "purchase_order", "role_assignments", "speed", "state", "status"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['requested', 'allocated', 'testing', 'production', 'production_change_pending', 'decommission_requested', 'decommissioned', 'archived', 'error', 'operator', 'scheduled']):
            raise ValueError("must be one of enum values ('requested', 'allocated', 'testing', 'production', 'production_change_pending', 'decommission_requested', 'decommissioned', 'archived', 'error', 'operator', 'scheduled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PortPartial from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
            "speed",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in status (list)
        _items = []
        if self.status:
            for _item_status in self.status:
                if _item_status:
                    _items.append(_item_status.to_dict())
            _dict['status'] = _items
        # set to None if connection (nullable) is None
        # and model_fields_set contains the field
        if self.connection is None and "connection" in self.model_fields_set:
            _dict['connection'] = None

        # set to None if contract_ref (nullable) is None
        # and model_fields_set contains the field
        if self.contract_ref is None and "contract_ref" in self.model_fields_set:
            _dict['contract_ref'] = None

        # set to None if external_ref (nullable) is None
        # and model_fields_set contains the field
        if self.external_ref is None and "external_ref" in self.model_fields_set:
            _dict['external_ref'] = None

        # set to None if speed (nullable) is None
        # and model_fields_set contains the field
        if self.speed is None and "speed" in self.model_fields_set:
            _dict['speed'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PortPartial from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billing_account": obj.get("billing_account"),
            "connection": obj.get("connection"),
            "consuming_account": obj.get("consuming_account"),
            "contract_ref": obj.get("contract_ref"),
            "device": obj.get("device"),
            "external_ref": obj.get("external_ref"),
            "id": obj.get("id"),
            "managing_account": obj.get("managing_account"),
            "media_type": obj.get("media_type"),
            "name": obj.get("name") if obj.get("name") is not None else '',
            "pop": obj.get("pop"),
            "purchase_order": obj.get("purchase_order") if obj.get("purchase_order") is not None else '',
            "role_assignments": obj.get("role_assignments"),
            "speed": obj.get("speed"),
            "state": obj.get("state"),
            "status": [Status.from_dict(_item) for _item in obj["status"]] if obj.get("status") is not None else None
        })
        return _obj



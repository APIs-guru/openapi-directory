# coding: utf-8

"""
    IX-API

     This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 

    The version of the OpenAPI document: 2.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CloudNetworkProductOfferingPartial(BaseModel):
    """
    Cloud Network Product Offering
    """ # noqa: E501
    bandwidth_max: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="When not `null`, this value enforces a mandatory rate limit for all network service configs.")
    bandwidth_min: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="When configuring access to the network service, at least this `capacity` must be provided.")
    delivery_method: Optional[StrictStr] = Field(default=None, description="The exchange delivers the service over a `shared` or `dedicated` NNI.")
    display_name: Optional[Annotated[str, Field(strict=True, max_length=256)]] = None
    diversity: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The service can be delivered over multiple handovers from the exchange to the `service_provider`. The `diversity` denotes the number of handovers between the exchange and the service provider. A value of two signals a redundant service.  Only one network service configuration for each `handover` and `cloud_vlan` can be created.")
    downgrade_allowed: Optional[StrictBool] = Field(default=None, description="Indicates if the service can be migrated to a lower bandwidth.")
    handover_metro_area: Optional[StrictStr] = Field(default=None, description="Id of the `MetroArea`. The network service will be accessed from this metro area. ")
    handover_metro_area_network: Optional[StrictStr] = Field(default=None, description="Id of the `MetroAreaNetwork`. The service will be accessed through the handover metro area network. ")
    id: Optional[Annotated[str, Field(strict=True, max_length=80)]] = None
    name: Optional[Annotated[str, Field(strict=True, max_length=160)]] = Field(default=None, description="Name of the product")
    physical_port_speed: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="If the service is dependent on the speed of the physical port this field denotes the speed.")
    provider_vlans: Optional[StrictStr] = Field(default=None, description="The `NetworkService` provides `single` or `multi`ple vlans.")
    resource_type: Optional[StrictStr] = Field(default=None, description="The resource type refers to an ix-api resource. ")
    service_metro_area: Optional[StrictStr] = Field(default=None, description="Id of the `MetroArea`. The service is delivered in this metro area. ")
    service_metro_area_network: Optional[StrictStr] = Field(default=None, description="Id of the `MetroAreaNetwork`. The service is directly provided on the metro area network. ")
    service_provider: Optional[StrictStr] = Field(default=None, description="The name of the provider providing the service. ")
    service_provider_pop: Optional[Annotated[str, Field(strict=True, max_length=16)]] = Field(default=None, description="The datacenter description of the partner NNI to the service provider. ")
    service_provider_region: Optional[StrictStr] = Field(default=None, description="The service provider offers the network service for a specific region. ")
    service_provider_workflow: Optional[StrictStr] = Field(default=None, description="When the workflow is `provider_first` the subscriber creates a circuit with the cloud provider and provides a `cloud_key` for filtering the product-offerings.  If the workflow is `exchange_first` the IX will create the cloud circuit on the provider side. ")
    type: StrictStr
    upgrade_allowed: Optional[StrictBool] = Field(default=None, description="Indicates if the service can be migrated to a higher bandwidth.")
    __properties: ClassVar[List[str]] = ["bandwidth_max", "bandwidth_min", "delivery_method", "display_name", "diversity", "downgrade_allowed", "handover_metro_area", "handover_metro_area_network", "id", "name", "physical_port_speed", "provider_vlans", "resource_type", "service_metro_area", "service_metro_area_network", "service_provider", "service_provider_pop", "service_provider_region", "service_provider_workflow", "type", "upgrade_allowed"]

    @field_validator('delivery_method')
    def delivery_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['dedicated', 'shared']):
            raise ValueError("must be one of enum values ('dedicated', 'shared')")
        return value

    @field_validator('provider_vlans')
    def provider_vlans_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['single', 'multi']):
            raise ValueError("must be one of enum values ('single', 'multi')")
        return value

    @field_validator('resource_type')
    def resource_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['connection', 'demarc', 'network_service', 'network_service_config']):
            raise ValueError("must be one of enum values ('connection', 'demarc', 'network_service', 'network_service_config')")
        return value

    @field_validator('service_provider_workflow')
    def service_provider_workflow_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['exchange_first', 'provider_first']):
            raise ValueError("must be one of enum values ('exchange_first', 'provider_first')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloudNetworkProductOfferingPartial from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if bandwidth_max (nullable) is None
        # and model_fields_set contains the field
        if self.bandwidth_max is None and "bandwidth_max" in self.model_fields_set:
            _dict['bandwidth_max'] = None

        # set to None if bandwidth_min (nullable) is None
        # and model_fields_set contains the field
        if self.bandwidth_min is None and "bandwidth_min" in self.model_fields_set:
            _dict['bandwidth_min'] = None

        # set to None if physical_port_speed (nullable) is None
        # and model_fields_set contains the field
        if self.physical_port_speed is None and "physical_port_speed" in self.model_fields_set:
            _dict['physical_port_speed'] = None

        # set to None if service_provider_pop (nullable) is None
        # and model_fields_set contains the field
        if self.service_provider_pop is None and "service_provider_pop" in self.model_fields_set:
            _dict['service_provider_pop'] = None

        # set to None if service_provider_region (nullable) is None
        # and model_fields_set contains the field
        if self.service_provider_region is None and "service_provider_region" in self.model_fields_set:
            _dict['service_provider_region'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloudNetworkProductOfferingPartial from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bandwidth_max": obj.get("bandwidth_max"),
            "bandwidth_min": obj.get("bandwidth_min"),
            "delivery_method": obj.get("delivery_method"),
            "display_name": obj.get("display_name"),
            "diversity": obj.get("diversity"),
            "downgrade_allowed": obj.get("downgrade_allowed"),
            "handover_metro_area": obj.get("handover_metro_area"),
            "handover_metro_area_network": obj.get("handover_metro_area_network"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "physical_port_speed": obj.get("physical_port_speed"),
            "provider_vlans": obj.get("provider_vlans"),
            "resource_type": obj.get("resource_type"),
            "service_metro_area": obj.get("service_metro_area"),
            "service_metro_area_network": obj.get("service_metro_area_network"),
            "service_provider": obj.get("service_provider"),
            "service_provider_pop": obj.get("service_provider_pop"),
            "service_provider_region": obj.get("service_provider_region"),
            "service_provider_workflow": obj.get("service_provider_workflow"),
            "type": obj.get("type"),
            "upgrade_allowed": obj.get("upgrade_allowed")
        })
        return _obj



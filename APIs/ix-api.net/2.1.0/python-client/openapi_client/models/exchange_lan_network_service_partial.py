# coding: utf-8

"""
    IX-API

     This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 

    The version of the OpenAPI document: 2.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class ExchangeLanNetworkServicePartial(BaseModel):
    """
    Exchange Lan Network Service
    """ # noqa: E501
    consuming_account: Optional[StrictStr] = Field(default=None, description="The `id` of the account consuming a service.  Used to be `owning_customer`. ")
    external_ref: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="Reference field, free to use for the API user.")
    id: Optional[StrictStr] = None
    ixfdb_ixid: Optional[StrictInt] = Field(default=None, description="id of ixfdb")
    managing_account: Optional[StrictStr] = Field(default=None, description="The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. ")
    metro_area_network: Optional[StrictStr] = Field(default=None, description="Id of the `MetroAreaNetwork` where the exchange lan network service is directly provided.  Same as `service_metro_area_network` on the related `ProductOffering`. ")
    name: Optional[Annotated[str, Field(strict=True, max_length=40)]] = Field(default=None, description="Exchange-dependent service name, will be shown on the invoice.")
    network_features: Optional[List[StrictStr]] = None
    nsc_required_contact_roles: Optional[List[StrictStr]] = Field(default=None, description="The configuration will require at least one of each of the specified roles assigned to contacts.  The `RoleAssignment` is associated through the `role_assignments` list property of the network service configuration.")
    peeringdb_ixid: Optional[StrictInt] = Field(default=None, description="PeeringDB ixid")
    product_offering: Optional[StrictStr] = Field(default=None, description="*deprecation notice*")
    state: Optional[StrictStr] = None
    status: Optional[List[Status]] = None
    subnet_v4: Optional[StrictStr] = Field(default=None, description="IPv4 subnet in [dot-decimal notation](https://en.wikipedia.org/wiki/Dot-decimal_notation) CIDR notation. ")
    subnet_v6: Optional[StrictStr] = Field(default=None, description="IPv6 subnet in hexadecimal colon separated CIDR notation. ")
    type: StrictStr
    __properties: ClassVar[List[str]] = ["consuming_account", "external_ref", "id", "ixfdb_ixid", "managing_account", "metro_area_network", "name", "network_features", "nsc_required_contact_roles", "peeringdb_ixid", "product_offering", "state", "status", "subnet_v4", "subnet_v6", "type"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['requested', 'allocated', 'testing', 'production', 'production_change_pending', 'decommission_requested', 'decommissioned', 'archived', 'error', 'operator', 'scheduled']):
            raise ValueError("must be one of enum values ('requested', 'allocated', 'testing', 'production', 'production_change_pending', 'decommission_requested', 'decommissioned', 'archived', 'error', 'operator', 'scheduled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExchangeLanNetworkServicePartial from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "nsc_required_contact_roles",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in status (list)
        _items = []
        if self.status:
            for _item_status in self.status:
                if _item_status:
                    _items.append(_item_status.to_dict())
            _dict['status'] = _items
        # set to None if external_ref (nullable) is None
        # and model_fields_set contains the field
        if self.external_ref is None and "external_ref" in self.model_fields_set:
            _dict['external_ref'] = None

        # set to None if ixfdb_ixid (nullable) is None
        # and model_fields_set contains the field
        if self.ixfdb_ixid is None and "ixfdb_ixid" in self.model_fields_set:
            _dict['ixfdb_ixid'] = None

        # set to None if peeringdb_ixid (nullable) is None
        # and model_fields_set contains the field
        if self.peeringdb_ixid is None and "peeringdb_ixid" in self.model_fields_set:
            _dict['peeringdb_ixid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExchangeLanNetworkServicePartial from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "consuming_account": obj.get("consuming_account"),
            "external_ref": obj.get("external_ref"),
            "id": obj.get("id"),
            "ixfdb_ixid": obj.get("ixfdb_ixid"),
            "managing_account": obj.get("managing_account"),
            "metro_area_network": obj.get("metro_area_network"),
            "name": obj.get("name"),
            "network_features": obj.get("network_features"),
            "nsc_required_contact_roles": obj.get("nsc_required_contact_roles"),
            "peeringdb_ixid": obj.get("peeringdb_ixid"),
            "product_offering": obj.get("product_offering"),
            "state": obj.get("state"),
            "status": [Status.from_dict(_item) for _item in obj["status"]] if obj.get("status") is not None else None,
            "subnet_v4": obj.get("subnet_v4"),
            "subnet_v6": obj.get("subnet_v6"),
            "type": obj.get("type")
        })
        return _obj



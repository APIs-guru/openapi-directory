# coding: utf-8

"""
    Interzoid Zip Code Detailed Info API

    This API provides detailed information for a given zip code, including city, state, latitude, longitude, area size, and various population demographics.

    The version of the OpenAPI document: 1.0.0
    Contact: support@interzoid.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Getzipcodeinfo200Response(BaseModel):
    """
    Getzipcodeinfo200Response
    """ # noqa: E501
    area_square_miles: Optional[StrictStr] = Field(default=None, alias="AreaSquareMiles")
    city: Optional[StrictStr] = Field(default=None, alias="City")
    code: Optional[StrictStr] = Field(default=None, alias="Code")
    credits: Optional[StrictStr] = Field(default=None, alias="Credits")
    elderly_household_percent: Optional[StrictStr] = Field(default=None, alias="ElderlyHouseholdPercent")
    farmer_household_percent: Optional[StrictStr] = Field(default=None, alias="FarmerHouseholdPercent")
    income_percent100k: Optional[StrictStr] = Field(default=None, alias="IncomePercent100k")
    income_percent200k: Optional[StrictStr] = Field(default=None, alias="IncomePercent200k")
    income_percent50k: Optional[StrictStr] = Field(default=None, alias="IncomePercent50k")
    latitude: Optional[StrictStr] = Field(default=None, alias="Latitude")
    longitude: Optional[StrictStr] = Field(default=None, alias="Longitude")
    married_household_percent: Optional[StrictStr] = Field(default=None, alias="MarriedHouseholdPercent")
    population: Optional[StrictStr] = Field(default=None, alias="Population")
    state: Optional[StrictStr] = Field(default=None, alias="State")
    zip_code: Optional[StrictStr] = Field(default=None, alias="ZipCode")
    __properties: ClassVar[List[str]] = ["AreaSquareMiles", "City", "Code", "Credits", "ElderlyHouseholdPercent", "FarmerHouseholdPercent", "IncomePercent100k", "IncomePercent200k", "IncomePercent50k", "Latitude", "Longitude", "MarriedHouseholdPercent", "Population", "State", "ZipCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Getzipcodeinfo200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Getzipcodeinfo200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AreaSquareMiles": obj.get("AreaSquareMiles"),
            "City": obj.get("City"),
            "Code": obj.get("Code"),
            "Credits": obj.get("Credits"),
            "ElderlyHouseholdPercent": obj.get("ElderlyHouseholdPercent"),
            "FarmerHouseholdPercent": obj.get("FarmerHouseholdPercent"),
            "IncomePercent100k": obj.get("IncomePercent100k"),
            "IncomePercent200k": obj.get("IncomePercent200k"),
            "IncomePercent50k": obj.get("IncomePercent50k"),
            "Latitude": obj.get("Latitude"),
            "Longitude": obj.get("Longitude"),
            "MarriedHouseholdPercent": obj.get("MarriedHouseholdPercent"),
            "Population": obj.get("Population"),
            "State": obj.get("State"),
            "ZipCode": obj.get("ZipCode")
        })
        return _obj



# coding: utf-8

"""
    Interzoid Get Global Time API

    This API retrieves the current time for a city or geographic location around the globe.

    The version of the OpenAPI document: 1.0.0
    Contact: support@interzoid.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Getglobaltime200Response(BaseModel):
    """
    Getglobaltime200Response
    """ # noqa: E501
    clock_time: Optional[StrictStr] = Field(default=None, alias="ClockTime")
    code: Optional[StrictStr] = Field(default=None, alias="Code")
    credits: Optional[StrictStr] = Field(default=None, alias="Credits")
    current_date: Optional[StrictStr] = Field(default=None, alias="CurrentDate")
    current_time: Optional[StrictStr] = Field(default=None, alias="CurrentTime")
    day: Optional[StrictStr] = Field(default=None, alias="Day")
    hour: Optional[StrictStr] = Field(default=None, alias="Hour")
    locale: Optional[StrictStr] = Field(default=None, alias="Locale")
    minute: Optional[StrictStr] = Field(default=None, alias="Minute")
    month: Optional[StrictStr] = Field(default=None, alias="Month")
    month_number: Optional[StrictStr] = Field(default=None, alias="MonthNumber")
    second: Optional[StrictStr] = Field(default=None, alias="Second")
    time_stamp: Optional[StrictStr] = Field(default=None, alias="TimeStamp")
    weekday: Optional[StrictStr] = Field(default=None, alias="Weekday")
    year: Optional[StrictStr] = Field(default=None, alias="Year")
    zone: Optional[StrictStr] = Field(default=None, alias="Zone")
    __properties: ClassVar[List[str]] = ["ClockTime", "Code", "Credits", "CurrentDate", "CurrentTime", "Day", "Hour", "Locale", "Minute", "Month", "MonthNumber", "Second", "TimeStamp", "Weekday", "Year", "Zone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Getglobaltime200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Getglobaltime200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ClockTime": obj.get("ClockTime"),
            "Code": obj.get("Code"),
            "Credits": obj.get("Credits"),
            "CurrentDate": obj.get("CurrentDate"),
            "CurrentTime": obj.get("CurrentTime"),
            "Day": obj.get("Day"),
            "Hour": obj.get("Hour"),
            "Locale": obj.get("Locale"),
            "Minute": obj.get("Minute"),
            "Month": obj.get("Month"),
            "MonthNumber": obj.get("MonthNumber"),
            "Second": obj.get("Second"),
            "TimeStamp": obj.get("TimeStamp"),
            "Weekday": obj.get("Weekday"),
            "Year": obj.get("Year"),
            "Zone": obj.get("Zone")
        })
        return _obj



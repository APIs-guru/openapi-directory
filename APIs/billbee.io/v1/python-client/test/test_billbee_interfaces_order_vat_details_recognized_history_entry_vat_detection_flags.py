# coding: utf-8

"""
    Billbee API

    Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  

    The version of the OpenAPI document: v1
    Contact: support@billbee.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.billbee_interfaces_order_vat_details_recognized_history_entry_vat_detection_flags import BillbeeInterfacesOrderVatDetailsRecognizedHistoryEntryVatDetectionFlags

class TestBillbeeInterfacesOrderVatDetailsRecognizedHistoryEntryVatDetectionFlags(unittest.TestCase):
    """BillbeeInterfacesOrderVatDetailsRecognizedHistoryEntryVatDetectionFlags unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BillbeeInterfacesOrderVatDetailsRecognizedHistoryEntryVatDetectionFlags:
        """Test BillbeeInterfacesOrderVatDetailsRecognizedHistoryEntryVatDetectionFlags
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BillbeeInterfacesOrderVatDetailsRecognizedHistoryEntryVatDetectionFlags`
        """
        model = BillbeeInterfacesOrderVatDetailsRecognizedHistoryEntryVatDetectionFlags()
        if include_optional:
            return BillbeeInterfacesOrderVatDetailsRecognizedHistoryEntryVatDetectionFlags(
                customer_has_vat_id = True,
                eu_delivery_threshold_exceeded = True,
                is_distance_sale = True,
                order_distribution_country_is_empty = True,
                oss_enabled = True,
                rates_from = '',
                seller_is_registered_in_dst_country = True,
                set_igl_when_vat_id_is_available_enabled = True,
                src_country_is_equal_to_dst_country = True,
                third_party_country = True,
                user_profile_country_is_empty = True,
                vat_id_from = ''
            )
        else:
            return BillbeeInterfacesOrderVatDetailsRecognizedHistoryEntryVatDetectionFlags(
        )
        """

    def testBillbeeInterfacesOrderVatDetailsRecognizedHistoryEntryVatDetectionFlags(self):
        """Test BillbeeInterfacesOrderVatDetailsRecognizedHistoryEntryVatDetectionFlags"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

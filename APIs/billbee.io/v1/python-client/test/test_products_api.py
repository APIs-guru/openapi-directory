# coding: utf-8

"""
    Billbee API

    Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  

    The version of the OpenAPI document: v1
    Contact: support@billbee.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.products_api import ProductsApi


class TestProductsApi(unittest.TestCase):
    """ProductsApi unit test stubs"""

    def setUp(self) -> None:
        self.api = ProductsApi()

    def tearDown(self) -> None:
        pass

    def test_article_create_article(self) -> None:
        """Test case for article_create_article

        Creates a new product
        """
        pass

    def test_article_delete_article(self) -> None:
        """Test case for article_delete_article

        Deletes a product
        """
        pass

    def test_article_delete_image(self) -> None:
        """Test case for article_delete_image

        Deletes a single image by id
        """
        pass

    def test_article_delete_image_from_product(self) -> None:
        """Test case for article_delete_image_from_product

        Deletes a single image from a product
        """
        pass

    def test_article_delete_images(self) -> None:
        """Test case for article_delete_images

        Delete multiple images by id
        """
        pass

    def test_article_get_article(self) -> None:
        """Test case for article_get_article

        Queries a single article by id or by sku
        """
        pass

    def test_article_get_category(self) -> None:
        """Test case for article_get_category

        GEts a list of all defined categories
        """
        pass

    def test_article_get_custom_field(self) -> None:
        """Test case for article_get_custom_field

        Queries a single custom field
        """
        pass

    def test_article_get_custom_fields(self) -> None:
        """Test case for article_get_custom_fields

        Queries a list of all custom fields
        """
        pass

    def test_article_get_image(self) -> None:
        """Test case for article_get_image

        Returns a single image by id
        """
        pass

    def test_article_get_image_from_product(self) -> None:
        """Test case for article_get_image_from_product

        Returns a single image by id
        """
        pass

    def test_article_get_images(self) -> None:
        """Test case for article_get_images

        Returns a list of all images of the product
        """
        pass

    def test_article_get_list(self) -> None:
        """Test case for article_get_list

        Get a list of all products
        """
        pass

    def test_article_get_patchable_fields(self) -> None:
        """Test case for article_get_patchable_fields

        Returns a list of fields which can be updated with the patch call
        """
        pass

    def test_article_get_reserved_amount(self) -> None:
        """Test case for article_get_reserved_amount

        Queries the reserved amount for a single article by id or by sku
        """
        pass

    def test_article_get_stocks(self) -> None:
        """Test case for article_get_stocks

        Query all defined stock locations
        """
        pass

    def test_article_patch_article(self) -> None:
        """Test case for article_patch_article

        Updates one or more fields of a product
        """
        pass

    def test_article_put_image(self) -> None:
        """Test case for article_put_image

        Add or update an existing image of a product
        """
        pass

    def test_article_put_images(self) -> None:
        """Test case for article_put_images

        Add multiple images to a product or replace the product images by the given images
        """
        pass

    def test_article_update_stock(self) -> None:
        """Test case for article_update_stock

        Update the stock qty of an article
        """
        pass

    def test_article_update_stock_code(self) -> None:
        """Test case for article_update_stock_code

        Update the stock code of an article
        """
        pass

    def test_article_update_stock_multiple(self) -> None:
        """Test case for article_update_stock_multiple

        Update the stock qty for multiple articles at once
        """
        pass

    def test_search_search(self) -> None:
        """Test case for search_search

        Search for products, customers and orders.  Type can be \"order\", \"product\" and / or \"customer\"  Term can contains lucene query syntax
        """
        pass


if __name__ == '__main__':
    unittest.main()

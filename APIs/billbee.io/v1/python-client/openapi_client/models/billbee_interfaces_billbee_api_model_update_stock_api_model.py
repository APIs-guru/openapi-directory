# coding: utf-8

"""
    Billbee API

    Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  

    The version of the OpenAPI document: v1
    Contact: support@billbee.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel(BaseModel):
    """
    BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel
    """ # noqa: E501
    autosubtract_reserved_amount: Optional[StrictBool] = Field(default=None, description="Automatically reduce the NewQuantity by the currently not fulfilled amount", alias="AutosubtractReservedAmount")
    billbee_id: Optional[StrictInt] = Field(default=None, description="Optional the ID of the Billbee product to update", alias="BillbeeId")
    delta_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="This parameter is currently ignored", alias="DeltaQuantity")
    force_send_stock_to_shops: Optional[StrictBool] = Field(default=None, description="If true, every sent stockchange is stored and transmitted to the connected shop, even if the value has not changed", alias="ForceSendStockToShops")
    new_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The new absolute stock quantity for the product you want to set", alias="NewQuantity")
    old_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="This parameter is currently ignored", alias="OldQuantity")
    reason: Optional[StrictStr] = Field(default=None, description="Optional a reason text for the stock update", alias="Reason")
    sku: Optional[StrictStr] = Field(default=None, description="The SKU of the product to update", alias="Sku")
    stock_id: Optional[StrictInt] = Field(default=None, description="Optional the stock id if the feature multi stock is activated", alias="StockId")
    __properties: ClassVar[List[str]] = ["AutosubtractReservedAmount", "BillbeeId", "DeltaQuantity", "ForceSendStockToShops", "NewQuantity", "OldQuantity", "Reason", "Sku", "StockId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AutosubtractReservedAmount": obj.get("AutosubtractReservedAmount"),
            "BillbeeId": obj.get("BillbeeId"),
            "DeltaQuantity": obj.get("DeltaQuantity"),
            "ForceSendStockToShops": obj.get("ForceSendStockToShops"),
            "NewQuantity": obj.get("NewQuantity"),
            "OldQuantity": obj.get("OldQuantity"),
            "Reason": obj.get("Reason"),
            "Sku": obj.get("Sku"),
            "StockId": obj.get("StockId")
        })
        return _obj



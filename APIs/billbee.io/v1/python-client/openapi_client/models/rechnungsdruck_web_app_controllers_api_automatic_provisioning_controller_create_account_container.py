# coding: utf-8

"""
    Billbee API

    Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  

    The version of the OpenAPI document: v1
    Contact: support@billbee.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.rechnungsdruck_web_app_controllers_api_automatic_provisioning_controller_create_account_container_user_address import RechnungsdruckWebAppControllersApiAutomaticProvisioningControllerCreateAccountContainerUserAddress
from typing import Optional, Set
from typing_extensions import Self

class RechnungsdruckWebAppControllersApiAutomaticProvisioningControllerCreateAccountContainer(BaseModel):
    """
    Data used to create a new Billbee user account
    """ # noqa: E501
    accept_terms: Optional[StrictBool] = Field(default=None, description="Set to true, if the user has accepted the Billbee terms &amp; conditions", alias="AcceptTerms")
    address: Optional[RechnungsdruckWebAppControllersApiAutomaticProvisioningControllerCreateAccountContainerUserAddress] = Field(default=None, alias="Address")
    affiliate_coupon_code: Optional[StrictStr] = Field(default=None, description="Specifies an billbee affiliate code to attach to the user", alias="AffiliateCouponCode")
    default_currrency: Optional[StrictStr] = Field(default=None, description="Optionally specify the default currency of the user", alias="DefaultCurrrency")
    default_vat_index: Optional[StrictInt] = Field(default=None, description="Optionally specify the default vat index of the user", alias="DefaultVatIndex")
    default_vat_mode: Optional[StrictInt] = Field(default=None, description="Optionally specify the default vat mode of the user", alias="DefaultVatMode")
    e_mail: StrictStr = Field(description="The Email address of the user to create", alias="EMail")
    password: Optional[StrictStr] = Field(default=None, alias="Password")
    vat1_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optionally specify the vat1 (normal) rate of the user", alias="Vat1Rate")
    vat2_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optionally specify the vat2 (reduced) rate of the user", alias="Vat2Rate")
    __properties: ClassVar[List[str]] = ["AcceptTerms", "Address", "AffiliateCouponCode", "DefaultCurrrency", "DefaultVatIndex", "DefaultVatMode", "EMail", "Password", "Vat1Rate", "Vat2Rate"]

    @field_validator('default_vat_mode')
    def default_vat_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 2, 3, 4, 5]):
            raise ValueError("must be one of enum values (0, 1, 2, 3, 4, 5)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RechnungsdruckWebAppControllersApiAutomaticProvisioningControllerCreateAccountContainer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['Address'] = self.address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RechnungsdruckWebAppControllersApiAutomaticProvisioningControllerCreateAccountContainer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AcceptTerms": obj.get("AcceptTerms"),
            "Address": RechnungsdruckWebAppControllersApiAutomaticProvisioningControllerCreateAccountContainerUserAddress.from_dict(obj["Address"]) if obj.get("Address") is not None else None,
            "AffiliateCouponCode": obj.get("AffiliateCouponCode"),
            "DefaultCurrrency": obj.get("DefaultCurrrency"),
            "DefaultVatIndex": obj.get("DefaultVatIndex"),
            "DefaultVatMode": obj.get("DefaultVatMode"),
            "EMail": obj.get("EMail"),
            "Password": obj.get("Password"),
            "Vat1Rate": obj.get("Vat1Rate"),
            "Vat2Rate": obj.get("Vat2Rate")
        })
        return _obj



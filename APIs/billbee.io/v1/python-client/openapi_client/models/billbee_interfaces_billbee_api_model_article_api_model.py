# coding: utf-8

"""
    Billbee API

    Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  

    The version of the OpenAPI document: v1
    Contact: support@billbee.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.billbee_interfaces_billbee_api_model_article_api_custom_field_value_model import BillbeeInterfacesBillbeeAPIModelArticleApiCustomFieldValueModel
from openapi_client.models.billbee_interfaces_billbee_api_model_article_category_api_model import BillbeeInterfacesBillbeeAPIModelArticleCategoryApiModel
from openapi_client.models.billbee_interfaces_billbee_api_model_article_image_relation_api_model import BillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel
from openapi_client.models.billbee_interfaces_billbee_api_model_article_source_api_model import BillbeeInterfacesBillbeeAPIModelArticleSourceApiModel
from openapi_client.models.billbee_interfaces_billbee_api_model_bom_sub_article_api_model import BillbeeInterfacesBillbeeAPIModelBomSubArticleApiModel
from openapi_client.models.billbee_interfaces_billbee_api_model_stock_article_api_model import BillbeeInterfacesBillbeeAPIModelStockArticleApiModel
from openapi_client.models.billbee_interfaces_order_multi_language_string import BillbeeInterfacesOrderMultiLanguageString
from typing import Optional, Set
from typing_extensions import Self

class BillbeeInterfacesBillbeeAPIModelArticleApiModel(BaseModel):
    """
    BillbeeInterfacesBillbeeAPIModelArticleApiModel
    """ # noqa: E501
    basic_attributes: Optional[List[BillbeeInterfacesOrderMultiLanguageString]] = Field(default=None, alias="BasicAttributes")
    bill_of_material: Optional[List[BillbeeInterfacesBillbeeAPIModelBomSubArticleApiModel]] = Field(default=None, alias="BillOfMaterial")
    category1: Optional[BillbeeInterfacesBillbeeAPIModelArticleCategoryApiModel] = Field(default=None, alias="Category1")
    category2: Optional[BillbeeInterfacesBillbeeAPIModelArticleCategoryApiModel] = Field(default=None, alias="Category2")
    category3: Optional[BillbeeInterfacesBillbeeAPIModelArticleCategoryApiModel] = Field(default=None, alias="Category3")
    condition: Optional[StrictInt] = Field(default=None, alias="Condition")
    cost_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="CostPrice")
    country_of_origin: Optional[StrictStr] = Field(default=None, alias="CountryOfOrigin")
    custom_fields: Optional[List[BillbeeInterfacesBillbeeAPIModelArticleApiCustomFieldValueModel]] = Field(default=None, alias="CustomFields")
    delivery_time: Optional[StrictInt] = Field(default=None, alias="DeliveryTime")
    description: Optional[List[BillbeeInterfacesOrderMultiLanguageString]] = Field(default=None, alias="Description")
    ean: Optional[StrictStr] = Field(default=None, alias="EAN")
    export_description: Optional[StrictStr] = Field(default=None, alias="ExportDescription")
    export_description_multi_language: Optional[List[BillbeeInterfacesOrderMultiLanguageString]] = Field(default=None, alias="ExportDescriptionMultiLanguage")
    height_cm: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="HeightCm")
    id: Optional[StrictInt] = Field(default=None, alias="Id")
    images: Optional[List[BillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel]] = Field(default=None, alias="Images")
    invoice_text: Optional[List[BillbeeInterfacesOrderMultiLanguageString]] = Field(default=None, alias="InvoiceText")
    is_customizable: StrictBool = Field(alias="IsCustomizable")
    is_deactivated: Optional[StrictBool] = Field(default=None, alias="IsDeactivated")
    is_digital: StrictBool = Field(alias="IsDigital")
    length_cm: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="LengthCm")
    low_stock: Optional[StrictBool] = Field(default=None, alias="LowStock")
    manufacturer: Optional[StrictStr] = Field(default=None, alias="Manufacturer")
    materials: Optional[List[BillbeeInterfacesOrderMultiLanguageString]] = Field(default=None, alias="Materials")
    occasion: Optional[StrictInt] = Field(default=None, alias="Occasion")
    price: Union[StrictFloat, StrictInt] = Field(alias="Price")
    recipient: Optional[StrictInt] = Field(default=None, alias="Recipient")
    sku: Optional[StrictStr] = Field(default=None, alias="SKU")
    shipping_product_id: Optional[StrictInt] = Field(default=None, alias="ShippingProductId")
    short_description: Optional[List[BillbeeInterfacesOrderMultiLanguageString]] = Field(default=None, alias="ShortDescription")
    sold_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="SoldAmount")
    sold_amount_last30_days: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="SoldAmountLast30Days")
    sold_sum_gross: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="SoldSumGross")
    sold_sum_gross_last30_days: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="SoldSumGrossLast30Days")
    sold_sum_net: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="SoldSumNet")
    sold_sum_net_last30_days: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="SoldSumNetLast30Days")
    sources: Optional[List[BillbeeInterfacesBillbeeAPIModelArticleSourceApiModel]] = Field(default=None, alias="Sources")
    stock_code: Optional[StrictStr] = Field(default=None, alias="StockCode")
    stock_current: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="StockCurrent")
    stock_desired: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="StockDesired")
    stock_reduce_items_per_sale: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="StockReduceItemsPerSale")
    stock_warning: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="StockWarning")
    stocks: Optional[List[BillbeeInterfacesBillbeeAPIModelStockArticleApiModel]] = Field(default=None, alias="Stocks")
    tags: Optional[List[BillbeeInterfacesOrderMultiLanguageString]] = Field(default=None, alias="Tags")
    taric_number: Optional[StrictStr] = Field(default=None, alias="TaricNumber")
    title: Optional[List[BillbeeInterfacesOrderMultiLanguageString]] = Field(default=None, alias="Title")
    type: StrictInt = Field(alias="Type")
    unit: Optional[StrictInt] = Field(default=None, alias="Unit")
    units_per_item: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="UnitsPerItem")
    vat1_rate: Union[StrictFloat, StrictInt] = Field(alias="Vat1Rate")
    vat2_rate: Union[StrictFloat, StrictInt] = Field(alias="Vat2Rate")
    vat_index: StrictInt = Field(alias="VatIndex")
    weight: Optional[StrictInt] = Field(default=None, alias="Weight")
    weight_net: Optional[StrictInt] = Field(default=None, alias="WeightNet")
    width_cm: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="WidthCm")
    __properties: ClassVar[List[str]] = ["BasicAttributes", "BillOfMaterial", "Category1", "Category2", "Category3", "Condition", "CostPrice", "CountryOfOrigin", "CustomFields", "DeliveryTime", "Description", "EAN", "ExportDescription", "ExportDescriptionMultiLanguage", "HeightCm", "Id", "Images", "InvoiceText", "IsCustomizable", "IsDeactivated", "IsDigital", "LengthCm", "LowStock", "Manufacturer", "Materials", "Occasion", "Price", "Recipient", "SKU", "ShippingProductId", "ShortDescription", "SoldAmount", "SoldAmountLast30Days", "SoldSumGross", "SoldSumGrossLast30Days", "SoldSumNet", "SoldSumNetLast30Days", "Sources", "StockCode", "StockCurrent", "StockDesired", "StockReduceItemsPerSale", "StockWarning", "Stocks", "Tags", "TaricNumber", "Title", "Type", "Unit", "UnitsPerItem", "Vat1Rate", "Vat2Rate", "VatIndex", "Weight", "WeightNet", "WidthCm"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BillbeeInterfacesBillbeeAPIModelArticleApiModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "low_stock",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in basic_attributes (list)
        _items = []
        if self.basic_attributes:
            for _item_basic_attributes in self.basic_attributes:
                if _item_basic_attributes:
                    _items.append(_item_basic_attributes.to_dict())
            _dict['BasicAttributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in bill_of_material (list)
        _items = []
        if self.bill_of_material:
            for _item_bill_of_material in self.bill_of_material:
                if _item_bill_of_material:
                    _items.append(_item_bill_of_material.to_dict())
            _dict['BillOfMaterial'] = _items
        # override the default output from pydantic by calling `to_dict()` of category1
        if self.category1:
            _dict['Category1'] = self.category1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of category2
        if self.category2:
            _dict['Category2'] = self.category2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of category3
        if self.category3:
            _dict['Category3'] = self.category3.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['CustomFields'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in description (list)
        _items = []
        if self.description:
            for _item_description in self.description:
                if _item_description:
                    _items.append(_item_description.to_dict())
            _dict['Description'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in export_description_multi_language (list)
        _items = []
        if self.export_description_multi_language:
            for _item_export_description_multi_language in self.export_description_multi_language:
                if _item_export_description_multi_language:
                    _items.append(_item_export_description_multi_language.to_dict())
            _dict['ExportDescriptionMultiLanguage'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item_images in self.images:
                if _item_images:
                    _items.append(_item_images.to_dict())
            _dict['Images'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in invoice_text (list)
        _items = []
        if self.invoice_text:
            for _item_invoice_text in self.invoice_text:
                if _item_invoice_text:
                    _items.append(_item_invoice_text.to_dict())
            _dict['InvoiceText'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in materials (list)
        _items = []
        if self.materials:
            for _item_materials in self.materials:
                if _item_materials:
                    _items.append(_item_materials.to_dict())
            _dict['Materials'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in short_description (list)
        _items = []
        if self.short_description:
            for _item_short_description in self.short_description:
                if _item_short_description:
                    _items.append(_item_short_description.to_dict())
            _dict['ShortDescription'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sources (list)
        _items = []
        if self.sources:
            for _item_sources in self.sources:
                if _item_sources:
                    _items.append(_item_sources.to_dict())
            _dict['Sources'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in stocks (list)
        _items = []
        if self.stocks:
            for _item_stocks in self.stocks:
                if _item_stocks:
                    _items.append(_item_stocks.to_dict())
            _dict['Stocks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['Tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in title (list)
        _items = []
        if self.title:
            for _item_title in self.title:
                if _item_title:
                    _items.append(_item_title.to_dict())
            _dict['Title'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BillbeeInterfacesBillbeeAPIModelArticleApiModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "BasicAttributes": [BillbeeInterfacesOrderMultiLanguageString.from_dict(_item) for _item in obj["BasicAttributes"]] if obj.get("BasicAttributes") is not None else None,
            "BillOfMaterial": [BillbeeInterfacesBillbeeAPIModelBomSubArticleApiModel.from_dict(_item) for _item in obj["BillOfMaterial"]] if obj.get("BillOfMaterial") is not None else None,
            "Category1": BillbeeInterfacesBillbeeAPIModelArticleCategoryApiModel.from_dict(obj["Category1"]) if obj.get("Category1") is not None else None,
            "Category2": BillbeeInterfacesBillbeeAPIModelArticleCategoryApiModel.from_dict(obj["Category2"]) if obj.get("Category2") is not None else None,
            "Category3": BillbeeInterfacesBillbeeAPIModelArticleCategoryApiModel.from_dict(obj["Category3"]) if obj.get("Category3") is not None else None,
            "Condition": obj.get("Condition"),
            "CostPrice": obj.get("CostPrice"),
            "CountryOfOrigin": obj.get("CountryOfOrigin"),
            "CustomFields": [BillbeeInterfacesBillbeeAPIModelArticleApiCustomFieldValueModel.from_dict(_item) for _item in obj["CustomFields"]] if obj.get("CustomFields") is not None else None,
            "DeliveryTime": obj.get("DeliveryTime"),
            "Description": [BillbeeInterfacesOrderMultiLanguageString.from_dict(_item) for _item in obj["Description"]] if obj.get("Description") is not None else None,
            "EAN": obj.get("EAN"),
            "ExportDescription": obj.get("ExportDescription"),
            "ExportDescriptionMultiLanguage": [BillbeeInterfacesOrderMultiLanguageString.from_dict(_item) for _item in obj["ExportDescriptionMultiLanguage"]] if obj.get("ExportDescriptionMultiLanguage") is not None else None,
            "HeightCm": obj.get("HeightCm"),
            "Id": obj.get("Id"),
            "Images": [BillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel.from_dict(_item) for _item in obj["Images"]] if obj.get("Images") is not None else None,
            "InvoiceText": [BillbeeInterfacesOrderMultiLanguageString.from_dict(_item) for _item in obj["InvoiceText"]] if obj.get("InvoiceText") is not None else None,
            "IsCustomizable": obj.get("IsCustomizable"),
            "IsDeactivated": obj.get("IsDeactivated"),
            "IsDigital": obj.get("IsDigital"),
            "LengthCm": obj.get("LengthCm"),
            "LowStock": obj.get("LowStock"),
            "Manufacturer": obj.get("Manufacturer"),
            "Materials": [BillbeeInterfacesOrderMultiLanguageString.from_dict(_item) for _item in obj["Materials"]] if obj.get("Materials") is not None else None,
            "Occasion": obj.get("Occasion"),
            "Price": obj.get("Price"),
            "Recipient": obj.get("Recipient"),
            "SKU": obj.get("SKU"),
            "ShippingProductId": obj.get("ShippingProductId"),
            "ShortDescription": [BillbeeInterfacesOrderMultiLanguageString.from_dict(_item) for _item in obj["ShortDescription"]] if obj.get("ShortDescription") is not None else None,
            "SoldAmount": obj.get("SoldAmount"),
            "SoldAmountLast30Days": obj.get("SoldAmountLast30Days"),
            "SoldSumGross": obj.get("SoldSumGross"),
            "SoldSumGrossLast30Days": obj.get("SoldSumGrossLast30Days"),
            "SoldSumNet": obj.get("SoldSumNet"),
            "SoldSumNetLast30Days": obj.get("SoldSumNetLast30Days"),
            "Sources": [BillbeeInterfacesBillbeeAPIModelArticleSourceApiModel.from_dict(_item) for _item in obj["Sources"]] if obj.get("Sources") is not None else None,
            "StockCode": obj.get("StockCode"),
            "StockCurrent": obj.get("StockCurrent"),
            "StockDesired": obj.get("StockDesired"),
            "StockReduceItemsPerSale": obj.get("StockReduceItemsPerSale"),
            "StockWarning": obj.get("StockWarning"),
            "Stocks": [BillbeeInterfacesBillbeeAPIModelStockArticleApiModel.from_dict(_item) for _item in obj["Stocks"]] if obj.get("Stocks") is not None else None,
            "Tags": [BillbeeInterfacesOrderMultiLanguageString.from_dict(_item) for _item in obj["Tags"]] if obj.get("Tags") is not None else None,
            "TaricNumber": obj.get("TaricNumber"),
            "Title": [BillbeeInterfacesOrderMultiLanguageString.from_dict(_item) for _item in obj["Title"]] if obj.get("Title") is not None else None,
            "Type": obj.get("Type"),
            "Unit": obj.get("Unit"),
            "UnitsPerItem": obj.get("UnitsPerItem"),
            "Vat1Rate": obj.get("Vat1Rate"),
            "Vat2Rate": obj.get("Vat2Rate"),
            "VatIndex": obj.get("VatIndex"),
            "Weight": obj.get("Weight"),
            "WeightNet": obj.get("WeightNet"),
            "WidthCm": obj.get("WidthCm")
        })
        return _obj



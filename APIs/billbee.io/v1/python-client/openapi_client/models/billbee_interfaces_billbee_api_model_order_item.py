# coding: utf-8

"""
    Billbee API

    Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  

    The version of the OpenAPI document: v1
    Contact: support@billbee.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.billbee_interfaces_billbee_api_model_order_item_attribute import BillbeeInterfacesBillbeeAPIModelOrderItemAttribute
from openapi_client.models.billbee_interfaces_billbee_api_model_sold_product import BillbeeInterfacesBillbeeAPIModelSoldProduct
from typing import Optional, Set
from typing_extensions import Self

class BillbeeInterfacesBillbeeAPIModelOrderItem(BaseModel):
    """
    BillbeeInterfacesBillbeeAPIModelOrderItem
    """ # noqa: E501
    attributes: Optional[List[BillbeeInterfacesBillbeeAPIModelOrderItemAttribute]] = Field(default=None, description="A list of product attributes for this position", alias="Attributes")
    billbee_id: Optional[StrictInt] = Field(default=None, description="The billbee id of this item", alias="BillbeeId")
    discount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Sets the discount in percent", alias="Discount")
    dont_adjust_stock: Optional[StrictBool] = Field(default=None, description="If true, the import of this order won't adjust the stock level at billbee.", alias="DontAdjustStock")
    get_price_from_article_if_any: Optional[StrictBool] = Field(default=None, description="If true, the price will be overwritten by the known article price in billbee if available", alias="GetPriceFromArticleIfAny")
    invoice_sku: Optional[StrictStr] = Field(default=None, description="Contains the SKU from OrderDetail (if available) or from Product", alias="InvoiceSKU")
    is_coupon: Optional[StrictBool] = Field(default=None, description="Determines if it is a coupon, which is interpreted as tax-free payment", alias="IsCoupon")
    product: Optional[BillbeeInterfacesBillbeeAPIModelSoldProduct] = Field(default=None, alias="Product")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The sold quantity", alias="Quantity")
    serial_number: Optional[StrictStr] = Field(default=None, description="Contains the used serial number", alias="SerialNumber")
    shipping_profile_id: Optional[StrictStr] = Field(default=None, description="Determines if it is a coupon, which is interpreted as tax-free payment", alias="ShippingProfileId")
    tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The tax amount in the total price", alias="TaxAmount")
    tax_index: Optional[StrictInt] = Field(default=None, description="The tax index.", alias="TaxIndex")
    total_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total price (unit price * quantity)", alias="TotalPrice")
    transaction_id: Optional[StrictStr] = Field(default=None, description="Id of the individual transaction. Only required by Ebay to detect aggregated orders", alias="TransactionId")
    unrebated_total_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Is just used for the billbee api", alias="UnrebatedTotalPrice")
    __properties: ClassVar[List[str]] = ["Attributes", "BillbeeId", "Discount", "DontAdjustStock", "GetPriceFromArticleIfAny", "InvoiceSKU", "IsCoupon", "Product", "Quantity", "SerialNumber", "ShippingProfileId", "TaxAmount", "TaxIndex", "TotalPrice", "TransactionId", "UnrebatedTotalPrice"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BillbeeInterfacesBillbeeAPIModelOrderItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item_attributes in self.attributes:
                if _item_attributes:
                    _items.append(_item_attributes.to_dict())
            _dict['Attributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of product
        if self.product:
            _dict['Product'] = self.product.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BillbeeInterfacesBillbeeAPIModelOrderItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Attributes": [BillbeeInterfacesBillbeeAPIModelOrderItemAttribute.from_dict(_item) for _item in obj["Attributes"]] if obj.get("Attributes") is not None else None,
            "BillbeeId": obj.get("BillbeeId"),
            "Discount": obj.get("Discount"),
            "DontAdjustStock": obj.get("DontAdjustStock"),
            "GetPriceFromArticleIfAny": obj.get("GetPriceFromArticleIfAny"),
            "InvoiceSKU": obj.get("InvoiceSKU"),
            "IsCoupon": obj.get("IsCoupon"),
            "Product": BillbeeInterfacesBillbeeAPIModelSoldProduct.from_dict(obj["Product"]) if obj.get("Product") is not None else None,
            "Quantity": obj.get("Quantity"),
            "SerialNumber": obj.get("SerialNumber"),
            "ShippingProfileId": obj.get("ShippingProfileId"),
            "TaxAmount": obj.get("TaxAmount"),
            "TaxIndex": obj.get("TaxIndex"),
            "TotalPrice": obj.get("TotalPrice"),
            "TransactionId": obj.get("TransactionId"),
            "UnrebatedTotalPrice": obj.get("UnrebatedTotalPrice")
        })
        return _obj



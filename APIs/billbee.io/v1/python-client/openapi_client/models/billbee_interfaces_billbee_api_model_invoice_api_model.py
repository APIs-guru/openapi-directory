# coding: utf-8

"""
    Billbee API

    Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  

    The version of the OpenAPI document: v1
    Contact: support@billbee.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.billbee_interfaces_billbee_api_model_additional_fee_api_model import BillbeeInterfacesBillbeeAPIModelAdditionalFeeApiModel
from openapi_client.models.billbee_interfaces_billbee_api_model_invoice_api_position_api_model import BillbeeInterfacesBillbeeAPIModelInvoiceApiPositionApiModel
from openapi_client.models.billbee_interfaces_order_vat_details_recognized_history_entry_vat_detection_flags import BillbeeInterfacesOrderVatDetailsRecognizedHistoryEntryVatDetectionFlags
from typing import Optional, Set
from typing_extensions import Self

class BillbeeInterfacesBillbeeAPIModelInvoiceApiModel(BaseModel):
    """
    BillbeeInterfacesBillbeeAPIModelInvoiceApiModel
    """ # noqa: E501
    additional_fees: Optional[List[BillbeeInterfacesBillbeeAPIModelAdditionalFeeApiModel]] = Field(default=None, alias="AdditionalFees")
    billbee_id: Optional[StrictInt] = Field(default=None, alias="BillbeeId")
    company: Optional[StrictStr] = Field(default=None, alias="Company")
    currency: Optional[StrictStr] = Field(default=None, alias="Currency")
    customer_number: Optional[StrictInt] = Field(default=None, alias="CustomerNumber")
    customer_vat_id: Optional[StrictStr] = Field(default=None, description="The vat-id, that was given by the customer to fulfill this order", alias="CustomerVatId")
    debtor_number: Optional[StrictInt] = Field(default=None, alias="DebtorNumber")
    email: Optional[StrictStr] = Field(default=None, alias="Email")
    first_name: Optional[StrictStr] = Field(default=None, alias="FirstName")
    invoice_date: Optional[datetime] = Field(default=None, alias="InvoiceDate")
    invoice_number: Optional[StrictStr] = Field(default=None, alias="InvoiceNumber")
    last_name: Optional[StrictStr] = Field(default=None, alias="LastName")
    merchant_vat_id: Optional[StrictStr] = Field(default=None, description="The vat-id, that should be displayed on the invoice and other order documents", alias="MerchantVatId")
    order_number: Optional[StrictStr] = Field(default=None, alias="OrderNumber")
    pay_date: Optional[datetime] = Field(default=None, alias="PayDate")
    payment_type_id: Optional[StrictInt] = Field(default=None, alias="PaymentTypeId")
    positions: Optional[List[BillbeeInterfacesBillbeeAPIModelInvoiceApiPositionApiModel]] = Field(default=None, alias="Positions")
    salutation: Optional[StrictStr] = Field(default=None, alias="Salutation")
    shipping_country: Optional[StrictStr] = Field(default=None, description="two letters for CountryCode Identification", alias="ShippingCountry")
    shop_name: Optional[StrictStr] = Field(default=None, alias="ShopName")
    title: Optional[StrictStr] = Field(default=None, alias="Title")
    total_gross: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="TotalGross")
    total_net: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="TotalNet")
    transaction_id: Optional[StrictStr] = Field(default=None, alias="TransactionId")
    type: Optional[StrictStr] = Field(default=None, alias="Type")
    vat_flags: Optional[BillbeeInterfacesOrderVatDetailsRecognizedHistoryEntryVatDetectionFlags] = Field(default=None, alias="VatFlags")
    vat_mode: Optional[StrictInt] = Field(default=None, alias="VatMode")
    __properties: ClassVar[List[str]] = ["AdditionalFees", "BillbeeId", "Company", "Currency", "CustomerNumber", "CustomerVatId", "DebtorNumber", "Email", "FirstName", "InvoiceDate", "InvoiceNumber", "LastName", "MerchantVatId", "OrderNumber", "PayDate", "PaymentTypeId", "Positions", "Salutation", "ShippingCountry", "ShopName", "Title", "TotalGross", "TotalNet", "TransactionId", "Type", "VatFlags", "VatMode"]

    @field_validator('vat_mode')
    def vat_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 2, 3, 4, 5]):
            raise ValueError("must be one of enum values (0, 1, 2, 3, 4, 5)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BillbeeInterfacesBillbeeAPIModelInvoiceApiModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_fees (list)
        _items = []
        if self.additional_fees:
            for _item_additional_fees in self.additional_fees:
                if _item_additional_fees:
                    _items.append(_item_additional_fees.to_dict())
            _dict['AdditionalFees'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in positions (list)
        _items = []
        if self.positions:
            for _item_positions in self.positions:
                if _item_positions:
                    _items.append(_item_positions.to_dict())
            _dict['Positions'] = _items
        # override the default output from pydantic by calling `to_dict()` of vat_flags
        if self.vat_flags:
            _dict['VatFlags'] = self.vat_flags.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BillbeeInterfacesBillbeeAPIModelInvoiceApiModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AdditionalFees": [BillbeeInterfacesBillbeeAPIModelAdditionalFeeApiModel.from_dict(_item) for _item in obj["AdditionalFees"]] if obj.get("AdditionalFees") is not None else None,
            "BillbeeId": obj.get("BillbeeId"),
            "Company": obj.get("Company"),
            "Currency": obj.get("Currency"),
            "CustomerNumber": obj.get("CustomerNumber"),
            "CustomerVatId": obj.get("CustomerVatId"),
            "DebtorNumber": obj.get("DebtorNumber"),
            "Email": obj.get("Email"),
            "FirstName": obj.get("FirstName"),
            "InvoiceDate": obj.get("InvoiceDate"),
            "InvoiceNumber": obj.get("InvoiceNumber"),
            "LastName": obj.get("LastName"),
            "MerchantVatId": obj.get("MerchantVatId"),
            "OrderNumber": obj.get("OrderNumber"),
            "PayDate": obj.get("PayDate"),
            "PaymentTypeId": obj.get("PaymentTypeId"),
            "Positions": [BillbeeInterfacesBillbeeAPIModelInvoiceApiPositionApiModel.from_dict(_item) for _item in obj["Positions"]] if obj.get("Positions") is not None else None,
            "Salutation": obj.get("Salutation"),
            "ShippingCountry": obj.get("ShippingCountry"),
            "ShopName": obj.get("ShopName"),
            "Title": obj.get("Title"),
            "TotalGross": obj.get("TotalGross"),
            "TotalNet": obj.get("TotalNet"),
            "TransactionId": obj.get("TransactionId"),
            "Type": obj.get("Type"),
            "VatFlags": BillbeeInterfacesOrderVatDetailsRecognizedHistoryEntryVatDetectionFlags.from_dict(obj["VatFlags"]) if obj.get("VatFlags") is not None else None,
            "VatMode": obj.get("VatMode")
        })
        return _obj



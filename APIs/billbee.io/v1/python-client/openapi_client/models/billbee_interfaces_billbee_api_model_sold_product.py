# coding: utf-8

"""
    Billbee API

    Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  

    The version of the OpenAPI document: v1
    Contact: support@billbee.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.billbee_interfaces_billbee_api_model_product_image import BillbeeInterfacesBillbeeAPIModelProductImage
from typing import Optional, Set
from typing_extensions import Self

class BillbeeInterfacesBillbeeAPIModelSoldProduct(BaseModel):
    """
    BillbeeInterfacesBillbeeAPIModelSoldProduct
    """ # noqa: E501
    billbee_id: Optional[StrictInt] = Field(default=None, description="The Billbee internal id of the linked product", alias="BillbeeId")
    country_of_origin: Optional[StrictStr] = Field(default=None, description="The country where this article was made", alias="CountryOfOrigin")
    ean: Optional[StrictStr] = Field(default=None, description="The EAN / GTIN of this product", alias="EAN")
    id: Optional[StrictStr] = Field(default=None, description="The id of this product in the external system", alias="Id")
    images: Optional[List[BillbeeInterfacesBillbeeAPIModelProductImage]] = Field(default=None, description="The images of this product", alias="Images")
    is_digital: Optional[StrictBool] = Field(default=None, description="True if the product is a digital good (download etc.), false if not", alias="IsDigital")
    old_id: Optional[StrictStr] = Field(default=None, description="This is for migration scenarios when the internal id of a product changes  I.E. Etsy when switching to the new inventory management, the ids for variants will change.", alias="OldId")
    platform_data: Optional[StrictStr] = Field(default=None, description="Optional platform specific Data as serialized JSON Object for the product", alias="PlatformData")
    sku: Optional[StrictStr] = Field(default=None, description="The SKU of this product", alias="SKU")
    sku_or_id: Optional[StrictStr] = Field(default=None, description="The SKU of this product or the id if the SKU is empty", alias="SkuOrId")
    taric_code: Optional[StrictStr] = Field(default=None, description="The TARIC code", alias="TARICCode")
    title: Optional[StrictStr] = Field(default=None, description="The name of this product", alias="Title")
    type: Optional[StrictInt] = Field(default=None, description="Indicates whether the article is 1 = normal or 2 = BOM", alias="Type")
    weight: Optional[StrictInt] = Field(default=None, description="Weight of one item in gram", alias="Weight")
    __properties: ClassVar[List[str]] = ["BillbeeId", "CountryOfOrigin", "EAN", "Id", "Images", "IsDigital", "OldId", "PlatformData", "SKU", "SkuOrId", "TARICCode", "Title", "Type", "Weight"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BillbeeInterfacesBillbeeAPIModelSoldProduct from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "sku_or_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item_images in self.images:
                if _item_images:
                    _items.append(_item_images.to_dict())
            _dict['Images'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BillbeeInterfacesBillbeeAPIModelSoldProduct from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "BillbeeId": obj.get("BillbeeId"),
            "CountryOfOrigin": obj.get("CountryOfOrigin"),
            "EAN": obj.get("EAN"),
            "Id": obj.get("Id"),
            "Images": [BillbeeInterfacesBillbeeAPIModelProductImage.from_dict(_item) for _item in obj["Images"]] if obj.get("Images") is not None else None,
            "IsDigital": obj.get("IsDigital"),
            "OldId": obj.get("OldId"),
            "PlatformData": obj.get("PlatformData"),
            "SKU": obj.get("SKU"),
            "SkuOrId": obj.get("SkuOrId"),
            "TARICCode": obj.get("TARICCode"),
            "Title": obj.get("Title"),
            "Type": obj.get("Type"),
            "Weight": obj.get("Weight")
        })
        return _obj



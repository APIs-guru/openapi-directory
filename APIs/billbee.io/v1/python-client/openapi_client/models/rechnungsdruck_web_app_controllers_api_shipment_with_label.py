# coding: utf-8

"""
    Billbee API

    Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  

    The version of the OpenAPI document: v1
    Contact: support@billbee.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.billbee_interfaces_shipping_shipment_data_dimensions import BillbeeInterfacesShippingShipmentDataDimensions
from typing import Optional, Set
from typing_extensions import Self

class RechnungsdruckWebAppControllersApiShipmentWithLabel(BaseModel):
    """
    RechnungsdruckWebAppControllersApiShipmentWithLabel
    """ # noqa: E501
    change_state_to_send: Optional[StrictBool] = Field(default=None, description="Optional parameter to automatically change the orderstate to sent after creating the shipment", alias="ChangeStateToSend")
    client_reference: Optional[StrictStr] = Field(default=None, description="Optional specify a reference text to be included on the label. Works not with all carriers", alias="ClientReference")
    dimension: Optional[BillbeeInterfacesShippingShipmentDataDimensions] = Field(default=None, alias="Dimension")
    order_id: Optional[StrictInt] = Field(default=None, description="The Billbee internal id of the order to ship", alias="OrderId")
    printer_name: Optional[StrictStr] = Field(default=None, description="Optional the name of a connected cloudprinter to send the label to", alias="PrinterName")
    product_id: Optional[StrictInt] = Field(default=None, description="the id of the shipping provider product to be used", alias="ProductId")
    provider_id: Optional[StrictInt] = Field(default=None, description="The id of the provider. You can query all providers with the shippingproviders endpoint", alias="ProviderId")
    ship_date: Optional[datetime] = Field(default=None, description="Optional specify the shipdate to be transmitted to the carrier", alias="ShipDate")
    weight_in_gram: Optional[StrictInt] = Field(default=None, description="Optional the shipments weight in gram to override the calculated weight", alias="WeightInGram")
    __properties: ClassVar[List[str]] = ["ChangeStateToSend", "ClientReference", "Dimension", "OrderId", "PrinterName", "ProductId", "ProviderId", "ShipDate", "WeightInGram"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RechnungsdruckWebAppControllersApiShipmentWithLabel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dimension
        if self.dimension:
            _dict['Dimension'] = self.dimension.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RechnungsdruckWebAppControllersApiShipmentWithLabel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ChangeStateToSend": obj.get("ChangeStateToSend"),
            "ClientReference": obj.get("ClientReference"),
            "Dimension": BillbeeInterfacesShippingShipmentDataDimensions.from_dict(obj["Dimension"]) if obj.get("Dimension") is not None else None,
            "OrderId": obj.get("OrderId"),
            "PrinterName": obj.get("PrinterName"),
            "ProductId": obj.get("ProductId"),
            "ProviderId": obj.get("ProviderId"),
            "ShipDate": obj.get("ShipDate"),
            "WeightInGram": obj.get("WeightInGram")
        })
        return _obj



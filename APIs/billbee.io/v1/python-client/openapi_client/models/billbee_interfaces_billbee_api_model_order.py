# coding: utf-8

"""
    Billbee API

    Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  

    The version of the OpenAPI document: v1
    Contact: support@billbee.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.billbee_interfaces_billbee_api_model_comment_api_model import BillbeeInterfacesBillbeeAPIModelCommentApiModel
from openapi_client.models.billbee_interfaces_billbee_api_model_customer_api_model import BillbeeInterfacesBillbeeAPIModelCustomerApiModel
from openapi_client.models.billbee_interfaces_billbee_api_model_order_address_api_model import BillbeeInterfacesBillbeeAPIModelOrderAddressApiModel
from openapi_client.models.billbee_interfaces_billbee_api_model_order_item import BillbeeInterfacesBillbeeAPIModelOrderItem
from openapi_client.models.billbee_interfaces_billbee_api_model_order_user import BillbeeInterfacesBillbeeAPIModelOrderUser
from openapi_client.models.billbee_interfaces_billbee_api_model_shipment import BillbeeInterfacesBillbeeAPIModelShipment
from openapi_client.models.billbee_interfaces_billbee_api_models_order_payment import BillbeeInterfacesBillbeeAPIModelsOrderPayment
from openapi_client.models.billbee_interfaces_order_history_entry import BillbeeInterfacesOrderHistoryEntry
from openapi_client.models.billbee_interfaces_shipping_product_service import BillbeeInterfacesShippingProductService
from typing import Optional, Set
from typing_extensions import Self

class BillbeeInterfacesBillbeeAPIModelOrder(BaseModel):
    """
    A class that represents the Billbee data model of a single order
    """ # noqa: E501
    accept_loss_of_return_right: Optional[StrictBool] = Field(default=None, description="Customer accepts loss due to withdrawal", alias="AcceptLossOfReturnRight")
    adjustment_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="AdjustmentCost")
    adjustment_reason: Optional[StrictStr] = Field(default=None, alias="AdjustmentReason")
    api_account_id: Optional[StrictInt] = Field(default=None, description="Id of the account, this order belongs to", alias="ApiAccountId")
    api_account_name: Optional[StrictStr] = Field(default=None, description="The name of the account, this order belongs to. Will be ignored on order creation.", alias="ApiAccountName")
    archived_at: Optional[datetime] = Field(default=None, description="If set, the order was already archived at the given date. Further modification is disabled.", alias="ArchivedAt")
    bill_bee_order_id: Optional[StrictInt] = Field(default=None, description="The Order.Id from the Billbee database", alias="BillBeeOrderId")
    bill_bee_parent_order_id: Optional[StrictInt] = Field(default=None, description="The Id of the parent order in the Billbee database", alias="BillBeeParentOrderId")
    buyer: Optional[BillbeeInterfacesBillbeeAPIModelOrderUser] = Field(default=None, alias="Buyer")
    comments: Optional[List[BillbeeInterfacesBillbeeAPIModelCommentApiModel]] = Field(default=None, description="All messages / comments of the order", alias="Comments")
    confirmed_at: Optional[datetime] = Field(default=None, description="The date on which the order was confirmed", alias="ConfirmedAt")
    created_at: Optional[datetime] = Field(default=None, description="The date on which the order was created", alias="CreatedAt")
    currency: Optional[StrictStr] = Field(default=None, description="The three letter currency code.", alias="Currency")
    custom_invoice_note: Optional[StrictStr] = Field(default=None, description="An optional multiline text which is printed on the invoice", alias="CustomInvoiceNote")
    customer: Optional[BillbeeInterfacesBillbeeAPIModelCustomerApiModel] = Field(default=None, alias="Customer")
    customer_number: Optional[StrictStr] = Field(default=None, description="The customer number (not to be confused with the id of the customer)", alias="CustomerNumber")
    customer_vat_id: Optional[StrictStr] = Field(default=None, description="The vat-id, that was given by the customer to fulfill this order", alias="CustomerVatId")
    delivery_source_country_code: Optional[StrictStr] = Field(default=None, description="An optional Country ISO2 Code of the country where order is shipped from (FBA)", alias="DeliverySourceCountryCode")
    distribution_center: Optional[StrictStr] = Field(default=None, description="An optional code for the distribution center delivering this order", alias="DistributionCenter")
    history: Optional[List[BillbeeInterfacesOrderHistoryEntry]] = Field(default=None, alias="History")
    id: Optional[StrictStr] = Field(default=None, description="Id of the order in the external system (marketplace)", alias="Id")
    invoice_address: Optional[BillbeeInterfacesBillbeeAPIModelOrderAddressApiModel] = Field(default=None, alias="InvoiceAddress")
    invoice_date: Optional[datetime] = Field(default=None, description="The date on which the invoice was created", alias="InvoiceDate")
    invoice_number: Optional[StrictInt] = Field(default=None, description="The invoice number", alias="InvoiceNumber")
    invoice_number_postfix: Optional[StrictStr] = Field(default=None, description="The postfix of the invoice number", alias="InvoiceNumberPostfix")
    invoice_number_prefix: Optional[StrictStr] = Field(default=None, description="The prefix of the invoice number", alias="InvoiceNumberPrefix")
    is_cancelation_for: Optional[StrictStr] = Field(default=None, description="An optional Order Id (externalid) for an order if this is a cancel order (shopify only at the moment)", alias="IsCancelationFor")
    is_from_billbee_api: Optional[StrictBool] = Field(default=None, description="Indicates whether the order was created through the Billbee-Api or not.", alias="IsFromBillbeeApi")
    language_code: Optional[StrictStr] = Field(default=None, description="The two-letter language code of the customer", alias="LanguageCode")
    last_modified_at: Optional[datetime] = Field(default=None, description="Date of the last update, the order got", alias="LastModifiedAt")
    merchant_vat_id: Optional[StrictStr] = Field(default=None, description="The vat-id, that should be displayed on the invoice and other order documents", alias="MerchantVatId")
    order_items: Optional[List[BillbeeInterfacesBillbeeAPIModelOrderItem]] = Field(default=None, description="The list of items purchased like shirt, pant, toys etc", alias="OrderItems")
    order_number: Optional[StrictStr] = Field(default=None, description="Order number of the order in the external system (marketplace)", alias="OrderNumber")
    paid_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PaidAmount")
    payed_at: Optional[datetime] = Field(default=None, description="The date on which the order was paid", alias="PayedAt")
    payment_instruction: Optional[StrictStr] = Field(default=None, description="A textfield optionaly filled with a payment instruction text for printout on the invoice (z.B. Ebay Kauf auf Rechnung)", alias="PaymentInstruction")
    payment_method: Optional[StrictInt] = Field(default=None, description="The payment method", alias="PaymentMethod")
    payment_reference: Optional[StrictStr] = Field(default=None, description="A payment reference. Should not be used any more. Please use 'Payments' instead.", alias="PaymentReference")
    payment_transaction_id: Optional[StrictStr] = Field(default=None, description="The id of the payment transaction. For example the transaction id of PayPal payment. Should not be used any more. Please use 'Payments' instead.", alias="PaymentTransactionId")
    payments: Optional[List[BillbeeInterfacesBillbeeAPIModelsOrderPayment]] = Field(default=None, alias="Payments")
    rebate_difference: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="RebateDifference")
    restored_at: Optional[datetime] = Field(default=None, description="If set, the order was restored from the archive at the given date.", alias="RestoredAt")
    seller: Optional[BillbeeInterfacesBillbeeAPIModelOrderUser] = Field(default=None, alias="Seller")
    seller_comment: Optional[StrictStr] = Field(default=None, description="An internal seller comment", alias="SellerComment")
    ship_weight_kg: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total weight of the shipment(s)", alias="ShipWeightKg")
    shipped_at: Optional[datetime] = Field(default=None, description="The date on which the order was shipped", alias="ShippedAt")
    shipping_address: Optional[BillbeeInterfacesBillbeeAPIModelOrderAddressApiModel] = Field(default=None, alias="ShippingAddress")
    shipping_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The shipping cost", alias="ShippingCost")
    shipping_ids: Optional[List[BillbeeInterfacesBillbeeAPIModelShipment]] = Field(default=None, description="The shipments of the order", alias="ShippingIds")
    shipping_profile_id: Optional[StrictStr] = Field(default=None, description="Internal Id for the shipping profile for that order", alias="ShippingProfileId")
    shipping_profile_name: Optional[StrictStr] = Field(default=None, description="Display Name of Shipping profile, if available", alias="ShippingProfileName")
    shipping_provider_id: Optional[StrictInt] = Field(default=None, description="Internal Id for the used shipping provider", alias="ShippingProviderId")
    shipping_provider_name: Optional[StrictStr] = Field(default=None, description="The Name for of used shipping provider", alias="ShippingProviderName")
    shipping_provider_product_id: Optional[StrictInt] = Field(default=None, description="Internal Id for the used shipping product", alias="ShippingProviderProductId")
    shipping_provider_product_name: Optional[StrictStr] = Field(default=None, description="The Name of the used shipping product", alias="ShippingProviderProductName")
    shipping_services: Optional[List[BillbeeInterfacesShippingProductService]] = Field(default=None, description="Additional services for the shipment", alias="ShippingServices")
    state: Optional[StrictInt] = Field(default=None, description="The current state of the order", alias="State")
    tags: Optional[List[StrictStr]] = Field(default=None, description="The Tags of the order", alias="Tags")
    tax_rate1: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The regular tax rate", alias="TaxRate1")
    tax_rate2: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The reduced tax rate", alias="TaxRate2")
    total_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total cost excluding shipping cost", alias="TotalCost")
    updated_at: Optional[datetime] = Field(default=None, description="The date on which the order was last updated", alias="UpdatedAt")
    vat_id: Optional[StrictStr] = Field(default=None, description="The customers vat id", alias="VatId")
    vat_mode: Optional[StrictInt] = Field(default=None, description="The vat mode of the order", alias="VatMode")
    __properties: ClassVar[List[str]] = ["AcceptLossOfReturnRight", "AdjustmentCost", "AdjustmentReason", "ApiAccountId", "ApiAccountName", "ArchivedAt", "BillBeeOrderId", "BillBeeParentOrderId", "Buyer", "Comments", "ConfirmedAt", "CreatedAt", "Currency", "CustomInvoiceNote", "Customer", "CustomerNumber", "CustomerVatId", "DeliverySourceCountryCode", "DistributionCenter", "History", "Id", "InvoiceAddress", "InvoiceDate", "InvoiceNumber", "InvoiceNumberPostfix", "InvoiceNumberPrefix", "IsCancelationFor", "IsFromBillbeeApi", "LanguageCode", "LastModifiedAt", "MerchantVatId", "OrderItems", "OrderNumber", "PaidAmount", "PayedAt", "PaymentInstruction", "PaymentMethod", "PaymentReference", "PaymentTransactionId", "Payments", "RebateDifference", "RestoredAt", "Seller", "SellerComment", "ShipWeightKg", "ShippedAt", "ShippingAddress", "ShippingCost", "ShippingIds", "ShippingProfileId", "ShippingProfileName", "ShippingProviderId", "ShippingProviderName", "ShippingProviderProductId", "ShippingProviderProductName", "ShippingServices", "State", "Tags", "TaxRate1", "TaxRate2", "TotalCost", "UpdatedAt", "VatId", "VatMode"]

    @field_validator('payment_method')
    def payment_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([1, 2, 3, 4, 6, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138]):
            raise ValueError("must be one of enum values (1, 2, 3, 4, 6, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138)")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]):
            raise ValueError("must be one of enum values (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)")
        return value

    @field_validator('vat_mode')
    def vat_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 2, 3, 4, 5]):
            raise ValueError("must be one of enum values (0, 1, 2, 3, 4, 5)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BillbeeInterfacesBillbeeAPIModelOrder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "rebate_difference",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of buyer
        if self.buyer:
            _dict['Buyer'] = self.buyer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in comments (list)
        _items = []
        if self.comments:
            for _item_comments in self.comments:
                if _item_comments:
                    _items.append(_item_comments.to_dict())
            _dict['Comments'] = _items
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['Customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in history (list)
        _items = []
        if self.history:
            for _item_history in self.history:
                if _item_history:
                    _items.append(_item_history.to_dict())
            _dict['History'] = _items
        # override the default output from pydantic by calling `to_dict()` of invoice_address
        if self.invoice_address:
            _dict['InvoiceAddress'] = self.invoice_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in order_items (list)
        _items = []
        if self.order_items:
            for _item_order_items in self.order_items:
                if _item_order_items:
                    _items.append(_item_order_items.to_dict())
            _dict['OrderItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payments (list)
        _items = []
        if self.payments:
            for _item_payments in self.payments:
                if _item_payments:
                    _items.append(_item_payments.to_dict())
            _dict['Payments'] = _items
        # override the default output from pydantic by calling `to_dict()` of seller
        if self.seller:
            _dict['Seller'] = self.seller.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_address
        if self.shipping_address:
            _dict['ShippingAddress'] = self.shipping_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in shipping_ids (list)
        _items = []
        if self.shipping_ids:
            for _item_shipping_ids in self.shipping_ids:
                if _item_shipping_ids:
                    _items.append(_item_shipping_ids.to_dict())
            _dict['ShippingIds'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shipping_services (list)
        _items = []
        if self.shipping_services:
            for _item_shipping_services in self.shipping_services:
                if _item_shipping_services:
                    _items.append(_item_shipping_services.to_dict())
            _dict['ShippingServices'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BillbeeInterfacesBillbeeAPIModelOrder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AcceptLossOfReturnRight": obj.get("AcceptLossOfReturnRight"),
            "AdjustmentCost": obj.get("AdjustmentCost"),
            "AdjustmentReason": obj.get("AdjustmentReason"),
            "ApiAccountId": obj.get("ApiAccountId"),
            "ApiAccountName": obj.get("ApiAccountName"),
            "ArchivedAt": obj.get("ArchivedAt"),
            "BillBeeOrderId": obj.get("BillBeeOrderId"),
            "BillBeeParentOrderId": obj.get("BillBeeParentOrderId"),
            "Buyer": BillbeeInterfacesBillbeeAPIModelOrderUser.from_dict(obj["Buyer"]) if obj.get("Buyer") is not None else None,
            "Comments": [BillbeeInterfacesBillbeeAPIModelCommentApiModel.from_dict(_item) for _item in obj["Comments"]] if obj.get("Comments") is not None else None,
            "ConfirmedAt": obj.get("ConfirmedAt"),
            "CreatedAt": obj.get("CreatedAt"),
            "Currency": obj.get("Currency"),
            "CustomInvoiceNote": obj.get("CustomInvoiceNote"),
            "Customer": BillbeeInterfacesBillbeeAPIModelCustomerApiModel.from_dict(obj["Customer"]) if obj.get("Customer") is not None else None,
            "CustomerNumber": obj.get("CustomerNumber"),
            "CustomerVatId": obj.get("CustomerVatId"),
            "DeliverySourceCountryCode": obj.get("DeliverySourceCountryCode"),
            "DistributionCenter": obj.get("DistributionCenter"),
            "History": [BillbeeInterfacesOrderHistoryEntry.from_dict(_item) for _item in obj["History"]] if obj.get("History") is not None else None,
            "Id": obj.get("Id"),
            "InvoiceAddress": BillbeeInterfacesBillbeeAPIModelOrderAddressApiModel.from_dict(obj["InvoiceAddress"]) if obj.get("InvoiceAddress") is not None else None,
            "InvoiceDate": obj.get("InvoiceDate"),
            "InvoiceNumber": obj.get("InvoiceNumber"),
            "InvoiceNumberPostfix": obj.get("InvoiceNumberPostfix"),
            "InvoiceNumberPrefix": obj.get("InvoiceNumberPrefix"),
            "IsCancelationFor": obj.get("IsCancelationFor"),
            "IsFromBillbeeApi": obj.get("IsFromBillbeeApi"),
            "LanguageCode": obj.get("LanguageCode"),
            "LastModifiedAt": obj.get("LastModifiedAt"),
            "MerchantVatId": obj.get("MerchantVatId"),
            "OrderItems": [BillbeeInterfacesBillbeeAPIModelOrderItem.from_dict(_item) for _item in obj["OrderItems"]] if obj.get("OrderItems") is not None else None,
            "OrderNumber": obj.get("OrderNumber"),
            "PaidAmount": obj.get("PaidAmount"),
            "PayedAt": obj.get("PayedAt"),
            "PaymentInstruction": obj.get("PaymentInstruction"),
            "PaymentMethod": obj.get("PaymentMethod"),
            "PaymentReference": obj.get("PaymentReference"),
            "PaymentTransactionId": obj.get("PaymentTransactionId"),
            "Payments": [BillbeeInterfacesBillbeeAPIModelsOrderPayment.from_dict(_item) for _item in obj["Payments"]] if obj.get("Payments") is not None else None,
            "RebateDifference": obj.get("RebateDifference"),
            "RestoredAt": obj.get("RestoredAt"),
            "Seller": BillbeeInterfacesBillbeeAPIModelOrderUser.from_dict(obj["Seller"]) if obj.get("Seller") is not None else None,
            "SellerComment": obj.get("SellerComment"),
            "ShipWeightKg": obj.get("ShipWeightKg"),
            "ShippedAt": obj.get("ShippedAt"),
            "ShippingAddress": BillbeeInterfacesBillbeeAPIModelOrderAddressApiModel.from_dict(obj["ShippingAddress"]) if obj.get("ShippingAddress") is not None else None,
            "ShippingCost": obj.get("ShippingCost"),
            "ShippingIds": [BillbeeInterfacesBillbeeAPIModelShipment.from_dict(_item) for _item in obj["ShippingIds"]] if obj.get("ShippingIds") is not None else None,
            "ShippingProfileId": obj.get("ShippingProfileId"),
            "ShippingProfileName": obj.get("ShippingProfileName"),
            "ShippingProviderId": obj.get("ShippingProviderId"),
            "ShippingProviderName": obj.get("ShippingProviderName"),
            "ShippingProviderProductId": obj.get("ShippingProviderProductId"),
            "ShippingProviderProductName": obj.get("ShippingProviderProductName"),
            "ShippingServices": [BillbeeInterfacesShippingProductService.from_dict(_item) for _item in obj["ShippingServices"]] if obj.get("ShippingServices") is not None else None,
            "State": obj.get("State"),
            "Tags": obj.get("Tags"),
            "TaxRate1": obj.get("TaxRate1"),
            "TaxRate2": obj.get("TaxRate2"),
            "TotalCost": obj.get("TotalCost"),
            "UpdatedAt": obj.get("UpdatedAt"),
            "VatId": obj.get("VatId"),
            "VatMode": obj.get("VatMode")
        })
        return _obj



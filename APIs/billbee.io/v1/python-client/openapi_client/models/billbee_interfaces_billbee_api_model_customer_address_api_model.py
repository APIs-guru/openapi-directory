# coding: utf-8

"""
    Billbee API

    Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  

    The version of the OpenAPI document: v1
    Contact: support@billbee.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BillbeeInterfacesBillbeeAPIModelCustomerAddressApiModel(BaseModel):
    """
    Container for passing address data
    """ # noqa: E501
    address_addition: Optional[StrictStr] = Field(default=None, alias="AddressAddition")
    address_type: Optional[StrictInt] = Field(default=None, description="The type of the address", alias="AddressType")
    archived_at: Optional[datetime] = Field(default=None, description="If set, the customeraddress was already archived at the given date. Further modification is disabled.", alias="ArchivedAt")
    city: Optional[StrictStr] = Field(default=None, alias="City")
    company: Optional[StrictStr] = Field(default=None, description="The name of the company", alias="Company")
    country_code: Optional[StrictStr] = Field(default=None, description="The ISO2 code of the country", alias="CountryCode")
    customer_id: Optional[StrictInt] = Field(default=None, description="The internal Billbee id of the customer the address belongs to", alias="CustomerId")
    email: Optional[StrictStr] = Field(default=None, alias="Email")
    fax: Optional[StrictStr] = Field(default=None, alias="Fax")
    first_name: Optional[StrictStr] = Field(default=None, alias="FirstName")
    housenumber: Optional[StrictStr] = Field(default=None, alias="Housenumber")
    id: Optional[StrictInt] = Field(default=None, description="The internal Billbee ID of the address record. Can be null if a new address is created", alias="Id")
    last_name: Optional[StrictStr] = Field(default=None, alias="LastName")
    name2: Optional[StrictStr] = Field(default=None, description="Optionally an additional name field", alias="Name2")
    restored_at: Optional[datetime] = Field(default=None, description="If set, the customeraddress was restored from the archive at the given date.", alias="RestoredAt")
    state: Optional[StrictStr] = Field(default=None, alias="State")
    street: Optional[StrictStr] = Field(default=None, alias="Street")
    tel1: Optional[StrictStr] = Field(default=None, alias="Tel1")
    tel2: Optional[StrictStr] = Field(default=None, alias="Tel2")
    zip: Optional[StrictStr] = Field(default=None, alias="Zip")
    __properties: ClassVar[List[str]] = ["AddressAddition", "AddressType", "ArchivedAt", "City", "Company", "CountryCode", "CustomerId", "Email", "Fax", "FirstName", "Housenumber", "Id", "LastName", "Name2", "RestoredAt", "State", "Street", "Tel1", "Tel2", "Zip"]

    @field_validator('address_type')
    def address_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([1, 2]):
            raise ValueError("must be one of enum values (1, 2)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BillbeeInterfacesBillbeeAPIModelCustomerAddressApiModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BillbeeInterfacesBillbeeAPIModelCustomerAddressApiModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AddressAddition": obj.get("AddressAddition"),
            "AddressType": obj.get("AddressType"),
            "ArchivedAt": obj.get("ArchivedAt"),
            "City": obj.get("City"),
            "Company": obj.get("Company"),
            "CountryCode": obj.get("CountryCode"),
            "CustomerId": obj.get("CustomerId"),
            "Email": obj.get("Email"),
            "Fax": obj.get("Fax"),
            "FirstName": obj.get("FirstName"),
            "Housenumber": obj.get("Housenumber"),
            "Id": obj.get("Id"),
            "LastName": obj.get("LastName"),
            "Name2": obj.get("Name2"),
            "RestoredAt": obj.get("RestoredAt"),
            "State": obj.get("State"),
            "Street": obj.get("Street"),
            "Tel1": obj.get("Tel1"),
            "Tel2": obj.get("Tel2"),
            "Zip": obj.get("Zip")
        })
        return _obj



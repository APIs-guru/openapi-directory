# coding: utf-8

"""
    Billbee API

    Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  

    The version of the OpenAPI document: v1
    Contact: support@billbee.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.billbee_interfaces_billbee_api_model_shipment_address_api_model import BillbeeInterfacesBillbeeAPIModelShipmentAddressApiModel
from openapi_client.models.billbee_interfaces_shipping_product_service import BillbeeInterfacesShippingProductService
from openapi_client.models.billbee_interfaces_shipping_shipment_data_dimensions import BillbeeInterfacesShippingShipmentDataDimensions
from typing import Optional, Set
from typing_extensions import Self

class BillbeeInterfacesBillbeeAPIModelCreateShipmentApiModel(BaseModel):
    """
    BillbeeInterfacesBillbeeAPIModelCreateShipmentApiModel
    """ # noqa: E501
    client_reference: Optional[StrictStr] = Field(default=None, description="Optional specify a text to be included on the label. Not possible with all carriers", alias="ClientReference")
    content: Optional[StrictStr] = Field(default=None, description="Optional specify a text describing the content of the shipment. Used for export shipments", alias="Content")
    customer_number: Optional[StrictStr] = Field(default=None, description="Not used anymore", alias="CustomerNumber")
    dimension: Optional[BillbeeInterfacesShippingShipmentDataDimensions] = Field(default=None, alias="Dimension")
    order_currency_code: Optional[StrictStr] = Field(default=None, description="The Currency if the ordersum", alias="OrderCurrencyCode")
    order_sum: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The value of the shipments content", alias="OrderSum")
    printer_id_for_export_docs: Optional[StrictInt] = Field(default=None, description="The id of a connected Cloudprinter to sent the export docs to", alias="PrinterIdForExportDocs")
    printer_name: Optional[StrictStr] = Field(default=None, description="The name of a connected Cloudprinter to sent the label to", alias="PrinterName")
    product_code: Optional[StrictStr] = Field(default=None, description="The productcode to be used when creating the shipment. Values depends on the carrier used", alias="ProductCode")
    provider_name: Optional[StrictStr] = Field(default=None, description="The name of the provider as specified in the billbee account", alias="ProviderName")
    receiver_address: Optional[BillbeeInterfacesBillbeeAPIModelShipmentAddressApiModel] = Field(default=None, alias="ReceiverAddress")
    services: Optional[List[BillbeeInterfacesShippingProductService]] = Field(default=None, description="A list of services to be used when creating the shipment", alias="Services")
    ship_date: Optional[datetime] = Field(default=None, description="Optional overwrite the shipdate to be transferred to the carrier", alias="ShipDate")
    total_net: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The value of the shipments content (net)", alias="TotalNet")
    weight_in_gram: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional specify the weight in gram of the shipment", alias="WeightInGram")
    shipping_carrier: Optional[StrictInt] = Field(default=None, alias="shippingCarrier")
    __properties: ClassVar[List[str]] = ["ClientReference", "Content", "CustomerNumber", "Dimension", "OrderCurrencyCode", "OrderSum", "PrinterIdForExportDocs", "PrinterName", "ProductCode", "ProviderName", "ReceiverAddress", "Services", "ShipDate", "TotalNet", "WeightInGram", "shippingCarrier"]

    @field_validator('shipping_carrier')
    def shipping_carrier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]):
            raise ValueError("must be one of enum values (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BillbeeInterfacesBillbeeAPIModelCreateShipmentApiModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dimension
        if self.dimension:
            _dict['Dimension'] = self.dimension.to_dict()
        # override the default output from pydantic by calling `to_dict()` of receiver_address
        if self.receiver_address:
            _dict['ReceiverAddress'] = self.receiver_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in services (list)
        _items = []
        if self.services:
            for _item_services in self.services:
                if _item_services:
                    _items.append(_item_services.to_dict())
            _dict['Services'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BillbeeInterfacesBillbeeAPIModelCreateShipmentApiModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ClientReference": obj.get("ClientReference"),
            "Content": obj.get("Content"),
            "CustomerNumber": obj.get("CustomerNumber"),
            "Dimension": BillbeeInterfacesShippingShipmentDataDimensions.from_dict(obj["Dimension"]) if obj.get("Dimension") is not None else None,
            "OrderCurrencyCode": obj.get("OrderCurrencyCode"),
            "OrderSum": obj.get("OrderSum"),
            "PrinterIdForExportDocs": obj.get("PrinterIdForExportDocs"),
            "PrinterName": obj.get("PrinterName"),
            "ProductCode": obj.get("ProductCode"),
            "ProviderName": obj.get("ProviderName"),
            "ReceiverAddress": BillbeeInterfacesBillbeeAPIModelShipmentAddressApiModel.from_dict(obj["ReceiverAddress"]) if obj.get("ReceiverAddress") is not None else None,
            "Services": [BillbeeInterfacesShippingProductService.from_dict(_item) for _item in obj["Services"]] if obj.get("Services") is not None else None,
            "ShipDate": obj.get("ShipDate"),
            "TotalNet": obj.get("TotalNet"),
            "WeightInGram": obj.get("WeightInGram"),
            "shippingCarrier": obj.get("shippingCarrier")
        })
        return _obj



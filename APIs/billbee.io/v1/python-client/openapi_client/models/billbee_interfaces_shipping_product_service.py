# coding: utf-8

"""
    Billbee API

    Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  

    The version of the OpenAPI document: v1
    Contact: support@billbee.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.system_collections_generic_key_value_pair_system_string_system_collections_generic_list_system_collections_generic_key_value_pair_system_int32_system_string import SystemCollectionsGenericKeyValuePairSystemStringSystemCollectionsGenericListSystemCollectionsGenericKeyValuePairSystemInt32SystemString
from typing import Optional, Set
from typing_extensions import Self

class BillbeeInterfacesShippingProductService(BaseModel):
    """
    BillbeeInterfacesShippingProductService
    """ # noqa: E501
    can_be_configured: Optional[StrictBool] = Field(default=None, alias="CanBeConfigured")
    display_name: Optional[StrictStr] = Field(default=None, alias="DisplayName")
    display_value: Optional[StrictStr] = Field(default=None, alias="DisplayValue")
    possible_value_lists: Optional[List[SystemCollectionsGenericKeyValuePairSystemStringSystemCollectionsGenericListSystemCollectionsGenericKeyValuePairSystemInt32SystemString]] = Field(default=None, alias="PossibleValueLists")
    requires_user_input: Optional[StrictBool] = Field(default=None, alias="RequiresUserInput")
    service_name: Optional[StrictStr] = Field(default=None, alias="ServiceName")
    type_name: Optional[StrictStr] = Field(default=None, alias="typeName")
    __properties: ClassVar[List[str]] = ["CanBeConfigured", "DisplayName", "DisplayValue", "PossibleValueLists", "RequiresUserInput", "ServiceName", "typeName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BillbeeInterfacesShippingProductService from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "can_be_configured",
            "display_name",
            "display_value",
            "possible_value_lists",
            "requires_user_input",
            "service_name",
            "type_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in possible_value_lists (list)
        _items = []
        if self.possible_value_lists:
            for _item_possible_value_lists in self.possible_value_lists:
                if _item_possible_value_lists:
                    _items.append(_item_possible_value_lists.to_dict())
            _dict['PossibleValueLists'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BillbeeInterfacesShippingProductService from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CanBeConfigured": obj.get("CanBeConfigured"),
            "DisplayName": obj.get("DisplayName"),
            "DisplayValue": obj.get("DisplayValue"),
            "PossibleValueLists": [SystemCollectionsGenericKeyValuePairSystemStringSystemCollectionsGenericListSystemCollectionsGenericKeyValuePairSystemInt32SystemString.from_dict(_item) for _item in obj["PossibleValueLists"]] if obj.get("PossibleValueLists") is not None else None,
            "RequiresUserInput": obj.get("RequiresUserInput"),
            "ServiceName": obj.get("ServiceName"),
            "typeName": obj.get("typeName")
        })
        return _obj



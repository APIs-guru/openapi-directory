# coding: utf-8

"""
    Billbee API

    Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  

    The version of the OpenAPI document: v1
    Contact: support@billbee.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class RechnungsdruckWebAppControllersApiOrder(BaseModel):
    """
    RechnungsdruckWebAppControllersApiOrder
    """ # noqa: E501
    can_create_auto_invoice: Optional[StrictBool] = Field(default=None, alias="CanCreateAutoInvoice")
    created_at: Optional[datetime] = Field(default=None, alias="CreatedAt")
    external_id: Optional[StrictStr] = Field(default=None, alias="ExternalId")
    has_invoice: Optional[StrictBool] = Field(default=None, alias="HasInvoice")
    id: Optional[StrictInt] = Field(default=None, alias="Id")
    invoice_created_at: Optional[datetime] = Field(default=None, alias="InvoiceCreatedAt")
    invoice_date: Optional[datetime] = Field(default=None, alias="InvoiceDate")
    invoice_number: Optional[StrictStr] = Field(default=None, alias="InvoiceNumber")
    order_state_id: Optional[StrictInt] = Field(default=None, alias="OrderStateId")
    order_state_text: Optional[StrictStr] = Field(default=None, alias="OrderStateText")
    paid_at: Optional[datetime] = Field(default=None, alias="PaidAt")
    shipped_at: Optional[datetime] = Field(default=None, alias="ShippedAt")
    shop_name: Optional[StrictStr] = Field(default=None, alias="ShopName")
    total_gross: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="TotalGross")
    __properties: ClassVar[List[str]] = ["CanCreateAutoInvoice", "CreatedAt", "ExternalId", "HasInvoice", "Id", "InvoiceCreatedAt", "InvoiceDate", "InvoiceNumber", "OrderStateId", "OrderStateText", "PaidAt", "ShippedAt", "ShopName", "TotalGross"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RechnungsdruckWebAppControllersApiOrder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RechnungsdruckWebAppControllersApiOrder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CanCreateAutoInvoice": obj.get("CanCreateAutoInvoice"),
            "CreatedAt": obj.get("CreatedAt"),
            "ExternalId": obj.get("ExternalId"),
            "HasInvoice": obj.get("HasInvoice"),
            "Id": obj.get("Id"),
            "InvoiceCreatedAt": obj.get("InvoiceCreatedAt"),
            "InvoiceDate": obj.get("InvoiceDate"),
            "InvoiceNumber": obj.get("InvoiceNumber"),
            "OrderStateId": obj.get("OrderStateId"),
            "OrderStateText": obj.get("OrderStateText"),
            "PaidAt": obj.get("PaidAt"),
            "ShippedAt": obj.get("ShippedAt"),
            "ShopName": obj.get("ShopName"),
            "TotalGross": obj.get("TotalGross")
        })
        return _obj



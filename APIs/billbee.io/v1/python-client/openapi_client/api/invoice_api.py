# coding: utf-8

"""
    Billbee API

    Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  

    The version of the OpenAPI document: v1
    Contact: support@billbee.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.rechnungsdruck_web_app_controllers_api_api_paged_result_system_collections_generic_list_billbee_interfaces_billbee_api_model_invoice_api_model import RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelInvoiceApiModel
from openapi_client.models.rechnungsdruck_web_app_controllers_api_api_result_rechnungsdruck_web_app_controllers_api_invoice import RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiInvoice

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class InvoiceApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def order_api_create_invoice_0(
        self,
        id: Annotated[StrictInt, Field(description="The internal billbee id of the order")],
        include_invoice_pdf: Annotated[Optional[StrictBool], Field(description="If true, the PDF is included in the response as base64 encoded string")] = None,
        template_id: Annotated[Optional[StrictInt], Field(description="You can pass the id of an invoice template to overwrite the assigned template for invoice creation")] = None,
        send_to_cloud_id: Annotated[Optional[StrictInt], Field(description="You can pass the id of a connected cloud printer/storage to send the invoice to it")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiInvoice:
        """Create an invoice for an existing order. This request is extra throttled by order and api key to a maximum of 1 per 5 minutes.


        :param id: The internal billbee id of the order (required)
        :type id: int
        :param include_invoice_pdf: If true, the PDF is included in the response as base64 encoded string
        :type include_invoice_pdf: bool
        :param template_id: You can pass the id of an invoice template to overwrite the assigned template for invoice creation
        :type template_id: int
        :param send_to_cloud_id: You can pass the id of a connected cloud printer/storage to send the invoice to it
        :type send_to_cloud_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_api_create_invoice_0_serialize(
            id=id,
            include_invoice_pdf=include_invoice_pdf,
            template_id=template_id,
            send_to_cloud_id=send_to_cloud_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiInvoice",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_api_create_invoice_0_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="The internal billbee id of the order")],
        include_invoice_pdf: Annotated[Optional[StrictBool], Field(description="If true, the PDF is included in the response as base64 encoded string")] = None,
        template_id: Annotated[Optional[StrictInt], Field(description="You can pass the id of an invoice template to overwrite the assigned template for invoice creation")] = None,
        send_to_cloud_id: Annotated[Optional[StrictInt], Field(description="You can pass the id of a connected cloud printer/storage to send the invoice to it")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiInvoice]:
        """Create an invoice for an existing order. This request is extra throttled by order and api key to a maximum of 1 per 5 minutes.


        :param id: The internal billbee id of the order (required)
        :type id: int
        :param include_invoice_pdf: If true, the PDF is included in the response as base64 encoded string
        :type include_invoice_pdf: bool
        :param template_id: You can pass the id of an invoice template to overwrite the assigned template for invoice creation
        :type template_id: int
        :param send_to_cloud_id: You can pass the id of a connected cloud printer/storage to send the invoice to it
        :type send_to_cloud_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_api_create_invoice_0_serialize(
            id=id,
            include_invoice_pdf=include_invoice_pdf,
            template_id=template_id,
            send_to_cloud_id=send_to_cloud_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiInvoice",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_api_create_invoice_0_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="The internal billbee id of the order")],
        include_invoice_pdf: Annotated[Optional[StrictBool], Field(description="If true, the PDF is included in the response as base64 encoded string")] = None,
        template_id: Annotated[Optional[StrictInt], Field(description="You can pass the id of an invoice template to overwrite the assigned template for invoice creation")] = None,
        send_to_cloud_id: Annotated[Optional[StrictInt], Field(description="You can pass the id of a connected cloud printer/storage to send the invoice to it")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create an invoice for an existing order. This request is extra throttled by order and api key to a maximum of 1 per 5 minutes.


        :param id: The internal billbee id of the order (required)
        :type id: int
        :param include_invoice_pdf: If true, the PDF is included in the response as base64 encoded string
        :type include_invoice_pdf: bool
        :param template_id: You can pass the id of an invoice template to overwrite the assigned template for invoice creation
        :type template_id: int
        :param send_to_cloud_id: You can pass the id of a connected cloud printer/storage to send the invoice to it
        :type send_to_cloud_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_api_create_invoice_0_serialize(
            id=id,
            include_invoice_pdf=include_invoice_pdf,
            template_id=template_id,
            send_to_cloud_id=send_to_cloud_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiInvoice",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_api_create_invoice_0_serialize(
        self,
        id,
        include_invoice_pdf,
        template_id,
        send_to_cloud_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if include_invoice_pdf is not None:
            
            _query_params.append(('includeInvoicePdf', include_invoice_pdf))
            
        if template_id is not None:
            
            _query_params.append(('templateId', template_id))
            
        if send_to_cloud_id is not None:
            
            _query_params.append(('sendToCloudId', send_to_cloud_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml', 
                    'text/json', 
                    'text/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v1/orders/CreateInvoice/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_api_get_invoice_list_0(
        self,
        min_invoice_date: Annotated[Optional[datetime], Field(description="Specifies the oldest invoice date to include")] = None,
        max_invoice_date: Annotated[Optional[datetime], Field(description="Specifies the newest invoice date to include")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Specifies the page to request")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specifies the pagesize. Defaults to 50, max value is 250")] = None,
        shop_id: Annotated[Optional[List[StrictInt]], Field(description="Specifies a list of shop ids for which invoices should be included")] = None,
        order_state_id: Annotated[Optional[List[StrictInt]], Field(description="Specifies a list of state ids to include in the response")] = None,
        tag: Optional[List[StrictStr]] = None,
        min_pay_date: Optional[datetime] = None,
        max_pay_date: Optional[datetime] = None,
        include_positions: Optional[StrictBool] = None,
        exclude_tags: Annotated[Optional[StrictBool], Field(description="If true the list of tags passed to the call are used to filter orders to not include these tags")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelInvoiceApiModel:
        """Get a list of all invoices optionally filtered by date. This request ist throttled to 1 per 1 minute for same page and minInvoiceDate


        :param min_invoice_date: Specifies the oldest invoice date to include
        :type min_invoice_date: datetime
        :param max_invoice_date: Specifies the newest invoice date to include
        :type max_invoice_date: datetime
        :param page: Specifies the page to request
        :type page: int
        :param page_size: Specifies the pagesize. Defaults to 50, max value is 250
        :type page_size: int
        :param shop_id: Specifies a list of shop ids for which invoices should be included
        :type shop_id: List[int]
        :param order_state_id: Specifies a list of state ids to include in the response
        :type order_state_id: List[int]
        :param tag:
        :type tag: List[str]
        :param min_pay_date:
        :type min_pay_date: datetime
        :param max_pay_date:
        :type max_pay_date: datetime
        :param include_positions:
        :type include_positions: bool
        :param exclude_tags: If true the list of tags passed to the call are used to filter orders to not include these tags
        :type exclude_tags: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_api_get_invoice_list_0_serialize(
            min_invoice_date=min_invoice_date,
            max_invoice_date=max_invoice_date,
            page=page,
            page_size=page_size,
            shop_id=shop_id,
            order_state_id=order_state_id,
            tag=tag,
            min_pay_date=min_pay_date,
            max_pay_date=max_pay_date,
            include_positions=include_positions,
            exclude_tags=exclude_tags,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelInvoiceApiModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_api_get_invoice_list_0_with_http_info(
        self,
        min_invoice_date: Annotated[Optional[datetime], Field(description="Specifies the oldest invoice date to include")] = None,
        max_invoice_date: Annotated[Optional[datetime], Field(description="Specifies the newest invoice date to include")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Specifies the page to request")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specifies the pagesize. Defaults to 50, max value is 250")] = None,
        shop_id: Annotated[Optional[List[StrictInt]], Field(description="Specifies a list of shop ids for which invoices should be included")] = None,
        order_state_id: Annotated[Optional[List[StrictInt]], Field(description="Specifies a list of state ids to include in the response")] = None,
        tag: Optional[List[StrictStr]] = None,
        min_pay_date: Optional[datetime] = None,
        max_pay_date: Optional[datetime] = None,
        include_positions: Optional[StrictBool] = None,
        exclude_tags: Annotated[Optional[StrictBool], Field(description="If true the list of tags passed to the call are used to filter orders to not include these tags")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelInvoiceApiModel]:
        """Get a list of all invoices optionally filtered by date. This request ist throttled to 1 per 1 minute for same page and minInvoiceDate


        :param min_invoice_date: Specifies the oldest invoice date to include
        :type min_invoice_date: datetime
        :param max_invoice_date: Specifies the newest invoice date to include
        :type max_invoice_date: datetime
        :param page: Specifies the page to request
        :type page: int
        :param page_size: Specifies the pagesize. Defaults to 50, max value is 250
        :type page_size: int
        :param shop_id: Specifies a list of shop ids for which invoices should be included
        :type shop_id: List[int]
        :param order_state_id: Specifies a list of state ids to include in the response
        :type order_state_id: List[int]
        :param tag:
        :type tag: List[str]
        :param min_pay_date:
        :type min_pay_date: datetime
        :param max_pay_date:
        :type max_pay_date: datetime
        :param include_positions:
        :type include_positions: bool
        :param exclude_tags: If true the list of tags passed to the call are used to filter orders to not include these tags
        :type exclude_tags: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_api_get_invoice_list_0_serialize(
            min_invoice_date=min_invoice_date,
            max_invoice_date=max_invoice_date,
            page=page,
            page_size=page_size,
            shop_id=shop_id,
            order_state_id=order_state_id,
            tag=tag,
            min_pay_date=min_pay_date,
            max_pay_date=max_pay_date,
            include_positions=include_positions,
            exclude_tags=exclude_tags,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelInvoiceApiModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_api_get_invoice_list_0_without_preload_content(
        self,
        min_invoice_date: Annotated[Optional[datetime], Field(description="Specifies the oldest invoice date to include")] = None,
        max_invoice_date: Annotated[Optional[datetime], Field(description="Specifies the newest invoice date to include")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Specifies the page to request")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specifies the pagesize. Defaults to 50, max value is 250")] = None,
        shop_id: Annotated[Optional[List[StrictInt]], Field(description="Specifies a list of shop ids for which invoices should be included")] = None,
        order_state_id: Annotated[Optional[List[StrictInt]], Field(description="Specifies a list of state ids to include in the response")] = None,
        tag: Optional[List[StrictStr]] = None,
        min_pay_date: Optional[datetime] = None,
        max_pay_date: Optional[datetime] = None,
        include_positions: Optional[StrictBool] = None,
        exclude_tags: Annotated[Optional[StrictBool], Field(description="If true the list of tags passed to the call are used to filter orders to not include these tags")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of all invoices optionally filtered by date. This request ist throttled to 1 per 1 minute for same page and minInvoiceDate


        :param min_invoice_date: Specifies the oldest invoice date to include
        :type min_invoice_date: datetime
        :param max_invoice_date: Specifies the newest invoice date to include
        :type max_invoice_date: datetime
        :param page: Specifies the page to request
        :type page: int
        :param page_size: Specifies the pagesize. Defaults to 50, max value is 250
        :type page_size: int
        :param shop_id: Specifies a list of shop ids for which invoices should be included
        :type shop_id: List[int]
        :param order_state_id: Specifies a list of state ids to include in the response
        :type order_state_id: List[int]
        :param tag:
        :type tag: List[str]
        :param min_pay_date:
        :type min_pay_date: datetime
        :param max_pay_date:
        :type max_pay_date: datetime
        :param include_positions:
        :type include_positions: bool
        :param exclude_tags: If true the list of tags passed to the call are used to filter orders to not include these tags
        :type exclude_tags: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_api_get_invoice_list_0_serialize(
            min_invoice_date=min_invoice_date,
            max_invoice_date=max_invoice_date,
            page=page,
            page_size=page_size,
            shop_id=shop_id,
            order_state_id=order_state_id,
            tag=tag,
            min_pay_date=min_pay_date,
            max_pay_date=max_pay_date,
            include_positions=include_positions,
            exclude_tags=exclude_tags,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelInvoiceApiModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_api_get_invoice_list_0_serialize(
        self,
        min_invoice_date,
        max_invoice_date,
        page,
        page_size,
        shop_id,
        order_state_id,
        tag,
        min_pay_date,
        max_pay_date,
        include_positions,
        exclude_tags,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'shopId': 'multi',
            'orderStateId': 'multi',
            'tag': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if min_invoice_date is not None:
            if isinstance(min_invoice_date, datetime):
                _query_params.append(
                    (
                        'minInvoiceDate',
                        min_invoice_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('minInvoiceDate', min_invoice_date))
            
        if max_invoice_date is not None:
            if isinstance(max_invoice_date, datetime):
                _query_params.append(
                    (
                        'maxInvoiceDate',
                        max_invoice_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('maxInvoiceDate', max_invoice_date))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if shop_id is not None:
            
            _query_params.append(('shopId', shop_id))
            
        if order_state_id is not None:
            
            _query_params.append(('orderStateId', order_state_id))
            
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if min_pay_date is not None:
            if isinstance(min_pay_date, datetime):
                _query_params.append(
                    (
                        'minPayDate',
                        min_pay_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('minPayDate', min_pay_date))
            
        if max_pay_date is not None:
            if isinstance(max_pay_date, datetime):
                _query_params.append(
                    (
                        'maxPayDate',
                        max_pay_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('maxPayDate', max_pay_date))
            
        if include_positions is not None:
            
            _query_params.append(('includePositions', include_positions))
            
        if exclude_tags is not None:
            
            _query_params.append(('excludeTags', exclude_tags))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml', 
                    'text/json', 
                    'text/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/orders/invoices',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



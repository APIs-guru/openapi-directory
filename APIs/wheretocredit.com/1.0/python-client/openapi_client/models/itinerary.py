# coding: utf-8

"""
    Where to Credit API

    The Where to Credit API provides mileage earning calculations for frequent flyer programs around the world.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.segment import Segment
from typing import Optional, Set
from typing_extensions import Self

class Itinerary(BaseModel):
    """
    Itinerary
    """ # noqa: E501
    base_fare_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Amount in USD that will be used to calculate revenue program mileage earning.  This amount should generally include carrier imposed surcharges but exclude other taxes. Default is 0.", alias="baseFareUSD")
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for this itinerary that will be passed back to help correlate a result.")
    segments: List[Segment] = Field(description="Every flight transfer or stopover should be considered a separate segment.")
    ticketing_carrier: Optional[StrictStr] = Field(default=None, description="Two-letter IATA carrier code for the ticketing or plating airline.  This is used for revenue programs (i.e. UA, DL, B6).  Leaving this value blank will exclude revenue programs.", alias="ticketingCarrier")
    __properties: ClassVar[List[str]] = ["baseFareUSD", "id", "segments", "ticketingCarrier"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Itinerary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in segments (list)
        _items = []
        if self.segments:
            for _item_segments in self.segments:
                if _item_segments:
                    _items.append(_item_segments.to_dict())
            _dict['segments'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if ticketing_carrier (nullable) is None
        # and model_fields_set contains the field
        if self.ticketing_carrier is None and "ticketing_carrier" in self.model_fields_set:
            _dict['ticketingCarrier'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Itinerary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "baseFareUSD": obj.get("baseFareUSD"),
            "id": obj.get("id"),
            "segments": [Segment.from_dict(_item) for _item in obj["segments"]] if obj.get("segments") is not None else None,
            "ticketingCarrier": obj.get("ticketingCarrier")
        })
        return _obj



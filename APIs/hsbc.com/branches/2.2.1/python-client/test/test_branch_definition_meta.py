# coding: utf-8

"""
    Branch Locator API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.branch_definition_meta import BranchDefinitionMeta

class TestBranchDefinitionMeta(unittest.TestCase):
    """BranchDefinitionMeta unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BranchDefinitionMeta:
        """Test BranchDefinitionMeta
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BranchDefinitionMeta`
        """
        model = BranchDefinitionMeta()
        if include_optional:
            return BranchDefinitionMeta(
                data = [
                    openapi_client.models.branch_definition.BranchDefinition(
                        brand = [
                            openapi_client.models.brand_inner.Brand_inner(
                                branch = [
                                    openapi_client.models.branch_inner.Branch_inner(
                                        accessibility = [
                                            'AutomaticDoors'
                                            ], 
                                        availability = openapi_client.models.availability.Availability(), 
                                        contact_info = [
                                            openapi_client.models.contact_info_inner.ContactInfo_inner(
                                                contact_content = '0', 
                                                contact_description = '0', 
                                                contact_type = 'AlternateEmail', 
                                                other_contact_type = openapi_client.models.other_contact_type.OtherContactType(), )
                                            ], 
                                        customer_segment = [
                                            'Business'
                                            ], 
                                        identification = '0', 
                                        name = '0', 
                                        note = '0', 
                                        other_accessibility = [
                                            openapi_client.models.other_accessibility_inner.OtherAccessibility_inner(
                                                code = '', 
                                                description = '0', 
                                                name = '0', )
                                            ], 
                                        other_customer_segment = [
                                            openapi_client.models.other_customer_segment_inner.OtherCustomerSegment_inner(
                                                code = '', 
                                                description = '0', 
                                                name = '0', )
                                            ], 
                                        other_service_and_facility = [
                                            openapi_client.models.other_service_and_facility_inner.OtherServiceAndFacility_inner(
                                                code = '', 
                                                description = '0', 
                                                name = '0', )
                                            ], 
                                        photo = '', 
                                        postal_address = openapi_client.models.postal_address.PostalAddress(), 
                                        sequence_number = '0', 
                                        service_and_facility = [
                                            'AssistedServiceCounter'
                                            ], 
                                        sort_code = [
                                            '0'
                                            ], 
                                        type = 'Mobile', )
                                    ], 
                                brand_name = '0', )
                            ], )
                    ],
                meta = openapi_client.models.meta_data.Meta data(
                    agreement = 'Use of the APIs and any related data will be subject to the terms of the Open Licence and subject to terms and conditions', 
                    last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    license = 'https://www.openbanking.org.uk/open-licence', 
                    terms_of_use = 'https://www.openbanking.org.uk/terms', 
                    total_results = 56, )
            )
        else:
            return BranchDefinitionMeta(
                data = [
                    openapi_client.models.branch_definition.BranchDefinition(
                        brand = [
                            openapi_client.models.brand_inner.Brand_inner(
                                branch = [
                                    openapi_client.models.branch_inner.Branch_inner(
                                        accessibility = [
                                            'AutomaticDoors'
                                            ], 
                                        availability = openapi_client.models.availability.Availability(), 
                                        contact_info = [
                                            openapi_client.models.contact_info_inner.ContactInfo_inner(
                                                contact_content = '0', 
                                                contact_description = '0', 
                                                contact_type = 'AlternateEmail', 
                                                other_contact_type = openapi_client.models.other_contact_type.OtherContactType(), )
                                            ], 
                                        customer_segment = [
                                            'Business'
                                            ], 
                                        identification = '0', 
                                        name = '0', 
                                        note = '0', 
                                        other_accessibility = [
                                            openapi_client.models.other_accessibility_inner.OtherAccessibility_inner(
                                                code = '', 
                                                description = '0', 
                                                name = '0', )
                                            ], 
                                        other_customer_segment = [
                                            openapi_client.models.other_customer_segment_inner.OtherCustomerSegment_inner(
                                                code = '', 
                                                description = '0', 
                                                name = '0', )
                                            ], 
                                        other_service_and_facility = [
                                            openapi_client.models.other_service_and_facility_inner.OtherServiceAndFacility_inner(
                                                code = '', 
                                                description = '0', 
                                                name = '0', )
                                            ], 
                                        photo = '', 
                                        postal_address = openapi_client.models.postal_address.PostalAddress(), 
                                        sequence_number = '0', 
                                        service_and_facility = [
                                            'AssistedServiceCounter'
                                            ], 
                                        sort_code = [
                                            '0'
                                            ], 
                                        type = 'Mobile', )
                                    ], 
                                brand_name = '0', )
                            ], )
                    ],
                meta = openapi_client.models.meta_data.Meta data(
                    agreement = 'Use of the APIs and any related data will be subject to the terms of the Open Licence and subject to terms and conditions', 
                    last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    license = 'https://www.openbanking.org.uk/open-licence', 
                    terms_of_use = 'https://www.openbanking.org.uk/terms', 
                    total_results = 56, ),
        )
        """

    def testBranchDefinitionMeta(self):
        """Test BranchDefinitionMeta"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

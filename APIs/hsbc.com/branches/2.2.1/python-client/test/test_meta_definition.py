# coding: utf-8

"""
    Branch Locator API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.meta_definition import MetaDefinition

class TestMetaDefinition(unittest.TestCase):
    """MetaDefinition unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MetaDefinition:
        """Test MetaDefinition
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MetaDefinition`
        """
        model = MetaDefinition()
        if include_optional:
            return MetaDefinition(
                agreement = 'Use of the APIs and any related data will be subject to the terms of the Open Licence and subject to terms and conditions',
                last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                license = 'https://www.openbanking.org.uk/open-licence',
                terms_of_use = 'https://www.openbanking.org.uk/terms',
                total_results = 56
            )
        else:
            return MetaDefinition(
                agreement = 'Use of the APIs and any related data will be subject to the terms of the Open Licence and subject to terms and conditions',
                last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                license = 'https://www.openbanking.org.uk/open-licence',
                terms_of_use = 'https://www.openbanking.org.uk/terms',
                total_results = 56,
        )
        """

    def testMetaDefinition(self):
        """Test MetaDefinition"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

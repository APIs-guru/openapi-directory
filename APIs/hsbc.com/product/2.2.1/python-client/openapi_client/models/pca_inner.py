# coding: utf-8

"""
    Product Finder API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.pca_marketing_state_inner import PCAMarketingStateInner
from typing import Optional, Set
from typing_extensions import Self

class PCAInner(BaseModel):
    """
    PCA' means a personal current account. That is an account marketed to individuals rather than businesses, which provides the facility to place funds, withdraw cash, hold deposits and to execute payment transaction to and from third parties but does not include any of the following types of accounts:  (a) an account in which money is held on deposit in a currency other than sterling;  (b) current account mortgage, ie a single account comprising both a personal current account and a mortgage, which is regulated and marketed principally as a mortgage;   (c) savings accounts (including instant access savings accounts);   (d) credit card accounts where funds are usually paid in for the sole purpose of repaying a credit card debt; and  (e) e-money accounts.
    """ # noqa: E501
    identification: Annotated[str, Field(min_length=1, strict=True, max_length=35)] = Field(description="The unique ID that has been internally assigned by the financial institution to each of the current account banking products they market to their retail and/or small to medium enterprise (SME) customers.", alias="Identification")
    name: Annotated[str, Field(min_length=1, strict=True, max_length=350)] = Field(description="The name of the PCA product used for marketing purposes from a customer perspective. I.e. what the customer would recognise.", alias="Name")
    notes: Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]]] = Field(default=None, description="Optional additional notes to supplement the product details", alias="Notes")
    on_sale_indicator: Optional[StrictBool] = Field(default=None, description="Indicates that the published product is OnSale(value 1) or Back Book (value 0) ", alias="OnSaleIndicator")
    pca_marketing_state: Annotated[List[PCAMarketingStateInner], Field(min_length=1)] = Field(description="Describes the type of the known state (regular, promotional )  of the product.", alias="PCAMarketingState")
    segment: Optional[List[StrictStr]] = Field(default=None, description="Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.  Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd  Follow us: Investopedia on Facebook  With respect to PCA products, they are segmented in relation to different markets that they wish to focus on. For example, Basic PCA products target consumers with poor credit history, Reward PCA products target consumers who spend a lot, and Premium products target High Net Worth individuals.", alias="Segment")
    __properties: ClassVar[List[str]] = ["Identification", "Name", "Notes", "OnSaleIndicator", "PCAMarketingState", "Segment"]

    @field_validator('segment')
    def segment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['Basic', 'BenefitAndReward', 'CreditInterest', 'Cashback', 'General', 'Graduate', 'Other', 'Overdraft', 'Packaged', 'Premium', 'Reward', 'Student', 'YoungAdult', 'Youth']):
                raise ValueError("each list item must be one of ('Basic', 'BenefitAndReward', 'CreditInterest', 'Cashback', 'General', 'Graduate', 'Other', 'Overdraft', 'Packaged', 'Premium', 'Reward', 'Student', 'YoungAdult', 'Youth')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PCAInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in pca_marketing_state (list)
        _items = []
        if self.pca_marketing_state:
            for _item_pca_marketing_state in self.pca_marketing_state:
                if _item_pca_marketing_state:
                    _items.append(_item_pca_marketing_state.to_dict())
            _dict['PCAMarketingState'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PCAInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Identification": obj.get("Identification"),
            "Name": obj.get("Name"),
            "Notes": obj.get("Notes"),
            "OnSaleIndicator": obj.get("OnSaleIndicator"),
            "PCAMarketingState": [PCAMarketingStateInner.from_dict(_item) for _item in obj["PCAMarketingState"]] if obj.get("PCAMarketingState") is not None else None,
            "Segment": obj.get("Segment")
        })
        return _obj



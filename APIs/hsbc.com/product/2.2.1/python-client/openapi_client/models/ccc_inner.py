# coding: utf-8

"""
    Product Finder API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from openapi_client.models.ccc_marketing_state_inner import CCCMarketingStateInner
from typing import Optional, Set
from typing_extensions import Self

class CCCInner(BaseModel):
    """
    CCC means a Commercial Credit Card.
    """ # noqa: E501
    ccc_marketing_state: Annotated[List[CCCMarketingStateInner], Field(min_length=1)] = Field(description="The marketing state (promotional or regular) of the CCC Product.", alias="CCCMarketingState")
    identification: Annotated[str, Field(min_length=1, strict=True, max_length=35)] = Field(description="The unique ID that has been internally assigned by the financial institution to each of the Commercial Credit Card products they market to their retail and/or small to medium enterprise (SME) customers.", alias="Identification")
    name: Annotated[str, Field(min_length=1, strict=True, max_length=350)] = Field(description="The name of the CCC product used for marketing purposes from a customer perspective. I.e. what the customer would recognise.", alias="Name")
    segment: Annotated[List[StrictStr], Field(min_length=1)] = Field(description="Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.  Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd  Follow us: Investopedia on Facebook  With respect to CCC products, they are segmented in relation to different markets that they wish to focus on.", alias="Segment")
    __properties: ClassVar[List[str]] = ["CCCMarketingState", "Identification", "Name", "Segment"]

    @field_validator('segment')
    def segment_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['General']):
                raise ValueError("each list item must be one of ('General')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CCCInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ccc_marketing_state (list)
        _items = []
        if self.ccc_marketing_state:
            for _item_ccc_marketing_state in self.ccc_marketing_state:
                if _item_ccc_marketing_state:
                    _items.append(_item_ccc_marketing_state.to_dict())
            _dict['CCCMarketingState'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CCCInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CCCMarketingState": [CCCMarketingStateInner.from_dict(_item) for _item in obj["CCCMarketingState"]] if obj.get("CCCMarketingState") is not None else None,
            "Identification": obj.get("Identification"),
            "Name": obj.get("Name"),
            "Segment": obj.get("Segment")
        })
        return _obj



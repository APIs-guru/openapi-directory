# coding: utf-8

"""
    Product Finder API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PCAMarketingStateInner(BaseModel):
    """
    Describes the type of the known state (regular, promotional )  of the product.
    """ # noqa: E501
    core_product: Optional[Dict[str, Any]] = Field(default=None, description="Core feature of the PCA product which can be associated to a particular Marketing State", alias="CoreProduct")
    credit_interest: Optional[Dict[str, Any]] = Field(default=None, description="Details about the interest that may be payable to the PCA account holders", alias="CreditInterest")
    eligibility: Optional[Dict[str, Any]] = Field(default=None, description="Eligibility details for this product i.e. the criteria that an accountholder has to meet in order to be eligible for the PCA product.", alias="Eligibility")
    features_and_benefits: Optional[Dict[str, Any]] = Field(default=None, description="Feature And Benefits Details", alias="FeaturesAndBenefits")
    first_marketed_date: Optional[date] = Field(default=None, description="Marketing state start date", alias="FirstMarketedDate")
    identification: Annotated[str, Field(min_length=1, strict=True, max_length=35)] = Field(description="Unique and unambiguous identification of a  Eligibility Marketing state.", alias="Identification")
    last_marketed_date: Optional[date] = Field(default=None, description="Marketing state end date", alias="LastMarketedDate")
    marketing_state: StrictStr = Field(description="Describes the marketing state (regular or promotional) for which the eligibility criteria applies", alias="MarketingState")
    notes: Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]]] = Field(default=None, description="Free text for adding details for marketing state", alias="Notes")
    other_fees_charges: Dict[str, Any] = Field(description="Contains details of fees and charges which are not associated with either borrowing or features/benefits", alias="OtherFeesCharges")
    overdraft: Optional[Dict[str, Any]] = Field(default=None, description="Borrowing details", alias="Overdraft")
    predecessor_id: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=35)]] = Field(default=None, description="Identifies the marketing state that precedes this marketing state", alias="PredecessorID")
    state_tenure_length: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The length/duration of a promotional state", alias="StateTenureLength")
    state_tenure_period: Optional[StrictStr] = Field(default=None, description="The unit of period (days, weeks, months etc.) of the promotional length", alias="StateTenurePeriod")
    __properties: ClassVar[List[str]] = ["CoreProduct", "CreditInterest", "Eligibility", "FeaturesAndBenefits", "FirstMarketedDate", "Identification", "LastMarketedDate", "MarketingState", "Notes", "OtherFeesCharges", "Overdraft", "PredecessorID", "StateTenureLength", "StateTenurePeriod"]

    @field_validator('marketing_state')
    def marketing_state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Promotional', 'Regular']):
            raise ValueError("must be one of enum values ('Promotional', 'Regular')")
        return value

    @field_validator('state_tenure_period')
    def state_tenure_period_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Day', 'Half Year', 'Month', 'Quarter', 'Week', 'AcademicTerm', 'Year']):
            raise ValueError("must be one of enum values ('Day', 'Half Year', 'Month', 'Quarter', 'Week', 'AcademicTerm', 'Year')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PCAMarketingStateInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PCAMarketingStateInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CoreProduct": obj.get("CoreProduct"),
            "CreditInterest": obj.get("CreditInterest"),
            "Eligibility": obj.get("Eligibility"),
            "FeaturesAndBenefits": obj.get("FeaturesAndBenefits"),
            "FirstMarketedDate": obj.get("FirstMarketedDate"),
            "Identification": obj.get("Identification"),
            "LastMarketedDate": obj.get("LastMarketedDate"),
            "MarketingState": obj.get("MarketingState"),
            "Notes": obj.get("Notes"),
            "OtherFeesCharges": obj.get("OtherFeesCharges"),
            "Overdraft": obj.get("Overdraft"),
            "PredecessorID": obj.get("PredecessorID"),
            "StateTenureLength": obj.get("StateTenureLength"),
            "StateTenurePeriod": obj.get("StateTenurePeriod")
        })
        return _obj



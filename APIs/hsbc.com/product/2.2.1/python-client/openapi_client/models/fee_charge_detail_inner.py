# coding: utf-8

"""
    Product Finder API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class FeeChargeDetailInner(BaseModel):
    """
    Other fees/charges details
    """ # noqa: E501
    application_frequency: StrictStr = Field(description="How frequently the fee/charge is applied to the account", alias="ApplicationFrequency")
    calculation_frequency: StrictStr = Field(description="How frequently the fee/charge is calculated", alias="CalculationFrequency")
    fee_amount: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Fee Amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)", alias="FeeAmount")
    fee_applicable_range: Optional[Dict[str, Any]] = Field(default=None, description="Range or amounts or rates for which the fee/charge applies", alias="FeeApplicableRange")
    fee_category: StrictStr = Field(description="Categorisation of fees and charges into standard categories.", alias="FeeCategory")
    fee_rate: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Rate charged for Fee/Charge (where it is charged in terms of a rate rather than an amount)", alias="FeeRate")
    fee_rate_type: Optional[StrictStr] = Field(default=None, description="Rate type for Fee/Charge (where it is charged in terms of a rate rather than an amount)", alias="FeeRateType")
    fee_type: StrictStr = Field(description="Fee/Charge Type", alias="FeeType")
    included_in_monthly_charge_indicator: Optional[StrictBool] = Field(default=None, description="Indicates that fee/charge is already included in the monthly charge.", alias="IncludedInMonthlyChargeIndicator")
    negotiable_indicator: Optional[StrictBool] = Field(default=None, description="Fee/charge which is usually negotiable rather than a fixed amount", alias="NegotiableIndicator")
    notes: Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]]] = Field(default=None, description="Optional additional notes to supplement the fee/charge details.", alias="Notes")
    other_application_frequency: Optional[Dict[str, Any]] = Field(default=None, description="Other application frequencies not covered in the standard code list", alias="OtherApplicationFrequency")
    other_calculation_frequency: Optional[Dict[str, Any]] = Field(default=None, description="Other calculation frequency which is not available in standard code set.", alias="OtherCalculationFrequency")
    other_fee_category: Optional[Dict[str, Any]] = Field(default=None, alias="OtherFeeCategory")
    other_fee_rate_type: Optional[Dict[str, Any]] = Field(default=None, description="Other fee rate type which is not available in the standard code set", alias="OtherFeeRateType")
    other_fee_type: Optional[Dict[str, Any]] = Field(default=None, description="Other Fee/charge type which is not available in the standard code set", alias="OtherFeeType")
    __properties: ClassVar[List[str]] = ["ApplicationFrequency", "CalculationFrequency", "FeeAmount", "FeeApplicableRange", "FeeCategory", "FeeRate", "FeeRateType", "FeeType", "IncludedInMonthlyChargeIndicator", "NegotiableIndicator", "Notes", "OtherApplicationFrequency", "OtherCalculationFrequency", "OtherFeeCategory", "OtherFeeRateType", "OtherFeeType"]

    @field_validator('application_frequency')
    def application_frequency_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['OnClosing', 'OnOpening', 'ChargingPeriod', 'Daily', 'PerItem', 'Monthly', 'OnAnniversary', 'Other', 'PerHundredPounds', 'PerHour', 'PerOccurrence', 'PerSheet', 'PerTransaction', 'PerTransactionAmount', 'PerTransactionPercentage', 'Quarterly', 'SixMonthly', 'StatementMonthly', 'Weekly', 'Yearly']):
            raise ValueError("must be one of enum values ('OnClosing', 'OnOpening', 'ChargingPeriod', 'Daily', 'PerItem', 'Monthly', 'OnAnniversary', 'Other', 'PerHundredPounds', 'PerHour', 'PerOccurrence', 'PerSheet', 'PerTransaction', 'PerTransactionAmount', 'PerTransactionPercentage', 'Quarterly', 'SixMonthly', 'StatementMonthly', 'Weekly', 'Yearly')")
        return value

    @field_validator('calculation_frequency')
    def calculation_frequency_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['OnClosing', 'OnOpening', 'ChargingPeriod', 'Daily', 'PerItem', 'Monthly', 'OnAnniversary', 'Other', 'PerHundredPounds', 'PerHour', 'PerOccurrence', 'PerSheet', 'PerTransaction', 'PerTransactionAmount', 'PerTransactionPercentage', 'Quarterly', 'SixMonthly', 'StatementMonthly', 'Weekly', 'Yearly']):
            raise ValueError("must be one of enum values ('OnClosing', 'OnOpening', 'ChargingPeriod', 'Daily', 'PerItem', 'Monthly', 'OnAnniversary', 'Other', 'PerHundredPounds', 'PerHour', 'PerOccurrence', 'PerSheet', 'PerTransaction', 'PerTransactionAmount', 'PerTransactionPercentage', 'Quarterly', 'SixMonthly', 'StatementMonthly', 'Weekly', 'Yearly')")
        return value

    @field_validator('fee_amount')
    def fee_amount_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$", value):
            raise ValueError(r"must validate the regular expression /^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$/")
        return value

    @field_validator('fee_category')
    def fee_category_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Auto', 'ATM', 'BankersDrafts', 'Card', 'Cheque', 'CounterServices', 'DirectDebit', 'Deeds', 'Foreign', 'FX', 'International', 'Investigation', 'Legal', 'Loan', 'NightSafe', 'Online', 'Other', 'PostOffice', 'PaymentScheme', 'Report', 'Safekeeping', 'Servicing', 'Transaction']):
            raise ValueError("must be one of enum values ('Auto', 'ATM', 'BankersDrafts', 'Card', 'Cheque', 'CounterServices', 'DirectDebit', 'Deeds', 'Foreign', 'FX', 'International', 'Investigation', 'Legal', 'Loan', 'NightSafe', 'Online', 'Other', 'PostOffice', 'PaymentScheme', 'Report', 'Safekeeping', 'Servicing', 'Transaction')")
        return value

    @field_validator('fee_rate')
    def fee_rate_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$", value):
            raise ValueError(r"must validate the regular expression /^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$/")
        return value

    @field_validator('fee_rate_type')
    def fee_rate_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Gross', 'Other']):
            raise ValueError("must be one of enum values ('Gross', 'Other')")
        return value

    @field_validator('fee_type')
    def fee_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ATMDeposATMPaidIn', 'ReportCertBalance', 'ATMAbroadConVisaDebit', 'ATMCardnetEnvIn', 'ATMCashGroupATMDebitCard', 'ATMCashNonGroupATMDebitcard', 'ATMConGroupATM', 'ATMAbroad', 'ATMForeignCashDebCard', 'ATMAbroadGoldVisaDebit', 'ATMNonSterlingWithdrawal', 'ATMAbroadVisaDebit', 'ATMWithdrawCash', 'BACSOnLineAncilliary', 'BACSBatch', 'BACSOnLineFile', 'BACSItem', 'BACSBulkBatch', 'BACSOnLineOverlimit', 'BACSOnLinePayment', 'BACSOnLineService', 'BACSBulkInternet', 'BACSTELDirDebSmartCard', 'BACSTELDirDebWebInit', 'BACSTELirDebWebInit', 'BACSTELDirDebOverlimit', 'BACSTELDirDebPayment', 'BACSTELDirDebService', 'BACSTELDirDebAncilliary', 'BACSTELAncilliary', 'BACSTELSmartCard', 'BACSTELFile', 'BACSTELOverlimit', 'BACSTELPayment', 'BACSTELService', 'CHAPSOutBranch', 'CHAPSOutOnlineDepositAcc', 'CHAPSIn', 'CHAPSOutPost', 'CHAPSOut', 'CHAPSOutOnline', 'CHAPSOutManual', 'CardCardReplacement', 'DraftsBankers', 'DraftsCancellation', 'CardGuaranteed', 'DraftsIntlPayableAbroad', 'DraftsIntlStoppedCancelled', 'EuroChqXLess', 'EuroChqXPlus', 'FPSOut', 'FPSOutOwn', 'FPSInBranch', 'LegalArticlesReport', 'LegalSealing', 'LegalBondAndGuarantee', 'LegalCoSearch', 'LegalDepositAssignment', 'LegalGuaranteePrep', 'LegalLifePolicyPrepCo', 'LegalLifePolicyPrepPersonal', 'LegalPriorityPariPassu', 'LegalSubordinationAgreement', 'DirDebDirectDebitAdmin', 'DirDebDirectDebitCancel', 'IntlPayBIBForeignLimit', 'IntlPayCreditTransCust', 'IntlPayCreditTransNonCust', 'IntlPayExpressMoneyMover', 'IntlPayEEAPayUrgent', 'IntlPayIrishPayUrgent', 'IntlPayEEAPay', 'IntlPayFXPaymentIn', 'IntlPayForeignIn1CPlus', 'IntlPayForeignCharge', 'IntlPayForeignInternet', 'IntlPayForeignInSub1C', 'IntlPayPurchaseNonSterling', 'IntlPayPaymentTracing', 'IntlPayStandardMoneyMover', 'IntlPayMT101Transaction', 'IntlPayWorldpayPayment', 'InvPayBankDetailsWrong', 'InvPayForeignBCNR', 'InvPayForeignRecall', 'InvGeneralInq', 'InvOldInstruction', 'InvPayReturnDebitXVLess', 'InvPayReturnDebitXVPlus', 'InvPayStopPayment', 'InvPayStandingOrdUnpaid', 'SafeKeepAccess', 'SafeKeepDeedMedium', 'SafeKeepingEnvelope', 'SafeKeepingInspection', 'SafeKeepingLargeItem', 'SafeKeepMultipleItems', 'SafeKeepingParcel', 'SafeKeepDeedSmall', 'SafeKeepOneItem', 'LoanArrangement', 'NightSafeNightSafeBankOpen', 'NightSafeCreditSub5K', 'NightSafeNightSafe', 'NightSafeNightSafePaidIn', 'POPostOfficeCounterCredit', 'POPostOfficeCashCredit', 'POPostOfficeCashOut', 'POPostOfficeWithdrawal', 'ChqBookTheftLossAllStopped', 'ChqIssuedCurrencyAcc', 'ChqCopy', 'ChqDraft', 'ChqIn', 'ChqSpecialChqClearance', 'ChqOutIssued', 'ChqSpecialChqPresentation', 'ChqCounterCheque', 'ChqChequeswithStatement', 'ChqStopped', 'ChqTrans', 'ChqDraftFX', 'ChqForeignCourier', 'ChqForeignNegTenThou', 'ChqForeignNegHundred', 'ChequeForeignBankDivi', 'ChqForeignNegFiftyThou', 'ChqPensionCheque', 'ChequeForeignOtherDivi', 'ChqForeignNegFiveThou', 'ChqForeignNegMax', 'ChqForeignGBPMMDPlus', 'ChqGiftCheque', 'ChqCounterLodgement', 'ChqCashDropLodgement', 'ChqForeign', 'ChqChequePhotocopy', 'ChqPostOfficeCredit', 'ChqPostOfficeChequeCollected', 'ChqChequeRetrieval', 'ChqReconcilliationPerTrans', 'ChqSpecialPresentationCount', 'ChqSpecialPresentationPTT', 'ChqDraftSterling', 'ChqUnpaidCharge', 'ChqUnpaidTransIn', 'ChqUnpaidTransOut', 'ChqUnpaidCheque', 'ReportAuditLetter', 'ReportFAXAdviceAdditional', 'ReportTelAdviceAdditional', 'ReportCreditHistory', 'ReportCertInterestDuplicate', 'ReportCertInterest', 'ReportCreditHistoryAdditionalInYear', 'ReportForeignStatusEnqElec', 'ReportForeignStatusEnq', 'ReportStatementChqDaily', 'ReportStatementChqFortnightly', 'ReportStatementChqMonthly', 'ReportStatementChqWeekly', 'ReportStatementAndDiviChq', 'ReportReferralItem', 'ReportStatementByATM', 'ReportStatementByBranch', 'ReportStatementCopyRegular', 'ReportStatementDaily', 'ReportStatusEnquiry', 'ReportStatementFrequent', 'ReportStatementMonthly', 'ReportStatementCopy1', 'ReportStatementToBranch', 'ReportSMSTextMiniStatementorAlert', 'ReportStatementFortnightly', 'ReportSMSTextMiniStatementWoM', 'ReportSMSTextAlertBalance', 'ReportSMSTextAlert', 'ReportTaxCert', 'ReportWeeklyStatement', 'SEPABranch', 'SEPACredit', 'SEPADirectDebit', 'SEPAIn', 'SEPAEuro', 'SEPAOut', 'SEPAUnpaid', 'SEPAWinbitsTransaction', 'TransBillPaymentBranch', 'TransBillCollect', 'TransTelephoneBillPayment', 'TransBankPayment', 'TransBillPaymentTelephone', 'TransCorrespondentBankFee', 'TransCreditTransferUKDifferent', 'TransCreditTransferUKSame', 'TransCredit', 'TransCreditTransfer', 'TransBranchCredit', 'TransDebit', 'TransDebCardDeb', 'TransUKDirDeb', 'TransManualDeb', 'TitleDeeds', 'TransBuyForeignWithGBP', 'TransGoodValueReq', 'TransSWIFTOutUKForeign', 'TransInconpleteInstruction', 'TransManualEntries', 'TransManualTrans', 'TransNonSterling', 'Other', 'TransPOSSaleForeign', 'TransPriPaymentPost', 'TransPOSSaleUK', 'TransReconciliationPerTrans', 'TransStandingOrdAdmin', 'TransStandingOrd', 'TransStandingOrdManPay', 'TransTelBusiPriPaymentForeignToUKAcc', 'TransTeleItem', 'TransTelBusiPriPaymentToGrpAcc', 'TransTransferExGroup', 'TransTelBusiPriPaymentToNonGrpAcc', 'TransSWIFTOutNonEEASterling', 'AutoAutoCredit', 'AutoAutomatedEntries', 'AutoAutoCreditPhoneInet', 'AutoAutomatedTrans', 'AutoDebitCardCommercial', 'AutoFPSAutoCredit', 'VisaTravellersChqorCurrency', 'OnlineInternetBillPayment', 'OnlineBusinessOnlineEuroPayment', 'OnlineBusinessOnlineUrgentEuroPayment', 'OnlineBusinessOnlineForeignPayment', 'OnlineInterbankTransfer', 'OnlineInterbankPerTransfer', 'OnlineInterbranchTransfer', 'OnlineInterbranchPerTransfer', 'OnlineSubscriptionMonthly', 'OnlineBankingPayment', 'OnlineReplacementCardReader', 'OnlinePaymentinGBPtoUK', 'OnlineUrgentPayment', 'OnlinePaymentinUSDtoUS', 'OnlineBulkDirectDebSterling', 'ForeignChqSent', 'ForeignChqSelf', 'ForeignChqEncashment', 'ForeignFXInwardsCust', 'ForeignFXTransfersROI', 'ForeignFXForwardTrans', 'ForeignExMaintenance', 'ForeignFXInwardsNonCust', 'ForeignFXOutwards', 'ForeignPurchase', 'ForeignStatusRep', 'ForeignChqDraft', 'ForeignChqCLess', 'ForeignChqMLess', 'ForeignChqOther', 'ForeignChqMPlus', 'ForeignChqCCC', 'ServiceCAccountFee', 'ServiceCAccountFeeMonthly', 'ServiceCAccountFeeQuarterly', 'ServiceCFixedTariff', 'ServiceCBusiDepAccBreakage', 'ServiceCMonitorDaily', 'ServiceCMinimumMonthlyFee', 'ServiceCMonitorMonthly', 'ServiceCMonitorWeekly', 'ServiceCMT940AccountFirst', 'ServiceCMT940AccountSubsequent', 'ServiceCOther', 'CounterCoinHandling', 'CounterCashIn', 'CounterCashInNotUs', 'CounterCashOut', 'CounterCashX', 'CounterForeignNoteHandling', 'CounterCashFeeRate', 'CounterForeignCashOutTx', 'CounterCounterLodgement', 'CounterCashDropLodgement', 'CounterNotesLodged', 'CounterNotesOut', 'CounterCashInOwn', 'CounterCashFeePercent']):
            raise ValueError("must be one of enum values ('ATMDeposATMPaidIn', 'ReportCertBalance', 'ATMAbroadConVisaDebit', 'ATMCardnetEnvIn', 'ATMCashGroupATMDebitCard', 'ATMCashNonGroupATMDebitcard', 'ATMConGroupATM', 'ATMAbroad', 'ATMForeignCashDebCard', 'ATMAbroadGoldVisaDebit', 'ATMNonSterlingWithdrawal', 'ATMAbroadVisaDebit', 'ATMWithdrawCash', 'BACSOnLineAncilliary', 'BACSBatch', 'BACSOnLineFile', 'BACSItem', 'BACSBulkBatch', 'BACSOnLineOverlimit', 'BACSOnLinePayment', 'BACSOnLineService', 'BACSBulkInternet', 'BACSTELDirDebSmartCard', 'BACSTELDirDebWebInit', 'BACSTELirDebWebInit', 'BACSTELDirDebOverlimit', 'BACSTELDirDebPayment', 'BACSTELDirDebService', 'BACSTELDirDebAncilliary', 'BACSTELAncilliary', 'BACSTELSmartCard', 'BACSTELFile', 'BACSTELOverlimit', 'BACSTELPayment', 'BACSTELService', 'CHAPSOutBranch', 'CHAPSOutOnlineDepositAcc', 'CHAPSIn', 'CHAPSOutPost', 'CHAPSOut', 'CHAPSOutOnline', 'CHAPSOutManual', 'CardCardReplacement', 'DraftsBankers', 'DraftsCancellation', 'CardGuaranteed', 'DraftsIntlPayableAbroad', 'DraftsIntlStoppedCancelled', 'EuroChqXLess', 'EuroChqXPlus', 'FPSOut', 'FPSOutOwn', 'FPSInBranch', 'LegalArticlesReport', 'LegalSealing', 'LegalBondAndGuarantee', 'LegalCoSearch', 'LegalDepositAssignment', 'LegalGuaranteePrep', 'LegalLifePolicyPrepCo', 'LegalLifePolicyPrepPersonal', 'LegalPriorityPariPassu', 'LegalSubordinationAgreement', 'DirDebDirectDebitAdmin', 'DirDebDirectDebitCancel', 'IntlPayBIBForeignLimit', 'IntlPayCreditTransCust', 'IntlPayCreditTransNonCust', 'IntlPayExpressMoneyMover', 'IntlPayEEAPayUrgent', 'IntlPayIrishPayUrgent', 'IntlPayEEAPay', 'IntlPayFXPaymentIn', 'IntlPayForeignIn1CPlus', 'IntlPayForeignCharge', 'IntlPayForeignInternet', 'IntlPayForeignInSub1C', 'IntlPayPurchaseNonSterling', 'IntlPayPaymentTracing', 'IntlPayStandardMoneyMover', 'IntlPayMT101Transaction', 'IntlPayWorldpayPayment', 'InvPayBankDetailsWrong', 'InvPayForeignBCNR', 'InvPayForeignRecall', 'InvGeneralInq', 'InvOldInstruction', 'InvPayReturnDebitXVLess', 'InvPayReturnDebitXVPlus', 'InvPayStopPayment', 'InvPayStandingOrdUnpaid', 'SafeKeepAccess', 'SafeKeepDeedMedium', 'SafeKeepingEnvelope', 'SafeKeepingInspection', 'SafeKeepingLargeItem', 'SafeKeepMultipleItems', 'SafeKeepingParcel', 'SafeKeepDeedSmall', 'SafeKeepOneItem', 'LoanArrangement', 'NightSafeNightSafeBankOpen', 'NightSafeCreditSub5K', 'NightSafeNightSafe', 'NightSafeNightSafePaidIn', 'POPostOfficeCounterCredit', 'POPostOfficeCashCredit', 'POPostOfficeCashOut', 'POPostOfficeWithdrawal', 'ChqBookTheftLossAllStopped', 'ChqIssuedCurrencyAcc', 'ChqCopy', 'ChqDraft', 'ChqIn', 'ChqSpecialChqClearance', 'ChqOutIssued', 'ChqSpecialChqPresentation', 'ChqCounterCheque', 'ChqChequeswithStatement', 'ChqStopped', 'ChqTrans', 'ChqDraftFX', 'ChqForeignCourier', 'ChqForeignNegTenThou', 'ChqForeignNegHundred', 'ChequeForeignBankDivi', 'ChqForeignNegFiftyThou', 'ChqPensionCheque', 'ChequeForeignOtherDivi', 'ChqForeignNegFiveThou', 'ChqForeignNegMax', 'ChqForeignGBPMMDPlus', 'ChqGiftCheque', 'ChqCounterLodgement', 'ChqCashDropLodgement', 'ChqForeign', 'ChqChequePhotocopy', 'ChqPostOfficeCredit', 'ChqPostOfficeChequeCollected', 'ChqChequeRetrieval', 'ChqReconcilliationPerTrans', 'ChqSpecialPresentationCount', 'ChqSpecialPresentationPTT', 'ChqDraftSterling', 'ChqUnpaidCharge', 'ChqUnpaidTransIn', 'ChqUnpaidTransOut', 'ChqUnpaidCheque', 'ReportAuditLetter', 'ReportFAXAdviceAdditional', 'ReportTelAdviceAdditional', 'ReportCreditHistory', 'ReportCertInterestDuplicate', 'ReportCertInterest', 'ReportCreditHistoryAdditionalInYear', 'ReportForeignStatusEnqElec', 'ReportForeignStatusEnq', 'ReportStatementChqDaily', 'ReportStatementChqFortnightly', 'ReportStatementChqMonthly', 'ReportStatementChqWeekly', 'ReportStatementAndDiviChq', 'ReportReferralItem', 'ReportStatementByATM', 'ReportStatementByBranch', 'ReportStatementCopyRegular', 'ReportStatementDaily', 'ReportStatusEnquiry', 'ReportStatementFrequent', 'ReportStatementMonthly', 'ReportStatementCopy1', 'ReportStatementToBranch', 'ReportSMSTextMiniStatementorAlert', 'ReportStatementFortnightly', 'ReportSMSTextMiniStatementWoM', 'ReportSMSTextAlertBalance', 'ReportSMSTextAlert', 'ReportTaxCert', 'ReportWeeklyStatement', 'SEPABranch', 'SEPACredit', 'SEPADirectDebit', 'SEPAIn', 'SEPAEuro', 'SEPAOut', 'SEPAUnpaid', 'SEPAWinbitsTransaction', 'TransBillPaymentBranch', 'TransBillCollect', 'TransTelephoneBillPayment', 'TransBankPayment', 'TransBillPaymentTelephone', 'TransCorrespondentBankFee', 'TransCreditTransferUKDifferent', 'TransCreditTransferUKSame', 'TransCredit', 'TransCreditTransfer', 'TransBranchCredit', 'TransDebit', 'TransDebCardDeb', 'TransUKDirDeb', 'TransManualDeb', 'TitleDeeds', 'TransBuyForeignWithGBP', 'TransGoodValueReq', 'TransSWIFTOutUKForeign', 'TransInconpleteInstruction', 'TransManualEntries', 'TransManualTrans', 'TransNonSterling', 'Other', 'TransPOSSaleForeign', 'TransPriPaymentPost', 'TransPOSSaleUK', 'TransReconciliationPerTrans', 'TransStandingOrdAdmin', 'TransStandingOrd', 'TransStandingOrdManPay', 'TransTelBusiPriPaymentForeignToUKAcc', 'TransTeleItem', 'TransTelBusiPriPaymentToGrpAcc', 'TransTransferExGroup', 'TransTelBusiPriPaymentToNonGrpAcc', 'TransSWIFTOutNonEEASterling', 'AutoAutoCredit', 'AutoAutomatedEntries', 'AutoAutoCreditPhoneInet', 'AutoAutomatedTrans', 'AutoDebitCardCommercial', 'AutoFPSAutoCredit', 'VisaTravellersChqorCurrency', 'OnlineInternetBillPayment', 'OnlineBusinessOnlineEuroPayment', 'OnlineBusinessOnlineUrgentEuroPayment', 'OnlineBusinessOnlineForeignPayment', 'OnlineInterbankTransfer', 'OnlineInterbankPerTransfer', 'OnlineInterbranchTransfer', 'OnlineInterbranchPerTransfer', 'OnlineSubscriptionMonthly', 'OnlineBankingPayment', 'OnlineReplacementCardReader', 'OnlinePaymentinGBPtoUK', 'OnlineUrgentPayment', 'OnlinePaymentinUSDtoUS', 'OnlineBulkDirectDebSterling', 'ForeignChqSent', 'ForeignChqSelf', 'ForeignChqEncashment', 'ForeignFXInwardsCust', 'ForeignFXTransfersROI', 'ForeignFXForwardTrans', 'ForeignExMaintenance', 'ForeignFXInwardsNonCust', 'ForeignFXOutwards', 'ForeignPurchase', 'ForeignStatusRep', 'ForeignChqDraft', 'ForeignChqCLess', 'ForeignChqMLess', 'ForeignChqOther', 'ForeignChqMPlus', 'ForeignChqCCC', 'ServiceCAccountFee', 'ServiceCAccountFeeMonthly', 'ServiceCAccountFeeQuarterly', 'ServiceCFixedTariff', 'ServiceCBusiDepAccBreakage', 'ServiceCMonitorDaily', 'ServiceCMinimumMonthlyFee', 'ServiceCMonitorMonthly', 'ServiceCMonitorWeekly', 'ServiceCMT940AccountFirst', 'ServiceCMT940AccountSubsequent', 'ServiceCOther', 'CounterCoinHandling', 'CounterCashIn', 'CounterCashInNotUs', 'CounterCashOut', 'CounterCashX', 'CounterForeignNoteHandling', 'CounterCashFeeRate', 'CounterForeignCashOutTx', 'CounterCounterLodgement', 'CounterCashDropLodgement', 'CounterNotesLodged', 'CounterNotesOut', 'CounterCashInOwn', 'CounterCashFeePercent')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FeeChargeDetailInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FeeChargeDetailInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApplicationFrequency": obj.get("ApplicationFrequency"),
            "CalculationFrequency": obj.get("CalculationFrequency"),
            "FeeAmount": obj.get("FeeAmount"),
            "FeeApplicableRange": obj.get("FeeApplicableRange"),
            "FeeCategory": obj.get("FeeCategory"),
            "FeeRate": obj.get("FeeRate"),
            "FeeRateType": obj.get("FeeRateType"),
            "FeeType": obj.get("FeeType"),
            "IncludedInMonthlyChargeIndicator": obj.get("IncludedInMonthlyChargeIndicator"),
            "NegotiableIndicator": obj.get("NegotiableIndicator"),
            "Notes": obj.get("Notes"),
            "OtherApplicationFrequency": obj.get("OtherApplicationFrequency"),
            "OtherCalculationFrequency": obj.get("OtherCalculationFrequency"),
            "OtherFeeCategory": obj.get("OtherFeeCategory"),
            "OtherFeeRateType": obj.get("OtherFeeRateType"),
            "OtherFeeType": obj.get("OtherFeeType")
        })
        return _obj



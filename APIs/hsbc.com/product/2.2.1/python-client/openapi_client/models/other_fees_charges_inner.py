# coding: utf-8

"""
    Product Finder API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.fee_charge_cap_inner import FeeChargeCapInner
from openapi_client.models.fee_charge_detail_inner import FeeChargeDetailInner
from typing import Optional, Set
from typing_extensions import Self

class OtherFeesChargesInner(BaseModel):
    """
    Contains details of fees and charges which are not associated with either Overdraft or features/benefits
    """ # noqa: E501
    fee_charge_cap: Optional[List[FeeChargeCapInner]] = Field(default=None, description="Details about any caps (maximum charges) that apply to a particular fee/charge", alias="FeeChargeCap")
    fee_charge_detail: Annotated[List[FeeChargeDetailInner], Field(min_length=1)] = Field(description="Other fees/charges details", alias="FeeChargeDetail")
    other_tariff_type: Optional[Dict[str, Any]] = Field(default=None, description="Other tariff type which is not in the standard list.", alias="OtherTariffType")
    tariff_name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=350)]] = Field(default=None, description="Name of the tariff", alias="TariffName")
    tariff_type: Optional[StrictStr] = Field(default=None, description="TariffType which defines the fee and charges.", alias="TariffType")
    __properties: ClassVar[List[str]] = ["FeeChargeCap", "FeeChargeDetail", "OtherTariffType", "TariffName", "TariffType"]

    @field_validator('tariff_type')
    def tariff_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Electronic', 'Mixed', 'Other']):
            raise ValueError("must be one of enum values ('Electronic', 'Mixed', 'Other')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OtherFeesChargesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in fee_charge_cap (list)
        _items = []
        if self.fee_charge_cap:
            for _item_fee_charge_cap in self.fee_charge_cap:
                if _item_fee_charge_cap:
                    _items.append(_item_fee_charge_cap.to_dict())
            _dict['FeeChargeCap'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fee_charge_detail (list)
        _items = []
        if self.fee_charge_detail:
            for _item_fee_charge_detail in self.fee_charge_detail:
                if _item_fee_charge_detail:
                    _items.append(_item_fee_charge_detail.to_dict())
            _dict['FeeChargeDetail'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OtherFeesChargesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "FeeChargeCap": [FeeChargeCapInner.from_dict(_item) for _item in obj["FeeChargeCap"]] if obj.get("FeeChargeCap") is not None else None,
            "FeeChargeDetail": [FeeChargeDetailInner.from_dict(_item) for _item in obj["FeeChargeDetail"]] if obj.get("FeeChargeDetail") is not None else None,
            "OtherTariffType": obj.get("OtherTariffType"),
            "TariffName": obj.get("TariffName"),
            "TariffType": obj.get("TariffType")
        })
        return _obj



# coding: utf-8

"""
    Product Finder API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.sme_lending_definition_meta import SMELendingDefinitionMeta

class TestSMELendingDefinitionMeta(unittest.TestCase):
    """SMELendingDefinitionMeta unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SMELendingDefinitionMeta:
        """Test SMELendingDefinitionMeta
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SMELendingDefinitionMeta`
        """
        model = SMELendingDefinitionMeta()
        if include_optional:
            return SMELendingDefinitionMeta(
                data = [
                    openapi_client.models.sme_lending_definition.SMELendingDefinition(
                        brand = [
                            openapi_client.models.brand_inner_3.Brand_inner_3(
                                brand_name = '0', 
                                sme_loan = [
                                    openapi_client.models.sme_loan_inner.SMELoan_inner(
                                        identification = '0', 
                                        name = '0', 
                                        other_segment = openapi_client.models.other_segment.OtherSegment(), 
                                        sme_loan_marketing_state = [
                                            openapi_client.models.sme_loan_marketing_state_inner.SMELoanMarketingState_inner(
                                                core_product = openapi_client.models.core_product.CoreProduct(), 
                                                eligibility = openapi_client.models.eligibility.Eligibility(), 
                                                features_and_benefits = openapi_client.models.features_and_benefits.FeaturesAndBenefits(), 
                                                first_marketed_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                                identification = '0', 
                                                last_marketed_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                                loan_interest = openapi_client.models.loan_interest.LoanInterest(), 
                                                marketing_state = 'Promotional', 
                                                notes = [
                                                    '0'
                                                    ], 
                                                other_fees_charges = openapi_client.models.other_fees_charges.OtherFeesCharges(), 
                                                predecessor_id = '0', 
                                                repayment = [
                                                    openapi_client.models.repayment_inner.Repayment_inner(
                                                        amount_type = 'BalanceToDate', 
                                                        other_amount_type = openapi_client.models.other_amount_type.OtherAmountType(), 
                                                        other_repayment_frequency = openapi_client.models.other_repayment_frequency.OtherRepaymentFrequency(), 
                                                        other_repayment_type = openapi_client.models.other_repayment_type.OtherRepaymentType(), 
                                                        repayment_fee_charges = openapi_client.models.repayment_fee_charges.RepaymentFeeCharges(), 
                                                        repayment_frequency = 'Daily', 
                                                        repayment_holiday = [
                                                            openapi_client.models.repayment_holiday_inner.RepaymentHoliday_inner(
                                                                max_holiday_length = 1.337, 
                                                                max_holiday_period = 'Day', )
                                                            ], 
                                                        repayment_type = 'Balloon', )
                                                    ], 
                                                state_tenure_length = 1.337, 
                                                state_tenure_period = 'Day', )
                                            ], 
                                        segment = [
                                            'AgricultureSector'
                                            ], )
                                    ], )
                            ], )
                    ],
                meta = openapi_client.models.meta_data.Meta data(
                    agreement = 'Use of the APIs and any related data will be subject to the terms of the Open Licence and subject to terms and conditions', 
                    last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    license = 'https://www.openbanking.org.uk/open-licence', 
                    terms_of_use = 'https://www.openbanking.org.uk/terms', 
                    total_results = 56, )
            )
        else:
            return SMELendingDefinitionMeta(
                data = [
                    openapi_client.models.sme_lending_definition.SMELendingDefinition(
                        brand = [
                            openapi_client.models.brand_inner_3.Brand_inner_3(
                                brand_name = '0', 
                                sme_loan = [
                                    openapi_client.models.sme_loan_inner.SMELoan_inner(
                                        identification = '0', 
                                        name = '0', 
                                        other_segment = openapi_client.models.other_segment.OtherSegment(), 
                                        sme_loan_marketing_state = [
                                            openapi_client.models.sme_loan_marketing_state_inner.SMELoanMarketingState_inner(
                                                core_product = openapi_client.models.core_product.CoreProduct(), 
                                                eligibility = openapi_client.models.eligibility.Eligibility(), 
                                                features_and_benefits = openapi_client.models.features_and_benefits.FeaturesAndBenefits(), 
                                                first_marketed_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                                identification = '0', 
                                                last_marketed_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                                loan_interest = openapi_client.models.loan_interest.LoanInterest(), 
                                                marketing_state = 'Promotional', 
                                                notes = [
                                                    '0'
                                                    ], 
                                                other_fees_charges = openapi_client.models.other_fees_charges.OtherFeesCharges(), 
                                                predecessor_id = '0', 
                                                repayment = [
                                                    openapi_client.models.repayment_inner.Repayment_inner(
                                                        amount_type = 'BalanceToDate', 
                                                        other_amount_type = openapi_client.models.other_amount_type.OtherAmountType(), 
                                                        other_repayment_frequency = openapi_client.models.other_repayment_frequency.OtherRepaymentFrequency(), 
                                                        other_repayment_type = openapi_client.models.other_repayment_type.OtherRepaymentType(), 
                                                        repayment_fee_charges = openapi_client.models.repayment_fee_charges.RepaymentFeeCharges(), 
                                                        repayment_frequency = 'Daily', 
                                                        repayment_holiday = [
                                                            openapi_client.models.repayment_holiday_inner.RepaymentHoliday_inner(
                                                                max_holiday_length = 1.337, 
                                                                max_holiday_period = 'Day', )
                                                            ], 
                                                        repayment_type = 'Balloon', )
                                                    ], 
                                                state_tenure_length = 1.337, 
                                                state_tenure_period = 'Day', )
                                            ], 
                                        segment = [
                                            'AgricultureSector'
                                            ], )
                                    ], )
                            ], )
                    ],
                meta = openapi_client.models.meta_data.Meta data(
                    agreement = 'Use of the APIs and any related data will be subject to the terms of the Open Licence and subject to terms and conditions', 
                    last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    license = 'https://www.openbanking.org.uk/open-licence', 
                    terms_of_use = 'https://www.openbanking.org.uk/terms', 
                    total_results = 56, ),
        )
        """

    def testSMELendingDefinitionMeta(self):
        """Test SMELendingDefinitionMeta"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Product Finder API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.bca_definition import BCADefinition

class TestBCADefinition(unittest.TestCase):
    """BCADefinition unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BCADefinition:
        """Test BCADefinition
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BCADefinition`
        """
        model = BCADefinition()
        if include_optional:
            return BCADefinition(
                brand = [
                    openapi_client.models.brand_inner.Brand_inner(
                        bca = [
                            openapi_client.models.bca_inner.BCA_inner(
                                bca_marketing_state = [
                                    openapi_client.models.bca_marketing_state_inner.BCAMarketingState_inner(
                                        core_product = openapi_client.models.core_product.CoreProduct(), 
                                        credit_interest = openapi_client.models.credit_interest.CreditInterest(), 
                                        eligibility = openapi_client.models.eligibility.Eligibility(), 
                                        features_and_benefits = openapi_client.models.features_and_benefits.FeaturesAndBenefits(), 
                                        first_marketed_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                        identification = '0', 
                                        last_marketed_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                        marketing_state = 'Promotional', 
                                        notes = [
                                            '0'
                                            ], 
                                        other_fees_charges = [
                                            openapi_client.models.other_fees_charges_inner.OtherFeesCharges_inner(
                                                fee_charge_cap = [
                                                    openapi_client.models.fee_charge_cap_inner.FeeChargeCap_inner(
                                                        capping_period = 'Day', 
                                                        fee_cap_amount = '-80728880015.0217', 
                                                        fee_cap_occurrence = 1.337, 
                                                        fee_type = [
                                                            'ATMDeposATMPaidIn'
                                                            ], 
                                                        min_max_type = 'Minimum', 
                                                        other_fee_type = [
                                                            openapi_client.models.other_fee_type_inner.OtherFeeType_inner(
                                                                code = '', 
                                                                description = '0', 
                                                                name = '0', )
                                                            ], )
                                                    ], 
                                                fee_charge_detail = [
                                                    openapi_client.models.fee_charge_detail_inner.FeeChargeDetail_inner(
                                                        application_frequency = 'OnClosing', 
                                                        calculation_frequency = 'OnClosing', 
                                                        fee_amount = '-80728880015.0217', 
                                                        fee_applicable_range = openapi_client.models.fee_applicable_range.FeeApplicableRange(), 
                                                        fee_category = 'Auto', 
                                                        fee_rate = '-807', 
                                                        fee_rate_type = 'Gross', 
                                                        fee_type = 'ATMDeposATMPaidIn', 
                                                        included_in_monthly_charge_indicator = True, 
                                                        negotiable_indicator = True, 
                                                        other_application_frequency = openapi_client.models.other_application_frequency.OtherApplicationFrequency(), 
                                                        other_calculation_frequency = openapi_client.models.other_calculation_frequency.OtherCalculationFrequency(), 
                                                        other_fee_category = openapi_client.models.other_fee_category.OtherFeeCategory(), 
                                                        other_fee_rate_type = openapi_client.models.other_fee_rate_type.OtherFeeRateType(), )
                                                    ], 
                                                other_tariff_type = openapi_client.models.other_tariff_type.OtherTariffType(), 
                                                tariff_name = '0', 
                                                tariff_type = 'Electronic', )
                                            ], 
                                        overdraft = openapi_client.models.overdraft.Overdraft(), 
                                        predecessor_id = '0', 
                                        state_tenure_length = 1.337, 
                                        state_tenure_period = 'Day', )
                                    ], 
                                fee_free_length = 1.337, 
                                fee_free_length_period = 'Day', 
                                identification = '0', 
                                name = '0', 
                                notes = [
                                    '0'
                                    ], 
                                on_sale_indicator = True, 
                                segment = [
                                    'ClientAccount'
                                    ], )
                            ], 
                        brand_name = '0', )
                    ]
            )
        else:
            return BCADefinition(
                brand = [
                    openapi_client.models.brand_inner.Brand_inner(
                        bca = [
                            openapi_client.models.bca_inner.BCA_inner(
                                bca_marketing_state = [
                                    openapi_client.models.bca_marketing_state_inner.BCAMarketingState_inner(
                                        core_product = openapi_client.models.core_product.CoreProduct(), 
                                        credit_interest = openapi_client.models.credit_interest.CreditInterest(), 
                                        eligibility = openapi_client.models.eligibility.Eligibility(), 
                                        features_and_benefits = openapi_client.models.features_and_benefits.FeaturesAndBenefits(), 
                                        first_marketed_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                        identification = '0', 
                                        last_marketed_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                        marketing_state = 'Promotional', 
                                        notes = [
                                            '0'
                                            ], 
                                        other_fees_charges = [
                                            openapi_client.models.other_fees_charges_inner.OtherFeesCharges_inner(
                                                fee_charge_cap = [
                                                    openapi_client.models.fee_charge_cap_inner.FeeChargeCap_inner(
                                                        capping_period = 'Day', 
                                                        fee_cap_amount = '-80728880015.0217', 
                                                        fee_cap_occurrence = 1.337, 
                                                        fee_type = [
                                                            'ATMDeposATMPaidIn'
                                                            ], 
                                                        min_max_type = 'Minimum', 
                                                        other_fee_type = [
                                                            openapi_client.models.other_fee_type_inner.OtherFeeType_inner(
                                                                code = '', 
                                                                description = '0', 
                                                                name = '0', )
                                                            ], )
                                                    ], 
                                                fee_charge_detail = [
                                                    openapi_client.models.fee_charge_detail_inner.FeeChargeDetail_inner(
                                                        application_frequency = 'OnClosing', 
                                                        calculation_frequency = 'OnClosing', 
                                                        fee_amount = '-80728880015.0217', 
                                                        fee_applicable_range = openapi_client.models.fee_applicable_range.FeeApplicableRange(), 
                                                        fee_category = 'Auto', 
                                                        fee_rate = '-807', 
                                                        fee_rate_type = 'Gross', 
                                                        fee_type = 'ATMDeposATMPaidIn', 
                                                        included_in_monthly_charge_indicator = True, 
                                                        negotiable_indicator = True, 
                                                        other_application_frequency = openapi_client.models.other_application_frequency.OtherApplicationFrequency(), 
                                                        other_calculation_frequency = openapi_client.models.other_calculation_frequency.OtherCalculationFrequency(), 
                                                        other_fee_category = openapi_client.models.other_fee_category.OtherFeeCategory(), 
                                                        other_fee_rate_type = openapi_client.models.other_fee_rate_type.OtherFeeRateType(), )
                                                    ], 
                                                other_tariff_type = openapi_client.models.other_tariff_type.OtherTariffType(), 
                                                tariff_name = '0', 
                                                tariff_type = 'Electronic', )
                                            ], 
                                        overdraft = openapi_client.models.overdraft.Overdraft(), 
                                        predecessor_id = '0', 
                                        state_tenure_length = 1.337, 
                                        state_tenure_period = 'Day', )
                                    ], 
                                fee_free_length = 1.337, 
                                fee_free_length_period = 'Day', 
                                identification = '0', 
                                name = '0', 
                                notes = [
                                    '0'
                                    ], 
                                on_sale_indicator = True, 
                                segment = [
                                    'ClientAccount'
                                    ], )
                            ], 
                        brand_name = '0', )
                    ],
        )
        """

    def testBCADefinition(self):
        """Test BCADefinition"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    ATM Locator API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class MetaDefinition(BaseModel):
    """
    MetaDefinition
    """ # noqa: E501
    agreement: StrictStr = Field(alias="Agreement")
    last_updated: datetime = Field(alias="LastUpdated")
    license: StrictStr = Field(description="Open Banking License", alias="License")
    terms_of_use: StrictStr = Field(description="Open Banking Terms of Use", alias="TermsOfUse")
    total_results: StrictInt = Field(alias="TotalResults")
    __properties: ClassVar[List[str]] = ["Agreement", "LastUpdated", "License", "TermsOfUse", "TotalResults"]

    @field_validator('agreement')
    def agreement_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Use of the APIs and any related data will be subject to the terms of the Open Licence and subject to terms and conditions']):
            raise ValueError("must be one of enum values ('Use of the APIs and any related data will be subject to the terms of the Open Licence and subject to terms and conditions')")
        return value

    @field_validator('license')
    def license_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['https://www.openbanking.org.uk/open-licence']):
            raise ValueError("must be one of enum values ('https://www.openbanking.org.uk/open-licence')")
        return value

    @field_validator('terms_of_use')
    def terms_of_use_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['https://www.openbanking.org.uk/terms']):
            raise ValueError("must be one of enum values ('https://www.openbanking.org.uk/terms')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetaDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetaDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Agreement": obj.get("Agreement"),
            "LastUpdated": obj.get("LastUpdated"),
            "License": obj.get("License"),
            "TermsOfUse": obj.get("TermsOfUse"),
            "TotalResults": obj.get("TotalResults")
        })
        return _obj



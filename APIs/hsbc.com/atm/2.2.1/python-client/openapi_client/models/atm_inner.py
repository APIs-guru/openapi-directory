# coding: utf-8

"""
    ATM Locator API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.other_accessibility_inner import OtherAccessibilityInner
from openapi_client.models.other_atm_services_inner import OtherATMServicesInner
from typing import Optional, Set
from typing_extensions import Self

class ATMInner(BaseModel):
    """
    ATM information.
    """ # noqa: E501
    atm_services: Optional[List[StrictStr]] = Field(default=None, description="Describes the type of transaction available for a customer on an ATM.", alias="ATMServices")
    access24_hours_indicator: Optional[StrictBool] = Field(default=None, description="Indicates that the ATM is available for use by customers 24 hours per day", alias="Access24HoursIndicator")
    accessibility: Optional[List[StrictStr]] = Field(default=None, description="Indicates Types of Accessibility", alias="Accessibility")
    branch: Optional[Dict[str, Any]] = Field(default=None, description="Information that locates and identifies a specific branch of a financial institution.", alias="Branch")
    identification: Annotated[str, Field(min_length=1, strict=True, max_length=35)] = Field(description="ATM terminal device identification for the acquirer and the issuer.", alias="Identification")
    location: Dict[str, Any] = Field(description="Location of the ATM.", alias="Location")
    minimum_possible_amount: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Minimum amount allowed for a transaction in the service.", alias="MinimumPossibleAmount")
    note: Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]]] = Field(default=None, description="Summary description of the ATM.", alias="Note")
    other_atm_services: Optional[List[OtherATMServicesInner]] = Field(default=None, description="Enter a new code , name and description for any other ATM Service", alias="OtherATMServices")
    other_accessibility: Optional[List[OtherAccessibilityInner]] = Field(default=None, description="Enter a new code , name and description for any other ATM accessibility options", alias="OtherAccessibility")
    supported_currencies: Annotated[List[Annotated[str, Field(strict=True)]], Field(min_length=1)] = Field(description="All ISO 4217 defined currency  supported by the ATM.", alias="SupportedCurrencies")
    supported_languages: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="Identification of the language name according to the ISO 639-1 codes. The type is validated by the list of values coded with two alphabetic characters, defined in the standard.", alias="SupportedLanguages")
    __properties: ClassVar[List[str]] = ["ATMServices", "Access24HoursIndicator", "Accessibility", "Branch", "Identification", "Location", "MinimumPossibleAmount", "Note", "OtherATMServices", "OtherAccessibility", "SupportedCurrencies", "SupportedLanguages"]

    @field_validator('atm_services')
    def atm_services_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['Balance', 'BillPayments', 'CashDeposits', 'CharityDonation', 'ChequeDeposits', 'CashWithdrawal', 'EnvelopeDeposit', 'FastCash', 'MobileBankingRegistration', 'MobilePaymentRegistration', 'MobilePhoneTopUp', 'OrderStatement', 'Other', 'PINActivation', 'PINChange', 'PINUnblock', 'MiniStatement']):
                raise ValueError("each list item must be one of ('Balance', 'BillPayments', 'CashDeposits', 'CharityDonation', 'ChequeDeposits', 'CashWithdrawal', 'EnvelopeDeposit', 'FastCash', 'MobileBankingRegistration', 'MobilePaymentRegistration', 'MobilePhoneTopUp', 'OrderStatement', 'Other', 'PINActivation', 'PINChange', 'PINUnblock', 'MiniStatement')")
        return value

    @field_validator('accessibility')
    def accessibility_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['AudioCashMachine', 'AutomaticDoors', 'ExternalRamp', 'InductionLoop', 'InternalRamp', 'LevelAccess', 'LowerLevelCounter', 'Other', 'WheelchairAccess']):
                raise ValueError("each list item must be one of ('AudioCashMachine', 'AutomaticDoors', 'ExternalRamp', 'InductionLoop', 'InternalRamp', 'LevelAccess', 'LowerLevelCounter', 'Other', 'WheelchairAccess')")
        return value

    @field_validator('minimum_possible_amount')
    def minimum_possible_amount_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,10}\.?\d{0,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.?\d{0,2}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ATMInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in other_atm_services (list)
        _items = []
        if self.other_atm_services:
            for _item_other_atm_services in self.other_atm_services:
                if _item_other_atm_services:
                    _items.append(_item_other_atm_services.to_dict())
            _dict['OtherATMServices'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in other_accessibility (list)
        _items = []
        if self.other_accessibility:
            for _item_other_accessibility in self.other_accessibility:
                if _item_other_accessibility:
                    _items.append(_item_other_accessibility.to_dict())
            _dict['OtherAccessibility'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ATMInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ATMServices": obj.get("ATMServices"),
            "Access24HoursIndicator": obj.get("Access24HoursIndicator"),
            "Accessibility": obj.get("Accessibility"),
            "Branch": obj.get("Branch"),
            "Identification": obj.get("Identification"),
            "Location": obj.get("Location"),
            "MinimumPossibleAmount": obj.get("MinimumPossibleAmount"),
            "Note": obj.get("Note"),
            "OtherATMServices": [OtherATMServicesInner.from_dict(_item) for _item in obj["OtherATMServices"]] if obj.get("OtherATMServices") is not None else None,
            "OtherAccessibility": [OtherAccessibilityInner.from_dict(_item) for _item in obj["OtherAccessibility"]] if obj.get("OtherAccessibility") is not None else None,
            "SupportedCurrencies": obj.get("SupportedCurrencies"),
            "SupportedLanguages": obj.get("SupportedLanguages")
        })
        return _obj



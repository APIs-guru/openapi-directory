# coding: utf-8

"""
    ExaVault

    ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.

    The version of the OpenAPI document: 2.0
    Contact: support@exavault.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ResourceAttributes(BaseModel):
    """
    Attributes of resource
    """ # noqa: E501
    accessed_at: Optional[datetime] = Field(default=None, description="Date-time of the time when resource was accessed.", alias="accessedAt")
    accessed_time: Optional[StrictInt] = Field(default=None, description="UNIX timestamp of last access", alias="accessedTime")
    created_at: Optional[datetime] = Field(default=None, description="Date-time of resource creation.", alias="createdAt")
    created_by: Optional[StrictStr] = Field(default=None, description="Username of the creator.", alias="createdBy")
    created_time: Optional[StrictInt] = Field(default=None, description="UNIX timestamp of resource creation", alias="createdTime")
    extension: Optional[StrictStr] = Field(default=None, description="Resource extension. Property exists only if resource `type` is file.")
    file_count: Optional[StrictInt] = Field(default=None, description="Number of files within folder. null if resource type is a file.", alias="fileCount")
    hash: Optional[StrictStr] = Field(default=None, description="Unique hash of the resource.")
    name: Optional[StrictStr] = Field(default=None, description="Resource name, e.g. the name of the file or folder.")
    path: Optional[StrictStr] = Field(default=None, description="Full path to the resource.")
    previewable: Optional[StrictBool] = Field(default=None, description="Can resource be previewed. Property equals `null` if resource `type` is dir.")
    size: Optional[StrictInt] = Field(default=None, description="Resource size in bytes")
    type: Optional[StrictStr] = Field(default=None, description="Type of the resource.")
    updated_at: Optional[datetime] = Field(default=None, description="Date-time of resource modification.", alias="updatedAt")
    updated_time: Optional[StrictInt] = Field(default=None, description="UNIX timestamp of resource modification", alias="updatedTime")
    upload_date: Optional[datetime] = Field(default=None, description="Timestamp of resource upload.", alias="uploadDate")
    __properties: ClassVar[List[str]] = ["accessedAt", "accessedTime", "createdAt", "createdBy", "createdTime", "extension", "fileCount", "hash", "name", "path", "previewable", "size", "type", "updatedAt", "updatedTime", "uploadDate"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['file', 'dir']):
            raise ValueError("must be one of enum values ('file', 'dir')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessedAt": obj.get("accessedAt"),
            "accessedTime": obj.get("accessedTime"),
            "createdAt": obj.get("createdAt"),
            "createdBy": obj.get("createdBy"),
            "createdTime": obj.get("createdTime"),
            "extension": obj.get("extension"),
            "fileCount": obj.get("fileCount"),
            "hash": obj.get("hash"),
            "name": obj.get("name"),
            "path": obj.get("path"),
            "previewable": obj.get("previewable"),
            "size": obj.get("size"),
            "type": obj.get("type"),
            "updatedAt": obj.get("updatedAt"),
            "updatedTime": obj.get("updatedTime"),
            "uploadDate": obj.get("uploadDate")
        })
        return _obj



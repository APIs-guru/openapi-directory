# coding: utf-8

"""
    ExaVault

    ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.

    The version of the OpenAPI document: 2.0
    Contact: support@exavault.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.account_quota_values import AccountQuotaValues
from openapi_client.models.branding_settings_values import BrandingSettingsValues
from openapi_client.models.update_account_request_body_allowed_ip_ranges_inner import UpdateAccountRequestBodyAllowedIpRangesInner
from typing import Optional, Set
from typing_extensions import Self

class UpdateAccountRequestBody(BaseModel):
    """
    UpdateAccountRequestBody
    """ # noqa: E501
    account_onboarding: Optional[StrictBool] = Field(default=None, description="Whether extra help popups can be enabled for users in the web file manager.", alias="accountOnboarding")
    allowed_ip_ranges: Optional[List[UpdateAccountRequestBodyAllowedIpRangesInner]] = Field(default=None, description="IP Address Ranges for restricting account access", alias="allowedIpRanges")
    branding_settings: Optional[BrandingSettingsValues] = Field(default=None, alias="brandingSettings")
    complex_passwords: Optional[StrictBool] = Field(default=None, description="Whether to require complex passwords for all passwords.", alias="complexPasswords")
    custom_signature: Optional[StrictStr] = Field(default=None, description="Signature to be automatically added to the bottom of emails generated by the account.", alias="customSignature")
    email_content: Optional[StrictStr] = Field(default=None, description="Content of welcome email template.", alias="emailContent")
    email_subject: Optional[StrictStr] = Field(default=None, description="Subject line for welcome emails", alias="emailSubject")
    external_domain: Optional[StrictStr] = Field(default=None, description="Custom address used for web file manager. Not available for all account types.", alias="externalDomain")
    quota: Optional[AccountQuotaValues] = None
    secure_only: Optional[StrictBool] = Field(default=None, description="Whether unencrypted FTP connections should be denied for the account.", alias="secureOnly")
    show_referral_links: Optional[StrictBool] = Field(default=None, description="Whether to display links for others to sign up on share views and invitation emails", alias="showReferralLinks")
    __properties: ClassVar[List[str]] = ["accountOnboarding", "allowedIpRanges", "brandingSettings", "complexPasswords", "customSignature", "emailContent", "emailSubject", "externalDomain", "quota", "secureOnly", "showReferralLinks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateAccountRequestBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in allowed_ip_ranges (list)
        _items = []
        if self.allowed_ip_ranges:
            for _item_allowed_ip_ranges in self.allowed_ip_ranges:
                if _item_allowed_ip_ranges:
                    _items.append(_item_allowed_ip_ranges.to_dict())
            _dict['allowedIpRanges'] = _items
        # override the default output from pydantic by calling `to_dict()` of branding_settings
        if self.branding_settings:
            _dict['brandingSettings'] = self.branding_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quota
        if self.quota:
            _dict['quota'] = self.quota.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateAccountRequestBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountOnboarding": obj.get("accountOnboarding"),
            "allowedIpRanges": [UpdateAccountRequestBodyAllowedIpRangesInner.from_dict(_item) for _item in obj["allowedIpRanges"]] if obj.get("allowedIpRanges") is not None else None,
            "brandingSettings": BrandingSettingsValues.from_dict(obj["brandingSettings"]) if obj.get("brandingSettings") is not None else None,
            "complexPasswords": obj.get("complexPasswords"),
            "customSignature": obj.get("customSignature"),
            "emailContent": obj.get("emailContent"),
            "emailSubject": obj.get("emailSubject"),
            "externalDomain": obj.get("externalDomain"),
            "quota": AccountQuotaValues.from_dict(obj["quota"]) if obj.get("quota") is not None else None,
            "secureOnly": obj.get("secureOnly"),
            "showReferralLinks": obj.get("showReferralLinks")
        })
        return _obj



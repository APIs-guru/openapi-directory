# coding: utf-8

"""
    ExaVault

    ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.

    The version of the OpenAPI document: 2.0
    Contact: support@exavault.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Quota(BaseModel):
    """
    Quota
    """ # noqa: E501
    bandwidth_limit: Optional[StrictInt] = Field(default=None, description="Total number of bytes that can be transferred per month.", alias="bandwidthLimit")
    bandwidth_used: Optional[StrictInt] = Field(default=None, description="Number of bytes transferred this month.", alias="bandwidthUsed")
    disk_limit: Optional[StrictInt] = Field(default=None, description="Amount of disk space that the account has available to it. This may be increased by upgrading to a larger plan.", alias="diskLimit")
    disk_used: Optional[StrictInt] = Field(default=None, description="Amount of disk space currently in use.", alias="diskUsed")
    notice_enabled: Optional[StrictBool] = Field(default=None, description="Should a quota warning be sent to the account owner when a threshold level of space utilization is reached?", alias="noticeEnabled")
    notice_threshold: Optional[StrictInt] = Field(default=None, description="Treshold that triggers a quota notification. This represents the \"percent full\" your account must be before the quota notification is generated.", alias="noticeThreshold")
    transactions_limit: Optional[StrictInt] = Field(default=None, description="Total number of transactions allowed in a 24-hour period.", alias="transactionsLimit")
    transactions_notice_enabled: Optional[StrictBool] = Field(default=None, description="Whether an email should be sent to the account owner up to once per day if transaction usage exceeds `transactionsNoticeThreshold` value.", alias="transactionsNoticeEnabled")
    transactions_notice_threshold: Optional[StrictInt] = Field(default=None, description="Percent of daily transactions limit that will trigger an email if activity exceeds it.", alias="transactionsNoticeThreshold")
    __properties: ClassVar[List[str]] = ["bandwidthLimit", "bandwidthUsed", "diskLimit", "diskUsed", "noticeEnabled", "noticeThreshold", "transactionsLimit", "transactionsNoticeEnabled", "transactionsNoticeThreshold"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Quota from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Quota from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bandwidthLimit": obj.get("bandwidthLimit"),
            "bandwidthUsed": obj.get("bandwidthUsed"),
            "diskLimit": obj.get("diskLimit"),
            "diskUsed": obj.get("diskUsed"),
            "noticeEnabled": obj.get("noticeEnabled"),
            "noticeThreshold": obj.get("noticeThreshold"),
            "transactionsLimit": obj.get("transactionsLimit"),
            "transactionsNoticeEnabled": obj.get("transactionsNoticeEnabled"),
            "transactionsNoticeThreshold": obj.get("transactionsNoticeThreshold")
        })
        return _obj



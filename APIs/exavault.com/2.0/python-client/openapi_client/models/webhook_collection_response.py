# coding: utf-8

"""
    ExaVault

    ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.

    The version of the OpenAPI document: 2.0
    Contact: support@exavault.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.user_collection_response_included_inner import UserCollectionResponseIncludedInner
from openapi_client.models.webhook import Webhook
from typing import Optional, Set
from typing_extensions import Self

class WebhookCollectionResponse(BaseModel):
    """
    WebhookCollectionResponse
    """ # noqa: E501
    data: Optional[List[Webhook]] = None
    included: Optional[List[UserCollectionResponseIncludedInner]] = None
    response_status: Optional[StrictInt] = Field(default=None, description="Http status code of the response. ", alias="responseStatus")
    returned_results: Optional[StrictInt] = Field(default=None, description="Number of results returned.", alias="returnedResults")
    total_results: Optional[StrictInt] = Field(default=None, description="Total results found.", alias="totalResults")
    __properties: ClassVar[List[str]] = ["data", "included", "responseStatus", "returnedResults", "totalResults"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebhookCollectionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data (list)
        _items = []
        if self.data:
            for _item_data in self.data:
                if _item_data:
                    _items.append(_item_data.to_dict())
            _dict['data'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in included (list)
        _items = []
        if self.included:
            for _item_included in self.included:
                if _item_included:
                    _items.append(_item_included.to_dict())
            _dict['included'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebhookCollectionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "data": [Webhook.from_dict(_item) for _item in obj["data"]] if obj.get("data") is not None else None,
            "included": [UserCollectionResponseIncludedInner.from_dict(_item) for _item in obj["included"]] if obj.get("included") is not None else None,
            "responseStatus": obj.get("responseStatus"),
            "returnedResults": obj.get("returnedResults"),
            "totalResults": obj.get("totalResults")
        })
        return _obj



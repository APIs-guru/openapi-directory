# coding: utf-8

"""
    ExaVault

    ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.

    The version of the OpenAPI document: 2.0
    Contact: support@exavault.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.account_attributes_allowed_ip_inner import AccountAttributesAllowedIpInner
from openapi_client.models.branding_settings import BrandingSettings
from openapi_client.models.plan_details import PlanDetails
from openapi_client.models.quota import Quota
from typing import Optional, Set
from typing_extensions import Self

class AccountAttributes(BaseModel):
    """
    
    """ # noqa: E501
    account_name: Optional[StrictStr] = Field(default=None, description="Name of the account", alias="accountName")
    account_onboarding: Optional[StrictBool] = Field(default=None, description="Whether the web application onboarding help is enabled for new users in the account.", alias="accountOnboarding")
    allowed_ip: Optional[List[AccountAttributesAllowedIpInner]] = Field(default=None, description="Range of IP addresses allowed to access this account.", alias="allowedIp")
    branding: Optional[StrictBool] = Field(default=None, description="Branding flag. Set to `true` if the account has branding functionality enabled.")
    branding_settings: Optional[BrandingSettings] = Field(default=None, alias="brandingSettings")
    client_id: Optional[StrictInt] = Field(default=None, description="(ExaVault Use Only) Internal ID of the account in CMS.", alias="clientId")
    complex_passwords: Optional[StrictBool] = Field(default=None, description="Flag to indicate whether the account requires complex passwords. Set to `true` to require complex passwords on all users and shares.", alias="complexPasswords")
    created: Optional[datetime] = Field(default=None, description="Timestamp of account creation.")
    custom_domain: Optional[StrictBool] = Field(default=None, description="Custom domain flag. Set to `true` if account type allows custom domain functionality.", alias="customDomain")
    custom_signature: Optional[StrictStr] = Field(default=None, description="Custom signature for all account emails users or recipients will receive.", alias="customSignature")
    external_domains: Optional[List[StrictStr]] = Field(default=None, description="Custom domain used to brand this account.", alias="externalDomains")
    max_users: Optional[StrictInt] = Field(default=None, description="Maximum number of users the account can have. This can be increased by contacting ExaVault Support.", alias="maxUsers")
    modified: Optional[datetime] = Field(default=None, description="Timestamp of account modification.")
    plan_details: Optional[PlanDetails] = Field(default=None, alias="planDetails")
    quota: Optional[Quota] = None
    secure_only: Optional[StrictBool] = Field(default=None, description="Flag to indicate whether the account disables connections via insecure protocols (e.g. FTP). Set to `true` to disable all traffic over port 21.", alias="secureOnly")
    show_referral_links: Optional[StrictBool] = Field(default=None, description="Flag to indicate showing of referrals links in the account. Set to `true` to include marketing messages in share invitations.", alias="showReferralLinks")
    status: Optional[StrictInt] = Field(default=None, description="Account status flag. A one (1) means the account is active; zero (0) means it is suspended.")
    user_count: Optional[StrictInt] = Field(default=None, description="Current number of users on the account.", alias="userCount")
    welcome_email_content: Optional[StrictStr] = Field(default=None, description="Content of welcome email each new user will receive.", alias="welcomeEmailContent")
    welcome_email_subject: Optional[StrictStr] = Field(default=None, description="Subject of welcome email each new user will receive.", alias="welcomeEmailSubject")
    __properties: ClassVar[List[str]] = ["accountName", "accountOnboarding", "allowedIp", "branding", "brandingSettings", "clientId", "complexPasswords", "created", "customDomain", "customSignature", "externalDomains", "maxUsers", "modified", "planDetails", "quota", "secureOnly", "showReferralLinks", "status", "userCount", "welcomeEmailContent", "welcomeEmailSubject"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([1, 0]):
            raise ValueError("must be one of enum values (1, 0)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in allowed_ip (list)
        _items = []
        if self.allowed_ip:
            for _item_allowed_ip in self.allowed_ip:
                if _item_allowed_ip:
                    _items.append(_item_allowed_ip.to_dict())
            _dict['allowedIp'] = _items
        # override the default output from pydantic by calling `to_dict()` of branding_settings
        if self.branding_settings:
            _dict['brandingSettings'] = self.branding_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of plan_details
        if self.plan_details:
            _dict['planDetails'] = self.plan_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quota
        if self.quota:
            _dict['quota'] = self.quota.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountName": obj.get("accountName"),
            "accountOnboarding": obj.get("accountOnboarding"),
            "allowedIp": [AccountAttributesAllowedIpInner.from_dict(_item) for _item in obj["allowedIp"]] if obj.get("allowedIp") is not None else None,
            "branding": obj.get("branding"),
            "brandingSettings": BrandingSettings.from_dict(obj["brandingSettings"]) if obj.get("brandingSettings") is not None else None,
            "clientId": obj.get("clientId"),
            "complexPasswords": obj.get("complexPasswords"),
            "created": obj.get("created"),
            "customDomain": obj.get("customDomain"),
            "customSignature": obj.get("customSignature"),
            "externalDomains": obj.get("externalDomains"),
            "maxUsers": obj.get("maxUsers"),
            "modified": obj.get("modified"),
            "planDetails": PlanDetails.from_dict(obj["planDetails"]) if obj.get("planDetails") is not None else None,
            "quota": Quota.from_dict(obj["quota"]) if obj.get("quota") is not None else None,
            "secureOnly": obj.get("secureOnly"),
            "showReferralLinks": obj.get("showReferralLinks"),
            "status": obj.get("status"),
            "userCount": obj.get("userCount"),
            "welcomeEmailContent": obj.get("welcomeEmailContent"),
            "welcomeEmailSubject": obj.get("welcomeEmailSubject")
        })
        return _obj



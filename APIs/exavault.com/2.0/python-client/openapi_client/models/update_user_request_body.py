# coding: utf-8

"""
    ExaVault

    ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.

    The version of the OpenAPI document: 2.0
    Contact: support@exavault.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.user_permissions import UserPermissions
from typing import Optional, Set
from typing_extensions import Self

class UpdateUserRequestBody(BaseModel):
    """
    UpdateUserRequestBody
    """ # noqa: E501
    email: Optional[StrictStr] = Field(default=None, description="Email address for the user")
    expiration: Optional[StrictStr] = Field(default=None, description="Optional timestamp when the user should expire.")
    home_resource: Optional[StrictStr] = Field(default=None, description="Resource identifier for the user's home folder. See details on [how to specify resources](#section/Identifying-Resources) above.  The user will be locked to this directory and unable to move 'up' in the account. If the folder does not exist in the account, it will be created when the user logs in.  This setting is ignored for users with the `role` **admin**.", alias="homeResource")
    locked: Optional[StrictBool] = Field(default=None, description="If true, the user will be prevented from logging in")
    nickname: Optional[StrictStr] = Field(default=None, description="An optional nickname (e.g. 'David from Sales').")
    onboarding: Optional[StrictBool] = Field(default=None, description="Set this to **true** to enable extra help popups in the web file manager for this user.")
    password: Optional[StrictStr] = Field(default=None, description="New password for the user")
    permissions: Optional[UserPermissions] = None
    role: Optional[StrictStr] = Field(default=None, description="The type of user (**admin** or **user**). Note that admin users cannot have a `homeResource` other than '/', and will have full permissions, but you must provide at least \"download,upload,list,delete\" in the `permissions` parameter.")
    time_zone: Optional[StrictStr] = Field(default=None, description="Time zone, used for accurate time display within the application. See <a href='https://php.net/manual/en/timezones.php' target='blank'>this page</a> for allowed values. ", alias="timeZone")
    username: Optional[StrictStr] = Field(default=None, description="New username for the user. This should follow standard username conventions - spaces are not allowed, etc. We do allow email addresses as usernames.  **Note** Usernames must be unique across all ExaVault accounts.")
    __properties: ClassVar[List[str]] = ["email", "expiration", "homeResource", "locked", "nickname", "onboarding", "password", "permissions", "role", "timeZone", "username"]

    @field_validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['user', 'admin']):
            raise ValueError("must be one of enum values ('user', 'admin')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateUserRequestBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of permissions
        if self.permissions:
            _dict['permissions'] = self.permissions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateUserRequestBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email": obj.get("email"),
            "expiration": obj.get("expiration"),
            "homeResource": obj.get("homeResource"),
            "locked": obj.get("locked"),
            "nickname": obj.get("nickname"),
            "onboarding": obj.get("onboarding"),
            "password": obj.get("password"),
            "permissions": UserPermissions.from_dict(obj["permissions"]) if obj.get("permissions") is not None else None,
            "role": obj.get("role"),
            "timeZone": obj.get("timeZone"),
            "username": obj.get("username")
        })
        return _obj



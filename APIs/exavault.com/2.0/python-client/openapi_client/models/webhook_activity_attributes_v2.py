# coding: utf-8

"""
    ExaVault

    ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.

    The version of the OpenAPI document: 2.0
    Contact: support@exavault.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.webhook_v2_details import WebhookV2Details
from typing import Optional, Set
from typing_extensions import Self

class WebhookActivityAttributesV2(BaseModel):
    """
    WebhookActivityAttributesV2
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Unique ID of account", alias="accountId")
    attempt_id: Optional[StrictStr] = Field(default=None, description="Event - retry identifier", alias="attemptId")
    created: Optional[StrictStr] = Field(default=None, description="Date and time of webhook message being generated by system")
    details: Optional[WebhookV2Details] = None
    endpoint_url: Optional[StrictStr] = Field(default=None, description="The URL the message was sent to", alias="endpointUrl")
    event: Optional[StrictStr] = Field(default=None, description="Event type")
    ip_address: Optional[StrictStr] = Field(default=None, description="IP Address of related activity", alias="ipAddress")
    resend: Optional[StrictBool] = Field(default=None, description="Whether this attempt was a re-send of a previous attempt")
    var_resource_path: Optional[StrictStr] = Field(default=None, description="Path of resource that matched webhook", alias="resourcePath")
    response: Optional[StrictStr] = Field(default=None, description="Body of web response returned by webhook listener")
    status: Optional[StrictInt] = Field(default=None, description="HTTP Status Code returned by webhook listener")
    username: Optional[StrictStr] = Field(default=None, description="Username of related activity")
    webhook_format: Optional[StrictStr] = Field(default=None, description="What version of webhook message is being sent `v2`", alias="webhookFormat")
    webhook_id: Optional[StrictInt] = Field(default=None, description="Unique ID of webhook configuration", alias="webhookId")
    webhook_path: Optional[StrictStr] = Field(default=None, description="Path that webhook is watching", alias="webhookPath")
    __properties: ClassVar[List[str]] = ["accountId", "attemptId", "created", "details", "endpointUrl", "event", "ipAddress", "resend", "resourcePath", "response", "status", "username", "webhookFormat", "webhookId", "webhookPath"]

    @field_validator('event')
    def event_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['resources.upload', 'resources.download', 'resources.delete', 'resources.rename', 'resources.copy', 'resources.move', 'resources.compress', 'resources.extract', 'resources.createFolder', 'shares.formSubmit']):
            raise ValueError("must be one of enum values ('resources.upload', 'resources.download', 'resources.delete', 'resources.rename', 'resources.copy', 'resources.move', 'resources.compress', 'resources.extract', 'resources.createFolder', 'shares.formSubmit')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebhookActivityAttributesV2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of details
        if self.details:
            _dict['details'] = self.details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebhookActivityAttributesV2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "attemptId": obj.get("attemptId"),
            "created": obj.get("created"),
            "details": WebhookV2Details.from_dict(obj["details"]) if obj.get("details") is not None else None,
            "endpointUrl": obj.get("endpointUrl"),
            "event": obj.get("event"),
            "ipAddress": obj.get("ipAddress"),
            "resend": obj.get("resend"),
            "resourcePath": obj.get("resourcePath"),
            "response": obj.get("response"),
            "status": obj.get("status"),
            "username": obj.get("username"),
            "webhookFormat": obj.get("webhookFormat"),
            "webhookId": obj.get("webhookId"),
            "webhookPath": obj.get("webhookPath")
        })
        return _obj



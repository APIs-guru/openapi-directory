# coding: utf-8

"""
    ExaVault

    ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.

    The version of the OpenAPI document: 2.0
    Contact: support@exavault.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.notification_recipient import NotificationRecipient
from typing import Optional, Set
from typing_extensions import Self

class NotificationAttributes(BaseModel):
    """
    Attributes for the notification including the path, recipients, and share data. 
    """ # noqa: E501
    action: Optional[StrictStr] = Field(default=None, description="Action that triggers notification.")
    created: Optional[datetime] = Field(default=None, description="Timestamp of notifiction creation.")
    message: Optional[StrictStr] = Field(default=None, description="Custom message that will be sent to the notification recipients.")
    modified: Optional[datetime] = Field(default=None, description="Timestamp of notification modification.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the item that the notification is set on.")
    path: Optional[StrictStr] = Field(default=None, description="Path to the item that the notification is set on.")
    readable_description: Optional[StrictStr] = Field(default=None, description="Human readable description of the notification.", alias="readableDescription")
    readable_description_without_path: Optional[StrictStr] = Field(default=None, description="Human readable description of the notification without item path.", alias="readableDescriptionWithoutPath")
    recipients: Optional[List[NotificationRecipient]] = Field(default=None, description="Notification recipients.")
    send_email: Optional[StrictBool] = Field(default=None, description="Whether or not an email will send when the notification is triggered.", alias="sendEmail")
    share_id: Optional[StrictStr] = Field(default=None, description="ID of the share that the notification belogns to.", alias="shareId")
    type: Optional[StrictStr] = Field(default=None, description="Type of the resource the notification is attached to. ")
    user_id: Optional[StrictStr] = Field(default=None, description="ID of the user that the notification belongs to.", alias="userId")
    usernames: Optional[List[StrictStr]] = Field(default=None, description="Detail on which users can trigger the notification.")
    __properties: ClassVar[List[str]] = ["action", "created", "message", "modified", "name", "path", "readableDescription", "readableDescriptionWithoutPath", "recipients", "sendEmail", "shareId", "type", "userId", "usernames"]

    @field_validator('action')
    def action_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['upload', 'download', 'delete', 'all']):
            raise ValueError("must be one of enum values ('upload', 'download', 'delete', 'all')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['file', 'folder', 'shared_folder', 'send_receipt', 'share_receipt', 'file_drop']):
            raise ValueError("must be one of enum values ('file', 'folder', 'shared_folder', 'send_receipt', 'share_receipt', 'file_drop')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NotificationAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in recipients (list)
        _items = []
        if self.recipients:
            for _item_recipients in self.recipients:
                if _item_recipients:
                    _items.append(_item_recipients.to_dict())
            _dict['recipients'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NotificationAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "created": obj.get("created"),
            "message": obj.get("message"),
            "modified": obj.get("modified"),
            "name": obj.get("name"),
            "path": obj.get("path"),
            "readableDescription": obj.get("readableDescription"),
            "readableDescriptionWithoutPath": obj.get("readableDescriptionWithoutPath"),
            "recipients": [NotificationRecipient.from_dict(_item) for _item in obj["recipients"]] if obj.get("recipients") is not None else None,
            "sendEmail": obj.get("sendEmail"),
            "shareId": obj.get("shareId"),
            "type": obj.get("type"),
            "userId": obj.get("userId"),
            "usernames": obj.get("usernames")
        })
        return _obj



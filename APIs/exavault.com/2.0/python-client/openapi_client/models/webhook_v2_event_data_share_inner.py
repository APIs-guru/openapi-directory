# coding: utf-8

"""
    ExaVault

    ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.

    The version of the OpenAPI document: 2.0
    Contact: support@exavault.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.access_mode import AccessMode
from openapi_client.models.share_message import ShareMessage
from openapi_client.models.share_recipient import ShareRecipient
from typing import Optional, Set
from typing_extensions import Self

class WebhookV2EventDataShareInner(BaseModel):
    """
    WebhookV2EventDataShareInner
    """ # noqa: E501
    access_description: Optional[StrictStr] = Field(default=None, description="Human readable description of what visitors are allowed to do with the receive folder", alias="accessDescription")
    access_mode: Optional[AccessMode] = Field(default=None, alias="accessMode")
    assets: Optional[List[StrictStr]] = Field(default=None, description="List of items included in the share")
    created: Optional[datetime] = Field(default=None, description="Date and ti")
    embed: Optional[StrictBool] = Field(default=None, description="Whether the receive folder can be embedded within a web page")
    expiration: Optional[StrictStr] = Field(default=None, description="Date and time when the receive folder will no longer be ")
    expired: Optional[StrictBool] = Field(default=None, description="Whether access to the receive folder has expired")
    file_drop_create_folders: Optional[StrictBool] = Field(default=None, description="Whether files should be automatically placed in subfolders of the receive folder", alias="fileDropCreateFolders")
    form_id: Optional[StrictInt] = Field(default=None, description="ID of the associated form", alias="formId")
    has_notification: Optional[StrictBool] = Field(default=None, description="Whether delivery receipts are enabled for this share", alias="hasNotification")
    has_password: Optional[StrictBool] = Field(default=None, description="Whether the receive folder requires visitors to enter a password", alias="hasPassword")
    hash: Optional[StrictStr] = Field(default=None, description="Hash value of the receive")
    id: Optional[StrictInt] = Field(default=None, description="Unique ID of associated receive folder")
    inherited: Optional[StrictBool] = Field(default=None, description="Whether this share is inherited from a parent fol")
    is_public: Optional[StrictBool] = Field(default=None, description="Whether visitors can acccess the receive folder without an invitation link", alias="isPublic")
    messages: Optional[List[ShareMessage]] = Field(default=None, description="Invitation messages sent for receive folder")
    modified: Optional[datetime] = Field(default=None, description="Date and time when the share was last changed")
    name: Optional[StrictStr] = Field(default=None, description="Name of receiv")
    owner_hash: Optional[StrictStr] = Field(default=None, description="Hash value of the user who \"owns\" the receive fo", alias="ownerHash")
    paths: Optional[List[StrictStr]] = Field(default=None, description="List")
    recipients: Optional[List[ShareRecipient]] = Field(default=None, description="List of recipients invited  to the receive folder")
    require_email: Optional[StrictBool] = Field(default=None, description="Whether visitors must enter their email addresses to access the receive folder", alias="requireEmail")
    resent: Optional[StrictBool] = Field(default=None, description="Whether invitations to the receive folder have been re-sent to recipients")
    status: Optional[StrictInt] = Field(default=None, description="1 if share is active. 0 if not.")
    tracking_status: Optional[StrictStr] = Field(default=None, description="Status of invitations sent for this receive folder", alias="trackingStatus")
    type: Optional[StrictStr] = Field(default=None, description="Type of share **\"receive\"**")
    __properties: ClassVar[List[str]] = ["accessDescription", "accessMode", "assets", "created", "embed", "expiration", "expired", "fileDropCreateFolders", "formId", "hasNotification", "hasPassword", "hash", "id", "inherited", "isPublic", "messages", "modified", "name", "ownerHash", "paths", "recipients", "requireEmail", "resent", "status", "trackingStatus", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebhookV2EventDataShareInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of access_mode
        if self.access_mode:
            _dict['accessMode'] = self.access_mode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item_messages in self.messages:
                if _item_messages:
                    _items.append(_item_messages.to_dict())
            _dict['messages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in recipients (list)
        _items = []
        if self.recipients:
            for _item_recipients in self.recipients:
                if _item_recipients:
                    _items.append(_item_recipients.to_dict())
            _dict['recipients'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebhookV2EventDataShareInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessDescription": obj.get("accessDescription"),
            "accessMode": AccessMode.from_dict(obj["accessMode"]) if obj.get("accessMode") is not None else None,
            "assets": obj.get("assets"),
            "created": obj.get("created"),
            "embed": obj.get("embed"),
            "expiration": obj.get("expiration"),
            "expired": obj.get("expired"),
            "fileDropCreateFolders": obj.get("fileDropCreateFolders"),
            "formId": obj.get("formId"),
            "hasNotification": obj.get("hasNotification"),
            "hasPassword": obj.get("hasPassword"),
            "hash": obj.get("hash"),
            "id": obj.get("id"),
            "inherited": obj.get("inherited"),
            "isPublic": obj.get("isPublic"),
            "messages": [ShareMessage.from_dict(_item) for _item in obj["messages"]] if obj.get("messages") is not None else None,
            "modified": obj.get("modified"),
            "name": obj.get("name"),
            "ownerHash": obj.get("ownerHash"),
            "paths": obj.get("paths"),
            "recipients": [ShareRecipient.from_dict(_item) for _item in obj["recipients"]] if obj.get("recipients") is not None else None,
            "requireEmail": obj.get("requireEmail"),
            "resent": obj.get("resent"),
            "status": obj.get("status"),
            "trackingStatus": obj.get("trackingStatus"),
            "type": obj.get("type")
        })
        return _obj



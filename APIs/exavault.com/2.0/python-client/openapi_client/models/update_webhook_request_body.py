# coding: utf-8

"""
    ExaVault

    ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.

    The version of the OpenAPI document: 2.0
    Contact: support@exavault.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.webhook_triggers import WebhookTriggers
from typing import Optional, Set
from typing_extensions import Self

class UpdateWebhookRequestBody(BaseModel):
    """
    
    """ # noqa: E501
    endpoint_url: Optional[StrictStr] = Field(default=None, description="New endpoint URL to use for the webhook configuration", alias="endpointUrl")
    resource: Optional[StrictStr] = Field(default=None, description="Resource identifier of the top folder watched by this webhook.")
    response_version: Optional[StrictStr] = Field(default=None, description="Version of the webhooks message to send to the endpoint", alias="responseVersion")
    triggers: Optional[WebhookTriggers] = None
    __properties: ClassVar[List[str]] = ["endpointUrl", "resource", "responseVersion", "triggers"]

    @field_validator('response_version')
    def response_version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['v2', 'v1']):
            raise ValueError("must be one of enum values ('v2', 'v1')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateWebhookRequestBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of triggers
        if self.triggers:
            _dict['triggers'] = self.triggers.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateWebhookRequestBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endpointUrl": obj.get("endpointUrl"),
            "resource": obj.get("resource"),
            "responseVersion": obj.get("responseVersion"),
            "triggers": WebhookTriggers.from_dict(obj["triggers"]) if obj.get("triggers") is not None else None
        })
        return _obj



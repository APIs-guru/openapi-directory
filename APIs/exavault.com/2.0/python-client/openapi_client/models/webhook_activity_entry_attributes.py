# coding: utf-8

"""
    ExaVault

    ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.

    The version of the OpenAPI document: 2.0
    Contact: support@exavault.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.webhook_activity_attributes_v1 import WebhookActivityAttributesV1
from openapi_client.models.webhook_activity_attributes_v2 import WebhookActivityAttributesV2
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

WEBHOOKACTIVITYENTRYATTRIBUTES_ONE_OF_SCHEMAS = ["WebhookActivityAttributesV1", "WebhookActivityAttributesV2"]

class WebhookActivityEntryAttributes(BaseModel):
    """
    WebhookActivityEntryAttributes
    """
    # data type: WebhookActivityAttributesV2
    oneof_schema_1_validator: Optional[WebhookActivityAttributesV2] = None
    # data type: WebhookActivityAttributesV1
    oneof_schema_2_validator: Optional[WebhookActivityAttributesV1] = None
    actual_instance: Optional[Union[WebhookActivityAttributesV1, WebhookActivityAttributesV2]] = None
    one_of_schemas: Set[str] = { "WebhookActivityAttributesV1", "WebhookActivityAttributesV2" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = WebhookActivityEntryAttributes.model_construct()
        error_messages = []
        match = 0
        # validate data type: WebhookActivityAttributesV2
        if not isinstance(v, WebhookActivityAttributesV2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WebhookActivityAttributesV2`")
        else:
            match += 1
        # validate data type: WebhookActivityAttributesV1
        if not isinstance(v, WebhookActivityAttributesV1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WebhookActivityAttributesV1`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in WebhookActivityEntryAttributes with oneOf schemas: WebhookActivityAttributesV1, WebhookActivityAttributesV2. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in WebhookActivityEntryAttributes with oneOf schemas: WebhookActivityAttributesV1, WebhookActivityAttributesV2. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into WebhookActivityAttributesV2
        try:
            instance.actual_instance = WebhookActivityAttributesV2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WebhookActivityAttributesV1
        try:
            instance.actual_instance = WebhookActivityAttributesV1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into WebhookActivityEntryAttributes with oneOf schemas: WebhookActivityAttributesV1, WebhookActivityAttributesV2. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into WebhookActivityEntryAttributes with oneOf schemas: WebhookActivityAttributesV1, WebhookActivityAttributesV2. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], WebhookActivityAttributesV1, WebhookActivityAttributesV2]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



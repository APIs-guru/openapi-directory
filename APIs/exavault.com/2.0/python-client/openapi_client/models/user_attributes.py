# coding: utf-8

"""
    ExaVault

    ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.

    The version of the OpenAPI document: 2.0
    Contact: support@exavault.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.user_permissions import UserPermissions
from typing import Optional, Set
from typing_extensions import Self

class UserAttributes(BaseModel):
    """
    Attributes of the user including expiration, home directory, and permissions. 
    """ # noqa: E501
    access_timestamp: Optional[StrictStr] = Field(default=None, description="Timestamp of most recent successful user login.", alias="accessTimestamp")
    account_name: StrictStr = Field(description="Name of the account this user belongs to.", alias="accountName")
    created: datetime = Field(description="Timestamp of user creation.")
    email: Optional[StrictStr] = Field(default=None, description="Email address of the user.")
    expiration: Optional[StrictStr] = Field(default=None, description="Timestamp of user expiration.")
    first_login: Optional[StrictBool] = Field(default=None, description="`true` if the user has logged into the system.", alias="firstLogin")
    home_path: Optional[StrictStr] = Field(default=None, description="Path to the user's home folder.", alias="homePath")
    locked: Optional[StrictBool] = Field(default=None, description="`true` if the user is locked and cannot log in.")
    modified: datetime = Field(description="Timestamp of user modification.")
    nickname: StrictStr = Field(description="Nickname of the user.")
    onboarding: StrictBool = Field(description="Whether the onboarding help system is enabled for this user. `true` means that additional help popups are displayed in the web application for this user.")
    permissions: UserPermissions
    role: StrictStr = Field(description="User's access level")
    status: StrictInt = Field(description="Indicates user activity status. `0` means the user is locked and cannot log in. `1` means the user is active and can log in.")
    time_zone: StrictStr = Field(description="User's timezone. See <a href='https://php.net/manual/en/timezones.php' target='blank'>this page</a> for allowed values.", alias="timeZone")
    username: StrictStr = Field(description="Username of the user.")
    __properties: ClassVar[List[str]] = ["accessTimestamp", "accountName", "created", "email", "expiration", "firstLogin", "homePath", "locked", "modified", "nickname", "onboarding", "permissions", "role", "status", "timeZone", "username"]

    @field_validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['user', 'admin', 'master']):
            raise ValueError("must be one of enum values ('user', 'admin', 'master')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set([0, 1]):
            raise ValueError("must be one of enum values (0, 1)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of permissions
        if self.permissions:
            _dict['permissions'] = self.permissions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessTimestamp": obj.get("accessTimestamp"),
            "accountName": obj.get("accountName"),
            "created": obj.get("created"),
            "email": obj.get("email"),
            "expiration": obj.get("expiration"),
            "firstLogin": obj.get("firstLogin"),
            "homePath": obj.get("homePath"),
            "locked": obj.get("locked"),
            "modified": obj.get("modified"),
            "nickname": obj.get("nickname"),
            "onboarding": obj.get("onboarding"),
            "permissions": UserPermissions.from_dict(obj["permissions"]) if obj.get("permissions") is not None else None,
            "role": obj.get("role"),
            "status": obj.get("status"),
            "timeZone": obj.get("timeZone"),
            "username": obj.get("username")
        })
        return _obj



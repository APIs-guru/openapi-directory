# coding: utf-8

"""
    ExaVault

    ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.

    The version of the OpenAPI document: 2.0
    Contact: support@exavault.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Optional
from openapi_client.models.error import Error
from openapi_client.models.resource_delete import ResourceDelete
from typing import Union, Any, List, Set, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal, Self
from pydantic import Field

RESOURCEMULTIRESPONSERESPONSESINNER_ANY_OF_SCHEMAS = ["Error", "ResourceDelete"]

class ResourceMultiResponseResponsesInner(BaseModel):
    """
    ResourceMultiResponseResponsesInner
    """

    # data type: ResourceDelete
    anyof_schema_1_validator: Optional[ResourceDelete] = None
    # data type: Error
    anyof_schema_2_validator: Optional[Error] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[Error, ResourceDelete]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = { "Error", "ResourceDelete" }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = ResourceMultiResponseResponsesInner.model_construct()
        error_messages = []
        # validate data type: ResourceDelete
        if not isinstance(v, ResourceDelete):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResourceDelete`")
        else:
            return v

        # validate data type: Error
        if not isinstance(v, Error):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Error`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in ResourceMultiResponseResponsesInner with anyOf schemas: Error, ResourceDelete. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[ResourceDelete] = None
        try:
            instance.actual_instance = ResourceDelete.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[Error] = None
        try:
            instance.actual_instance = Error.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ResourceMultiResponseResponsesInner with anyOf schemas: Error, ResourceDelete. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], Error, ResourceDelete]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



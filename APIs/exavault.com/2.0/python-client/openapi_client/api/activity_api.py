# coding: utf-8

"""
    ExaVault

    ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.

    The version of the OpenAPI document: 2.0
    Contact: support@exavault.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.session_activity_response import SessionActivityResponse
from openapi_client.models.webhook_activity_response import WebhookActivityResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ActivityApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_session_logs(
        self,
        ev_api_key: Annotated[StrictStr, Field(description="API Key")],
        ev_access_token: Annotated[StrictStr, Field(description="Access Token")],
        start_date: Annotated[Optional[datetime], Field(description="Start date of the filter data range")] = None,
        end_date: Annotated[Optional[datetime], Field(description="End date of the filter data range")] = None,
        ip_address: Annotated[Optional[StrictStr], Field(description="Used to filter session logs by ip address.")] = None,
        username: Annotated[Optional[StrictStr], Field(description="Username used for filtering a list")] = None,
        path: Annotated[Optional[StrictStr], Field(description="Path used to filter records")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Filter session logs for operation type (see table above for acceptable values)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset of the records list")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit of the records list")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Comma separated list sort params")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SessionActivityResponse:
        """Get activity logs

        Returns the detailed activity logs for your account. Optional query paramaters will filter the returned results based on a number of options including usernames, activity types, or date ranges.   **NOTE:** Total Results will always return as 0 to avoid quering data you're not using and stay as performant as possible.     **Operation Types** Session activity is logged with an operation type that is different from what is visible through the [activity log interface in the web file manager](/docs/account/10-activity-logs/00-activity-logs). Consult the table below to compare the two:  | File Manager Value | API Value | Notes | |-----|----|---| | Connect | PASS | | | Disconnect | EXIT | | | Upload | STOR | | | Download | RETR | | | Delete | DELE | | | Create Folder | MKD | | | Rename | RNTO | | | Move | MOVE | | | Copy | COPY | | | Compress | COMPR | | | Extract | EXTRACT | | | Shared Folders | SHARE | | | Send Files | SEND | | | Receive Files | RECV | | | _N/A_ | EDIT\\_SEND | Update send. Not shown in file manager | | Update Share | EDIT\\_SHARE| |  | Update Receive | EDIT\\_RECV | | | Delete Send | DELE\\_SEND | | | Delete Receive | DELE\\_RECV | | | Delete Share | DELE\\_SHARE | | | Create Notification | NOTIFY | | | Update Notification | EDIT\\_NTFY| | | Delete Notification | DELE\\_NTFY | | | Create User | USER | | | Update User | EDIT\\_USER | | | Delete User | DELE\\_USER | | | _N/A_ | DFA | Create direct link. Not shown in file manager | | _N/A_ | EDIT\\_DFA | Update direct link options. Not shown in file manager | | _N/A_ | DELE\\_DFA | Deactivate direct link. Not shown in file manager| 

        :param ev_api_key: API Key (required)
        :type ev_api_key: str
        :param ev_access_token: Access Token (required)
        :type ev_access_token: str
        :param start_date: Start date of the filter data range
        :type start_date: datetime
        :param end_date: End date of the filter data range
        :type end_date: datetime
        :param ip_address: Used to filter session logs by ip address.
        :type ip_address: str
        :param username: Username used for filtering a list
        :type username: str
        :param path: Path used to filter records
        :type path: str
        :param type: Filter session logs for operation type (see table above for acceptable values)
        :type type: str
        :param offset: Offset of the records list
        :type offset: int
        :param limit: Limit of the records list
        :type limit: int
        :param sort: Comma separated list sort params
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_session_logs_serialize(
            ev_api_key=ev_api_key,
            ev_access_token=ev_access_token,
            start_date=start_date,
            end_date=end_date,
            ip_address=ip_address,
            username=username,
            path=path,
            type=type,
            offset=offset,
            limit=limit,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SessionActivityResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_session_logs_with_http_info(
        self,
        ev_api_key: Annotated[StrictStr, Field(description="API Key")],
        ev_access_token: Annotated[StrictStr, Field(description="Access Token")],
        start_date: Annotated[Optional[datetime], Field(description="Start date of the filter data range")] = None,
        end_date: Annotated[Optional[datetime], Field(description="End date of the filter data range")] = None,
        ip_address: Annotated[Optional[StrictStr], Field(description="Used to filter session logs by ip address.")] = None,
        username: Annotated[Optional[StrictStr], Field(description="Username used for filtering a list")] = None,
        path: Annotated[Optional[StrictStr], Field(description="Path used to filter records")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Filter session logs for operation type (see table above for acceptable values)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset of the records list")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit of the records list")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Comma separated list sort params")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SessionActivityResponse]:
        """Get activity logs

        Returns the detailed activity logs for your account. Optional query paramaters will filter the returned results based on a number of options including usernames, activity types, or date ranges.   **NOTE:** Total Results will always return as 0 to avoid quering data you're not using and stay as performant as possible.     **Operation Types** Session activity is logged with an operation type that is different from what is visible through the [activity log interface in the web file manager](/docs/account/10-activity-logs/00-activity-logs). Consult the table below to compare the two:  | File Manager Value | API Value | Notes | |-----|----|---| | Connect | PASS | | | Disconnect | EXIT | | | Upload | STOR | | | Download | RETR | | | Delete | DELE | | | Create Folder | MKD | | | Rename | RNTO | | | Move | MOVE | | | Copy | COPY | | | Compress | COMPR | | | Extract | EXTRACT | | | Shared Folders | SHARE | | | Send Files | SEND | | | Receive Files | RECV | | | _N/A_ | EDIT\\_SEND | Update send. Not shown in file manager | | Update Share | EDIT\\_SHARE| |  | Update Receive | EDIT\\_RECV | | | Delete Send | DELE\\_SEND | | | Delete Receive | DELE\\_RECV | | | Delete Share | DELE\\_SHARE | | | Create Notification | NOTIFY | | | Update Notification | EDIT\\_NTFY| | | Delete Notification | DELE\\_NTFY | | | Create User | USER | | | Update User | EDIT\\_USER | | | Delete User | DELE\\_USER | | | _N/A_ | DFA | Create direct link. Not shown in file manager | | _N/A_ | EDIT\\_DFA | Update direct link options. Not shown in file manager | | _N/A_ | DELE\\_DFA | Deactivate direct link. Not shown in file manager| 

        :param ev_api_key: API Key (required)
        :type ev_api_key: str
        :param ev_access_token: Access Token (required)
        :type ev_access_token: str
        :param start_date: Start date of the filter data range
        :type start_date: datetime
        :param end_date: End date of the filter data range
        :type end_date: datetime
        :param ip_address: Used to filter session logs by ip address.
        :type ip_address: str
        :param username: Username used for filtering a list
        :type username: str
        :param path: Path used to filter records
        :type path: str
        :param type: Filter session logs for operation type (see table above for acceptable values)
        :type type: str
        :param offset: Offset of the records list
        :type offset: int
        :param limit: Limit of the records list
        :type limit: int
        :param sort: Comma separated list sort params
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_session_logs_serialize(
            ev_api_key=ev_api_key,
            ev_access_token=ev_access_token,
            start_date=start_date,
            end_date=end_date,
            ip_address=ip_address,
            username=username,
            path=path,
            type=type,
            offset=offset,
            limit=limit,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SessionActivityResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_session_logs_without_preload_content(
        self,
        ev_api_key: Annotated[StrictStr, Field(description="API Key")],
        ev_access_token: Annotated[StrictStr, Field(description="Access Token")],
        start_date: Annotated[Optional[datetime], Field(description="Start date of the filter data range")] = None,
        end_date: Annotated[Optional[datetime], Field(description="End date of the filter data range")] = None,
        ip_address: Annotated[Optional[StrictStr], Field(description="Used to filter session logs by ip address.")] = None,
        username: Annotated[Optional[StrictStr], Field(description="Username used for filtering a list")] = None,
        path: Annotated[Optional[StrictStr], Field(description="Path used to filter records")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Filter session logs for operation type (see table above for acceptable values)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset of the records list")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit of the records list")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Comma separated list sort params")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get activity logs

        Returns the detailed activity logs for your account. Optional query paramaters will filter the returned results based on a number of options including usernames, activity types, or date ranges.   **NOTE:** Total Results will always return as 0 to avoid quering data you're not using and stay as performant as possible.     **Operation Types** Session activity is logged with an operation type that is different from what is visible through the [activity log interface in the web file manager](/docs/account/10-activity-logs/00-activity-logs). Consult the table below to compare the two:  | File Manager Value | API Value | Notes | |-----|----|---| | Connect | PASS | | | Disconnect | EXIT | | | Upload | STOR | | | Download | RETR | | | Delete | DELE | | | Create Folder | MKD | | | Rename | RNTO | | | Move | MOVE | | | Copy | COPY | | | Compress | COMPR | | | Extract | EXTRACT | | | Shared Folders | SHARE | | | Send Files | SEND | | | Receive Files | RECV | | | _N/A_ | EDIT\\_SEND | Update send. Not shown in file manager | | Update Share | EDIT\\_SHARE| |  | Update Receive | EDIT\\_RECV | | | Delete Send | DELE\\_SEND | | | Delete Receive | DELE\\_RECV | | | Delete Share | DELE\\_SHARE | | | Create Notification | NOTIFY | | | Update Notification | EDIT\\_NTFY| | | Delete Notification | DELE\\_NTFY | | | Create User | USER | | | Update User | EDIT\\_USER | | | Delete User | DELE\\_USER | | | _N/A_ | DFA | Create direct link. Not shown in file manager | | _N/A_ | EDIT\\_DFA | Update direct link options. Not shown in file manager | | _N/A_ | DELE\\_DFA | Deactivate direct link. Not shown in file manager| 

        :param ev_api_key: API Key (required)
        :type ev_api_key: str
        :param ev_access_token: Access Token (required)
        :type ev_access_token: str
        :param start_date: Start date of the filter data range
        :type start_date: datetime
        :param end_date: End date of the filter data range
        :type end_date: datetime
        :param ip_address: Used to filter session logs by ip address.
        :type ip_address: str
        :param username: Username used for filtering a list
        :type username: str
        :param path: Path used to filter records
        :type path: str
        :param type: Filter session logs for operation type (see table above for acceptable values)
        :type type: str
        :param offset: Offset of the records list
        :type offset: int
        :param limit: Limit of the records list
        :type limit: int
        :param sort: Comma separated list sort params
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_session_logs_serialize(
            ev_api_key=ev_api_key,
            ev_access_token=ev_access_token,
            start_date=start_date,
            end_date=end_date,
            ip_address=ip_address,
            username=username,
            path=path,
            type=type,
            offset=offset,
            limit=limit,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SessionActivityResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_session_logs_serialize(
        self,
        ev_api_key,
        ev_access_token,
        start_date,
        end_date,
        ip_address,
        username,
        path,
        type,
        offset,
        limit,
        sort,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start_date is not None:
            if isinstance(start_date, datetime):
                _query_params.append(
                    (
                        'startDate',
                        start_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('startDate', start_date))
            
        if end_date is not None:
            if isinstance(end_date, datetime):
                _query_params.append(
                    (
                        'endDate',
                        end_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('endDate', end_date))
            
        if ip_address is not None:
            
            _query_params.append(('ipAddress', ip_address))
            
        if username is not None:
            
            _query_params.append(('username', username))
            
        if path is not None:
            
            _query_params.append(('path', path))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        # process the header parameters
        if ev_api_key is not None:
            _header_params['ev-api-key'] = ev_api_key
        if ev_access_token is not None:
            _header_params['ev-access-token'] = ev_access_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/activity/session',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_webhook_logs(
        self,
        ev_api_key: Annotated[StrictStr, Field(description="API Key")],
        ev_access_token: Annotated[StrictStr, Field(description="Access Token")],
        start_date: Annotated[Optional[datetime], Field(description="Earliest date of entries to include in list")] = None,
        end_date: Annotated[Optional[datetime], Field(description="Latest date of entries to include in list")] = None,
        endpoint_url: Annotated[Optional[StrictStr], Field(description="Webhook listener endpoint")] = None,
        event: Annotated[Optional[StrictStr], Field(description="Type of activity that triggered the webhook attempt")] = None,
        status_code: Annotated[Optional[StrictInt], Field(description="Response code from the webhook endpoint")] = None,
        var_resource_path: Annotated[Optional[StrictStr], Field(description="Path of the resource that triggered the webhook attempt")] = None,
        username: Annotated[Optional[StrictStr], Field(description="Filter by triggering username.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Records to skip before returning results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit of the records list")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Comma separated list sort params")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WebhookActivityResponse:
        """Get webhook logs

        Returns the webhook logs for your account. Use the available query parameters to filter the listing of activity that is returned.  **NOTE:** Total Results will always return as 0 to avoid querying data you're not using and stay as performant as possible.   **Event Types**  Webhooks are triggered by enabled event types for your account, which are configured on the [developer settings page](/docs/account/09-settings/06-developer-settings). Not all event types may be allowed for your account type. These are the valid options for event types:  - resources.upload - resources.download - resources.delete - resources.createFolder - resources.rename - resources.move - resources.copy - resources.compress - resources.extract - shares.formSubmit 

        :param ev_api_key: API Key (required)
        :type ev_api_key: str
        :param ev_access_token: Access Token (required)
        :type ev_access_token: str
        :param start_date: Earliest date of entries to include in list
        :type start_date: datetime
        :param end_date: Latest date of entries to include in list
        :type end_date: datetime
        :param endpoint_url: Webhook listener endpoint
        :type endpoint_url: str
        :param event: Type of activity that triggered the webhook attempt
        :type event: str
        :param status_code: Response code from the webhook endpoint
        :type status_code: int
        :param var_resource_path: Path of the resource that triggered the webhook attempt
        :type var_resource_path: str
        :param username: Filter by triggering username.
        :type username: str
        :param offset: Records to skip before returning results.
        :type offset: int
        :param limit: Limit of the records list
        :type limit: int
        :param sort: Comma separated list sort params
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_webhook_logs_serialize(
            ev_api_key=ev_api_key,
            ev_access_token=ev_access_token,
            start_date=start_date,
            end_date=end_date,
            endpoint_url=endpoint_url,
            event=event,
            status_code=status_code,
            var_resource_path=var_resource_path,
            username=username,
            offset=offset,
            limit=limit,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WebhookActivityResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_webhook_logs_with_http_info(
        self,
        ev_api_key: Annotated[StrictStr, Field(description="API Key")],
        ev_access_token: Annotated[StrictStr, Field(description="Access Token")],
        start_date: Annotated[Optional[datetime], Field(description="Earliest date of entries to include in list")] = None,
        end_date: Annotated[Optional[datetime], Field(description="Latest date of entries to include in list")] = None,
        endpoint_url: Annotated[Optional[StrictStr], Field(description="Webhook listener endpoint")] = None,
        event: Annotated[Optional[StrictStr], Field(description="Type of activity that triggered the webhook attempt")] = None,
        status_code: Annotated[Optional[StrictInt], Field(description="Response code from the webhook endpoint")] = None,
        var_resource_path: Annotated[Optional[StrictStr], Field(description="Path of the resource that triggered the webhook attempt")] = None,
        username: Annotated[Optional[StrictStr], Field(description="Filter by triggering username.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Records to skip before returning results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit of the records list")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Comma separated list sort params")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WebhookActivityResponse]:
        """Get webhook logs

        Returns the webhook logs for your account. Use the available query parameters to filter the listing of activity that is returned.  **NOTE:** Total Results will always return as 0 to avoid querying data you're not using and stay as performant as possible.   **Event Types**  Webhooks are triggered by enabled event types for your account, which are configured on the [developer settings page](/docs/account/09-settings/06-developer-settings). Not all event types may be allowed for your account type. These are the valid options for event types:  - resources.upload - resources.download - resources.delete - resources.createFolder - resources.rename - resources.move - resources.copy - resources.compress - resources.extract - shares.formSubmit 

        :param ev_api_key: API Key (required)
        :type ev_api_key: str
        :param ev_access_token: Access Token (required)
        :type ev_access_token: str
        :param start_date: Earliest date of entries to include in list
        :type start_date: datetime
        :param end_date: Latest date of entries to include in list
        :type end_date: datetime
        :param endpoint_url: Webhook listener endpoint
        :type endpoint_url: str
        :param event: Type of activity that triggered the webhook attempt
        :type event: str
        :param status_code: Response code from the webhook endpoint
        :type status_code: int
        :param var_resource_path: Path of the resource that triggered the webhook attempt
        :type var_resource_path: str
        :param username: Filter by triggering username.
        :type username: str
        :param offset: Records to skip before returning results.
        :type offset: int
        :param limit: Limit of the records list
        :type limit: int
        :param sort: Comma separated list sort params
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_webhook_logs_serialize(
            ev_api_key=ev_api_key,
            ev_access_token=ev_access_token,
            start_date=start_date,
            end_date=end_date,
            endpoint_url=endpoint_url,
            event=event,
            status_code=status_code,
            var_resource_path=var_resource_path,
            username=username,
            offset=offset,
            limit=limit,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WebhookActivityResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_webhook_logs_without_preload_content(
        self,
        ev_api_key: Annotated[StrictStr, Field(description="API Key")],
        ev_access_token: Annotated[StrictStr, Field(description="Access Token")],
        start_date: Annotated[Optional[datetime], Field(description="Earliest date of entries to include in list")] = None,
        end_date: Annotated[Optional[datetime], Field(description="Latest date of entries to include in list")] = None,
        endpoint_url: Annotated[Optional[StrictStr], Field(description="Webhook listener endpoint")] = None,
        event: Annotated[Optional[StrictStr], Field(description="Type of activity that triggered the webhook attempt")] = None,
        status_code: Annotated[Optional[StrictInt], Field(description="Response code from the webhook endpoint")] = None,
        var_resource_path: Annotated[Optional[StrictStr], Field(description="Path of the resource that triggered the webhook attempt")] = None,
        username: Annotated[Optional[StrictStr], Field(description="Filter by triggering username.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Records to skip before returning results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit of the records list")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Comma separated list sort params")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get webhook logs

        Returns the webhook logs for your account. Use the available query parameters to filter the listing of activity that is returned.  **NOTE:** Total Results will always return as 0 to avoid querying data you're not using and stay as performant as possible.   **Event Types**  Webhooks are triggered by enabled event types for your account, which are configured on the [developer settings page](/docs/account/09-settings/06-developer-settings). Not all event types may be allowed for your account type. These are the valid options for event types:  - resources.upload - resources.download - resources.delete - resources.createFolder - resources.rename - resources.move - resources.copy - resources.compress - resources.extract - shares.formSubmit 

        :param ev_api_key: API Key (required)
        :type ev_api_key: str
        :param ev_access_token: Access Token (required)
        :type ev_access_token: str
        :param start_date: Earliest date of entries to include in list
        :type start_date: datetime
        :param end_date: Latest date of entries to include in list
        :type end_date: datetime
        :param endpoint_url: Webhook listener endpoint
        :type endpoint_url: str
        :param event: Type of activity that triggered the webhook attempt
        :type event: str
        :param status_code: Response code from the webhook endpoint
        :type status_code: int
        :param var_resource_path: Path of the resource that triggered the webhook attempt
        :type var_resource_path: str
        :param username: Filter by triggering username.
        :type username: str
        :param offset: Records to skip before returning results.
        :type offset: int
        :param limit: Limit of the records list
        :type limit: int
        :param sort: Comma separated list sort params
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_webhook_logs_serialize(
            ev_api_key=ev_api_key,
            ev_access_token=ev_access_token,
            start_date=start_date,
            end_date=end_date,
            endpoint_url=endpoint_url,
            event=event,
            status_code=status_code,
            var_resource_path=var_resource_path,
            username=username,
            offset=offset,
            limit=limit,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WebhookActivityResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_webhook_logs_serialize(
        self,
        ev_api_key,
        ev_access_token,
        start_date,
        end_date,
        endpoint_url,
        event,
        status_code,
        var_resource_path,
        username,
        offset,
        limit,
        sort,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start_date is not None:
            if isinstance(start_date, datetime):
                _query_params.append(
                    (
                        'startDate',
                        start_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('startDate', start_date))
            
        if end_date is not None:
            if isinstance(end_date, datetime):
                _query_params.append(
                    (
                        'endDate',
                        end_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('endDate', end_date))
            
        if endpoint_url is not None:
            
            _query_params.append(('endpointUrl', endpoint_url))
            
        if event is not None:
            
            _query_params.append(('event', event))
            
        if status_code is not None:
            
            _query_params.append(('statusCode', status_code))
            
        if var_resource_path is not None:
            
            _query_params.append(('resourcePath', var_resource_path))
            
        if username is not None:
            
            _query_params.append(('username', username))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        # process the header parameters
        if ev_api_key is not None:
            _header_params['ev-api-key'] = ev_api_key
        if ev_access_token is not None:
            _header_params['ev-access-token'] = ev_access_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/activity/webhooks',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



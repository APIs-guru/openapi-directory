# coding: utf-8

"""
    CIS Automotive API

    <div style=\"\">This API provides access to our Automotive Data. Use of this API is subject to our <a href=\"https://autodealerdata.com/tos\">Terms of Service</a></div> &nbsp; <h3 style=\"\">For a quick start guide <a href=\"/APIQuickStart\">click here</a></h3> &nbsp; <div> If you signed up through RapidAPI make your test calls <a href=\"https://rapidapi.com/competitive-intelligence-solutions-llc-competitive-intelligence-solutions-llc-default/api/cis-automotive\">here</a></div> &nbsp; <div>The general workflow is to: <br/>&nbsp;<div><strong>1.</strong> Authenticate with your CIS Automotive API Keys to get a Json Web Token (JWT). Do not use RapidAPI keys.</div> <div><div><strong>2.</strong> Then use that token as an argument when calling other endpoints.</div> &nbsp; <div>Equivalent HTTP GET and POST methods are available for some endpoints. </div> &nbsp; <div>Endpoints may appear more than once on this page if they are associated with multiple tags. eg \"Sales Data\", \"Premium\", \"Pro Plan or Greater\" To see which endpoints are included in different plans look under the \"X Plan or Greater\" tags for the respective plan name.</div> &nbsp; <h3>If you signed up for our API through RapidAPI you can make your test calls <a href=\"https://rapidapi.com/competitive-intelligence-solutions-llc-competitive-intelligence-solutions-llc-default/api/cis-automotive\">on their platform</a>.  Your RapidAPI credentials will not work on this page.</h3><h3> Do not use your RapidAPI keys on this page.</h3> <h3>If you signed up with us and have an account, you must first authenticate with your API Keys  and retrieve a Json Web Token (JWT) from the /getToken endpoint to access the other endpoints.</h3>   <h3>Your JWT is a required argument to all endpoints.</h3></div>

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Optional, Union
from openapi_client.models.dealership_data_paginated_resp import DealershipDataPaginatedResp
from openapi_client.models.dealership_data_resp import DealershipDataResp
from openapi_client.models.generic_response import GenericResponse
from openapi_client.models.listing_resp import ListingResp
from openapi_client.models.similar_sale_price_resp import SimilarSalePriceResp

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DeveloperPlanOrGreaterApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def days_supply_days_supply_get_0(
        self,
        jwt: StrictStr,
        brand_name: StrictStr,
        region_name: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GenericResponse:
        """Days worth of supply left on dealer lots

        Average, median, standard deviation, population variance, and whole region average of the  days of supply left on dealer lots for a given brand and region. The average, median, stdDev, and pVar fields are calculated on a dealer by dealer basis while the whole region average treats the entire region like a single dealership.  The average field may differ from the whole region average, especially when dealers are out of  a given model.   The available brand and region names can be retrieved from their respective endpoints.

        :param jwt: (required)
        :type jwt: str
        :param brand_name: (required)
        :type brand_name: str
        :param region_name:
        :type region_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._days_supply_days_supply_get_0_serialize(
            jwt=jwt,
            brand_name=brand_name,
            region_name=region_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenericResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def days_supply_days_supply_get_0_with_http_info(
        self,
        jwt: StrictStr,
        brand_name: StrictStr,
        region_name: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GenericResponse]:
        """Days worth of supply left on dealer lots

        Average, median, standard deviation, population variance, and whole region average of the  days of supply left on dealer lots for a given brand and region. The average, median, stdDev, and pVar fields are calculated on a dealer by dealer basis while the whole region average treats the entire region like a single dealership.  The average field may differ from the whole region average, especially when dealers are out of  a given model.   The available brand and region names can be retrieved from their respective endpoints.

        :param jwt: (required)
        :type jwt: str
        :param brand_name: (required)
        :type brand_name: str
        :param region_name:
        :type region_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._days_supply_days_supply_get_0_serialize(
            jwt=jwt,
            brand_name=brand_name,
            region_name=region_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenericResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def days_supply_days_supply_get_0_without_preload_content(
        self,
        jwt: StrictStr,
        brand_name: StrictStr,
        region_name: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Days worth of supply left on dealer lots

        Average, median, standard deviation, population variance, and whole region average of the  days of supply left on dealer lots for a given brand and region. The average, median, stdDev, and pVar fields are calculated on a dealer by dealer basis while the whole region average treats the entire region like a single dealership.  The average field may differ from the whole region average, especially when dealers are out of  a given model.   The available brand and region names can be retrieved from their respective endpoints.

        :param jwt: (required)
        :type jwt: str
        :param brand_name: (required)
        :type brand_name: str
        :param region_name:
        :type region_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._days_supply_days_supply_get_0_serialize(
            jwt=jwt,
            brand_name=brand_name,
            region_name=region_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenericResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _days_supply_days_supply_get_0_serialize(
        self,
        jwt,
        brand_name,
        region_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if jwt is not None:
            
            _query_params.append(('jwt', jwt))
            
        if brand_name is not None:
            
            _query_params.append(('brandName', brand_name))
            
        if region_name is not None:
            
            _query_params.append(('regionName', region_name))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/daysSupply',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def days_to_sell_days_to_sell_get_0(
        self,
        jwt: StrictStr,
        brand_name: StrictStr,
        region_name: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GenericResponse:
        """Days a vehicle takes to sell

        Average, median, standard deviation, population variance, and whole region average of the  number of days a vehicle spends on dealer lots for a given brand and region. The average, median, stdDev, and pVar fields are calculated on a dealer by dealer basis while the whole region average treats the entire region like a single dealership.  The average field may differ from the whole region average.  The available brand and region names can be retrieved from their respective endpoints.

        :param jwt: (required)
        :type jwt: str
        :param brand_name: (required)
        :type brand_name: str
        :param region_name:
        :type region_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._days_to_sell_days_to_sell_get_0_serialize(
            jwt=jwt,
            brand_name=brand_name,
            region_name=region_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenericResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def days_to_sell_days_to_sell_get_0_with_http_info(
        self,
        jwt: StrictStr,
        brand_name: StrictStr,
        region_name: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GenericResponse]:
        """Days a vehicle takes to sell

        Average, median, standard deviation, population variance, and whole region average of the  number of days a vehicle spends on dealer lots for a given brand and region. The average, median, stdDev, and pVar fields are calculated on a dealer by dealer basis while the whole region average treats the entire region like a single dealership.  The average field may differ from the whole region average.  The available brand and region names can be retrieved from their respective endpoints.

        :param jwt: (required)
        :type jwt: str
        :param brand_name: (required)
        :type brand_name: str
        :param region_name:
        :type region_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._days_to_sell_days_to_sell_get_0_serialize(
            jwt=jwt,
            brand_name=brand_name,
            region_name=region_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenericResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def days_to_sell_days_to_sell_get_0_without_preload_content(
        self,
        jwt: StrictStr,
        brand_name: StrictStr,
        region_name: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Days a vehicle takes to sell

        Average, median, standard deviation, population variance, and whole region average of the  number of days a vehicle spends on dealer lots for a given brand and region. The average, median, stdDev, and pVar fields are calculated on a dealer by dealer basis while the whole region average treats the entire region like a single dealership.  The average field may differ from the whole region average.  The available brand and region names can be retrieved from their respective endpoints.

        :param jwt: (required)
        :type jwt: str
        :param brand_name: (required)
        :type brand_name: str
        :param region_name:
        :type region_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._days_to_sell_days_to_sell_get_0_serialize(
            jwt=jwt,
            brand_name=brand_name,
            region_name=region_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenericResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _days_to_sell_days_to_sell_get_0_serialize(
        self,
        jwt,
        brand_name,
        region_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if jwt is not None:
            
            _query_params.append(('jwt', jwt))
            
        if brand_name is not None:
            
            _query_params.append(('brandName', brand_name))
            
        if region_name is not None:
            
            _query_params.append(('regionName', region_name))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/daysToSell',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_dealers_get_dealers_by_id_get_1(
        self,
        jwt: StrictStr,
        dealer_id: StrictInt,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DealershipDataResp:
        """Premium. Dealers by ID

        Premium. Dealership information using the internal ID. Returns name, address, state, zipCode, and ID for a single dealer in the same format as the /getDealers endpoint. Dealer IDs are generally retrieved via the /getDealers or /getDealersByRegion endpoints.

        :param jwt: (required)
        :type jwt: str
        :param dealer_id: (required)
        :type dealer_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dealers_get_dealers_by_id_get_1_serialize(
            jwt=jwt,
            dealer_id=dealer_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DealershipDataResp",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_dealers_get_dealers_by_id_get_1_with_http_info(
        self,
        jwt: StrictStr,
        dealer_id: StrictInt,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DealershipDataResp]:
        """Premium. Dealers by ID

        Premium. Dealership information using the internal ID. Returns name, address, state, zipCode, and ID for a single dealer in the same format as the /getDealers endpoint. Dealer IDs are generally retrieved via the /getDealers or /getDealersByRegion endpoints.

        :param jwt: (required)
        :type jwt: str
        :param dealer_id: (required)
        :type dealer_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dealers_get_dealers_by_id_get_1_serialize(
            jwt=jwt,
            dealer_id=dealer_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DealershipDataResp",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_dealers_get_dealers_by_id_get_1_without_preload_content(
        self,
        jwt: StrictStr,
        dealer_id: StrictInt,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Premium. Dealers by ID

        Premium. Dealership information using the internal ID. Returns name, address, state, zipCode, and ID for a single dealer in the same format as the /getDealers endpoint. Dealer IDs are generally retrieved via the /getDealers or /getDealersByRegion endpoints.

        :param jwt: (required)
        :type jwt: str
        :param dealer_id: (required)
        :type dealer_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dealers_get_dealers_by_id_get_1_serialize(
            jwt=jwt,
            dealer_id=dealer_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DealershipDataResp",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_dealers_get_dealers_by_id_get_1_serialize(
        self,
        jwt,
        dealer_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if jwt is not None:
            
            _query_params.append(('jwt', jwt))
            
        if dealer_id is not None:
            
            _query_params.append(('dealerID', dealer_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/getDealersByID',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_dealers_get_dealers_by_region_get_1(
        self,
        jwt: StrictStr,
        region_name: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DealershipDataPaginatedResp:
        """Premium. Dealers in a region.

        Premium. Dealership information in a given region. Returns name, address, state, zipCode, and IDs. Results are paginated with up to 30 results per page.

        :param jwt: (required)
        :type jwt: str
        :param region_name:
        :type region_name: str
        :param page:
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dealers_get_dealers_by_region_get_1_serialize(
            jwt=jwt,
            region_name=region_name,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DealershipDataPaginatedResp",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_dealers_get_dealers_by_region_get_1_with_http_info(
        self,
        jwt: StrictStr,
        region_name: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DealershipDataPaginatedResp]:
        """Premium. Dealers in a region.

        Premium. Dealership information in a given region. Returns name, address, state, zipCode, and IDs. Results are paginated with up to 30 results per page.

        :param jwt: (required)
        :type jwt: str
        :param region_name:
        :type region_name: str
        :param page:
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dealers_get_dealers_by_region_get_1_serialize(
            jwt=jwt,
            region_name=region_name,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DealershipDataPaginatedResp",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_dealers_get_dealers_by_region_get_1_without_preload_content(
        self,
        jwt: StrictStr,
        region_name: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Premium. Dealers in a region.

        Premium. Dealership information in a given region. Returns name, address, state, zipCode, and IDs. Results are paginated with up to 30 results per page.

        :param jwt: (required)
        :type jwt: str
        :param region_name:
        :type region_name: str
        :param page:
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dealers_get_dealers_by_region_get_1_serialize(
            jwt=jwt,
            region_name=region_name,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DealershipDataPaginatedResp",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_dealers_get_dealers_by_region_get_1_serialize(
        self,
        jwt,
        region_name,
        page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if jwt is not None:
            
            _query_params.append(('jwt', jwt))
            
        if region_name is not None:
            
            _query_params.append(('regionName', region_name))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/getDealersByRegion',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_dealers_get_dealers_get_1(
        self,
        jwt: StrictStr,
        zip_code: StrictInt,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DealershipDataResp:
        """Premium. Dealers in a zip code.

        Premium. Dealership information in a given zip code using the first 4 digits. Returns name, address, state, zipCode, and IDs. For example a call with the zip code 92701 would return dealers with zip codes in the range [92700, 92709]

        :param jwt: (required)
        :type jwt: str
        :param zip_code: (required)
        :type zip_code: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dealers_get_dealers_get_1_serialize(
            jwt=jwt,
            zip_code=zip_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DealershipDataResp",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_dealers_get_dealers_get_1_with_http_info(
        self,
        jwt: StrictStr,
        zip_code: StrictInt,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DealershipDataResp]:
        """Premium. Dealers in a zip code.

        Premium. Dealership information in a given zip code using the first 4 digits. Returns name, address, state, zipCode, and IDs. For example a call with the zip code 92701 would return dealers with zip codes in the range [92700, 92709]

        :param jwt: (required)
        :type jwt: str
        :param zip_code: (required)
        :type zip_code: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dealers_get_dealers_get_1_serialize(
            jwt=jwt,
            zip_code=zip_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DealershipDataResp",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_dealers_get_dealers_get_1_without_preload_content(
        self,
        jwt: StrictStr,
        zip_code: StrictInt,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Premium. Dealers in a zip code.

        Premium. Dealership information in a given zip code using the first 4 digits. Returns name, address, state, zipCode, and IDs. For example a call with the zip code 92701 would return dealers with zip codes in the range [92700, 92709]

        :param jwt: (required)
        :type jwt: str
        :param zip_code: (required)
        :type zip_code: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dealers_get_dealers_get_1_serialize(
            jwt=jwt,
            zip_code=zip_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DealershipDataResp",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_dealers_get_dealers_get_1_serialize(
        self,
        jwt,
        zip_code,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if jwt is not None:
            
            _query_params.append(('jwt', jwt))
            
        if zip_code is not None:
            
            _query_params.append(('zipCode', zip_code))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/getDealers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_listings2_listings2_get_0(
        self,
        jwt: StrictStr,
        dealer_id: Optional[StrictInt] = None,
        zip_code: Optional[StrictInt] = None,
        latitude: Optional[Union[StrictFloat, StrictInt]] = None,
        longitude: Optional[Union[StrictFloat, StrictInt]] = None,
        radius: Optional[Union[StrictFloat, StrictInt]] = None,
        region_name: Optional[StrictStr] = None,
        brand_name: Optional[StrictStr] = None,
        model_name: Optional[StrictStr] = None,
        model_year: Optional[StrictInt] = None,
        mileage_low: Optional[StrictInt] = None,
        mileage_high: Optional[StrictInt] = None,
        start_date: Optional[date] = None,
        end_date: Optional[date] = None,
        days_back: Optional[StrictInt] = None,
        page: Optional[StrictInt] = None,
        new_cars: Optional[StrictBool] = None,
        extended_search: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListingResp:
        """Flexible Listing Search

        Generic getter for listings supporting a wide array of selection criteria. This is the new primary listing endpoint and we will phase out the older listing endpoints over time. The other listing endpoints return the same data, but are more restrictive in the available geographic and vehicle selection criteria and can be replicated by this endpoint.  Dealer selection uses the most restrictive criteria supplied. From most restrictive to least: dealerID, gps, zipCode, region. You must provide some dealer selection criteria.  It is important to note that the units in the longitude are in degrees east, not degrees west. For example the coordinates 45.53N, 100.41W correspond to Mobridge, SC  but they will be interpreted as 45.53N, 100.41E which corresponds to a point in the Gobi Desert near Jinst, Mongolia. You can fix this by converting the longitiude yourself,  or by supplying a negative value (-100.41). For this example both (X, -100.41) and (X, 259.59) would be the same point. Units on the radius are miles and a smaller radius will result in a faster response time. Maximum search radius depends on your subscription plan.   The radius value is used for GPS searches and (optionally) zipCode searches. It is ignored for searches using other location criteria. If you provide a radius value with a zipCode search, the zipCode will be mapped to GPS coordinates behind the scenes. If no radius is provided or if the zipCode to GPS mapping fails, the API will only search for vehicles at dealerships within the provided zipCode.  Listing selection logically ANDs all options given.   Time interval selection will prefer explicit start and end dates. If only one of startDate/endDate is supplied, this endpoint will use it  as an anchor and look forward or backwards by the daysBack value. If startDate is specified and endDate is not, then endDate will be set to startDate+daysBack.  Conversely if endDate is specified, but startDate is not then startDate will be set at endDate-daysBack. If neither is supplied endpoint will set endDate to today and startDate to today-daysBack.  Maximum time interval is 45 days.  Mileage selection uses the provided mileage values and returns vehicles with mileage in the range [mileageLow, mileageHigh]. If mileageLow == mileageHigh (for example both are 0 default) this endpoint will not filter based on mileage. Not all used vehicles have a mileage record available.   ExtendedSearch modifies the slice of listings returned. If false (default) it only returns vehicles satisfying lastSeen >= startDate and lastSeen < endDate. If true it will return vehicles that were in dealer's inventory at any point between startDate and endDate including vehicles that were sold after endDate. Setting extendedSearch to true will result in a slower response time.   For example: If both a region name and dealer ID are supplied the dealer ID will be used because it is the most restrictive.  If a brandName of Ford and modelYear of 2019, modelName of F-150, and newCars of False is supplied this endpoint will return  used 2019 model year Ford F-150s. If a contradictory listing selection is supplied (for example Ford + Camry) no listings will be returned because the request matched no listings.  Results are paginated in chunks of up to 20 vehicles. Prices are in the dealer's local currency (generally USD).

        :param jwt: (required)
        :type jwt: str
        :param dealer_id:
        :type dealer_id: int
        :param zip_code:
        :type zip_code: int
        :param latitude:
        :type latitude: float
        :param longitude:
        :type longitude: float
        :param radius:
        :type radius: float
        :param region_name:
        :type region_name: str
        :param brand_name:
        :type brand_name: str
        :param model_name:
        :type model_name: str
        :param model_year:
        :type model_year: int
        :param mileage_low:
        :type mileage_low: int
        :param mileage_high:
        :type mileage_high: int
        :param start_date:
        :type start_date: date
        :param end_date:
        :type end_date: date
        :param days_back:
        :type days_back: int
        :param page:
        :type page: int
        :param new_cars:
        :type new_cars: bool
        :param extended_search:
        :type extended_search: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listings2_listings2_get_0_serialize(
            jwt=jwt,
            dealer_id=dealer_id,
            zip_code=zip_code,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            region_name=region_name,
            brand_name=brand_name,
            model_name=model_name,
            model_year=model_year,
            mileage_low=mileage_low,
            mileage_high=mileage_high,
            start_date=start_date,
            end_date=end_date,
            days_back=days_back,
            page=page,
            new_cars=new_cars,
            extended_search=extended_search,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListingResp",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_listings2_listings2_get_0_with_http_info(
        self,
        jwt: StrictStr,
        dealer_id: Optional[StrictInt] = None,
        zip_code: Optional[StrictInt] = None,
        latitude: Optional[Union[StrictFloat, StrictInt]] = None,
        longitude: Optional[Union[StrictFloat, StrictInt]] = None,
        radius: Optional[Union[StrictFloat, StrictInt]] = None,
        region_name: Optional[StrictStr] = None,
        brand_name: Optional[StrictStr] = None,
        model_name: Optional[StrictStr] = None,
        model_year: Optional[StrictInt] = None,
        mileage_low: Optional[StrictInt] = None,
        mileage_high: Optional[StrictInt] = None,
        start_date: Optional[date] = None,
        end_date: Optional[date] = None,
        days_back: Optional[StrictInt] = None,
        page: Optional[StrictInt] = None,
        new_cars: Optional[StrictBool] = None,
        extended_search: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListingResp]:
        """Flexible Listing Search

        Generic getter for listings supporting a wide array of selection criteria. This is the new primary listing endpoint and we will phase out the older listing endpoints over time. The other listing endpoints return the same data, but are more restrictive in the available geographic and vehicle selection criteria and can be replicated by this endpoint.  Dealer selection uses the most restrictive criteria supplied. From most restrictive to least: dealerID, gps, zipCode, region. You must provide some dealer selection criteria.  It is important to note that the units in the longitude are in degrees east, not degrees west. For example the coordinates 45.53N, 100.41W correspond to Mobridge, SC  but they will be interpreted as 45.53N, 100.41E which corresponds to a point in the Gobi Desert near Jinst, Mongolia. You can fix this by converting the longitiude yourself,  or by supplying a negative value (-100.41). For this example both (X, -100.41) and (X, 259.59) would be the same point. Units on the radius are miles and a smaller radius will result in a faster response time. Maximum search radius depends on your subscription plan.   The radius value is used for GPS searches and (optionally) zipCode searches. It is ignored for searches using other location criteria. If you provide a radius value with a zipCode search, the zipCode will be mapped to GPS coordinates behind the scenes. If no radius is provided or if the zipCode to GPS mapping fails, the API will only search for vehicles at dealerships within the provided zipCode.  Listing selection logically ANDs all options given.   Time interval selection will prefer explicit start and end dates. If only one of startDate/endDate is supplied, this endpoint will use it  as an anchor and look forward or backwards by the daysBack value. If startDate is specified and endDate is not, then endDate will be set to startDate+daysBack.  Conversely if endDate is specified, but startDate is not then startDate will be set at endDate-daysBack. If neither is supplied endpoint will set endDate to today and startDate to today-daysBack.  Maximum time interval is 45 days.  Mileage selection uses the provided mileage values and returns vehicles with mileage in the range [mileageLow, mileageHigh]. If mileageLow == mileageHigh (for example both are 0 default) this endpoint will not filter based on mileage. Not all used vehicles have a mileage record available.   ExtendedSearch modifies the slice of listings returned. If false (default) it only returns vehicles satisfying lastSeen >= startDate and lastSeen < endDate. If true it will return vehicles that were in dealer's inventory at any point between startDate and endDate including vehicles that were sold after endDate. Setting extendedSearch to true will result in a slower response time.   For example: If both a region name and dealer ID are supplied the dealer ID will be used because it is the most restrictive.  If a brandName of Ford and modelYear of 2019, modelName of F-150, and newCars of False is supplied this endpoint will return  used 2019 model year Ford F-150s. If a contradictory listing selection is supplied (for example Ford + Camry) no listings will be returned because the request matched no listings.  Results are paginated in chunks of up to 20 vehicles. Prices are in the dealer's local currency (generally USD).

        :param jwt: (required)
        :type jwt: str
        :param dealer_id:
        :type dealer_id: int
        :param zip_code:
        :type zip_code: int
        :param latitude:
        :type latitude: float
        :param longitude:
        :type longitude: float
        :param radius:
        :type radius: float
        :param region_name:
        :type region_name: str
        :param brand_name:
        :type brand_name: str
        :param model_name:
        :type model_name: str
        :param model_year:
        :type model_year: int
        :param mileage_low:
        :type mileage_low: int
        :param mileage_high:
        :type mileage_high: int
        :param start_date:
        :type start_date: date
        :param end_date:
        :type end_date: date
        :param days_back:
        :type days_back: int
        :param page:
        :type page: int
        :param new_cars:
        :type new_cars: bool
        :param extended_search:
        :type extended_search: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listings2_listings2_get_0_serialize(
            jwt=jwt,
            dealer_id=dealer_id,
            zip_code=zip_code,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            region_name=region_name,
            brand_name=brand_name,
            model_name=model_name,
            model_year=model_year,
            mileage_low=mileage_low,
            mileage_high=mileage_high,
            start_date=start_date,
            end_date=end_date,
            days_back=days_back,
            page=page,
            new_cars=new_cars,
            extended_search=extended_search,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListingResp",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_listings2_listings2_get_0_without_preload_content(
        self,
        jwt: StrictStr,
        dealer_id: Optional[StrictInt] = None,
        zip_code: Optional[StrictInt] = None,
        latitude: Optional[Union[StrictFloat, StrictInt]] = None,
        longitude: Optional[Union[StrictFloat, StrictInt]] = None,
        radius: Optional[Union[StrictFloat, StrictInt]] = None,
        region_name: Optional[StrictStr] = None,
        brand_name: Optional[StrictStr] = None,
        model_name: Optional[StrictStr] = None,
        model_year: Optional[StrictInt] = None,
        mileage_low: Optional[StrictInt] = None,
        mileage_high: Optional[StrictInt] = None,
        start_date: Optional[date] = None,
        end_date: Optional[date] = None,
        days_back: Optional[StrictInt] = None,
        page: Optional[StrictInt] = None,
        new_cars: Optional[StrictBool] = None,
        extended_search: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Flexible Listing Search

        Generic getter for listings supporting a wide array of selection criteria. This is the new primary listing endpoint and we will phase out the older listing endpoints over time. The other listing endpoints return the same data, but are more restrictive in the available geographic and vehicle selection criteria and can be replicated by this endpoint.  Dealer selection uses the most restrictive criteria supplied. From most restrictive to least: dealerID, gps, zipCode, region. You must provide some dealer selection criteria.  It is important to note that the units in the longitude are in degrees east, not degrees west. For example the coordinates 45.53N, 100.41W correspond to Mobridge, SC  but they will be interpreted as 45.53N, 100.41E which corresponds to a point in the Gobi Desert near Jinst, Mongolia. You can fix this by converting the longitiude yourself,  or by supplying a negative value (-100.41). For this example both (X, -100.41) and (X, 259.59) would be the same point. Units on the radius are miles and a smaller radius will result in a faster response time. Maximum search radius depends on your subscription plan.   The radius value is used for GPS searches and (optionally) zipCode searches. It is ignored for searches using other location criteria. If you provide a radius value with a zipCode search, the zipCode will be mapped to GPS coordinates behind the scenes. If no radius is provided or if the zipCode to GPS mapping fails, the API will only search for vehicles at dealerships within the provided zipCode.  Listing selection logically ANDs all options given.   Time interval selection will prefer explicit start and end dates. If only one of startDate/endDate is supplied, this endpoint will use it  as an anchor and look forward or backwards by the daysBack value. If startDate is specified and endDate is not, then endDate will be set to startDate+daysBack.  Conversely if endDate is specified, but startDate is not then startDate will be set at endDate-daysBack. If neither is supplied endpoint will set endDate to today and startDate to today-daysBack.  Maximum time interval is 45 days.  Mileage selection uses the provided mileage values and returns vehicles with mileage in the range [mileageLow, mileageHigh]. If mileageLow == mileageHigh (for example both are 0 default) this endpoint will not filter based on mileage. Not all used vehicles have a mileage record available.   ExtendedSearch modifies the slice of listings returned. If false (default) it only returns vehicles satisfying lastSeen >= startDate and lastSeen < endDate. If true it will return vehicles that were in dealer's inventory at any point between startDate and endDate including vehicles that were sold after endDate. Setting extendedSearch to true will result in a slower response time.   For example: If both a region name and dealer ID are supplied the dealer ID will be used because it is the most restrictive.  If a brandName of Ford and modelYear of 2019, modelName of F-150, and newCars of False is supplied this endpoint will return  used 2019 model year Ford F-150s. If a contradictory listing selection is supplied (for example Ford + Camry) no listings will be returned because the request matched no listings.  Results are paginated in chunks of up to 20 vehicles. Prices are in the dealer's local currency (generally USD).

        :param jwt: (required)
        :type jwt: str
        :param dealer_id:
        :type dealer_id: int
        :param zip_code:
        :type zip_code: int
        :param latitude:
        :type latitude: float
        :param longitude:
        :type longitude: float
        :param radius:
        :type radius: float
        :param region_name:
        :type region_name: str
        :param brand_name:
        :type brand_name: str
        :param model_name:
        :type model_name: str
        :param model_year:
        :type model_year: int
        :param mileage_low:
        :type mileage_low: int
        :param mileage_high:
        :type mileage_high: int
        :param start_date:
        :type start_date: date
        :param end_date:
        :type end_date: date
        :param days_back:
        :type days_back: int
        :param page:
        :type page: int
        :param new_cars:
        :type new_cars: bool
        :param extended_search:
        :type extended_search: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listings2_listings2_get_0_serialize(
            jwt=jwt,
            dealer_id=dealer_id,
            zip_code=zip_code,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            region_name=region_name,
            brand_name=brand_name,
            model_name=model_name,
            model_year=model_year,
            mileage_low=mileage_low,
            mileage_high=mileage_high,
            start_date=start_date,
            end_date=end_date,
            days_back=days_back,
            page=page,
            new_cars=new_cars,
            extended_search=extended_search,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListingResp",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_listings2_listings2_get_0_serialize(
        self,
        jwt,
        dealer_id,
        zip_code,
        latitude,
        longitude,
        radius,
        region_name,
        brand_name,
        model_name,
        model_year,
        mileage_low,
        mileage_high,
        start_date,
        end_date,
        days_back,
        page,
        new_cars,
        extended_search,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if jwt is not None:
            
            _query_params.append(('jwt', jwt))
            
        if dealer_id is not None:
            
            _query_params.append(('dealerID', dealer_id))
            
        if zip_code is not None:
            
            _query_params.append(('zipCode', zip_code))
            
        if latitude is not None:
            
            _query_params.append(('latitude', latitude))
            
        if longitude is not None:
            
            _query_params.append(('longitude', longitude))
            
        if radius is not None:
            
            _query_params.append(('radius', radius))
            
        if region_name is not None:
            
            _query_params.append(('regionName', region_name))
            
        if brand_name is not None:
            
            _query_params.append(('brandName', brand_name))
            
        if model_name is not None:
            
            _query_params.append(('modelName', model_name))
            
        if model_year is not None:
            
            _query_params.append(('modelYear', model_year))
            
        if mileage_low is not None:
            
            _query_params.append(('mileageLow', mileage_low))
            
        if mileage_high is not None:
            
            _query_params.append(('mileageHigh', mileage_high))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'startDate',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('startDate', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'endDate',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('endDate', end_date))
            
        if days_back is not None:
            
            _query_params.append(('daysBack', days_back))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if new_cars is not None:
            
            _query_params.append(('newCars', new_cars))
            
        if extended_search is not None:
            
            _query_params.append(('extendedSearch', extended_search))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/listings2',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_market4_valuation_get_2(
        self,
        jwt: StrictStr,
        vin: StrictStr,
        dealer_id: Optional[StrictInt] = None,
        zip_code: Optional[StrictInt] = None,
        latitude: Optional[Union[StrictFloat, StrictInt]] = None,
        longitude: Optional[Union[StrictFloat, StrictInt]] = None,
        radius: Optional[Union[StrictFloat, StrictInt]] = None,
        region_name: Optional[StrictStr] = None,
        mileage_low: Optional[StrictInt] = None,
        mileage_high: Optional[StrictInt] = None,
        start_date: Optional[date] = None,
        end_date: Optional[date] = None,
        days_back: Optional[StrictInt] = None,
        new_cars: Optional[StrictBool] = None,
        extended_search: Optional[StrictBool] = None,
        same_year: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SimilarSalePriceResp:
        """Premium. Simple Vehicle Market Report Over Arbitrary Locations and Vehicles.

        Premium. Provides the average, stdDev, and count, of the sale price and mileage of similar new or used vehicles based off the provided VIN  and matching the provided other search criteria. This endpoint can be easily used to determine market values in arbitrary geographic locations (like a city) for specific vehicles. See /listings2 endpoint for documentation on location, vehicle, and time search parameters.  Date selection is restricted by your subscription tier, same as with the /listings2 endpoint. Optionally restricts report to vehicles of the same model year. 

        :param jwt: (required)
        :type jwt: str
        :param vin: (required)
        :type vin: str
        :param dealer_id:
        :type dealer_id: int
        :param zip_code:
        :type zip_code: int
        :param latitude:
        :type latitude: float
        :param longitude:
        :type longitude: float
        :param radius:
        :type radius: float
        :param region_name:
        :type region_name: str
        :param mileage_low:
        :type mileage_low: int
        :param mileage_high:
        :type mileage_high: int
        :param start_date:
        :type start_date: date
        :param end_date:
        :type end_date: date
        :param days_back:
        :type days_back: int
        :param new_cars:
        :type new_cars: bool
        :param extended_search:
        :type extended_search: bool
        :param same_year:
        :type same_year: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_market4_valuation_get_2_serialize(
            jwt=jwt,
            vin=vin,
            dealer_id=dealer_id,
            zip_code=zip_code,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            region_name=region_name,
            mileage_low=mileage_low,
            mileage_high=mileage_high,
            start_date=start_date,
            end_date=end_date,
            days_back=days_back,
            new_cars=new_cars,
            extended_search=extended_search,
            same_year=same_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SimilarSalePriceResp",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_market4_valuation_get_2_with_http_info(
        self,
        jwt: StrictStr,
        vin: StrictStr,
        dealer_id: Optional[StrictInt] = None,
        zip_code: Optional[StrictInt] = None,
        latitude: Optional[Union[StrictFloat, StrictInt]] = None,
        longitude: Optional[Union[StrictFloat, StrictInt]] = None,
        radius: Optional[Union[StrictFloat, StrictInt]] = None,
        region_name: Optional[StrictStr] = None,
        mileage_low: Optional[StrictInt] = None,
        mileage_high: Optional[StrictInt] = None,
        start_date: Optional[date] = None,
        end_date: Optional[date] = None,
        days_back: Optional[StrictInt] = None,
        new_cars: Optional[StrictBool] = None,
        extended_search: Optional[StrictBool] = None,
        same_year: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SimilarSalePriceResp]:
        """Premium. Simple Vehicle Market Report Over Arbitrary Locations and Vehicles.

        Premium. Provides the average, stdDev, and count, of the sale price and mileage of similar new or used vehicles based off the provided VIN  and matching the provided other search criteria. This endpoint can be easily used to determine market values in arbitrary geographic locations (like a city) for specific vehicles. See /listings2 endpoint for documentation on location, vehicle, and time search parameters.  Date selection is restricted by your subscription tier, same as with the /listings2 endpoint. Optionally restricts report to vehicles of the same model year. 

        :param jwt: (required)
        :type jwt: str
        :param vin: (required)
        :type vin: str
        :param dealer_id:
        :type dealer_id: int
        :param zip_code:
        :type zip_code: int
        :param latitude:
        :type latitude: float
        :param longitude:
        :type longitude: float
        :param radius:
        :type radius: float
        :param region_name:
        :type region_name: str
        :param mileage_low:
        :type mileage_low: int
        :param mileage_high:
        :type mileage_high: int
        :param start_date:
        :type start_date: date
        :param end_date:
        :type end_date: date
        :param days_back:
        :type days_back: int
        :param new_cars:
        :type new_cars: bool
        :param extended_search:
        :type extended_search: bool
        :param same_year:
        :type same_year: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_market4_valuation_get_2_serialize(
            jwt=jwt,
            vin=vin,
            dealer_id=dealer_id,
            zip_code=zip_code,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            region_name=region_name,
            mileage_low=mileage_low,
            mileage_high=mileage_high,
            start_date=start_date,
            end_date=end_date,
            days_back=days_back,
            new_cars=new_cars,
            extended_search=extended_search,
            same_year=same_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SimilarSalePriceResp",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_market4_valuation_get_2_without_preload_content(
        self,
        jwt: StrictStr,
        vin: StrictStr,
        dealer_id: Optional[StrictInt] = None,
        zip_code: Optional[StrictInt] = None,
        latitude: Optional[Union[StrictFloat, StrictInt]] = None,
        longitude: Optional[Union[StrictFloat, StrictInt]] = None,
        radius: Optional[Union[StrictFloat, StrictInt]] = None,
        region_name: Optional[StrictStr] = None,
        mileage_low: Optional[StrictInt] = None,
        mileage_high: Optional[StrictInt] = None,
        start_date: Optional[date] = None,
        end_date: Optional[date] = None,
        days_back: Optional[StrictInt] = None,
        new_cars: Optional[StrictBool] = None,
        extended_search: Optional[StrictBool] = None,
        same_year: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Premium. Simple Vehicle Market Report Over Arbitrary Locations and Vehicles.

        Premium. Provides the average, stdDev, and count, of the sale price and mileage of similar new or used vehicles based off the provided VIN  and matching the provided other search criteria. This endpoint can be easily used to determine market values in arbitrary geographic locations (like a city) for specific vehicles. See /listings2 endpoint for documentation on location, vehicle, and time search parameters.  Date selection is restricted by your subscription tier, same as with the /listings2 endpoint. Optionally restricts report to vehicles of the same model year. 

        :param jwt: (required)
        :type jwt: str
        :param vin: (required)
        :type vin: str
        :param dealer_id:
        :type dealer_id: int
        :param zip_code:
        :type zip_code: int
        :param latitude:
        :type latitude: float
        :param longitude:
        :type longitude: float
        :param radius:
        :type radius: float
        :param region_name:
        :type region_name: str
        :param mileage_low:
        :type mileage_low: int
        :param mileage_high:
        :type mileage_high: int
        :param start_date:
        :type start_date: date
        :param end_date:
        :type end_date: date
        :param days_back:
        :type days_back: int
        :param new_cars:
        :type new_cars: bool
        :param extended_search:
        :type extended_search: bool
        :param same_year:
        :type same_year: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_market4_valuation_get_2_serialize(
            jwt=jwt,
            vin=vin,
            dealer_id=dealer_id,
            zip_code=zip_code,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            region_name=region_name,
            mileage_low=mileage_low,
            mileage_high=mileage_high,
            start_date=start_date,
            end_date=end_date,
            days_back=days_back,
            new_cars=new_cars,
            extended_search=extended_search,
            same_year=same_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SimilarSalePriceResp",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_market4_valuation_get_2_serialize(
        self,
        jwt,
        vin,
        dealer_id,
        zip_code,
        latitude,
        longitude,
        radius,
        region_name,
        mileage_low,
        mileage_high,
        start_date,
        end_date,
        days_back,
        new_cars,
        extended_search,
        same_year,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if jwt is not None:
            
            _query_params.append(('jwt', jwt))
            
        if vin is not None:
            
            _query_params.append(('vin', vin))
            
        if dealer_id is not None:
            
            _query_params.append(('dealerID', dealer_id))
            
        if zip_code is not None:
            
            _query_params.append(('zipCode', zip_code))
            
        if latitude is not None:
            
            _query_params.append(('latitude', latitude))
            
        if longitude is not None:
            
            _query_params.append(('longitude', longitude))
            
        if radius is not None:
            
            _query_params.append(('radius', radius))
            
        if region_name is not None:
            
            _query_params.append(('regionName', region_name))
            
        if mileage_low is not None:
            
            _query_params.append(('mileageLow', mileage_low))
            
        if mileage_high is not None:
            
            _query_params.append(('mileageHigh', mileage_high))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'startDate',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('startDate', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'endDate',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('endDate', end_date))
            
        if days_back is not None:
            
            _query_params.append(('daysBack', days_back))
            
        if new_cars is not None:
            
            _query_params.append(('newCars', new_cars))
            
        if extended_search is not None:
            
            _query_params.append(('extendedSearch', extended_search))
            
        if same_year is not None:
            
            _query_params.append(('sameYear', same_year))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/valuation',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



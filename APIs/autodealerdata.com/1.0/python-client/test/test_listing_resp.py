# coding: utf-8

"""
    CIS Automotive API

    <div style=\"\">This API provides access to our Automotive Data. Use of this API is subject to our <a href=\"https://autodealerdata.com/tos\">Terms of Service</a></div> &nbsp; <h3 style=\"\">For a quick start guide <a href=\"/APIQuickStart\">click here</a></h3> &nbsp; <div> If you signed up through RapidAPI make your test calls <a href=\"https://rapidapi.com/competitive-intelligence-solutions-llc-competitive-intelligence-solutions-llc-default/api/cis-automotive\">here</a></div> &nbsp; <div>The general workflow is to: <br/>&nbsp;<div><strong>1.</strong> Authenticate with your CIS Automotive API Keys to get a Json Web Token (JWT). Do not use RapidAPI keys.</div> <div><div><strong>2.</strong> Then use that token as an argument when calling other endpoints.</div> &nbsp; <div>Equivalent HTTP GET and POST methods are available for some endpoints. </div> &nbsp; <div>Endpoints may appear more than once on this page if they are associated with multiple tags. eg \"Sales Data\", \"Premium\", \"Pro Plan or Greater\" To see which endpoints are included in different plans look under the \"X Plan or Greater\" tags for the respective plan name.</div> &nbsp; <h3>If you signed up for our API through RapidAPI you can make your test calls <a href=\"https://rapidapi.com/competitive-intelligence-solutions-llc-competitive-intelligence-solutions-llc-default/api/cis-automotive\">on their platform</a>.  Your RapidAPI credentials will not work on this page.</h3><h3> Do not use your RapidAPI keys on this page.</h3> <h3>If you signed up with us and have an account, you must first authenticate with your API Keys  and retrieve a Json Web Token (JWT) from the /getToken endpoint to access the other endpoints.</h3>   <h3>Your JWT is a required argument to all endpoints.</h3></div>

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.listing_resp import ListingResp

class TestListingResp(unittest.TestCase):
    """ListingResp unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListingResp:
        """Test ListingResp
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListingResp`
        """
        model = ListingResp()
        if include_optional:
            return ListingResp(
                brand_name = '',
                cache_time_limit = 56,
                condition = '',
                data = openapi_client.models.listing_resp_paginated.ListingRespPaginated(
                    listings = [
                        openapi_client.models.listing.Listing(
                            ask_price = 1.337, 
                            brand_name = '', 
                            color = '', 
                            dealer_id = 56, 
                            first_seen = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            interior_color = '', 
                            is_new = True, 
                            last_seen = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            mileage = 1.337, 
                            model_name = '', 
                            msrp = 1.337, 
                            vin = '', 
                            vin_decode = openapi_client.models.vindecode.Vindecode(), 
                            year = 1.337, )
                        ], 
                    max_pages = 56, 
                    page = 56, ),
                end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                model_name = '',
                msg = '',
                region_name = '',
                start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date()
            )
        else:
            return ListingResp(
                data = openapi_client.models.listing_resp_paginated.ListingRespPaginated(
                    listings = [
                        openapi_client.models.listing.Listing(
                            ask_price = 1.337, 
                            brand_name = '', 
                            color = '', 
                            dealer_id = 56, 
                            first_seen = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            interior_color = '', 
                            is_new = True, 
                            last_seen = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            mileage = 1.337, 
                            model_name = '', 
                            msrp = 1.337, 
                            vin = '', 
                            vin_decode = openapi_client.models.vindecode.Vindecode(), 
                            year = 1.337, )
                        ], 
                    max_pages = 56, 
                    page = 56, ),
        )
        """

    def testListingResp(self):
        """Test ListingResp"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    LotaData

    Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address import Address
from openapi_client.models.contact_detail import ContactDetail
from openapi_client.models.feature_reference import FeatureReference
from openapi_client.models.geo_pt import GeoPt
from openapi_client.models.image_meta import ImageMeta
from openapi_client.models.timeframe import Timeframe
from openapi_client.models.virtual_location import VirtualLocation
from typing import Optional, Set
from typing_extensions import Self

class PlaceDetail(BaseModel):
    """
    PlaceDetail
    """ # noqa: E501
    ambience: Optional[List[FeatureReference]] = Field(default=None, description="expected mood and feel of the event")
    category: Optional[List[FeatureReference]] = Field(default=None, description="Associated PlaceCategory. May be multiple (Tier 1)")
    contact: Optional[ContactDetail] = None
    function: Optional[List[FeatureReference]] = Field(default=None, description="PlaceFunction. (Tier 2 taxonomy)")
    opening_hours: Optional[List[Timeframe]] = Field(default=None, alias="openingHours")
    photo: Optional[List[ImageMeta]] = None
    id: Optional[StrictStr] = Field(default=None, alias="@id")
    type: Optional[StrictStr] = Field(default=None, description="Type of place where Place is a physical address, LocalBusiness is any type of comercial property, AdministrativeArea is a political or colloquial area, and Virtual is out of this world", alias="@type")
    address: Optional[Address] = None
    geo: Optional[GeoPt] = None
    geometry: Optional[Dict[str, Any]] = Field(default=None, description="Shape defined per GeoJSON spec")
    location: Optional[VirtualLocation] = None
    logo: Optional[ImageMeta] = None
    name: Optional[StrictStr] = None
    tag: Optional[List[FeatureReference]] = None
    __properties: ClassVar[List[str]] = ["@id", "@type", "address", "geo", "geometry", "location", "logo", "name", "tag"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Place', 'LocalBusiness', 'AdministrativeArea', 'TouristAttraction', 'Landform', 'LandmarksOrHistoricalBuildings', 'Residence', 'Virtual']):
            raise ValueError("must be one of enum values ('Place', 'LocalBusiness', 'AdministrativeArea', 'TouristAttraction', 'Landform', 'LandmarksOrHistoricalBuildings', 'Residence', 'Virtual')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlaceDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geo
        if self.geo:
            _dict['geo'] = self.geo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of logo
        if self.logo:
            _dict['logo'] = self.logo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tag (list)
        _items = []
        if self.tag:
            for _item_tag in self.tag:
                if _item_tag:
                    _items.append(_item_tag.to_dict())
            _dict['tag'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlaceDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "@id": obj.get("@id"),
            "@type": obj.get("@type"),
            "address": Address.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "geo": GeoPt.from_dict(obj["geo"]) if obj.get("geo") is not None else None,
            "geometry": obj.get("geometry"),
            "location": VirtualLocation.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "logo": ImageMeta.from_dict(obj["logo"]) if obj.get("logo") is not None else None,
            "name": obj.get("name"),
            "tag": [FeatureReference.from_dict(_item) for _item in obj["tag"]] if obj.get("tag") is not None else None
        })
        return _obj



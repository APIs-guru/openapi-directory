# coding: utf-8

"""
    LotaData

    Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.place_detail import PlaceDetail
from openapi_client.models.places_search_response import PlacesSearchResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class PlacesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def places_get(
        self,
        fieldset: Annotated[StrictStr, Field(description="Return results starting at specified offset (summary, context, detail)")],
        category: Annotated[Optional[List[StrictStr]], Field(description="List of required PlaceCategory ids (Tier 1)")] = None,
        function: Annotated[Optional[List[StrictStr]], Field(description="List of required PlaceFunction ids (Tier 2)")] = None,
        ambience: Annotated[Optional[List[StrictStr]], Field(description="List of required ambience ids")] = None,
        tag: Annotated[Optional[List[StrictStr]], Field(description="List of required tags")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Specific PlaceType to return")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Match on place names")] = None,
        exact: Annotated[Optional[StrictBool], Field(description="Require an exact name match")] = None,
        capacity_min: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Min capacity at location")] = None,
        capacity_max: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Min capacity at location")] = None,
        street: Annotated[Optional[StrictStr], Field(description="Address of the place or street component of the address")] = None,
        locality: Annotated[Optional[StrictStr], Field(description="city, town, or neighborhood of the place")] = None,
        region: Annotated[Optional[StrictStr], Field(description="region or state")] = None,
        postal_code: Annotated[Optional[StrictStr], Field(description="Postal or zip code")] = None,
        country: Annotated[Optional[StrictStr], Field(description="country component of the address")] = None,
        center: Annotated[Optional[StrictStr], Field(description="latitude,longitude of the origin point")] = None,
        radius: Annotated[Optional[StrictInt], Field(description="Distance from origin in meters")] = None,
        bbox: Annotated[Optional[List[StrictStr]], Field(description="Corner of a bounding box (lat,lng). Requires 0 or 2 pairs")] = None,
        polygon: Annotated[Optional[List[StrictStr]], Field(description="Closed custom polygon. Ordered list of lat,lng pairs")] = None,
        within: Annotated[Optional[StrictStr], Field(description="Search within specified geopolitical place id")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Return results starting at specified offset")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Max results to return")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PlacesSearchResponse:
        """Venues, landmarks, regions, these are all places to search.


        :param fieldset: Return results starting at specified offset (summary, context, detail) (required)
        :type fieldset: str
        :param category: List of required PlaceCategory ids (Tier 1)
        :type category: List[str]
        :param function: List of required PlaceFunction ids (Tier 2)
        :type function: List[str]
        :param ambience: List of required ambience ids
        :type ambience: List[str]
        :param tag: List of required tags
        :type tag: List[str]
        :param type: Specific PlaceType to return
        :type type: str
        :param name: Match on place names
        :type name: str
        :param exact: Require an exact name match
        :type exact: bool
        :param capacity_min: Min capacity at location
        :type capacity_min: float
        :param capacity_max: Min capacity at location
        :type capacity_max: float
        :param street: Address of the place or street component of the address
        :type street: str
        :param locality: city, town, or neighborhood of the place
        :type locality: str
        :param region: region or state
        :type region: str
        :param postal_code: Postal or zip code
        :type postal_code: str
        :param country: country component of the address
        :type country: str
        :param center: latitude,longitude of the origin point
        :type center: str
        :param radius: Distance from origin in meters
        :type radius: int
        :param bbox: Corner of a bounding box (lat,lng). Requires 0 or 2 pairs
        :type bbox: List[str]
        :param polygon: Closed custom polygon. Ordered list of lat,lng pairs
        :type polygon: List[str]
        :param within: Search within specified geopolitical place id
        :type within: str
        :param offset: Return results starting at specified offset
        :type offset: int
        :param limit: Max results to return
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._places_get_serialize(
            fieldset=fieldset,
            category=category,
            function=function,
            ambience=ambience,
            tag=tag,
            type=type,
            name=name,
            exact=exact,
            capacity_min=capacity_min,
            capacity_max=capacity_max,
            street=street,
            locality=locality,
            region=region,
            postal_code=postal_code,
            country=country,
            center=center,
            radius=radius,
            bbox=bbox,
            polygon=polygon,
            within=within,
            offset=offset,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PlacesSearchResponse",
            '400': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def places_get_with_http_info(
        self,
        fieldset: Annotated[StrictStr, Field(description="Return results starting at specified offset (summary, context, detail)")],
        category: Annotated[Optional[List[StrictStr]], Field(description="List of required PlaceCategory ids (Tier 1)")] = None,
        function: Annotated[Optional[List[StrictStr]], Field(description="List of required PlaceFunction ids (Tier 2)")] = None,
        ambience: Annotated[Optional[List[StrictStr]], Field(description="List of required ambience ids")] = None,
        tag: Annotated[Optional[List[StrictStr]], Field(description="List of required tags")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Specific PlaceType to return")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Match on place names")] = None,
        exact: Annotated[Optional[StrictBool], Field(description="Require an exact name match")] = None,
        capacity_min: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Min capacity at location")] = None,
        capacity_max: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Min capacity at location")] = None,
        street: Annotated[Optional[StrictStr], Field(description="Address of the place or street component of the address")] = None,
        locality: Annotated[Optional[StrictStr], Field(description="city, town, or neighborhood of the place")] = None,
        region: Annotated[Optional[StrictStr], Field(description="region or state")] = None,
        postal_code: Annotated[Optional[StrictStr], Field(description="Postal or zip code")] = None,
        country: Annotated[Optional[StrictStr], Field(description="country component of the address")] = None,
        center: Annotated[Optional[StrictStr], Field(description="latitude,longitude of the origin point")] = None,
        radius: Annotated[Optional[StrictInt], Field(description="Distance from origin in meters")] = None,
        bbox: Annotated[Optional[List[StrictStr]], Field(description="Corner of a bounding box (lat,lng). Requires 0 or 2 pairs")] = None,
        polygon: Annotated[Optional[List[StrictStr]], Field(description="Closed custom polygon. Ordered list of lat,lng pairs")] = None,
        within: Annotated[Optional[StrictStr], Field(description="Search within specified geopolitical place id")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Return results starting at specified offset")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Max results to return")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PlacesSearchResponse]:
        """Venues, landmarks, regions, these are all places to search.


        :param fieldset: Return results starting at specified offset (summary, context, detail) (required)
        :type fieldset: str
        :param category: List of required PlaceCategory ids (Tier 1)
        :type category: List[str]
        :param function: List of required PlaceFunction ids (Tier 2)
        :type function: List[str]
        :param ambience: List of required ambience ids
        :type ambience: List[str]
        :param tag: List of required tags
        :type tag: List[str]
        :param type: Specific PlaceType to return
        :type type: str
        :param name: Match on place names
        :type name: str
        :param exact: Require an exact name match
        :type exact: bool
        :param capacity_min: Min capacity at location
        :type capacity_min: float
        :param capacity_max: Min capacity at location
        :type capacity_max: float
        :param street: Address of the place or street component of the address
        :type street: str
        :param locality: city, town, or neighborhood of the place
        :type locality: str
        :param region: region or state
        :type region: str
        :param postal_code: Postal or zip code
        :type postal_code: str
        :param country: country component of the address
        :type country: str
        :param center: latitude,longitude of the origin point
        :type center: str
        :param radius: Distance from origin in meters
        :type radius: int
        :param bbox: Corner of a bounding box (lat,lng). Requires 0 or 2 pairs
        :type bbox: List[str]
        :param polygon: Closed custom polygon. Ordered list of lat,lng pairs
        :type polygon: List[str]
        :param within: Search within specified geopolitical place id
        :type within: str
        :param offset: Return results starting at specified offset
        :type offset: int
        :param limit: Max results to return
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._places_get_serialize(
            fieldset=fieldset,
            category=category,
            function=function,
            ambience=ambience,
            tag=tag,
            type=type,
            name=name,
            exact=exact,
            capacity_min=capacity_min,
            capacity_max=capacity_max,
            street=street,
            locality=locality,
            region=region,
            postal_code=postal_code,
            country=country,
            center=center,
            radius=radius,
            bbox=bbox,
            polygon=polygon,
            within=within,
            offset=offset,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PlacesSearchResponse",
            '400': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def places_get_without_preload_content(
        self,
        fieldset: Annotated[StrictStr, Field(description="Return results starting at specified offset (summary, context, detail)")],
        category: Annotated[Optional[List[StrictStr]], Field(description="List of required PlaceCategory ids (Tier 1)")] = None,
        function: Annotated[Optional[List[StrictStr]], Field(description="List of required PlaceFunction ids (Tier 2)")] = None,
        ambience: Annotated[Optional[List[StrictStr]], Field(description="List of required ambience ids")] = None,
        tag: Annotated[Optional[List[StrictStr]], Field(description="List of required tags")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Specific PlaceType to return")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Match on place names")] = None,
        exact: Annotated[Optional[StrictBool], Field(description="Require an exact name match")] = None,
        capacity_min: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Min capacity at location")] = None,
        capacity_max: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Min capacity at location")] = None,
        street: Annotated[Optional[StrictStr], Field(description="Address of the place or street component of the address")] = None,
        locality: Annotated[Optional[StrictStr], Field(description="city, town, or neighborhood of the place")] = None,
        region: Annotated[Optional[StrictStr], Field(description="region or state")] = None,
        postal_code: Annotated[Optional[StrictStr], Field(description="Postal or zip code")] = None,
        country: Annotated[Optional[StrictStr], Field(description="country component of the address")] = None,
        center: Annotated[Optional[StrictStr], Field(description="latitude,longitude of the origin point")] = None,
        radius: Annotated[Optional[StrictInt], Field(description="Distance from origin in meters")] = None,
        bbox: Annotated[Optional[List[StrictStr]], Field(description="Corner of a bounding box (lat,lng). Requires 0 or 2 pairs")] = None,
        polygon: Annotated[Optional[List[StrictStr]], Field(description="Closed custom polygon. Ordered list of lat,lng pairs")] = None,
        within: Annotated[Optional[StrictStr], Field(description="Search within specified geopolitical place id")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Return results starting at specified offset")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Max results to return")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Venues, landmarks, regions, these are all places to search.


        :param fieldset: Return results starting at specified offset (summary, context, detail) (required)
        :type fieldset: str
        :param category: List of required PlaceCategory ids (Tier 1)
        :type category: List[str]
        :param function: List of required PlaceFunction ids (Tier 2)
        :type function: List[str]
        :param ambience: List of required ambience ids
        :type ambience: List[str]
        :param tag: List of required tags
        :type tag: List[str]
        :param type: Specific PlaceType to return
        :type type: str
        :param name: Match on place names
        :type name: str
        :param exact: Require an exact name match
        :type exact: bool
        :param capacity_min: Min capacity at location
        :type capacity_min: float
        :param capacity_max: Min capacity at location
        :type capacity_max: float
        :param street: Address of the place or street component of the address
        :type street: str
        :param locality: city, town, or neighborhood of the place
        :type locality: str
        :param region: region or state
        :type region: str
        :param postal_code: Postal or zip code
        :type postal_code: str
        :param country: country component of the address
        :type country: str
        :param center: latitude,longitude of the origin point
        :type center: str
        :param radius: Distance from origin in meters
        :type radius: int
        :param bbox: Corner of a bounding box (lat,lng). Requires 0 or 2 pairs
        :type bbox: List[str]
        :param polygon: Closed custom polygon. Ordered list of lat,lng pairs
        :type polygon: List[str]
        :param within: Search within specified geopolitical place id
        :type within: str
        :param offset: Return results starting at specified offset
        :type offset: int
        :param limit: Max results to return
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._places_get_serialize(
            fieldset=fieldset,
            category=category,
            function=function,
            ambience=ambience,
            tag=tag,
            type=type,
            name=name,
            exact=exact,
            capacity_min=capacity_min,
            capacity_max=capacity_max,
            street=street,
            locality=locality,
            region=region,
            postal_code=postal_code,
            country=country,
            center=center,
            radius=radius,
            bbox=bbox,
            polygon=polygon,
            within=within,
            offset=offset,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PlacesSearchResponse",
            '400': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _places_get_serialize(
        self,
        fieldset,
        category,
        function,
        ambience,
        tag,
        type,
        name,
        exact,
        capacity_min,
        capacity_max,
        street,
        locality,
        region,
        postal_code,
        country,
        center,
        radius,
        bbox,
        polygon,
        within,
        offset,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'category': 'multi',
            'function': 'multi',
            'ambience': 'csv',
            'tag': 'csv',
            'bbox': 'multi',
            'polygon': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if category is not None:
            
            _query_params.append(('category', category))
            
        if function is not None:
            
            _query_params.append(('function', function))
            
        if ambience is not None:
            
            _query_params.append(('ambience', ambience))
            
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if exact is not None:
            
            _query_params.append(('exact', exact))
            
        if capacity_min is not None:
            
            _query_params.append(('capacity_min', capacity_min))
            
        if capacity_max is not None:
            
            _query_params.append(('capacity_max', capacity_max))
            
        if street is not None:
            
            _query_params.append(('street', street))
            
        if locality is not None:
            
            _query_params.append(('locality', locality))
            
        if region is not None:
            
            _query_params.append(('region', region))
            
        if postal_code is not None:
            
            _query_params.append(('postal_code', postal_code))
            
        if country is not None:
            
            _query_params.append(('country', country))
            
        if center is not None:
            
            _query_params.append(('center', center))
            
        if radius is not None:
            
            _query_params.append(('radius', radius))
            
        if bbox is not None:
            
            _query_params.append(('bbox', bbox))
            
        if polygon is not None:
            
            _query_params.append(('polygon', polygon))
            
        if within is not None:
            
            _query_params.append(('within', within))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if fieldset is not None:
            
            _query_params.append(('fieldset', fieldset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/places',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def places_id_get(
        self,
        id: Annotated[StrictStr, Field(description="place @id")],
        fieldset: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PlaceDetail:
        """Get specific place details


        :param id: place @id (required)
        :type id: str
        :param fieldset:
        :type fieldset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._places_id_get_serialize(
            id=id,
            fieldset=fieldset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PlaceDetail",
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def places_id_get_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="place @id")],
        fieldset: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PlaceDetail]:
        """Get specific place details


        :param id: place @id (required)
        :type id: str
        :param fieldset:
        :type fieldset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._places_id_get_serialize(
            id=id,
            fieldset=fieldset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PlaceDetail",
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def places_id_get_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="place @id")],
        fieldset: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get specific place details


        :param id: place @id (required)
        :type id: str
        :param fieldset:
        :type fieldset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._places_id_get_serialize(
            id=id,
            fieldset=fieldset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PlaceDetail",
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _places_id_get_serialize(
        self,
        id,
        fieldset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fieldset is not None:
            
            _query_params.append(('fieldset', fieldset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/places/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



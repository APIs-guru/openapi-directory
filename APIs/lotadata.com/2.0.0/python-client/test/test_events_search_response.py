# coding: utf-8

"""
    LotaData

    Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.events_search_response import EventsSearchResponse

class TestEventsSearchResponse(unittest.TestCase):
    """EventsSearchResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EventsSearchResponse:
        """Test EventsSearchResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EventsSearchResponse`
        """
        model = EventsSearchResponse()
        if include_optional:
            return EventsSearchResponse(
                events = [
                    openapi_client.models.event_occurence_detail.EventOccurenceDetail(
                        @id = '', 
                        @type = 'Organized', 
                        activity = [
                            openapi_client.models.feature_reference.FeatureReference(
                                @id = '', 
                                @type = '', 
                                name = '', )
                            ], 
                        ambience = [
                            openapi_client.models.feature_reference.FeatureReference(
                                @id = '', 
                                @type = '', 
                                name = '', )
                            ], 
                        at = openapi_client.models.place_reference.PlaceReference(
                            @id = '', 
                            @type = 'Place', 
                            address = openapi_client.models.address.Address(
                                country = '', 
                                formatted = '', 
                                locality = '', 
                                postal_code = '', 
                                region = '', 
                                street = '', 
                                unit = '', ), 
                            geo = openapi_client.models.geo_pt.GeoPt(
                                lat = 1.337, 
                                lon = 1.337, ), 
                            geometry = openapi_client.models.geo_json_object.GeoJsonObject(), 
                            location = openapi_client.models.virtual_location.VirtualLocation(
                                domain = '', 
                                platform = '', 
                                url = '', ), 
                            logo = openapi_client.models.image_meta.ImageMeta(
                                @id = '', 
                                caption = '', 
                                height = 56, 
                                url = '', 
                                width = 56, ), 
                            name = '', 
                            tag = [
                                
                                ], ), 
                        away_team = , 
                        category = [
                            
                            ], 
                        contact_point = openapi_client.models.contact_detail.ContactDetail(
                            display_phone = '', 
                            email = '', 
                            facebook_url = '', 
                            instagram_name = '', 
                            lastfm_url = '', 
                            soundcloud_url = '', 
                            spotify_url = '', 
                            twitter_name = '', 
                            url = '', 
                            youtube_url = '', ), 
                        description = '', 
                        door_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        duration = '', 
                        end_approx = True, 
                        end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        ext_taxonomy = [
                            
                            ], 
                        genre = [
                            
                            ], 
                        headline = '', 
                        home_team = , 
                        html_description = '', 
                        image = openapi_client.models.image_meta.ImageMeta(
                            @id = '', 
                            caption = '', 
                            height = 56, 
                            url = '', 
                            width = 56, ), 
                        in_language = , 
                        name = '', 
                        no_time = True, 
                        offers = [
                            openapi_client.models.ticket_offer.TicketOffer(
                                availability = 'Discontinued', 
                                donation = True, 
                                fee = 1.337, 
                                high_price = 1.337, 
                                inventory = openapi_client.models.ticket_offer_inventory.TicketOffer_inventory(
                                    available = 56, 
                                    total = 56, ), 
                                name = '', 
                                price = 1.337, 
                                price_currency = '', 
                                price_unknown = True, 
                                url = '', )
                            ], 
                        on_demand = True, 
                        performer = [
                            
                            ], 
                        photo = [
                            
                            ], 
                        start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        super_event = openapi_client.models.occurrence_reference.OccurrenceReference(
                            @id = '', 
                            name = '', 
                            start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        url = '', 
                        work_performed = [
                            
                            ], )
                    ],
                query = openapi_client.models.events_query.EventsQuery(
                    activity = [
                        ''
                        ], 
                    category = [
                        ''
                        ], 
                    limit = 56, ),
                stats = openapi_client.models.search_stats_meta_result.SearchStatsMetaResult(
                    count = 56, 
                    fieldset = '', 
                    runtime = 56, )
            )
        else:
            return EventsSearchResponse(
        )
        """

    def testEventsSearchResponse(self):
        """Test EventsSearchResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

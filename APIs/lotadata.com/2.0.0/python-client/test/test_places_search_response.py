# coding: utf-8

"""
    LotaData

    Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.places_search_response import PlacesSearchResponse

class TestPlacesSearchResponse(unittest.TestCase):
    """PlacesSearchResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PlacesSearchResponse:
        """Test PlacesSearchResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PlacesSearchResponse`
        """
        model = PlacesSearchResponse()
        if include_optional:
            return PlacesSearchResponse(
                places = [
                    openapi_client.models.place_detail.PlaceDetail(
                        ambience = [
                            openapi_client.models.feature_reference.FeatureReference(
                                @id = '', 
                                @type = '', 
                                name = '', )
                            ], 
                        category = [
                            openapi_client.models.feature_reference.FeatureReference(
                                @id = '', 
                                @type = '', 
                                name = '', )
                            ], 
                        contact = openapi_client.models.contact_detail.ContactDetail(
                            display_phone = '', 
                            email = '', 
                            facebook_url = '', 
                            instagram_name = '', 
                            lastfm_url = '', 
                            soundcloud_url = '', 
                            spotify_url = '', 
                            twitter_name = '', 
                            url = '', 
                            youtube_url = '', ), 
                        function = [
                            
                            ], 
                        opening_hours = [
                            openapi_client.models.timeframe.Timeframe(
                                closes = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                day_of_week = [
                                    56
                                    ], 
                                open247 = True, 
                                opens = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        photo = [
                            openapi_client.models.image_meta.ImageMeta(
                                @id = '', 
                                caption = '', 
                                height = 56, 
                                url = '', 
                                width = 56, )
                            ], )
                    ],
                query = openapi_client.models.places_query.PlacesQuery(
                    address = openapi_client.models.address.Address(
                        country = '', 
                        formatted = '', 
                        locality = '', 
                        postal_code = '', 
                        region = '', 
                        street = '', 
                        unit = '', ), 
                    category = [
                        ''
                        ], 
                    limit = 56, ),
                stats = openapi_client.models.search_stats_meta_result.SearchStatsMetaResult(
                    count = 56, 
                    fieldset = '', 
                    runtime = 56, )
            )
        else:
            return PlacesSearchResponse(
        )
        """

    def testPlacesSearchResponse(self):
        """Test PlacesSearchResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

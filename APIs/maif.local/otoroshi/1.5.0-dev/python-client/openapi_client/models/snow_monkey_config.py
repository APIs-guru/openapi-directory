# coding: utf-8

"""
    Otoroshi Admin API

    Admin API of the Otoroshi reverse proxy

    The version of the OpenAPI document: 1.5.0-dev
    Contact: oss@maif.fr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.chaos_config import ChaosConfig
from openapi_client.models.outage_strategy import OutageStrategy
from typing import Optional, Set
from typing_extensions import Self

class SnowMonkeyConfig(BaseModel):
    """
    Configuration for the faults that can be injected in requests. The name Snow Monkey is an hommage to Netflix's Chaos Monkey ðŸ˜‰
    """ # noqa: E501
    chaos_config: ChaosConfig = Field(alias="chaosConfig")
    dry_run: StrictBool = Field(description="Whether or not outages will actualy impact requests", alias="dryRun")
    enabled: StrictBool = Field(description="Whether or not this config is enabled")
    include_user_facing_descriptors: StrictBool = Field(description="Whether or not user facing apps. will be impacted by Snow Monkey", alias="includeUserFacingDescriptors")
    outage_duration_from: StrictInt = Field(description="Start of outage duration range", alias="outageDurationFrom")
    outage_duration_to: StrictInt = Field(description="End of outage duration range", alias="outageDurationTo")
    outage_strategy: OutageStrategy = Field(alias="outageStrategy")
    start_time: StrictStr = Field(description="Start time of Snow Monkey each day", alias="startTime")
    stop_time: StrictStr = Field(description="Stop time of Snow Monkey each day", alias="stopTime")
    target_groups: List[StrictStr] = Field(description="Groups impacted by Snow Monkey. If empty, all groups will be impacted", alias="targetGroups")
    times_per_day: StrictInt = Field(description="Number of time per day each service will be outage", alias="timesPerDay")
    __properties: ClassVar[List[str]] = ["chaosConfig", "dryRun", "enabled", "includeUserFacingDescriptors", "outageDurationFrom", "outageDurationTo", "outageStrategy", "startTime", "stopTime", "targetGroups", "timesPerDay"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SnowMonkeyConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of chaos_config
        if self.chaos_config:
            _dict['chaosConfig'] = self.chaos_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SnowMonkeyConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chaosConfig": ChaosConfig.from_dict(obj["chaosConfig"]) if obj.get("chaosConfig") is not None else None,
            "dryRun": obj.get("dryRun"),
            "enabled": obj.get("enabled"),
            "includeUserFacingDescriptors": obj.get("includeUserFacingDescriptors"),
            "outageDurationFrom": obj.get("outageDurationFrom"),
            "outageDurationTo": obj.get("outageDurationTo"),
            "outageStrategy": obj.get("outageStrategy"),
            "startTime": obj.get("startTime"),
            "stopTime": obj.get("stopTime"),
            "targetGroups": obj.get("targetGroups"),
            "timesPerDay": obj.get("timesPerDay")
        })
        return _obj



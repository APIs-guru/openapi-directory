# coding: utf-8

"""
    Otoroshi Admin API

    Admin API of the Otoroshi reverse proxy

    The version of the OpenAPI document: 1.5.0-dev
    Contact: oss@maif.fr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.global_config import GlobalConfig
from openapi_client.models.import_export_admins_inner import ImportExportAdminsInner
from openapi_client.models.import_export_api_keys_inner import ImportExportApiKeysInner
from openapi_client.models.import_export_error_templates_inner import ImportExportErrorTemplatesInner
from openapi_client.models.import_export_service_descriptors_inner import ImportExportServiceDescriptorsInner
from openapi_client.models.import_export_service_groups_inner import ImportExportServiceGroupsInner
from openapi_client.models.import_export_simple_admins_inner import ImportExportSimpleAdminsInner
from openapi_client.models.import_export_stats import ImportExportStats
from typing import Optional, Set
from typing_extensions import Self

class ImportExport(BaseModel):
    """
    The structure that can be imported to or exported from Otoroshi. It represent the memory state of Otoroshi
    """ # noqa: E501
    admins: List[ImportExportAdminsInner] = Field(description="Current U2F admin at the time of export")
    api_keys: List[ImportExportApiKeysInner] = Field(description="Current apik keys at the time of export", alias="apiKeys")
    app_config: Optional[Dict[str, StrictStr]] = Field(default=None, description="Current env variables at the time of export", alias="appConfig")
    config: GlobalConfig
    var_date: datetime = Field(alias="date")
    date_raw: StrictInt = Field(alias="dateRaw")
    error_templates: List[ImportExportErrorTemplatesInner] = Field(description="Current error templates at the time of export", alias="errorTemplates")
    label: StrictStr
    service_descriptors: List[ImportExportServiceDescriptorsInner] = Field(description="Current service descriptors at the time of export", alias="serviceDescriptors")
    service_groups: List[ImportExportServiceGroupsInner] = Field(description="Current service groups at the time of export", alias="serviceGroups")
    simple_admins: List[ImportExportSimpleAdminsInner] = Field(description="Current simple admins at the time of export", alias="simpleAdmins")
    stats: ImportExportStats
    __properties: ClassVar[List[str]] = ["admins", "apiKeys", "appConfig", "config", "date", "dateRaw", "errorTemplates", "label", "serviceDescriptors", "serviceGroups", "simpleAdmins", "stats"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImportExport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in admins (list)
        _items = []
        if self.admins:
            for _item_admins in self.admins:
                if _item_admins:
                    _items.append(_item_admins.to_dict())
            _dict['admins'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in api_keys (list)
        _items = []
        if self.api_keys:
            for _item_api_keys in self.api_keys:
                if _item_api_keys:
                    _items.append(_item_api_keys.to_dict())
            _dict['apiKeys'] = _items
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in error_templates (list)
        _items = []
        if self.error_templates:
            for _item_error_templates in self.error_templates:
                if _item_error_templates:
                    _items.append(_item_error_templates.to_dict())
            _dict['errorTemplates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in service_descriptors (list)
        _items = []
        if self.service_descriptors:
            for _item_service_descriptors in self.service_descriptors:
                if _item_service_descriptors:
                    _items.append(_item_service_descriptors.to_dict())
            _dict['serviceDescriptors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in service_groups (list)
        _items = []
        if self.service_groups:
            for _item_service_groups in self.service_groups:
                if _item_service_groups:
                    _items.append(_item_service_groups.to_dict())
            _dict['serviceGroups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in simple_admins (list)
        _items = []
        if self.simple_admins:
            for _item_simple_admins in self.simple_admins:
                if _item_simple_admins:
                    _items.append(_item_simple_admins.to_dict())
            _dict['simpleAdmins'] = _items
        # override the default output from pydantic by calling `to_dict()` of stats
        if self.stats:
            _dict['stats'] = self.stats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImportExport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "admins": [ImportExportAdminsInner.from_dict(_item) for _item in obj["admins"]] if obj.get("admins") is not None else None,
            "apiKeys": [ImportExportApiKeysInner.from_dict(_item) for _item in obj["apiKeys"]] if obj.get("apiKeys") is not None else None,
            "appConfig": obj.get("appConfig"),
            "config": GlobalConfig.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "date": obj.get("date"),
            "dateRaw": obj.get("dateRaw"),
            "errorTemplates": [ImportExportErrorTemplatesInner.from_dict(_item) for _item in obj["errorTemplates"]] if obj.get("errorTemplates") is not None else None,
            "label": obj.get("label"),
            "serviceDescriptors": [ImportExportServiceDescriptorsInner.from_dict(_item) for _item in obj["serviceDescriptors"]] if obj.get("serviceDescriptors") is not None else None,
            "serviceGroups": [ImportExportServiceGroupsInner.from_dict(_item) for _item in obj["serviceGroups"]] if obj.get("serviceGroups") is not None else None,
            "simpleAdmins": [ImportExportSimpleAdminsInner.from_dict(_item) for _item in obj["simpleAdmins"]] if obj.get("simpleAdmins") is not None else None,
            "stats": ImportExportStats.from_dict(obj["stats"]) if obj.get("stats") is not None else None
        })
        return _obj



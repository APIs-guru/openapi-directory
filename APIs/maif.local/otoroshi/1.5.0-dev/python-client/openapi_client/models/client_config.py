# coding: utf-8

"""
    Otoroshi Admin API

    Admin API of the Otoroshi reverse proxy

    The version of the OpenAPI document: 1.5.0-dev
    Contact: oss@maif.fr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class ClientConfig(BaseModel):
    """
    The configuration of the circuit breaker for a service descriptor
    """ # noqa: E501
    backoff_factor: StrictInt = Field(description="Specify the factor to multiply the delay for each retry", alias="backoffFactor")
    call_timeout: StrictInt = Field(description="Specify how long each call should last at most in milliseconds", alias="callTimeout")
    global_timeout: StrictInt = Field(description="Specify how long the global call (with retries) should last at most in milliseconds", alias="globalTimeout")
    max_errors: StrictInt = Field(description="Specify how many errors can pass before opening the circuit breaker", alias="maxErrors")
    retries: StrictInt = Field(description="Specify how many times the client will try to fetch the result of the request after an error before giving up.")
    retry_initial_delay: StrictInt = Field(description="Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor", alias="retryInitialDelay")
    sample_interval: StrictInt = Field(description="Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted", alias="sampleInterval")
    use_circuit_breaker: StrictBool = Field(description="Use a circuit breaker to avoid cascading failure when calling chains of services. Highly recommended !", alias="useCircuitBreaker")
    __properties: ClassVar[List[str]] = ["backoffFactor", "callTimeout", "globalTimeout", "maxErrors", "retries", "retryInitialDelay", "sampleInterval", "useCircuitBreaker"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClientConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClientConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backoffFactor": obj.get("backoffFactor"),
            "callTimeout": obj.get("callTimeout"),
            "globalTimeout": obj.get("globalTimeout"),
            "maxErrors": obj.get("maxErrors"),
            "retries": obj.get("retries"),
            "retryInitialDelay": obj.get("retryInitialDelay"),
            "sampleInterval": obj.get("sampleInterval"),
            "useCircuitBreaker": obj.get("useCircuitBreaker")
        })
        return _obj



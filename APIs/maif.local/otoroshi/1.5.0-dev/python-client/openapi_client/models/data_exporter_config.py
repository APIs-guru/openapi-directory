# coding: utf-8

"""
    Otoroshi Admin API

    Admin API of the Otoroshi reverse proxy

    The version of the OpenAPI document: 1.5.0-dev
    Contact: oss@maif.fr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.data_exporter_config_config import DataExporterConfigConfig
from openapi_client.models.filtering import Filtering
from openapi_client.models.location import Location
from typing import Optional, Set
from typing_extensions import Self

class DataExporterConfig(BaseModel):
    """
    Settings to export Otorshi events
    """ # noqa: E501
    buffer_size: Optional[StrictInt] = Field(default=None, description="buffer size", alias="bufferSize")
    config: Optional[DataExporterConfigConfig] = None
    desc: Optional[StrictStr] = Field(default=None, description="Description")
    enabled: Optional[StrictStr] = Field(default=None, description="Boolean")
    filtering: Optional[Filtering] = None
    group_duration: Optional[StrictInt] = Field(default=None, description="duration", alias="groupDuration")
    group_size: Optional[StrictInt] = Field(default=None, description="Group size", alias="groupSize")
    id: Optional[StrictStr] = Field(default=None, description="Id")
    json_workers: Optional[StrictInt] = Field(default=None, description="nb workers", alias="jsonWorkers")
    location: Optional[Location] = None
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="Metadata")
    name: Optional[StrictStr] = Field(default=None, description="Name")
    projection: Optional[Dict[str, StrictStr]] = Field(default=None, description="projection")
    send_workers: Optional[StrictInt] = Field(default=None, description="send workers", alias="sendWorkers")
    typ: Optional[StrictStr] = Field(default=None, description="Type of data exporter")
    __properties: ClassVar[List[str]] = ["bufferSize", "config", "desc", "enabled", "filtering", "groupDuration", "groupSize", "id", "jsonWorkers", "location", "metadata", "name", "projection", "sendWorkers", "typ"]

    @field_validator('typ')
    def typ_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kafka', 'pulsar', 'file', 'mailer', 'elastic', 'console', 'custom']):
            raise ValueError("must be one of enum values ('kafka', 'pulsar', 'file', 'mailer', 'elastic', 'console', 'custom')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataExporterConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of filtering
        if self.filtering:
            _dict['filtering'] = self.filtering.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataExporterConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bufferSize": obj.get("bufferSize"),
            "config": DataExporterConfigConfig.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "desc": obj.get("desc"),
            "enabled": obj.get("enabled"),
            "filtering": Filtering.from_dict(obj["filtering"]) if obj.get("filtering") is not None else None,
            "groupDuration": obj.get("groupDuration"),
            "groupSize": obj.get("groupSize"),
            "id": obj.get("id"),
            "jsonWorkers": obj.get("jsonWorkers"),
            "location": Location.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "metadata": obj.get("metadata"),
            "name": obj.get("name"),
            "projection": obj.get("projection"),
            "sendWorkers": obj.get("sendWorkers"),
            "typ": obj.get("typ")
        })
        return _obj



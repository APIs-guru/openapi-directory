# coding: utf-8

"""
    Otoroshi Admin API

    Admin API of the Otoroshi reverse proxy

    The version of the OpenAPI document: 1.5.0-dev
    Contact: oss@maif.fr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ApiKey(BaseModel):
    """
    An Otoroshi Api Key. An Api Key is defined for a group of services to allow usage of the same Api Key for multiple services.
    """ # noqa: E501
    authorized_entities: List[StrictStr] = Field(description="The group/service ids (prefixed by group_ or service_ on which the key is authorized", alias="authorizedEntities")
    client_id: StrictStr = Field(description="The unique id of the Api Key. Usually 16 random alpha numerical characters, but can be anything", alias="clientId")
    client_name: StrictStr = Field(description="The name of the api key, for humans ;-)", alias="clientName")
    client_secret: StrictStr = Field(description="The secret of the Api Key. Usually 64 random alpha numerical characters, but can be anything", alias="clientSecret")
    daily_quota: Optional[StrictInt] = Field(default=None, description="Authorized number of calls per day", alias="dailyQuota")
    enabled: StrictBool = Field(description="Whether or not the key is enabled. If disabled, resources won't be available to calls using this key")
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="Bunch of metadata for the key")
    monthly_quota: Optional[StrictInt] = Field(default=None, description="Authorized number of calls per month", alias="monthlyQuota")
    throttling_quota: Optional[StrictInt] = Field(default=None, description="Authorized number of calls per second, measured on 10 seconds", alias="throttlingQuota")
    __properties: ClassVar[List[str]] = ["authorizedEntities", "clientId", "clientName", "clientSecret", "dailyQuota", "enabled", "metadata", "monthlyQuota", "throttlingQuota"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiKey from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiKey from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authorizedEntities": obj.get("authorizedEntities"),
            "clientId": obj.get("clientId"),
            "clientName": obj.get("clientName"),
            "clientSecret": obj.get("clientSecret"),
            "dailyQuota": obj.get("dailyQuota"),
            "enabled": obj.get("enabled"),
            "metadata": obj.get("metadata"),
            "monthlyQuota": obj.get("monthlyQuota"),
            "throttlingQuota": obj.get("throttlingQuota")
        })
        return _obj



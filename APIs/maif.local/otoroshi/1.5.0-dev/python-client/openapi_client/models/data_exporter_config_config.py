# coding: utf-8

"""
    Otoroshi Admin API

    Admin API of the Otoroshi reverse proxy

    The version of the OpenAPI document: 1.5.0-dev
    Contact: oss@maif.fr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, Dict, List, Optional
from openapi_client.models.custom_data_exporter_config import CustomDataExporterConfig
from openapi_client.models.elastic_config import ElasticConfig
from openapi_client.models.file_data_exporter_config import FileDataExporterConfig
from openapi_client.models.kafka_config import KafkaConfig
from openapi_client.models.mailer_console_exporter_config import MailerConsoleExporterConfig
from openapi_client.models.mailer_generic_exporter_config import MailerGenericExporterConfig
from openapi_client.models.mailer_mailgun_exporter_config import MailerMailgunExporterConfig
from openapi_client.models.mailer_mailjet_exporter_config import MailerMailjetExporterConfig
from openapi_client.models.mailer_sendgrid_exporter_config import MailerSendgridExporterConfig
from openapi_client.models.pulsar_data_exporter_config import PulsarDataExporterConfig
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

DATAEXPORTERCONFIGCONFIG_ONE_OF_SCHEMAS = ["CustomDataExporterConfig", "ElasticConfig", "FileDataExporterConfig", "KafkaConfig", "MailerConsoleExporterConfig", "MailerGenericExporterConfig", "MailerMailgunExporterConfig", "MailerMailjetExporterConfig", "MailerSendgridExporterConfig", "PulsarDataExporterConfig", "object"]

class DataExporterConfigConfig(BaseModel):
    """
    Data Exporter config
    """
    # data type: ElasticConfig
    oneof_schema_1_validator: Optional[ElasticConfig] = None
    # data type: KafkaConfig
    oneof_schema_2_validator: Optional[KafkaConfig] = None
    # data type: PulsarDataExporterConfig
    oneof_schema_3_validator: Optional[PulsarDataExporterConfig] = None
    # data type: FileDataExporterConfig
    oneof_schema_4_validator: Optional[FileDataExporterConfig] = None
    # data type: MailerGenericExporterConfig
    oneof_schema_5_validator: Optional[MailerGenericExporterConfig] = None
    # data type: MailerConsoleExporterConfig
    oneof_schema_6_validator: Optional[MailerConsoleExporterConfig] = None
    # data type: MailerMailgunExporterConfig
    oneof_schema_7_validator: Optional[MailerMailgunExporterConfig] = None
    # data type: MailerMailjetExporterConfig
    oneof_schema_8_validator: Optional[MailerMailjetExporterConfig] = None
    # data type: MailerSendgridExporterConfig
    oneof_schema_9_validator: Optional[MailerSendgridExporterConfig] = None
    # data type: object
    oneof_schema_10_validator: Optional[Dict[str, Any]] = None
    # data type: CustomDataExporterConfig
    oneof_schema_11_validator: Optional[CustomDataExporterConfig] = None
    actual_instance: Optional[Union[CustomDataExporterConfig, ElasticConfig, FileDataExporterConfig, KafkaConfig, MailerConsoleExporterConfig, MailerGenericExporterConfig, MailerMailgunExporterConfig, MailerMailjetExporterConfig, MailerSendgridExporterConfig, PulsarDataExporterConfig, object]] = None
    one_of_schemas: Set[str] = { "CustomDataExporterConfig", "ElasticConfig", "FileDataExporterConfig", "KafkaConfig", "MailerConsoleExporterConfig", "MailerGenericExporterConfig", "MailerMailgunExporterConfig", "MailerMailjetExporterConfig", "MailerSendgridExporterConfig", "PulsarDataExporterConfig", "object" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = DataExporterConfigConfig.model_construct()
        error_messages = []
        match = 0
        # validate data type: ElasticConfig
        if not isinstance(v, ElasticConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ElasticConfig`")
        else:
            match += 1
        # validate data type: KafkaConfig
        if not isinstance(v, KafkaConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `KafkaConfig`")
        else:
            match += 1
        # validate data type: PulsarDataExporterConfig
        if not isinstance(v, PulsarDataExporterConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PulsarDataExporterConfig`")
        else:
            match += 1
        # validate data type: FileDataExporterConfig
        if not isinstance(v, FileDataExporterConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FileDataExporterConfig`")
        else:
            match += 1
        # validate data type: MailerGenericExporterConfig
        if not isinstance(v, MailerGenericExporterConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MailerGenericExporterConfig`")
        else:
            match += 1
        # validate data type: MailerConsoleExporterConfig
        if not isinstance(v, MailerConsoleExporterConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MailerConsoleExporterConfig`")
        else:
            match += 1
        # validate data type: MailerMailgunExporterConfig
        if not isinstance(v, MailerMailgunExporterConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MailerMailgunExporterConfig`")
        else:
            match += 1
        # validate data type: MailerMailjetExporterConfig
        if not isinstance(v, MailerMailjetExporterConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MailerMailjetExporterConfig`")
        else:
            match += 1
        # validate data type: MailerSendgridExporterConfig
        if not isinstance(v, MailerSendgridExporterConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MailerSendgridExporterConfig`")
        else:
            match += 1
        # validate data type: object
        try:
            instance.oneof_schema_10_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: CustomDataExporterConfig
        if not isinstance(v, CustomDataExporterConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CustomDataExporterConfig`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in DataExporterConfigConfig with oneOf schemas: CustomDataExporterConfig, ElasticConfig, FileDataExporterConfig, KafkaConfig, MailerConsoleExporterConfig, MailerGenericExporterConfig, MailerMailgunExporterConfig, MailerMailjetExporterConfig, MailerSendgridExporterConfig, PulsarDataExporterConfig, object. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in DataExporterConfigConfig with oneOf schemas: CustomDataExporterConfig, ElasticConfig, FileDataExporterConfig, KafkaConfig, MailerConsoleExporterConfig, MailerGenericExporterConfig, MailerMailgunExporterConfig, MailerMailjetExporterConfig, MailerSendgridExporterConfig, PulsarDataExporterConfig, object. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into ElasticConfig
        try:
            instance.actual_instance = ElasticConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into KafkaConfig
        try:
            instance.actual_instance = KafkaConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PulsarDataExporterConfig
        try:
            instance.actual_instance = PulsarDataExporterConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FileDataExporterConfig
        try:
            instance.actual_instance = FileDataExporterConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MailerGenericExporterConfig
        try:
            instance.actual_instance = MailerGenericExporterConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MailerConsoleExporterConfig
        try:
            instance.actual_instance = MailerConsoleExporterConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MailerMailgunExporterConfig
        try:
            instance.actual_instance = MailerMailgunExporterConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MailerMailjetExporterConfig
        try:
            instance.actual_instance = MailerMailjetExporterConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MailerSendgridExporterConfig
        try:
            instance.actual_instance = MailerSendgridExporterConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into object
        try:
            # validation
            instance.oneof_schema_10_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_10_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CustomDataExporterConfig
        try:
            instance.actual_instance = CustomDataExporterConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into DataExporterConfigConfig with oneOf schemas: CustomDataExporterConfig, ElasticConfig, FileDataExporterConfig, KafkaConfig, MailerConsoleExporterConfig, MailerGenericExporterConfig, MailerMailgunExporterConfig, MailerMailjetExporterConfig, MailerSendgridExporterConfig, PulsarDataExporterConfig, object. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into DataExporterConfigConfig with oneOf schemas: CustomDataExporterConfig, ElasticConfig, FileDataExporterConfig, KafkaConfig, MailerConsoleExporterConfig, MailerGenericExporterConfig, MailerMailgunExporterConfig, MailerMailjetExporterConfig, MailerSendgridExporterConfig, PulsarDataExporterConfig, object. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], CustomDataExporterConfig, ElasticConfig, FileDataExporterConfig, KafkaConfig, MailerConsoleExporterConfig, MailerGenericExporterConfig, MailerMailgunExporterConfig, MailerMailjetExporterConfig, MailerSendgridExporterConfig, PulsarDataExporterConfig, object]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



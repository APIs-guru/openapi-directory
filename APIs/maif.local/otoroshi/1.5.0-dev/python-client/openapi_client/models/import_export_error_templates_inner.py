# coding: utf-8

"""
    Otoroshi Admin API

    Admin API of the Otoroshi reverse proxy

    The version of the OpenAPI document: 1.5.0-dev
    Contact: oss@maif.fr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class ImportExportErrorTemplatesInner(BaseModel):
    """
    Error templates for a service descriptor
    """ # noqa: E501
    messages: Dict[str, StrictStr] = Field(description="Map for custom messages")
    service_id: StrictStr = Field(description="The Id of the service for which the error template is enabled", alias="serviceId")
    template40x: StrictStr = Field(description="The html template for 40x errors")
    template50x: StrictStr = Field(description="The html template for 50x errors")
    template_build: StrictStr = Field(description="The html template for build page", alias="templateBuild")
    template_maintenance: StrictStr = Field(description="The html template for maintenance page", alias="templateMaintenance")
    __properties: ClassVar[List[str]] = ["messages", "serviceId", "template40x", "template50x", "templateBuild", "templateMaintenance"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImportExportErrorTemplatesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImportExportErrorTemplatesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "messages": obj.get("messages"),
            "serviceId": obj.get("serviceId"),
            "template40x": obj.get("template40x"),
            "template50x": obj.get("template50x"),
            "templateBuild": obj.get("templateBuild"),
            "templateMaintenance": obj.get("templateMaintenance")
        })
        return _obj



# coding: utf-8

"""
    Otoroshi Admin API

    Admin API of the Otoroshi reverse proxy

    The version of the OpenAPI document: 1.5.0-dev
    Contact: oss@maif.fr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LdapAuthModuleConfig(BaseModel):
    """
    Settings to authenticate users using a generic OAuth2 provider
    """ # noqa: E501
    admin_password: StrictStr = Field(description="The admin password", alias="adminPassword")
    admin_username: StrictStr = Field(description="The admin username", alias="adminUsername")
    desc: StrictStr = Field(description="Description of the config")
    email_field: StrictStr = Field(description="Field name to get email from user profile", alias="emailField")
    group_filter: StrictStr = Field(description="Filter for groups", alias="groupFilter")
    id: StrictStr = Field(description="Unique id of the config")
    name: StrictStr = Field(description="Name of the config")
    name_field: StrictStr = Field(description="Field name to get name from user profile", alias="nameField")
    otoroshi_data_field: Optional[StrictStr] = Field(default=None, description="Field name to get otoroshi metadata from. You can specify sub fields using | as separator", alias="otoroshiDataField")
    search_base: StrictStr = Field(description="LDAP search base", alias="searchBase")
    search_filter: StrictStr = Field(description="Filter for users", alias="searchFilter")
    server_url: StrictStr = Field(description="URL of the ldap server", alias="serverUrl")
    session_max_age: StrictInt = Field(description="Max age of the session", alias="sessionMaxAge")
    type: StrictStr = Field(description="Type of settings. value is ldap")
    user_base: StrictStr = Field(description="LDAP user base DN", alias="userBase")
    __properties: ClassVar[List[str]] = ["adminPassword", "adminUsername", "desc", "emailField", "groupFilter", "id", "name", "nameField", "otoroshiDataField", "searchBase", "searchFilter", "serverUrl", "sessionMaxAge", "type", "userBase"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LdapAuthModuleConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LdapAuthModuleConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adminPassword": obj.get("adminPassword"),
            "adminUsername": obj.get("adminUsername"),
            "desc": obj.get("desc"),
            "emailField": obj.get("emailField"),
            "groupFilter": obj.get("groupFilter"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "nameField": obj.get("nameField"),
            "otoroshiDataField": obj.get("otoroshiDataField"),
            "searchBase": obj.get("searchBase"),
            "searchFilter": obj.get("searchFilter"),
            "serverUrl": obj.get("serverUrl"),
            "sessionMaxAge": obj.get("sessionMaxAge"),
            "type": obj.get("type"),
            "userBase": obj.get("userBase")
        })
        return _obj



# coding: utf-8

"""
    Otoroshi Admin API

    Admin API of the Otoroshi reverse proxy

    The version of the OpenAPI document: 1.5.0-dev
    Contact: oss@maif.fr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.global_jwt_verifier_algo_settings import GlobalJwtVerifierAlgoSettings
from openapi_client.models.global_jwt_verifier_source import GlobalJwtVerifierSource
from openapi_client.models.global_jwt_verifier_strategy import GlobalJwtVerifierStrategy
from typing import Optional, Set
from typing_extensions import Self

class GlobalJwtVerifier(BaseModel):
    """
    A JWT verifier used by multiple service descriptor
    """ # noqa: E501
    algo_settings: GlobalJwtVerifierAlgoSettings = Field(alias="algoSettings")
    desc: StrictStr = Field(description="Verifier description")
    enabled: StrictBool = Field(description="Is it enabled")
    id: StrictStr = Field(description="Verifier id")
    name: StrictStr = Field(description="Verifier name")
    source: GlobalJwtVerifierSource
    strategy: GlobalJwtVerifierStrategy
    strict: StrictBool = Field(description="Does it fail if JWT not found")
    __properties: ClassVar[List[str]] = ["algoSettings", "desc", "enabled", "id", "name", "source", "strategy", "strict"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GlobalJwtVerifier from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of algo_settings
        if self.algo_settings:
            _dict['algoSettings'] = self.algo_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of strategy
        if self.strategy:
            _dict['strategy'] = self.strategy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GlobalJwtVerifier from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "algoSettings": GlobalJwtVerifierAlgoSettings.from_dict(obj["algoSettings"]) if obj.get("algoSettings") is not None else None,
            "desc": obj.get("desc"),
            "enabled": obj.get("enabled"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "source": GlobalJwtVerifierSource.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "strategy": GlobalJwtVerifierStrategy.from_dict(obj["strategy"]) if obj.get("strategy") is not None else None,
            "strict": obj.get("strict")
        })
        return _obj



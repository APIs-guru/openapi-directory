# coding: utf-8

"""
    Otoroshi Admin API

    Admin API of the Otoroshi reverse proxy

    The version of the OpenAPI document: 1.5.0-dev
    Contact: oss@maif.fr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.generic_oauth2_module_config_jwt_verifier import GenericOauth2ModuleConfigJwtVerifier
from typing import Optional, Set
from typing_extensions import Self

class GenericOauth2ModuleConfig(BaseModel):
    """
    Settings to authenticate users using a generic OAuth2 provider
    """ # noqa: E501
    access_token_field: StrictStr = Field(description="Field name to get access token", alias="accessTokenField")
    authorize_url: StrictStr = Field(description="OAuth authorize URL", alias="authorizeUrl")
    callback_url: StrictStr = Field(description="Otoroshi callback URL", alias="callbackUrl")
    claims: Optional[StrictStr] = Field(default=None, description="The claims of the token")
    client_id: StrictStr = Field(description="OAuth Client id", alias="clientId")
    client_secret: StrictStr = Field(description="OAuth Client secret", alias="clientSecret")
    desc: StrictStr = Field(description="Description of the config")
    email_field: StrictStr = Field(description="Field name to get email from user profile", alias="emailField")
    id: StrictStr = Field(description="Unique id of the config")
    jwt_verifier: Optional[GenericOauth2ModuleConfigJwtVerifier] = Field(default=None, alias="jwtVerifier")
    login_url: StrictStr = Field(description="OAuth login URL", alias="loginUrl")
    logout_url: StrictStr = Field(description="OAuth logout URL", alias="logoutUrl")
    name: StrictStr = Field(description="Name of the config")
    name_field: StrictStr = Field(description="Field name to get name from user profile", alias="nameField")
    oid_config: Optional[StrictStr] = Field(default=None, description="URL of the OIDC config. file", alias="oidConfig")
    otoroshi_data_field: StrictStr = Field(description="Field name to get otoroshi metadata from. You can specify sub fields using | as separator", alias="otoroshiDataField")
    read_profile_from_token: Optional[StrictBool] = Field(default=None, description="The user profile will be read from the JWT token in id_token", alias="readProfileFromToken")
    scope: Optional[StrictStr] = Field(default=None, description="The scope of the token")
    session_max_age: StrictInt = Field(description="Max age of the session", alias="sessionMaxAge")
    token_url: StrictStr = Field(description="OAuth token URL", alias="tokenUrl")
    type: StrictStr = Field(description="Type of settings. value is oauth2")
    use_cookies: Optional[StrictBool] = Field(default=None, description="Use for redirection to actual service", alias="useCookies")
    use_json: Optional[StrictBool] = Field(default=None, description="Use JSON or URL Form Encoded as payload with the OAuth provider", alias="useJson")
    user_info_url: StrictStr = Field(description="OAuth userinfo to get user profile", alias="userInfoUrl")
    __properties: ClassVar[List[str]] = ["accessTokenField", "authorizeUrl", "callbackUrl", "claims", "clientId", "clientSecret", "desc", "emailField", "id", "jwtVerifier", "loginUrl", "logoutUrl", "name", "nameField", "oidConfig", "otoroshiDataField", "readProfileFromToken", "scope", "sessionMaxAge", "tokenUrl", "type", "useCookies", "useJson", "userInfoUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GenericOauth2ModuleConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of jwt_verifier
        if self.jwt_verifier:
            _dict['jwtVerifier'] = self.jwt_verifier.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GenericOauth2ModuleConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessTokenField": obj.get("accessTokenField"),
            "authorizeUrl": obj.get("authorizeUrl"),
            "callbackUrl": obj.get("callbackUrl"),
            "claims": obj.get("claims"),
            "clientId": obj.get("clientId"),
            "clientSecret": obj.get("clientSecret"),
            "desc": obj.get("desc"),
            "emailField": obj.get("emailField"),
            "id": obj.get("id"),
            "jwtVerifier": GenericOauth2ModuleConfigJwtVerifier.from_dict(obj["jwtVerifier"]) if obj.get("jwtVerifier") is not None else None,
            "loginUrl": obj.get("loginUrl"),
            "logoutUrl": obj.get("logoutUrl"),
            "name": obj.get("name"),
            "nameField": obj.get("nameField"),
            "oidConfig": obj.get("oidConfig"),
            "otoroshiDataField": obj.get("otoroshiDataField"),
            "readProfileFromToken": obj.get("readProfileFromToken"),
            "scope": obj.get("scope"),
            "sessionMaxAge": obj.get("sessionMaxAge"),
            "tokenUrl": obj.get("tokenUrl"),
            "type": obj.get("type"),
            "useCookies": obj.get("useCookies"),
            "useJson": obj.get("useJson"),
            "userInfoUrl": obj.get("userInfoUrl")
        })
        return _obj



# coding: utf-8

"""
    Otoroshi Admin API

    Admin API of the Otoroshi reverse proxy

    The version of the OpenAPI document: 1.5.0-dev
    Contact: oss@maif.fr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class Certificate(BaseModel):
    """
    A SSL/TLS X509 certificate
    """ # noqa: E501
    auto_renew: StrictStr = Field(description="Allow Otoroshi to renew the certificate (if self signed)", alias="autoRenew")
    ca: StrictStr = Field(description="Certificate is a CA (read only)")
    ca_ref: StrictStr = Field(description="Reference for a CA certificate in otoroshi", alias="caRef")
    chain: StrictStr = Field(description="Certificate chain of trust in PEM format")
    domain: StrictStr = Field(description="Domain of the certificate (read only)")
    var_from: StrictStr = Field(description="Start date of validity", alias="from")
    id: StrictStr = Field(description="Id of the certificate")
    private_key: StrictStr = Field(description="PKCS8 private key in PEM format", alias="privateKey")
    self_signed: StrictStr = Field(description="Certificate is self signed  read only)", alias="selfSigned")
    subject: StrictStr = Field(description="Subject of the certificate (read only)")
    to: StrictStr = Field(description="End date of validity")
    valid: StrictStr = Field(description="Certificate is valid (read only)")
    __properties: ClassVar[List[str]] = ["autoRenew", "ca", "caRef", "chain", "domain", "from", "id", "privateKey", "selfSigned", "subject", "to", "valid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Certificate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Certificate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoRenew": obj.get("autoRenew"),
            "ca": obj.get("ca"),
            "caRef": obj.get("caRef"),
            "chain": obj.get("chain"),
            "domain": obj.get("domain"),
            "from": obj.get("from"),
            "id": obj.get("id"),
            "privateKey": obj.get("privateKey"),
            "selfSigned": obj.get("selfSigned"),
            "subject": obj.get("subject"),
            "to": obj.get("to"),
            "valid": obj.get("valid")
        })
        return _obj



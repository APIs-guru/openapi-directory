# coding: utf-8

"""
    Otoroshi Admin API

    Admin API of the Otoroshi reverse proxy

    The version of the OpenAPI document: 1.5.0-dev
    Contact: oss@maif.fr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.snow_monkey_config import SnowMonkeyConfig

class TestSnowMonkeyConfig(unittest.TestCase):
    """SnowMonkeyConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SnowMonkeyConfig:
        """Test SnowMonkeyConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SnowMonkeyConfig`
        """
        model = SnowMonkeyConfig()
        if include_optional:
            return SnowMonkeyConfig(
                chaos_config = openapi_client.models.chaos_config.ChaosConfig(
                    bad_responses_fault_config = openapi_client.models.bad_responses_fault_config.BadResponsesFaultConfig(
                        ratio = 42.2, 
                        responses = [
                            openapi_client.models.bad_response.BadResponse(
                                body = 'a string value', 
                                headers = {"key":"value"}, 
                                status = 123123, )
                            ], ), 
                    enabled = True, 
                    large_request_fault_config = openapi_client.models.large_request_fault_config.LargeRequestFaultConfig(
                        additional_request_size = 123123, 
                        ratio = 42.2, ), 
                    large_response_fault_config = openapi_client.models.large_response_fault_config.LargeResponseFaultConfig(
                        additional_request_size = 123123, 
                        ratio = 42.2, ), 
                    latency_injection_fault_config = openapi_client.models.latency_injection_fault_config.LatencyInjectionFaultConfig(
                        from = 123123, 
                        ratio = 42.2, 
                        to = 123123, ), ),
                dry_run = True,
                enabled = True,
                include_user_facing_descriptors = True,
                outage_duration_from = 123123,
                outage_duration_to = 123123,
                outage_strategy = 'OneServicePerGroup',
                start_time = '63148.0',
                stop_time = '63148.0',
                target_groups = [
                    'a string value'
                    ],
                times_per_day = 123123
            )
        else:
            return SnowMonkeyConfig(
                chaos_config = openapi_client.models.chaos_config.ChaosConfig(
                    bad_responses_fault_config = openapi_client.models.bad_responses_fault_config.BadResponsesFaultConfig(
                        ratio = 42.2, 
                        responses = [
                            openapi_client.models.bad_response.BadResponse(
                                body = 'a string value', 
                                headers = {"key":"value"}, 
                                status = 123123, )
                            ], ), 
                    enabled = True, 
                    large_request_fault_config = openapi_client.models.large_request_fault_config.LargeRequestFaultConfig(
                        additional_request_size = 123123, 
                        ratio = 42.2, ), 
                    large_response_fault_config = openapi_client.models.large_response_fault_config.LargeResponseFaultConfig(
                        additional_request_size = 123123, 
                        ratio = 42.2, ), 
                    latency_injection_fault_config = openapi_client.models.latency_injection_fault_config.LatencyInjectionFaultConfig(
                        from = 123123, 
                        ratio = 42.2, 
                        to = 123123, ), ),
                dry_run = True,
                enabled = True,
                include_user_facing_descriptors = True,
                outage_duration_from = 123123,
                outage_duration_to = 123123,
                outage_strategy = 'OneServicePerGroup',
                start_time = '63148.0',
                stop_time = '63148.0',
                target_groups = [
                    'a string value'
                    ],
                times_per_day = 123123,
        )
        """

    def testSnowMonkeyConfig(self):
        """Test SnowMonkeyConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

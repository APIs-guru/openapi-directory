# coding: utf-8

"""
    Otoroshi Admin API

    Admin API of the Otoroshi reverse proxy

    The version of the OpenAPI document: 1.5.0-dev
    Contact: oss@maif.fr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.chaos_config import ChaosConfig

class TestChaosConfig(unittest.TestCase):
    """ChaosConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ChaosConfig:
        """Test ChaosConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ChaosConfig`
        """
        model = ChaosConfig()
        if include_optional:
            return ChaosConfig(
                bad_responses_fault_config = openapi_client.models.bad_responses_fault_config.BadResponsesFaultConfig(
                    ratio = 42.2, 
                    responses = [
                        openapi_client.models.bad_response.BadResponse(
                            body = 'a string value', 
                            headers = {"key":"value"}, 
                            status = 123123, )
                        ], ),
                enabled = True,
                large_request_fault_config = openapi_client.models.large_request_fault_config.LargeRequestFaultConfig(
                    additional_request_size = 123123, 
                    ratio = 42.2, ),
                large_response_fault_config = openapi_client.models.large_response_fault_config.LargeResponseFaultConfig(
                    additional_request_size = 123123, 
                    ratio = 42.2, ),
                latency_injection_fault_config = openapi_client.models.latency_injection_fault_config.LatencyInjectionFaultConfig(
                    from = 123123, 
                    ratio = 42.2, 
                    to = 123123, )
            )
        else:
            return ChaosConfig(
                enabled = True,
        )
        """

    def testChaosConfig(self):
        """Test ChaosConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

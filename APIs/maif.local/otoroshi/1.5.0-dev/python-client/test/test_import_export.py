# coding: utf-8

"""
    Otoroshi Admin API

    Admin API of the Otoroshi reverse proxy

    The version of the OpenAPI document: 1.5.0-dev
    Contact: oss@maif.fr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.import_export import ImportExport

class TestImportExport(unittest.TestCase):
    """ImportExport unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ImportExport:
        """Test ImportExport
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ImportExport`
        """
        model = ImportExport()
        if include_optional:
            return ImportExport(
                admins = [
                    openapi_client.models.import_export_admins_inner.ImportExport_admins_inner(
                        created_at = 123, 
                        label = 'a string value', 
                        password = 'a string value', 
                        registration = {"key":"value"}, 
                        username = 'a string value', )
                    ],
                api_keys = [
                    openapi_client.models.import_export_api_keys_inner.ImportExport_apiKeys_inner(
                        authorized_entities = ["a string value"], 
                        client_id = 'a string value', 
                        client_name = 'a string value', 
                        client_secret = 'a string value', 
                        daily_quota = 123, 
                        enabled = True, 
                        metadata = {"key":"value"}, 
                        monthly_quota = 123, 
                        throttling_quota = 123, )
                    ],
                app_config = {"key":"value"},
                config = openapi_client.models.global_config.GlobalConfig(
                    alerts_emails = [
                        'admin@otoroshi.io'
                        ], 
                    alerts_webhooks = [
                        openapi_client.models.webhook.Webhook(
                            headers = {"key":"value"}, 
                            url = 'http://www.google.com', )
                        ], 
                    analytics_webhooks = [
                        openapi_client.models.webhook.Webhook(
                            headers = {"key":"value"}, 
                            url = 'http://www.google.com', )
                        ], 
                    api_read_only = True, 
                    auto_link_to_default_group = True, 
                    backoffice_auth0_config = openapi_client.models.auth0_config.Auth0Config(
                        callback_url = 'a string value', 
                        client_id = 'a string value', 
                        client_secret = 'a string value', 
                        domain = 'a string value', ), 
                    clever_settings = openapi_client.models.clever_settings.CleverSettings(
                        consumer_key = 'a string value', 
                        consumer_secret = 'a string value', 
                        orga_id = 'a string value', 
                        secret = 'a string value', 
                        token = 'a string value', ), 
                    elastic_reads_config = openapi_client.models.elastic_config.ElasticConfig(
                        cluster_uri = 'a string value', 
                        headers = {"key":"value"}, 
                        index = 'a string value', 
                        password = 'a string value', 
                        type = 'a string value', 
                        user = 'a string value', ), 
                    elastic_writes_configs = [
                        openapi_client.models.elastic_config.ElasticConfig(
                            cluster_uri = 'a string value', 
                            headers = {"key":"value"}, 
                            index = 'a string value', 
                            password = 'a string value', 
                            type = 'a string value', 
                            user = 'a string value', )
                        ], 
                    endless_ip_addresses = [
                        '192.192.192.192'
                        ], 
                    ip_filtering = openapi_client.models.ip_filtering.IpFiltering(
                        blacklist = [
                            '192.192.192.192'
                            ], 
                        whitelist = [
                            '192.192.192.192'
                            ], ), 
                    limit_concurrent_requests = True, 
                    lines = [
                        'a string value'
                        ], 
                    mailer_settings = openapi_client.models.mailer_settings.MailerSettings(
                        api_key = 'a string value', 
                        api_key_private = 'a string value', 
                        api_key_public = 'a string value', 
                        domain = 'a string value', 
                        eu = True, 
                        header = {"key":"value"}, 
                        type = 'a string value', 
                        url = 'a string value', ), 
                    max_concurrent_requests = 123, 
                    max_http10_response_size = 123, 
                    max_logs_size = 123123, 
                    middle_fingers = True, 
                    per_ip_throttling_quota = 123, 
                    private_apps_auth0_config = openapi_client.models.auth0_config.Auth0Config(
                        callback_url = 'a string value', 
                        client_id = 'a string value', 
                        client_secret = 'a string value', 
                        domain = 'a string value', ), 
                    stream_entity_only = True, 
                    throttling_quota = 123, 
                    u2f_login_only = True, 
                    use_circuit_breakers = True, ),
                var_date = '2017-07-21T17:32:28Z',
                date_raw = 123,
                error_templates = [
                    openapi_client.models.import_export_error_templates_inner.ImportExport_errorTemplates_inner(
                        messages = {"key":"value"}, 
                        service_id = 'a string value', 
                        template40x = 'a string value', 
                        template50x = 'a string value', 
                        template_build = 'a string value', 
                        template_maintenance = 'a string value', )
                    ],
                label = 'a string value',
                service_descriptors = [
                    openapi_client.models.import_export_service_descriptors_inner.ImportExport_serviceDescriptors_inner(
                        canary = openapi_client.models.canary.Canary(
                            enabled = True, 
                            root = 'a string value', 
                            targets = [
                                openapi_client.models.target.Target(
                                    host = 'www.google.com', 
                                    scheme = 'a string value', )
                                ], 
                            traffic = 123123, ), 
                        additional_headers = {"key":"value"}, 
                        api = openapi_client.models.exposed_api.ExposedApi(
                            expose_api = True, 
                            open_api_descriptor_url = 'http://www.google.com', ), 
                        auth_config_ref = 'a string value', 
                        build_mode = True, 
                        chaos_config = openapi_client.models.chaos_config.ChaosConfig(
                            bad_responses_fault_config = openapi_client.models.bad_responses_fault_config.BadResponsesFaultConfig(
                                ratio = 42.2, 
                                responses = [
                                    openapi_client.models.bad_response.BadResponse(
                                        body = 'a string value', 
                                        headers = {"key":"value"}, 
                                        status = 123123, )
                                    ], ), 
                            enabled = True, 
                            large_request_fault_config = openapi_client.models.large_request_fault_config.LargeRequestFaultConfig(
                                additional_request_size = 123123, 
                                ratio = 42.2, ), 
                            large_response_fault_config = openapi_client.models.large_response_fault_config.LargeResponseFaultConfig(
                                additional_request_size = 123123, 
                                ratio = 42.2, ), 
                            latency_injection_fault_config = openapi_client.models.latency_injection_fault_config.LatencyInjectionFaultConfig(
                                from = 123123, 
                                ratio = 42.2, 
                                to = 123123, ), ), 
                        client_config = openapi_client.models.client_config.ClientConfig(
                            backoff_factor = 123123, 
                            call_timeout = 123123, 
                            global_timeout = 123123, 
                            max_errors = 123123, 
                            retries = 123123, 
                            retry_initial_delay = 123123, 
                            sample_interval = 123123, 
                            use_circuit_breaker = True, ), 
                        client_validator_ref = 'a string value', 
                        cors = openapi_client.models.cors_settings.CorsSettings(
                            allow_credentials = True, 
                            allow_headers = [
                                'a string value'
                                ], 
                            allow_methods = [
                                'a string value'
                                ], 
                            allow_origin = 'a string value', 
                            enabled = True, 
                            excluded_patterns = [
                                'a string value'
                                ], 
                            expose_headers = [
                                'a string value'
                                ], 
                            max_age = 123123, ), 
                        domain = 'a string value', 
                        enabled = True, 
                        enforce_secure_communication = True, 
                        env = 'a string value', 
                        force_https = True, 
                        groups = ["a string value"], 
                        gzip = openapi_client.models.gzip.Gzip(
                            black_list = [
                                'a string value'
                                ], 
                            buffer_size = 123, 
                            chunked_threshold = 123, 
                            compression_level = 123123, 
                            enabled = True, 
                            excluded_patterns = [
                                'a string value'
                                ], 
                            white_list = [
                                'a string value'
                                ], ), 
                        headers_verification = {"key":"value"}, 
                        health_check = openapi_client.models.health_check.HealthCheck(
                            enabled = True, 
                            url = 'http://www.google.com', ), 
                        id = '110e8400-e29b-11d4-a716-446655440000', 
                        ip_filtering = openapi_client.models.ip_filtering.IpFiltering(
                            blacklist = [
                                '192.192.192.192'
                                ], 
                            whitelist = [
                                '192.192.192.192'
                                ], ), 
                        jwt_verifier = null, 
                        local_host = 'a string value', 
                        local_scheme = 'a string value', 
                        maintenance_mode = True, 
                        matching_headers = {"key":"value"}, 
                        matching_root = 'a string value', 
                        metadata = {"key":"value"}, 
                        name = 'a string value', 
                        override_host = True, 
                        private_app = True, 
                        private_patterns = [
                            'a string value'
                            ], 
                        public_patterns = [
                            'a string value'
                            ], 
                        redirect_to_local = True, 
                        redirection = openapi_client.models.redirection_settings.RedirectionSettings(
                            code = 123123, 
                            enabled = True, 
                            to = 'a string value', ), 
                        root = 'a string value', 
                        sec_com_excluded_patterns = [
                            'a string value'
                            ], 
                        sec_com_settings = null, 
                        send_otoroshi_headers_back = True, 
                        statsd_config = openapi_client.models.statsd_config.StatsdConfig(
                            datadog = True, 
                            host = 'a string value', 
                            port = 123123, ), 
                        subdomain = 'a string value', 
                        targets = [
                            openapi_client.models.target.Target(
                                host = 'www.google.com', 
                                scheme = 'a string value', )
                            ], 
                        transformer_ref = 'a string value', 
                        user_facing = True, 
                        x_forwarded_headers = True, )
                    ],
                service_groups = [
                    openapi_client.models.import_export_service_groups_inner.ImportExport_serviceGroups_inner(
                        description = 'a string value', 
                        id = 'a string value', 
                        name = 'a string value', )
                    ],
                simple_admins = [
                    openapi_client.models.import_export_simple_admins_inner.ImportExport_simpleAdmins_inner(
                        created_at = 123, 
                        label = 'a string value', 
                        password = 'a string value', 
                        username = 'a string value', )
                    ],
                stats = openapi_client.models.import_export_stats.ImportExportStats(
                    calls = 123, 
                    data_in = 123, 
                    data_out = 123, )
            )
        else:
            return ImportExport(
                admins = [
                    openapi_client.models.import_export_admins_inner.ImportExport_admins_inner(
                        created_at = 123, 
                        label = 'a string value', 
                        password = 'a string value', 
                        registration = {"key":"value"}, 
                        username = 'a string value', )
                    ],
                api_keys = [
                    openapi_client.models.import_export_api_keys_inner.ImportExport_apiKeys_inner(
                        authorized_entities = ["a string value"], 
                        client_id = 'a string value', 
                        client_name = 'a string value', 
                        client_secret = 'a string value', 
                        daily_quota = 123, 
                        enabled = True, 
                        metadata = {"key":"value"}, 
                        monthly_quota = 123, 
                        throttling_quota = 123, )
                    ],
                config = openapi_client.models.global_config.GlobalConfig(
                    alerts_emails = [
                        'admin@otoroshi.io'
                        ], 
                    alerts_webhooks = [
                        openapi_client.models.webhook.Webhook(
                            headers = {"key":"value"}, 
                            url = 'http://www.google.com', )
                        ], 
                    analytics_webhooks = [
                        openapi_client.models.webhook.Webhook(
                            headers = {"key":"value"}, 
                            url = 'http://www.google.com', )
                        ], 
                    api_read_only = True, 
                    auto_link_to_default_group = True, 
                    backoffice_auth0_config = openapi_client.models.auth0_config.Auth0Config(
                        callback_url = 'a string value', 
                        client_id = 'a string value', 
                        client_secret = 'a string value', 
                        domain = 'a string value', ), 
                    clever_settings = openapi_client.models.clever_settings.CleverSettings(
                        consumer_key = 'a string value', 
                        consumer_secret = 'a string value', 
                        orga_id = 'a string value', 
                        secret = 'a string value', 
                        token = 'a string value', ), 
                    elastic_reads_config = openapi_client.models.elastic_config.ElasticConfig(
                        cluster_uri = 'a string value', 
                        headers = {"key":"value"}, 
                        index = 'a string value', 
                        password = 'a string value', 
                        type = 'a string value', 
                        user = 'a string value', ), 
                    elastic_writes_configs = [
                        openapi_client.models.elastic_config.ElasticConfig(
                            cluster_uri = 'a string value', 
                            headers = {"key":"value"}, 
                            index = 'a string value', 
                            password = 'a string value', 
                            type = 'a string value', 
                            user = 'a string value', )
                        ], 
                    endless_ip_addresses = [
                        '192.192.192.192'
                        ], 
                    ip_filtering = openapi_client.models.ip_filtering.IpFiltering(
                        blacklist = [
                            '192.192.192.192'
                            ], 
                        whitelist = [
                            '192.192.192.192'
                            ], ), 
                    limit_concurrent_requests = True, 
                    lines = [
                        'a string value'
                        ], 
                    mailer_settings = openapi_client.models.mailer_settings.MailerSettings(
                        api_key = 'a string value', 
                        api_key_private = 'a string value', 
                        api_key_public = 'a string value', 
                        domain = 'a string value', 
                        eu = True, 
                        header = {"key":"value"}, 
                        type = 'a string value', 
                        url = 'a string value', ), 
                    max_concurrent_requests = 123, 
                    max_http10_response_size = 123, 
                    max_logs_size = 123123, 
                    middle_fingers = True, 
                    per_ip_throttling_quota = 123, 
                    private_apps_auth0_config = openapi_client.models.auth0_config.Auth0Config(
                        callback_url = 'a string value', 
                        client_id = 'a string value', 
                        client_secret = 'a string value', 
                        domain = 'a string value', ), 
                    stream_entity_only = True, 
                    throttling_quota = 123, 
                    u2f_login_only = True, 
                    use_circuit_breakers = True, ),
                var_date = '2017-07-21T17:32:28Z',
                date_raw = 123,
                error_templates = [
                    openapi_client.models.import_export_error_templates_inner.ImportExport_errorTemplates_inner(
                        messages = {"key":"value"}, 
                        service_id = 'a string value', 
                        template40x = 'a string value', 
                        template50x = 'a string value', 
                        template_build = 'a string value', 
                        template_maintenance = 'a string value', )
                    ],
                label = 'a string value',
                service_descriptors = [
                    openapi_client.models.import_export_service_descriptors_inner.ImportExport_serviceDescriptors_inner(
                        canary = openapi_client.models.canary.Canary(
                            enabled = True, 
                            root = 'a string value', 
                            targets = [
                                openapi_client.models.target.Target(
                                    host = 'www.google.com', 
                                    scheme = 'a string value', )
                                ], 
                            traffic = 123123, ), 
                        additional_headers = {"key":"value"}, 
                        api = openapi_client.models.exposed_api.ExposedApi(
                            expose_api = True, 
                            open_api_descriptor_url = 'http://www.google.com', ), 
                        auth_config_ref = 'a string value', 
                        build_mode = True, 
                        chaos_config = openapi_client.models.chaos_config.ChaosConfig(
                            bad_responses_fault_config = openapi_client.models.bad_responses_fault_config.BadResponsesFaultConfig(
                                ratio = 42.2, 
                                responses = [
                                    openapi_client.models.bad_response.BadResponse(
                                        body = 'a string value', 
                                        headers = {"key":"value"}, 
                                        status = 123123, )
                                    ], ), 
                            enabled = True, 
                            large_request_fault_config = openapi_client.models.large_request_fault_config.LargeRequestFaultConfig(
                                additional_request_size = 123123, 
                                ratio = 42.2, ), 
                            large_response_fault_config = openapi_client.models.large_response_fault_config.LargeResponseFaultConfig(
                                additional_request_size = 123123, 
                                ratio = 42.2, ), 
                            latency_injection_fault_config = openapi_client.models.latency_injection_fault_config.LatencyInjectionFaultConfig(
                                from = 123123, 
                                ratio = 42.2, 
                                to = 123123, ), ), 
                        client_config = openapi_client.models.client_config.ClientConfig(
                            backoff_factor = 123123, 
                            call_timeout = 123123, 
                            global_timeout = 123123, 
                            max_errors = 123123, 
                            retries = 123123, 
                            retry_initial_delay = 123123, 
                            sample_interval = 123123, 
                            use_circuit_breaker = True, ), 
                        client_validator_ref = 'a string value', 
                        cors = openapi_client.models.cors_settings.CorsSettings(
                            allow_credentials = True, 
                            allow_headers = [
                                'a string value'
                                ], 
                            allow_methods = [
                                'a string value'
                                ], 
                            allow_origin = 'a string value', 
                            enabled = True, 
                            excluded_patterns = [
                                'a string value'
                                ], 
                            expose_headers = [
                                'a string value'
                                ], 
                            max_age = 123123, ), 
                        domain = 'a string value', 
                        enabled = True, 
                        enforce_secure_communication = True, 
                        env = 'a string value', 
                        force_https = True, 
                        groups = ["a string value"], 
                        gzip = openapi_client.models.gzip.Gzip(
                            black_list = [
                                'a string value'
                                ], 
                            buffer_size = 123, 
                            chunked_threshold = 123, 
                            compression_level = 123123, 
                            enabled = True, 
                            excluded_patterns = [
                                'a string value'
                                ], 
                            white_list = [
                                'a string value'
                                ], ), 
                        headers_verification = {"key":"value"}, 
                        health_check = openapi_client.models.health_check.HealthCheck(
                            enabled = True, 
                            url = 'http://www.google.com', ), 
                        id = '110e8400-e29b-11d4-a716-446655440000', 
                        ip_filtering = openapi_client.models.ip_filtering.IpFiltering(
                            blacklist = [
                                '192.192.192.192'
                                ], 
                            whitelist = [
                                '192.192.192.192'
                                ], ), 
                        jwt_verifier = null, 
                        local_host = 'a string value', 
                        local_scheme = 'a string value', 
                        maintenance_mode = True, 
                        matching_headers = {"key":"value"}, 
                        matching_root = 'a string value', 
                        metadata = {"key":"value"}, 
                        name = 'a string value', 
                        override_host = True, 
                        private_app = True, 
                        private_patterns = [
                            'a string value'
                            ], 
                        public_patterns = [
                            'a string value'
                            ], 
                        redirect_to_local = True, 
                        redirection = openapi_client.models.redirection_settings.RedirectionSettings(
                            code = 123123, 
                            enabled = True, 
                            to = 'a string value', ), 
                        root = 'a string value', 
                        sec_com_excluded_patterns = [
                            'a string value'
                            ], 
                        sec_com_settings = null, 
                        send_otoroshi_headers_back = True, 
                        statsd_config = openapi_client.models.statsd_config.StatsdConfig(
                            datadog = True, 
                            host = 'a string value', 
                            port = 123123, ), 
                        subdomain = 'a string value', 
                        targets = [
                            openapi_client.models.target.Target(
                                host = 'www.google.com', 
                                scheme = 'a string value', )
                            ], 
                        transformer_ref = 'a string value', 
                        user_facing = True, 
                        x_forwarded_headers = True, )
                    ],
                service_groups = [
                    openapi_client.models.import_export_service_groups_inner.ImportExport_serviceGroups_inner(
                        description = 'a string value', 
                        id = 'a string value', 
                        name = 'a string value', )
                    ],
                simple_admins = [
                    openapi_client.models.import_export_simple_admins_inner.ImportExport_simpleAdmins_inner(
                        created_at = 123, 
                        label = 'a string value', 
                        password = 'a string value', 
                        username = 'a string value', )
                    ],
                stats = openapi_client.models.import_export_stats.ImportExportStats(
                    calls = 123, 
                    data_in = 123, 
                    data_out = 123, ),
        )
        """

    def testImportExport(self):
        """Test ImportExport"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

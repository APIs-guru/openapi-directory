# coding: utf-8

"""
    Otoroshi Admin API

    Admin API of the Otoroshi reverse proxy

    The version of the OpenAPI document: 1.5.0-dev
    Contact: oss@maif.fr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.data_exporter_config import DataExporterConfig

class TestDataExporterConfig(unittest.TestCase):
    """DataExporterConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DataExporterConfig:
        """Test DataExporterConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DataExporterConfig`
        """
        model = DataExporterConfig()
        if include_optional:
            return DataExporterConfig(
                buffer_size = 123123,
                config = None,
                desc = 'a string value',
                enabled = 'a string value',
                filtering = openapi_client.models.filtering.Filtering(
                    exclude = [
                        {"key":"value"}
                        ], 
                    include = [
                        {"key":"value"}
                        ], ),
                group_duration = 123,
                group_size = 123123,
                id = 'a string value',
                json_workers = 123123,
                location = openapi_client.models.location.Location(
                    teams = [
                        {"key":"value"}
                        ], 
                    tenant = 'a string value', ),
                metadata = {"key":"value"},
                name = 'a string value',
                projection = {"key":"value"},
                send_workers = 123123,
                typ = 'kafka'
            )
        else:
            return DataExporterConfig(
        )
        """

    def testDataExporterConfig(self):
        """Test DataExporterConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

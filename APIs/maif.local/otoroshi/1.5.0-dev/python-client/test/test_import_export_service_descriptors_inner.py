# coding: utf-8

"""
    Otoroshi Admin API

    Admin API of the Otoroshi reverse proxy

    The version of the OpenAPI document: 1.5.0-dev
    Contact: oss@maif.fr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.import_export_service_descriptors_inner import ImportExportServiceDescriptorsInner

class TestImportExportServiceDescriptorsInner(unittest.TestCase):
    """ImportExportServiceDescriptorsInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ImportExportServiceDescriptorsInner:
        """Test ImportExportServiceDescriptorsInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ImportExportServiceDescriptorsInner`
        """
        model = ImportExportServiceDescriptorsInner()
        if include_optional:
            return ImportExportServiceDescriptorsInner(
                canary = openapi_client.models.canary.Canary(
                    enabled = True, 
                    root = 'a string value', 
                    targets = [
                        openapi_client.models.target.Target(
                            host = 'www.google.com', 
                            scheme = 'a string value', )
                        ], 
                    traffic = 123123, ),
                additional_headers = {"key":"value"},
                api = openapi_client.models.exposed_api.ExposedApi(
                    expose_api = True, 
                    open_api_descriptor_url = 'http://www.google.com', ),
                auth_config_ref = 'a string value',
                build_mode = True,
                chaos_config = openapi_client.models.chaos_config.ChaosConfig(
                    bad_responses_fault_config = openapi_client.models.bad_responses_fault_config.BadResponsesFaultConfig(
                        ratio = 42.2, 
                        responses = [
                            openapi_client.models.bad_response.BadResponse(
                                body = 'a string value', 
                                headers = {"key":"value"}, 
                                status = 123123, )
                            ], ), 
                    enabled = True, 
                    large_request_fault_config = openapi_client.models.large_request_fault_config.LargeRequestFaultConfig(
                        additional_request_size = 123123, 
                        ratio = 42.2, ), 
                    large_response_fault_config = openapi_client.models.large_response_fault_config.LargeResponseFaultConfig(
                        additional_request_size = 123123, 
                        ratio = 42.2, ), 
                    latency_injection_fault_config = openapi_client.models.latency_injection_fault_config.LatencyInjectionFaultConfig(
                        from = 123123, 
                        ratio = 42.2, 
                        to = 123123, ), ),
                client_config = openapi_client.models.client_config.ClientConfig(
                    backoff_factor = 123123, 
                    call_timeout = 123123, 
                    global_timeout = 123123, 
                    max_errors = 123123, 
                    retries = 123123, 
                    retry_initial_delay = 123123, 
                    sample_interval = 123123, 
                    use_circuit_breaker = True, ),
                client_validator_ref = 'a string value',
                cors = openapi_client.models.cors_settings.CorsSettings(
                    allow_credentials = True, 
                    allow_headers = [
                        'a string value'
                        ], 
                    allow_methods = [
                        'a string value'
                        ], 
                    allow_origin = 'a string value', 
                    enabled = True, 
                    excluded_patterns = [
                        'a string value'
                        ], 
                    expose_headers = [
                        'a string value'
                        ], 
                    max_age = 123123, ),
                domain = 'a string value',
                enabled = True,
                enforce_secure_communication = True,
                env = 'a string value',
                force_https = True,
                groups = ["a string value"],
                gzip = openapi_client.models.gzip.Gzip(
                    black_list = [
                        'a string value'
                        ], 
                    buffer_size = 123, 
                    chunked_threshold = 123, 
                    compression_level = 123123, 
                    enabled = True, 
                    excluded_patterns = [
                        'a string value'
                        ], 
                    white_list = [
                        'a string value'
                        ], ),
                headers_verification = {"key":"value"},
                health_check = openapi_client.models.health_check.HealthCheck(
                    enabled = True, 
                    url = 'http://www.google.com', ),
                id = '110e8400-e29b-11d4-a716-446655440000',
                ip_filtering = openapi_client.models.ip_filtering.IpFiltering(
                    blacklist = [
                        '192.192.192.192'
                        ], 
                    whitelist = [
                        '192.192.192.192'
                        ], ),
                jwt_verifier = None,
                local_host = 'a string value',
                local_scheme = 'a string value',
                maintenance_mode = True,
                matching_headers = {"key":"value"},
                matching_root = 'a string value',
                metadata = {"key":"value"},
                name = 'a string value',
                override_host = True,
                private_app = True,
                private_patterns = [
                    'a string value'
                    ],
                public_patterns = [
                    'a string value'
                    ],
                redirect_to_local = True,
                redirection = openapi_client.models.redirection_settings.RedirectionSettings(
                    code = 123123, 
                    enabled = True, 
                    to = 'a string value', ),
                root = 'a string value',
                sec_com_excluded_patterns = [
                    'a string value'
                    ],
                sec_com_settings = None,
                send_otoroshi_headers_back = True,
                statsd_config = openapi_client.models.statsd_config.StatsdConfig(
                    datadog = True, 
                    host = 'a string value', 
                    port = 123123, ),
                subdomain = 'a string value',
                targets = [
                    openapi_client.models.target.Target(
                        host = 'www.google.com', 
                        scheme = 'a string value', )
                    ],
                transformer_ref = 'a string value',
                user_facing = True,
                x_forwarded_headers = True
            )
        else:
            return ImportExportServiceDescriptorsInner(
                build_mode = True,
                domain = 'a string value',
                enabled = True,
                enforce_secure_communication = True,
                env = 'a string value',
                force_https = True,
                groups = ["a string value"],
                id = '110e8400-e29b-11d4-a716-446655440000',
                maintenance_mode = True,
                name = 'a string value',
                private_app = True,
                root = 'a string value',
                subdomain = 'a string value',
                targets = [
                    openapi_client.models.target.Target(
                        host = 'www.google.com', 
                        scheme = 'a string value', )
                    ],
        )
        """

    def testImportExportServiceDescriptorsInner(self):
        """Test ImportExportServiceDescriptorsInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

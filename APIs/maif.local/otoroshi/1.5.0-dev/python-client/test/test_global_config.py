# coding: utf-8

"""
    Otoroshi Admin API

    Admin API of the Otoroshi reverse proxy

    The version of the OpenAPI document: 1.5.0-dev
    Contact: oss@maif.fr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.global_config import GlobalConfig

class TestGlobalConfig(unittest.TestCase):
    """GlobalConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GlobalConfig:
        """Test GlobalConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GlobalConfig`
        """
        model = GlobalConfig()
        if include_optional:
            return GlobalConfig(
                alerts_emails = [
                    'admin@otoroshi.io'
                    ],
                alerts_webhooks = [
                    openapi_client.models.webhook.Webhook(
                        headers = {"key":"value"}, 
                        url = 'http://www.google.com', )
                    ],
                analytics_webhooks = [
                    openapi_client.models.webhook.Webhook(
                        headers = {"key":"value"}, 
                        url = 'http://www.google.com', )
                    ],
                api_read_only = True,
                auto_link_to_default_group = True,
                backoffice_auth0_config = openapi_client.models.auth0_config.Auth0Config(
                    callback_url = 'a string value', 
                    client_id = 'a string value', 
                    client_secret = 'a string value', 
                    domain = 'a string value', ),
                clever_settings = openapi_client.models.clever_settings.CleverSettings(
                    consumer_key = 'a string value', 
                    consumer_secret = 'a string value', 
                    orga_id = 'a string value', 
                    secret = 'a string value', 
                    token = 'a string value', ),
                elastic_reads_config = openapi_client.models.elastic_config.ElasticConfig(
                    cluster_uri = 'a string value', 
                    headers = {"key":"value"}, 
                    index = 'a string value', 
                    password = 'a string value', 
                    type = 'a string value', 
                    user = 'a string value', ),
                elastic_writes_configs = [
                    openapi_client.models.elastic_config.ElasticConfig(
                        cluster_uri = 'a string value', 
                        headers = {"key":"value"}, 
                        index = 'a string value', 
                        password = 'a string value', 
                        type = 'a string value', 
                        user = 'a string value', )
                    ],
                endless_ip_addresses = [
                    '192.192.192.192'
                    ],
                ip_filtering = openapi_client.models.ip_filtering.IpFiltering(
                    blacklist = [
                        '192.192.192.192'
                        ], 
                    whitelist = [
                        '192.192.192.192'
                        ], ),
                limit_concurrent_requests = True,
                lines = [
                    'a string value'
                    ],
                mailer_settings = openapi_client.models.mailer_settings.MailerSettings(
                    api_key = 'a string value', 
                    api_key_private = 'a string value', 
                    api_key_public = 'a string value', 
                    domain = 'a string value', 
                    eu = True, 
                    header = {"key":"value"}, 
                    type = 'a string value', 
                    url = 'a string value', ),
                max_concurrent_requests = 123,
                max_http10_response_size = 123,
                max_logs_size = 123123,
                middle_fingers = True,
                per_ip_throttling_quota = 123,
                private_apps_auth0_config = openapi_client.models.auth0_config.Auth0Config(
                    callback_url = 'a string value', 
                    client_id = 'a string value', 
                    client_secret = 'a string value', 
                    domain = 'a string value', ),
                stream_entity_only = True,
                throttling_quota = 123,
                u2f_login_only = True,
                use_circuit_breakers = True
            )
        else:
            return GlobalConfig(
                alerts_emails = [
                    'admin@otoroshi.io'
                    ],
                alerts_webhooks = [
                    openapi_client.models.webhook.Webhook(
                        headers = {"key":"value"}, 
                        url = 'http://www.google.com', )
                    ],
                analytics_webhooks = [
                    openapi_client.models.webhook.Webhook(
                        headers = {"key":"value"}, 
                        url = 'http://www.google.com', )
                    ],
                api_read_only = True,
                auto_link_to_default_group = True,
                endless_ip_addresses = [
                    '192.192.192.192'
                    ],
                ip_filtering = openapi_client.models.ip_filtering.IpFiltering(
                    blacklist = [
                        '192.192.192.192'
                        ], 
                    whitelist = [
                        '192.192.192.192'
                        ], ),
                limit_concurrent_requests = True,
                max_concurrent_requests = 123,
                per_ip_throttling_quota = 123,
                stream_entity_only = True,
                throttling_quota = 123,
                u2f_login_only = True,
                use_circuit_breakers = True,
        )
        """

    def testGlobalConfig(self):
        """Test GlobalConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    JSON2Video API

    Create and edit awesome videos programmatically

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.movie_elements_inner import MovieElementsInner
from openapi_client.models.scene import Scene
from typing import Optional, Set
from typing_extensions import Self

class Movie(BaseModel):
    """
    Object defining the movie to be rendered
    """ # noqa: E501
    cache: Optional[StrictBool] = True
    comment: Optional[StrictStr] = Field(default=None, description="Used for adding your comments")
    draft: Optional[StrictBool] = Field(default=True, description="Draft movies include a watermark. Check your plan how many draft and final movies you have")
    elements: Optional[List[MovieElementsInner]] = None
    exports: Optional[List[Any]] = Field(default=None, description="You can define different types of exports for your movie. Check the <a href=\"https://json2video.com/docs/tutorial/exports\">documentation</a> for more information")
    fps: Optional[StrictInt] = Field(default=25, description="Frames per second")
    height: Optional[Annotated[int, Field(le=1080, strict=True, ge=50)]] = 360
    quality: Optional[StrictStr] = 'high'
    resolution: Optional[StrictStr] = None
    scenes: List[Scene]
    settings: Optional[Dict[str, Any]] = Field(default=None, description="Movie advanced settings")
    width: Optional[Annotated[int, Field(le=1920, strict=True, ge=50)]] = 640
    __properties: ClassVar[List[str]] = ["cache", "comment", "draft", "elements", "exports", "fps", "height", "quality", "resolution", "scenes", "settings", "width"]

    @field_validator('quality')
    def quality_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['low', 'medium', 'high']):
            raise ValueError("must be one of enum values ('low', 'medium', 'high')")
        return value

    @field_validator('resolution')
    def resolution_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['sd', 'hd', 'full-hd', 'squared', 'instagram-story', 'instagram-feed', 'twitter-landscape', 'twitter-portrait']):
            raise ValueError("must be one of enum values ('sd', 'hd', 'full-hd', 'squared', 'instagram-story', 'instagram-feed', 'twitter-landscape', 'twitter-portrait')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Movie from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in elements (list)
        _items = []
        if self.elements:
            for _item_elements in self.elements:
                if _item_elements:
                    _items.append(_item_elements.to_dict())
            _dict['elements'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in scenes (list)
        _items = []
        if self.scenes:
            for _item_scenes in self.scenes:
                if _item_scenes:
                    _items.append(_item_scenes.to_dict())
            _dict['scenes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Movie from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cache": obj.get("cache") if obj.get("cache") is not None else True,
            "comment": obj.get("comment"),
            "draft": obj.get("draft") if obj.get("draft") is not None else True,
            "elements": [MovieElementsInner.from_dict(_item) for _item in obj["elements"]] if obj.get("elements") is not None else None,
            "exports": obj.get("exports"),
            "fps": obj.get("fps") if obj.get("fps") is not None else 25,
            "height": obj.get("height") if obj.get("height") is not None else 360,
            "quality": obj.get("quality") if obj.get("quality") is not None else 'high',
            "resolution": obj.get("resolution"),
            "scenes": [Scene.from_dict(_item) for _item in obj["scenes"]] if obj.get("scenes") is not None else None,
            "settings": obj.get("settings"),
            "width": obj.get("width") if obj.get("width") is not None else 640
        })
        return _obj



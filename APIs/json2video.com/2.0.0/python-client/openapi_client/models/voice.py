# coding: utf-8

"""
    JSON2Video API

    Create and edit awesome videos programmatically

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Voice(BaseModel):
    """
    Creates a voice audio element from the provided text
    """ # noqa: E501
    cache: Optional[StrictBool] = Field(default=True, description="Element's cache policy. When true, the cached version (if exists) is used. When false, the assets is downloaded.")
    comment: Optional[StrictStr] = Field(default=None, description="Used for adding your comments")
    duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=-1, description="Element's duration in seconds. A value of -1 auto calculates the duration based on the asset intrinsic length or the scene duration.")
    extra_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=0, description="Element's time span added after the playback.", alias="extra-time")
    fade_in: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Adds a fade in effect to the element. Value in seconds.", alias="fade-in")
    fade_out: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Adds a fade out effect to the element. Value in seconds.", alias="fade-out")
    start: Optional[Union[StrictFloat, StrictInt]] = Field(default=0, description="Element's starting time in seconds relative to the container scene or the movie if the element is in the Movie's elements array.")
    z_index: Optional[Union[StrictFloat, StrictInt]] = Field(default=0, description="Element's z-index. Use this property to reorganize the layering of the elements like in HTML", alias="z-index")
    muted: Optional[StrictBool] = Field(default=False, description="Mutes the audio")
    volume: Optional[Union[Annotated[float, Field(le=10, strict=True, ge=0)], Annotated[int, Field(le=10, strict=True, ge=0)]]] = 5
    text: StrictStr = Field(description="The sentence or sentences to be converted to voice audio")
    type: StrictStr
    voice: Optional[StrictStr] = Field(default='en-GB-LibbyNeural', description="The voice name to be used. Check <a href=\"/docs/tutorial/voice-elements/\">available voices</a>.")
    __properties: ClassVar[List[str]] = ["cache", "comment", "duration", "extra-time", "fade-in", "fade-out", "start", "z-index", "muted", "volume", "text", "type", "voice"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['voice']):
            raise ValueError("must be one of enum values ('voice')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Voice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Voice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cache": obj.get("cache") if obj.get("cache") is not None else True,
            "comment": obj.get("comment"),
            "duration": obj.get("duration") if obj.get("duration") is not None else -1,
            "extra-time": obj.get("extra-time") if obj.get("extra-time") is not None else 0,
            "fade-in": obj.get("fade-in"),
            "fade-out": obj.get("fade-out"),
            "start": obj.get("start") if obj.get("start") is not None else 0,
            "z-index": obj.get("z-index") if obj.get("z-index") is not None else 0,
            "muted": obj.get("muted") if obj.get("muted") is not None else False,
            "volume": obj.get("volume") if obj.get("volume") is not None else 5,
            "text": obj.get("text"),
            "type": obj.get("type"),
            "voice": obj.get("voice") if obj.get("voice") is not None else 'en-GB-LibbyNeural'
        })
        return _obj



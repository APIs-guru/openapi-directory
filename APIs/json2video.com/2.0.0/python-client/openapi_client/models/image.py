# coding: utf-8

"""
    JSON2Video API

    Create and edit awesome videos programmatically

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.visual_element_chroma_key import VisualElementChromaKey
from openapi_client.models.visual_element_crop import VisualElementCrop
from openapi_client.models.visual_element_rotate import VisualElementRotate
from openapi_client.models.visual_element_scale import VisualElementScale
from typing import Optional, Set
from typing_extensions import Self

class Image(BaseModel):
    """
    Image
    """ # noqa: E501
    chroma_key: Optional[VisualElementChromaKey] = Field(default=None, alias="chroma-key")
    crop: Optional[VisualElementCrop] = None
    pan: Optional[StrictStr] = Field(default=None, description="Pans the element to the specified direction. If <code>zoom</code> property is not specified, the effect is a non-zooming pan")
    position: Optional[StrictStr] = Field(default='custom', description="Sets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' properties")
    rotate: Optional[VisualElementRotate] = None
    scale: Optional[VisualElementScale] = None
    x: Optional[Union[StrictFloat, StrictInt]] = Field(default=0, description="Sets the horizontal position of the element in the scene. The value <code>0</code> is on the left side")
    y: Optional[Union[StrictFloat, StrictInt]] = Field(default=0, description="Sets the vertical position of the element in the scene. The value <code>0</code> is on the top side")
    zoom: Optional[Annotated[int, Field(le=100, strict=True, ge=-100)]] = Field(default=None, description="Zooms the element with the specified level percentage. Positive values zoom in, negative values zoom out, zero does not zoom. Zoom can be combined with the <code>pan</code> property to set the focus point of the zooming")
    src: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["chroma-key", "crop", "pan", "position", "rotate", "scale", "x", "y", "zoom", "src", "type"]

    @field_validator('pan')
    def pan_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['left', 'top', 'right', 'bottom', 'top-left', 'top-right', 'bottom-left', 'bottom-right']):
            raise ValueError("must be one of enum values ('left', 'top', 'right', 'bottom', 'top-left', 'top-right', 'bottom-left', 'bottom-right')")
        return value

    @field_validator('position')
    def position_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['top-left', 'top-right', 'bottom-right', 'bottom-left', 'center-center', 'custom']):
            raise ValueError("must be one of enum values ('top-left', 'top-right', 'bottom-right', 'bottom-left', 'center-center', 'custom')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['image']):
            raise ValueError("must be one of enum values ('image')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Image from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of chroma_key
        if self.chroma_key:
            _dict['chroma-key'] = self.chroma_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of crop
        if self.crop:
            _dict['crop'] = self.crop.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rotate
        if self.rotate:
            _dict['rotate'] = self.rotate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scale
        if self.scale:
            _dict['scale'] = self.scale.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Image from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chroma-key": VisualElementChromaKey.from_dict(obj["chroma-key"]) if obj.get("chroma-key") is not None else None,
            "crop": VisualElementCrop.from_dict(obj["crop"]) if obj.get("crop") is not None else None,
            "pan": obj.get("pan"),
            "position": obj.get("position") if obj.get("position") is not None else 'custom',
            "rotate": VisualElementRotate.from_dict(obj["rotate"]) if obj.get("rotate") is not None else None,
            "scale": VisualElementScale.from_dict(obj["scale"]) if obj.get("scale") is not None else None,
            "x": obj.get("x") if obj.get("x") is not None else 0,
            "y": obj.get("y") if obj.get("y") is not None else 0,
            "zoom": obj.get("zoom"),
            "src": obj.get("src"),
            "type": obj.get("type")
        })
        return _obj



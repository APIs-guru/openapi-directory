# coding: utf-8

"""
    VictorOps

    This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.api_public_v1_oncall_current_get200_response import ApiPublicV1OncallCurrentGet200Response
from openapi_client.models.on_call_and_overrides import OnCallAndOverrides
from openapi_client.models.take_request import TakeRequest
from openapi_client.models.take_result import TakeResult
from openapi_client.models.team_schedule import TeamSchedule
from openapi_client.models.user_schedule import UserSchedule

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class OnCallApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def api_public_v1_oncall_current_get(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiPublicV1OncallCurrentGet200Response:
        """Get an organization's on-call users

        Get all on-call users/teams for your organization.  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_public_v1_oncall_current_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiPublicV1OncallCurrentGet200Response",
            '400': None,
            '401': None,
            '403': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_public_v1_oncall_current_get_with_http_info(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiPublicV1OncallCurrentGet200Response]:
        """Get an organization's on-call users

        Get all on-call users/teams for your organization.  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_public_v1_oncall_current_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiPublicV1OncallCurrentGet200Response",
            '400': None,
            '401': None,
            '403': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_public_v1_oncall_current_get_without_preload_content(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get an organization's on-call users

        Get all on-call users/teams for your organization.  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_public_v1_oncall_current_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiPublicV1OncallCurrentGet200Response",
            '400': None,
            '401': None,
            '403': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_public_v1_oncall_current_get_serialize(
        self,
        x_vo_api_id,
        x_vo_api_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_vo_api_id is not None:
            _header_params['X-VO-Api-Id'] = x_vo_api_id
        if x_vo_api_key is not None:
            _header_params['X-VO-Api-Key'] = x_vo_api_key
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api-public/v1/oncall/current',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_public_v1_policies_policy_oncall_user_patch(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        policy: Annotated[StrictStr, Field(description="The VictorOps policy 'slug'")],
        body: Annotated[TakeRequest, Field(description="The take on-call payload")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TakeResult:
        """Create an on-call override (take on-call)

        Replaces a currently on-call user in the escalation policy with another.  In many cases, the policy slug will match the slug of the team that contains it.  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param policy: The VictorOps policy 'slug' (required)
        :type policy: str
        :param body: The take on-call payload (required)
        :type body: TakeRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_public_v1_policies_policy_oncall_user_patch_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            policy=policy,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TakeResult",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_public_v1_policies_policy_oncall_user_patch_with_http_info(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        policy: Annotated[StrictStr, Field(description="The VictorOps policy 'slug'")],
        body: Annotated[TakeRequest, Field(description="The take on-call payload")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TakeResult]:
        """Create an on-call override (take on-call)

        Replaces a currently on-call user in the escalation policy with another.  In many cases, the policy slug will match the slug of the team that contains it.  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param policy: The VictorOps policy 'slug' (required)
        :type policy: str
        :param body: The take on-call payload (required)
        :type body: TakeRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_public_v1_policies_policy_oncall_user_patch_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            policy=policy,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TakeResult",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_public_v1_policies_policy_oncall_user_patch_without_preload_content(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        policy: Annotated[StrictStr, Field(description="The VictorOps policy 'slug'")],
        body: Annotated[TakeRequest, Field(description="The take on-call payload")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create an on-call override (take on-call)

        Replaces a currently on-call user in the escalation policy with another.  In many cases, the policy slug will match the slug of the team that contains it.  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param policy: The VictorOps policy 'slug' (required)
        :type policy: str
        :param body: The take on-call payload (required)
        :type body: TakeRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_public_v1_policies_policy_oncall_user_patch_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            policy=policy,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TakeResult",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_public_v1_policies_policy_oncall_user_patch_serialize(
        self,
        x_vo_api_id,
        x_vo_api_key,
        policy,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if policy is not None:
            _path_params['policy'] = policy
        # process the query parameters
        # process the header parameters
        if x_vo_api_id is not None:
            _header_params['X-VO-Api-Id'] = x_vo_api_id
        if x_vo_api_key is not None:
            _header_params['X-VO-Api-Key'] = x_vo_api_key
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/api-public/v1/policies/{policy}/oncall/user',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_public_v1_team_team_oncall_schedule_get(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        team: Annotated[StrictStr, Field(description="The VictorOps team 'slug'")],
        days_forward: Annotated[Optional[Union[Annotated[float, Field(le=30, strict=True, ge=0)], Annotated[int, Field(le=30, strict=True, ge=0)]]], Field(description="Days to include in returned schedule (30 max)")] = None,
        days_skip: Annotated[Optional[Union[Annotated[float, Field(le=90, strict=True, ge=0)], Annotated[int, Field(le=90, strict=True, ge=0)]]], Field(description="Days to skip before computing schedule to return (90 max)")] = None,
        step: Annotated[Optional[Union[Annotated[float, Field(le=3, strict=True, ge=0)], Annotated[int, Field(le=3, strict=True, ge=0)]]], Field(description="Step of escalation policy (3 max)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OnCallAndOverrides:
        """(Deprecated) Get a team's on-call schedule

        __NOTE: This call is deprecated. Please use `GET /api-public/v2/team/{team}/oncall/schedule`.__  Get the on-call schedule for a team, including on-call overrides.  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param team: The VictorOps team 'slug' (required)
        :type team: str
        :param days_forward: Days to include in returned schedule (30 max)
        :type days_forward: float
        :param days_skip: Days to skip before computing schedule to return (90 max)
        :type days_skip: float
        :param step: Step of escalation policy (3 max)
        :type step: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /api-public/v1/team/{team}/oncall/schedule is deprecated.", DeprecationWarning)

        _param = self._api_public_v1_team_team_oncall_schedule_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            team=team,
            days_forward=days_forward,
            days_skip=days_skip,
            step=step,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnCallAndOverrides",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_public_v1_team_team_oncall_schedule_get_with_http_info(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        team: Annotated[StrictStr, Field(description="The VictorOps team 'slug'")],
        days_forward: Annotated[Optional[Union[Annotated[float, Field(le=30, strict=True, ge=0)], Annotated[int, Field(le=30, strict=True, ge=0)]]], Field(description="Days to include in returned schedule (30 max)")] = None,
        days_skip: Annotated[Optional[Union[Annotated[float, Field(le=90, strict=True, ge=0)], Annotated[int, Field(le=90, strict=True, ge=0)]]], Field(description="Days to skip before computing schedule to return (90 max)")] = None,
        step: Annotated[Optional[Union[Annotated[float, Field(le=3, strict=True, ge=0)], Annotated[int, Field(le=3, strict=True, ge=0)]]], Field(description="Step of escalation policy (3 max)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OnCallAndOverrides]:
        """(Deprecated) Get a team's on-call schedule

        __NOTE: This call is deprecated. Please use `GET /api-public/v2/team/{team}/oncall/schedule`.__  Get the on-call schedule for a team, including on-call overrides.  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param team: The VictorOps team 'slug' (required)
        :type team: str
        :param days_forward: Days to include in returned schedule (30 max)
        :type days_forward: float
        :param days_skip: Days to skip before computing schedule to return (90 max)
        :type days_skip: float
        :param step: Step of escalation policy (3 max)
        :type step: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /api-public/v1/team/{team}/oncall/schedule is deprecated.", DeprecationWarning)

        _param = self._api_public_v1_team_team_oncall_schedule_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            team=team,
            days_forward=days_forward,
            days_skip=days_skip,
            step=step,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnCallAndOverrides",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_public_v1_team_team_oncall_schedule_get_without_preload_content(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        team: Annotated[StrictStr, Field(description="The VictorOps team 'slug'")],
        days_forward: Annotated[Optional[Union[Annotated[float, Field(le=30, strict=True, ge=0)], Annotated[int, Field(le=30, strict=True, ge=0)]]], Field(description="Days to include in returned schedule (30 max)")] = None,
        days_skip: Annotated[Optional[Union[Annotated[float, Field(le=90, strict=True, ge=0)], Annotated[int, Field(le=90, strict=True, ge=0)]]], Field(description="Days to skip before computing schedule to return (90 max)")] = None,
        step: Annotated[Optional[Union[Annotated[float, Field(le=3, strict=True, ge=0)], Annotated[int, Field(le=3, strict=True, ge=0)]]], Field(description="Step of escalation policy (3 max)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) Get a team's on-call schedule

        __NOTE: This call is deprecated. Please use `GET /api-public/v2/team/{team}/oncall/schedule`.__  Get the on-call schedule for a team, including on-call overrides.  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param team: The VictorOps team 'slug' (required)
        :type team: str
        :param days_forward: Days to include in returned schedule (30 max)
        :type days_forward: float
        :param days_skip: Days to skip before computing schedule to return (90 max)
        :type days_skip: float
        :param step: Step of escalation policy (3 max)
        :type step: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /api-public/v1/team/{team}/oncall/schedule is deprecated.", DeprecationWarning)

        _param = self._api_public_v1_team_team_oncall_schedule_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            team=team,
            days_forward=days_forward,
            days_skip=days_skip,
            step=step,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnCallAndOverrides",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_public_v1_team_team_oncall_schedule_get_serialize(
        self,
        x_vo_api_id,
        x_vo_api_key,
        team,
        days_forward,
        days_skip,
        step,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if team is not None:
            _path_params['team'] = team
        # process the query parameters
        if days_forward is not None:
            
            _query_params.append(('daysForward', days_forward))
            
        if days_skip is not None:
            
            _query_params.append(('daysSkip', days_skip))
            
        if step is not None:
            
            _query_params.append(('step', step))
            
        # process the header parameters
        if x_vo_api_id is not None:
            _header_params['X-VO-Api-Id'] = x_vo_api_id
        if x_vo_api_key is not None:
            _header_params['X-VO-Api-Key'] = x_vo_api_key
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api-public/v1/team/{team}/oncall/schedule',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_public_v1_team_team_oncall_user_patch(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        team: Annotated[StrictStr, Field(description="The VictorOps team 'slug'")],
        body: Annotated[TakeRequest, Field(description="The take on-call payload")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TakeResult:
        """(Deprecated) Create an on-call override (take on-call)

        __NOTE: This API call is deprecated. Please use `PATCH /api-public/v2/policies/{policy}/oncall/user`__  Replaces a currently on-call user on the team with another.  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param team: The VictorOps team 'slug' (required)
        :type team: str
        :param body: The take on-call payload (required)
        :type body: TakeRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("PATCH /api-public/v1/team/{team}/oncall/user is deprecated.", DeprecationWarning)

        _param = self._api_public_v1_team_team_oncall_user_patch_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            team=team,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TakeResult",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_public_v1_team_team_oncall_user_patch_with_http_info(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        team: Annotated[StrictStr, Field(description="The VictorOps team 'slug'")],
        body: Annotated[TakeRequest, Field(description="The take on-call payload")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TakeResult]:
        """(Deprecated) Create an on-call override (take on-call)

        __NOTE: This API call is deprecated. Please use `PATCH /api-public/v2/policies/{policy}/oncall/user`__  Replaces a currently on-call user on the team with another.  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param team: The VictorOps team 'slug' (required)
        :type team: str
        :param body: The take on-call payload (required)
        :type body: TakeRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("PATCH /api-public/v1/team/{team}/oncall/user is deprecated.", DeprecationWarning)

        _param = self._api_public_v1_team_team_oncall_user_patch_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            team=team,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TakeResult",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_public_v1_team_team_oncall_user_patch_without_preload_content(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        team: Annotated[StrictStr, Field(description="The VictorOps team 'slug'")],
        body: Annotated[TakeRequest, Field(description="The take on-call payload")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) Create an on-call override (take on-call)

        __NOTE: This API call is deprecated. Please use `PATCH /api-public/v2/policies/{policy}/oncall/user`__  Replaces a currently on-call user on the team with another.  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param team: The VictorOps team 'slug' (required)
        :type team: str
        :param body: The take on-call payload (required)
        :type body: TakeRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("PATCH /api-public/v1/team/{team}/oncall/user is deprecated.", DeprecationWarning)

        _param = self._api_public_v1_team_team_oncall_user_patch_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            team=team,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TakeResult",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_public_v1_team_team_oncall_user_patch_serialize(
        self,
        x_vo_api_id,
        x_vo_api_key,
        team,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if team is not None:
            _path_params['team'] = team
        # process the query parameters
        # process the header parameters
        if x_vo_api_id is not None:
            _header_params['X-VO-Api-Id'] = x_vo_api_id
        if x_vo_api_key is not None:
            _header_params['X-VO-Api-Key'] = x_vo_api_key
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/api-public/v1/team/{team}/oncall/user',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_public_v1_user_user_oncall_schedule_get(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        user: Annotated[StrictStr, Field(description="The VictorOps user ID")],
        days_forward: Annotated[Optional[Union[Annotated[float, Field(le=30, strict=True, ge=0)], Annotated[int, Field(le=30, strict=True, ge=0)]]], Field(description="Days to include in returned schedule (30 max)")] = None,
        days_skip: Annotated[Optional[Union[Annotated[float, Field(le=90, strict=True, ge=0)], Annotated[int, Field(le=90, strict=True, ge=0)]]], Field(description="Days to skip before computing schedule to return (90 max)")] = None,
        step: Annotated[Optional[Union[Annotated[float, Field(le=3, strict=True, ge=0)], Annotated[int, Field(le=3, strict=True, ge=0)]]], Field(description="Step of escalation policy (3 max)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[OnCallAndOverrides]:
        """(Deprecated) Get a user's on-call schedule

        __NOTE: This call is deprecated. Please use `GET /api-public/v2/user/{user}/oncall/schedule`.__  Get the on-call schedule for a user for all teams, including on-call overrides.  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param user: The VictorOps user ID (required)
        :type user: str
        :param days_forward: Days to include in returned schedule (30 max)
        :type days_forward: float
        :param days_skip: Days to skip before computing schedule to return (90 max)
        :type days_skip: float
        :param step: Step of escalation policy (3 max)
        :type step: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /api-public/v1/user/{user}/oncall/schedule is deprecated.", DeprecationWarning)

        _param = self._api_public_v1_user_user_oncall_schedule_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            user=user,
            days_forward=days_forward,
            days_skip=days_skip,
            step=step,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OnCallAndOverrides]",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_public_v1_user_user_oncall_schedule_get_with_http_info(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        user: Annotated[StrictStr, Field(description="The VictorOps user ID")],
        days_forward: Annotated[Optional[Union[Annotated[float, Field(le=30, strict=True, ge=0)], Annotated[int, Field(le=30, strict=True, ge=0)]]], Field(description="Days to include in returned schedule (30 max)")] = None,
        days_skip: Annotated[Optional[Union[Annotated[float, Field(le=90, strict=True, ge=0)], Annotated[int, Field(le=90, strict=True, ge=0)]]], Field(description="Days to skip before computing schedule to return (90 max)")] = None,
        step: Annotated[Optional[Union[Annotated[float, Field(le=3, strict=True, ge=0)], Annotated[int, Field(le=3, strict=True, ge=0)]]], Field(description="Step of escalation policy (3 max)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[OnCallAndOverrides]]:
        """(Deprecated) Get a user's on-call schedule

        __NOTE: This call is deprecated. Please use `GET /api-public/v2/user/{user}/oncall/schedule`.__  Get the on-call schedule for a user for all teams, including on-call overrides.  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param user: The VictorOps user ID (required)
        :type user: str
        :param days_forward: Days to include in returned schedule (30 max)
        :type days_forward: float
        :param days_skip: Days to skip before computing schedule to return (90 max)
        :type days_skip: float
        :param step: Step of escalation policy (3 max)
        :type step: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /api-public/v1/user/{user}/oncall/schedule is deprecated.", DeprecationWarning)

        _param = self._api_public_v1_user_user_oncall_schedule_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            user=user,
            days_forward=days_forward,
            days_skip=days_skip,
            step=step,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OnCallAndOverrides]",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_public_v1_user_user_oncall_schedule_get_without_preload_content(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        user: Annotated[StrictStr, Field(description="The VictorOps user ID")],
        days_forward: Annotated[Optional[Union[Annotated[float, Field(le=30, strict=True, ge=0)], Annotated[int, Field(le=30, strict=True, ge=0)]]], Field(description="Days to include in returned schedule (30 max)")] = None,
        days_skip: Annotated[Optional[Union[Annotated[float, Field(le=90, strict=True, ge=0)], Annotated[int, Field(le=90, strict=True, ge=0)]]], Field(description="Days to skip before computing schedule to return (90 max)")] = None,
        step: Annotated[Optional[Union[Annotated[float, Field(le=3, strict=True, ge=0)], Annotated[int, Field(le=3, strict=True, ge=0)]]], Field(description="Step of escalation policy (3 max)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) Get a user's on-call schedule

        __NOTE: This call is deprecated. Please use `GET /api-public/v2/user/{user}/oncall/schedule`.__  Get the on-call schedule for a user for all teams, including on-call overrides.  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param user: The VictorOps user ID (required)
        :type user: str
        :param days_forward: Days to include in returned schedule (30 max)
        :type days_forward: float
        :param days_skip: Days to skip before computing schedule to return (90 max)
        :type days_skip: float
        :param step: Step of escalation policy (3 max)
        :type step: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /api-public/v1/user/{user}/oncall/schedule is deprecated.", DeprecationWarning)

        _param = self._api_public_v1_user_user_oncall_schedule_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            user=user,
            days_forward=days_forward,
            days_skip=days_skip,
            step=step,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OnCallAndOverrides]",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_public_v1_user_user_oncall_schedule_get_serialize(
        self,
        x_vo_api_id,
        x_vo_api_key,
        user,
        days_forward,
        days_skip,
        step,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if user is not None:
            _path_params['user'] = user
        # process the query parameters
        if days_forward is not None:
            
            _query_params.append(('daysForward', days_forward))
            
        if days_skip is not None:
            
            _query_params.append(('daysSkip', days_skip))
            
        if step is not None:
            
            _query_params.append(('step', step))
            
        # process the header parameters
        if x_vo_api_id is not None:
            _header_params['X-VO-Api-Id'] = x_vo_api_id
        if x_vo_api_key is not None:
            _header_params['X-VO-Api-Key'] = x_vo_api_key
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api-public/v1/user/{user}/oncall/schedule',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_public_v2_team_team_oncall_schedule_get(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        team: Annotated[StrictStr, Field(description="The VictorOps team 'slug'")],
        days_forward: Annotated[Optional[Union[Annotated[float, Field(le=30, strict=True, ge=0)], Annotated[int, Field(le=30, strict=True, ge=0)]]], Field(description="Days to include in returned schedule (30 max)")] = None,
        days_skip: Annotated[Optional[Union[Annotated[float, Field(le=90, strict=True, ge=0)], Annotated[int, Field(le=90, strict=True, ge=0)]]], Field(description="Days to skip before computing schedule to return (90 max)")] = None,
        step: Annotated[Optional[Union[Annotated[float, Field(le=3, strict=True, ge=0)], Annotated[int, Field(le=3, strict=True, ge=0)]]], Field(description="Step of escalation policy (3 max)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TeamSchedule:
        """Get a team's on-call schedule

        Get the on-call schedule for a team, including on-call overrides.  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param team: The VictorOps team 'slug' (required)
        :type team: str
        :param days_forward: Days to include in returned schedule (30 max)
        :type days_forward: float
        :param days_skip: Days to skip before computing schedule to return (90 max)
        :type days_skip: float
        :param step: Step of escalation policy (3 max)
        :type step: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_public_v2_team_team_oncall_schedule_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            team=team,
            days_forward=days_forward,
            days_skip=days_skip,
            step=step,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TeamSchedule",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_public_v2_team_team_oncall_schedule_get_with_http_info(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        team: Annotated[StrictStr, Field(description="The VictorOps team 'slug'")],
        days_forward: Annotated[Optional[Union[Annotated[float, Field(le=30, strict=True, ge=0)], Annotated[int, Field(le=30, strict=True, ge=0)]]], Field(description="Days to include in returned schedule (30 max)")] = None,
        days_skip: Annotated[Optional[Union[Annotated[float, Field(le=90, strict=True, ge=0)], Annotated[int, Field(le=90, strict=True, ge=0)]]], Field(description="Days to skip before computing schedule to return (90 max)")] = None,
        step: Annotated[Optional[Union[Annotated[float, Field(le=3, strict=True, ge=0)], Annotated[int, Field(le=3, strict=True, ge=0)]]], Field(description="Step of escalation policy (3 max)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TeamSchedule]:
        """Get a team's on-call schedule

        Get the on-call schedule for a team, including on-call overrides.  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param team: The VictorOps team 'slug' (required)
        :type team: str
        :param days_forward: Days to include in returned schedule (30 max)
        :type days_forward: float
        :param days_skip: Days to skip before computing schedule to return (90 max)
        :type days_skip: float
        :param step: Step of escalation policy (3 max)
        :type step: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_public_v2_team_team_oncall_schedule_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            team=team,
            days_forward=days_forward,
            days_skip=days_skip,
            step=step,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TeamSchedule",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_public_v2_team_team_oncall_schedule_get_without_preload_content(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        team: Annotated[StrictStr, Field(description="The VictorOps team 'slug'")],
        days_forward: Annotated[Optional[Union[Annotated[float, Field(le=30, strict=True, ge=0)], Annotated[int, Field(le=30, strict=True, ge=0)]]], Field(description="Days to include in returned schedule (30 max)")] = None,
        days_skip: Annotated[Optional[Union[Annotated[float, Field(le=90, strict=True, ge=0)], Annotated[int, Field(le=90, strict=True, ge=0)]]], Field(description="Days to skip before computing schedule to return (90 max)")] = None,
        step: Annotated[Optional[Union[Annotated[float, Field(le=3, strict=True, ge=0)], Annotated[int, Field(le=3, strict=True, ge=0)]]], Field(description="Step of escalation policy (3 max)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a team's on-call schedule

        Get the on-call schedule for a team, including on-call overrides.  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param team: The VictorOps team 'slug' (required)
        :type team: str
        :param days_forward: Days to include in returned schedule (30 max)
        :type days_forward: float
        :param days_skip: Days to skip before computing schedule to return (90 max)
        :type days_skip: float
        :param step: Step of escalation policy (3 max)
        :type step: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_public_v2_team_team_oncall_schedule_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            team=team,
            days_forward=days_forward,
            days_skip=days_skip,
            step=step,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TeamSchedule",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_public_v2_team_team_oncall_schedule_get_serialize(
        self,
        x_vo_api_id,
        x_vo_api_key,
        team,
        days_forward,
        days_skip,
        step,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if team is not None:
            _path_params['team'] = team
        # process the query parameters
        if days_forward is not None:
            
            _query_params.append(('daysForward', days_forward))
            
        if days_skip is not None:
            
            _query_params.append(('daysSkip', days_skip))
            
        if step is not None:
            
            _query_params.append(('step', step))
            
        # process the header parameters
        if x_vo_api_id is not None:
            _header_params['X-VO-Api-Id'] = x_vo_api_id
        if x_vo_api_key is not None:
            _header_params['X-VO-Api-Key'] = x_vo_api_key
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api-public/v2/team/{team}/oncall/schedule',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_public_v2_user_user_oncall_schedule_get(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        user: Annotated[StrictStr, Field(description="The VictorOps user ID")],
        days_forward: Annotated[Optional[Union[Annotated[float, Field(le=30, strict=True, ge=0)], Annotated[int, Field(le=30, strict=True, ge=0)]]], Field(description="Days to include in returned schedule (30 max)")] = None,
        days_skip: Annotated[Optional[Union[Annotated[float, Field(le=90, strict=True, ge=0)], Annotated[int, Field(le=90, strict=True, ge=0)]]], Field(description="Days to skip before computing schedule to return (90 max)")] = None,
        step: Annotated[Optional[Union[Annotated[float, Field(le=3, strict=True, ge=0)], Annotated[int, Field(le=3, strict=True, ge=0)]]], Field(description="Step of escalation policy (3 max)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UserSchedule:
        """Get a user's on-call schedule

        Get the on-call schedule for a user for all teams the user is on, including on-call overrides.  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param user: The VictorOps user ID (required)
        :type user: str
        :param days_forward: Days to include in returned schedule (30 max)
        :type days_forward: float
        :param days_skip: Days to skip before computing schedule to return (90 max)
        :type days_skip: float
        :param step: Step of escalation policy (3 max)
        :type step: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_public_v2_user_user_oncall_schedule_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            user=user,
            days_forward=days_forward,
            days_skip=days_skip,
            step=step,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UserSchedule",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_public_v2_user_user_oncall_schedule_get_with_http_info(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        user: Annotated[StrictStr, Field(description="The VictorOps user ID")],
        days_forward: Annotated[Optional[Union[Annotated[float, Field(le=30, strict=True, ge=0)], Annotated[int, Field(le=30, strict=True, ge=0)]]], Field(description="Days to include in returned schedule (30 max)")] = None,
        days_skip: Annotated[Optional[Union[Annotated[float, Field(le=90, strict=True, ge=0)], Annotated[int, Field(le=90, strict=True, ge=0)]]], Field(description="Days to skip before computing schedule to return (90 max)")] = None,
        step: Annotated[Optional[Union[Annotated[float, Field(le=3, strict=True, ge=0)], Annotated[int, Field(le=3, strict=True, ge=0)]]], Field(description="Step of escalation policy (3 max)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UserSchedule]:
        """Get a user's on-call schedule

        Get the on-call schedule for a user for all teams the user is on, including on-call overrides.  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param user: The VictorOps user ID (required)
        :type user: str
        :param days_forward: Days to include in returned schedule (30 max)
        :type days_forward: float
        :param days_skip: Days to skip before computing schedule to return (90 max)
        :type days_skip: float
        :param step: Step of escalation policy (3 max)
        :type step: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_public_v2_user_user_oncall_schedule_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            user=user,
            days_forward=days_forward,
            days_skip=days_skip,
            step=step,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UserSchedule",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_public_v2_user_user_oncall_schedule_get_without_preload_content(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        user: Annotated[StrictStr, Field(description="The VictorOps user ID")],
        days_forward: Annotated[Optional[Union[Annotated[float, Field(le=30, strict=True, ge=0)], Annotated[int, Field(le=30, strict=True, ge=0)]]], Field(description="Days to include in returned schedule (30 max)")] = None,
        days_skip: Annotated[Optional[Union[Annotated[float, Field(le=90, strict=True, ge=0)], Annotated[int, Field(le=90, strict=True, ge=0)]]], Field(description="Days to skip before computing schedule to return (90 max)")] = None,
        step: Annotated[Optional[Union[Annotated[float, Field(le=3, strict=True, ge=0)], Annotated[int, Field(le=3, strict=True, ge=0)]]], Field(description="Step of escalation policy (3 max)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a user's on-call schedule

        Get the on-call schedule for a user for all teams the user is on, including on-call overrides.  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param user: The VictorOps user ID (required)
        :type user: str
        :param days_forward: Days to include in returned schedule (30 max)
        :type days_forward: float
        :param days_skip: Days to skip before computing schedule to return (90 max)
        :type days_skip: float
        :param step: Step of escalation policy (3 max)
        :type step: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_public_v2_user_user_oncall_schedule_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            user=user,
            days_forward=days_forward,
            days_skip=days_skip,
            step=step,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UserSchedule",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_public_v2_user_user_oncall_schedule_get_serialize(
        self,
        x_vo_api_id,
        x_vo_api_key,
        user,
        days_forward,
        days_skip,
        step,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if user is not None:
            _path_params['user'] = user
        # process the query parameters
        if days_forward is not None:
            
            _query_params.append(('daysForward', days_forward))
            
        if days_skip is not None:
            
            _query_params.append(('daysSkip', days_skip))
            
        if step is not None:
            
            _query_params.append(('step', step))
            
        # process the header parameters
        if x_vo_api_id is not None:
            _header_params['X-VO-Api-Id'] = x_vo_api_id
        if x_vo_api_key is not None:
            _header_params['X-VO-Api-Key'] = x_vo_api_key
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api-public/v2/user/{user}/oncall/schedule',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



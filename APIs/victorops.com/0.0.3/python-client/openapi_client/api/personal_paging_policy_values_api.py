# coding: utf-8

"""
    VictorOps

    This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing_extensions import Annotated
from openapi_client.models.api_public_v1_policies_types_contacts_get200_response import ApiPublicV1PoliciesTypesContactsGet200Response
from openapi_client.models.api_public_v1_policies_types_notifications_get200_response import ApiPublicV1PoliciesTypesNotificationsGet200Response
from openapi_client.models.api_public_v1_policies_types_timeouts_get200_response import ApiPublicV1PoliciesTypesTimeoutsGet200Response

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class PersonalPagingPolicyValuesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def api_public_v1_policies_types_contacts_get(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiPublicV1PoliciesTypesContactsGet200Response:
        """Get the available contact types

        Get the available contact types  description: \"Email Address\", type: \"email\" description: \"Phone Number\", type: \"phone\"  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_public_v1_policies_types_contacts_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiPublicV1PoliciesTypesContactsGet200Response",
            '400': None,
            '401': None,
            '403': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_public_v1_policies_types_contacts_get_with_http_info(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiPublicV1PoliciesTypesContactsGet200Response]:
        """Get the available contact types

        Get the available contact types  description: \"Email Address\", type: \"email\" description: \"Phone Number\", type: \"phone\"  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_public_v1_policies_types_contacts_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiPublicV1PoliciesTypesContactsGet200Response",
            '400': None,
            '401': None,
            '403': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_public_v1_policies_types_contacts_get_without_preload_content(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the available contact types

        Get the available contact types  description: \"Email Address\", type: \"email\" description: \"Phone Number\", type: \"phone\"  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_public_v1_policies_types_contacts_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiPublicV1PoliciesTypesContactsGet200Response",
            '400': None,
            '401': None,
            '403': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_public_v1_policies_types_contacts_get_serialize(
        self,
        x_vo_api_id,
        x_vo_api_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_vo_api_id is not None:
            _header_params['X-VO-Api-Id'] = x_vo_api_id
        if x_vo_api_key is not None:
            _header_params['X-VO-Api-Key'] = x_vo_api_key
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api-public/v1/policies/types/contacts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_public_v1_policies_types_notifications_get(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiPublicV1PoliciesTypesNotificationsGet200Response:
        """Get the available notification types

        Get the available notification types  description: \"Send a push notification to all my devices\", type: \"push\" description: \"Send an email to an email address\", type: \"email\" description: \"Send an SMS to a phone number\", type: \"sms\" description: \"Make a phone call to a phone number\", type: \"phone\"  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_public_v1_policies_types_notifications_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiPublicV1PoliciesTypesNotificationsGet200Response",
            '400': None,
            '401': None,
            '403': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_public_v1_policies_types_notifications_get_with_http_info(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiPublicV1PoliciesTypesNotificationsGet200Response]:
        """Get the available notification types

        Get the available notification types  description: \"Send a push notification to all my devices\", type: \"push\" description: \"Send an email to an email address\", type: \"email\" description: \"Send an SMS to a phone number\", type: \"sms\" description: \"Make a phone call to a phone number\", type: \"phone\"  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_public_v1_policies_types_notifications_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiPublicV1PoliciesTypesNotificationsGet200Response",
            '400': None,
            '401': None,
            '403': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_public_v1_policies_types_notifications_get_without_preload_content(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the available notification types

        Get the available notification types  description: \"Send a push notification to all my devices\", type: \"push\" description: \"Send an email to an email address\", type: \"email\" description: \"Send an SMS to a phone number\", type: \"sms\" description: \"Make a phone call to a phone number\", type: \"phone\"  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_public_v1_policies_types_notifications_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiPublicV1PoliciesTypesNotificationsGet200Response",
            '400': None,
            '401': None,
            '403': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_public_v1_policies_types_notifications_get_serialize(
        self,
        x_vo_api_id,
        x_vo_api_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_vo_api_id is not None:
            _header_params['X-VO-Api-Id'] = x_vo_api_id
        if x_vo_api_key is not None:
            _header_params['X-VO-Api-Key'] = x_vo_api_key
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api-public/v1/policies/types/notifications',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_public_v1_policies_types_timeouts_get(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiPublicV1PoliciesTypesTimeoutsGet200Response:
        """Get the available timeout values

        Get the available timeout values  description: \"If still unacked after 1 minute\", type: 1 description: \"If still unacked after 5 minutes\", type: 5 description: \"If still unacked after 10 minutes\", type: 10 description: \"If still unacked after 15 minutes\", type: 15 description: \"If still unacked after 20 minutes\", type: 20 description: \"If still unacked after 25 minutes\", type: 25 description: \"If still unacked after 30 minutes\", type: 30 description: \"If still unacked after 45 minutes\", type: 45 description: \"If still unacked after 60 minutes\", type: 60  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_public_v1_policies_types_timeouts_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiPublicV1PoliciesTypesTimeoutsGet200Response",
            '400': None,
            '401': None,
            '403': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_public_v1_policies_types_timeouts_get_with_http_info(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiPublicV1PoliciesTypesTimeoutsGet200Response]:
        """Get the available timeout values

        Get the available timeout values  description: \"If still unacked after 1 minute\", type: 1 description: \"If still unacked after 5 minutes\", type: 5 description: \"If still unacked after 10 minutes\", type: 10 description: \"If still unacked after 15 minutes\", type: 15 description: \"If still unacked after 20 minutes\", type: 20 description: \"If still unacked after 25 minutes\", type: 25 description: \"If still unacked after 30 minutes\", type: 30 description: \"If still unacked after 45 minutes\", type: 45 description: \"If still unacked after 60 minutes\", type: 60  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_public_v1_policies_types_timeouts_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiPublicV1PoliciesTypesTimeoutsGet200Response",
            '400': None,
            '401': None,
            '403': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_public_v1_policies_types_timeouts_get_without_preload_content(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the available timeout values

        Get the available timeout values  description: \"If still unacked after 1 minute\", type: 1 description: \"If still unacked after 5 minutes\", type: 5 description: \"If still unacked after 10 minutes\", type: 10 description: \"If still unacked after 15 minutes\", type: 15 description: \"If still unacked after 20 minutes\", type: 20 description: \"If still unacked after 25 minutes\", type: 25 description: \"If still unacked after 30 minutes\", type: 30 description: \"If still unacked after 45 minutes\", type: 45 description: \"If still unacked after 60 minutes\", type: 60  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_public_v1_policies_types_timeouts_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiPublicV1PoliciesTypesTimeoutsGet200Response",
            '400': None,
            '401': None,
            '403': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_public_v1_policies_types_timeouts_get_serialize(
        self,
        x_vo_api_id,
        x_vo_api_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_vo_api_id is not None:
            _header_params['X-VO-Api-Id'] = x_vo_api_id
        if x_vo_api_key is not None:
            _header_params['X-VO-Api-Key'] = x_vo_api_key
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api-public/v1/policies/types/timeouts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



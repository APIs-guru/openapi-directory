# coding: utf-8

"""
    VictorOps

    This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictFloat, StrictInt, StrictStr
from typing import List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.active_incident_list import ActiveIncidentList
from openapi_client.models.incident_list import IncidentList
from openapi_client.models.on_call_log import OnCallLog

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ReportingApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def api_reporting_v1_incidents_get(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        offset: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The offset within the set of matching incidents")] = None,
        limit: Annotated[Optional[Union[Annotated[float, Field(le=100, strict=True)], Annotated[int, Field(le=100, strict=True)]]], Field(description="The maximum number of matching incidents to return (100 max)")] = None,
        entity_id: Annotated[Optional[StrictStr], Field(description="The entity ID involved  This is the unique identifier for the entity causing the incident.")] = None,
        incident_number: Annotated[Optional[StrictStr], Field(description="The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50 ")] = None,
        started_after: Annotated[Optional[StrictStr], Field(description="Return incidents started after this timestamp Specify the timestamp in ISO8601 format")] = None,
        started_before: Annotated[Optional[StrictStr], Field(description="Find incidents started before this timestamp  Specify the timestamp in ISO8601 format")] = None,
        host: Annotated[Optional[StrictStr], Field(description="The host involved in the incident Multiple values can be separated with commas.")] = None,
        service: Annotated[Optional[StrictStr], Field(description="The service involved in the incident (if any) Multiple values can be separated with commas.")] = None,
        current_phase: Annotated[Optional[StrictStr], Field(description="The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\". Multiple values can be separated with commas.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[IncidentList]:
        """(Deprecated) Get/search incident history

         __NOTE: This call is deprecated. Please use `GET /api-reporting/v2/incidents`.__  Retrieve incident history for your company, searching over date ranges and with filtering options.  This is historical data, and may be up to 15 minutes behind real-time incident data.  By default, only resolved incidents will be returned.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  On return, the total number of records available for that query will be returned in the payload as 'total'. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param offset: The offset within the set of matching incidents
        :type offset: float
        :param limit: The maximum number of matching incidents to return (100 max)
        :type limit: float
        :param entity_id: The entity ID involved  This is the unique identifier for the entity causing the incident.
        :type entity_id: str
        :param incident_number: The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50 
        :type incident_number: str
        :param started_after: Return incidents started after this timestamp Specify the timestamp in ISO8601 format
        :type started_after: str
        :param started_before: Find incidents started before this timestamp  Specify the timestamp in ISO8601 format
        :type started_before: str
        :param host: The host involved in the incident Multiple values can be separated with commas.
        :type host: str
        :param service: The service involved in the incident (if any) Multiple values can be separated with commas.
        :type service: str
        :param current_phase: The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\". Multiple values can be separated with commas.
        :type current_phase: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /api-reporting/v1/incidents is deprecated.", DeprecationWarning)

        _param = self._api_reporting_v1_incidents_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            offset=offset,
            limit=limit,
            entity_id=entity_id,
            incident_number=incident_number,
            started_after=started_after,
            started_before=started_before,
            host=host,
            service=service,
            current_phase=current_phase,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IncidentList]",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_reporting_v1_incidents_get_with_http_info(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        offset: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The offset within the set of matching incidents")] = None,
        limit: Annotated[Optional[Union[Annotated[float, Field(le=100, strict=True)], Annotated[int, Field(le=100, strict=True)]]], Field(description="The maximum number of matching incidents to return (100 max)")] = None,
        entity_id: Annotated[Optional[StrictStr], Field(description="The entity ID involved  This is the unique identifier for the entity causing the incident.")] = None,
        incident_number: Annotated[Optional[StrictStr], Field(description="The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50 ")] = None,
        started_after: Annotated[Optional[StrictStr], Field(description="Return incidents started after this timestamp Specify the timestamp in ISO8601 format")] = None,
        started_before: Annotated[Optional[StrictStr], Field(description="Find incidents started before this timestamp  Specify the timestamp in ISO8601 format")] = None,
        host: Annotated[Optional[StrictStr], Field(description="The host involved in the incident Multiple values can be separated with commas.")] = None,
        service: Annotated[Optional[StrictStr], Field(description="The service involved in the incident (if any) Multiple values can be separated with commas.")] = None,
        current_phase: Annotated[Optional[StrictStr], Field(description="The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\". Multiple values can be separated with commas.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[IncidentList]]:
        """(Deprecated) Get/search incident history

         __NOTE: This call is deprecated. Please use `GET /api-reporting/v2/incidents`.__  Retrieve incident history for your company, searching over date ranges and with filtering options.  This is historical data, and may be up to 15 minutes behind real-time incident data.  By default, only resolved incidents will be returned.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  On return, the total number of records available for that query will be returned in the payload as 'total'. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param offset: The offset within the set of matching incidents
        :type offset: float
        :param limit: The maximum number of matching incidents to return (100 max)
        :type limit: float
        :param entity_id: The entity ID involved  This is the unique identifier for the entity causing the incident.
        :type entity_id: str
        :param incident_number: The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50 
        :type incident_number: str
        :param started_after: Return incidents started after this timestamp Specify the timestamp in ISO8601 format
        :type started_after: str
        :param started_before: Find incidents started before this timestamp  Specify the timestamp in ISO8601 format
        :type started_before: str
        :param host: The host involved in the incident Multiple values can be separated with commas.
        :type host: str
        :param service: The service involved in the incident (if any) Multiple values can be separated with commas.
        :type service: str
        :param current_phase: The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\". Multiple values can be separated with commas.
        :type current_phase: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /api-reporting/v1/incidents is deprecated.", DeprecationWarning)

        _param = self._api_reporting_v1_incidents_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            offset=offset,
            limit=limit,
            entity_id=entity_id,
            incident_number=incident_number,
            started_after=started_after,
            started_before=started_before,
            host=host,
            service=service,
            current_phase=current_phase,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IncidentList]",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_reporting_v1_incidents_get_without_preload_content(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        offset: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The offset within the set of matching incidents")] = None,
        limit: Annotated[Optional[Union[Annotated[float, Field(le=100, strict=True)], Annotated[int, Field(le=100, strict=True)]]], Field(description="The maximum number of matching incidents to return (100 max)")] = None,
        entity_id: Annotated[Optional[StrictStr], Field(description="The entity ID involved  This is the unique identifier for the entity causing the incident.")] = None,
        incident_number: Annotated[Optional[StrictStr], Field(description="The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50 ")] = None,
        started_after: Annotated[Optional[StrictStr], Field(description="Return incidents started after this timestamp Specify the timestamp in ISO8601 format")] = None,
        started_before: Annotated[Optional[StrictStr], Field(description="Find incidents started before this timestamp  Specify the timestamp in ISO8601 format")] = None,
        host: Annotated[Optional[StrictStr], Field(description="The host involved in the incident Multiple values can be separated with commas.")] = None,
        service: Annotated[Optional[StrictStr], Field(description="The service involved in the incident (if any) Multiple values can be separated with commas.")] = None,
        current_phase: Annotated[Optional[StrictStr], Field(description="The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\". Multiple values can be separated with commas.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) Get/search incident history

         __NOTE: This call is deprecated. Please use `GET /api-reporting/v2/incidents`.__  Retrieve incident history for your company, searching over date ranges and with filtering options.  This is historical data, and may be up to 15 minutes behind real-time incident data.  By default, only resolved incidents will be returned.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  On return, the total number of records available for that query will be returned in the payload as 'total'. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param offset: The offset within the set of matching incidents
        :type offset: float
        :param limit: The maximum number of matching incidents to return (100 max)
        :type limit: float
        :param entity_id: The entity ID involved  This is the unique identifier for the entity causing the incident.
        :type entity_id: str
        :param incident_number: The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50 
        :type incident_number: str
        :param started_after: Return incidents started after this timestamp Specify the timestamp in ISO8601 format
        :type started_after: str
        :param started_before: Find incidents started before this timestamp  Specify the timestamp in ISO8601 format
        :type started_before: str
        :param host: The host involved in the incident Multiple values can be separated with commas.
        :type host: str
        :param service: The service involved in the incident (if any) Multiple values can be separated with commas.
        :type service: str
        :param current_phase: The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\". Multiple values can be separated with commas.
        :type current_phase: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /api-reporting/v1/incidents is deprecated.", DeprecationWarning)

        _param = self._api_reporting_v1_incidents_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            offset=offset,
            limit=limit,
            entity_id=entity_id,
            incident_number=incident_number,
            started_after=started_after,
            started_before=started_before,
            host=host,
            service=service,
            current_phase=current_phase,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IncidentList]",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_reporting_v1_incidents_get_serialize(
        self,
        x_vo_api_id,
        x_vo_api_key,
        offset,
        limit,
        entity_id,
        incident_number,
        started_after,
        started_before,
        host,
        service,
        current_phase,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if entity_id is not None:
            
            _query_params.append(('entityId', entity_id))
            
        if incident_number is not None:
            
            _query_params.append(('incidentNumber', incident_number))
            
        if started_after is not None:
            
            _query_params.append(('startedAfter', started_after))
            
        if started_before is not None:
            
            _query_params.append(('startedBefore', started_before))
            
        if host is not None:
            
            _query_params.append(('host', host))
            
        if service is not None:
            
            _query_params.append(('service', service))
            
        if current_phase is not None:
            
            _query_params.append(('currentPhase', current_phase))
            
        # process the header parameters
        if x_vo_api_id is not None:
            _header_params['X-VO-Api-Id'] = x_vo_api_id
        if x_vo_api_key is not None:
            _header_params['X-VO-Api-Key'] = x_vo_api_key
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api-reporting/v1/incidents',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_reporting_v1_team_team_oncall_log_get(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        team: Annotated[StrictStr, Field(description="The VictorOps team 'slug'")],
        start: Annotated[Optional[datetime], Field(description="Return shift changes occurring after this timestamp. The default is the start of the day at midnight. Specify the timestamp in ISO8601 format")] = None,
        end: Annotated[Optional[datetime], Field(description="Return shift changes occurring before this timestamp. The default is the end of the day at 11:59:59. Specify the timestamp in ISO8601 format")] = None,
        user_name: Annotated[Optional[StrictStr], Field(description="The VictorOps user ID. Return shift changes occurring during the interval specified for this user. Without this parameter, all relevant users (with respect to the specified interval) are returned")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OnCallLog:
        """A list of shift changes for a team

        Returns a log of user shift changes for the specified team. This is historical data, and may be up to 15 minutes behind real-time log data.  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param team: The VictorOps team 'slug' (required)
        :type team: str
        :param start: Return shift changes occurring after this timestamp. The default is the start of the day at midnight. Specify the timestamp in ISO8601 format
        :type start: datetime
        :param end: Return shift changes occurring before this timestamp. The default is the end of the day at 11:59:59. Specify the timestamp in ISO8601 format
        :type end: datetime
        :param user_name: The VictorOps user ID. Return shift changes occurring during the interval specified for this user. Without this parameter, all relevant users (with respect to the specified interval) are returned
        :type user_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_reporting_v1_team_team_oncall_log_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            team=team,
            start=start,
            end=end,
            user_name=user_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnCallLog",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_reporting_v1_team_team_oncall_log_get_with_http_info(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        team: Annotated[StrictStr, Field(description="The VictorOps team 'slug'")],
        start: Annotated[Optional[datetime], Field(description="Return shift changes occurring after this timestamp. The default is the start of the day at midnight. Specify the timestamp in ISO8601 format")] = None,
        end: Annotated[Optional[datetime], Field(description="Return shift changes occurring before this timestamp. The default is the end of the day at 11:59:59. Specify the timestamp in ISO8601 format")] = None,
        user_name: Annotated[Optional[StrictStr], Field(description="The VictorOps user ID. Return shift changes occurring during the interval specified for this user. Without this parameter, all relevant users (with respect to the specified interval) are returned")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OnCallLog]:
        """A list of shift changes for a team

        Returns a log of user shift changes for the specified team. This is historical data, and may be up to 15 minutes behind real-time log data.  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param team: The VictorOps team 'slug' (required)
        :type team: str
        :param start: Return shift changes occurring after this timestamp. The default is the start of the day at midnight. Specify the timestamp in ISO8601 format
        :type start: datetime
        :param end: Return shift changes occurring before this timestamp. The default is the end of the day at 11:59:59. Specify the timestamp in ISO8601 format
        :type end: datetime
        :param user_name: The VictorOps user ID. Return shift changes occurring during the interval specified for this user. Without this parameter, all relevant users (with respect to the specified interval) are returned
        :type user_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_reporting_v1_team_team_oncall_log_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            team=team,
            start=start,
            end=end,
            user_name=user_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnCallLog",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_reporting_v1_team_team_oncall_log_get_without_preload_content(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        team: Annotated[StrictStr, Field(description="The VictorOps team 'slug'")],
        start: Annotated[Optional[datetime], Field(description="Return shift changes occurring after this timestamp. The default is the start of the day at midnight. Specify the timestamp in ISO8601 format")] = None,
        end: Annotated[Optional[datetime], Field(description="Return shift changes occurring before this timestamp. The default is the end of the day at 11:59:59. Specify the timestamp in ISO8601 format")] = None,
        user_name: Annotated[Optional[StrictStr], Field(description="The VictorOps user ID. Return shift changes occurring during the interval specified for this user. Without this parameter, all relevant users (with respect to the specified interval) are returned")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """A list of shift changes for a team

        Returns a log of user shift changes for the specified team. This is historical data, and may be up to 15 minutes behind real-time log data.  This API may be called a maximum of 60 times per minute. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param team: The VictorOps team 'slug' (required)
        :type team: str
        :param start: Return shift changes occurring after this timestamp. The default is the start of the day at midnight. Specify the timestamp in ISO8601 format
        :type start: datetime
        :param end: Return shift changes occurring before this timestamp. The default is the end of the day at 11:59:59. Specify the timestamp in ISO8601 format
        :type end: datetime
        :param user_name: The VictorOps user ID. Return shift changes occurring during the interval specified for this user. Without this parameter, all relevant users (with respect to the specified interval) are returned
        :type user_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_reporting_v1_team_team_oncall_log_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            team=team,
            start=start,
            end=end,
            user_name=user_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnCallLog",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_reporting_v1_team_team_oncall_log_get_serialize(
        self,
        x_vo_api_id,
        x_vo_api_key,
        team,
        start,
        end,
        user_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if team is not None:
            _path_params['team'] = team
        # process the query parameters
        if start is not None:
            if isinstance(start, datetime):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, datetime):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if user_name is not None:
            
            _query_params.append(('userName', user_name))
            
        # process the header parameters
        if x_vo_api_id is not None:
            _header_params['X-VO-Api-Id'] = x_vo_api_id
        if x_vo_api_key is not None:
            _header_params['X-VO-Api-Key'] = x_vo_api_key
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api-reporting/v1/team/{team}/oncall/log',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_reporting_v2_incidents_get(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        offset: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The offset within the set of matching incidents")] = None,
        limit: Annotated[Optional[Union[Annotated[float, Field(le=100, strict=True)], Annotated[int, Field(le=100, strict=True)]]], Field(description="The maximum number of matching incidents to return (100 max)")] = None,
        entity_id: Annotated[Optional[StrictStr], Field(description="The entity ID involved  This is the unique identifier for the entity causing the incident.")] = None,
        incident_number: Annotated[Optional[StrictStr], Field(description="The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50 ")] = None,
        started_after: Annotated[Optional[StrictStr], Field(description="Return incidents started after this timestamp Specify the timestamp in ISO8601 format")] = None,
        started_before: Annotated[Optional[StrictStr], Field(description="Find incidents started before this timestamp  Specify the timestamp in ISO8601 format")] = None,
        host: Annotated[Optional[StrictStr], Field(description="The host involved in the incident Multiple values can be separated with commas.")] = None,
        service: Annotated[Optional[StrictStr], Field(description="The service involved in the incident (if any) Multiple values can be separated with commas.")] = None,
        current_phase: Annotated[Optional[StrictStr], Field(description="The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\". Multiple values can be separated with commas. By default, response contains only \"resolved\" incidents")] = None,
        routing_key: Annotated[Optional[StrictStr], Field(description="The original routing of the incident")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ActiveIncidentList:
        """Get/search incident history

        Retrieve incident history for your company, searching over date ranges and with filtering options.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  Unless specified otherwise with the parameter currentPhase, the response will only contain resolved incidents.  On return, the total number of records available for that query will be returned in the payload as 'total'. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param offset: The offset within the set of matching incidents
        :type offset: float
        :param limit: The maximum number of matching incidents to return (100 max)
        :type limit: float
        :param entity_id: The entity ID involved  This is the unique identifier for the entity causing the incident.
        :type entity_id: str
        :param incident_number: The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50 
        :type incident_number: str
        :param started_after: Return incidents started after this timestamp Specify the timestamp in ISO8601 format
        :type started_after: str
        :param started_before: Find incidents started before this timestamp  Specify the timestamp in ISO8601 format
        :type started_before: str
        :param host: The host involved in the incident Multiple values can be separated with commas.
        :type host: str
        :param service: The service involved in the incident (if any) Multiple values can be separated with commas.
        :type service: str
        :param current_phase: The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\". Multiple values can be separated with commas. By default, response contains only \"resolved\" incidents
        :type current_phase: str
        :param routing_key: The original routing of the incident
        :type routing_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_reporting_v2_incidents_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            offset=offset,
            limit=limit,
            entity_id=entity_id,
            incident_number=incident_number,
            started_after=started_after,
            started_before=started_before,
            host=host,
            service=service,
            current_phase=current_phase,
            routing_key=routing_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ActiveIncidentList",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_reporting_v2_incidents_get_with_http_info(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        offset: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The offset within the set of matching incidents")] = None,
        limit: Annotated[Optional[Union[Annotated[float, Field(le=100, strict=True)], Annotated[int, Field(le=100, strict=True)]]], Field(description="The maximum number of matching incidents to return (100 max)")] = None,
        entity_id: Annotated[Optional[StrictStr], Field(description="The entity ID involved  This is the unique identifier for the entity causing the incident.")] = None,
        incident_number: Annotated[Optional[StrictStr], Field(description="The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50 ")] = None,
        started_after: Annotated[Optional[StrictStr], Field(description="Return incidents started after this timestamp Specify the timestamp in ISO8601 format")] = None,
        started_before: Annotated[Optional[StrictStr], Field(description="Find incidents started before this timestamp  Specify the timestamp in ISO8601 format")] = None,
        host: Annotated[Optional[StrictStr], Field(description="The host involved in the incident Multiple values can be separated with commas.")] = None,
        service: Annotated[Optional[StrictStr], Field(description="The service involved in the incident (if any) Multiple values can be separated with commas.")] = None,
        current_phase: Annotated[Optional[StrictStr], Field(description="The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\". Multiple values can be separated with commas. By default, response contains only \"resolved\" incidents")] = None,
        routing_key: Annotated[Optional[StrictStr], Field(description="The original routing of the incident")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ActiveIncidentList]:
        """Get/search incident history

        Retrieve incident history for your company, searching over date ranges and with filtering options.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  Unless specified otherwise with the parameter currentPhase, the response will only contain resolved incidents.  On return, the total number of records available for that query will be returned in the payload as 'total'. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param offset: The offset within the set of matching incidents
        :type offset: float
        :param limit: The maximum number of matching incidents to return (100 max)
        :type limit: float
        :param entity_id: The entity ID involved  This is the unique identifier for the entity causing the incident.
        :type entity_id: str
        :param incident_number: The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50 
        :type incident_number: str
        :param started_after: Return incidents started after this timestamp Specify the timestamp in ISO8601 format
        :type started_after: str
        :param started_before: Find incidents started before this timestamp  Specify the timestamp in ISO8601 format
        :type started_before: str
        :param host: The host involved in the incident Multiple values can be separated with commas.
        :type host: str
        :param service: The service involved in the incident (if any) Multiple values can be separated with commas.
        :type service: str
        :param current_phase: The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\". Multiple values can be separated with commas. By default, response contains only \"resolved\" incidents
        :type current_phase: str
        :param routing_key: The original routing of the incident
        :type routing_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_reporting_v2_incidents_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            offset=offset,
            limit=limit,
            entity_id=entity_id,
            incident_number=incident_number,
            started_after=started_after,
            started_before=started_before,
            host=host,
            service=service,
            current_phase=current_phase,
            routing_key=routing_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ActiveIncidentList",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_reporting_v2_incidents_get_without_preload_content(
        self,
        x_vo_api_id: Annotated[StrictStr, Field(description="Your API ID")],
        x_vo_api_key: Annotated[StrictStr, Field(description="Your API Key")],
        offset: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The offset within the set of matching incidents")] = None,
        limit: Annotated[Optional[Union[Annotated[float, Field(le=100, strict=True)], Annotated[int, Field(le=100, strict=True)]]], Field(description="The maximum number of matching incidents to return (100 max)")] = None,
        entity_id: Annotated[Optional[StrictStr], Field(description="The entity ID involved  This is the unique identifier for the entity causing the incident.")] = None,
        incident_number: Annotated[Optional[StrictStr], Field(description="The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50 ")] = None,
        started_after: Annotated[Optional[StrictStr], Field(description="Return incidents started after this timestamp Specify the timestamp in ISO8601 format")] = None,
        started_before: Annotated[Optional[StrictStr], Field(description="Find incidents started before this timestamp  Specify the timestamp in ISO8601 format")] = None,
        host: Annotated[Optional[StrictStr], Field(description="The host involved in the incident Multiple values can be separated with commas.")] = None,
        service: Annotated[Optional[StrictStr], Field(description="The service involved in the incident (if any) Multiple values can be separated with commas.")] = None,
        current_phase: Annotated[Optional[StrictStr], Field(description="The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\". Multiple values can be separated with commas. By default, response contains only \"resolved\" incidents")] = None,
        routing_key: Annotated[Optional[StrictStr], Field(description="The original routing of the incident")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get/search incident history

        Retrieve incident history for your company, searching over date ranges and with filtering options.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  Unless specified otherwise with the parameter currentPhase, the response will only contain resolved incidents.  On return, the total number of records available for that query will be returned in the payload as 'total'. 

        :param x_vo_api_id: Your API ID (required)
        :type x_vo_api_id: str
        :param x_vo_api_key: Your API Key (required)
        :type x_vo_api_key: str
        :param offset: The offset within the set of matching incidents
        :type offset: float
        :param limit: The maximum number of matching incidents to return (100 max)
        :type limit: float
        :param entity_id: The entity ID involved  This is the unique identifier for the entity causing the incident.
        :type entity_id: str
        :param incident_number: The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50 
        :type incident_number: str
        :param started_after: Return incidents started after this timestamp Specify the timestamp in ISO8601 format
        :type started_after: str
        :param started_before: Find incidents started before this timestamp  Specify the timestamp in ISO8601 format
        :type started_before: str
        :param host: The host involved in the incident Multiple values can be separated with commas.
        :type host: str
        :param service: The service involved in the incident (if any) Multiple values can be separated with commas.
        :type service: str
        :param current_phase: The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\". Multiple values can be separated with commas. By default, response contains only \"resolved\" incidents
        :type current_phase: str
        :param routing_key: The original routing of the incident
        :type routing_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_reporting_v2_incidents_get_serialize(
            x_vo_api_id=x_vo_api_id,
            x_vo_api_key=x_vo_api_key,
            offset=offset,
            limit=limit,
            entity_id=entity_id,
            incident_number=incident_number,
            started_after=started_after,
            started_before=started_before,
            host=host,
            service=service,
            current_phase=current_phase,
            routing_key=routing_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ActiveIncidentList",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_reporting_v2_incidents_get_serialize(
        self,
        x_vo_api_id,
        x_vo_api_key,
        offset,
        limit,
        entity_id,
        incident_number,
        started_after,
        started_before,
        host,
        service,
        current_phase,
        routing_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if entity_id is not None:
            
            _query_params.append(('entityId', entity_id))
            
        if incident_number is not None:
            
            _query_params.append(('incidentNumber', incident_number))
            
        if started_after is not None:
            
            _query_params.append(('startedAfter', started_after))
            
        if started_before is not None:
            
            _query_params.append(('startedBefore', started_before))
            
        if host is not None:
            
            _query_params.append(('host', host))
            
        if service is not None:
            
            _query_params.append(('service', service))
            
        if current_phase is not None:
            
            _query_params.append(('currentPhase', current_phase))
            
        if routing_key is not None:
            
            _query_params.append(('routingKey', routing_key))
            
        # process the header parameters
        if x_vo_api_id is not None:
            _header_params['X-VO-Api-Id'] = x_vo_api_id
        if x_vo_api_key is not None:
            _header_params['X-VO-Api-Key'] = x_vo_api_key
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api-reporting/v2/incidents',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    VictorOps

    This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GetAlertResponse(BaseModel):
    """
    Alert details. All fields should be considered optional.
    """ # noqa: E501
    ack_author: Optional[StrictStr] = Field(default=None, description="The user that acknowledged the incident.", alias="ackAuthor")
    ack_msg: Optional[StrictStr] = Field(default=None, description="A user entered comment for the acknowledgment.", alias="ackMsg")
    entity_display_name: Optional[StrictStr] = Field(default=None, description="Used within VictorOps to display a human-readable name for the entity.", alias="entityDisplayName")
    entity_id: Optional[StrictStr] = Field(default=None, description="Identifies the entity (host, service, etc.) this alert was about. ", alias="entityId")
    message_type: Optional[StrictStr] = Field(default=None, description="The type of alert; INFO, WARNING, ACKNOWLEDGEMENT, CRITICAL, RECOVERY ", alias="messageType")
    monitoring_tool: Optional[StrictStr] = Field(default=None, description="The name of the monitoring system software (eg. nagios, icinga, sensu, etc.)", alias="monitoringTool")
    raw: Optional[StrictStr] = Field(default=None, description="The full, raw alert details JSON string (i.e. parse the string into a JSON object) ")
    state_message: Optional[StrictStr] = Field(default=None, description="Any additional status information from the alert item.", alias="stateMessage")
    state_start_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The time this entity entered its current state (seconds since epoch).", alias="stateStartTime")
    timestamp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Timestamp of the alert in seconds since epoch.")
    __properties: ClassVar[List[str]] = ["ackAuthor", "ackMsg", "entityDisplayName", "entityId", "messageType", "monitoringTool", "raw", "stateMessage", "stateStartTime", "timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetAlertResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetAlertResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ackAuthor": obj.get("ackAuthor"),
            "ackMsg": obj.get("ackMsg"),
            "entityDisplayName": obj.get("entityDisplayName"),
            "entityId": obj.get("entityId"),
            "messageType": obj.get("messageType"),
            "monitoringTool": obj.get("monitoringTool"),
            "raw": obj.get("raw"),
            "stateMessage": obj.get("stateMessage"),
            "stateStartTime": obj.get("stateStartTime"),
            "timestamp": obj.get("timestamp")
        })
        return _obj



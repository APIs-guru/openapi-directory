# coding: utf-8

"""
    VictorOps

    This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.escalation_policy_info import EscalationPolicyInfo
from openapi_client.models.incident_transition import IncidentTransition
from typing import Optional, Set
from typing_extensions import Self

class ActiveIncidentInfo(BaseModel):
    """
    Incidents contain the following fields (all should be considered optional)
    """ # noqa: E501
    alert_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of alerts received for this incident", alias="alertCount")
    current_phase: Optional[StrictStr] = Field(default=None, description="The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\".", alias="currentPhase")
    entity_id: Optional[StrictStr] = Field(default=None, description="The unique identification of the entity being monitored that caused the incident", alias="entityId")
    host: Optional[StrictStr] = Field(default=None, description="The host on which the incident occurred")
    incident_number: Optional[StrictStr] = Field(default=None, description="The VictorOps incident number", alias="incidentNumber")
    last_alert_id: Optional[StrictStr] = Field(default=None, description="The unique id of the last alert for the incident", alias="lastAlertId")
    last_alert_time: Optional[StrictStr] = Field(default=None, description="The time of the last alert received for the incident", alias="lastAlertTime")
    paged_policies: Optional[List[EscalationPolicyInfo]] = Field(default=None, description="The escalation policies that were triggered for the incident", alias="pagedPolicies")
    paged_teams: Optional[List[StrictStr]] = Field(default=None, description="The teams that were paged for the incident", alias="pagedTeams")
    paged_users: Optional[List[StrictStr]] = Field(default=None, description="The users that were paged for the incident.", alias="pagedUsers")
    service: Optional[StrictStr] = Field(default=None, description="The service name causing the incident (if any)")
    start_time: Optional[StrictStr] = Field(default=None, description="The time the incident started", alias="startTime")
    transitions: Optional[List[IncidentTransition]] = Field(default=None, description="Transitions of the incident state over time")
    __properties: ClassVar[List[str]] = ["alertCount", "currentPhase", "entityId", "host", "incidentNumber", "lastAlertId", "lastAlertTime", "pagedPolicies", "pagedTeams", "pagedUsers", "service", "startTime", "transitions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActiveIncidentInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in paged_policies (list)
        _items = []
        if self.paged_policies:
            for _item_paged_policies in self.paged_policies:
                if _item_paged_policies:
                    _items.append(_item_paged_policies.to_dict())
            _dict['pagedPolicies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transitions (list)
        _items = []
        if self.transitions:
            for _item_transitions in self.transitions:
                if _item_transitions:
                    _items.append(_item_transitions.to_dict())
            _dict['transitions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActiveIncidentInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alertCount": obj.get("alertCount"),
            "currentPhase": obj.get("currentPhase"),
            "entityId": obj.get("entityId"),
            "host": obj.get("host"),
            "incidentNumber": obj.get("incidentNumber"),
            "lastAlertId": obj.get("lastAlertId"),
            "lastAlertTime": obj.get("lastAlertTime"),
            "pagedPolicies": [EscalationPolicyInfo.from_dict(_item) for _item in obj["pagedPolicies"]] if obj.get("pagedPolicies") is not None else None,
            "pagedTeams": obj.get("pagedTeams"),
            "pagedUsers": obj.get("pagedUsers"),
            "service": obj.get("service"),
            "startTime": obj.get("startTime"),
            "transitions": [IncidentTransition.from_dict(_item) for _item in obj["transitions"]] if obj.get("transitions") is not None else None
        })
        return _obj



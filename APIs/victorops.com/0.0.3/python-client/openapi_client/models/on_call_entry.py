# coding: utf-8

"""
    VictorOps

    This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.on_call_roll import OnCallRoll
from openapi_client.models.on_call_type import OnCallType
from openapi_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class OnCallEntry(BaseModel):
    """
    OnCallEntry
    """ # noqa: E501
    on_call_type: OnCallType = Field(alias="onCallType")
    on_call_user: Optional[User] = Field(default=None, alias="onCallUser")
    override_on_call_user: Optional[User] = Field(default=None, alias="overrideOnCallUser")
    rolls: List[OnCallRoll]
    rotation_name: Optional[StrictStr] = Field(default=None, alias="rotationName")
    shift_name: Optional[StrictStr] = Field(default=None, alias="shiftName")
    shift_roll: Optional[StrictStr] = Field(default=None, description="The shift roll time (ISO 8601)", alias="shiftRoll")
    __properties: ClassVar[List[str]] = ["onCallType", "onCallUser", "overrideOnCallUser", "rolls", "rotationName", "shiftName", "shiftRoll"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OnCallEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of on_call_user
        if self.on_call_user:
            _dict['onCallUser'] = self.on_call_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of override_on_call_user
        if self.override_on_call_user:
            _dict['overrideOnCallUser'] = self.override_on_call_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rolls (list)
        _items = []
        if self.rolls:
            for _item_rolls in self.rolls:
                if _item_rolls:
                    _items.append(_item_rolls.to_dict())
            _dict['rolls'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OnCallEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "onCallType": obj.get("onCallType"),
            "onCallUser": User.from_dict(obj["onCallUser"]) if obj.get("onCallUser") is not None else None,
            "overrideOnCallUser": User.from_dict(obj["overrideOnCallUser"]) if obj.get("overrideOnCallUser") is not None else None,
            "rolls": [OnCallRoll.from_dict(_item) for _item in obj["rolls"]] if obj.get("rolls") is not None else None,
            "rotationName": obj.get("rotationName"),
            "shiftName": obj.get("shiftName"),
            "shiftRoll": obj.get("shiftRoll")
        })
        return _obj



# coding: utf-8

"""
    VictorOps

    This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class TeamDetail(BaseModel):
    """
    Some info about the team
    """ # noqa: E501
    admins_url: Optional[StrictStr] = Field(default=None, alias="_adminsUrl")
    members_url: Optional[StrictStr] = Field(default=None, alias="_membersUrl")
    policies_url: Optional[StrictStr] = Field(default=None, alias="_policiesUrl")
    self_url: Optional[StrictStr] = Field(default=None, alias="_selfUrl")
    is_default_team: Optional[StrictBool] = Field(default=None, alias="isDefaultTeam")
    member_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="memberCount")
    name: Optional[StrictStr] = None
    slug: Optional[StrictStr] = None
    version: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["_adminsUrl", "_membersUrl", "_policiesUrl", "_selfUrl", "isDefaultTeam", "memberCount", "name", "slug", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TeamDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TeamDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_adminsUrl": obj.get("_adminsUrl"),
            "_membersUrl": obj.get("_membersUrl"),
            "_policiesUrl": obj.get("_policiesUrl"),
            "_selfUrl": obj.get("_selfUrl"),
            "isDefaultTeam": obj.get("isDefaultTeam"),
            "memberCount": obj.get("memberCount"),
            "name": obj.get("name"),
            "slug": obj.get("slug"),
            "version": obj.get("version")
        })
        return _obj



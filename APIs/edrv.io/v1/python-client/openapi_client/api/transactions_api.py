# coding: utf-8

"""
    eDRV API

    edrv.io API Documentation

    The version of the OpenAPI document: v1
    Contact: hello@edrv.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.get_transactions200_response import GetTransactions200Response

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class TransactionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_transaction(
        self,
        id: Annotated[StrictStr, Field(description="The transaction id that needs to be fetched")],
        include_chargestation: Annotated[Optional[StrictBool], Field(description="Populate chargestation")] = None,
        include_evse: Annotated[Optional[StrictBool], Field(description="Populate evse")] = None,
        include_connector: Annotated[Optional[StrictBool], Field(description="Populate connector")] = None,
        include_driver: Annotated[Optional[StrictBool], Field(description="Populate driver")] = None,
        include_token: Annotated[Optional[StrictBool], Field(description="Populate token")] = None,
        include_reservation: Annotated[Optional[StrictBool], Field(description="Populate reservation")] = None,
        include_organization: Annotated[Optional[StrictBool], Field(description="Populate organization")] = None,
        include_rate: Annotated[Optional[StrictBool], Field(description="Populate rate")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """get_transaction

        Get a specific transaction

        :param id: The transaction id that needs to be fetched (required)
        :type id: str
        :param include_chargestation: Populate chargestation
        :type include_chargestation: bool
        :param include_evse: Populate evse
        :type include_evse: bool
        :param include_connector: Populate connector
        :type include_connector: bool
        :param include_driver: Populate driver
        :type include_driver: bool
        :param include_token: Populate token
        :type include_token: bool
        :param include_reservation: Populate reservation
        :type include_reservation: bool
        :param include_organization: Populate organization
        :type include_organization: bool
        :param include_rate: Populate rate
        :type include_rate: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_transaction_serialize(
            id=id,
            include_chargestation=include_chargestation,
            include_evse=include_evse,
            include_connector=include_connector,
            include_driver=include_driver,
            include_token=include_token,
            include_reservation=include_reservation,
            include_organization=include_organization,
            include_rate=include_rate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_transaction_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="The transaction id that needs to be fetched")],
        include_chargestation: Annotated[Optional[StrictBool], Field(description="Populate chargestation")] = None,
        include_evse: Annotated[Optional[StrictBool], Field(description="Populate evse")] = None,
        include_connector: Annotated[Optional[StrictBool], Field(description="Populate connector")] = None,
        include_driver: Annotated[Optional[StrictBool], Field(description="Populate driver")] = None,
        include_token: Annotated[Optional[StrictBool], Field(description="Populate token")] = None,
        include_reservation: Annotated[Optional[StrictBool], Field(description="Populate reservation")] = None,
        include_organization: Annotated[Optional[StrictBool], Field(description="Populate organization")] = None,
        include_rate: Annotated[Optional[StrictBool], Field(description="Populate rate")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """get_transaction

        Get a specific transaction

        :param id: The transaction id that needs to be fetched (required)
        :type id: str
        :param include_chargestation: Populate chargestation
        :type include_chargestation: bool
        :param include_evse: Populate evse
        :type include_evse: bool
        :param include_connector: Populate connector
        :type include_connector: bool
        :param include_driver: Populate driver
        :type include_driver: bool
        :param include_token: Populate token
        :type include_token: bool
        :param include_reservation: Populate reservation
        :type include_reservation: bool
        :param include_organization: Populate organization
        :type include_organization: bool
        :param include_rate: Populate rate
        :type include_rate: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_transaction_serialize(
            id=id,
            include_chargestation=include_chargestation,
            include_evse=include_evse,
            include_connector=include_connector,
            include_driver=include_driver,
            include_token=include_token,
            include_reservation=include_reservation,
            include_organization=include_organization,
            include_rate=include_rate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_transaction_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="The transaction id that needs to be fetched")],
        include_chargestation: Annotated[Optional[StrictBool], Field(description="Populate chargestation")] = None,
        include_evse: Annotated[Optional[StrictBool], Field(description="Populate evse")] = None,
        include_connector: Annotated[Optional[StrictBool], Field(description="Populate connector")] = None,
        include_driver: Annotated[Optional[StrictBool], Field(description="Populate driver")] = None,
        include_token: Annotated[Optional[StrictBool], Field(description="Populate token")] = None,
        include_reservation: Annotated[Optional[StrictBool], Field(description="Populate reservation")] = None,
        include_organization: Annotated[Optional[StrictBool], Field(description="Populate organization")] = None,
        include_rate: Annotated[Optional[StrictBool], Field(description="Populate rate")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_transaction

        Get a specific transaction

        :param id: The transaction id that needs to be fetched (required)
        :type id: str
        :param include_chargestation: Populate chargestation
        :type include_chargestation: bool
        :param include_evse: Populate evse
        :type include_evse: bool
        :param include_connector: Populate connector
        :type include_connector: bool
        :param include_driver: Populate driver
        :type include_driver: bool
        :param include_token: Populate token
        :type include_token: bool
        :param include_reservation: Populate reservation
        :type include_reservation: bool
        :param include_organization: Populate organization
        :type include_organization: bool
        :param include_rate: Populate rate
        :type include_rate: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_transaction_serialize(
            id=id,
            include_chargestation=include_chargestation,
            include_evse=include_evse,
            include_connector=include_connector,
            include_driver=include_driver,
            include_token=include_token,
            include_reservation=include_reservation,
            include_organization=include_organization,
            include_rate=include_rate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_transaction_serialize(
        self,
        id,
        include_chargestation,
        include_evse,
        include_connector,
        include_driver,
        include_token,
        include_reservation,
        include_organization,
        include_rate,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if include_chargestation is not None:
            
            _query_params.append(('include_chargestation', include_chargestation))
            
        if include_evse is not None:
            
            _query_params.append(('include_evse', include_evse))
            
        if include_connector is not None:
            
            _query_params.append(('include_connector', include_connector))
            
        if include_driver is not None:
            
            _query_params.append(('include_driver', include_driver))
            
        if include_token is not None:
            
            _query_params.append(('include_token', include_token))
            
        if include_reservation is not None:
            
            _query_params.append(('include_reservation', include_reservation))
            
        if include_organization is not None:
            
            _query_params.append(('include_organization', include_organization))
            
        if include_rate is not None:
            
            _query_params.append(('include_rate', include_rate))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/transactions/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_transaction_cost(
        self,
        id: Annotated[StrictStr, Field(description="The transaction id that needs to be fetched")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """get_transaction_cost

        Get a specific transaction's cost

        :param id: The transaction id that needs to be fetched (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_transaction_cost_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_transaction_cost_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="The transaction id that needs to be fetched")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """get_transaction_cost

        Get a specific transaction's cost

        :param id: The transaction id that needs to be fetched (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_transaction_cost_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_transaction_cost_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="The transaction id that needs to be fetched")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_transaction_cost

        Get a specific transaction's cost

        :param id: The transaction id that needs to be fetched (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_transaction_cost_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_transaction_cost_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/transactions/{id}/cost',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_transactions(
        self,
        status: Annotated[Optional[StrictStr], Field(description="Started to get only active transactions")] = None,
        paginate_limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="Number of results per page")] = None,
        paginate_page: Annotated[Optional[StrictStr], Field(description="The queried page index")] = None,
        paginate_enabled: Annotated[Optional[StrictBool], Field(description="Enable pagination")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort data by this key")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="asc to sort ascending (default is desc - descending)")] = None,
        created_at_gte: Annotated[Optional[datetime], Field(description="Date as ISO String")] = None,
        created_at_lte: Annotated[Optional[datetime], Field(description="Date as ISO String")] = None,
        updated_at_gte: Annotated[Optional[datetime], Field(description="Date as ISO String")] = None,
        updated_at_lte: Annotated[Optional[datetime], Field(description="Date as ISO String")] = None,
        include_chargestation: Annotated[Optional[StrictBool], Field(description="Populate chargestation")] = None,
        include_evse: Annotated[Optional[StrictBool], Field(description="Populate evse")] = None,
        include_connector: Annotated[Optional[StrictBool], Field(description="Populate connector")] = None,
        include_driver: Annotated[Optional[StrictBool], Field(description="Populate driver")] = None,
        include_token: Annotated[Optional[StrictBool], Field(description="Populate token")] = None,
        include_reservation: Annotated[Optional[StrictBool], Field(description="Populate reservation")] = None,
        include_organization: Annotated[Optional[StrictBool], Field(description="Populate organization")] = None,
        include_rate: Annotated[Optional[StrictBool], Field(description="Populate rate")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetTransactions200Response:
        """get_transactions

        Get a list of transactions

        :param status: Started to get only active transactions
        :type status: str
        :param paginate_limit: Number of results per page
        :type paginate_limit: int
        :param paginate_page: The queried page index
        :type paginate_page: str
        :param paginate_enabled: Enable pagination
        :type paginate_enabled: bool
        :param sort_by: Sort data by this key
        :type sort_by: str
        :param sort_order: asc to sort ascending (default is desc - descending)
        :type sort_order: str
        :param created_at_gte: Date as ISO String
        :type created_at_gte: datetime
        :param created_at_lte: Date as ISO String
        :type created_at_lte: datetime
        :param updated_at_gte: Date as ISO String
        :type updated_at_gte: datetime
        :param updated_at_lte: Date as ISO String
        :type updated_at_lte: datetime
        :param include_chargestation: Populate chargestation
        :type include_chargestation: bool
        :param include_evse: Populate evse
        :type include_evse: bool
        :param include_connector: Populate connector
        :type include_connector: bool
        :param include_driver: Populate driver
        :type include_driver: bool
        :param include_token: Populate token
        :type include_token: bool
        :param include_reservation: Populate reservation
        :type include_reservation: bool
        :param include_organization: Populate organization
        :type include_organization: bool
        :param include_rate: Populate rate
        :type include_rate: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_transactions_serialize(
            status=status,
            paginate_limit=paginate_limit,
            paginate_page=paginate_page,
            paginate_enabled=paginate_enabled,
            sort_by=sort_by,
            sort_order=sort_order,
            created_at_gte=created_at_gte,
            created_at_lte=created_at_lte,
            updated_at_gte=updated_at_gte,
            updated_at_lte=updated_at_lte,
            include_chargestation=include_chargestation,
            include_evse=include_evse,
            include_connector=include_connector,
            include_driver=include_driver,
            include_token=include_token,
            include_reservation=include_reservation,
            include_organization=include_organization,
            include_rate=include_rate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTransactions200Response",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_transactions_with_http_info(
        self,
        status: Annotated[Optional[StrictStr], Field(description="Started to get only active transactions")] = None,
        paginate_limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="Number of results per page")] = None,
        paginate_page: Annotated[Optional[StrictStr], Field(description="The queried page index")] = None,
        paginate_enabled: Annotated[Optional[StrictBool], Field(description="Enable pagination")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort data by this key")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="asc to sort ascending (default is desc - descending)")] = None,
        created_at_gte: Annotated[Optional[datetime], Field(description="Date as ISO String")] = None,
        created_at_lte: Annotated[Optional[datetime], Field(description="Date as ISO String")] = None,
        updated_at_gte: Annotated[Optional[datetime], Field(description="Date as ISO String")] = None,
        updated_at_lte: Annotated[Optional[datetime], Field(description="Date as ISO String")] = None,
        include_chargestation: Annotated[Optional[StrictBool], Field(description="Populate chargestation")] = None,
        include_evse: Annotated[Optional[StrictBool], Field(description="Populate evse")] = None,
        include_connector: Annotated[Optional[StrictBool], Field(description="Populate connector")] = None,
        include_driver: Annotated[Optional[StrictBool], Field(description="Populate driver")] = None,
        include_token: Annotated[Optional[StrictBool], Field(description="Populate token")] = None,
        include_reservation: Annotated[Optional[StrictBool], Field(description="Populate reservation")] = None,
        include_organization: Annotated[Optional[StrictBool], Field(description="Populate organization")] = None,
        include_rate: Annotated[Optional[StrictBool], Field(description="Populate rate")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetTransactions200Response]:
        """get_transactions

        Get a list of transactions

        :param status: Started to get only active transactions
        :type status: str
        :param paginate_limit: Number of results per page
        :type paginate_limit: int
        :param paginate_page: The queried page index
        :type paginate_page: str
        :param paginate_enabled: Enable pagination
        :type paginate_enabled: bool
        :param sort_by: Sort data by this key
        :type sort_by: str
        :param sort_order: asc to sort ascending (default is desc - descending)
        :type sort_order: str
        :param created_at_gte: Date as ISO String
        :type created_at_gte: datetime
        :param created_at_lte: Date as ISO String
        :type created_at_lte: datetime
        :param updated_at_gte: Date as ISO String
        :type updated_at_gte: datetime
        :param updated_at_lte: Date as ISO String
        :type updated_at_lte: datetime
        :param include_chargestation: Populate chargestation
        :type include_chargestation: bool
        :param include_evse: Populate evse
        :type include_evse: bool
        :param include_connector: Populate connector
        :type include_connector: bool
        :param include_driver: Populate driver
        :type include_driver: bool
        :param include_token: Populate token
        :type include_token: bool
        :param include_reservation: Populate reservation
        :type include_reservation: bool
        :param include_organization: Populate organization
        :type include_organization: bool
        :param include_rate: Populate rate
        :type include_rate: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_transactions_serialize(
            status=status,
            paginate_limit=paginate_limit,
            paginate_page=paginate_page,
            paginate_enabled=paginate_enabled,
            sort_by=sort_by,
            sort_order=sort_order,
            created_at_gte=created_at_gte,
            created_at_lte=created_at_lte,
            updated_at_gte=updated_at_gte,
            updated_at_lte=updated_at_lte,
            include_chargestation=include_chargestation,
            include_evse=include_evse,
            include_connector=include_connector,
            include_driver=include_driver,
            include_token=include_token,
            include_reservation=include_reservation,
            include_organization=include_organization,
            include_rate=include_rate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTransactions200Response",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_transactions_without_preload_content(
        self,
        status: Annotated[Optional[StrictStr], Field(description="Started to get only active transactions")] = None,
        paginate_limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="Number of results per page")] = None,
        paginate_page: Annotated[Optional[StrictStr], Field(description="The queried page index")] = None,
        paginate_enabled: Annotated[Optional[StrictBool], Field(description="Enable pagination")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort data by this key")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="asc to sort ascending (default is desc - descending)")] = None,
        created_at_gte: Annotated[Optional[datetime], Field(description="Date as ISO String")] = None,
        created_at_lte: Annotated[Optional[datetime], Field(description="Date as ISO String")] = None,
        updated_at_gte: Annotated[Optional[datetime], Field(description="Date as ISO String")] = None,
        updated_at_lte: Annotated[Optional[datetime], Field(description="Date as ISO String")] = None,
        include_chargestation: Annotated[Optional[StrictBool], Field(description="Populate chargestation")] = None,
        include_evse: Annotated[Optional[StrictBool], Field(description="Populate evse")] = None,
        include_connector: Annotated[Optional[StrictBool], Field(description="Populate connector")] = None,
        include_driver: Annotated[Optional[StrictBool], Field(description="Populate driver")] = None,
        include_token: Annotated[Optional[StrictBool], Field(description="Populate token")] = None,
        include_reservation: Annotated[Optional[StrictBool], Field(description="Populate reservation")] = None,
        include_organization: Annotated[Optional[StrictBool], Field(description="Populate organization")] = None,
        include_rate: Annotated[Optional[StrictBool], Field(description="Populate rate")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_transactions

        Get a list of transactions

        :param status: Started to get only active transactions
        :type status: str
        :param paginate_limit: Number of results per page
        :type paginate_limit: int
        :param paginate_page: The queried page index
        :type paginate_page: str
        :param paginate_enabled: Enable pagination
        :type paginate_enabled: bool
        :param sort_by: Sort data by this key
        :type sort_by: str
        :param sort_order: asc to sort ascending (default is desc - descending)
        :type sort_order: str
        :param created_at_gte: Date as ISO String
        :type created_at_gte: datetime
        :param created_at_lte: Date as ISO String
        :type created_at_lte: datetime
        :param updated_at_gte: Date as ISO String
        :type updated_at_gte: datetime
        :param updated_at_lte: Date as ISO String
        :type updated_at_lte: datetime
        :param include_chargestation: Populate chargestation
        :type include_chargestation: bool
        :param include_evse: Populate evse
        :type include_evse: bool
        :param include_connector: Populate connector
        :type include_connector: bool
        :param include_driver: Populate driver
        :type include_driver: bool
        :param include_token: Populate token
        :type include_token: bool
        :param include_reservation: Populate reservation
        :type include_reservation: bool
        :param include_organization: Populate organization
        :type include_organization: bool
        :param include_rate: Populate rate
        :type include_rate: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_transactions_serialize(
            status=status,
            paginate_limit=paginate_limit,
            paginate_page=paginate_page,
            paginate_enabled=paginate_enabled,
            sort_by=sort_by,
            sort_order=sort_order,
            created_at_gte=created_at_gte,
            created_at_lte=created_at_lte,
            updated_at_gte=updated_at_gte,
            updated_at_lte=updated_at_lte,
            include_chargestation=include_chargestation,
            include_evse=include_evse,
            include_connector=include_connector,
            include_driver=include_driver,
            include_token=include_token,
            include_reservation=include_reservation,
            include_organization=include_organization,
            include_rate=include_rate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTransactions200Response",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_transactions_serialize(
        self,
        status,
        paginate_limit,
        paginate_page,
        paginate_enabled,
        sort_by,
        sort_order,
        created_at_gte,
        created_at_lte,
        updated_at_gte,
        updated_at_lte,
        include_chargestation,
        include_evse,
        include_connector,
        include_driver,
        include_token,
        include_reservation,
        include_organization,
        include_rate,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if status is not None:
            
            _query_params.append(('status', status))
            
        if paginate_limit is not None:
            
            _query_params.append(('paginate_limit', paginate_limit))
            
        if paginate_page is not None:
            
            _query_params.append(('paginate_page', paginate_page))
            
        if paginate_enabled is not None:
            
            _query_params.append(('paginate_enabled', paginate_enabled))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        if created_at_gte is not None:
            if isinstance(created_at_gte, datetime):
                _query_params.append(
                    (
                        'createdAt[$gte]',
                        created_at_gte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('createdAt[$gte]', created_at_gte))
            
        if created_at_lte is not None:
            if isinstance(created_at_lte, datetime):
                _query_params.append(
                    (
                        'createdAt[$lte]',
                        created_at_lte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('createdAt[$lte]', created_at_lte))
            
        if updated_at_gte is not None:
            if isinstance(updated_at_gte, datetime):
                _query_params.append(
                    (
                        'updatedAt[$gte]',
                        updated_at_gte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updatedAt[$gte]', updated_at_gte))
            
        if updated_at_lte is not None:
            if isinstance(updated_at_lte, datetime):
                _query_params.append(
                    (
                        'updatedAt[$lte]',
                        updated_at_lte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updatedAt[$lte]', updated_at_lte))
            
        if include_chargestation is not None:
            
            _query_params.append(('include_chargestation', include_chargestation))
            
        if include_evse is not None:
            
            _query_params.append(('include_evse', include_evse))
            
        if include_connector is not None:
            
            _query_params.append(('include_connector', include_connector))
            
        if include_driver is not None:
            
            _query_params.append(('include_driver', include_driver))
            
        if include_token is not None:
            
            _query_params.append(('include_token', include_token))
            
        if include_reservation is not None:
            
            _query_params.append(('include_reservation', include_reservation))
            
        if include_organization is not None:
            
            _query_params.append(('include_organization', include_organization))
            
        if include_rate is not None:
            
            _query_params.append(('include_rate', include_rate))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/transactions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



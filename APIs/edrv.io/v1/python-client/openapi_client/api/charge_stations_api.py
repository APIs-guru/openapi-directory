# coding: utf-8

"""
    eDRV API

    edrv.io API Documentation

    The version of the OpenAPI document: v1
    Contact: hello@edrv.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.patch_charge_station200_response import PatchChargeStation200Response
from openapi_client.models.post_charge_stations201_response import PostChargeStations201Response
from openapi_client.models.schema1 import Schema1

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ChargeStationsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def delete_charge_station(
        self,
        id: Annotated[StrictStr, Field(description="The charge station id that needs to be deleted")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """delete_charge_station

        Use to delete a charge station

        :param id: The charge station id that needs to be deleted (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_charge_station_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_charge_station_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="The charge station id that needs to be deleted")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """delete_charge_station

        Use to delete a charge station

        :param id: The charge station id that needs to be deleted (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_charge_station_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_charge_station_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="The charge station id that needs to be deleted")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_charge_station

        Use to delete a charge station

        :param id: The charge station id that needs to be deleted (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_charge_station_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_charge_station_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/chargestations/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_charge_station(
        self,
        id: Annotated[StrictStr, Field(description="The charge station id that needs to be fetched")],
        include_location: Annotated[Optional[StrictBool], Field(description="Populate location")] = None,
        include_evses: Annotated[Optional[StrictBool], Field(description="Populate evses")] = None,
        include_organization: Annotated[Optional[StrictBool], Field(description="Populate organization")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """get_charge_station

        Get a single charge station's data

        :param id: The charge station id that needs to be fetched (required)
        :type id: str
        :param include_location: Populate location
        :type include_location: bool
        :param include_evses: Populate evses
        :type include_evses: bool
        :param include_organization: Populate organization
        :type include_organization: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_charge_station_serialize(
            id=id,
            include_location=include_location,
            include_evses=include_evses,
            include_organization=include_organization,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_charge_station_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="The charge station id that needs to be fetched")],
        include_location: Annotated[Optional[StrictBool], Field(description="Populate location")] = None,
        include_evses: Annotated[Optional[StrictBool], Field(description="Populate evses")] = None,
        include_organization: Annotated[Optional[StrictBool], Field(description="Populate organization")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """get_charge_station

        Get a single charge station's data

        :param id: The charge station id that needs to be fetched (required)
        :type id: str
        :param include_location: Populate location
        :type include_location: bool
        :param include_evses: Populate evses
        :type include_evses: bool
        :param include_organization: Populate organization
        :type include_organization: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_charge_station_serialize(
            id=id,
            include_location=include_location,
            include_evses=include_evses,
            include_organization=include_organization,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_charge_station_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="The charge station id that needs to be fetched")],
        include_location: Annotated[Optional[StrictBool], Field(description="Populate location")] = None,
        include_evses: Annotated[Optional[StrictBool], Field(description="Populate evses")] = None,
        include_organization: Annotated[Optional[StrictBool], Field(description="Populate organization")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_charge_station

        Get a single charge station's data

        :param id: The charge station id that needs to be fetched (required)
        :type id: str
        :param include_location: Populate location
        :type include_location: bool
        :param include_evses: Populate evses
        :type include_evses: bool
        :param include_organization: Populate organization
        :type include_organization: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_charge_station_serialize(
            id=id,
            include_location=include_location,
            include_evses=include_evses,
            include_organization=include_organization,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_charge_station_serialize(
        self,
        id,
        include_location,
        include_evses,
        include_organization,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if include_location is not None:
            
            _query_params.append(('include_location', include_location))
            
        if include_evses is not None:
            
            _query_params.append(('include_evses', include_evses))
            
        if include_organization is not None:
            
            _query_params.append(('include_organization', include_organization))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/chargestations/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_charge_station_connectors(
        self,
        id: Annotated[StrictStr, Field(description="chargeStation id")],
        include_evse: Annotated[Optional[StrictBool], Field(description="Populate evse")] = None,
        include_organization: Annotated[Optional[StrictBool], Field(description="Populate organization")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """get_charge_station_connectors

        List connectors for a chargestation

        :param id: chargeStation id (required)
        :type id: str
        :param include_evse: Populate evse
        :type include_evse: bool
        :param include_organization: Populate organization
        :type include_organization: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_charge_station_connectors_serialize(
            id=id,
            include_evse=include_evse,
            include_organization=include_organization,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_charge_station_connectors_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="chargeStation id")],
        include_evse: Annotated[Optional[StrictBool], Field(description="Populate evse")] = None,
        include_organization: Annotated[Optional[StrictBool], Field(description="Populate organization")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """get_charge_station_connectors

        List connectors for a chargestation

        :param id: chargeStation id (required)
        :type id: str
        :param include_evse: Populate evse
        :type include_evse: bool
        :param include_organization: Populate organization
        :type include_organization: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_charge_station_connectors_serialize(
            id=id,
            include_evse=include_evse,
            include_organization=include_organization,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_charge_station_connectors_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="chargeStation id")],
        include_evse: Annotated[Optional[StrictBool], Field(description="Populate evse")] = None,
        include_organization: Annotated[Optional[StrictBool], Field(description="Populate organization")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_charge_station_connectors

        List connectors for a chargestation

        :param id: chargeStation id (required)
        :type id: str
        :param include_evse: Populate evse
        :type include_evse: bool
        :param include_organization: Populate organization
        :type include_organization: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_charge_station_connectors_serialize(
            id=id,
            include_evse=include_evse,
            include_organization=include_organization,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_charge_station_connectors_serialize(
        self,
        id,
        include_evse,
        include_organization,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if include_evse is not None:
            
            _query_params.append(('include_evse', include_evse))
            
        if include_organization is not None:
            
            _query_params.append(('include_organization', include_organization))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/chargestations/{id}/connectors',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_charge_stations(
        self,
        organization: Annotated[Optional[StrictStr], Field(description="Filter by Org. Id")] = None,
        location: Annotated[Optional[StrictStr], Field(description="Filter by Location Id")] = None,
        online: Annotated[Optional[StrictBool], Field(description="Filter by Online Status")] = None,
        active: Annotated[Optional[StrictBool], Field(description="Chargestations that have been activated/deactivated by the admin")] = None,
        public: Annotated[Optional[StrictBool], Field(description="Chargestations that are public")] = None,
        paginate_limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="Number of results per page")] = None,
        paginate_page: Annotated[Optional[StrictStr], Field(description="The queried page index")] = None,
        paginate_enabled: Annotated[Optional[StrictBool], Field(description="Enable pagination")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort data by this key")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="asc to sort ascending (default is desc - descending)")] = None,
        created_at_gte: Annotated[Optional[datetime], Field(description="Date as ISO String")] = None,
        created_at_lte: Annotated[Optional[datetime], Field(description="Date as ISO String")] = None,
        updated_at_gte: Annotated[Optional[datetime], Field(description="Date as ISO String")] = None,
        updated_at_lte: Annotated[Optional[datetime], Field(description="Date as ISO String")] = None,
        include_location: Annotated[Optional[StrictBool], Field(description="Populate location")] = None,
        include_evses: Annotated[Optional[StrictBool], Field(description="Populate evses")] = None,
        include_organization: Annotated[Optional[StrictBool], Field(description="Populate organization")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """get_charge_stations

        List all Chargestations

        :param organization: Filter by Org. Id
        :type organization: str
        :param location: Filter by Location Id
        :type location: str
        :param online: Filter by Online Status
        :type online: bool
        :param active: Chargestations that have been activated/deactivated by the admin
        :type active: bool
        :param public: Chargestations that are public
        :type public: bool
        :param paginate_limit: Number of results per page
        :type paginate_limit: int
        :param paginate_page: The queried page index
        :type paginate_page: str
        :param paginate_enabled: Enable pagination
        :type paginate_enabled: bool
        :param sort_by: Sort data by this key
        :type sort_by: str
        :param sort_order: asc to sort ascending (default is desc - descending)
        :type sort_order: str
        :param created_at_gte: Date as ISO String
        :type created_at_gte: datetime
        :param created_at_lte: Date as ISO String
        :type created_at_lte: datetime
        :param updated_at_gte: Date as ISO String
        :type updated_at_gte: datetime
        :param updated_at_lte: Date as ISO String
        :type updated_at_lte: datetime
        :param include_location: Populate location
        :type include_location: bool
        :param include_evses: Populate evses
        :type include_evses: bool
        :param include_organization: Populate organization
        :type include_organization: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_charge_stations_serialize(
            organization=organization,
            location=location,
            online=online,
            active=active,
            public=public,
            paginate_limit=paginate_limit,
            paginate_page=paginate_page,
            paginate_enabled=paginate_enabled,
            sort_by=sort_by,
            sort_order=sort_order,
            created_at_gte=created_at_gte,
            created_at_lte=created_at_lte,
            updated_at_gte=updated_at_gte,
            updated_at_lte=updated_at_lte,
            include_location=include_location,
            include_evses=include_evses,
            include_organization=include_organization,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_charge_stations_with_http_info(
        self,
        organization: Annotated[Optional[StrictStr], Field(description="Filter by Org. Id")] = None,
        location: Annotated[Optional[StrictStr], Field(description="Filter by Location Id")] = None,
        online: Annotated[Optional[StrictBool], Field(description="Filter by Online Status")] = None,
        active: Annotated[Optional[StrictBool], Field(description="Chargestations that have been activated/deactivated by the admin")] = None,
        public: Annotated[Optional[StrictBool], Field(description="Chargestations that are public")] = None,
        paginate_limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="Number of results per page")] = None,
        paginate_page: Annotated[Optional[StrictStr], Field(description="The queried page index")] = None,
        paginate_enabled: Annotated[Optional[StrictBool], Field(description="Enable pagination")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort data by this key")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="asc to sort ascending (default is desc - descending)")] = None,
        created_at_gte: Annotated[Optional[datetime], Field(description="Date as ISO String")] = None,
        created_at_lte: Annotated[Optional[datetime], Field(description="Date as ISO String")] = None,
        updated_at_gte: Annotated[Optional[datetime], Field(description="Date as ISO String")] = None,
        updated_at_lte: Annotated[Optional[datetime], Field(description="Date as ISO String")] = None,
        include_location: Annotated[Optional[StrictBool], Field(description="Populate location")] = None,
        include_evses: Annotated[Optional[StrictBool], Field(description="Populate evses")] = None,
        include_organization: Annotated[Optional[StrictBool], Field(description="Populate organization")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """get_charge_stations

        List all Chargestations

        :param organization: Filter by Org. Id
        :type organization: str
        :param location: Filter by Location Id
        :type location: str
        :param online: Filter by Online Status
        :type online: bool
        :param active: Chargestations that have been activated/deactivated by the admin
        :type active: bool
        :param public: Chargestations that are public
        :type public: bool
        :param paginate_limit: Number of results per page
        :type paginate_limit: int
        :param paginate_page: The queried page index
        :type paginate_page: str
        :param paginate_enabled: Enable pagination
        :type paginate_enabled: bool
        :param sort_by: Sort data by this key
        :type sort_by: str
        :param sort_order: asc to sort ascending (default is desc - descending)
        :type sort_order: str
        :param created_at_gte: Date as ISO String
        :type created_at_gte: datetime
        :param created_at_lte: Date as ISO String
        :type created_at_lte: datetime
        :param updated_at_gte: Date as ISO String
        :type updated_at_gte: datetime
        :param updated_at_lte: Date as ISO String
        :type updated_at_lte: datetime
        :param include_location: Populate location
        :type include_location: bool
        :param include_evses: Populate evses
        :type include_evses: bool
        :param include_organization: Populate organization
        :type include_organization: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_charge_stations_serialize(
            organization=organization,
            location=location,
            online=online,
            active=active,
            public=public,
            paginate_limit=paginate_limit,
            paginate_page=paginate_page,
            paginate_enabled=paginate_enabled,
            sort_by=sort_by,
            sort_order=sort_order,
            created_at_gte=created_at_gte,
            created_at_lte=created_at_lte,
            updated_at_gte=updated_at_gte,
            updated_at_lte=updated_at_lte,
            include_location=include_location,
            include_evses=include_evses,
            include_organization=include_organization,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_charge_stations_without_preload_content(
        self,
        organization: Annotated[Optional[StrictStr], Field(description="Filter by Org. Id")] = None,
        location: Annotated[Optional[StrictStr], Field(description="Filter by Location Id")] = None,
        online: Annotated[Optional[StrictBool], Field(description="Filter by Online Status")] = None,
        active: Annotated[Optional[StrictBool], Field(description="Chargestations that have been activated/deactivated by the admin")] = None,
        public: Annotated[Optional[StrictBool], Field(description="Chargestations that are public")] = None,
        paginate_limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="Number of results per page")] = None,
        paginate_page: Annotated[Optional[StrictStr], Field(description="The queried page index")] = None,
        paginate_enabled: Annotated[Optional[StrictBool], Field(description="Enable pagination")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort data by this key")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="asc to sort ascending (default is desc - descending)")] = None,
        created_at_gte: Annotated[Optional[datetime], Field(description="Date as ISO String")] = None,
        created_at_lte: Annotated[Optional[datetime], Field(description="Date as ISO String")] = None,
        updated_at_gte: Annotated[Optional[datetime], Field(description="Date as ISO String")] = None,
        updated_at_lte: Annotated[Optional[datetime], Field(description="Date as ISO String")] = None,
        include_location: Annotated[Optional[StrictBool], Field(description="Populate location")] = None,
        include_evses: Annotated[Optional[StrictBool], Field(description="Populate evses")] = None,
        include_organization: Annotated[Optional[StrictBool], Field(description="Populate organization")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_charge_stations

        List all Chargestations

        :param organization: Filter by Org. Id
        :type organization: str
        :param location: Filter by Location Id
        :type location: str
        :param online: Filter by Online Status
        :type online: bool
        :param active: Chargestations that have been activated/deactivated by the admin
        :type active: bool
        :param public: Chargestations that are public
        :type public: bool
        :param paginate_limit: Number of results per page
        :type paginate_limit: int
        :param paginate_page: The queried page index
        :type paginate_page: str
        :param paginate_enabled: Enable pagination
        :type paginate_enabled: bool
        :param sort_by: Sort data by this key
        :type sort_by: str
        :param sort_order: asc to sort ascending (default is desc - descending)
        :type sort_order: str
        :param created_at_gte: Date as ISO String
        :type created_at_gte: datetime
        :param created_at_lte: Date as ISO String
        :type created_at_lte: datetime
        :param updated_at_gte: Date as ISO String
        :type updated_at_gte: datetime
        :param updated_at_lte: Date as ISO String
        :type updated_at_lte: datetime
        :param include_location: Populate location
        :type include_location: bool
        :param include_evses: Populate evses
        :type include_evses: bool
        :param include_organization: Populate organization
        :type include_organization: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_charge_stations_serialize(
            organization=organization,
            location=location,
            online=online,
            active=active,
            public=public,
            paginate_limit=paginate_limit,
            paginate_page=paginate_page,
            paginate_enabled=paginate_enabled,
            sort_by=sort_by,
            sort_order=sort_order,
            created_at_gte=created_at_gte,
            created_at_lte=created_at_lte,
            updated_at_gte=updated_at_gte,
            updated_at_lte=updated_at_lte,
            include_location=include_location,
            include_evses=include_evses,
            include_organization=include_organization,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_charge_stations_serialize(
        self,
        organization,
        location,
        online,
        active,
        public,
        paginate_limit,
        paginate_page,
        paginate_enabled,
        sort_by,
        sort_order,
        created_at_gte,
        created_at_lte,
        updated_at_gte,
        updated_at_lte,
        include_location,
        include_evses,
        include_organization,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if organization is not None:
            
            _query_params.append(('organization', organization))
            
        if location is not None:
            
            _query_params.append(('location', location))
            
        if online is not None:
            
            _query_params.append(('online', online))
            
        if active is not None:
            
            _query_params.append(('active', active))
            
        if public is not None:
            
            _query_params.append(('public', public))
            
        if paginate_limit is not None:
            
            _query_params.append(('paginate_limit', paginate_limit))
            
        if paginate_page is not None:
            
            _query_params.append(('paginate_page', paginate_page))
            
        if paginate_enabled is not None:
            
            _query_params.append(('paginate_enabled', paginate_enabled))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        if created_at_gte is not None:
            if isinstance(created_at_gte, datetime):
                _query_params.append(
                    (
                        'createdAt[$gte]',
                        created_at_gte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('createdAt[$gte]', created_at_gte))
            
        if created_at_lte is not None:
            if isinstance(created_at_lte, datetime):
                _query_params.append(
                    (
                        'createdAt[$lte]',
                        created_at_lte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('createdAt[$lte]', created_at_lte))
            
        if updated_at_gte is not None:
            if isinstance(updated_at_gte, datetime):
                _query_params.append(
                    (
                        'updatedAt[$gte]',
                        updated_at_gte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updatedAt[$gte]', updated_at_gte))
            
        if updated_at_lte is not None:
            if isinstance(updated_at_lte, datetime):
                _query_params.append(
                    (
                        'updatedAt[$lte]',
                        updated_at_lte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updatedAt[$lte]', updated_at_lte))
            
        if include_location is not None:
            
            _query_params.append(('include_location', include_location))
            
        if include_evses is not None:
            
            _query_params.append(('include_evses', include_evses))
            
        if include_organization is not None:
            
            _query_params.append(('include_organization', include_organization))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/chargestations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def patch_charge_station(
        self,
        id: Annotated[StrictStr, Field(description="ID of charge station that needs to be updated")],
        schema1: Annotated[Schema1, Field(description="Include charge station properties to update here")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PatchChargeStation200Response:
        """patch_charge_station

        Update a charge station's data

        :param id: ID of charge station that needs to be updated (required)
        :type id: str
        :param schema1: Include charge station properties to update here (required)
        :type schema1: Schema1
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_charge_station_serialize(
            id=id,
            schema1=schema1,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PatchChargeStation200Response",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def patch_charge_station_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="ID of charge station that needs to be updated")],
        schema1: Annotated[Schema1, Field(description="Include charge station properties to update here")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PatchChargeStation200Response]:
        """patch_charge_station

        Update a charge station's data

        :param id: ID of charge station that needs to be updated (required)
        :type id: str
        :param schema1: Include charge station properties to update here (required)
        :type schema1: Schema1
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_charge_station_serialize(
            id=id,
            schema1=schema1,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PatchChargeStation200Response",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def patch_charge_station_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="ID of charge station that needs to be updated")],
        schema1: Annotated[Schema1, Field(description="Include charge station properties to update here")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """patch_charge_station

        Update a charge station's data

        :param id: ID of charge station that needs to be updated (required)
        :type id: str
        :param schema1: Include charge station properties to update here (required)
        :type schema1: Schema1
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_charge_station_serialize(
            id=id,
            schema1=schema1,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PatchChargeStation200Response",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _patch_charge_station_serialize(
        self,
        id,
        schema1,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if schema1 is not None:
            _body_params = schema1


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/v1/chargestations/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_charge_stations(
        self,
        schema1: Annotated[Schema1, Field(description="Include charge station properties to create here")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostChargeStations201Response:
        """post_charge_stations

        Create a new charge station

        :param schema1: Include charge station properties to create here (required)
        :type schema1: Schema1
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_charge_stations_serialize(
            schema1=schema1,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "PostChargeStations201Response",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_charge_stations_with_http_info(
        self,
        schema1: Annotated[Schema1, Field(description="Include charge station properties to create here")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostChargeStations201Response]:
        """post_charge_stations

        Create a new charge station

        :param schema1: Include charge station properties to create here (required)
        :type schema1: Schema1
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_charge_stations_serialize(
            schema1=schema1,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "PostChargeStations201Response",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_charge_stations_without_preload_content(
        self,
        schema1: Annotated[Schema1, Field(description="Include charge station properties to create here")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_charge_stations

        Create a new charge station

        :param schema1: Include charge station properties to create here (required)
        :type schema1: Schema1
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_charge_stations_serialize(
            schema1=schema1,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "PostChargeStations201Response",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_charge_stations_serialize(
        self,
        schema1,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if schema1 is not None:
            _body_params = schema1


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/chargestations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



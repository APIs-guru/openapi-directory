# coding: utf-8

"""
    eDRV API

    edrv.io API Documentation

    The version of the OpenAPI document: v1
    Contact: hello@edrv.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.patch_organization_request_channels import PatchOrganizationRequestChannels
from openapi_client.models.patch_organization_request_configurations import PatchOrganizationRequestConfigurations
from openapi_client.models.patch_organization_request_links import PatchOrganizationRequestLinks
from openapi_client.models.patch_organization_request_support import PatchOrganizationRequestSupport
from openapi_client.models.patch_organization_request_support_chat import PatchOrganizationRequestSupportChat
from openapi_client.models.patch_organization_request_theme import PatchOrganizationRequestTheme
from openapi_client.models.post_drivers_request_address import PostDriversRequestAddress
from typing import Optional, Set
from typing_extensions import Self

class PatchOrganizationRequest(BaseModel):
    """
    PatchOrganizationRequest
    """ # noqa: E501
    active: Optional[StrictBool] = None
    address: Optional[PostDriversRequestAddress] = None
    channels: Optional[PatchOrganizationRequestChannels] = None
    configurations: Optional[PatchOrganizationRequestConfigurations] = None
    links: Optional[PatchOrganizationRequestLinks] = None
    locations: Optional[List[Any]] = None
    logo: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    otp: Optional[StrictStr] = None
    stripe_connected_account_id: Optional[StrictStr] = None
    stripe_country: Optional[StrictStr] = None
    stripe_currency: Optional[StrictStr] = None
    stripe_reserve_amount: Optional[StrictInt] = None
    support: Optional[PatchOrganizationRequestSupport] = None
    support_chat: Optional[PatchOrganizationRequestSupportChat] = Field(default=None, alias="supportChat")
    theme: Optional[PatchOrganizationRequestTheme] = None
    __properties: ClassVar[List[str]] = ["active", "address", "channels", "configurations", "links", "locations", "logo", "name", "otp", "stripe_connected_account_id", "stripe_country", "stripe_currency", "stripe_reserve_amount", "support", "supportChat", "theme"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchOrganizationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of channels
        if self.channels:
            _dict['channels'] = self.channels.to_dict()
        # override the default output from pydantic by calling `to_dict()` of configurations
        if self.configurations:
            _dict['configurations'] = self.configurations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of support
        if self.support:
            _dict['support'] = self.support.to_dict()
        # override the default output from pydantic by calling `to_dict()` of support_chat
        if self.support_chat:
            _dict['supportChat'] = self.support_chat.to_dict()
        # override the default output from pydantic by calling `to_dict()` of theme
        if self.theme:
            _dict['theme'] = self.theme.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchOrganizationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active"),
            "address": PostDriversRequestAddress.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "channels": PatchOrganizationRequestChannels.from_dict(obj["channels"]) if obj.get("channels") is not None else None,
            "configurations": PatchOrganizationRequestConfigurations.from_dict(obj["configurations"]) if obj.get("configurations") is not None else None,
            "links": PatchOrganizationRequestLinks.from_dict(obj["links"]) if obj.get("links") is not None else None,
            "locations": obj.get("locations"),
            "logo": obj.get("logo"),
            "name": obj.get("name"),
            "otp": obj.get("otp"),
            "stripe_connected_account_id": obj.get("stripe_connected_account_id"),
            "stripe_country": obj.get("stripe_country"),
            "stripe_currency": obj.get("stripe_currency"),
            "stripe_reserve_amount": obj.get("stripe_reserve_amount"),
            "support": PatchOrganizationRequestSupport.from_dict(obj["support"]) if obj.get("support") is not None else None,
            "supportChat": PatchOrganizationRequestSupportChat.from_dict(obj["supportChat"]) if obj.get("supportChat") is not None else None,
            "theme": PatchOrganizationRequestTheme.from_dict(obj["theme"]) if obj.get("theme") is not None else None
        })
        return _obj



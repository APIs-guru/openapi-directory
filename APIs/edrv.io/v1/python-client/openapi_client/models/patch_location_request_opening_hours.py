# coding: utf-8

"""
    eDRV API

    edrv.io API Documentation

    The version of the OpenAPI document: v1
    Contact: hello@edrv.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.patch_location_request_opening_hours0_inner import PatchLocationRequestOpeningHours0Inner
from typing import Optional, Set
from typing_extensions import Self

class PatchLocationRequestOpeningHours(BaseModel):
    """
    PatchLocationRequestOpeningHours
    """ # noqa: E501
    var_0: Optional[List[PatchLocationRequestOpeningHours0Inner]] = Field(default=None, alias="0")
    var_1: Optional[List[PatchLocationRequestOpeningHours0Inner]] = Field(default=None, alias="1")
    var_2: Optional[List[PatchLocationRequestOpeningHours0Inner]] = Field(default=None, alias="2")
    var_3: Optional[List[PatchLocationRequestOpeningHours0Inner]] = Field(default=None, alias="3")
    var_4: Optional[List[PatchLocationRequestOpeningHours0Inner]] = Field(default=None, alias="4")
    var_5: Optional[List[PatchLocationRequestOpeningHours0Inner]] = Field(default=None, alias="5")
    var_6: Optional[List[PatchLocationRequestOpeningHours0Inner]] = Field(default=None, alias="6")
    __properties: ClassVar[List[str]] = ["0", "1", "2", "3", "4", "5", "6"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchLocationRequestOpeningHours from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in var_0 (list)
        _items = []
        if self.var_0:
            for _item_var_0 in self.var_0:
                if _item_var_0:
                    _items.append(_item_var_0.to_dict())
            _dict['0'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in var_1 (list)
        _items = []
        if self.var_1:
            for _item_var_1 in self.var_1:
                if _item_var_1:
                    _items.append(_item_var_1.to_dict())
            _dict['1'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in var_2 (list)
        _items = []
        if self.var_2:
            for _item_var_2 in self.var_2:
                if _item_var_2:
                    _items.append(_item_var_2.to_dict())
            _dict['2'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in var_3 (list)
        _items = []
        if self.var_3:
            for _item_var_3 in self.var_3:
                if _item_var_3:
                    _items.append(_item_var_3.to_dict())
            _dict['3'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in var_4 (list)
        _items = []
        if self.var_4:
            for _item_var_4 in self.var_4:
                if _item_var_4:
                    _items.append(_item_var_4.to_dict())
            _dict['4'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in var_5 (list)
        _items = []
        if self.var_5:
            for _item_var_5 in self.var_5:
                if _item_var_5:
                    _items.append(_item_var_5.to_dict())
            _dict['5'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in var_6 (list)
        _items = []
        if self.var_6:
            for _item_var_6 in self.var_6:
                if _item_var_6:
                    _items.append(_item_var_6.to_dict())
            _dict['6'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchLocationRequestOpeningHours from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "0": [PatchLocationRequestOpeningHours0Inner.from_dict(_item) for _item in obj["0"]] if obj.get("0") is not None else None,
            "1": [PatchLocationRequestOpeningHours0Inner.from_dict(_item) for _item in obj["1"]] if obj.get("1") is not None else None,
            "2": [PatchLocationRequestOpeningHours0Inner.from_dict(_item) for _item in obj["2"]] if obj.get("2") is not None else None,
            "3": [PatchLocationRequestOpeningHours0Inner.from_dict(_item) for _item in obj["3"]] if obj.get("3") is not None else None,
            "4": [PatchLocationRequestOpeningHours0Inner.from_dict(_item) for _item in obj["4"]] if obj.get("4") is not None else None,
            "5": [PatchLocationRequestOpeningHours0Inner.from_dict(_item) for _item in obj["5"]] if obj.get("5") is not None else None,
            "6": [PatchLocationRequestOpeningHours0Inner.from_dict(_item) for _item in obj["6"]] if obj.get("6") is not None else None
        })
        return _obj



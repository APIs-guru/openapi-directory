# coding: utf-8

"""
    eDRV API

    edrv.io API Documentation

    The version of the OpenAPI document: v1
    Contact: hello@edrv.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.patch_location_request_address import PatchLocationRequestAddress
from openapi_client.models.patch_location_request_coordinates import PatchLocationRequestCoordinates
from openapi_client.models.patch_location_request_opening_hours import PatchLocationRequestOpeningHours
from typing import Optional, Set
from typing_extensions import Self

class PatchLocationRequest(BaseModel):
    """
    PatchLocationRequest
    """ # noqa: E501
    active: Optional[StrictBool] = True
    address: Optional[PatchLocationRequestAddress] = None
    chargestations: Optional[List[Any]] = None
    coordinates: Optional[PatchLocationRequestCoordinates] = None
    opening_hours: Optional[PatchLocationRequestOpeningHours] = Field(default=None, alias="openingHours")
    operator_name: Optional[StrictStr] = Field(default=None, alias="operatorName")
    timezone: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["active", "address", "chargestations", "coordinates", "openingHours", "operatorName", "timezone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchLocationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of coordinates
        if self.coordinates:
            _dict['coordinates'] = self.coordinates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of opening_hours
        if self.opening_hours:
            _dict['openingHours'] = self.opening_hours.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchLocationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active") if obj.get("active") is not None else True,
            "address": PatchLocationRequestAddress.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "chargestations": obj.get("chargestations"),
            "coordinates": PatchLocationRequestCoordinates.from_dict(obj["coordinates"]) if obj.get("coordinates") is not None else None,
            "openingHours": PatchLocationRequestOpeningHours.from_dict(obj["openingHours"]) if obj.get("openingHours") is not None else None,
            "operatorName": obj.get("operatorName"),
            "timezone": obj.get("timezone")
        })
        return _obj



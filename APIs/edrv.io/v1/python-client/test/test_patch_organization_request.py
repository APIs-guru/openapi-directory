# coding: utf-8

"""
    eDRV API

    edrv.io API Documentation

    The version of the OpenAPI document: v1
    Contact: hello@edrv.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.patch_organization_request import PatchOrganizationRequest

class TestPatchOrganizationRequest(unittest.TestCase):
    """PatchOrganizationRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PatchOrganizationRequest:
        """Test PatchOrganizationRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PatchOrganizationRequest`
        """
        model = PatchOrganizationRequest()
        if include_optional:
            return PatchOrganizationRequest(
                active = True,
                address = openapi_client.models.post_drivers_request_address.postDrivers_request_address(
                    city = '', 
                    country = '', 
                    postal_code = '', 
                    street_and_number = '', ),
                channels = openapi_client.models.patch_organization_request_channels.patchOrganization_request_channels(
                    slack = openapi_client.models.slack.slack(), 
                    telegram = openapi_client.models.telegram.telegram(), ),
                configurations = openapi_client.models.patch_organization_request_configurations.patchOrganization_request_configurations(
                    basic_auth_enabled = True, 
                    basic_auth_password = True, ),
                links = openapi_client.models.patch_organization_request_links.patchOrganization_request_links(
                    about = '', 
                    contact = '', 
                    privacy = '', 
                    support = '', ),
                locations = [
                    null
                    ],
                logo = '',
                name = '',
                otp = '',
                stripe_connected_account_id = '',
                stripe_country = '',
                stripe_currency = '',
                stripe_reserve_amount = 56,
                support = openapi_client.models.patch_organization_request_support.patchOrganization_request_support(
                    business_hours = '', 
                    chat = openapi_client.models.patch_organization_request_support_chat.patchOrganization_request_support_chat(
                        type = '', 
                        value = '', ), 
                    contact_number = '', 
                    email = '', ),
                support_chat = openapi_client.models.patch_organization_request_support_chat.patchOrganization_request_supportChat(
                    id = '', 
                    name = '', ),
                theme = openapi_client.models.patch_organization_request_theme.patchOrganization_request_theme(
                    colors = openapi_client.models.patch_organization_request_theme_colors.patchOrganization_request_theme_colors(
                        primary = '', 
                        secondary = '', ), )
            )
        else:
            return PatchOrganizationRequest(
        )
        """

    def testPatchOrganizationRequest(self):
        """Test PatchOrganizationRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Growth Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class RewindTimeSeriesResponse(BaseModel):
    """
    RewindTimeSeriesResponse
    """ # noqa: E501
    customer_error: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="customerError")
    error_diff: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="errorDiff")
    icue_error: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="icueError")
    time_series: Optional[StrictStr] = Field(default=None, alias="timeSeries")
    total_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalCost")
    use_icue: Optional[StrictBool] = Field(default=None, alias="useIcue")
    __properties: ClassVar[List[str]] = ["customerError", "errorDiff", "icueError", "timeSeries", "totalCost", "useIcue"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RewindTimeSeriesResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if customer_error (nullable) is None
        # and model_fields_set contains the field
        if self.customer_error is None and "customer_error" in self.model_fields_set:
            _dict['customerError'] = None

        # set to None if error_diff (nullable) is None
        # and model_fields_set contains the field
        if self.error_diff is None and "error_diff" in self.model_fields_set:
            _dict['errorDiff'] = None

        # set to None if time_series (nullable) is None
        # and model_fields_set contains the field
        if self.time_series is None and "time_series" in self.model_fields_set:
            _dict['timeSeries'] = None

        # set to None if total_cost (nullable) is None
        # and model_fields_set contains the field
        if self.total_cost is None and "total_cost" in self.model_fields_set:
            _dict['totalCost'] = None

        # set to None if use_icue (nullable) is None
        # and model_fields_set contains the field
        if self.use_icue is None and "use_icue" in self.model_fields_set:
            _dict['useIcue'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RewindTimeSeriesResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customerError": obj.get("customerError"),
            "errorDiff": obj.get("errorDiff"),
            "icueError": obj.get("icueError"),
            "timeSeries": obj.get("timeSeries"),
            "totalCost": obj.get("totalCost"),
            "useIcue": obj.get("useIcue")
        })
        return _obj



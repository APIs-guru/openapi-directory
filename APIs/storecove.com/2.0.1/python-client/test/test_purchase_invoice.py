# coding: utf-8

"""
    Storecove API

    Storecove API

    The version of the OpenAPI document: 2.0.1
    Contact: apisupport@storecove.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.purchase_invoice import PurchaseInvoice

class TestPurchaseInvoice(unittest.TestCase):
    """PurchaseInvoice unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PurchaseInvoice:
        """Test PurchaseInvoice
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PurchaseInvoice`
        """
        model = PurchaseInvoice()
        if include_optional:
            return PurchaseInvoice(
                accounting = openapi_client.models.purchase_invoice_accounting_details.PurchaseInvoiceAccountingDetails(
                    code = '', 
                    list = '', 
                    list_version = '', 
                    name = '', ),
                accounting_cost = '',
                allowance_charge = 1.337,
                allowance_charges = [
                    openapi_client.models.purchase_invoice_allowance_charge.PurchaseInvoiceAllowanceCharge(
                        amount_excluding_tax = 1.337, 
                        amount_excluding_vat = '', 
                        reason = '', 
                        tax = openapi_client.models.purchase_invoice_tax.PurchaseInvoiceTax(), 
                        vat = openapi_client.models.vat___deprecated.VAT - DEPRECATED(
                            amount = '', 
                            percentage = '', ), )
                    ],
                amount_including_vat = 1.337,
                attachments = [
                    openapi_client.models.purchase_invoice_attachment.PurchaseInvoiceAttachment(
                        content_type = '', 
                        document = '', )
                    ],
                billing_reference = '',
                buyer_reference = '',
                contract_document_reference = '',
                delivery = openapi_client.models.purchase_invoice_delivery.PurchaseInvoice Delivery(
                    actual_date = '', 
                    location = openapi_client.models.location.Location(
                        building_number = '', 
                        city = '', 
                        country = '', 
                        county = '', 
                        department = '', 
                        id = '', 
                        line1 = '', 
                        line2 = '', 
                        neighborhood = '', 
                        scheme_id = '', 
                        secondary_number = '', 
                        zip = '', ), 
                    party = openapi_client.models.purchase_invoice_party.PurchaseInvoice Party(
                        name = '', ), ),
                document = '',
                document_currency_code = '',
                document_totals = openapi_client.models.purchase_invoice_document_totals.PurchaseInvoiceDocumentTotals(
                    payable = 1.337, 
                    prepaid = 1.337, 
                    rounding = 1.337, 
                    total = 1.337, ),
                document_type = 'invoice',
                due_date = '',
                external_key = '',
                external_user_id = '',
                guid = '',
                invoice_lines = [
                    openapi_client.models.purchase_invoice_invoice_line.PurchaseInvoiceInvoiceLine(
                        accounting = openapi_client.models.purchase_invoice_accounting_details.PurchaseInvoiceAccountingDetails(
                            code = '', 
                            list = '', 
                            list_version = '', 
                            name = '', ), 
                        allowance_charge = 1.337, 
                        allowance_charge_array = [
                            openapi_client.models.purchase_invoice_invoice_line_allowance_charge.PurchaseInvoiceInvoiceLineAllowanceCharge(
                                amount = 1.337, 
                                reason = '', )
                            ], 
                        allowance_charges = [
                            1.337
                            ], 
                        amount_excluding_tax = 1.337, 
                        amount_excluding_vat = 1.337, 
                        description = '', 
                        name = '', 
                        period_end = '', 
                        period_start = '', 
                        price = openapi_client.models.purchase_invoice_invoice_line_price.PurchaseInvoiceInvoiceLinePrice(
                            base_quantity = 1.337, 
                            price_amount = 1.337, ), 
                        tax = openapi_client.models.purchase_invoice_tax.PurchaseInvoiceTax(), 
                        units = openapi_client.models.purchase_invoice_invoice_line_item.PurchaseInvoiceInvoiceLineItem(
                            quantity = 1.337, 
                            unit_code = '', ), 
                        vat = openapi_client.models.vat_details.VAT Details(
                            amount = 1.337, 
                            country = '', 
                            percentage = 1.337, ), )
                    ],
                invoice_number = '',
                invoice_type = 'invoice',
                issue_date = '',
                legal_entity_id = 56,
                note = '',
                order_reference = '',
                payment_means = openapi_client.models.payment_means___deprecated.Payment Means - DEPRECATED(
                    iban = '', 
                    id = '', ),
                payment_means_array = [
                    openapi_client.models.purchase_invoice_payment_means.PurchaseInvoicePaymentMeans(
                        account = '', 
                        branch_code = '', 
                        holder = '', 
                        mandate = '', 
                        network = '', 
                        payment_id = '', 
                        type = 'BankPaymentMean', )
                    ],
                payment_means_payment_id = '',
                payment_terms_note = '',
                period_end = '',
                period_start = '',
                project_reference = '',
                sender = openapi_client.models.purchase_invoice_sender.PurchaseInvoiceSender(
                    billing_contact = openapi_client.models.purchase_invoice_sender_billing_contact.PurchaseInvoiceSenderBillingContact(
                        email = '', 
                        first_name = '', 
                        last_name = '', ), 
                    building_number = '', 
                    city = '', 
                    country = '', 
                    county = '', 
                    department = '', 
                    identifiers = [
                        openapi_client.models.peppol_identifier.PeppolIdentifier(
                            corppass = openapi_client.models.corp_pass.CorpPass(
                                client_redirect_fail_url = '012345678910', 
                                client_redirect_success_url = '012345678910', 
                                corppass_url = '012345678910', 
                                enabled = True, 
                                flow_type = 'corppass_flow_redirect', 
                                signer_email = '01', 
                                signer_name = '01', 
                                simulate_corppass = True, 
                                status = 'corppass_no_status,', ), 
                            identifier = '01', 
                            scheme = '01', 
                            superscheme = '01', )
                        ], 
                    legal_name = '', 
                    line1 = '', 
                    line2 = '', 
                    neighborhood = '', 
                    party_name = '', 
                    peppol_identifiers = openapi_client.models.peppol_identifier.PeppolIdentifier(
                        identifier = '01', 
                        scheme = '01', 
                        superscheme = '01', ), 
                    secondary_number = '', 
                    zip = '', ),
                source = 'peppol',
                sub_type = 'invoice',
                system_generated_primary_image = True,
                tax_point_date = '',
                tax_subtotals = [
                    openapi_client.models.purchase_invoice_tax_subtotal.PurchaseInvoiceTaxSubtotal(
                        amount_excluding_tax = 1.337, 
                        amount_excluding_vat = '', 
                        tax = openapi_client.models.purchase_invoice_tax.PurchaseInvoiceTax(), 
                        vat = openapi_client.models.vat___deprecated.VAT - DEPRECATED(
                            amount = '', 
                            percentage = '', ), )
                    ],
                tax_system = '',
                vat_reverse_charge = True
            )
        else:
            return PurchaseInvoice(
        )
        """

    def testPurchaseInvoice(self):
        """Test PurchaseInvoice"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

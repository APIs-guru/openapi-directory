# coding: utf-8

"""
    Storecove API

    Storecove API

    The version of the OpenAPI document: 2.0.1
    Contact: apisupport@storecove.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.receiver import Receiver

class TestReceiver(unittest.TestCase):
    """Receiver unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Receiver:
        """Test Receiver
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Receiver`
        """
        model = Receiver()
        if include_optional:
            return Receiver(
                business = openapi_client.models.business_receiver.Business Receiver(
                    legal = openapi_client.models.country_specification_identifier.CountrySpecificationIdentifier(
                        centalized_identifier_test = '', 
                        centralized = True, 
                        centralized_identifier = '', 
                        description = '', 
                        scheme = '', 
                        scheme_numercial = '', 
                        scheme_type = 'iso6523-actorid-upis', ), 
                    routing = openapi_client.models.country_specification_identifier.CountrySpecificationIdentifier(
                        centalized_identifier_test = '', 
                        centralized = True, 
                        centralized_identifier = '', 
                        description = '', 
                        scheme = '', 
                        scheme_numercial = '', 
                        scheme_type = 'iso6523-actorid-upis', ), 
                    tax = , ),
                consumer = openapi_client.models.consumer_receiver.Consumer Receiver(
                    legal = openapi_client.models.country_specification_identifier.CountrySpecificationIdentifier(
                        centalized_identifier_test = '', 
                        centralized = True, 
                        centralized_identifier = '', 
                        description = '', 
                        scheme = '', 
                        scheme_numercial = '', 
                        scheme_type = 'iso6523-actorid-upis', ), 
                    routing = openapi_client.models.country_specification_identifier.CountrySpecificationIdentifier(
                        centalized_identifier_test = '', 
                        centralized = True, 
                        centralized_identifier = '', 
                        description = '', 
                        scheme = '', 
                        scheme_numercial = '', 
                        scheme_type = 'iso6523-actorid-upis', ), 
                    tax = , ),
                government = openapi_client.models.government_receiver.Government Receiver(
                    legal = openapi_client.models.country_specification_identifier.CountrySpecificationIdentifier(
                        centalized_identifier_test = '', 
                        centralized = True, 
                        centralized_identifier = '', 
                        description = '', 
                        scheme = '', 
                        scheme_numercial = '', 
                        scheme_type = 'iso6523-actorid-upis', ), 
                    routing = openapi_client.models.country_specification_identifier.CountrySpecificationIdentifier(
                        centalized_identifier_test = '', 
                        centralized = True, 
                        centralized_identifier = '', 
                        description = '', 
                        scheme = '', 
                        scheme_numercial = '', 
                        scheme_type = 'iso6523-actorid-upis', ), 
                    tax = , )
            )
        else:
            return Receiver(
        )
        """

    def testReceiver(self):
        """Test Receiver"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

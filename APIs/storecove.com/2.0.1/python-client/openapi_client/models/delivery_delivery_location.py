# coding: utf-8

"""
    Storecove API

    Storecove API

    The version of the OpenAPI document: 2.0.1
    Contact: apisupport@storecove.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.address import Address
from typing import Optional, Set
from typing_extensions import Self

class DeliveryDeliveryLocation(BaseModel):
    """
    DeliveryDeliveryLocation
    """ # noqa: E501
    address: Optional[Address] = None
    id: Optional[Annotated[str, Field(min_length=2, strict=True)]] = Field(default=None, description="The location identifier.")
    location_name: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="The name of the delivery location. Only used for DocumentOrder.", alias="locationName")
    scheme_agency_id: Optional[StrictStr] = Field(default=None, description="DEPRECATED. The schemeAgencyId of the location identifier (e.g. 'ZZZ')", alias="schemeAgencyId")
    scheme_id: Optional[StrictStr] = Field(default=None, description="The schemeId of the location identifier (e.g. 'EAN')", alias="schemeId")
    __properties: ClassVar[List[str]] = ["address", "id", "locationName", "schemeAgencyId", "schemeId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeliveryDeliveryLocation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeliveryDeliveryLocation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": Address.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "id": obj.get("id"),
            "locationName": obj.get("locationName"),
            "schemeAgencyId": obj.get("schemeAgencyId"),
            "schemeId": obj.get("schemeId")
        })
        return _obj



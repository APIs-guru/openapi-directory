# coding: utf-8

"""
    Storecove API

    Storecove API

    The version of the OpenAPI document: 2.0.1
    Contact: apisupport@storecove.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.document_invoice_response import DocumentInvoiceResponse
from openapi_client.models.document_order import DocumentOrder
from openapi_client.models.invoice import Invoice
from openapi_client.models.raw_document_data import RawDocumentData
from typing import Optional, Set
from typing_extensions import Self

class SendableDocument(BaseModel):
    """
    The document to send.
    """ # noqa: E501
    document_type: StrictStr = Field(description="The type of document to be sent.", alias="documentType")
    invoice: Optional[Invoice] = None
    invoice_response: Optional[DocumentInvoiceResponse] = Field(default=None, alias="invoiceResponse")
    order: Optional[DocumentOrder] = None
    raw_document_data: Optional[RawDocumentData] = Field(default=None, alias="rawDocumentData")
    __properties: ClassVar[List[str]] = ["documentType", "invoice", "invoiceResponse", "order", "rawDocumentData"]

    @field_validator('document_type')
    def document_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['invoice', 'invoice_response', 'order']):
            raise ValueError("must be one of enum values ('invoice', 'invoice_response', 'order')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SendableDocument from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of invoice
        if self.invoice:
            _dict['invoice'] = self.invoice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invoice_response
        if self.invoice_response:
            _dict['invoiceResponse'] = self.invoice_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order
        if self.order:
            _dict['order'] = self.order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of raw_document_data
        if self.raw_document_data:
            _dict['rawDocumentData'] = self.raw_document_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SendableDocument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "documentType": obj.get("documentType"),
            "invoice": Invoice.from_dict(obj["invoice"]) if obj.get("invoice") is not None else None,
            "invoiceResponse": DocumentInvoiceResponse.from_dict(obj["invoiceResponse"]) if obj.get("invoiceResponse") is not None else None,
            "order": DocumentOrder.from_dict(obj["order"]) if obj.get("order") is not None else None,
            "rawDocumentData": RawDocumentData.from_dict(obj["rawDocumentData"]) if obj.get("rawDocumentData") is not None else None
        })
        return _obj



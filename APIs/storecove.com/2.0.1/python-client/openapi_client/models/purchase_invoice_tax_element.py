# coding: utf-8

"""
    Storecove API

    Storecove API

    The version of the OpenAPI document: 2.0.1
    Contact: apisupport@storecove.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PurchaseInvoiceTaxElement(BaseModel):
    """
    The tax element.
    """ # noqa: E501
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The tax amount.")
    category: Optional[StrictStr] = Field(default=None, description="The tax category.")
    category_code: Optional[StrictStr] = Field(default=None, description="Deprecated. The tax category code.")
    country: Optional[StrictStr] = Field(default=None, description="The tax country.")
    percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The tax percentage.")
    type: Optional[StrictStr] = Field(default=None, description="The tax type.")
    __properties: ClassVar[List[str]] = ["amount", "category", "category_code", "country", "percentage", "type"]

    @field_validator('category')
    def category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['standard', 'zero_rated', 'reverse_charge', 'intra_community', 'exempt', 'export', 'outside_scope', 'regulation33_exempt', 'nonregulation33_exempt', 'deemed_supply', 'srca_s', 'srca_c', 'not_registered', 'igst', 'cgst', 'sgst', 'cess', 'state_cess', 'srovr', 'srovr_rs', 'srovr_lvg', 'srlvg']):
            raise ValueError("must be one of enum values ('standard', 'zero_rated', 'reverse_charge', 'intra_community', 'exempt', 'export', 'outside_scope', 'regulation33_exempt', 'nonregulation33_exempt', 'deemed_supply', 'srca_s', 'srca_c', 'not_registered', 'igst', 'cgst', 'sgst', 'cess', 'state_cess', 'srovr', 'srovr_rs', 'srovr_lvg', 'srlvg')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VAT', 'GST']):
            raise ValueError("must be one of enum values ('VAT', 'GST')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PurchaseInvoiceTaxElement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PurchaseInvoiceTaxElement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "category": obj.get("category"),
            "category_code": obj.get("category_code"),
            "country": obj.get("country"),
            "percentage": obj.get("percentage"),
            "type": obj.get("type")
        })
        return _obj



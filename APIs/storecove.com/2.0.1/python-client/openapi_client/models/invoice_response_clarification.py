# coding: utf-8

"""
    Storecove API

    Storecove API

    The version of the OpenAPI document: 2.0.1
    Contact: apisupport@storecove.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.invoice_response_condition import InvoiceResponseCondition
from typing import Optional, Set
from typing_extensions import Self

class InvoiceResponseClarification(BaseModel):
    """
    A clarification for why a received invoice was rejected (RE) or under query (UQ) and what action to take.
    """ # noqa: E501
    clarification: Optional[StrictStr] = Field(default=None, description="A textual description of the clarification")
    clarification_code: Optional[StrictStr] = Field(default=None, description="The code for the clarification. For details see https://docs.peppol.eu/poacc/upgrade-3/codelist/OPStatusReason/ and https://docs.peppol.eu/poacc/upgrade-3/codelist/OPStatusAction/", alias="clarificationCode")
    clarification_code_type: Optional[StrictStr] = Field(default=None, description="The type of the clarification.", alias="clarificationCodeType")
    conditions: Optional[Annotated[List[InvoiceResponseCondition], Field(min_length=0)]] = Field(default=None, description="A list of conditions that triggered the error. This is only included for receiving in webhooks. You cannot currently send these conditions.")
    __properties: ClassVar[List[str]] = ["clarification", "clarificationCode", "clarificationCodeType", "conditions"]

    @field_validator('clarification_code')
    def clarification_code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NON', 'REF', 'LEG', 'REC', 'QUA', 'DEL', 'PRI', 'QTY', 'ITM', 'PAY', 'UNR', 'FIN', 'PPD', 'OTH', 'NOA', 'PIN', 'NIN', 'CNF', 'CNP', 'CNA']):
            raise ValueError("must be one of enum values ('NON', 'REF', 'LEG', 'REC', 'QUA', 'DEL', 'PRI', 'QTY', 'ITM', 'PAY', 'UNR', 'FIN', 'PPD', 'OTH', 'NOA', 'PIN', 'NIN', 'CNF', 'CNP', 'CNA')")
        return value

    @field_validator('clarification_code_type')
    def clarification_code_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OPStatusReason', 'OPStatusAction']):
            raise ValueError("must be one of enum values ('OPStatusReason', 'OPStatusAction')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvoiceResponseClarification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item_conditions in self.conditions:
                if _item_conditions:
                    _items.append(_item_conditions.to_dict())
            _dict['conditions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvoiceResponseClarification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clarification": obj.get("clarification"),
            "clarificationCode": obj.get("clarificationCode"),
            "clarificationCodeType": obj.get("clarificationCodeType"),
            "conditions": [InvoiceResponseCondition.from_dict(_item) for _item in obj["conditions"]] if obj.get("conditions") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Storecove API

    Storecove API

    The version of the OpenAPI document: 2.0.1
    Contact: apisupport@storecove.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.invoice_response_clarification import InvoiceResponseClarification
from typing import Optional, Set
from typing_extensions import Self

class DocumentInvoiceResponse(BaseModel):
    """
    The invoice response to send or received.
    """ # noqa: E501
    clarifications: Optional[Annotated[List[InvoiceResponseClarification], Field(min_length=0)]] = Field(default=None, description="A list of clarifications why a received invoice was rejected (RE) or under query (UQ) and what action to take.")
    effective_date: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The date when the status became effective. Format: yyyy-mm-dd.", alias="effectiveDate")
    note: Optional[StrictStr] = Field(default=None, description="A note to add to the invoice reponse")
    response_code: StrictStr = Field(description="The response code. For details see https://docs.peppol.eu/poacc/upgrade-3/codelist/UNCL4343-T111/", alias="responseCode")
    __properties: ClassVar[List[str]] = ["clarifications", "effectiveDate", "note", "responseCode"]

    @field_validator('effective_date')
    def effective_date_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{4}-[0-9]{2}-[0-9]{2}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/")
        return value

    @field_validator('response_code')
    def response_code_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['AB', 'IP', 'UQ', 'CA', 'RE', 'AP', 'PD']):
            raise ValueError("must be one of enum values ('AB', 'IP', 'UQ', 'CA', 'RE', 'AP', 'PD')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentInvoiceResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in clarifications (list)
        _items = []
        if self.clarifications:
            for _item_clarifications in self.clarifications:
                if _item_clarifications:
                    _items.append(_item_clarifications.to_dict())
            _dict['clarifications'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentInvoiceResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clarifications": [InvoiceResponseClarification.from_dict(_item) for _item in obj["clarifications"]] if obj.get("clarifications") is not None else None,
            "effectiveDate": obj.get("effectiveDate"),
            "note": obj.get("note"),
            "responseCode": obj.get("responseCode")
        })
        return _obj



# coding: utf-8

"""
    Storecove API

    Storecove API

    The version of the OpenAPI document: 2.0.1
    Contact: apisupport@storecove.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.attachment import Attachment
from openapi_client.models.invoice import Invoice
from openapi_client.models.invoice_data import InvoiceData
from openapi_client.models.invoice_recipient import InvoiceRecipient
from openapi_client.models.routing import Routing
from typing import Optional, Set
from typing_extensions import Self

class InvoiceSubmission(BaseModel):
    """
    DEPRECATED. The invoice you want Storecove to process, with some meta-data.
    """ # noqa: E501
    attachments: Optional[Annotated[List[Attachment], Field(max_length=10)]] = Field(default=None, description="An array of attachments. You may provide up to 10 attchments, but the total size must not exceed 10MB after Base64 encoding.")
    create_primary_image: Optional[StrictBool] = Field(default=None, description="DEPRECATED. In the future we will no longer support creating PDF invoices. Whether or not to create a primary image (PDF) if one is not provided. For customers who started from December 1st 2022, the default is false. For customers who started before that, the default is true.", alias="createPrimaryImage")
    document: Optional[StrictStr] = Field(default=None, description="DEPRECATED. Use attachments.")
    document_url: Optional[StrictStr] = Field(default=None, description="DEPRECATED. Use attachments.", alias="documentUrl")
    idempotency_guid: Optional[Annotated[str, Field(min_length=36, strict=True, max_length=36)]] = Field(default=None, description="A guid that you generated for this InvoiceSubmission to achieve idempotency. If you submit multiple documents with the same idempotencyGuid, only the first one will be processed.", alias="idempotencyGuid")
    invoice: Optional[Invoice] = None
    invoice_data: Optional[InvoiceData] = Field(default=None, alias="invoiceData")
    invoice_recipient: Optional[InvoiceRecipient] = Field(default=None, alias="invoiceRecipient")
    legal_entity_id: Optional[StrictInt] = Field(default=None, description="The id of the LegalEntity this invoice should be sent for.", alias="legalEntityId")
    legal_supplier_id: Optional[StrictInt] = Field(default=None, description="DEPRECATED. Use legalEntityId", alias="legalSupplierId")
    mode: Optional[StrictStr] = Field(default=None, description="DEPRECATED.")
    routing: Optional[Routing] = None
    supplier_id: Optional[StrictInt] = Field(default=None, description="DEPRECATED.", alias="supplierId")
    __properties: ClassVar[List[str]] = ["attachments", "createPrimaryImage", "document", "documentUrl", "idempotencyGuid", "invoice", "invoiceData", "invoiceRecipient", "legalEntityId", "legalSupplierId", "mode", "routing", "supplierId"]

    @field_validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['direct']):
            raise ValueError("must be one of enum values ('direct')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvoiceSubmission from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of invoice
        if self.invoice:
            _dict['invoice'] = self.invoice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invoice_data
        if self.invoice_data:
            _dict['invoiceData'] = self.invoice_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invoice_recipient
        if self.invoice_recipient:
            _dict['invoiceRecipient'] = self.invoice_recipient.to_dict()
        # override the default output from pydantic by calling `to_dict()` of routing
        if self.routing:
            _dict['routing'] = self.routing.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvoiceSubmission from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attachments": [Attachment.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "createPrimaryImage": obj.get("createPrimaryImage"),
            "document": obj.get("document"),
            "documentUrl": obj.get("documentUrl"),
            "idempotencyGuid": obj.get("idempotencyGuid"),
            "invoice": Invoice.from_dict(obj["invoice"]) if obj.get("invoice") is not None else None,
            "invoiceData": InvoiceData.from_dict(obj["invoiceData"]) if obj.get("invoiceData") is not None else None,
            "invoiceRecipient": InvoiceRecipient.from_dict(obj["invoiceRecipient"]) if obj.get("invoiceRecipient") is not None else None,
            "legalEntityId": obj.get("legalEntityId"),
            "legalSupplierId": obj.get("legalSupplierId"),
            "mode": obj.get("mode"),
            "routing": Routing.from_dict(obj["routing"]) if obj.get("routing") is not None else None,
            "supplierId": obj.get("supplierId")
        })
        return _obj



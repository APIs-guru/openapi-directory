# coding: utf-8

"""
    Storecove API

    Storecove API

    The version of the OpenAPI document: 2.0.1
    Contact: apisupport@storecove.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.delivery_delivery_location import DeliveryDeliveryLocation
from openapi_client.models.delivery_party import DeliveryParty
from typing import Optional, Set
from typing_extensions import Self

class Delivery(BaseModel):
    """
    Delivery
    """ # noqa: E501
    actual_date: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The actual date of the delivery. Used only for Invoice", alias="actualDate")
    delivery_location: Optional[DeliveryDeliveryLocation] = Field(default=None, alias="deliveryLocation")
    delivery_party: Optional[DeliveryParty] = Field(default=None, alias="deliveryParty")
    delivery_party_name: Optional[StrictStr] = Field(default=None, description="Use deliveryParty. The name of the party that took delivery. Used only for Invoice", alias="deliveryPartyName")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=1, description="The quantity of the delivery. Used only for Invoice")
    requested_delivery_period: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The requested delivery period. Used only for DocumentOrder.", alias="requestedDeliveryPeriod")
    shipping_marks: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="A text that the buyer requests to be printed on the packing labels. Used only for DocumentOrder.", alias="shippingMarks")
    __properties: ClassVar[List[str]] = ["actualDate", "deliveryLocation", "deliveryParty", "deliveryPartyName", "quantity", "requestedDeliveryPeriod", "shippingMarks"]

    @field_validator('actual_date')
    def actual_date_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{4}-[0-9]{2}-[0-9]{2}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/")
        return value

    @field_validator('requested_delivery_period')
    def requested_delivery_period_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{4}-[0-9]{2}-[0-9]{2} - [0-9]{4}-[0-9]{2}-[0-9]{2}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-[0-9]{2}-[0-9]{2} - [0-9]{4}-[0-9]{2}-[0-9]{2}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Delivery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of delivery_location
        if self.delivery_location:
            _dict['deliveryLocation'] = self.delivery_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delivery_party
        if self.delivery_party:
            _dict['deliveryParty'] = self.delivery_party.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Delivery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actualDate": obj.get("actualDate"),
            "deliveryLocation": DeliveryDeliveryLocation.from_dict(obj["deliveryLocation"]) if obj.get("deliveryLocation") is not None else None,
            "deliveryParty": DeliveryParty.from_dict(obj["deliveryParty"]) if obj.get("deliveryParty") is not None else None,
            "deliveryPartyName": obj.get("deliveryPartyName"),
            "quantity": obj.get("quantity") if obj.get("quantity") is not None else 1,
            "requestedDeliveryPeriod": obj.get("requestedDeliveryPeriod"),
            "shippingMarks": obj.get("shippingMarks")
        })
        return _obj



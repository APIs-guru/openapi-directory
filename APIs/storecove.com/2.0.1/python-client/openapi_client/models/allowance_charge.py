# coding: utf-8

"""
    Storecove API

    Storecove API

    The version of the OpenAPI document: 2.0.1
    Contact: apisupport@storecove.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.tax import Tax
from typing import Optional, Set
from typing_extensions import Self

class AllowanceCharge(BaseModel):
    """
    AllowanceCharge
    """ # noqa: E501
    amount_excluding_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount for the allowance or charge, excluding tax.", alias="amountExcludingTax")
    amount_excluding_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="DEPRECATED. Use amountExcludingTax. The amount for the allowance or charge, excluding VAT.", alias="amountExcludingVat")
    amount_including_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount for the allowance or charge, including tax.", alias="amountIncludingTax")
    base_amount_excluding_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The base amount for the allowance or charge, excluding tax.", alias="baseAmountExcludingTax")
    base_amount_including_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The base amount for the allowance or charge, including tax.", alias="baseAmountIncludingTax")
    reason: Optional[StrictStr] = Field(default='Agreed settlement', description="The reason for the allowance or charge, free text")
    reason_code: Optional[StrictStr] = Field(default=None, description="Do not use. Contact Storecove first if you want to use this field.", alias="reasonCode")
    tax: Optional[Tax] = None
    taxes_duties_fees: Optional[Annotated[List[Tax], Field(min_length=0)]] = Field(default=None, description="An array of taxes, duties and fees for this invoice line. At this moment, multiple Tax items is allowed only for IN (India) and US (USA) taxes. All other countries can only have a single Tax item in this array.", alias="taxesDutiesFees")
    __properties: ClassVar[List[str]] = ["amountExcludingTax", "amountExcludingVat", "amountIncludingTax", "baseAmountExcludingTax", "baseAmountIncludingTax", "reason", "reasonCode", "tax", "taxesDutiesFees"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AllowanceCharge from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tax
        if self.tax:
            _dict['tax'] = self.tax.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in taxes_duties_fees (list)
        _items = []
        if self.taxes_duties_fees:
            for _item_taxes_duties_fees in self.taxes_duties_fees:
                if _item_taxes_duties_fees:
                    _items.append(_item_taxes_duties_fees.to_dict())
            _dict['taxesDutiesFees'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AllowanceCharge from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amountExcludingTax": obj.get("amountExcludingTax"),
            "amountExcludingVat": obj.get("amountExcludingVat"),
            "amountIncludingTax": obj.get("amountIncludingTax"),
            "baseAmountExcludingTax": obj.get("baseAmountExcludingTax"),
            "baseAmountIncludingTax": obj.get("baseAmountIncludingTax"),
            "reason": obj.get("reason") if obj.get("reason") is not None else 'Agreed settlement',
            "reasonCode": obj.get("reasonCode"),
            "tax": Tax.from_dict(obj["tax"]) if obj.get("tax") is not None else None,
            "taxesDutiesFees": [Tax.from_dict(_item) for _item in obj["taxesDutiesFees"]] if obj.get("taxesDutiesFees") is not None else None
        })
        return _obj



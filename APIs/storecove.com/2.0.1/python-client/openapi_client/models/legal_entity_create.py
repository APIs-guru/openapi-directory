# coding: utf-8

"""
    Storecove API

    Storecove API

    The version of the OpenAPI document: 2.0.1
    Contact: apisupport@storecove.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.country import Country
from openapi_client.models.rea import Rea
from typing import Optional, Set
from typing_extensions import Self

class LegalEntityCreate(BaseModel):
    """
    LegalEntityCreate
    """ # noqa: E501
    advertisements: Optional[List[StrictStr]] = Field(default=None, description="A list of document types to advertise. Use if this LegalEntity needs the ability to receive more than only invoice documents.")
    city: Annotated[str, Field(min_length=2, strict=True, max_length=64)] = Field(description="The city.")
    country: Country
    county: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="County, if applicable")
    line1: Annotated[str, Field(min_length=2, strict=True, max_length=192)] = Field(description="The first address line.")
    line2: Optional[Annotated[str, Field(strict=True, max_length=192)]] = Field(default=None, description="The second address line, if applicable")
    party_name: Annotated[str, Field(min_length=2, strict=True, max_length=64)] = Field(description="The name of the company.")
    public: Optional[StrictBool] = Field(default=True, description="Whether or not this LegalEntity is public. Public means it will be entered into the PEPPOL directory at https://directory.peppol.eu/")
    rea: Optional[Rea] = None
    tenant_id: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="The id of the tenant, to be used in case of single-tenant solutions that share webhook URLs. This property will included in webhook events.")
    third_party_password: Optional[Annotated[str, Field(min_length=2, strict=True, max_length=64)]] = Field(default=None, description="The password to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN LegalEntity.")
    third_party_username: Optional[Annotated[str, Field(min_length=2, strict=True, max_length=64)]] = Field(default=None, description="The username to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN LegalEntity.")
    zip: Annotated[str, Field(min_length=2, strict=True, max_length=32)] = Field(description="The zipcode.")
    __properties: ClassVar[List[str]] = ["advertisements", "city", "country", "county", "line1", "line2", "party_name", "public", "rea", "tenant_id", "third_party_password", "third_party_username", "zip"]

    @field_validator('advertisements')
    def advertisements_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['invoice', 'invoice_response', 'order', 'ordering', 'order_response']):
                raise ValueError("each list item must be one of ('invoice', 'invoice_response', 'order', 'ordering', 'order_response')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LegalEntityCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of rea
        if self.rea:
            _dict['rea'] = self.rea.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LegalEntityCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "advertisements": obj.get("advertisements"),
            "city": obj.get("city"),
            "country": obj.get("country"),
            "county": obj.get("county"),
            "line1": obj.get("line1"),
            "line2": obj.get("line2"),
            "party_name": obj.get("party_name"),
            "public": obj.get("public") if obj.get("public") is not None else True,
            "rea": Rea.from_dict(obj["rea"]) if obj.get("rea") is not None else None,
            "tenant_id": obj.get("tenant_id"),
            "third_party_password": obj.get("third_party_password"),
            "third_party_username": obj.get("third_party_username"),
            "zip": obj.get("zip")
        })
        return _obj



# coding: utf-8

"""
    Storecove API

    Storecove API

    The version of the OpenAPI document: 2.0.1
    Contact: apisupport@storecove.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Attachment(BaseModel):
    """
    A document attachment to the invoice.
    """ # noqa: E501
    description: Optional[Annotated[str, Field(strict=True, max_length=1024)]] = Field(default=None, description="A description for the file attachment.")
    document: Annotated[str, Field(min_length=5, strict=True)] = Field(description="The base64 encoded version of the document attachment.")
    document_id: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="An id for the file attachment.", alias="documentId")
    filename: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The name of the file attachment.")
    mime_type: StrictStr = Field(description="The document attachment mime type. Currently only application/pdf is allowed.", alias="mimeType")
    primary_image: Optional[StrictBool] = Field(default=False, description="Whether or not this document is a visual representation of the invoice data. Note that although this property is not yet deprecated, using value 'true' is discouraged, since the invoice data itself is leading, not the image, and including an image may lead to confusion. Peppol no longer allows including primary images.", alias="primaryImage")
    __properties: ClassVar[List[str]] = ["description", "document", "documentId", "filename", "mimeType", "primaryImage"]

    @field_validator('filename')
    def filename_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9]([a-zA-Z0-9._-]*[a-zA-Z0-9])?\.[a-zA-Z0-9_-]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]([a-zA-Z0-9._-]*[a-zA-Z0-9])?\.[a-zA-Z0-9_-]+$/")
        return value

    @field_validator('mime_type')
    def mime_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['application/pdf']):
            raise ValueError("must be one of enum values ('application/pdf')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Attachment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Attachment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "document": obj.get("document"),
            "documentId": obj.get("documentId"),
            "filename": obj.get("filename"),
            "mimeType": obj.get("mimeType"),
            "primaryImage": obj.get("primaryImage") if obj.get("primaryImage") is not None else False
        })
        return _obj



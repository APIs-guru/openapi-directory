# coding: utf-8

"""
    Storecove API

    Storecove API

    The version of the OpenAPI document: 2.0.1
    Contact: apisupport@storecove.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Location(BaseModel):
    """
    The location the goods/services were delivered to.
    """ # noqa: E501
    building_number: Optional[StrictStr] = Field(default=None, description="The building number. Used in SA.")
    city: Optional[StrictStr] = Field(default=None, description="Address city.")
    country: Optional[StrictStr] = Field(default=None, description="Address country.")
    county: Optional[StrictStr] = Field(default=None, description="Address county.")
    department: Optional[StrictStr] = Field(default=None, description="Department name.")
    id: Optional[StrictStr] = Field(default=None, description="The id of the location.")
    line1: Optional[StrictStr] = Field(default=None, description="Address line 1.")
    line2: Optional[StrictStr] = Field(default=None, description="Address line 2.")
    neighborhood: Optional[StrictStr] = Field(default=None, description="The neighborhood. Used in SA.")
    scheme_id: Optional[StrictStr] = Field(default=None, description="The scheme id for the id of the location.")
    secondary_number: Optional[StrictStr] = Field(default=None, description="The secondary number. Used in SA.")
    zip: Optional[StrictStr] = Field(default=None, description="Address zip code")
    __properties: ClassVar[List[str]] = ["building_number", "city", "country", "county", "department", "id", "line1", "line2", "neighborhood", "scheme_id", "secondary_number", "zip"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Location from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Location from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "building_number": obj.get("building_number"),
            "city": obj.get("city"),
            "country": obj.get("country"),
            "county": obj.get("county"),
            "department": obj.get("department"),
            "id": obj.get("id"),
            "line1": obj.get("line1"),
            "line2": obj.get("line2"),
            "neighborhood": obj.get("neighborhood"),
            "scheme_id": obj.get("scheme_id"),
            "secondary_number": obj.get("secondary_number"),
            "zip": obj.get("zip")
        })
        return _obj



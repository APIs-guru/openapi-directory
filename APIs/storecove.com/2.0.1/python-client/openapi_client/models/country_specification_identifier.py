# coding: utf-8

"""
    Storecove API

    Storecove API

    The version of the OpenAPI document: 2.0.1
    Contact: apisupport@storecove.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CountrySpecificationIdentifier(BaseModel):
    """
    CountrySpecificationIdentifier
    """ # noqa: E501
    centalized_identifier_test: Optional[StrictStr] = Field(default=None, description="The centralized identifier to use for routing in test cases, if the \"centralized\" proprerty is true. May not always be available depending on the country and network.")
    centralized: Optional[StrictBool] = Field(default=None, description="Whether or not the identifier represents a centralized routing identifier. This is used in SG, AT and FR where all government invoices are routed to a central accesspoint with a single identifier. This field can only be present for routing identifiers.")
    centralized_identifier: Optional[StrictStr] = Field(default=None, description="The centralized identifier to use for routing, if the \"centralized\" proprerty is true.")
    description: Optional[StrictStr] = Field(default=None, description="Identifier description.")
    scheme: Optional[StrictStr] = Field(default=None, description="The scheme of the identifier")
    scheme_numercial: Optional[StrictStr] = Field(default=None, description="The numerical version of the scheme of the identifier")
    scheme_type: Optional[StrictStr] = Field(default=None, description="The scheme type of the identifier. Currently always \"iso6523-actorid-upis\"")
    __properties: ClassVar[List[str]] = ["centalized_identifier_test", "centralized", "centralized_identifier", "description", "scheme", "scheme_numercial", "scheme_type"]

    @field_validator('scheme_type')
    def scheme_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['iso6523-actorid-upis']):
            raise ValueError("must be one of enum values ('iso6523-actorid-upis')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CountrySpecificationIdentifier from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CountrySpecificationIdentifier from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "centalized_identifier_test": obj.get("centalized_identifier_test"),
            "centralized": obj.get("centralized"),
            "centralized_identifier": obj.get("centralized_identifier"),
            "description": obj.get("description"),
            "scheme": obj.get("scheme"),
            "scheme_numercial": obj.get("scheme_numercial"),
            "scheme_type": obj.get("scheme_type")
        })
        return _obj



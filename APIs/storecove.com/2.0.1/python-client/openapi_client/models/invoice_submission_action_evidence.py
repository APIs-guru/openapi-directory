# coding: utf-8

"""
    Storecove API

    Storecove API

    The version of the OpenAPI document: 2.0.1
    Contact: apisupport@storecove.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class InvoiceSubmissionActionEvidence(BaseModel):
    """
    InvoiceSubmissionActionEvidence
    """ # noqa: E501
    receiver_response: Optional[StrictStr] = Field(default=None, description="The response the receiver sent.")
    transmission_datetime: Optional[StrictStr] = Field(default=None, description="The DateTime of the transmission, as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z.")
    transmission_result: Optional[StrictStr] = Field(default=None, description="The result of this transmission.")
    transmission_type: Optional[StrictStr] = Field(default=None, description="How the document was transmitted.")
    transmitted_document: Optional[StrictStr] = Field(default=None, description="The document that was transmitted.")
    __properties: ClassVar[List[str]] = ["receiver_response", "transmission_datetime", "transmission_result", "transmission_type", "transmitted_document"]

    @field_validator('transmission_result')
    def transmission_result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['unknown', 'accepted', 'rejected', 'send_error', 'internal_error']):
            raise ValueError("must be one of enum values ('unknown', 'accepted', 'rejected', 'send_error', 'internal_error')")
        return value

    @field_validator('transmission_type')
    def transmission_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['email', 'edi', 'as2', 'peppol', 'sandbox']):
            raise ValueError("must be one of enum values ('email', 'edi', 'as2', 'peppol', 'sandbox')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvoiceSubmissionActionEvidence from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvoiceSubmissionActionEvidence from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "receiver_response": obj.get("receiver_response"),
            "transmission_datetime": obj.get("transmission_datetime"),
            "transmission_result": obj.get("transmission_result"),
            "transmission_type": obj.get("transmission_type"),
            "transmitted_document": obj.get("transmitted_document")
        })
        return _obj



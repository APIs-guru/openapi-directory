# coding: utf-8

"""
    Storecove API

    Storecove API

    The version of the OpenAPI document: 2.0.1
    Contact: apisupport@storecove.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.country import Country
from openapi_client.models.receiver import Receiver
from openapi_client.models.sender import Sender
from typing import Optional, Set
from typing_extensions import Self

class CountrySpecification(BaseModel):
    """
    CountrySpecification
    """ # noqa: E501
    country: Optional[Country] = None
    receiver: Optional[Receiver] = None
    region: Optional[StrictStr] = Field(default=None, description="The region this country belongs to. Within this region exchanging invoices is well defined. Between regions some care needs to be taken and Storecove may help in automatically converting some items. Contact us for details of inter-regional document exchange.")
    sender: Optional[Sender] = None
    __properties: ClassVar[List[str]] = ["country", "receiver", "region", "sender"]

    @field_validator('region')
    def region_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['eu_eea', 'sg', 'aunz', 'in', 'world']):
            raise ValueError("must be one of enum values ('eu_eea', 'sg', 'aunz', 'in', 'world')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CountrySpecification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of receiver
        if self.receiver:
            _dict['receiver'] = self.receiver.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sender
        if self.sender:
            _dict['sender'] = self.sender.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CountrySpecification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "country": obj.get("country"),
            "receiver": Receiver.from_dict(obj["receiver"]) if obj.get("receiver") is not None else None,
            "region": obj.get("region"),
            "sender": Sender.from_dict(obj["sender"]) if obj.get("sender") is not None else None
        })
        return _obj



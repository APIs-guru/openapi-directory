# coding: utf-8

"""
    Storecove API

    Storecove API

    The version of the OpenAPI document: 2.0.1
    Contact: apisupport@storecove.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PurchaseInvoiceUbl(BaseModel):
    """
    PurchaseInvoiceUbl
    """ # noqa: E501
    external_key: Optional[StrictStr] = Field(default=None, description="Used for accountants. The id you specified for the organization.")
    external_user_id: Optional[StrictStr] = Field(default=None, description="Used for the embedded portal retrieval service. The external_user_id you provided when the ShopAccount was created.")
    guid: Optional[StrictStr] = Field(default=None, description="The GUID of the invoice")
    legal_entity_id: Optional[StrictInt] = Field(default=None, description="The id of the LegalEntity the invoice was received for.")
    system_generated_primary_image: Optional[StrictBool] = Field(default=None, description="Whether or not the document image (PDF) was generated by Storecove. If true, it means the invoice was received without any attachments and Storecove generated one for you. If false, the invoice will contain at least one attachment, which was received from the invoice sender.")
    tax_system: Optional[StrictStr] = Field(default=None, description="The tax system of the invoice. Either tax_line_percentages or tax_line_amounts. The first tax system means the invoice lines contain only the tax percentages and the tax amounts are included only in the tax subtotals at the invoice level and so are only calculated at the invoice level. The tax system tax_line_amounts means that in addition to the percentage, each invoice line also contains the tax amount. The tax subtotals at the invoice level are calculated as the sum of the tax of the invoice lines. The distinction between the two tax systems has has implications for rounding.")
    ubl: Optional[StrictStr] = Field(default=None, description="The Base64 encoded UBL invoice.")
    __properties: ClassVar[List[str]] = ["external_key", "external_user_id", "guid", "legal_entity_id", "system_generated_primary_image", "tax_system", "ubl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PurchaseInvoiceUbl from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PurchaseInvoiceUbl from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "external_key": obj.get("external_key"),
            "external_user_id": obj.get("external_user_id"),
            "guid": obj.get("guid"),
            "legal_entity_id": obj.get("legal_entity_id"),
            "system_generated_primary_image": obj.get("system_generated_primary_image"),
            "tax_system": obj.get("tax_system"),
            "ubl": obj.get("ubl")
        })
        return _obj



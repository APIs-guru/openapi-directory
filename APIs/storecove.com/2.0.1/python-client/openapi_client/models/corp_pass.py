# coding: utf-8

"""
    Storecove API

    Storecove API

    The version of the OpenAPI document: 2.0.1
    Contact: apisupport@storecove.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CorpPass(BaseModel):
    """
    CorpPass
    """ # noqa: E501
    client_redirect_fail_url: Optional[Annotated[str, Field(min_length=11, strict=True, max_length=255)]] = Field(default=None, description="The URL the CorpPass system will redirect to in case of a failure to perform identity verfication.")
    client_redirect_success_url: Optional[Annotated[str, Field(min_length=11, strict=True, max_length=255)]] = Field(default=None, description="The URL the CorpPass system will redirect to in case of successful identity verfication.")
    corppass_url: Optional[Annotated[str, Field(min_length=11, strict=True, max_length=255)]] = Field(default=None, description="The CorpPass redirect URL.")
    enabled: Optional[StrictBool] = Field(default=False, description="Whether or not the CorpPass flow is enabled.")
    flow_type: Optional[StrictStr] = Field(default=None, description="The CorpPass flow type.")
    signer_email: Optional[Annotated[str, Field(min_length=2, strict=True, max_length=128)]] = Field(default=None, description="The email of the person who is going to perform the CorpPass process.")
    signer_name: Optional[Annotated[str, Field(min_length=2, strict=True, max_length=64)]] = Field(default=None, description="The name of the person who is going to perform the CorpPass process.")
    simulate_corppass: Optional[StrictBool] = Field(default=False, description="Whether or not CorpPass is being simulated.")
    status: Optional[StrictStr] = Field(default=None, description="The status of the CorpPass process.")
    __properties: ClassVar[List[str]] = ["client_redirect_fail_url", "client_redirect_success_url", "corppass_url", "enabled", "flow_type", "signer_email", "signer_name", "simulate_corppass", "status"]

    @field_validator('flow_type')
    def flow_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['corppass_flow_redirect', 'corppass_flow_email']):
            raise ValueError("must be one of enum values ('corppass_flow_redirect', 'corppass_flow_email')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['corppass_no_status,', 'corppass_initiated,', 'corppass_cancelled,', 'corppass_failed,', 'corppass_succeeded']):
            raise ValueError("must be one of enum values ('corppass_no_status,', 'corppass_initiated,', 'corppass_cancelled,', 'corppass_failed,', 'corppass_succeeded')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CorpPass from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CorpPass from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "client_redirect_fail_url": obj.get("client_redirect_fail_url"),
            "client_redirect_success_url": obj.get("client_redirect_success_url"),
            "corppass_url": obj.get("corppass_url"),
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else False,
            "flow_type": obj.get("flow_type"),
            "signer_email": obj.get("signer_email"),
            "signer_name": obj.get("signer_name"),
            "simulate_corppass": obj.get("simulate_corppass") if obj.get("simulate_corppass") is not None else False,
            "status": obj.get("status")
        })
        return _obj



# coding: utf-8

"""
    Storecove API

    Storecove API

    The version of the OpenAPI document: 2.0.1
    Contact: apisupport@storecove.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.peppol_identifier import PeppolIdentifier
from openapi_client.models.purchase_invoice_sender_billing_contact import PurchaseInvoiceSenderBillingContact
from typing import Optional, Set
from typing_extensions import Self

class PurchaseInvoiceSender(BaseModel):
    """
    PurchaseInvoiceSender
    """ # noqa: E501
    billing_contact: Optional[PurchaseInvoiceSenderBillingContact] = None
    building_number: Optional[StrictStr] = Field(default=None, description="The building number. Used in SA.")
    city: Optional[StrictStr] = Field(default=None, description="The city.")
    country: Optional[StrictStr] = Field(default=None, description="The country.")
    county: Optional[StrictStr] = Field(default=None, description="The county.")
    department: Optional[StrictStr] = Field(default=None, description="The department who sent the invoice.")
    identifiers: Optional[List[PeppolIdentifier]] = Field(default=None, description="The array of identifiers for this sender.")
    legal_name: Optional[StrictStr] = Field(default=None, description="The legal name of the party who sent the invoice.")
    line1: Optional[StrictStr] = Field(default=None, description="The address")
    line2: Optional[StrictStr] = Field(default=None, description="The address, line 2")
    neighborhood: Optional[StrictStr] = Field(default=None, description="The neighborhood. Used in SA.")
    party_name: Optional[StrictStr] = Field(default=None, description="The party who sent the invoice.")
    peppol_identifiers: Optional[PeppolIdentifier] = None
    secondary_number: Optional[StrictStr] = Field(default=None, description="The secondary number. Used in SA.")
    zip: Optional[StrictStr] = Field(default=None, description="The zip code.")
    __properties: ClassVar[List[str]] = ["billing_contact", "building_number", "city", "country", "county", "department", "identifiers", "legal_name", "line1", "line2", "neighborhood", "party_name", "peppol_identifiers", "secondary_number", "zip"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PurchaseInvoiceSender from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_contact
        if self.billing_contact:
            _dict['billing_contact'] = self.billing_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in identifiers (list)
        _items = []
        if self.identifiers:
            for _item_identifiers in self.identifiers:
                if _item_identifiers:
                    _items.append(_item_identifiers.to_dict())
            _dict['identifiers'] = _items
        # override the default output from pydantic by calling `to_dict()` of peppol_identifiers
        if self.peppol_identifiers:
            _dict['peppol_identifiers'] = self.peppol_identifiers.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PurchaseInvoiceSender from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billing_contact": PurchaseInvoiceSenderBillingContact.from_dict(obj["billing_contact"]) if obj.get("billing_contact") is not None else None,
            "building_number": obj.get("building_number"),
            "city": obj.get("city"),
            "country": obj.get("country"),
            "county": obj.get("county"),
            "department": obj.get("department"),
            "identifiers": [PeppolIdentifier.from_dict(_item) for _item in obj["identifiers"]] if obj.get("identifiers") is not None else None,
            "legal_name": obj.get("legal_name"),
            "line1": obj.get("line1"),
            "line2": obj.get("line2"),
            "neighborhood": obj.get("neighborhood"),
            "party_name": obj.get("party_name"),
            "peppol_identifiers": PeppolIdentifier.from_dict(obj["peppol_identifiers"]) if obj.get("peppol_identifiers") is not None else None,
            "secondary_number": obj.get("secondary_number"),
            "zip": obj.get("zip")
        })
        return _obj



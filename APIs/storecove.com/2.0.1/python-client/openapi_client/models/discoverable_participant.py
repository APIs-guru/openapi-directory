# coding: utf-8

"""
    Storecove API

    Storecove API

    The version of the OpenAPI document: 2.0.1
    Contact: apisupport@storecove.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class DiscoverableParticipant(BaseModel):
    """
    A participant to be discovered.
    """ # noqa: E501
    document_types: Optional[List[StrictStr]] = Field(default=None, description="An array of document types to discover. The default is '[\"invoice\", \"creditnote\"]'. This is ignored when only checking existence.", alias="documentTypes")
    identifier: Annotated[str, Field(min_length=1, strict=True)] = Field(description="The actual identifier.")
    meta_scheme: Optional[Annotated[str, Field(min_length=3, strict=True)]] = Field(default='iso6523-actorid-upis', description="The meta scheme of the identifier. For Peppol this is always 'iso6523-actorid-upis'.", alias="metaScheme")
    network: Optional[Annotated[str, Field(min_length=3, strict=True)]] = Field(default='peppol', description="The network to check. Currently only 'peppol' is supported.")
    scheme: Annotated[str, Field(min_length=3, strict=True)] = Field(description="The scheme of the identifier. See <<_receiver_identifiers_list>> for a list.")
    __properties: ClassVar[List[str]] = ["documentTypes", "identifier", "metaScheme", "network", "scheme"]

    @field_validator('document_types')
    def document_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['invoice', 'creditnote', 'invoice_response', 'order', 'ordering', 'order_response']):
                raise ValueError("each list item must be one of ('invoice', 'creditnote', 'invoice_response', 'order', 'ordering', 'order_response')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DiscoverableParticipant from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DiscoverableParticipant from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "documentTypes": obj.get("documentTypes"),
            "identifier": obj.get("identifier"),
            "metaScheme": obj.get("metaScheme") if obj.get("metaScheme") is not None else 'iso6523-actorid-upis',
            "network": obj.get("network") if obj.get("network") is not None else 'peppol',
            "scheme": obj.get("scheme")
        })
        return _obj



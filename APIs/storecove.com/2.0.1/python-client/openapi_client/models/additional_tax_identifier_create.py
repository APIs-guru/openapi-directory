# coding: utf-8

"""
    Storecove API

    Storecove API

    The version of the OpenAPI document: 2.0.1
    Contact: apisupport@storecove.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class AdditionalTaxIdentifierCreate(BaseModel):
    """
    AdditionalTaxIdentifierCreate
    """ # noqa: E501
    country: Annotated[str, Field(min_length=2, strict=True, max_length=2)] = Field(description="The ISO3166 country code to use this identifier for in case of consumerTaxMode.")
    county: Optional[Annotated[str, Field(min_length=2, strict=True, max_length=2)]] = Field(default=None, description="The county/state inside the country code to use this identifier for in case of consumerTaxMode. Leave empty to create an additional tax identifier for the entire country. For India, use the two last characters of ISO 3166-2:IN (https://en.wikipedia.org/wiki/States_and_union_territories_of_India).")
    identifier: StrictStr = Field(description="The identifier.")
    scheme: Annotated[str, Field(min_length=2, strict=True, max_length=64)] = Field(description="The scheme of the identifier.")
    superscheme: Annotated[str, Field(min_length=2, strict=True, max_length=64)] = Field(description="The superscheme of the identifier. Should always be \"iso6523-actorid-upis\".")
    third_party_password: Optional[Annotated[str, Field(min_length=2, strict=True, max_length=64)]] = Field(default=None, description="The password to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN tax identifier.")
    third_party_username: Optional[Annotated[str, Field(min_length=2, strict=True, max_length=64)]] = Field(default=None, description="The username to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN tax identifier.")
    __properties: ClassVar[List[str]] = ["country", "county", "identifier", "scheme", "superscheme", "third_party_password", "third_party_username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdditionalTaxIdentifierCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdditionalTaxIdentifierCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "country": obj.get("country"),
            "county": obj.get("county"),
            "identifier": obj.get("identifier"),
            "scheme": obj.get("scheme"),
            "superscheme": obj.get("superscheme"),
            "third_party_password": obj.get("third_party_password"),
            "third_party_username": obj.get("third_party_username")
        })
        return _obj



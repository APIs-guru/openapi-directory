# coding: utf-8

"""
    Storecove API

    Storecove API

    The version of the OpenAPI document: 2.0.1
    Contact: apisupport@storecove.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DocumentSubmissionEvidenceEvidence(BaseModel):
    """
    DocumentSubmissionEvidenceEvidence
    """ # noqa: E501
    message_id: Optional[StrictStr] = Field(default=None, description="The unique message id used in the OpenPeppol SBDH.")
    receiving_accesspoint: Optional[StrictStr] = Field(default=None, description="An identification of the OpenPeppol accesspoint that the invoice was sent to.")
    remote_mta_ip: Optional[StrictStr] = Field(default=None, description="The IP address of the sending SMTP server.")
    reporting_mta: Optional[StrictStr] = Field(default=None, description="An identification for the sending SMTP.")
    smtp_response: Optional[StrictStr] = Field(default=None, description="The response of the receiving SMTP server.")
    timestamp: Optional[StrictStr] = Field(default=None, description="The timestamp of the delivery to the receiving SMTP server.")
    transmission_id: Optional[StrictStr] = Field(default=None, description="The unique id for this OpenPeppol transmission.")
    xml: Optional[StrictStr] = Field(default=None, description="The XML evidence for the transmission. This is the XML returned by the receiving OpenPeppol accesspoint.")
    __properties: ClassVar[List[str]] = ["message_id", "receiving_accesspoint", "remote_mta_ip", "reporting_mta", "smtp_response", "timestamp", "transmission_id", "xml"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentSubmissionEvidenceEvidence from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentSubmissionEvidenceEvidence from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "message_id": obj.get("message_id"),
            "receiving_accesspoint": obj.get("receiving_accesspoint"),
            "remote_mta_ip": obj.get("remote_mta_ip"),
            "reporting_mta": obj.get("reporting_mta"),
            "smtp_response": obj.get("smtp_response"),
            "timestamp": obj.get("timestamp"),
            "transmission_id": obj.get("transmission_id"),
            "xml": obj.get("xml")
        })
        return _obj



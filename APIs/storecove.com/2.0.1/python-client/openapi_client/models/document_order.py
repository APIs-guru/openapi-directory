# coding: utf-8

"""
    Storecove API

    Storecove API

    The version of the OpenAPI document: 2.0.1
    Contact: apisupport@storecove.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.allowance_charge import AllowanceCharge
from openapi_client.models.attachment import Attachment
from openapi_client.models.currency_code import CurrencyCode
from openapi_client.models.delivery import Delivery
from openapi_client.models.delivery_terms import DeliveryTerms
from openapi_client.models.order_line import OrderLine
from openapi_client.models.payment_terms import PaymentTerms
from openapi_client.models.reference import Reference
from openapi_client.models.seller_supplier_party import SellerSupplierParty
from typing import Optional, Set
from typing_extensions import Self

class DocumentOrder(BaseModel):
    """
    The order to send.
    """ # noqa: E501
    accounting_cost: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="The buyer's accounting cost centre for this document.", alias="accountingCost")
    allowance_charges: Optional[Annotated[List[AllowanceCharge], Field(min_length=0)]] = Field(default=None, description="An array of allowance charges.", alias="allowanceCharges")
    amount_including_tax: Union[StrictFloat, StrictInt] = Field(description="Total amount including Tax.", alias="amountIncludingTax")
    attachments: Optional[Annotated[List[Attachment], Field(max_length=10)]] = Field(default=None, description="An array of attachments. You may provide up to 10 attchments, but the total size must not exceed 10MB after Base64 encoding.")
    delivery: Optional[Delivery] = None
    delivery_terms: Optional[DeliveryTerms] = Field(default=None, alias="deliveryTerms")
    document_currency_code: Optional[CurrencyCode] = Field(default=None, alias="documentCurrencyCode")
    document_number: Annotated[str, Field(min_length=1, strict=True)] = Field(description="The number you assigned to the document.", alias="documentNumber")
    issue_date: Annotated[str, Field(strict=True)] = Field(description="Format: yyyy-mm-dd.", alias="issueDate")
    issue_time: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Format: hh:mm:ss±zzzz ", alias="issueTime")
    note: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="A note to add to the document")
    order_lines: Annotated[List[OrderLine], Field(min_length=1)] = Field(description="An array of order lines.", alias="orderLines")
    order_type: Optional[StrictStr] = Field(default='regular', description="The type of this order.", alias="orderType")
    payment_terms: Optional[PaymentTerms] = Field(default=None, alias="paymentTerms")
    references: Optional[Annotated[List[Reference], Field(min_length=0)]] = Field(default=None, description="An array of references to other documents. Note that many syntaxes do not support multiple references of the same type in which case they will be concatenated with ','. Also, not all syntaxes and doucments support all documentTypes.")
    seller_supplier_party: SellerSupplierParty = Field(alias="sellerSupplierParty")
    tax_system: Optional[StrictStr] = Field(default='tax_line_percentages', description="The tax system used for the invoice. The system 'tax_line_percentages' is the only one currently supported.", alias="taxSystem")
    time_zone: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Format: ±zzzz, where ±zzzz is the difference from UTC, e.g. +0100 or -0900 etc. The timezone will also apply to the document issue date if this field is provided.", alias="timeZone")
    validity_period: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The period (or specific date) to which the invoice applies. Format: yyyy-mm-dd - yyyy-mm-dd.", alias="validityPeriod")
    __properties: ClassVar[List[str]] = ["accountingCost", "allowanceCharges", "amountIncludingTax", "attachments", "delivery", "deliveryTerms", "documentCurrencyCode", "documentNumber", "issueDate", "issueTime", "note", "orderLines", "orderType", "paymentTerms", "references", "sellerSupplierParty", "taxSystem", "timeZone", "validityPeriod"]

    @field_validator('issue_date')
    def issue_date_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9]{4}-[0-9]{2}-[0-9]{2}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/")
        return value

    @field_validator('issue_time')
    def issue_time_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{2}:[0-9]{2}:[0-9]{2}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{2}:[0-9]{2}:[0-9]{2}$/")
        return value

    @field_validator('order_type')
    def order_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['regular', 'consignment']):
            raise ValueError("must be one of enum values ('regular', 'consignment')")
        return value

    @field_validator('tax_system')
    def tax_system_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['tax_line_percentages']):
            raise ValueError("must be one of enum values ('tax_line_percentages')")
        return value

    @field_validator('time_zone')
    def time_zone_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[+-]\d{4}$", value):
            raise ValueError(r"must validate the regular expression /^[+-]\d{4}$/")
        return value

    @field_validator('validity_period')
    def validity_period_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{4}-[0-9]{2}-[0-9]{2} - [0-9]{4}-[0-9]{2}-[0-9]{2}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-[0-9]{2}-[0-9]{2} - [0-9]{4}-[0-9]{2}-[0-9]{2}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentOrder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in allowance_charges (list)
        _items = []
        if self.allowance_charges:
            for _item_allowance_charges in self.allowance_charges:
                if _item_allowance_charges:
                    _items.append(_item_allowance_charges.to_dict())
            _dict['allowanceCharges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of delivery
        if self.delivery:
            _dict['delivery'] = self.delivery.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delivery_terms
        if self.delivery_terms:
            _dict['deliveryTerms'] = self.delivery_terms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in order_lines (list)
        _items = []
        if self.order_lines:
            for _item_order_lines in self.order_lines:
                if _item_order_lines:
                    _items.append(_item_order_lines.to_dict())
            _dict['orderLines'] = _items
        # override the default output from pydantic by calling `to_dict()` of payment_terms
        if self.payment_terms:
            _dict['paymentTerms'] = self.payment_terms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in references (list)
        _items = []
        if self.references:
            for _item_references in self.references:
                if _item_references:
                    _items.append(_item_references.to_dict())
            _dict['references'] = _items
        # override the default output from pydantic by calling `to_dict()` of seller_supplier_party
        if self.seller_supplier_party:
            _dict['sellerSupplierParty'] = self.seller_supplier_party.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentOrder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountingCost": obj.get("accountingCost"),
            "allowanceCharges": [AllowanceCharge.from_dict(_item) for _item in obj["allowanceCharges"]] if obj.get("allowanceCharges") is not None else None,
            "amountIncludingTax": obj.get("amountIncludingTax"),
            "attachments": [Attachment.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "delivery": Delivery.from_dict(obj["delivery"]) if obj.get("delivery") is not None else None,
            "deliveryTerms": DeliveryTerms.from_dict(obj["deliveryTerms"]) if obj.get("deliveryTerms") is not None else None,
            "documentCurrencyCode": obj.get("documentCurrencyCode"),
            "documentNumber": obj.get("documentNumber"),
            "issueDate": obj.get("issueDate"),
            "issueTime": obj.get("issueTime"),
            "note": obj.get("note"),
            "orderLines": [OrderLine.from_dict(_item) for _item in obj["orderLines"]] if obj.get("orderLines") is not None else None,
            "orderType": obj.get("orderType") if obj.get("orderType") is not None else 'regular',
            "paymentTerms": PaymentTerms.from_dict(obj["paymentTerms"]) if obj.get("paymentTerms") is not None else None,
            "references": [Reference.from_dict(_item) for _item in obj["references"]] if obj.get("references") is not None else None,
            "sellerSupplierParty": SellerSupplierParty.from_dict(obj["sellerSupplierParty"]) if obj.get("sellerSupplierParty") is not None else None,
            "taxSystem": obj.get("taxSystem") if obj.get("taxSystem") is not None else 'tax_line_percentages',
            "timeZone": obj.get("timeZone"),
            "validityPeriod": obj.get("validityPeriod")
        })
        return _obj



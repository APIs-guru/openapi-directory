# coding: utf-8

"""
    Storecove API

    Storecove API

    The version of the OpenAPI document: 2.0.1
    Contact: apisupport@storecove.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.document_submission_evidence_document import DocumentSubmissionEvidenceDocument
from openapi_client.models.document_submission_evidence_evidence import DocumentSubmissionEvidenceEvidence
from typing import Optional, Set
from typing_extensions import Self

class DocumentSubmissionEvidence(BaseModel):
    """
    DocumentSubmissionEvidence
    """ # noqa: E501
    documents: Optional[List[DocumentSubmissionEvidenceDocument]] = Field(default=None, description="An array of documents that were sent. For OpenPeppol, this is always a single document (it may contain a PDF inside). For Email, the number of documents depends on the number of attachments, which in turn depends on the country of the receiver. For email, the raw email in RFC822 format is also included.")
    evidence: Optional[DocumentSubmissionEvidenceEvidence] = None
    network: Optional[StrictStr] = Field(default=None, description="The exchange network that was used to send the document")
    receiver: Optional[StrictStr] = Field(default=None, description="The legal identifier of the receiver, or the tax identifier if there is no legal identifier.")
    sender: Optional[StrictStr] = Field(default=None, description="The legal identifier of the sender, or the tax identifier if there is no legal identifier.")
    __properties: ClassVar[List[str]] = ["documents", "evidence", "network", "receiver", "sender"]

    @field_validator('network')
    def network_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['as2', 'email', 'peppol', 'sdi']):
            raise ValueError("must be one of enum values ('as2', 'email', 'peppol', 'sdi')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentSubmissionEvidence from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in documents (list)
        _items = []
        if self.documents:
            for _item_documents in self.documents:
                if _item_documents:
                    _items.append(_item_documents.to_dict())
            _dict['documents'] = _items
        # override the default output from pydantic by calling `to_dict()` of evidence
        if self.evidence:
            _dict['evidence'] = self.evidence.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentSubmissionEvidence from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "documents": [DocumentSubmissionEvidenceDocument.from_dict(_item) for _item in obj["documents"]] if obj.get("documents") is not None else None,
            "evidence": DocumentSubmissionEvidenceEvidence.from_dict(obj["evidence"]) if obj.get("evidence") is not None else None,
            "network": obj.get("network"),
            "receiver": obj.get("receiver"),
            "sender": obj.get("sender")
        })
        return _obj



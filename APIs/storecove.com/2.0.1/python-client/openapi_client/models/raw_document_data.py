# coding: utf-8

"""
    Storecove API

    Storecove API

    The version of the OpenAPI document: 2.0.1
    Contact: apisupport@storecove.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class RawDocumentData(BaseModel):
    """
    A document to send, in base64 encoded format.
    """ # noqa: E501
    document: Annotated[str, Field(min_length=5, strict=True)] = Field(description="The base64 encoded version of the document.")
    document_type_id: Optional[StrictStr] = Field(default=None, description="The document type id of the document. Required when parse == false.", alias="documentTypeId")
    parse: Optional[StrictBool] = Field(default=True, description="*** NOTE: only parse == true is currently supported *** *** NOTE: parsing is only supported for documentType == 'invoice' *** Whether or not to parse the document. If true, the data will be extracted from the document and used to construct a new document. If false, the document will be sent as is. In this case, you must ensure the document validates without any errors against the relevant validation artifacts for that processId/documentTypeId. We automatically apply updates of the validation artificats, respecting the grace period provided by the issuer. During that period, documents that validate against either the old as well as against the new artifacts are accepted. After the grace period, your document must validate against the new artifacts. You are also responsible for making sure your receiver is able to receive the updated document.")
    parse_strategy: Optional[StrictStr] = Field(default=None, description="How to parse the document. Only needed when parse == true.", alias="parseStrategy")
    process_id: Optional[StrictStr] = Field(default=None, description="The process id of the document. Required when parse == false.", alias="processId")
    __properties: ClassVar[List[str]] = ["document", "documentTypeId", "parse", "parseStrategy", "processId"]

    @field_validator('parse_strategy')
    def parse_strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ubl', 'cii', 'idoc']):
            raise ValueError("must be one of enum values ('ubl', 'cii', 'idoc')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RawDocumentData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RawDocumentData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "document": obj.get("document"),
            "documentTypeId": obj.get("documentTypeId"),
            "parse": obj.get("parse") if obj.get("parse") is not None else True,
            "parseStrategy": obj.get("parseStrategy"),
            "processId": obj.get("processId")
        })
        return _obj



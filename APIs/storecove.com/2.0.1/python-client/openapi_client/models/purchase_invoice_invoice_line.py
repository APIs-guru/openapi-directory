# coding: utf-8

"""
    Storecove API

    Storecove API

    The version of the OpenAPI document: 2.0.1
    Contact: apisupport@storecove.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.purchase_invoice_accounting_details import PurchaseInvoiceAccountingDetails
from openapi_client.models.purchase_invoice_invoice_line_allowance_charge import PurchaseInvoiceInvoiceLineAllowanceCharge
from openapi_client.models.purchase_invoice_invoice_line_item import PurchaseInvoiceInvoiceLineItem
from openapi_client.models.purchase_invoice_invoice_line_price import PurchaseInvoiceInvoiceLinePrice
from openapi_client.models.purchase_invoice_tax import PurchaseInvoiceTax
from openapi_client.models.vat_details import VATDetails
from typing import Optional, Set
from typing_extensions import Self

class PurchaseInvoiceInvoiceLine(BaseModel):
    """
    PurchaseInvoiceInvoiceLine
    """ # noqa: E501
    accounting: Optional[PurchaseInvoiceAccountingDetails] = None
    allowance_charge: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="DEPRECATED - use allowance_charges.")
    allowance_charge_array: Optional[List[PurchaseInvoiceInvoiceLineAllowanceCharge]] = None
    allowance_charges: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="Deprecated.")
    amount_excluding_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount excluding Tax. This is equal to quantity x price_amount + âˆ‘ allowance_charges.")
    amount_excluding_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="DEPRECATED - use amount_excluding_tax. The amount excluding VAT.")
    description: Optional[StrictStr] = Field(default=None, description="The description for the invoice line.")
    name: Optional[StrictStr] = Field(default=None, description="A short name for the invoice line.")
    period_end: Optional[StrictStr] = Field(default=None, description="The end date of the period this invoice line relates to. Format \"YYYY-MM-DD\".")
    period_start: Optional[StrictStr] = Field(default=None, description="The start date of the period this invoice line relates to. Format \"YYYY-MM-DD\".")
    price: Optional[PurchaseInvoiceInvoiceLinePrice] = None
    tax: Optional[PurchaseInvoiceTax] = None
    units: Optional[PurchaseInvoiceInvoiceLineItem] = None
    vat: Optional[VATDetails] = None
    __properties: ClassVar[List[str]] = ["accounting", "allowance_charge", "allowance_charge_array", "allowance_charges", "amount_excluding_tax", "amount_excluding_vat", "description", "name", "period_end", "period_start", "price", "tax", "units", "vat"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PurchaseInvoiceInvoiceLine from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of accounting
        if self.accounting:
            _dict['accounting'] = self.accounting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in allowance_charge_array (list)
        _items = []
        if self.allowance_charge_array:
            for _item_allowance_charge_array in self.allowance_charge_array:
                if _item_allowance_charge_array:
                    _items.append(_item_allowance_charge_array.to_dict())
            _dict['allowance_charge_array'] = _items
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax
        if self.tax:
            _dict['tax'] = self.tax.to_dict()
        # override the default output from pydantic by calling `to_dict()` of units
        if self.units:
            _dict['units'] = self.units.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vat
        if self.vat:
            _dict['vat'] = self.vat.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PurchaseInvoiceInvoiceLine from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accounting": PurchaseInvoiceAccountingDetails.from_dict(obj["accounting"]) if obj.get("accounting") is not None else None,
            "allowance_charge": obj.get("allowance_charge"),
            "allowance_charge_array": [PurchaseInvoiceInvoiceLineAllowanceCharge.from_dict(_item) for _item in obj["allowance_charge_array"]] if obj.get("allowance_charge_array") is not None else None,
            "allowance_charges": obj.get("allowance_charges"),
            "amount_excluding_tax": obj.get("amount_excluding_tax"),
            "amount_excluding_vat": obj.get("amount_excluding_vat"),
            "description": obj.get("description"),
            "name": obj.get("name"),
            "period_end": obj.get("period_end"),
            "period_start": obj.get("period_start"),
            "price": PurchaseInvoiceInvoiceLinePrice.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "tax": PurchaseInvoiceTax.from_dict(obj["tax"]) if obj.get("tax") is not None else None,
            "units": PurchaseInvoiceInvoiceLineItem.from_dict(obj["units"]) if obj.get("units") is not None else None,
            "vat": VATDetails.from_dict(obj["vat"]) if obj.get("vat") is not None else None
        })
        return _obj



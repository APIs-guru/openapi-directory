# coding: utf-8

"""
    Gateway REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.end_point_meta import EndPointMeta
from openapi_client.models.header_injection_meta import HeaderInjectionMeta
from openapi_client.models.template_meta import TemplateMeta
from openapi_client.models.version_definition_extended_paths_circuit_breakers_inner import VersionDefinitionExtendedPathsCircuitBreakersInner
from openapi_client.models.version_definition_extended_paths_hard_timeouts_inner import VersionDefinitionExtendedPathsHardTimeoutsInner
from openapi_client.models.version_definition_extended_paths_size_limits_inner import VersionDefinitionExtendedPathsSizeLimitsInner
from openapi_client.models.version_definition_extended_paths_url_rewrites_inner import VersionDefinitionExtendedPathsUrlRewritesInner
from openapi_client.models.version_definition_extended_paths_virtual_inner import VersionDefinitionExtendedPathsVirtualInner
from typing import Optional, Set
from typing_extensions import Self

class VersionDefinitionExtendedPaths(BaseModel):
    """
    VersionDefinitionExtendedPaths
    """ # noqa: E501
    black_list: Optional[List[EndPointMeta]] = None
    cache: Optional[List[StrictStr]] = None
    circuit_breakers: Optional[List[VersionDefinitionExtendedPathsCircuitBreakersInner]] = None
    hard_timeouts: Optional[List[VersionDefinitionExtendedPathsHardTimeoutsInner]] = None
    ignored: Optional[List[EndPointMeta]] = None
    size_limits: Optional[List[VersionDefinitionExtendedPathsSizeLimitsInner]] = None
    transform: Optional[List[TemplateMeta]] = None
    transform_headers: Optional[List[HeaderInjectionMeta]] = None
    transform_response: Optional[List[TemplateMeta]] = None
    transform_response_headers: Optional[List[HeaderInjectionMeta]] = None
    url_rewrites: Optional[List[VersionDefinitionExtendedPathsUrlRewritesInner]] = None
    virtual: Optional[List[VersionDefinitionExtendedPathsVirtualInner]] = None
    white_list: Optional[List[EndPointMeta]] = None
    __properties: ClassVar[List[str]] = ["black_list", "cache", "circuit_breakers", "hard_timeouts", "ignored", "size_limits", "transform", "transform_headers", "transform_response", "transform_response_headers", "url_rewrites", "virtual", "white_list"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VersionDefinitionExtendedPaths from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in black_list (list)
        _items = []
        if self.black_list:
            for _item_black_list in self.black_list:
                if _item_black_list:
                    _items.append(_item_black_list.to_dict())
            _dict['black_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in circuit_breakers (list)
        _items = []
        if self.circuit_breakers:
            for _item_circuit_breakers in self.circuit_breakers:
                if _item_circuit_breakers:
                    _items.append(_item_circuit_breakers.to_dict())
            _dict['circuit_breakers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in hard_timeouts (list)
        _items = []
        if self.hard_timeouts:
            for _item_hard_timeouts in self.hard_timeouts:
                if _item_hard_timeouts:
                    _items.append(_item_hard_timeouts.to_dict())
            _dict['hard_timeouts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ignored (list)
        _items = []
        if self.ignored:
            for _item_ignored in self.ignored:
                if _item_ignored:
                    _items.append(_item_ignored.to_dict())
            _dict['ignored'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in size_limits (list)
        _items = []
        if self.size_limits:
            for _item_size_limits in self.size_limits:
                if _item_size_limits:
                    _items.append(_item_size_limits.to_dict())
            _dict['size_limits'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transform (list)
        _items = []
        if self.transform:
            for _item_transform in self.transform:
                if _item_transform:
                    _items.append(_item_transform.to_dict())
            _dict['transform'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transform_headers (list)
        _items = []
        if self.transform_headers:
            for _item_transform_headers in self.transform_headers:
                if _item_transform_headers:
                    _items.append(_item_transform_headers.to_dict())
            _dict['transform_headers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transform_response (list)
        _items = []
        if self.transform_response:
            for _item_transform_response in self.transform_response:
                if _item_transform_response:
                    _items.append(_item_transform_response.to_dict())
            _dict['transform_response'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transform_response_headers (list)
        _items = []
        if self.transform_response_headers:
            for _item_transform_response_headers in self.transform_response_headers:
                if _item_transform_response_headers:
                    _items.append(_item_transform_response_headers.to_dict())
            _dict['transform_response_headers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in url_rewrites (list)
        _items = []
        if self.url_rewrites:
            for _item_url_rewrites in self.url_rewrites:
                if _item_url_rewrites:
                    _items.append(_item_url_rewrites.to_dict())
            _dict['url_rewrites'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in virtual (list)
        _items = []
        if self.virtual:
            for _item_virtual in self.virtual:
                if _item_virtual:
                    _items.append(_item_virtual.to_dict())
            _dict['virtual'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in white_list (list)
        _items = []
        if self.white_list:
            for _item_white_list in self.white_list:
                if _item_white_list:
                    _items.append(_item_white_list.to_dict())
            _dict['white_list'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VersionDefinitionExtendedPaths from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "black_list": [EndPointMeta.from_dict(_item) for _item in obj["black_list"]] if obj.get("black_list") is not None else None,
            "cache": obj.get("cache"),
            "circuit_breakers": [VersionDefinitionExtendedPathsCircuitBreakersInner.from_dict(_item) for _item in obj["circuit_breakers"]] if obj.get("circuit_breakers") is not None else None,
            "hard_timeouts": [VersionDefinitionExtendedPathsHardTimeoutsInner.from_dict(_item) for _item in obj["hard_timeouts"]] if obj.get("hard_timeouts") is not None else None,
            "ignored": [EndPointMeta.from_dict(_item) for _item in obj["ignored"]] if obj.get("ignored") is not None else None,
            "size_limits": [VersionDefinitionExtendedPathsSizeLimitsInner.from_dict(_item) for _item in obj["size_limits"]] if obj.get("size_limits") is not None else None,
            "transform": [TemplateMeta.from_dict(_item) for _item in obj["transform"]] if obj.get("transform") is not None else None,
            "transform_headers": [HeaderInjectionMeta.from_dict(_item) for _item in obj["transform_headers"]] if obj.get("transform_headers") is not None else None,
            "transform_response": [TemplateMeta.from_dict(_item) for _item in obj["transform_response"]] if obj.get("transform_response") is not None else None,
            "transform_response_headers": [HeaderInjectionMeta.from_dict(_item) for _item in obj["transform_response_headers"]] if obj.get("transform_response_headers") is not None else None,
            "url_rewrites": [VersionDefinitionExtendedPathsUrlRewritesInner.from_dict(_item) for _item in obj["url_rewrites"]] if obj.get("url_rewrites") is not None else None,
            "virtual": [VersionDefinitionExtendedPathsVirtualInner.from_dict(_item) for _item in obj["virtual"]] if obj.get("virtual") is not None else None,
            "white_list": [EndPointMeta.from_dict(_item) for _item in obj["white_list"]] if obj.get("white_list") is not None else None
        })
        return _obj



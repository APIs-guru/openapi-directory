# coding: utf-8

"""
    Gateway REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.api_definition_auth import APIDefinitionAuth
from openapi_client.models.api_definition_definition import APIDefinitionDefinition
from openapi_client.models.api_definition_notifications import APIDefinitionNotifications
from openapi_client.models.api_definition_oauth_meta import APIDefinitionOauthMeta
from openapi_client.models.api_definition_uptime_tests import APIDefinitionUptimeTests
from openapi_client.models.api_definition_version_data import APIDefinitionVersionData
from typing import Optional, Set
from typing_extensions import Self

class APIDefinition(BaseModel):
    """
    APIDefinition
    """ # noqa: E501
    api_id: Optional[StrictStr] = None
    auth: Optional[APIDefinitionAuth] = None
    definition: Optional[APIDefinitionDefinition] = None
    enable_jwt: Optional[StrictBool] = None
    enable_signature_checking: Optional[StrictBool] = None
    hmac_allowed_clock_skew: Optional[Union[StrictFloat, StrictInt]] = None
    id: Optional[StrictStr] = None
    jwt_identity_base_field: Optional[StrictStr] = None
    jwt_policy_field_name: Optional[StrictStr] = None
    jwt_signing_method: Optional[StrictStr] = None
    jwt_source: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    notifications: Optional[APIDefinitionNotifications] = None
    oauth_meta: Optional[APIDefinitionOauthMeta] = None
    org_id: Optional[StrictStr] = None
    slug: Optional[StrictStr] = None
    uptime_tests: Optional[APIDefinitionUptimeTests] = None
    use_basic_auth: Optional[StrictBool] = None
    use_keyless: Optional[StrictBool] = None
    use_oauth2: Optional[StrictBool] = None
    version_data: Optional[APIDefinitionVersionData] = None
    __properties: ClassVar[List[str]] = ["api_id", "auth", "definition", "enable_jwt", "enable_signature_checking", "hmac_allowed_clock_skew", "id", "jwt_identity_base_field", "jwt_policy_field_name", "jwt_signing_method", "jwt_source", "name", "notifications", "oauth_meta", "org_id", "slug", "uptime_tests", "use_basic_auth", "use_keyless", "use_oauth2", "version_data"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of APIDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of auth
        if self.auth:
            _dict['auth'] = self.auth.to_dict()
        # override the default output from pydantic by calling `to_dict()` of definition
        if self.definition:
            _dict['definition'] = self.definition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of notifications
        if self.notifications:
            _dict['notifications'] = self.notifications.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oauth_meta
        if self.oauth_meta:
            _dict['oauth_meta'] = self.oauth_meta.to_dict()
        # override the default output from pydantic by calling `to_dict()` of uptime_tests
        if self.uptime_tests:
            _dict['uptime_tests'] = self.uptime_tests.to_dict()
        # override the default output from pydantic by calling `to_dict()` of version_data
        if self.version_data:
            _dict['version_data'] = self.version_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of APIDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "api_id": obj.get("api_id"),
            "auth": APIDefinitionAuth.from_dict(obj["auth"]) if obj.get("auth") is not None else None,
            "definition": APIDefinitionDefinition.from_dict(obj["definition"]) if obj.get("definition") is not None else None,
            "enable_jwt": obj.get("enable_jwt"),
            "enable_signature_checking": obj.get("enable_signature_checking"),
            "hmac_allowed_clock_skew": obj.get("hmac_allowed_clock_skew"),
            "id": obj.get("id"),
            "jwt_identity_base_field": obj.get("jwt_identity_base_field"),
            "jwt_policy_field_name": obj.get("jwt_policy_field_name"),
            "jwt_signing_method": obj.get("jwt_signing_method"),
            "jwt_source": obj.get("jwt_source"),
            "name": obj.get("name"),
            "notifications": APIDefinitionNotifications.from_dict(obj["notifications"]) if obj.get("notifications") is not None else None,
            "oauth_meta": APIDefinitionOauthMeta.from_dict(obj["oauth_meta"]) if obj.get("oauth_meta") is not None else None,
            "org_id": obj.get("org_id"),
            "slug": obj.get("slug"),
            "uptime_tests": APIDefinitionUptimeTests.from_dict(obj["uptime_tests"]) if obj.get("uptime_tests") is not None else None,
            "use_basic_auth": obj.get("use_basic_auth"),
            "use_keyless": obj.get("use_keyless"),
            "use_oauth2": obj.get("use_oauth2"),
            "version_data": APIDefinitionVersionData.from_dict(obj["version_data"]) if obj.get("version_data") is not None else None
        })
        return _obj



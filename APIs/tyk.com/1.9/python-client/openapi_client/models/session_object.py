# coding: utf-8

"""
    Gateway REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.access_rights import AccessRights
from openapi_client.models.session_object_basic_auth_data import SessionObjectBasicAuthData
from openapi_client.models.session_object_jwt_data import SessionObjectJwtData
from openapi_client.models.session_object_monitor import SessionObjectMonitor
from typing import Optional, Set
from typing_extensions import Self

class SessionObject(BaseModel):
    """
    SessionObject
    """ # noqa: E501
    access_rights: Optional[Dict[str, AccessRights]] = None
    allowance: Optional[Union[StrictFloat, StrictInt]] = None
    apply_policy_id: Optional[StrictStr] = None
    basic_auth_data: Optional[SessionObjectBasicAuthData] = None
    expires: Optional[Union[StrictFloat, StrictInt]] = None
    hmac_enabled: Optional[StrictBool] = None
    hmac_string: Optional[StrictStr] = None
    is_inactive: Optional[StrictBool] = None
    jwt_data: Optional[SessionObjectJwtData] = None
    meta_data: Optional[Dict[str, Any]] = None
    monitor: Optional[SessionObjectMonitor] = None
    oauth_client_id: Optional[StrictStr] = None
    org_id: Optional[StrictStr] = None
    per: Optional[Union[StrictFloat, StrictInt]] = None
    quota_max: Optional[Union[StrictFloat, StrictInt]] = None
    quota_remaining: Optional[Union[StrictFloat, StrictInt]] = None
    quota_renewal_rate: Optional[StrictStr] = None
    quota_renews: Optional[Union[StrictFloat, StrictInt]] = None
    rate: Optional[Union[StrictFloat, StrictInt]] = None
    tags: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["access_rights", "allowance", "apply_policy_id", "basic_auth_data", "expires", "hmac_enabled", "hmac_string", "is_inactive", "jwt_data", "meta_data", "monitor", "oauth_client_id", "org_id", "per", "quota_max", "quota_remaining", "quota_renewal_rate", "quota_renews", "rate", "tags"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SessionObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in access_rights (dict)
        _field_dict = {}
        if self.access_rights:
            for _key_access_rights in self.access_rights:
                if self.access_rights[_key_access_rights]:
                    _field_dict[_key_access_rights] = self.access_rights[_key_access_rights].to_dict()
            _dict['access_rights'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of basic_auth_data
        if self.basic_auth_data:
            _dict['basic_auth_data'] = self.basic_auth_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of jwt_data
        if self.jwt_data:
            _dict['jwt_data'] = self.jwt_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of monitor
        if self.monitor:
            _dict['monitor'] = self.monitor.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SessionObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access_rights": dict(
                (_k, AccessRights.from_dict(_v))
                for _k, _v in obj["access_rights"].items()
            )
            if obj.get("access_rights") is not None
            else None,
            "allowance": obj.get("allowance"),
            "apply_policy_id": obj.get("apply_policy_id"),
            "basic_auth_data": SessionObjectBasicAuthData.from_dict(obj["basic_auth_data"]) if obj.get("basic_auth_data") is not None else None,
            "expires": obj.get("expires"),
            "hmac_enabled": obj.get("hmac_enabled"),
            "hmac_string": obj.get("hmac_string"),
            "is_inactive": obj.get("is_inactive"),
            "jwt_data": SessionObjectJwtData.from_dict(obj["jwt_data"]) if obj.get("jwt_data") is not None else None,
            "meta_data": obj.get("meta_data"),
            "monitor": SessionObjectMonitor.from_dict(obj["monitor"]) if obj.get("monitor") is not None else None,
            "oauth_client_id": obj.get("oauth_client_id"),
            "org_id": obj.get("org_id"),
            "per": obj.get("per"),
            "quota_max": obj.get("quota_max"),
            "quota_remaining": obj.get("quota_remaining"),
            "quota_renewal_rate": obj.get("quota_renewal_rate"),
            "quota_renews": obj.get("quota_renews"),
            "rate": obj.get("rate"),
            "tags": obj.get("tags")
        })
        return _obj



# coding: utf-8

"""
    Gateway REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.api_definition_uptime_tests_cache_options import APIDefinitionUptimeTestsCacheOptions
from openapi_client.models.api_definition_uptime_tests_check_list_inner import APIDefinitionUptimeTestsCheckListInner
from openapi_client.models.api_definition_uptime_tests_config import APIDefinitionUptimeTestsConfig
from openapi_client.models.api_definition_uptime_tests_cors import APIDefinitionUptimeTestsCORS
from openapi_client.models.api_definition_uptime_tests_custom_middleware import APIDefinitionUptimeTestsCustomMiddleware
from openapi_client.models.api_definition_uptime_tests_proxy import APIDefinitionUptimeTestsProxy
from openapi_client.models.api_definition_uptime_tests_response_processors_inner import APIDefinitionUptimeTestsResponseProcessorsInner
from typing import Optional, Set
from typing_extensions import Self

class APIDefinitionUptimeTests(BaseModel):
    """
    APIDefinitionUptimeTests
    """ # noqa: E501
    cors: Optional[APIDefinitionUptimeTestsCORS] = Field(default=None, alias="CORS")
    active: Optional[StrictBool] = None
    allowed_ips: Optional[List[StrictStr]] = None
    cache_options: Optional[APIDefinitionUptimeTestsCacheOptions] = None
    check_list: Optional[List[APIDefinitionUptimeTestsCheckListInner]] = None
    config: Optional[APIDefinitionUptimeTestsConfig] = None
    custom_middleware: Optional[APIDefinitionUptimeTestsCustomMiddleware] = None
    do_not_track: Optional[StrictStr] = None
    domain: Optional[StrictStr] = None
    dont_set_quota_on_create: Optional[StrictBool] = None
    enable_batch_request_support: Optional[StrictBool] = None
    enable_ip_whitelisting: Optional[StrictBool] = None
    event_handlers: Optional[Dict[str, Any]] = None
    expire_analytics_after: Optional[Union[StrictFloat, StrictInt]] = None
    proxy: Optional[APIDefinitionUptimeTestsProxy] = None
    response_processors: Optional[List[APIDefinitionUptimeTestsResponseProcessorsInner]] = None
    session_lifetime: Optional[Union[StrictFloat, StrictInt]] = None
    tags: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["CORS", "active", "allowed_ips", "cache_options", "check_list", "config", "custom_middleware", "do_not_track", "domain", "dont_set_quota_on_create", "enable_batch_request_support", "enable_ip_whitelisting", "event_handlers", "expire_analytics_after", "proxy", "response_processors", "session_lifetime", "tags"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of APIDefinitionUptimeTests from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cors
        if self.cors:
            _dict['CORS'] = self.cors.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cache_options
        if self.cache_options:
            _dict['cache_options'] = self.cache_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in check_list (list)
        _items = []
        if self.check_list:
            for _item_check_list in self.check_list:
                if _item_check_list:
                    _items.append(_item_check_list.to_dict())
            _dict['check_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_middleware
        if self.custom_middleware:
            _dict['custom_middleware'] = self.custom_middleware.to_dict()
        # override the default output from pydantic by calling `to_dict()` of proxy
        if self.proxy:
            _dict['proxy'] = self.proxy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in response_processors (list)
        _items = []
        if self.response_processors:
            for _item_response_processors in self.response_processors:
                if _item_response_processors:
                    _items.append(_item_response_processors.to_dict())
            _dict['response_processors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of APIDefinitionUptimeTests from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CORS": APIDefinitionUptimeTestsCORS.from_dict(obj["CORS"]) if obj.get("CORS") is not None else None,
            "active": obj.get("active"),
            "allowed_ips": obj.get("allowed_ips"),
            "cache_options": APIDefinitionUptimeTestsCacheOptions.from_dict(obj["cache_options"]) if obj.get("cache_options") is not None else None,
            "check_list": [APIDefinitionUptimeTestsCheckListInner.from_dict(_item) for _item in obj["check_list"]] if obj.get("check_list") is not None else None,
            "config": APIDefinitionUptimeTestsConfig.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "custom_middleware": APIDefinitionUptimeTestsCustomMiddleware.from_dict(obj["custom_middleware"]) if obj.get("custom_middleware") is not None else None,
            "do_not_track": obj.get("do_not_track"),
            "domain": obj.get("domain"),
            "dont_set_quota_on_create": obj.get("dont_set_quota_on_create"),
            "enable_batch_request_support": obj.get("enable_batch_request_support"),
            "enable_ip_whitelisting": obj.get("enable_ip_whitelisting"),
            "event_handlers": obj.get("event_handlers"),
            "expire_analytics_after": obj.get("expire_analytics_after"),
            "proxy": APIDefinitionUptimeTestsProxy.from_dict(obj["proxy"]) if obj.get("proxy") is not None else None,
            "response_processors": [APIDefinitionUptimeTestsResponseProcessorsInner.from_dict(_item) for _item in obj["response_processors"]] if obj.get("response_processors") is not None else None,
            "session_lifetime": obj.get("session_lifetime"),
            "tags": obj.get("tags")
        })
        return _obj



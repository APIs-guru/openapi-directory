# coding: utf-8

"""
    Item API

    Please make sure you use the correct version of the APIs for your use case. To find out the appropriate version, go to the API Docs  drop down on the menu.

    The version of the OpenAPI document: 3.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBytes, StrictStr, field_validator
from typing import Optional, Tuple, Union
from typing_extensions import Annotated

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class Version3Api:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def v3do_post_multi_part(
        self,
        wm_consumer_channel_type: Annotated[StrictStr, Field(description="Channel Type")],
        wm_consumer_id: Annotated[StrictStr, Field(description="Your Consumer ID")],
        wm_sec_timestamp: Annotated[StrictStr, Field(description="Epoch timestamp")],
        wm_sec_auth_signature: Annotated[StrictStr, Field(description="Authentication signature")],
        wm_svc_name: Annotated[StrictStr, Field(description="The Service name")],
        wm_qos_correlation_id: Annotated[StrictStr, Field(description="A Transaction ID")],
        file: Annotated[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]], Field(description="Feed File to upload")],
        feed_type: Annotated[Optional[StrictStr], Field(description="Feed Type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Upload an item feed

        You can upload an item feed. If the feed successfully processed, it returns a feed ID. Use the returned feed ID to retrieve a feed status. You need your Consumer ID and the Private Key to upload an item.

        :param wm_consumer_channel_type: Channel Type (required)
        :type wm_consumer_channel_type: str
        :param wm_consumer_id: Your Consumer ID (required)
        :type wm_consumer_id: str
        :param wm_sec_timestamp: Epoch timestamp (required)
        :type wm_sec_timestamp: str
        :param wm_sec_auth_signature: Authentication signature (required)
        :type wm_sec_auth_signature: str
        :param wm_svc_name: The Service name (required)
        :type wm_svc_name: str
        :param wm_qos_correlation_id: A Transaction ID (required)
        :type wm_qos_correlation_id: str
        :param file: Feed File to upload (required)
        :type file: bytearray
        :param feed_type: Feed Type
        :type feed_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v3do_post_multi_part_serialize(
            wm_consumer_channel_type=wm_consumer_channel_type,
            wm_consumer_id=wm_consumer_id,
            wm_sec_timestamp=wm_sec_timestamp,
            wm_sec_auth_signature=wm_sec_auth_signature,
            wm_svc_name=wm_svc_name,
            wm_qos_correlation_id=wm_qos_correlation_id,
            file=file,
            feed_type=feed_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v3do_post_multi_part_with_http_info(
        self,
        wm_consumer_channel_type: Annotated[StrictStr, Field(description="Channel Type")],
        wm_consumer_id: Annotated[StrictStr, Field(description="Your Consumer ID")],
        wm_sec_timestamp: Annotated[StrictStr, Field(description="Epoch timestamp")],
        wm_sec_auth_signature: Annotated[StrictStr, Field(description="Authentication signature")],
        wm_svc_name: Annotated[StrictStr, Field(description="The Service name")],
        wm_qos_correlation_id: Annotated[StrictStr, Field(description="A Transaction ID")],
        file: Annotated[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]], Field(description="Feed File to upload")],
        feed_type: Annotated[Optional[StrictStr], Field(description="Feed Type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Upload an item feed

        You can upload an item feed. If the feed successfully processed, it returns a feed ID. Use the returned feed ID to retrieve a feed status. You need your Consumer ID and the Private Key to upload an item.

        :param wm_consumer_channel_type: Channel Type (required)
        :type wm_consumer_channel_type: str
        :param wm_consumer_id: Your Consumer ID (required)
        :type wm_consumer_id: str
        :param wm_sec_timestamp: Epoch timestamp (required)
        :type wm_sec_timestamp: str
        :param wm_sec_auth_signature: Authentication signature (required)
        :type wm_sec_auth_signature: str
        :param wm_svc_name: The Service name (required)
        :type wm_svc_name: str
        :param wm_qos_correlation_id: A Transaction ID (required)
        :type wm_qos_correlation_id: str
        :param file: Feed File to upload (required)
        :type file: bytearray
        :param feed_type: Feed Type
        :type feed_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v3do_post_multi_part_serialize(
            wm_consumer_channel_type=wm_consumer_channel_type,
            wm_consumer_id=wm_consumer_id,
            wm_sec_timestamp=wm_sec_timestamp,
            wm_sec_auth_signature=wm_sec_auth_signature,
            wm_svc_name=wm_svc_name,
            wm_qos_correlation_id=wm_qos_correlation_id,
            file=file,
            feed_type=feed_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v3do_post_multi_part_without_preload_content(
        self,
        wm_consumer_channel_type: Annotated[StrictStr, Field(description="Channel Type")],
        wm_consumer_id: Annotated[StrictStr, Field(description="Your Consumer ID")],
        wm_sec_timestamp: Annotated[StrictStr, Field(description="Epoch timestamp")],
        wm_sec_auth_signature: Annotated[StrictStr, Field(description="Authentication signature")],
        wm_svc_name: Annotated[StrictStr, Field(description="The Service name")],
        wm_qos_correlation_id: Annotated[StrictStr, Field(description="A Transaction ID")],
        file: Annotated[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]], Field(description="Feed File to upload")],
        feed_type: Annotated[Optional[StrictStr], Field(description="Feed Type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Upload an item feed

        You can upload an item feed. If the feed successfully processed, it returns a feed ID. Use the returned feed ID to retrieve a feed status. You need your Consumer ID and the Private Key to upload an item.

        :param wm_consumer_channel_type: Channel Type (required)
        :type wm_consumer_channel_type: str
        :param wm_consumer_id: Your Consumer ID (required)
        :type wm_consumer_id: str
        :param wm_sec_timestamp: Epoch timestamp (required)
        :type wm_sec_timestamp: str
        :param wm_sec_auth_signature: Authentication signature (required)
        :type wm_sec_auth_signature: str
        :param wm_svc_name: The Service name (required)
        :type wm_svc_name: str
        :param wm_qos_correlation_id: A Transaction ID (required)
        :type wm_qos_correlation_id: str
        :param file: Feed File to upload (required)
        :type file: bytearray
        :param feed_type: Feed Type
        :type feed_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v3do_post_multi_part_serialize(
            wm_consumer_channel_type=wm_consumer_channel_type,
            wm_consumer_id=wm_consumer_id,
            wm_sec_timestamp=wm_sec_timestamp,
            wm_sec_auth_signature=wm_sec_auth_signature,
            wm_svc_name=wm_svc_name,
            wm_qos_correlation_id=wm_qos_correlation_id,
            file=file,
            feed_type=feed_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v3do_post_multi_part_serialize(
        self,
        wm_consumer_channel_type,
        wm_consumer_id,
        wm_sec_timestamp,
        wm_sec_auth_signature,
        wm_svc_name,
        wm_qos_correlation_id,
        file,
        feed_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if feed_type is not None:
            
            _query_params.append(('feedType', feed_type))
            
        # process the header parameters
        if wm_consumer_channel_type is not None:
            _header_params['WM_CONSUMER.CHANNEL.TYPE'] = wm_consumer_channel_type
        if wm_consumer_id is not None:
            _header_params['WM_CONSUMER.ID'] = wm_consumer_id
        if wm_sec_timestamp is not None:
            _header_params['WM_SEC.TIMESTAMP'] = wm_sec_timestamp
        if wm_sec_auth_signature is not None:
            _header_params['WM_SEC.AUTH_SIGNATURE'] = wm_sec_auth_signature
        if wm_svc_name is not None:
            _header_params['WM_SVC.NAME'] = wm_svc_name
        if wm_qos_correlation_id is not None:
            _header_params['WM_QOS.CORRELATION_ID'] = wm_qos_correlation_id
        # process the form parameters
        if file is not None:
            _files['file'] = file
        # process the body parameter



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v3/feeds',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v3get_all_items_status(
        self,
        feed_id: Annotated[StrictStr, Field(description="The feed ID")],
        wm_consumer_channel_type: Annotated[StrictStr, Field(description="Channel Type")],
        wm_consumer_id: Annotated[StrictStr, Field(description="Your Consumer ID")],
        wm_sec_timestamp: Annotated[StrictStr, Field(description="Epoch timestamp")],
        wm_sec_auth_signature: Annotated[StrictStr, Field(description="Authentication signature")],
        wm_svc_name: Annotated[StrictStr, Field(description="The Service name")],
        wm_qos_correlation_id: Annotated[StrictStr, Field(description="A Transaction ID")],
        include_details: Annotated[Optional[StrictStr], Field(description="Includes details of each entity in the feed. Do not set this parameter to true.")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="The number of entities to be returned. It cannot be more than 50 entities. Use it only when the includeDetails is set to true.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get status of an item within a feed

        You can display the status of all items within a feed. Use the feed ID returned from the upload an item API.

        :param feed_id: The feed ID (required)
        :type feed_id: str
        :param wm_consumer_channel_type: Channel Type (required)
        :type wm_consumer_channel_type: str
        :param wm_consumer_id: Your Consumer ID (required)
        :type wm_consumer_id: str
        :param wm_sec_timestamp: Epoch timestamp (required)
        :type wm_sec_timestamp: str
        :param wm_sec_auth_signature: Authentication signature (required)
        :type wm_sec_auth_signature: str
        :param wm_svc_name: The Service name (required)
        :type wm_svc_name: str
        :param wm_qos_correlation_id: A Transaction ID (required)
        :type wm_qos_correlation_id: str
        :param include_details: Includes details of each entity in the feed. Do not set this parameter to true.
        :type include_details: str
        :param offset: The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.
        :type offset: str
        :param limit: The number of entities to be returned. It cannot be more than 50 entities. Use it only when the includeDetails is set to true.
        :type limit: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v3get_all_items_status_serialize(
            feed_id=feed_id,
            wm_consumer_channel_type=wm_consumer_channel_type,
            wm_consumer_id=wm_consumer_id,
            wm_sec_timestamp=wm_sec_timestamp,
            wm_sec_auth_signature=wm_sec_auth_signature,
            wm_svc_name=wm_svc_name,
            wm_qos_correlation_id=wm_qos_correlation_id,
            include_details=include_details,
            offset=offset,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v3get_all_items_status_with_http_info(
        self,
        feed_id: Annotated[StrictStr, Field(description="The feed ID")],
        wm_consumer_channel_type: Annotated[StrictStr, Field(description="Channel Type")],
        wm_consumer_id: Annotated[StrictStr, Field(description="Your Consumer ID")],
        wm_sec_timestamp: Annotated[StrictStr, Field(description="Epoch timestamp")],
        wm_sec_auth_signature: Annotated[StrictStr, Field(description="Authentication signature")],
        wm_svc_name: Annotated[StrictStr, Field(description="The Service name")],
        wm_qos_correlation_id: Annotated[StrictStr, Field(description="A Transaction ID")],
        include_details: Annotated[Optional[StrictStr], Field(description="Includes details of each entity in the feed. Do not set this parameter to true.")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="The number of entities to be returned. It cannot be more than 50 entities. Use it only when the includeDetails is set to true.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get status of an item within a feed

        You can display the status of all items within a feed. Use the feed ID returned from the upload an item API.

        :param feed_id: The feed ID (required)
        :type feed_id: str
        :param wm_consumer_channel_type: Channel Type (required)
        :type wm_consumer_channel_type: str
        :param wm_consumer_id: Your Consumer ID (required)
        :type wm_consumer_id: str
        :param wm_sec_timestamp: Epoch timestamp (required)
        :type wm_sec_timestamp: str
        :param wm_sec_auth_signature: Authentication signature (required)
        :type wm_sec_auth_signature: str
        :param wm_svc_name: The Service name (required)
        :type wm_svc_name: str
        :param wm_qos_correlation_id: A Transaction ID (required)
        :type wm_qos_correlation_id: str
        :param include_details: Includes details of each entity in the feed. Do not set this parameter to true.
        :type include_details: str
        :param offset: The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.
        :type offset: str
        :param limit: The number of entities to be returned. It cannot be more than 50 entities. Use it only when the includeDetails is set to true.
        :type limit: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v3get_all_items_status_serialize(
            feed_id=feed_id,
            wm_consumer_channel_type=wm_consumer_channel_type,
            wm_consumer_id=wm_consumer_id,
            wm_sec_timestamp=wm_sec_timestamp,
            wm_sec_auth_signature=wm_sec_auth_signature,
            wm_svc_name=wm_svc_name,
            wm_qos_correlation_id=wm_qos_correlation_id,
            include_details=include_details,
            offset=offset,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v3get_all_items_status_without_preload_content(
        self,
        feed_id: Annotated[StrictStr, Field(description="The feed ID")],
        wm_consumer_channel_type: Annotated[StrictStr, Field(description="Channel Type")],
        wm_consumer_id: Annotated[StrictStr, Field(description="Your Consumer ID")],
        wm_sec_timestamp: Annotated[StrictStr, Field(description="Epoch timestamp")],
        wm_sec_auth_signature: Annotated[StrictStr, Field(description="Authentication signature")],
        wm_svc_name: Annotated[StrictStr, Field(description="The Service name")],
        wm_qos_correlation_id: Annotated[StrictStr, Field(description="A Transaction ID")],
        include_details: Annotated[Optional[StrictStr], Field(description="Includes details of each entity in the feed. Do not set this parameter to true.")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="The number of entities to be returned. It cannot be more than 50 entities. Use it only when the includeDetails is set to true.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get status of an item within a feed

        You can display the status of all items within a feed. Use the feed ID returned from the upload an item API.

        :param feed_id: The feed ID (required)
        :type feed_id: str
        :param wm_consumer_channel_type: Channel Type (required)
        :type wm_consumer_channel_type: str
        :param wm_consumer_id: Your Consumer ID (required)
        :type wm_consumer_id: str
        :param wm_sec_timestamp: Epoch timestamp (required)
        :type wm_sec_timestamp: str
        :param wm_sec_auth_signature: Authentication signature (required)
        :type wm_sec_auth_signature: str
        :param wm_svc_name: The Service name (required)
        :type wm_svc_name: str
        :param wm_qos_correlation_id: A Transaction ID (required)
        :type wm_qos_correlation_id: str
        :param include_details: Includes details of each entity in the feed. Do not set this parameter to true.
        :type include_details: str
        :param offset: The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.
        :type offset: str
        :param limit: The number of entities to be returned. It cannot be more than 50 entities. Use it only when the includeDetails is set to true.
        :type limit: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v3get_all_items_status_serialize(
            feed_id=feed_id,
            wm_consumer_channel_type=wm_consumer_channel_type,
            wm_consumer_id=wm_consumer_id,
            wm_sec_timestamp=wm_sec_timestamp,
            wm_sec_auth_signature=wm_sec_auth_signature,
            wm_svc_name=wm_svc_name,
            wm_qos_correlation_id=wm_qos_correlation_id,
            include_details=include_details,
            offset=offset,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v3get_all_items_status_serialize(
        self,
        feed_id,
        wm_consumer_channel_type,
        wm_consumer_id,
        wm_sec_timestamp,
        wm_sec_auth_signature,
        wm_svc_name,
        wm_qos_correlation_id,
        include_details,
        offset,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if feed_id is not None:
            _path_params['feedId'] = feed_id
        # process the query parameters
        if include_details is not None:
            
            _query_params.append(('includeDetails', include_details))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        if wm_consumer_channel_type is not None:
            _header_params['WM_CONSUMER.CHANNEL.TYPE'] = wm_consumer_channel_type
        if wm_consumer_id is not None:
            _header_params['WM_CONSUMER.ID'] = wm_consumer_id
        if wm_sec_timestamp is not None:
            _header_params['WM_SEC.TIMESTAMP'] = wm_sec_timestamp
        if wm_sec_auth_signature is not None:
            _header_params['WM_SEC.AUTH_SIGNATURE'] = wm_sec_auth_signature
        if wm_svc_name is not None:
            _header_params['WM_SVC.NAME'] = wm_svc_name
        if wm_qos_correlation_id is not None:
            _header_params['WM_QOS.CORRELATION_ID'] = wm_qos_correlation_id
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v3/feeds/{feedId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v3get_feed_item_status(
        self,
        wm_consumer_channel_type: Annotated[StrictStr, Field(description="Channel Type")],
        wm_consumer_id: Annotated[StrictStr, Field(description="Your Consumer ID")],
        wm_sec_timestamp: Annotated[StrictStr, Field(description="Epoch timestamp")],
        wm_sec_auth_signature: Annotated[StrictStr, Field(description="Authentication signature")],
        wm_svc_name: Annotated[StrictStr, Field(description="The Service name")],
        wm_qos_correlation_id: Annotated[StrictStr, Field(description="A Transaction ID")],
        feed_id: Annotated[Optional[StrictStr], Field(description="The feed ID.")] = None,
        include_details: Annotated[Optional[StrictStr], Field(description="Includes the status details for each item in the feed. Do not set this parameter to true as discrepancies may appear between the header and the item details (the item details may be incorrect). Instead, use the Get a feedItems status.")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="The number of items to be returned. Cannot be more than 50 items. Use it only when the includeDetails is set to true.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get status of an item feed

        You can display the status of an item within a feed. Use the feed ID returned from the upload an item API.

        :param wm_consumer_channel_type: Channel Type (required)
        :type wm_consumer_channel_type: str
        :param wm_consumer_id: Your Consumer ID (required)
        :type wm_consumer_id: str
        :param wm_sec_timestamp: Epoch timestamp (required)
        :type wm_sec_timestamp: str
        :param wm_sec_auth_signature: Authentication signature (required)
        :type wm_sec_auth_signature: str
        :param wm_svc_name: The Service name (required)
        :type wm_svc_name: str
        :param wm_qos_correlation_id: A Transaction ID (required)
        :type wm_qos_correlation_id: str
        :param feed_id: The feed ID.
        :type feed_id: str
        :param include_details: Includes the status details for each item in the feed. Do not set this parameter to true as discrepancies may appear between the header and the item details (the item details may be incorrect). Instead, use the Get a feedItems status.
        :type include_details: str
        :param offset: The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.
        :type offset: str
        :param limit: The number of items to be returned. Cannot be more than 50 items. Use it only when the includeDetails is set to true.
        :type limit: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v3get_feed_item_status_serialize(
            wm_consumer_channel_type=wm_consumer_channel_type,
            wm_consumer_id=wm_consumer_id,
            wm_sec_timestamp=wm_sec_timestamp,
            wm_sec_auth_signature=wm_sec_auth_signature,
            wm_svc_name=wm_svc_name,
            wm_qos_correlation_id=wm_qos_correlation_id,
            feed_id=feed_id,
            include_details=include_details,
            offset=offset,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v3get_feed_item_status_with_http_info(
        self,
        wm_consumer_channel_type: Annotated[StrictStr, Field(description="Channel Type")],
        wm_consumer_id: Annotated[StrictStr, Field(description="Your Consumer ID")],
        wm_sec_timestamp: Annotated[StrictStr, Field(description="Epoch timestamp")],
        wm_sec_auth_signature: Annotated[StrictStr, Field(description="Authentication signature")],
        wm_svc_name: Annotated[StrictStr, Field(description="The Service name")],
        wm_qos_correlation_id: Annotated[StrictStr, Field(description="A Transaction ID")],
        feed_id: Annotated[Optional[StrictStr], Field(description="The feed ID.")] = None,
        include_details: Annotated[Optional[StrictStr], Field(description="Includes the status details for each item in the feed. Do not set this parameter to true as discrepancies may appear between the header and the item details (the item details may be incorrect). Instead, use the Get a feedItems status.")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="The number of items to be returned. Cannot be more than 50 items. Use it only when the includeDetails is set to true.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get status of an item feed

        You can display the status of an item within a feed. Use the feed ID returned from the upload an item API.

        :param wm_consumer_channel_type: Channel Type (required)
        :type wm_consumer_channel_type: str
        :param wm_consumer_id: Your Consumer ID (required)
        :type wm_consumer_id: str
        :param wm_sec_timestamp: Epoch timestamp (required)
        :type wm_sec_timestamp: str
        :param wm_sec_auth_signature: Authentication signature (required)
        :type wm_sec_auth_signature: str
        :param wm_svc_name: The Service name (required)
        :type wm_svc_name: str
        :param wm_qos_correlation_id: A Transaction ID (required)
        :type wm_qos_correlation_id: str
        :param feed_id: The feed ID.
        :type feed_id: str
        :param include_details: Includes the status details for each item in the feed. Do not set this parameter to true as discrepancies may appear between the header and the item details (the item details may be incorrect). Instead, use the Get a feedItems status.
        :type include_details: str
        :param offset: The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.
        :type offset: str
        :param limit: The number of items to be returned. Cannot be more than 50 items. Use it only when the includeDetails is set to true.
        :type limit: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v3get_feed_item_status_serialize(
            wm_consumer_channel_type=wm_consumer_channel_type,
            wm_consumer_id=wm_consumer_id,
            wm_sec_timestamp=wm_sec_timestamp,
            wm_sec_auth_signature=wm_sec_auth_signature,
            wm_svc_name=wm_svc_name,
            wm_qos_correlation_id=wm_qos_correlation_id,
            feed_id=feed_id,
            include_details=include_details,
            offset=offset,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v3get_feed_item_status_without_preload_content(
        self,
        wm_consumer_channel_type: Annotated[StrictStr, Field(description="Channel Type")],
        wm_consumer_id: Annotated[StrictStr, Field(description="Your Consumer ID")],
        wm_sec_timestamp: Annotated[StrictStr, Field(description="Epoch timestamp")],
        wm_sec_auth_signature: Annotated[StrictStr, Field(description="Authentication signature")],
        wm_svc_name: Annotated[StrictStr, Field(description="The Service name")],
        wm_qos_correlation_id: Annotated[StrictStr, Field(description="A Transaction ID")],
        feed_id: Annotated[Optional[StrictStr], Field(description="The feed ID.")] = None,
        include_details: Annotated[Optional[StrictStr], Field(description="Includes the status details for each item in the feed. Do not set this parameter to true as discrepancies may appear between the header and the item details (the item details may be incorrect). Instead, use the Get a feedItems status.")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="The number of items to be returned. Cannot be more than 50 items. Use it only when the includeDetails is set to true.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get status of an item feed

        You can display the status of an item within a feed. Use the feed ID returned from the upload an item API.

        :param wm_consumer_channel_type: Channel Type (required)
        :type wm_consumer_channel_type: str
        :param wm_consumer_id: Your Consumer ID (required)
        :type wm_consumer_id: str
        :param wm_sec_timestamp: Epoch timestamp (required)
        :type wm_sec_timestamp: str
        :param wm_sec_auth_signature: Authentication signature (required)
        :type wm_sec_auth_signature: str
        :param wm_svc_name: The Service name (required)
        :type wm_svc_name: str
        :param wm_qos_correlation_id: A Transaction ID (required)
        :type wm_qos_correlation_id: str
        :param feed_id: The feed ID.
        :type feed_id: str
        :param include_details: Includes the status details for each item in the feed. Do not set this parameter to true as discrepancies may appear between the header and the item details (the item details may be incorrect). Instead, use the Get a feedItems status.
        :type include_details: str
        :param offset: The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.
        :type offset: str
        :param limit: The number of items to be returned. Cannot be more than 50 items. Use it only when the includeDetails is set to true.
        :type limit: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v3get_feed_item_status_serialize(
            wm_consumer_channel_type=wm_consumer_channel_type,
            wm_consumer_id=wm_consumer_id,
            wm_sec_timestamp=wm_sec_timestamp,
            wm_sec_auth_signature=wm_sec_auth_signature,
            wm_svc_name=wm_svc_name,
            wm_qos_correlation_id=wm_qos_correlation_id,
            feed_id=feed_id,
            include_details=include_details,
            offset=offset,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v3get_feed_item_status_serialize(
        self,
        wm_consumer_channel_type,
        wm_consumer_id,
        wm_sec_timestamp,
        wm_sec_auth_signature,
        wm_svc_name,
        wm_qos_correlation_id,
        feed_id,
        include_details,
        offset,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if feed_id is not None:
            
            _query_params.append(('feedId', feed_id))
            
        if include_details is not None:
            
            _query_params.append(('includeDetails', include_details))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        if wm_consumer_channel_type is not None:
            _header_params['WM_CONSUMER.CHANNEL.TYPE'] = wm_consumer_channel_type
        if wm_consumer_id is not None:
            _header_params['WM_CONSUMER.ID'] = wm_consumer_id
        if wm_sec_timestamp is not None:
            _header_params['WM_SEC.TIMESTAMP'] = wm_sec_timestamp
        if wm_sec_auth_signature is not None:
            _header_params['WM_SEC.AUTH_SIGNATURE'] = wm_sec_auth_signature
        if wm_svc_name is not None:
            _header_params['WM_SVC.NAME'] = wm_svc_name
        if wm_qos_correlation_id is not None:
            _header_params['WM_QOS.CORRELATION_ID'] = wm_qos_correlation_id
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v3/feeds',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



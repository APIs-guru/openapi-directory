# coding: utf-8

"""
    Price Management

    The price is a fundamental building block for your listing on Walmart.com. You can use the price management APIs to set up and manage the price for a given item

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.update_price200_response_errors_inner_causes_inner import UpdatePrice200ResponseErrorsInnerCausesInner
from typing import Optional, Set
from typing_extensions import Self

class GatewayError(BaseModel):
    """
    GatewayError
    """ # noqa: E501
    category: Optional[StrictStr] = None
    causes: Optional[List[UpdatePrice200ResponseErrorsInnerCausesInner]] = None
    code: StrictStr
    component: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    error_identifiers: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, alias="errorIdentifiers")
    var_field: Optional[StrictStr] = Field(default=None, alias="field")
    gateway_error_category: Optional[StrictStr] = Field(default=None, alias="gatewayErrorCategory")
    info: Optional[StrictStr] = None
    service_name: Optional[StrictStr] = Field(default=None, alias="serviceName")
    severity: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["category", "causes", "code", "component", "description", "errorIdentifiers", "field", "gatewayErrorCategory", "info", "serviceName", "severity", "type"]

    @field_validator('category')
    def category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['APPLICATION', 'SYSTEM', 'REQUEST', 'DATA']):
            raise ValueError("must be one of enum values ('APPLICATION', 'SYSTEM', 'REQUEST', 'DATA')")
        return value

    @field_validator('gateway_error_category')
    def gateway_error_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INTERNAL_DATA_ERROR', 'EXTERNAL_DATA_ERROR', 'SYSTEM_ERROR']):
            raise ValueError("must be one of enum values ('INTERNAL_DATA_ERROR', 'EXTERNAL_DATA_ERROR', 'SYSTEM_ERROR')")
        return value

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INFO', 'WARN', 'ERROR']):
            raise ValueError("must be one of enum values ('INFO', 'WARN', 'ERROR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GatewayError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in causes (list)
        _items = []
        if self.causes:
            for _item_causes in self.causes:
                if _item_causes:
                    _items.append(_item_causes.to_dict())
            _dict['causes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GatewayError from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "category": obj.get("category"),
            "causes": [UpdatePrice200ResponseErrorsInnerCausesInner.from_dict(_item) for _item in obj["causes"]] if obj.get("causes") is not None else None,
            "code": obj.get("code"),
            "component": obj.get("component"),
            "description": obj.get("description"),
            "errorIdentifiers": obj.get("errorIdentifiers"),
            "field": obj.get("field"),
            "gatewayErrorCategory": obj.get("gatewayErrorCategory"),
            "info": obj.get("info"),
            "serviceName": obj.get("serviceName"),
            "severity": obj.get("severity"),
            "type": obj.get("type")
        })
        return _obj



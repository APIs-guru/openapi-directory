# coding: utf-8

"""
    Price Management

    The price is a fundamental building block for your listing on Walmart.com. You can use the price management APIs to set up and manage the price for a given item

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.update_price_request_pricing_inner_comparison_price import UpdatePriceRequestPricingInnerComparisonPrice
from openapi_client.models.update_price_request_pricing_inner_current_price import UpdatePriceRequestPricingInnerCurrentPrice
from typing import Optional, Set
from typing_extensions import Self

class Pricing(BaseModel):
    """
    Pricing
    """ # noqa: E501
    comparison_price: Optional[UpdatePriceRequestPricingInnerComparisonPrice] = Field(default=None, alias="comparisonPrice")
    comparison_price_type: Optional[StrictStr] = Field(default=None, description="This is applicable only for promotions", alias="comparisonPriceType")
    current_price: UpdatePriceRequestPricingInnerCurrentPrice = Field(alias="currentPrice")
    current_price_type: StrictStr = Field(description="This is applicable only for both promotions and price", alias="currentPriceType")
    effective_date: Optional[datetime] = Field(default=None, description="This is applicable only for promotions", alias="effectiveDate")
    expiration_date: Optional[datetime] = Field(default=None, description="This is applicable only for promotions", alias="expirationDate")
    price_display_codes: Optional[StrictStr] = Field(default=None, description="Represent promo placement. This is applicable only for promotions", alias="priceDisplayCodes")
    process_mode: Optional[StrictStr] = Field(default=None, description="This is applicable only for promotions", alias="processMode")
    promo_id: Optional[StrictStr] = Field(default=None, description="This is applicable only for promotions", alias="promoId")
    __properties: ClassVar[List[str]] = ["comparisonPrice", "comparisonPriceType", "currentPrice", "currentPriceType", "effectiveDate", "expirationDate", "priceDisplayCodes", "processMode", "promoId"]

    @field_validator('comparison_price_type')
    def comparison_price_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BASE']):
            raise ValueError("must be one of enum values ('BASE')")
        return value

    @field_validator('current_price_type')
    def current_price_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['BASE', 'REDUCED', 'CLEARANCE']):
            raise ValueError("must be one of enum values ('BASE', 'REDUCED', 'CLEARANCE')")
        return value

    @field_validator('price_display_codes')
    def price_display_codes_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CART', 'CHECKOUT']):
            raise ValueError("must be one of enum values ('CART', 'CHECKOUT')")
        return value

    @field_validator('process_mode')
    def process_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UPSERT', 'DELETE']):
            raise ValueError("must be one of enum values ('UPSERT', 'DELETE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Pricing from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of comparison_price
        if self.comparison_price:
            _dict['comparisonPrice'] = self.comparison_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of current_price
        if self.current_price:
            _dict['currentPrice'] = self.current_price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Pricing from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comparisonPrice": UpdatePriceRequestPricingInnerComparisonPrice.from_dict(obj["comparisonPrice"]) if obj.get("comparisonPrice") is not None else None,
            "comparisonPriceType": obj.get("comparisonPriceType"),
            "currentPrice": UpdatePriceRequestPricingInnerCurrentPrice.from_dict(obj["currentPrice"]) if obj.get("currentPrice") is not None else None,
            "currentPriceType": obj.get("currentPriceType"),
            "effectiveDate": obj.get("effectiveDate"),
            "expirationDate": obj.get("expirationDate"),
            "priceDisplayCodes": obj.get("priceDisplayCodes"),
            "processMode": obj.get("processMode"),
            "promoId": obj.get("promoId")
        })
        return _obj



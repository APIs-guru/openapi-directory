# coding: utf-8

"""
    Price Management

    The price is a fundamental building block for your listing on Walmart.com. You can use the price management APIs to set up and manage the price for a given item

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.pricing import Pricing

class TestPricing(unittest.TestCase):
    """Pricing unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Pricing:
        """Test Pricing
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Pricing`
        """
        model = Pricing()
        if include_optional:
            return Pricing(
                comparison_price = openapi_client.models.update_price_request_pricing_inner_comparison_price.updatePrice_request_pricing_inner_comparisonPrice(
                    amount = 1.337, 
                    currency = 'USD', ),
                comparison_price_type = 'BASE',
                current_price = openapi_client.models.update_price_request_pricing_inner_current_price.updatePrice_request_pricing_inner_currentPrice(
                    amount = 1.337, 
                    currency = 'USD', ),
                current_price_type = 'BASE',
                effective_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                expiration_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                price_display_codes = 'CART',
                process_mode = 'UPSERT',
                promo_id = ''
            )
        else:
            return Pricing(
                current_price = openapi_client.models.update_price_request_pricing_inner_current_price.updatePrice_request_pricing_inner_currentPrice(
                    amount = 1.337, 
                    currency = 'USD', ),
                current_price_type = 'BASE',
        )
        """

    def testPricing(self):
        """Test Pricing"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Price Management

    The price is a fundamental building block for your listing on Walmart.com. You can use the price management APIs to set up and manage the price for a given item

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.get_repricer_feed_request import GetRepricerFeedRequest

class TestGetRepricerFeedRequest(unittest.TestCase):
    """GetRepricerFeedRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetRepricerFeedRequest:
        """Test GetRepricerFeedRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetRepricerFeedRequest`
        """
        model = GetRepricerFeedRequest()
        if include_optional:
            return GetRepricerFeedRequest(
                item = [
                    openapi_client.models.get_repricer_feed_request_item_inner.getRepricerFeed_request_Item_inner(
                        strategy = openapi_client.models.get_repricer_feed_request_item_inner_strategy.getRepricerFeed_request_Item_inner_Strategy(
                            maximum_seller_allowed_price = 8, 
                            minimum_seller_allowed_price = 7.2, 
                            repricer_strategy = 'Match Competitive Price', 
                            sku = '06068064605122shoe', ), )
                    ],
                item_feed_header = openapi_client.models.get_repricer_feed_request_item_feed_header.getRepricerFeed_request_ItemFeedHeader(
                    locale = 'en', 
                    mart = 'WALMART_US', 
                    process_mode = 'REPLACE', 
                    selling_channel = 'repricerstrategy', 
                    subset = 'EXTERNAL', 
                    version = '1.0', )
            )
        else:
            return GetRepricerFeedRequest(
        )
        """

    def testGetRepricerFeedRequest(self):
        """Test GetRepricerFeedRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Frankie Financial API

    ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 

    The version of the OpenAPI document: 1.5.3
    Contact: dev-support@frankiefinancial.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.entity_profile_check_result_message import EntityProfileCheckResultMessage
from openapi_client.models.entity_profile_item_match_result_object import EntityProfileItemMatchResultObject
from openapi_client.models.entity_profile_kyc_match_result_object import EntityProfileKYCMatchResultObject
from typing import Optional, Set
from typing_extensions import Self

class EntityProfileResultObject(BaseModel):
    """
    Contains the results of a check against an entity profile.   The entityProfileResult will be returned instead of a checkSummary to provide the full details of the verification process. 
    """ # noqa: E501
    action_recommended: Optional[StrictStr] = Field(default=None, description="The recommended onboarding action for this entity after the profile check this result refers to. The action can also be an entity state set by you. - UNCHECKED: New entity with no checks applied - PASS - FAIL - PASS_MANUAL: Manual intervention was applied to achieve a pass - FAIL_MANUAL: Manual intervention was applied but the entity still fails - REFER: Manual intervention required - WAIT: Externally applied state, waiting for more entity details - ARCHIVED: Externally applied state, entity hidden from on onboarding list - INACTIVE: Externally applied state, entity hidden from on onboarding list, indexes and further changes will be blocked. ", alias="actionRecommended")
    address_results: Optional[Dict[str, EntityProfileItemMatchResultObject]] = Field(default=None, description="KYC match counts for each checked address, whether matched or not. The keys in this map are the address IDs. The match type in the value will be either \"curr_addr\" or \"prev_addr\". The resultant structure would look like:      \"addressResults\": {       \"addressId\": {         \"matchType\": \"curr_addr\",         \"matchCount\": 5,         \"verified\": true       },       \"addressId\": {         \"matchType\": \"prev_addr\",         \"matchCount\": 5,         \"verified\": true       }     } ", alias="addressResults")
    check_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for every check/comparison/verification. Make sure you reference this ID whenever updating check details. This ID will also be used when pushing check results back to you.", alias="checkId")
    check_results: Optional[List[EntityProfileCheckResultMessage]] = Field(default=None, description="The basic result for each check type required for the profile.  The results are listed in the order they are run so you can also see how far progressed through a check process you are. ", alias="checkResults")
    check_type: Optional[StrictStr] = Field(default=None, description="Comma separated list of checks required for the entity profile.", alias="checkType")
    credit_header_failures: Optional[List[StrictStr]] = Field(default=None, description="List of vendors from failed credit header sources.", alias="creditHeaderFailures")
    document_results: Optional[Dict[str, EntityProfileItemMatchResultObject]] = Field(default=None, description="KYC match counts for each checked document, whether matched or not. The keys in this map are the document IDs. The match type in the value will be either \"gov_id\" or \"other_id\". The resultant structure would look like:  documentResults: {     \"documentId\" : {       \"matchType\": \"gov_id\",       \"matchCount\": 5,       \"verified\": true     },     \"documentId\": {       \"matchType\": \"other_id\",       \"matchCount\": 5,       \"verified\": true     } } ", alias="documentResults")
    entity_id: Optional[StrictStr] = Field(default=None, description="Unique ID for the entity. ", alias="entityId")
    issue_list: Optional[List[StrictStr]] = Field(default=None, alias="issueList")
    kyc_results: Optional[List[EntityProfileKYCMatchResultObject]] = Field(default=None, description="Summary of KYC match counts.", alias="kycResults")
    latest_check_date: Optional[datetime] = Field(default=None, description="The date and time of the last check that contributed to this result.", alias="latestCheckDate")
    manual_intervention: Optional[StrictBool] = Field(default=None, description="Indicates if any manual actions have been involved in the check result.", alias="manualIntervention")
    policy_name: Optional[StrictStr] = Field(default=None, description="The name of the policy within the profile used for this check. This may or may not incorporate the 'riskPolicy' that is also an attribute in this object.", alias="policyName")
    profile_name: Optional[StrictStr] = Field(default=None, description="The name of the profile used for this check.", alias="profileName")
    resolver_recommended: Optional[StrictStr] = Field(default=None, description="Workflow hint by arrangement with Frankie", alias="resolverRecommended")
    risk_level: Optional[StrictStr] = Field(default=None, description="Risk level. One of:  - LOW,  - MEDIUM,  - HIGH,  - UACCEPTABLE  - or UNKNOWN ", alias="riskLevel")
    risk_policy: Optional[StrictStr] = Field(default=None, description="Risk policy. Contents depend on account configuration but would typically be one of:  - SDD,  - CDD,  - EDD  - or FAIL ", alias="riskPolicy")
    __properties: ClassVar[List[str]] = ["actionRecommended", "addressResults", "checkId", "checkResults", "checkType", "creditHeaderFailures", "documentResults", "entityId", "issueList", "kycResults", "latestCheckDate", "manualIntervention", "policyName", "profileName", "resolverRecommended", "riskLevel", "riskPolicy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EntityProfileResultObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in address_results (dict)
        _field_dict = {}
        if self.address_results:
            for _key_address_results in self.address_results:
                if self.address_results[_key_address_results]:
                    _field_dict[_key_address_results] = self.address_results[_key_address_results].to_dict()
            _dict['addressResults'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in check_results (list)
        _items = []
        if self.check_results:
            for _item_check_results in self.check_results:
                if _item_check_results:
                    _items.append(_item_check_results.to_dict())
            _dict['checkResults'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in document_results (dict)
        _field_dict = {}
        if self.document_results:
            for _key_document_results in self.document_results:
                if self.document_results[_key_document_results]:
                    _field_dict[_key_document_results] = self.document_results[_key_document_results].to_dict()
            _dict['documentResults'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in kyc_results (list)
        _items = []
        if self.kyc_results:
            for _item_kyc_results in self.kyc_results:
                if _item_kyc_results:
                    _items.append(_item_kyc_results.to_dict())
            _dict['kycResults'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EntityProfileResultObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actionRecommended": obj.get("actionRecommended"),
            "addressResults": dict(
                (_k, EntityProfileItemMatchResultObject.from_dict(_v))
                for _k, _v in obj["addressResults"].items()
            )
            if obj.get("addressResults") is not None
            else None,
            "checkId": obj.get("checkId"),
            "checkResults": [EntityProfileCheckResultMessage.from_dict(_item) for _item in obj["checkResults"]] if obj.get("checkResults") is not None else None,
            "checkType": obj.get("checkType"),
            "creditHeaderFailures": obj.get("creditHeaderFailures"),
            "documentResults": dict(
                (_k, EntityProfileItemMatchResultObject.from_dict(_v))
                for _k, _v in obj["documentResults"].items()
            )
            if obj.get("documentResults") is not None
            else None,
            "entityId": obj.get("entityId"),
            "issueList": obj.get("issueList"),
            "kycResults": [EntityProfileKYCMatchResultObject.from_dict(_item) for _item in obj["kycResults"]] if obj.get("kycResults") is not None else None,
            "latestCheckDate": obj.get("latestCheckDate"),
            "manualIntervention": obj.get("manualIntervention"),
            "policyName": obj.get("policyName"),
            "profileName": obj.get("profileName"),
            "resolverRecommended": obj.get("resolverRecommended"),
            "riskLevel": obj.get("riskLevel"),
            "riskPolicy": obj.get("riskPolicy")
        })
        return _obj



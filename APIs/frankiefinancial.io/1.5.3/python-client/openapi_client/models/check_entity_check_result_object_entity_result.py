# coding: utf-8

"""
    Frankie Financial API

    ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 

    The version of the OpenAPI document: 1.5.3
    Contact: dev-support@frankiefinancial.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address_check_result_object import AddressCheckResultObject
from openapi_client.models.aml_result_set import AMLResultSet
from openapi_client.models.background_check_result_object import BackgroundCheckResultObject
from openapi_client.models.dob_check_result_object import DOBCheckResultObject
from openapi_client.models.gender_check_result_object import GenderCheckResultObject
from openapi_client.models.identity_document_check_result_object import IdentityDocumentCheckResultObject
from openapi_client.models.personal_name_check_result_object import PersonalNameCheckResultObject
from typing import Optional, Set
from typing_extensions import Self

class CheckEntityCheckResultObjectEntityResult(BaseModel):
    """
    This will hold all of the check results that were performed against the 
    """ # noqa: E501
    addresses_check: Optional[List[AddressCheckResultObject]] = Field(default=None, description="Collection of address objects.", alias="addressesCheck")
    adverse_media_check: Optional[List[BackgroundCheckResultObject]] = Field(default=None, description="!!!!! DEPRECATED !!!!! Please use the multi-result AMLResultSets structure instead.  Note: This single check result structure will be retired in v1.3 !!!!! DEPRECATED !!!!!  Collection of check results for the entity being found in any adverse media  An array sorted by type, then reverse chronological order of some/all background checks done on this entity. Older checks may have been previously done by you or another institution, and if so, these will be listed and appropriately anonymised/obfuscated. ", alias="adverseMediaCheck")
    aml_result_sets: Optional[List[AMLResultSet]] = Field(default=None, description="An array of Collections of PEP/Sanctions/WL/Media objects, as AML providers can return multiple results ", alias="amlResultSets")
    date_of_birth_check: Optional[DOBCheckResultObject] = Field(default=None, alias="dateOfBirthCheck")
    entity_id: Optional[StrictStr] = Field(default=None, description="Unique ID for the entity. ", alias="entityId")
    gender_check: Optional[GenderCheckResultObject] = Field(default=None, alias="genderCheck")
    identity_docs_check: Optional[List[IdentityDocumentCheckResultObject]] = Field(default=None, description="Collection of identity documents (photos, scans, selfies, etc), and their check results", alias="identityDocsCheck")
    name_check: Optional[PersonalNameCheckResultObject] = Field(default=None, alias="nameCheck")
    pep_check: Optional[List[BackgroundCheckResultObject]] = Field(default=None, description="!!!!! DEPRECATED !!!!! Please use the multi-result AMLResultSets structure instead.  Note: This single check result structure will be retired in v1.3 !!!!! DEPRECATED !!!!!  Collection of check results for the entity being a Politically Exposed Person  An array sorted by type, then reverse chronological order of some/all background checks done on this entity. Older checks may have been previously done by you or another institution, and if so, these will be listed and appropriately anonymised/obfuscated. ", alias="pepCheck")
    sanctions_check: Optional[List[BackgroundCheckResultObject]] = Field(default=None, description="!!!!! DEPRECATED !!!!! Please use the multi-result AMLResultSets structure instead.  Note: This single check result structure will be retired in v1.3 !!!!! DEPRECATED !!!!!  Collection of check results for the entity being on a sanctions list  An array sorted by type, then reverse chronological order of some/all background checks done on this entity. Older checks may have been previously done by you or another institution, and if so, these will be listed and appropriately anonymised/obfuscated. ", alias="sanctionsCheck")
    watchlist_check: Optional[List[BackgroundCheckResultObject]] = Field(default=None, description="!!!!! DEPRECATED !!!!! Please use the multi-result AMLResultSets structure instead.  Note: This single check result structure will be retired in v1.3 !!!!! DEPRECATED !!!!!  Collection of check results for the entity being on a watchlist  An array sorted by type, then reverse chronological order of some/all background checks done on this entity. Older checks may have been previously done by you or another institution, and if so, these will be listed and appropriately anonymised/obfuscated. ", alias="watchlistCheck")
    __properties: ClassVar[List[str]] = ["addressesCheck", "adverseMediaCheck", "amlResultSets", "dateOfBirthCheck", "entityId", "genderCheck", "identityDocsCheck", "nameCheck", "pepCheck", "sanctionsCheck", "watchlistCheck"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CheckEntityCheckResultObjectEntityResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in addresses_check (list)
        _items = []
        if self.addresses_check:
            for _item_addresses_check in self.addresses_check:
                if _item_addresses_check:
                    _items.append(_item_addresses_check.to_dict())
            _dict['addressesCheck'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in adverse_media_check (list)
        _items = []
        if self.adverse_media_check:
            for _item_adverse_media_check in self.adverse_media_check:
                if _item_adverse_media_check:
                    _items.append(_item_adverse_media_check.to_dict())
            _dict['adverseMediaCheck'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in aml_result_sets (list)
        _items = []
        if self.aml_result_sets:
            for _item_aml_result_sets in self.aml_result_sets:
                if _item_aml_result_sets:
                    _items.append(_item_aml_result_sets.to_dict())
            _dict['amlResultSets'] = _items
        # override the default output from pydantic by calling `to_dict()` of date_of_birth_check
        if self.date_of_birth_check:
            _dict['dateOfBirthCheck'] = self.date_of_birth_check.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gender_check
        if self.gender_check:
            _dict['genderCheck'] = self.gender_check.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in identity_docs_check (list)
        _items = []
        if self.identity_docs_check:
            for _item_identity_docs_check in self.identity_docs_check:
                if _item_identity_docs_check:
                    _items.append(_item_identity_docs_check.to_dict())
            _dict['identityDocsCheck'] = _items
        # override the default output from pydantic by calling `to_dict()` of name_check
        if self.name_check:
            _dict['nameCheck'] = self.name_check.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in pep_check (list)
        _items = []
        if self.pep_check:
            for _item_pep_check in self.pep_check:
                if _item_pep_check:
                    _items.append(_item_pep_check.to_dict())
            _dict['pepCheck'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sanctions_check (list)
        _items = []
        if self.sanctions_check:
            for _item_sanctions_check in self.sanctions_check:
                if _item_sanctions_check:
                    _items.append(_item_sanctions_check.to_dict())
            _dict['sanctionsCheck'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in watchlist_check (list)
        _items = []
        if self.watchlist_check:
            for _item_watchlist_check in self.watchlist_check:
                if _item_watchlist_check:
                    _items.append(_item_watchlist_check.to_dict())
            _dict['watchlistCheck'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CheckEntityCheckResultObjectEntityResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addressesCheck": [AddressCheckResultObject.from_dict(_item) for _item in obj["addressesCheck"]] if obj.get("addressesCheck") is not None else None,
            "adverseMediaCheck": [BackgroundCheckResultObject.from_dict(_item) for _item in obj["adverseMediaCheck"]] if obj.get("adverseMediaCheck") is not None else None,
            "amlResultSets": [AMLResultSet.from_dict(_item) for _item in obj["amlResultSets"]] if obj.get("amlResultSets") is not None else None,
            "dateOfBirthCheck": DOBCheckResultObject.from_dict(obj["dateOfBirthCheck"]) if obj.get("dateOfBirthCheck") is not None else None,
            "entityId": obj.get("entityId"),
            "genderCheck": GenderCheckResultObject.from_dict(obj["genderCheck"]) if obj.get("genderCheck") is not None else None,
            "identityDocsCheck": [IdentityDocumentCheckResultObject.from_dict(_item) for _item in obj["identityDocsCheck"]] if obj.get("identityDocsCheck") is not None else None,
            "nameCheck": PersonalNameCheckResultObject.from_dict(obj["nameCheck"]) if obj.get("nameCheck") is not None else None,
            "pepCheck": [BackgroundCheckResultObject.from_dict(_item) for _item in obj["pepCheck"]] if obj.get("pepCheck") is not None else None,
            "sanctionsCheck": [BackgroundCheckResultObject.from_dict(_item) for _item in obj["sanctionsCheck"]] if obj.get("sanctionsCheck") is not None else None,
            "watchlistCheck": [BackgroundCheckResultObject.from_dict(_item) for _item in obj["watchlistCheck"]] if obj.get("watchlistCheck") is not None else None
        })
        return _obj



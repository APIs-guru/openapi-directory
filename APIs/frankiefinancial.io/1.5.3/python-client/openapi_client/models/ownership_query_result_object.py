# coding: utf-8

"""
    Frankie Financial API

    ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 

    The version of the OpenAPI document: 1.5.3
    Contact: dev-support@frankiefinancial.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.entity_object import EntityObject
from openapi_client.models.ownership_details_object import OwnershipDetailsObject
from typing import Optional, Set
from typing_extensions import Self

class OwnershipQueryResultObject(BaseModel):
    """
    OwnershipQueryResultObject
    """ # noqa: E501
    associated_entities: Optional[Dict[str, EntityObject]] = Field(default=None, description="List of all entities (both individuals and organisations) associated with this ownership result. These objects will be referenced by entityId in the shareholdings and officers lists in the following ownership details. ", alias="associatedEntities")
    blocking_entity_ids: Optional[List[StrictStr]] = Field(default=None, description="List of entity IDs (that should be in the associatedEntities list) who blocked the ultimate beneficial ownership tree traversal. These are likely to be entities that cannot be checked automatically (such as trusts) or who have no UBO's of their own, such as public companies.  The presence of data in this array also signifies that the full UBO list is not complete. ", alias="blockingEntityIds")
    entity_id: Optional[StrictStr] = Field(default=None, description="The entityId of the organisation for which this result was created. The details will be in the ownershipDetails map with this ID as the key. ", alias="entityId")
    ownership_details: Optional[Dict[str, OwnershipDetailsObject]] = Field(default=None, description="A map of entityId to ownershipDetailsObjects with at least one entry being for the root organisation that the overall result relates to. Any remaining entries will be for further results for organisational owners referenced in the root ownershipDetailsObject and so on. ", alias="ownershipDetails")
    __properties: ClassVar[List[str]] = ["associatedEntities", "blockingEntityIds", "entityId", "ownershipDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OwnershipQueryResultObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in associated_entities (dict)
        _field_dict = {}
        if self.associated_entities:
            for _key_associated_entities in self.associated_entities:
                if self.associated_entities[_key_associated_entities]:
                    _field_dict[_key_associated_entities] = self.associated_entities[_key_associated_entities].to_dict()
            _dict['associatedEntities'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in ownership_details (dict)
        _field_dict = {}
        if self.ownership_details:
            for _key_ownership_details in self.ownership_details:
                if self.ownership_details[_key_ownership_details]:
                    _field_dict[_key_ownership_details] = self.ownership_details[_key_ownership_details].to_dict()
            _dict['ownershipDetails'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OwnershipQueryResultObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "associatedEntities": dict(
                (_k, EntityObject.from_dict(_v))
                for _k, _v in obj["associatedEntities"].items()
            )
            if obj.get("associatedEntities") is not None
            else None,
            "blockingEntityIds": obj.get("blockingEntityIds"),
            "entityId": obj.get("entityId"),
            "ownershipDetails": dict(
                (_k, OwnershipDetailsObject.from_dict(_v))
                for _k, _v in obj["ownershipDetails"].items()
            )
            if obj.get("ownershipDetails") is not None
            else None
        })
        return _obj



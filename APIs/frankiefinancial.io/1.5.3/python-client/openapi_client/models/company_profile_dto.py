# coding: utf-8

"""
    Frankie Financial API

    ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 

    The version of the OpenAPI document: 1.5.3
    Contact: dev-support@frankiefinancial.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.array_of_activity_declaration_dto import ArrayOfActivityDeclarationDTO
from openapi_client.models.array_of_activity_dto import ArrayOfActivityDTO
from openapi_client.models.array_of_address_dto import ArrayOfAddressDTO
from openapi_client.models.array_of_capital_dto import ArrayOfCapitalDTO
from openapi_client.models.array_of_string import ArrayOfString
from openapi_client.models.array_of_us_officer_dto import ArrayOfUSOfficerDTO
from openapi_client.models.director_and_share_details import DirectorAndShareDetails
from openapi_client.models.legal_form_dto import LegalFormDTO
from typing import Optional, Set
from typing_extensions import Self

class CompanyProfileDTO(BaseModel):
    """
    CompanyProfileDTO
    """ # noqa: E501
    activity: Optional[ArrayOfActivityDTO] = Field(default=None, alias="Activity")
    activity_declaration: Optional[ArrayOfActivityDeclarationDTO] = Field(default=None, alias="ActivityDeclaration")
    addresses: Optional[ArrayOfAddressDTO] = Field(default=None, alias="Addresses")
    agent_address: Optional[StrictStr] = Field(default=None, alias="AgentAddress")
    agent_name: Optional[StrictStr] = Field(default=None, alias="AgentName")
    aliases: Optional[ArrayOfString] = Field(default=None, alias="Aliases")
    appointment_date_of_official: Optional[StrictStr] = Field(default=None, alias="AppointmentDateOfOfficial")
    capital: Optional[ArrayOfCapitalDTO] = Field(default=None, alias="Capital")
    code: Optional[StrictStr] = Field(default=None, alias="Code")
    company_name_in_english: Optional[StrictStr] = Field(default=None, alias="CompanyNameInEnglish")
    var_date: Optional[StrictStr] = Field(default=None, alias="Date")
    email: Optional[StrictStr] = Field(default=None, alias="Email")
    fax_number: Optional[StrictStr] = Field(default=None, alias="FaxNumber")
    fiscal_code: Optional[StrictStr] = Field(default=None, alias="FiscalCode")
    foundation_date: Optional[StrictStr] = Field(default=None, alias="FoundationDate")
    functions: Optional[ArrayOfString] = Field(default=None, alias="Functions")
    headquarters: Optional[StrictStr] = Field(default=None, alias="Headquarters")
    key_figures: Optional[ArrayOfString] = Field(default=None, alias="KeyFigures")
    last_annual_account_date: Optional[StrictStr] = Field(default=None, alias="LastAnnualAccountDate")
    legal_form: Optional[StrictStr] = Field(default=None, alias="LegalForm")
    legal_form_declaration: Optional[StrictStr] = Field(default=None, alias="LegalFormDeclaration")
    legal_form_details: Optional[LegalFormDTO] = Field(default=None, alias="LegalFormDetails")
    legal_status: Optional[StrictStr] = Field(default=None, alias="LegalStatus")
    mailing_address: Optional[StrictStr] = Field(default=None, alias="MailingAddress")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    official: Optional[StrictBool] = Field(default=None, alias="Official")
    registration_authority: Optional[StrictStr] = Field(default=None, alias="RegistrationAuthority")
    registration_authority_code: Optional[StrictStr] = Field(default=None, alias="RegistrationAuthorityCode")
    registration_date: Optional[StrictStr] = Field(default=None, alias="RegistrationDate")
    registration_number: Optional[StrictStr] = Field(default=None, alias="RegistrationNumber")
    signing_declaration: Optional[StrictStr] = Field(default=None, alias="SigningDeclaration")
    signing_declaration_description: Optional[StrictStr] = Field(default=None, alias="SigningDeclarationDescription")
    signing_language: Optional[StrictStr] = Field(default=None, alias="SigningLanguage")
    source: Optional[StrictStr] = Field(default=None, alias="Source")
    state_of_incorporation: Optional[StrictStr] = Field(default=None, alias="StateOfIncorporation")
    telephone_number: Optional[StrictStr] = Field(default=None, alias="TelephoneNumber")
    vat_number: Optional[StrictStr] = Field(default=None, alias="VatNumber")
    virtual_id: Optional[StrictStr] = Field(default=None, alias="VirtualId")
    website_url: Optional[StrictStr] = Field(default=None, alias="WebsiteURL")
    director_and_share_details: Optional[DirectorAndShareDetails] = Field(default=None, alias="directorAndShareDetails")
    officers: Optional[ArrayOfUSOfficerDTO] = None
    __properties: ClassVar[List[str]] = ["Activity", "ActivityDeclaration", "Addresses", "AgentAddress", "AgentName", "Aliases", "AppointmentDateOfOfficial", "Capital", "Code", "CompanyNameInEnglish", "Date", "Email", "FaxNumber", "FiscalCode", "FoundationDate", "Functions", "Headquarters", "KeyFigures", "LastAnnualAccountDate", "LegalForm", "LegalFormDeclaration", "LegalFormDetails", "LegalStatus", "MailingAddress", "Name", "Official", "RegistrationAuthority", "RegistrationAuthorityCode", "RegistrationDate", "RegistrationNumber", "SigningDeclaration", "SigningDeclarationDescription", "SigningLanguage", "Source", "StateOfIncorporation", "TelephoneNumber", "VatNumber", "VirtualId", "WebsiteURL", "directorAndShareDetails", "officers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompanyProfileDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of activity
        if self.activity:
            _dict['Activity'] = self.activity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of activity_declaration
        if self.activity_declaration:
            _dict['ActivityDeclaration'] = self.activity_declaration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of addresses
        if self.addresses:
            _dict['Addresses'] = self.addresses.to_dict()
        # override the default output from pydantic by calling `to_dict()` of aliases
        if self.aliases:
            _dict['Aliases'] = self.aliases.to_dict()
        # override the default output from pydantic by calling `to_dict()` of capital
        if self.capital:
            _dict['Capital'] = self.capital.to_dict()
        # override the default output from pydantic by calling `to_dict()` of functions
        if self.functions:
            _dict['Functions'] = self.functions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of key_figures
        if self.key_figures:
            _dict['KeyFigures'] = self.key_figures.to_dict()
        # override the default output from pydantic by calling `to_dict()` of legal_form_details
        if self.legal_form_details:
            _dict['LegalFormDetails'] = self.legal_form_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of director_and_share_details
        if self.director_and_share_details:
            _dict['directorAndShareDetails'] = self.director_and_share_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of officers
        if self.officers:
            _dict['officers'] = self.officers.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompanyProfileDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Activity": ArrayOfActivityDTO.from_dict(obj["Activity"]) if obj.get("Activity") is not None else None,
            "ActivityDeclaration": ArrayOfActivityDeclarationDTO.from_dict(obj["ActivityDeclaration"]) if obj.get("ActivityDeclaration") is not None else None,
            "Addresses": ArrayOfAddressDTO.from_dict(obj["Addresses"]) if obj.get("Addresses") is not None else None,
            "AgentAddress": obj.get("AgentAddress"),
            "AgentName": obj.get("AgentName"),
            "Aliases": ArrayOfString.from_dict(obj["Aliases"]) if obj.get("Aliases") is not None else None,
            "AppointmentDateOfOfficial": obj.get("AppointmentDateOfOfficial"),
            "Capital": ArrayOfCapitalDTO.from_dict(obj["Capital"]) if obj.get("Capital") is not None else None,
            "Code": obj.get("Code"),
            "CompanyNameInEnglish": obj.get("CompanyNameInEnglish"),
            "Date": obj.get("Date"),
            "Email": obj.get("Email"),
            "FaxNumber": obj.get("FaxNumber"),
            "FiscalCode": obj.get("FiscalCode"),
            "FoundationDate": obj.get("FoundationDate"),
            "Functions": ArrayOfString.from_dict(obj["Functions"]) if obj.get("Functions") is not None else None,
            "Headquarters": obj.get("Headquarters"),
            "KeyFigures": ArrayOfString.from_dict(obj["KeyFigures"]) if obj.get("KeyFigures") is not None else None,
            "LastAnnualAccountDate": obj.get("LastAnnualAccountDate"),
            "LegalForm": obj.get("LegalForm"),
            "LegalFormDeclaration": obj.get("LegalFormDeclaration"),
            "LegalFormDetails": LegalFormDTO.from_dict(obj["LegalFormDetails"]) if obj.get("LegalFormDetails") is not None else None,
            "LegalStatus": obj.get("LegalStatus"),
            "MailingAddress": obj.get("MailingAddress"),
            "Name": obj.get("Name"),
            "Official": obj.get("Official"),
            "RegistrationAuthority": obj.get("RegistrationAuthority"),
            "RegistrationAuthorityCode": obj.get("RegistrationAuthorityCode"),
            "RegistrationDate": obj.get("RegistrationDate"),
            "RegistrationNumber": obj.get("RegistrationNumber"),
            "SigningDeclaration": obj.get("SigningDeclaration"),
            "SigningDeclarationDescription": obj.get("SigningDeclarationDescription"),
            "SigningLanguage": obj.get("SigningLanguage"),
            "Source": obj.get("Source"),
            "StateOfIncorporation": obj.get("StateOfIncorporation"),
            "TelephoneNumber": obj.get("TelephoneNumber"),
            "VatNumber": obj.get("VatNumber"),
            "VirtualId": obj.get("VirtualId"),
            "WebsiteURL": obj.get("WebsiteURL"),
            "directorAndShareDetails": DirectorAndShareDetails.from_dict(obj["directorAndShareDetails"]) if obj.get("directorAndShareDetails") is not None else None,
            "officers": ArrayOfUSOfficerDTO.from_dict(obj["officers"]) if obj.get("officers") is not None else None
        })
        return _obj



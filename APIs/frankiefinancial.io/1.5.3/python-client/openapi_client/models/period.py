# coding: utf-8

"""
    Frankie Financial API

    ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 

    The version of the OpenAPI document: 1.5.3
    Contact: dev-support@frankiefinancial.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.rate_value import RateValue
from typing import Optional, Set
from typing_extensions import Self

class Period(BaseModel):
    """
    Rates, by period, for the uploaded bill
    """ # noqa: E501
    controlled_load1: Optional[RateValue] = Field(default=None, alias="controlledLoad1")
    controlled_load2: Optional[RateValue] = Field(default=None, alias="controlledLoad2")
    off_peak: Optional[RateValue] = Field(default=None, alias="offPeak")
    off_peak_step1: Optional[RateValue] = Field(default=None, alias="offPeakStep1")
    off_peak_step2: Optional[RateValue] = Field(default=None, alias="offPeakStep2")
    peak: Optional[RateValue] = None
    peak_step1: Optional[RateValue] = Field(default=None, alias="peakStep1")
    peak_step2: Optional[RateValue] = Field(default=None, alias="peakStep2")
    peak_step3: Optional[RateValue] = Field(default=None, alias="peakStep3")
    shoulder: Optional[RateValue] = None
    supply_charge: Optional[RateValue] = Field(default=None, alias="supplyCharge")
    __properties: ClassVar[List[str]] = ["controlledLoad1", "controlledLoad2", "offPeak", "offPeakStep1", "offPeakStep2", "peak", "peakStep1", "peakStep2", "peakStep3", "shoulder", "supplyCharge"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Period from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of controlled_load1
        if self.controlled_load1:
            _dict['controlledLoad1'] = self.controlled_load1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of controlled_load2
        if self.controlled_load2:
            _dict['controlledLoad2'] = self.controlled_load2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of off_peak
        if self.off_peak:
            _dict['offPeak'] = self.off_peak.to_dict()
        # override the default output from pydantic by calling `to_dict()` of off_peak_step1
        if self.off_peak_step1:
            _dict['offPeakStep1'] = self.off_peak_step1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of off_peak_step2
        if self.off_peak_step2:
            _dict['offPeakStep2'] = self.off_peak_step2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of peak
        if self.peak:
            _dict['peak'] = self.peak.to_dict()
        # override the default output from pydantic by calling `to_dict()` of peak_step1
        if self.peak_step1:
            _dict['peakStep1'] = self.peak_step1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of peak_step2
        if self.peak_step2:
            _dict['peakStep2'] = self.peak_step2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of peak_step3
        if self.peak_step3:
            _dict['peakStep3'] = self.peak_step3.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shoulder
        if self.shoulder:
            _dict['shoulder'] = self.shoulder.to_dict()
        # override the default output from pydantic by calling `to_dict()` of supply_charge
        if self.supply_charge:
            _dict['supplyCharge'] = self.supply_charge.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Period from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "controlledLoad1": RateValue.from_dict(obj["controlledLoad1"]) if obj.get("controlledLoad1") is not None else None,
            "controlledLoad2": RateValue.from_dict(obj["controlledLoad2"]) if obj.get("controlledLoad2") is not None else None,
            "offPeak": RateValue.from_dict(obj["offPeak"]) if obj.get("offPeak") is not None else None,
            "offPeakStep1": RateValue.from_dict(obj["offPeakStep1"]) if obj.get("offPeakStep1") is not None else None,
            "offPeakStep2": RateValue.from_dict(obj["offPeakStep2"]) if obj.get("offPeakStep2") is not None else None,
            "peak": RateValue.from_dict(obj["peak"]) if obj.get("peak") is not None else None,
            "peakStep1": RateValue.from_dict(obj["peakStep1"]) if obj.get("peakStep1") is not None else None,
            "peakStep2": RateValue.from_dict(obj["peakStep2"]) if obj.get("peakStep2") is not None else None,
            "peakStep3": RateValue.from_dict(obj["peakStep3"]) if obj.get("peakStep3") is not None else None,
            "shoulder": RateValue.from_dict(obj["shoulder"]) if obj.get("shoulder") is not None else None,
            "supplyCharge": RateValue.from_dict(obj["supplyCharge"]) if obj.get("supplyCharge") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Frankie Financial API

    ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 

    The version of the OpenAPI document: 1.5.3
    Contact: dev-support@frankiefinancial.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address_object import AddressObject
from openapi_client.models.dob_object import DOBObject
from openapi_client.models.entity_flag_object import EntityFlagObject
from openapi_client.models.enum_entity_type import EnumEntityType
from openapi_client.models.enum_gender import EnumGender
from openapi_client.models.identity_document_object import IdentityDocumentObject
from openapi_client.models.key_value_pair_object import KeyValuePairObject
from openapi_client.models.organisation_data_object import OrganisationDataObject
from openapi_client.models.personal_name_object import PersonalNameObject
from typing import Optional, Set
from typing_extensions import Self

class EntityObject(BaseModel):
    """
    Describes all of the data being used to verify an entity. 
    """ # noqa: E501
    addresses: Optional[List[AddressObject]] = Field(default=None, description="Collection of address objects.")
    date_of_birth: Optional[DOBObject] = Field(default=None, alias="dateOfBirth")
    entity_id: Optional[StrictStr] = Field(default=None, description="When an entity is first created, it is assigned an ID. When updating an entity, make sure you set the entityId One exception to this is when an entity is created from a document object. It is expected that this object would be passed into a /check or /entity call to set it. ", alias="entityId")
    entity_profile: Optional[StrictStr] = Field(default=None, description="If the entity is using the new profiles feature, then their profile name will be found here.  Note: If setting a profile, you must ensure that the profile matches a known configuration.  Please contact Frankie developer support if you're unsure as to what valid values are. ", alias="entityProfile")
    entity_type: Optional[EnumEntityType] = Field(default=None, alias="entityType")
    extra_data: Optional[List[KeyValuePairObject]] = Field(default=None, description="Set of key-value pairs that provide arbitrary additional type-specific data. You can use these fields to store external IDs, or other non-identity related items if you need to. If updating an existing entity, then existing values with the same name will be overwritten. New values will be added.  See here for more information about possible values you can use:   https://apidocs.frankiefinancial.com/docs/entity-extradata-key-value-pairs ", alias="extraData")
    flags: Optional[List[EntityFlagObject]] = Field(default=None, description="Used to set additional information flags with regards to this entity and for ongoing processing.  Flags might include having the entity (not) participate in regular pep/sanctions screening Others will follow over time. ")
    gender: Optional[EnumGender] = None
    identity_docs: Optional[List[IdentityDocumentObject]] = Field(default=None, description="Collection of identity documents (photos, scans, selfies, etc)", alias="identityDocs")
    name: Optional[PersonalNameObject] = None
    organisation_data: Optional[OrganisationDataObject] = Field(default=None, alias="organisationData")
    __properties: ClassVar[List[str]] = ["addresses", "dateOfBirth", "entityId", "entityProfile", "entityType", "extraData", "flags", "gender", "identityDocs", "name", "organisationData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EntityObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in addresses (list)
        _items = []
        if self.addresses:
            for _item_addresses in self.addresses:
                if _item_addresses:
                    _items.append(_item_addresses.to_dict())
            _dict['addresses'] = _items
        # override the default output from pydantic by calling `to_dict()` of date_of_birth
        if self.date_of_birth:
            _dict['dateOfBirth'] = self.date_of_birth.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in extra_data (list)
        _items = []
        if self.extra_data:
            for _item_extra_data in self.extra_data:
                if _item_extra_data:
                    _items.append(_item_extra_data.to_dict())
            _dict['extraData'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in flags (list)
        _items = []
        if self.flags:
            for _item_flags in self.flags:
                if _item_flags:
                    _items.append(_item_flags.to_dict())
            _dict['flags'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in identity_docs (list)
        _items = []
        if self.identity_docs:
            for _item_identity_docs in self.identity_docs:
                if _item_identity_docs:
                    _items.append(_item_identity_docs.to_dict())
            _dict['identityDocs'] = _items
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organisation_data
        if self.organisation_data:
            _dict['organisationData'] = self.organisation_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EntityObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addresses": [AddressObject.from_dict(_item) for _item in obj["addresses"]] if obj.get("addresses") is not None else None,
            "dateOfBirth": DOBObject.from_dict(obj["dateOfBirth"]) if obj.get("dateOfBirth") is not None else None,
            "entityId": obj.get("entityId"),
            "entityProfile": obj.get("entityProfile"),
            "entityType": obj.get("entityType"),
            "extraData": [KeyValuePairObject.from_dict(_item) for _item in obj["extraData"]] if obj.get("extraData") is not None else None,
            "flags": [EntityFlagObject.from_dict(_item) for _item in obj["flags"]] if obj.get("flags") is not None else None,
            "gender": obj.get("gender"),
            "identityDocs": [IdentityDocumentObject.from_dict(_item) for _item in obj["identityDocs"]] if obj.get("identityDocs") is not None else None,
            "name": PersonalNameObject.from_dict(obj["name"]) if obj.get("name") is not None else None,
            "organisationData": OrganisationDataObject.from_dict(obj["organisationData"]) if obj.get("organisationData") is not None else None
        })
        return _obj



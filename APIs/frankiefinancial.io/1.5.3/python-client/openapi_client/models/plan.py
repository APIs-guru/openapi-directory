# coding: utf-8

"""
    Frankie Financial API

    ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 

    The version of the OpenAPI document: 1.5.3
    Contact: dev-support@frankiefinancial.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.benefits import Benefits
from openapi_client.models.conditions import Conditions
from openapi_client.models.contract import Contract
from openapi_client.models.fees import Fees
from openapi_client.models.name_value import NameValue
from openapi_client.models.plan_discounts import PlanDiscounts
from openapi_client.models.rates import Rates
from openapi_client.models.retailer import Retailer
from typing import Optional, Set
from typing_extensions import Self

class Plan(BaseModel):
    """
    All information associated with a given plan
    """ # noqa: E501
    benefits: Optional[Benefits] = None
    conditions: Optional[Conditions] = None
    contract: Optional[Contract] = None
    default_offer_message: StrictStr = Field(description="Default Offer (DMO/VDO) text to be displayed for this plan", alias="defaultOfferMessage")
    direct_debit_required: StrictBool = Field(description="Is payment by direct debit required in order to subscribe to this plan", alias="directDebitRequired")
    discounts: Optional[PlanDiscounts] = None
    estimated_base_cost: Union[StrictFloat, StrictInt] = Field(description="Estimated cost of this plan, based on the usage from the uploaded bill, with no conditional discounts applied. If this plan offers no conditional discounts the estimatedTotalCost and the estimatedBaseCost will be the same.", alias="estimatedBaseCost")
    estimated_saving: Union[StrictFloat, StrictInt] = Field(description="The estimated saving the customer could have realised if they had been on this plan during the billing period", alias="estimatedSaving")
    estimated_total_cost: Union[StrictFloat, StrictInt] = Field(description="Estimated cost of this plan, based on the usage from uploaded bill, with all conditional discounts applied.", alias="estimatedTotalCost")
    fees_and_charges: Optional[Fees] = Field(default=None, alias="feesAndCharges")
    green_options: Optional[NameValue] = Field(default=None, alias="greenOptions")
    id: StrictInt = Field(description="Unique identifier for this plan. This ID is passed when calling the switch API.")
    name: StrictStr = Field(description="Name of the plan")
    pay_on_time_required: StrictBool = Field(description="Is pay on time required in order to subscribe to this plan", alias="payOnTimeRequired")
    payment_options: Optional[NameValue] = Field(default=None, alias="paymentOptions")
    rates: Rates
    retailer: Retailer
    type: StrictStr = Field(description="The type of energy plan * `SR` - Single Rate * `TOU` - Time Of Use")
    url: StrictStr = Field(description="Link to BPID (Basic Plan Information Document (NSW, SA, QLD, ACT)) or EPFS (Energy Price Fact Sheet (VIC))")
    __properties: ClassVar[List[str]] = ["benefits", "conditions", "contract", "defaultOfferMessage", "directDebitRequired", "discounts", "estimatedBaseCost", "estimatedSaving", "estimatedTotalCost", "feesAndCharges", "greenOptions", "id", "name", "payOnTimeRequired", "paymentOptions", "rates", "retailer", "type", "url"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['SR', 'TOU']):
            raise ValueError("must be one of enum values ('SR', 'TOU')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Plan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of benefits
        if self.benefits:
            _dict['benefits'] = self.benefits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of conditions
        if self.conditions:
            _dict['conditions'] = self.conditions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contract
        if self.contract:
            _dict['contract'] = self.contract.to_dict()
        # override the default output from pydantic by calling `to_dict()` of discounts
        if self.discounts:
            _dict['discounts'] = self.discounts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fees_and_charges
        if self.fees_and_charges:
            _dict['feesAndCharges'] = self.fees_and_charges.to_dict()
        # override the default output from pydantic by calling `to_dict()` of green_options
        if self.green_options:
            _dict['greenOptions'] = self.green_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_options
        if self.payment_options:
            _dict['paymentOptions'] = self.payment_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rates
        if self.rates:
            _dict['rates'] = self.rates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of retailer
        if self.retailer:
            _dict['retailer'] = self.retailer.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Plan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "benefits": Benefits.from_dict(obj["benefits"]) if obj.get("benefits") is not None else None,
            "conditions": Conditions.from_dict(obj["conditions"]) if obj.get("conditions") is not None else None,
            "contract": Contract.from_dict(obj["contract"]) if obj.get("contract") is not None else None,
            "defaultOfferMessage": obj.get("defaultOfferMessage"),
            "directDebitRequired": obj.get("directDebitRequired"),
            "discounts": PlanDiscounts.from_dict(obj["discounts"]) if obj.get("discounts") is not None else None,
            "estimatedBaseCost": obj.get("estimatedBaseCost"),
            "estimatedSaving": obj.get("estimatedSaving"),
            "estimatedTotalCost": obj.get("estimatedTotalCost"),
            "feesAndCharges": Fees.from_dict(obj["feesAndCharges"]) if obj.get("feesAndCharges") is not None else None,
            "greenOptions": NameValue.from_dict(obj["greenOptions"]) if obj.get("greenOptions") is not None else None,
            "id": obj.get("id"),
            "name": obj.get("name"),
            "payOnTimeRequired": obj.get("payOnTimeRequired"),
            "paymentOptions": NameValue.from_dict(obj["paymentOptions"]) if obj.get("paymentOptions") is not None else None,
            "rates": Rates.from_dict(obj["rates"]) if obj.get("rates") is not None else None,
            "retailer": Retailer.from_dict(obj["retailer"]) if obj.get("retailer") is not None else None,
            "type": obj.get("type"),
            "url": obj.get("url")
        })
        return _obj



# coding: utf-8

"""
    Frankie Financial API

    ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 

    The version of the OpenAPI document: 1.5.3
    Contact: dev-support@frankiefinancial.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.business_details import BusinessDetails
from openapi_client.models.individual_data import IndividualData
from openapi_client.models.issue_list_items import IssueListItems
from openapi_client.models.non_individual_beneficial_owner import NonIndividualBeneficialOwner
from openapi_client.models.screening_result import ScreeningResult
from openapi_client.models.supplied_data import SuppliedData
from openapi_client.models.supplied_data_matches import SuppliedDataMatches
from typing import Optional, Set
from typing_extensions import Self

class UBOResponse(BaseModel):
    """
    UBOResponse
    """ # noqa: E501
    asic_search_timestamp: Optional[datetime] = Field(default=None, description="If an ASIC search was conducted, what was the date/time in RFC-3339 format ")
    business_details: Optional[BusinessDetails] = None
    business_screening_result: Optional[ScreeningResult] = None
    error_message: Optional[StrictStr] = Field(default=None, description="Only populated if there was an error whilst trying to initiate the UBO check.  Signifies that no other result data will be supplied ")
    issues_list: Optional[List[IssueListItems]] = Field(default=None, description="A list of issues encountered whilst processing the UBO request and subsequent KYC/AML checks. ")
    non_individual_beneficial_owners: Optional[List[NonIndividualBeneficialOwner]] = Field(default=None, description="A list of organisations who have been determined to own a (potentially) beneficial interest the company.  The presence of non_individual_beneficial_owners indicates that not all individual ultimate beneficial owners could be determined.  Examples may include public companies, listed companies, foreign companies, corporate trusts or other entities whose beneficial owners are not readily available. ")
    officeholders: Optional[List[IndividualData]] = Field(default=None, description="A list of individuals who serve as current office holders the company ")
    supplied_data: SuppliedData
    supplied_data_matches: Optional[SuppliedDataMatches] = None
    ubo_report: Optional[StrictStr] = Field(default=None, description="The full URI of the UBO report PDF created as a part of this process (if requested) ")
    ultimate_beneficial_owners: Optional[List[IndividualData]] = Field(default=None, description="A list of individuals who have been determined to own, either directly or indirectly, 25% or more of the company ")
    __properties: ClassVar[List[str]] = ["asic_search_timestamp", "business_details", "business_screening_result", "error_message", "issues_list", "non_individual_beneficial_owners", "officeholders", "supplied_data", "supplied_data_matches", "ubo_report", "ultimate_beneficial_owners"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UBOResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of business_details
        if self.business_details:
            _dict['business_details'] = self.business_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of business_screening_result
        if self.business_screening_result:
            _dict['business_screening_result'] = self.business_screening_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in issues_list (list)
        _items = []
        if self.issues_list:
            for _item_issues_list in self.issues_list:
                if _item_issues_list:
                    _items.append(_item_issues_list.to_dict())
            _dict['issues_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in non_individual_beneficial_owners (list)
        _items = []
        if self.non_individual_beneficial_owners:
            for _item_non_individual_beneficial_owners in self.non_individual_beneficial_owners:
                if _item_non_individual_beneficial_owners:
                    _items.append(_item_non_individual_beneficial_owners.to_dict())
            _dict['non_individual_beneficial_owners'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in officeholders (list)
        _items = []
        if self.officeholders:
            for _item_officeholders in self.officeholders:
                if _item_officeholders:
                    _items.append(_item_officeholders.to_dict())
            _dict['officeholders'] = _items
        # override the default output from pydantic by calling `to_dict()` of supplied_data
        if self.supplied_data:
            _dict['supplied_data'] = self.supplied_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of supplied_data_matches
        if self.supplied_data_matches:
            _dict['supplied_data_matches'] = self.supplied_data_matches.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ultimate_beneficial_owners (list)
        _items = []
        if self.ultimate_beneficial_owners:
            for _item_ultimate_beneficial_owners in self.ultimate_beneficial_owners:
                if _item_ultimate_beneficial_owners:
                    _items.append(_item_ultimate_beneficial_owners.to_dict())
            _dict['ultimate_beneficial_owners'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UBOResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asic_search_timestamp": obj.get("asic_search_timestamp"),
            "business_details": BusinessDetails.from_dict(obj["business_details"]) if obj.get("business_details") is not None else None,
            "business_screening_result": ScreeningResult.from_dict(obj["business_screening_result"]) if obj.get("business_screening_result") is not None else None,
            "error_message": obj.get("error_message"),
            "issues_list": [IssueListItems.from_dict(_item) for _item in obj["issues_list"]] if obj.get("issues_list") is not None else None,
            "non_individual_beneficial_owners": [NonIndividualBeneficialOwner.from_dict(_item) for _item in obj["non_individual_beneficial_owners"]] if obj.get("non_individual_beneficial_owners") is not None else None,
            "officeholders": [IndividualData.from_dict(_item) for _item in obj["officeholders"]] if obj.get("officeholders") is not None else None,
            "supplied_data": SuppliedData.from_dict(obj["supplied_data"]) if obj.get("supplied_data") is not None else None,
            "supplied_data_matches": SuppliedDataMatches.from_dict(obj["supplied_data_matches"]) if obj.get("supplied_data_matches") is not None else None,
            "ubo_report": obj.get("ubo_report"),
            "ultimate_beneficial_owners": [IndividualData.from_dict(_item) for _item in obj["ultimate_beneficial_owners"]] if obj.get("ultimate_beneficial_owners") is not None else None
        })
        return _obj



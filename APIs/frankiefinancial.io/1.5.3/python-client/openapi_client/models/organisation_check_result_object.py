# coding: utf-8

"""
    Frankie Financial API

    ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 

    The version of the OpenAPI document: 1.5.3
    Contact: dev-support@frankiefinancial.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.check_entity_check_result_object import CheckEntityCheckResultObject
from openapi_client.models.error_object import ErrorObject
from typing import Optional, Set
from typing_extensions import Self

class OrganisationCheckResultObject(BaseModel):
    """
    The results of KYC/AML check on a organisation with a prior ownership query. This will be retrived via GET /retrieve/response/{requestId} after you receive a notification that the results are ready. 
    """ # noqa: E501
    entity_categories: Optional[Dict[str, List[StrictStr]]] = Field(default=None, description="A map of the entity categories that were selected for checks and an array of the entity IDs for each. The results for each entity ID will be in either the entityCheckResults or entityCheckErrors maps. Entities may appear in more than one category. ", alias="entityCategories")
    entity_check_errors: Optional[Dict[str, ErrorObject]] = Field(default=None, description="A map of outright errors (failure to generate any kind of result). These objects will be referenced by entity ID in the entity category map. ", alias="entityCheckErrors")
    entity_check_results: Optional[Dict[str, CheckEntityCheckResultObject]] = Field(default=None, description="List of all entities check results (both individuals and organisations) other than outright errors. These objects will be referenced by entity ID in the entity category map. ", alias="entityCheckResults")
    entity_id: Optional[StrictStr] = Field(default=None, description="The entityId of the organisation for which this result was created. ", alias="entityId")
    group_id: Optional[StrictStr] = Field(default=None, description="The unique ID for grouping all new KYC/AML checks in this result. This is only for Frankie internal use. ", alias="groupId")
    __properties: ClassVar[List[str]] = ["entityCategories", "entityCheckErrors", "entityCheckResults", "entityId", "groupId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrganisationCheckResultObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in entity_check_errors (dict)
        _field_dict = {}
        if self.entity_check_errors:
            for _key_entity_check_errors in self.entity_check_errors:
                if self.entity_check_errors[_key_entity_check_errors]:
                    _field_dict[_key_entity_check_errors] = self.entity_check_errors[_key_entity_check_errors].to_dict()
            _dict['entityCheckErrors'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in entity_check_results (dict)
        _field_dict = {}
        if self.entity_check_results:
            for _key_entity_check_results in self.entity_check_results:
                if self.entity_check_results[_key_entity_check_results]:
                    _field_dict[_key_entity_check_results] = self.entity_check_results[_key_entity_check_results].to_dict()
            _dict['entityCheckResults'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrganisationCheckResultObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "entityCategories": obj.get("entityCategories"),
            "entityCheckErrors": dict(
                (_k, ErrorObject.from_dict(_v))
                for _k, _v in obj["entityCheckErrors"].items()
            )
            if obj.get("entityCheckErrors") is not None
            else None,
            "entityCheckResults": dict(
                (_k, CheckEntityCheckResultObject.from_dict(_v))
                for _k, _v in obj["entityCheckResults"].items()
            )
            if obj.get("entityCheckResults") is not None
            else None,
            "entityId": obj.get("entityId"),
            "groupId": obj.get("groupId")
        })
        return _obj



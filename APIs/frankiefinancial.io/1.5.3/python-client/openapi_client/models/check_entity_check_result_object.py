# coding: utf-8

"""
    Frankie Financial API

    ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 

    The version of the OpenAPI document: 1.5.3
    Contact: dev-support@frankiefinancial.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.check_entity_check_result_object_entity_result import CheckEntityCheckResultObjectEntityResult
from openapi_client.models.entity_object import EntityObject
from openapi_client.models.entity_profile_result_object import EntityProfileResultObject
from openapi_client.models.fraud_check_result_object import FraudCheckResultObject
from openapi_client.models.process_result_object import ProcessResultObject
from typing import Optional, Set
from typing_extensions import Self

class CheckEntityCheckResultObject(BaseModel):
    """
    Describes all of the checks that were carried out against an entity as part of our cascading check process. Because there are a number of steps involved in checking an entity, (including the use of past checks done by you or others), there is an overall summary check result that will tell you the final disposition of the the check you requested.  So if you requested a 2+2+governmentID+pep/sanctions/etc (i.e. everything) then there would have been several checks done in order to meet this requirement. Some may have even failed, but eventually we got there. The summary gives the final assessment, based on all available data.  Detailed writeups on how this all works can be found here:   https://apidocs.frankiefinancial.com/docs/understanding-checksummary-results 
    """ # noqa: E501
    blacklist_check_results: Optional[List[ProcessResultObject]] = Field(default=None, description="Collection of check results for the entity having been previously blacklisted.  An array of matched blacklisted entities sorted by match confidence level (highest first). ", alias="blacklistCheckResults")
    check_results_list_summaries: Optional[List[ProcessResultObject]] = Field(default=None, description="Contains a list of all checkSummary records (one for each check)", alias="checkResultsListSummaries")
    check_risk: Optional[ProcessResultObject] = Field(default=None, alias="checkRisk")
    check_summary: Optional[ProcessResultObject] = Field(default=None, alias="checkSummary")
    device_check_results: Optional[List[ProcessResultObject]] = Field(default=None, description="We can perform a number of device checks on an entity, such as those from ThreatMetrix and/or BioCatch. If one of these checks was incorporated into the ID check, then these will appear here. ", alias="deviceCheckResults")
    duplicate_check_results: Optional[List[ProcessResultObject]] = Field(default=None, description="Collection of check results for the entity having previously been checked.  An array of matched checked entities sorted by match confidence level (highest first). ", alias="duplicateCheckResults")
    entity: Optional[EntityObject] = None
    entity_profile_result: Optional[EntityProfileResultObject] = Field(default=None, alias="entityProfileResult")
    entity_result: Optional[CheckEntityCheckResultObjectEntityResult] = Field(default=None, alias="entityResult")
    fraud_check_results: Optional[FraudCheckResultObject] = Field(default=None, alias="fraudCheckResults")
    manual_check_results: Optional[List[ProcessResultObject]] = Field(default=None, description="Collection of check results for the manual KYC.  An array of one entry with the manual check result. ", alias="manualCheckResults")
    request_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for every request. Can be used for tracking down answers with technical support.   Uses the ULID format (a time-based, sortable UUID)  Note: this will be different for every request. ", alias="requestId")
    shared_blocklist_check_results: Optional[List[ProcessResultObject]] = Field(default=None, description="Collection of check results for the entity having been previously blacklisted in shared blocklist.  An array of matched blacklisted entities sorted by match confidence level (highest first). ", alias="sharedBlocklistCheckResults")
    __properties: ClassVar[List[str]] = ["blacklistCheckResults", "checkResultsListSummaries", "checkRisk", "checkSummary", "deviceCheckResults", "duplicateCheckResults", "entity", "entityProfileResult", "entityResult", "fraudCheckResults", "manualCheckResults", "requestId", "sharedBlocklistCheckResults"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CheckEntityCheckResultObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in blacklist_check_results (list)
        _items = []
        if self.blacklist_check_results:
            for _item_blacklist_check_results in self.blacklist_check_results:
                if _item_blacklist_check_results:
                    _items.append(_item_blacklist_check_results.to_dict())
            _dict['blacklistCheckResults'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in check_results_list_summaries (list)
        _items = []
        if self.check_results_list_summaries:
            for _item_check_results_list_summaries in self.check_results_list_summaries:
                if _item_check_results_list_summaries:
                    _items.append(_item_check_results_list_summaries.to_dict())
            _dict['checkResultsListSummaries'] = _items
        # override the default output from pydantic by calling `to_dict()` of check_risk
        if self.check_risk:
            _dict['checkRisk'] = self.check_risk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of check_summary
        if self.check_summary:
            _dict['checkSummary'] = self.check_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in device_check_results (list)
        _items = []
        if self.device_check_results:
            for _item_device_check_results in self.device_check_results:
                if _item_device_check_results:
                    _items.append(_item_device_check_results.to_dict())
            _dict['deviceCheckResults'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in duplicate_check_results (list)
        _items = []
        if self.duplicate_check_results:
            for _item_duplicate_check_results in self.duplicate_check_results:
                if _item_duplicate_check_results:
                    _items.append(_item_duplicate_check_results.to_dict())
            _dict['duplicateCheckResults'] = _items
        # override the default output from pydantic by calling `to_dict()` of entity
        if self.entity:
            _dict['entity'] = self.entity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entity_profile_result
        if self.entity_profile_result:
            _dict['entityProfileResult'] = self.entity_profile_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entity_result
        if self.entity_result:
            _dict['entityResult'] = self.entity_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fraud_check_results
        if self.fraud_check_results:
            _dict['fraudCheckResults'] = self.fraud_check_results.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in manual_check_results (list)
        _items = []
        if self.manual_check_results:
            for _item_manual_check_results in self.manual_check_results:
                if _item_manual_check_results:
                    _items.append(_item_manual_check_results.to_dict())
            _dict['manualCheckResults'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shared_blocklist_check_results (list)
        _items = []
        if self.shared_blocklist_check_results:
            for _item_shared_blocklist_check_results in self.shared_blocklist_check_results:
                if _item_shared_blocklist_check_results:
                    _items.append(_item_shared_blocklist_check_results.to_dict())
            _dict['sharedBlocklistCheckResults'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CheckEntityCheckResultObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blacklistCheckResults": [ProcessResultObject.from_dict(_item) for _item in obj["blacklistCheckResults"]] if obj.get("blacklistCheckResults") is not None else None,
            "checkResultsListSummaries": [ProcessResultObject.from_dict(_item) for _item in obj["checkResultsListSummaries"]] if obj.get("checkResultsListSummaries") is not None else None,
            "checkRisk": ProcessResultObject.from_dict(obj["checkRisk"]) if obj.get("checkRisk") is not None else None,
            "checkSummary": ProcessResultObject.from_dict(obj["checkSummary"]) if obj.get("checkSummary") is not None else None,
            "deviceCheckResults": [ProcessResultObject.from_dict(_item) for _item in obj["deviceCheckResults"]] if obj.get("deviceCheckResults") is not None else None,
            "duplicateCheckResults": [ProcessResultObject.from_dict(_item) for _item in obj["duplicateCheckResults"]] if obj.get("duplicateCheckResults") is not None else None,
            "entity": EntityObject.from_dict(obj["entity"]) if obj.get("entity") is not None else None,
            "entityProfileResult": EntityProfileResultObject.from_dict(obj["entityProfileResult"]) if obj.get("entityProfileResult") is not None else None,
            "entityResult": CheckEntityCheckResultObjectEntityResult.from_dict(obj["entityResult"]) if obj.get("entityResult") is not None else None,
            "fraudCheckResults": FraudCheckResultObject.from_dict(obj["fraudCheckResults"]) if obj.get("fraudCheckResults") is not None else None,
            "manualCheckResults": [ProcessResultObject.from_dict(_item) for _item in obj["manualCheckResults"]] if obj.get("manualCheckResults") is not None else None,
            "requestId": obj.get("requestId"),
            "sharedBlocklistCheckResults": [ProcessResultObject.from_dict(_item) for _item in obj["sharedBlocklistCheckResults"]] if obj.get("sharedBlocklistCheckResults") is not None else None
        })
        return _obj



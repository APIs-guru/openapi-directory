# coding: utf-8

"""
    Frankie Financial API

    ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 

    The version of the OpenAPI document: 1.5.3
    Contact: dev-support@frankiefinancial.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.court_judgement import CourtJudgement
from openapi_client.models.insolvency_notice import InsolvencyNotice
from openapi_client.models.loan import Loan
from openapi_client.models.mercantile_enquiry import MercantileEnquiry
from openapi_client.models.payment_default import PaymentDefault
from typing import Optional, Set
from typing_extensions import Self

class ReportCreditReport(BaseModel):
    """
    ReportCreditReport
    """ # noqa: E501
    court_judgements: Optional[List[CourtJudgement]] = Field(default=None, description="CreditorWatch aggregate data from courts around Australia to provide a summary of court actions against an entity. When available, details of the action include location, case number, state, plaintiff, nature of the claim, action type and dollar amount.", alias="courtJudgements")
    credit_enquiries: Optional[StrictInt] = Field(default=None, description="Credit enquiries provide an indication of the number of times an entity's credit file has been accessed.", alias="creditEnquiries")
    insolvency_notices: Optional[List[InsolvencyNotice]] = Field(default=None, description="Insolvency and other published notices are provided by ASIC. These published notices provide details on external administrations, winding up applications (voluntary or by a court) and proposed company deregistrations, amongst other things. The notices contain important contact details and dates for creditors. These notices are provided directly from the ASIC insolvency notices website. If you require further information, visit:     https://insolvencynotices.asic.gov.au.", alias="insolvencyNotices")
    loans: Optional[List[Loan]] = None
    mercantile_enquiries: Optional[List[MercantileEnquiry]] = Field(default=None, description="A Mercantile enquiry is an indication that a mercantile agency (or debt collection agency) has conducted an enquiry on this entity for the purpose of debt collection.", alias="mercantileEnquiries")
    payment_defaults: Optional[List[PaymentDefault]] = Field(default=None, description="A default indicates that the debtor has failed to make a payment for goods or services. Payment Defaults are unique to CreditorWatch and  can have one of three statuses:    - outstanding   - partial payment   - settled. ", alias="paymentDefaults")
    __properties: ClassVar[List[str]] = ["courtJudgements", "creditEnquiries", "insolvencyNotices", "loans", "mercantileEnquiries", "paymentDefaults"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReportCreditReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in court_judgements (list)
        _items = []
        if self.court_judgements:
            for _item_court_judgements in self.court_judgements:
                if _item_court_judgements:
                    _items.append(_item_court_judgements.to_dict())
            _dict['courtJudgements'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in insolvency_notices (list)
        _items = []
        if self.insolvency_notices:
            for _item_insolvency_notices in self.insolvency_notices:
                if _item_insolvency_notices:
                    _items.append(_item_insolvency_notices.to_dict())
            _dict['insolvencyNotices'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in loans (list)
        _items = []
        if self.loans:
            for _item_loans in self.loans:
                if _item_loans:
                    _items.append(_item_loans.to_dict())
            _dict['loans'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in mercantile_enquiries (list)
        _items = []
        if self.mercantile_enquiries:
            for _item_mercantile_enquiries in self.mercantile_enquiries:
                if _item_mercantile_enquiries:
                    _items.append(_item_mercantile_enquiries.to_dict())
            _dict['mercantileEnquiries'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payment_defaults (list)
        _items = []
        if self.payment_defaults:
            for _item_payment_defaults in self.payment_defaults:
                if _item_payment_defaults:
                    _items.append(_item_payment_defaults.to_dict())
            _dict['paymentDefaults'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReportCreditReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "courtJudgements": [CourtJudgement.from_dict(_item) for _item in obj["courtJudgements"]] if obj.get("courtJudgements") is not None else None,
            "creditEnquiries": obj.get("creditEnquiries"),
            "insolvencyNotices": [InsolvencyNotice.from_dict(_item) for _item in obj["insolvencyNotices"]] if obj.get("insolvencyNotices") is not None else None,
            "loans": [Loan.from_dict(_item) for _item in obj["loans"]] if obj.get("loans") is not None else None,
            "mercantileEnquiries": [MercantileEnquiry.from_dict(_item) for _item in obj["mercantileEnquiries"]] if obj.get("mercantileEnquiries") is not None else None,
            "paymentDefaults": [PaymentDefault.from_dict(_item) for _item in obj["paymentDefaults"]] if obj.get("paymentDefaults") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Frankie Financial API

    ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 

    The version of the OpenAPI document: 1.5.3
    Contact: dev-support@frankiefinancial.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.enum_background_check_frequency import EnumBackgroundCheckFrequency
from openapi_client.models.enum_background_check_state import EnumBackgroundCheckState
from openapi_client.models.enum_background_check_type import EnumBackgroundCheckType
from openapi_client.models.key_value_pair_object import KeyValuePairObject
from typing import Optional, Set
from typing_extensions import Self

class BackgroundCheckResultObject(BaseModel):
    """
    Contains the details of a background check for a given entity. Background checks include Politically Exposed Person (PEP), sanctions lists, watchlists and adverse media.
    """ # noqa: E501
    background_check_type: Optional[EnumBackgroundCheckType] = Field(default=None, alias="backgroundCheckType")
    check_details: Optional[List[KeyValuePairObject]] = Field(default=None, description="Any additional notes that may relate to the state. Free form notes that may contain JSON blobs needing further interpretation.", alias="checkDetails")
    check_frequency: Optional[EnumBackgroundCheckFrequency] = Field(default=None, alias="checkFrequency")
    check_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for every check/comparison/verification. Make sure you reference this ID whenever updating check details. This ID will also be used when pushing check results back to you.", alias="checkId")
    check_performed_by: Optional[StrictStr] = Field(default=None, description="Service provider that performed the check. Basically the name of the connector, without the leading con_ ", alias="checkPerformedBy")
    check_source: Optional[StrictStr] = Field(default=None, description="Code that can be used to determine the underlying nature or data source of the checks performed. This may or may not be known by the connector, or may be a provider specific type (e.g. type \"O\") ", alias="checkSource")
    confidence_level: Optional[Annotated[int, Field(le=100, strict=True, ge=0)]] = Field(default=None, description="Confidence in the current results on a scale of 0 (none) to 100 (as certain as possible). Whole integers only.", alias="confidenceLevel")
    current_state: Optional[EnumBackgroundCheckState] = Field(default=None, alias="currentState")
    first_check_date: Optional[datetime] = Field(default=None, description="The date and time the item was first checked.", alias="firstCheckDate")
    latest_check_date: Optional[datetime] = Field(default=None, description="The date and time the item was last checked to provide this result.", alias="latestCheckDate")
    __properties: ClassVar[List[str]] = ["backgroundCheckType", "checkDetails", "checkFrequency", "checkId", "checkPerformedBy", "checkSource", "confidenceLevel", "currentState", "firstCheckDate", "latestCheckDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BackgroundCheckResultObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in check_details (list)
        _items = []
        if self.check_details:
            for _item_check_details in self.check_details:
                if _item_check_details:
                    _items.append(_item_check_details.to_dict())
            _dict['checkDetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BackgroundCheckResultObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backgroundCheckType": obj.get("backgroundCheckType"),
            "checkDetails": [KeyValuePairObject.from_dict(_item) for _item in obj["checkDetails"]] if obj.get("checkDetails") is not None else None,
            "checkFrequency": obj.get("checkFrequency"),
            "checkId": obj.get("checkId"),
            "checkPerformedBy": obj.get("checkPerformedBy"),
            "checkSource": obj.get("checkSource"),
            "confidenceLevel": obj.get("confidenceLevel"),
            "currentState": obj.get("currentState"),
            "firstCheckDate": obj.get("firstCheckDate"),
            "latestCheckDate": obj.get("latestCheckDate")
        })
        return _obj



# coding: utf-8

"""
    Frankie Financial API

    ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 

    The version of the OpenAPI document: 1.5.3
    Contact: dev-support@frankiefinancial.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address_object import AddressObject
from openapi_client.models.regulatory_information import RegulatoryInformation
from openapi_client.models.stock_exchange_data import StockExchangeData
from typing import Optional, Set
from typing_extensions import Self

class BusinessDetails(BaseModel):
    """
    The details of the company being checked 
    """ # noqa: E501
    abn: StrictStr = Field(alias="ABN")
    acn: StrictStr = Field(alias="ACN")
    arbn: StrictStr = Field(alias="ARBN")
    anzsic_code: StrictStr
    asic_company_type: Optional[StrictStr] = None
    business_names: Optional[List[StrictStr]] = None
    date_registered_with_asic: Optional[date] = None
    entity_id: Optional[StrictStr] = Field(default=None, description="Frankie's unique identifier for the business.  Uses a non-versioned UUID format ")
    giin: StrictStr
    place_of_business: Optional[AddressObject] = None
    public_company: Optional[StrictBool] = None
    registered_name: StrictStr
    registered_office: Optional[AddressObject] = None
    regulatory_information: Optional[RegulatoryInformation] = None
    state_registered_with_asic: Optional[StrictStr] = None
    stock_exchange_data: Optional[StockExchangeData] = None
    trading_names: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["ABN", "ACN", "ARBN", "anzsic_code", "asic_company_type", "business_names", "date_registered_with_asic", "entity_id", "giin", "place_of_business", "public_company", "registered_name", "registered_office", "regulatory_information", "state_registered_with_asic", "stock_exchange_data", "trading_names"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BusinessDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of place_of_business
        if self.place_of_business:
            _dict['place_of_business'] = self.place_of_business.to_dict()
        # override the default output from pydantic by calling `to_dict()` of registered_office
        if self.registered_office:
            _dict['registered_office'] = self.registered_office.to_dict()
        # override the default output from pydantic by calling `to_dict()` of regulatory_information
        if self.regulatory_information:
            _dict['regulatory_information'] = self.regulatory_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stock_exchange_data
        if self.stock_exchange_data:
            _dict['stock_exchange_data'] = self.stock_exchange_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BusinessDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ABN": obj.get("ABN"),
            "ACN": obj.get("ACN"),
            "ARBN": obj.get("ARBN"),
            "anzsic_code": obj.get("anzsic_code"),
            "asic_company_type": obj.get("asic_company_type"),
            "business_names": obj.get("business_names"),
            "date_registered_with_asic": obj.get("date_registered_with_asic"),
            "entity_id": obj.get("entity_id"),
            "giin": obj.get("giin"),
            "place_of_business": AddressObject.from_dict(obj["place_of_business"]) if obj.get("place_of_business") is not None else None,
            "public_company": obj.get("public_company"),
            "registered_name": obj.get("registered_name"),
            "registered_office": AddressObject.from_dict(obj["registered_office"]) if obj.get("registered_office") is not None else None,
            "regulatory_information": RegulatoryInformation.from_dict(obj["regulatory_information"]) if obj.get("regulatory_information") is not None else None,
            "state_registered_with_asic": obj.get("state_registered_with_asic"),
            "stock_exchange_data": StockExchangeData.from_dict(obj["stock_exchange_data"]) if obj.get("stock_exchange_data") is not None else None,
            "trading_names": obj.get("trading_names")
        })
        return _obj



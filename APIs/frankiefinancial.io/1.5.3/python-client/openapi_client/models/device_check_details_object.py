# coding: utf-8

"""
    Frankie Financial API

    ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 

    The version of the OpenAPI document: 1.5.3
    Contact: dev-support@frankiefinancial.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.key_value_pair_object import KeyValuePairObject
from typing import Optional, Set
from typing_extensions import Self

class DeviceCheckDetailsObject(BaseModel):
    """
    Contains any/all details we want to pass on to the device/biometric checking service as part of an activity / transaction. A transaction isn't just a payment, but can represent a number of different interaction types. See below for more. 
    """ # noqa: E501
    activity_type: Optional[StrictStr] = Field(default=None, description="The type of activity we're checking. Choices are:   - SIGNUP: Used when an entity is signing up to your service  - LOGIN: Used when an already registered entity is logging in to your service  - PAYMENT: Used when you wish to check that all is well for a payment  - CONFIRMATION: User has confirmed an action and you wish to double check they're still legitimate    You can also supply vendor specific activityTypes if you know them. To do this, make the first character an underscore _.   So for example, to use BioCatch's LOGIN_3 type, you can send \"_LOGIN_3\" as a value. Note, if you do this, there is no error checking on the Frankie side, and thus if you supply an incorrect value, the call will fail. ", alias="activityType")
    additional_data: Optional[List[KeyValuePairObject]] = Field(default=None, description="Collection of additional data points you wish to add to the activity check. These are defined in conjunction with the Customer and the device checking service being used.  Standard values are supplied upon request:  | kvpKey | kvpType | kvpValue | | ------- | -------- | -------- | | detectedIp | general.string | The IP address you detect the transaction coming from | | accountId.src | id.external | Your account identifier. Can be a SHA hash or similar | | accountId.dst | id.external | Target/payee account identifier. Can be a SHA hash or similar | | entityId | id.external | Use this to override the Frankie entityID that would be used to identify | | amount | general.float | Amount involved in the transaction  | | platform  | general.string | One of APP, WEB, MOBILE_WEB. Assumes APP if not supplied | |   |   |   Like the activityType, you can also specify vendor specific additional data parameters by adding a leading underscore \"_\" to the kvpKey. You can set the kvpType to one of the available types, or just use general.string (recommended) ", alias="additionalData")
    check_session_key: Optional[StrictStr] = Field(default=None, description="the unique session based ID that will be checked against the service.", alias="checkSessionKey")
    check_type: Optional[StrictStr] = Field(default=None, description="Describes the type of check service we need to verify with. Choices are:    - DEVICE: Services that will be checking device characteristics   - BIOMETRIC: Services that will be checking biomentric characteristics ", alias="checkType")
    __properties: ClassVar[List[str]] = ["activityType", "additionalData", "checkSessionKey", "checkType"]

    @field_validator('activity_type')
    def activity_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SIGNUP', 'LOGIN', 'PAYMENT', 'CONFIRMATION', '_<Vendor Specific List>']):
            raise ValueError("must be one of enum values ('SIGNUP', 'LOGIN', 'PAYMENT', 'CONFIRMATION', '_<Vendor Specific List>')")
        return value

    @field_validator('check_type')
    def check_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEVICE', 'BIOMETRIC']):
            raise ValueError("must be one of enum values ('DEVICE', 'BIOMETRIC')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceCheckDetailsObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_data (list)
        _items = []
        if self.additional_data:
            for _item_additional_data in self.additional_data:
                if _item_additional_data:
                    _items.append(_item_additional_data.to_dict())
            _dict['additionalData'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceCheckDetailsObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activityType": obj.get("activityType"),
            "additionalData": [KeyValuePairObject.from_dict(_item) for _item in obj["additionalData"]] if obj.get("additionalData") is not None else None,
            "checkSessionKey": obj.get("checkSessionKey"),
            "checkType": obj.get("checkType")
        })
        return _obj



# coding: utf-8

"""
    Frankie Financial API

    ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 

    The version of the OpenAPI document: 1.5.3
    Contact: dev-support@frankiefinancial.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.enum_mime_type import EnumMIMEType
from openapi_client.models.enum_scan_data_retrieval_state import EnumScanDataRetrievalState
from openapi_client.models.enum_scan_side import EnumScanSide
from openapi_client.models.enum_scan_type import EnumScanType
from typing import Optional, Set
from typing_extensions import Self

class ScannedDocumentObject(BaseModel):
    """
    the document to be attached and optionally scanned (if supported)
    """ # noqa: E501
    scan_delete: Optional[StrictBool] = Field(default=None, description="Used as a way of indicating to the service that the original scanned document is not to be kept after it has been processed. We will retain any metadata and the results of processing (where required by regulation or the customer), but the original file uploaded will eventually be remnoved once processing is complete.   If ScanDelete is set to true, any call with /full at the end will still not return the file contents, regardless of whether the file has been deleted yet (the deletion process is a background task that can take a few minutes to occur) ", alias="ScanDelete")
    scan_created: Optional[datetime] = Field(default=None, description="The date and time the scan was created. Not the date of the scanned document, which should be in the idIssued attribute of the document that owns this scan. ", alias="scanCreated")
    scan_data: Optional[Union[Annotated[bytes, Field(strict=True)], Annotated[str, Field(strict=True)]]] = Field(default=None, description="Base64 encoded string of a photo or scan of an ID document to be verified. If supplied and of a supported type, the Frankie service will attempt to use OCR tech to extract the data from the scanned doc/image.  In a result message, this field will be left blank, unless the \"full\" action is requested. ", alias="scanData")
    scan_data_retrieval_state: Optional[EnumScanDataRetrievalState] = Field(default=None, alias="scanDataRetrievalState")
    scan_doc_id: Optional[StrictStr] = Field(default=None, description="When an document scan is created/uploaded, it is assigned a scanDocId. You'll see this in a successful response or successfully accepted response. This can then be referenced in subsequent calls if you're uploading more/updated data. ", alias="scanDocId")
    scan_filename: Optional[StrictStr] = Field(default=None, description="If you're uploading a file where it's important to keep the original filename, then you can provide that here. Otherwise the Frankie service will assign an arbitrary name based on the scanDocIdand an extension based on the MIME type ", alias="scanFilename")
    scan_mime: Optional[EnumMIMEType] = Field(default=None, alias="scanMIME")
    scan_page_num: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="If uploading multiple pages - it's handy to keep a track of these. There is no enforcement of these numbers at all. You can have 10 page 1's and a page 29 if you wish. ", alias="scanPageNum")
    scan_side: Optional[EnumScanSide] = Field(default=None, alias="scanSide")
    scan_type: Optional[EnumScanType] = Field(default=None, alias="scanType")
    __properties: ClassVar[List[str]] = ["ScanDelete", "scanCreated", "scanData", "scanDataRetrievalState", "scanDocId", "scanFilename", "scanMIME", "scanPageNum", "scanSide", "scanType"]

    @field_validator('scan_data')
    def scan_data_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$", value):
            raise ValueError(r"must validate the regular expression /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScannedDocumentObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScannedDocumentObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ScanDelete": obj.get("ScanDelete"),
            "scanCreated": obj.get("scanCreated"),
            "scanData": obj.get("scanData"),
            "scanDataRetrievalState": obj.get("scanDataRetrievalState"),
            "scanDocId": obj.get("scanDocId"),
            "scanFilename": obj.get("scanFilename"),
            "scanMIME": obj.get("scanMIME"),
            "scanPageNum": obj.get("scanPageNum"),
            "scanSide": obj.get("scanSide"),
            "scanType": obj.get("scanType")
        })
        return _obj



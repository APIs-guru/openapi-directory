# coding: utf-8

"""
    Frankie Financial API

    ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 

    The version of the OpenAPI document: 1.5.3
    Contact: dev-support@frankiefinancial.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enum_document_status import EnumDocumentStatus
from openapi_client.models.enum_id_type import EnumIdType
from openapi_client.models.key_value_pair_object import KeyValuePairObject
from openapi_client.models.scanned_document_object import ScannedDocumentObject
from typing import Optional, Set
from typing_extensions import Self

class IdentityDocumentObject(BaseModel):
    """
    IdentityDocumentObject
    """ # noqa: E501
    country: StrictStr = Field(description="The ISO-3166-alpha3 country code of the issuing national. Once set, this cannot be changed.  See https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes for more ")
    created_from_scan: Optional[StrictBool] = Field(default=None, description="This document's data was initially created from scanned and processed images. The value cannot be set manually and any attempt to do so will just be ignored. ", alias="createdFromScan")
    doc_scan: Optional[List[ScannedDocumentObject]] = Field(default=None, description="Collection of one or more objects that describe scan(s) that need to be put through OCR or facial recognition. These should all be from the one ID document, such as front/back, or page 1, 2, 3, etc. You can upload multiple scans in a single call, or in multiple calls.     Note: if you do upload over multiple calls, make sure you include the documentId (see above), and indicate that this is happening with a \"more_data\" checkAction ", alias="docScan")
    document_id: Optional[StrictStr] = Field(default=None, description="When an ID document is created/uploaded, it is assigned a documentId. You'll see this in a successful response or successfully accepted response. This can then be referenced in subsequent calls if you're uploading more/updated data. ", alias="documentId")
    document_status: Optional[EnumDocumentStatus] = Field(default=None, alias="documentStatus")
    extra_data: Optional[List[KeyValuePairObject]] = Field(default=None, description="Set of key-value pairs that provide ID type-specific data. If updating an existing document, then existing values with the same name will be overwritten. New values will be added.  If this document is scanned through OCR or similar processes, then extracted data will be found here (Some may be used to populate other fields like idNumber and idExpiry as well) ", alias="extraData")
    id_expiry: Optional[date] = Field(default=None, description="The expiry date of the document (if known) in YYYY-MM-DD format.", alias="idExpiry")
    id_issued: Optional[date] = Field(default=None, description="The issued date of the document (if known) in YYYY-MM-DD format.", alias="idIssued")
    id_number: Optional[StrictStr] = Field(default=None, description="The ID number of the document (if known).", alias="idNumber")
    id_sub_type: Optional[StrictStr] = Field(default=None, description="The sub-type of identity document. Very document specific.", alias="idSubType")
    id_type: EnumIdType = Field(alias="idType")
    manually_modified: Optional[StrictBool] = Field(default=None, description="If this document was originally populated from scanned data, then manually adjusted (e.g. if the scan's results weren't 100% correct or data was missing), then this will be set to true. The value cannot be set manually and any attempt to do so will just be ignored. ", alias="manuallyModified")
    region: Optional[StrictStr] = Field(default=None, description="Regional variant of the ID (e.g. VIC drivers licence)  You should always use the local abbreviation for this. E.g.   - VIC for The Australian state of Victoria   - MA for the US state of Massachusetts   - etc ")
    __properties: ClassVar[List[str]] = ["country", "createdFromScan", "docScan", "documentId", "documentStatus", "extraData", "idExpiry", "idIssued", "idNumber", "idSubType", "idType", "manuallyModified", "region"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IdentityDocumentObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_from_scan",
            "manually_modified",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in doc_scan (list)
        _items = []
        if self.doc_scan:
            for _item_doc_scan in self.doc_scan:
                if _item_doc_scan:
                    _items.append(_item_doc_scan.to_dict())
            _dict['docScan'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in extra_data (list)
        _items = []
        if self.extra_data:
            for _item_extra_data in self.extra_data:
                if _item_extra_data:
                    _items.append(_item_extra_data.to_dict())
            _dict['extraData'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IdentityDocumentObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "country": obj.get("country"),
            "createdFromScan": obj.get("createdFromScan"),
            "docScan": [ScannedDocumentObject.from_dict(_item) for _item in obj["docScan"]] if obj.get("docScan") is not None else None,
            "documentId": obj.get("documentId"),
            "documentStatus": obj.get("documentStatus"),
            "extraData": [KeyValuePairObject.from_dict(_item) for _item in obj["extraData"]] if obj.get("extraData") is not None else None,
            "idExpiry": obj.get("idExpiry"),
            "idIssued": obj.get("idIssued"),
            "idNumber": obj.get("idNumber"),
            "idSubType": obj.get("idSubType"),
            "idType": obj.get("idType"),
            "manuallyModified": obj.get("manuallyModified"),
            "region": obj.get("region")
        })
        return _obj



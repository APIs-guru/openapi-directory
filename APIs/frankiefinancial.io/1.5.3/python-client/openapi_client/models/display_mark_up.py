# coding: utf-8

"""
    Frankie Financial API

    ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 

    The version of the OpenAPI document: 1.5.3
    Contact: dev-support@frankiefinancial.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.display_mark_up_parameters_value import DisplayMarkUpParametersValue
from typing import Optional, Set
from typing_extensions import Self

class DisplayMarkUp(BaseModel):
    """
    DisplayMarkUp
    """ # noqa: E501
    attribute: Optional[StrictStr] = Field(default=None, description="Comma seperated list of attributes to apply to value when rendering.")
    children: Optional[List[DisplayMarkUp]] = Field(default=None, description="Children of element. This data structure is recursive with a DisplayMarkup  element having 0 or more DisplayMarkup children")
    confirmation: Optional[StrictStr] = Field(default=None, description="Does this statement need to be confirmed (with a checkbox)? Confirmation can be mandatory or optional. When the confirmation element is present a key element must also be present. The keys of all confirmed statements must be sent in the switch request. The absence of any mandatory confirmation will result in an error response from the switch request.")
    key: Optional[StrictStr] = Field(default=None, description="For elements that require confirmation, the key of each element that the user has accepted must be send in the switch request. The absence of any mandatory confirmation will result in an error response from the switch request.")
    name: Optional[StrictStr] = Field(default=None, description="Text to display as header/title of value.")
    parameters: Optional[Dict[str, DisplayMarkUpParametersValue]] = Field(default=None, description="Optional element which has a keyvalue pair associated with every data binding contained in the value element of the current object.")
    type: Optional[StrictStr] = Field(default=None, description="Type of component to be used for rendering")
    value: Optional[StrictStr] = Field(default=None, description="Data to be rendered. This data can contain data bindings (contained in {{ }}). If present in the string the parameters object will contain a key with the same name and the associated data (e.g a link).<br><br><div style=\"background-color:black;color:white;\">{<br>&nbsp;&nbsp;\"type\":&nbsp;\"text\",<br>&nbsp;&nbsp;\"value\":&nbsp;\"I&nbsp;accept&nbsp;the&nbsp;{{Terms&nbsp;and&nbsp;Conditions}}.\",<br>&nbsp;&nbsp;\"parameters\":&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;\"Terms&nbsp;and&nbsp;Conditions\":&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"type\":&nbsp;\"link\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"value\":&nbsp;\"https://www.accurassi.com.au/sample-terms-and-conditions/\"<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}</div>")
    __properties: ClassVar[List[str]] = ["attribute", "children", "confirmation", "key", "name", "parameters", "type", "value"]

    @field_validator('attribute')
    def attribute_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['bold']):
            raise ValueError("must be one of enum values ('bold')")
        return value

    @field_validator('confirmation')
    def confirmation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['optional', 'mandatory']):
            raise ValueError("must be one of enum values ('optional', 'mandatory')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['text', 'unorderedlist', 'orderedlist']):
            raise ValueError("must be one of enum values ('text', 'unorderedlist', 'orderedlist')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DisplayMarkUp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item_children in self.children:
                if _item_children:
                    _items.append(_item_children.to_dict())
            _dict['children'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in parameters (dict)
        _field_dict = {}
        if self.parameters:
            for _key_parameters in self.parameters:
                if self.parameters[_key_parameters]:
                    _field_dict[_key_parameters] = self.parameters[_key_parameters].to_dict()
            _dict['parameters'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DisplayMarkUp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attribute": obj.get("attribute"),
            "children": [DisplayMarkUp.from_dict(_item) for _item in obj["children"]] if obj.get("children") is not None else None,
            "confirmation": obj.get("confirmation"),
            "key": obj.get("key"),
            "name": obj.get("name"),
            "parameters": dict(
                (_k, DisplayMarkUpParametersValue.from_dict(_v))
                for _k, _v in obj["parameters"].items()
            )
            if obj.get("parameters") is not None
            else None,
            "type": obj.get("type"),
            "value": obj.get("value")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
DisplayMarkUp.model_rebuild(raise_errors=False)


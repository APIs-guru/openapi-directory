# coding: utf-8

"""
    Frankie Financial API

    ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 

    The version of the OpenAPI document: 1.5.3
    Contact: dev-support@frankiefinancial.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.current_bill_data_solar_inner import CurrentBillDataSolarInner
from openapi_client.models.period import Period
from openapi_client.models.retailer import Retailer
from typing import Optional, Set
from typing_extensions import Self

class CurrentBillData(BaseModel):
    """
    Data from uploaded bill
    """ # noqa: E501
    account_address: StrictStr = Field(description="Account (Billing) address.", alias="accountAddress")
    account_name: StrictStr = Field(description="Customer name.", alias="accountName")
    account_number: StrictStr = Field(description="Customer account number", alias="accountNumber")
    actual_plan_total_cost: Union[StrictFloat, StrictInt] = Field(description="Recalculated cost of the plan based on users comsumption and plan rates including discounts, rebates, concessions etc... Additional fees such as credit card processing fees are ignored.", alias="actualPlanTotalCost")
    bill_date_from: StrictStr = Field(description="Start date for billing period", alias="billDateFrom")
    bill_date_to: StrictStr = Field(description="End date for billing period", alias="billDateTo")
    days: StrictInt = Field(description="Number of days in billing period (billDateTo - billDateFrom)")
    discount: Union[StrictFloat, StrictInt] = Field(description="Total value of all unconditional discounts applied to the bill")
    fuel_type: StrictStr = Field(description="* `E` - Electricity ", alias="fuelType")
    nmi: StrictStr = Field(description="National Meter identifier (NMI)")
    periods: List[Period] = Field(description="Rates and charges for each period on the bill")
    retailer: Retailer
    solar: Optional[List[CurrentBillDataSolarInner]] = Field(default=None, description="Array of rates and charges for solar on the bill, by period. If no solar is present on the uploaded bill this object will not be present.")
    supply_address: StrictStr = Field(description="Supply address. This may differ from account address if bill payers address is different from account address.", alias="supplyAddress")
    __properties: ClassVar[List[str]] = ["accountAddress", "accountName", "accountNumber", "actualPlanTotalCost", "billDateFrom", "billDateTo", "days", "discount", "fuelType", "nmi", "periods", "retailer", "solar", "supplyAddress"]

    @field_validator('fuel_type')
    def fuel_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['E']):
            raise ValueError("must be one of enum values ('E')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CurrentBillData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in periods (list)
        _items = []
        if self.periods:
            for _item_periods in self.periods:
                if _item_periods:
                    _items.append(_item_periods.to_dict())
            _dict['periods'] = _items
        # override the default output from pydantic by calling `to_dict()` of retailer
        if self.retailer:
            _dict['retailer'] = self.retailer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in solar (list)
        _items = []
        if self.solar:
            for _item_solar in self.solar:
                if _item_solar:
                    _items.append(_item_solar.to_dict())
            _dict['solar'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CurrentBillData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountAddress": obj.get("accountAddress"),
            "accountName": obj.get("accountName"),
            "accountNumber": obj.get("accountNumber"),
            "actualPlanTotalCost": obj.get("actualPlanTotalCost"),
            "billDateFrom": obj.get("billDateFrom"),
            "billDateTo": obj.get("billDateTo"),
            "days": obj.get("days"),
            "discount": obj.get("discount"),
            "fuelType": obj.get("fuelType"),
            "nmi": obj.get("nmi"),
            "periods": [Period.from_dict(_item) for _item in obj["periods"]] if obj.get("periods") is not None else None,
            "retailer": Retailer.from_dict(obj["retailer"]) if obj.get("retailer") is not None else None,
            "solar": [CurrentBillDataSolarInner.from_dict(_item) for _item in obj["solar"]] if obj.get("solar") is not None else None,
            "supplyAddress": obj.get("supplyAddress")
        })
        return _obj



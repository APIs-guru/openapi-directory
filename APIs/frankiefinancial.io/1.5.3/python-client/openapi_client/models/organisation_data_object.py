# coding: utf-8

"""
    Frankie Financial API

    ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 

    The version of the OpenAPI document: 1.5.3
    Contact: dev-support@frankiefinancial.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.code_description import CodeDescription
from openapi_client.models.organisation_data_object_registration import OrganisationDataObjectRegistration
from openapi_client.models.share_structure_object import ShareStructureObject
from typing import Optional, Set
from typing_extensions import Self

class OrganisationDataObject(BaseModel):
    """
    Organisation details for entities. Returned from an ASIC report. 
    """ # noqa: E501
    adverse_credit_data_present: Optional[StrictBool] = Field(default=None, alias="adverseCreditDataPresent")
    var_class: Optional[CodeDescription] = Field(default=None, alias="class")
    disclosing_entity_indicator: Optional[StrictBool] = Field(default=None, alias="disclosingEntityIndicator")
    includes_non_beneficially_held: Optional[StrictBool] = Field(default=None, alias="includesNonBeneficiallyHeld")
    kyc_customer_type: Optional[StrictStr] = Field(default=None, alias="kycCustomerType")
    last_check_date: Optional[date] = Field(default=None, alias="lastCheckDate")
    ownership_resolved: Optional[StrictBool] = Field(default=None, alias="ownershipResolved")
    registered_name: Optional[StrictStr] = Field(default=None, alias="registeredName")
    registration: Optional[OrganisationDataObjectRegistration] = None
    share_structure: Optional[List[ShareStructureObject]] = Field(default=None, alias="shareStructure")
    start_date: Optional[date] = Field(default=None, alias="startDate")
    status: Optional[CodeDescription] = None
    subclass: Optional[CodeDescription] = None
    type: Optional[CodeDescription] = None
    __properties: ClassVar[List[str]] = ["adverseCreditDataPresent", "class", "disclosingEntityIndicator", "includesNonBeneficiallyHeld", "kycCustomerType", "lastCheckDate", "ownershipResolved", "registeredName", "registration", "shareStructure", "startDate", "status", "subclass", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrganisationDataObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_class
        if self.var_class:
            _dict['class'] = self.var_class.to_dict()
        # override the default output from pydantic by calling `to_dict()` of registration
        if self.registration:
            _dict['registration'] = self.registration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in share_structure (list)
        _items = []
        if self.share_structure:
            for _item_share_structure in self.share_structure:
                if _item_share_structure:
                    _items.append(_item_share_structure.to_dict())
            _dict['shareStructure'] = _items
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subclass
        if self.subclass:
            _dict['subclass'] = self.subclass.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrganisationDataObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adverseCreditDataPresent": obj.get("adverseCreditDataPresent"),
            "class": CodeDescription.from_dict(obj["class"]) if obj.get("class") is not None else None,
            "disclosingEntityIndicator": obj.get("disclosingEntityIndicator"),
            "includesNonBeneficiallyHeld": obj.get("includesNonBeneficiallyHeld"),
            "kycCustomerType": obj.get("kycCustomerType"),
            "lastCheckDate": obj.get("lastCheckDate"),
            "ownershipResolved": obj.get("ownershipResolved"),
            "registeredName": obj.get("registeredName"),
            "registration": OrganisationDataObjectRegistration.from_dict(obj["registration"]) if obj.get("registration") is not None else None,
            "shareStructure": [ShareStructureObject.from_dict(_item) for _item in obj["shareStructure"]] if obj.get("shareStructure") is not None else None,
            "startDate": obj.get("startDate"),
            "status": CodeDescription.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "subclass": CodeDescription.from_dict(obj["subclass"]) if obj.get("subclass") is not None else None,
            "type": CodeDescription.from_dict(obj["type"]) if obj.get("type") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Frankie Financial API

    ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 

    The version of the OpenAPI document: 1.5.3
    Contact: dev-support@frankiefinancial.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.document_search_result_object import DocumentSearchResultObject

class TestDocumentSearchResultObject(unittest.TestCase):
    """DocumentSearchResultObject unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DocumentSearchResultObject:
        """Test DocumentSearchResultObject
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DocumentSearchResultObject`
        """
        model = DocumentSearchResultObject()
        if include_optional:
            return DocumentSearchResultObject(
                document_search_results = [
                    openapi_client.models.document_search_result_list_item.DocumentSearchResultListItem(
                        confidence = openapi_client.models.search_result_confidence_object.SearchResultConfidenceObject(
                            level = 'HIGH', 
                            notes = [
                                ''
                                ], 
                            score = 70, ), 
                        document = openapi_client.models.identity_document_object.IdentityDocumentObject(
                            country = 'AUS', 
                            created_from_scan = True, 
                            doc_scan = [
                                openapi_client.models.scanned_document_object.ScannedDocumentObject(
                                    scan_delete = True, 
                                    scan_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    scan_data = 'VGhpcyBpcyBzb21lIGV4YW1wbGUgZGF0YS4gV29vLCBJIGJldCB5b3UgcmVncmV0IHRoZSB0aW1lIHlvdSB3YXN0ZWQgZGVjb2RpbmcgdGhpcywgaHVoPw==', 
                                    scan_data_retrieval_state = 'NORMAL', 
                                    scan_doc_id = '84a9a860-68ae-4d7d-9a53-54a1116d5051', 
                                    scan_filename = 'Important Document - ID1234567.pdf', 
                                    scan_mime = 'image/png', 
                                    scan_page_num = 1, 
                                    scan_side = 'F', 
                                    scan_type = 'PDF', )
                                ], 
                            document_id = '84a9a860-68ae-4d7d-9a53-54a1116d5051', 
                            document_status = 'DOC_SCANNED', 
                            extra_data = [
                                openapi_client.models.key_value_pair_object.KeyValuePairObject(
                                    kvp_key = 'Extra.Information', 
                                    kvp_type = 'general.string', 
                                    kvp_value = '123-456-789A', )
                                ], 
                            id_expiry = 'Fri Jan 31 19:00:00 EST 2020', 
                            id_issued = 'Fri Nov 03 19:00:00 EST 1972', 
                            id_number = '123456789', 
                            id_sub_type = '', 
                            id_type = 'DRIVERS_LICENCE', 
                            manually_modified = False, 
                            region = 'VIC', ), )
                    ],
                request_id = '01BFJA617JMJXEW6G7TDDXNSHX'
            )
        else:
            return DocumentSearchResultObject(
                request_id = '01BFJA617JMJXEW6G7TDDXNSHX',
        )
        """

    def testDocumentSearchResultObject(self):
        """Test DocumentSearchResultObject"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Frankie Financial API

    ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 

    The version of the OpenAPI document: 1.5.3
    Contact: dev-support@frankiefinancial.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.check_entity_check_result_object import CheckEntityCheckResultObject

class TestCheckEntityCheckResultObject(unittest.TestCase):
    """CheckEntityCheckResultObject unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CheckEntityCheckResultObject:
        """Test CheckEntityCheckResultObject
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CheckEntityCheckResultObject`
        """
        model = CheckEntityCheckResultObject()
        if include_optional:
            return CheckEntityCheckResultObject(
                blacklist_check_results = [
                    openapi_client.models.process_result_object.ProcessResultObject(
                        check_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        check_id = '54a1116d-68ae-4d7d-9a53-505184a9a860', 
                        check_performed_by = 'equifax', 
                        check_source = 'DVS', 
                        check_type = '', 
                        confidence_level = 70, 
                        provider_check_id = '', 
                        result_notes = [
                            openapi_client.models.key_value_pair_object.KeyValuePairObject(
                                kvp_key = 'Extra.Information', 
                                kvp_type = 'general.string', 
                                kvp_value = '123-456-789A', )
                            ], 
                        result_state = 'CHECKED_PARTIAL_SUCCESS', 
                        risk_level = 75, )
                    ],
                check_results_list_summaries = [
                    openapi_client.models.process_result_object.ProcessResultObject(
                        check_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        check_id = '54a1116d-68ae-4d7d-9a53-505184a9a860', 
                        check_performed_by = 'equifax', 
                        check_source = 'DVS', 
                        check_type = '', 
                        confidence_level = 70, 
                        provider_check_id = '', 
                        result_notes = [
                            openapi_client.models.key_value_pair_object.KeyValuePairObject(
                                kvp_key = 'Extra.Information', 
                                kvp_type = 'general.string', 
                                kvp_value = '123-456-789A', )
                            ], 
                        result_state = 'CHECKED_PARTIAL_SUCCESS', 
                        risk_level = 75, )
                    ],
                check_risk = openapi_client.models.process_result_object.ProcessResultObject(
                    check_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    check_id = '54a1116d-68ae-4d7d-9a53-505184a9a860', 
                    check_performed_by = 'equifax', 
                    check_source = 'DVS', 
                    check_type = '', 
                    confidence_level = 70, 
                    provider_check_id = '', 
                    result_notes = [
                        openapi_client.models.key_value_pair_object.KeyValuePairObject(
                            kvp_key = 'Extra.Information', 
                            kvp_type = 'general.string', 
                            kvp_value = '123-456-789A', )
                        ], 
                    result_state = 'CHECKED_PARTIAL_SUCCESS', 
                    risk_level = 75, ),
                check_summary = openapi_client.models.process_result_object.ProcessResultObject(
                    check_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    check_id = '54a1116d-68ae-4d7d-9a53-505184a9a860', 
                    check_performed_by = 'equifax', 
                    check_source = 'DVS', 
                    check_type = '', 
                    confidence_level = 70, 
                    provider_check_id = '', 
                    result_notes = [
                        openapi_client.models.key_value_pair_object.KeyValuePairObject(
                            kvp_key = 'Extra.Information', 
                            kvp_type = 'general.string', 
                            kvp_value = '123-456-789A', )
                        ], 
                    result_state = 'CHECKED_PARTIAL_SUCCESS', 
                    risk_level = 75, ),
                device_check_results = [
                    openapi_client.models.process_result_object.ProcessResultObject(
                        check_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        check_id = '54a1116d-68ae-4d7d-9a53-505184a9a860', 
                        check_performed_by = 'equifax', 
                        check_source = 'DVS', 
                        check_type = '', 
                        confidence_level = 70, 
                        provider_check_id = '', 
                        result_notes = [
                            openapi_client.models.key_value_pair_object.KeyValuePairObject(
                                kvp_key = 'Extra.Information', 
                                kvp_type = 'general.string', 
                                kvp_value = '123-456-789A', )
                            ], 
                        result_state = 'CHECKED_PARTIAL_SUCCESS', 
                        risk_level = 75, )
                    ],
                duplicate_check_results = [
                    openapi_client.models.process_result_object.ProcessResultObject(
                        check_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        check_id = '54a1116d-68ae-4d7d-9a53-505184a9a860', 
                        check_performed_by = 'equifax', 
                        check_source = 'DVS', 
                        check_type = '', 
                        confidence_level = 70, 
                        provider_check_id = '', 
                        result_notes = [
                            openapi_client.models.key_value_pair_object.KeyValuePairObject(
                                kvp_key = 'Extra.Information', 
                                kvp_type = 'general.string', 
                                kvp_value = '123-456-789A', )
                            ], 
                        result_state = 'CHECKED_PARTIAL_SUCCESS', 
                        risk_level = 75, )
                    ],
                entity = openapi_client.models.entity_object.EntityObject(
                    addresses = [
                        openapi_client.models.address_object.AddressObject(
                            address_id = '', 
                            address_type = 'RESIDENTIAL1', 
                            building_name = 'Tower of Babel', 
                            care_of = '', 
                            country = 'TST', 
                            end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            long_form = '42a Test Eagle Road, Testville, TST 123-TST, Testalia', 
                            postal_code = '123-TST', 
                            region = 'Test County', 
                            start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            state = 'TS', 
                            street_name = 'Test Eagle West', 
                            street_number = '42a', 
                            street_type = 'Road', 
                            suburb = 'Testburb', 
                            town = 'Testville', 
                            unit_number = 'Suite 1006', )
                        ], 
                    date_of_birth = openapi_client.models.dob_object.DOBObject(
                        country = 'AUS', 
                        locality = 'Brisbane', 
                        year_of_birth = '1978', ), 
                    entity_id = '84a9a860-68ae-4d7d-9a53-54a1116d5051', 
                    entity_profile = '', 
                    entity_type = 'INDIVIDUAL', 
                    extra_data = [
                        openapi_client.models.key_value_pair_object.KeyValuePairObject(
                            kvp_key = 'Extra.Information', 
                            kvp_type = 'general.string', 
                            kvp_value = '123-456-789A', )
                        ], 
                    flags = [
                        openapi_client.models.entity_flag_object.EntityFlagObject(
                            flag = '', 
                            value = 56, )
                        ], 
                    gender = 'F', 
                    identity_docs = [
                        openapi_client.models.identity_document_object.IdentityDocumentObject(
                            country = 'AUS', 
                            created_from_scan = True, 
                            doc_scan = [
                                openapi_client.models.scanned_document_object.ScannedDocumentObject(
                                    scan_delete = True, 
                                    scan_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    scan_data = 'VGhpcyBpcyBzb21lIGV4YW1wbGUgZGF0YS4gV29vLCBJIGJldCB5b3UgcmVncmV0IHRoZSB0aW1lIHlvdSB3YXN0ZWQgZGVjb2RpbmcgdGhpcywgaHVoPw==', 
                                    scan_data_retrieval_state = 'NORMAL', 
                                    scan_doc_id = '84a9a860-68ae-4d7d-9a53-54a1116d5051', 
                                    scan_filename = 'Important Document - ID1234567.pdf', 
                                    scan_mime = 'image/png', 
                                    scan_page_num = 1, 
                                    scan_side = 'F', 
                                    scan_type = 'PDF', )
                                ], 
                            document_id = '84a9a860-68ae-4d7d-9a53-54a1116d5051', 
                            document_status = 'DOC_SCANNED', 
                            id_expiry = 'Fri Jan 31 19:00:00 EST 2020', 
                            id_issued = 'Fri Nov 03 19:00:00 EST 1972', 
                            id_number = '123456789', 
                            id_sub_type = '', 
                            id_type = 'DRIVERS_LICENCE', 
                            manually_modified = False, 
                            region = 'VIC', )
                        ], 
                    name = openapi_client.models.personal_name_object.PersonalNameObject(
                        display_name = 'Jane Cecily Smith', 
                        family_name = 'Smith', 
                        given_name = 'Jane', 
                        honourific = 'Duchess', 
                        middle_name = 'Cecily', ), 
                    organisation_data = openapi_client.models.organisation_data_object.OrganisationDataObject(
                        adverse_credit_data_present = True, 
                        class = openapi_client.models.code_description.CodeDescription(
                            code = '', 
                            description = '', ), 
                        disclosing_entity_indicator = True, 
                        includes_non_beneficially_held = True, 
                        kyc_customer_type = '', 
                        last_check_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        ownership_resolved = True, 
                        registered_name = '', 
                        registration = openapi_client.models.organisation_data_object_registration.OrganisationDataObject_registration(
                            date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            previous_number = '', 
                            state = '', ), 
                        share_structure = [
                            openapi_client.models.share_structure_object.ShareStructureObject(
                                amount_due = 1.337, 
                                amount_paid = 1.337, 
                                class_code = '', 
                                class_title = '', 
                                doc_number = '', 
                                doc_number_qualifier = '', 
                                shares_issued = 56, 
                                status = '', )
                            ], 
                        start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        status = openapi_client.models.code_description.CodeDescription(
                            code = '', 
                            description = '', ), 
                        subclass = , 
                        type = , ), ),
                entity_profile_result = openapi_client.models.entity_profile_result_object.EntityProfileResultObject(
                    action_recommended = '', 
                    address_results = {
                        'key' : openapi_client.models.entity_profile_item_match_result_object.EntityProfileItemMatchResultObject(
                            checked = True, 
                            match_count = 5, 
                            match_sources = [
                                ''
                                ], 
                            match_type = 'gov_id', 
                            verified = True, )
                        }, 
                    check_id = '54a1116d-68ae-4d7d-9a53-505184a9a860', 
                    check_results = [
                        openapi_client.models.entity_profile_check_result_message.EntityProfileCheckResultMessage(
                            check_class = 'kyc', 
                            check_type = 'one_plus', 
                            code = '', 
                            message = 'Partial match', 
                            result = '', )
                        ], 
                    check_type = 'two_plus,id,pep_media', 
                    credit_header_failures = [
                        ''
                        ], 
                    document_results = {
                        'key' : openapi_client.models.entity_profile_item_match_result_object.EntityProfileItemMatchResultObject(
                            checked = True, 
                            match_count = 5, 
                            match_type = 'gov_id', 
                            verified = True, )
                        }, 
                    entity_id = '84a9a860-68ae-4d7d-9a53-54a1116d5051', 
                    issue_list = [
                        ''
                        ], 
                    kyc_results = [
                        openapi_client.models.entity_profile_kyc_match_result_object.EntityProfileKYCMatchResultObject(
                            match_count = 2, 
                            match_count_required = 1, 
                            match_types = {
                                'key' : openapi_client.models.entity_profile_kyc_match_result_object_match_types_value.EntityProfileKYCMatchResultObject_matchTypes_value(
                                    checked = True, 
                                    match_count = 1, 
                                    verified = True, )
                                }, 
                            verified = False, )
                        ], 
                    latest_check_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    manual_intervention = True, 
                    policy_name = 'SDD U18', 
                    profile_name = 'Credit', 
                    resolver_recommended = '', 
                    risk_level = 'LOW', 
                    risk_policy = 'SDD', ),
                entity_result = openapi_client.models.check_entity_check_result_object_entity_result.CheckEntityCheckResultObject_entityResult(
                    addresses_check = [
                        openapi_client.models.address_check_result_object.AddressCheckResultObject(
                            address = openapi_client.models.address_object.AddressObject(
                                address_id = '', 
                                address_type = 'RESIDENTIAL1', 
                                building_name = 'Tower of Babel', 
                                care_of = '', 
                                country = 'TST', 
                                end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                long_form = '42a Test Eagle Road, Testville, TST 123-TST, Testalia', 
                                postal_code = '123-TST', 
                                region = 'Test County', 
                                start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                state = 'TS', 
                                street_name = 'Test Eagle West', 
                                street_number = '42a', 
                                street_type = 'Road', 
                                suburb = 'Testburb', 
                                town = 'Testville', 
                                unit_number = 'Suite 1006', ), 
                            check_result = [
                                openapi_client.models.general_check_result_object.generalCheckResultObject(
                                    check_process_results = openapi_client.models.process_result_object.ProcessResultObject(
                                        check_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        check_id = '54a1116d-68ae-4d7d-9a53-505184a9a860', 
                                        check_performed_by = 'equifax', 
                                        check_source = 'DVS', 
                                        check_type = '', 
                                        confidence_level = 70, 
                                        provider_check_id = '', 
                                        result_notes = [
                                            openapi_client.models.key_value_pair_object.KeyValuePairObject(
                                                kvp_key = 'Extra.Information', 
                                                kvp_type = 'general.string', 
                                                kvp_value = '123-456-789A', )
                                            ], 
                                        result_state = 'CHECKED_PARTIAL_SUCCESS', 
                                        risk_level = 75, ), 
                                    check_requested_by = 'Bank', )
                                ], )
                        ], 
                    adverse_media_check = [
                        openapi_client.models.background_check_result_object.backgroundCheckResultObject(
                            background_check_type = 'PEP', 
                            check_details = [
                                openapi_client.models.key_value_pair_object.KeyValuePairObject(
                                    kvp_key = 'Extra.Information', 
                                    kvp_value = '123-456-789A', )
                                ], 
                            check_frequency = 'DAILY', 
                            check_performed_by = 'equifax', 
                            check_source = 'DVS', 
                            confidence_level = 70, 
                            current_state = 'CLEAR', 
                            first_check_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            latest_check_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    aml_result_sets = [
                        openapi_client.models.aml_result_set.AMLResultSet(
                            check_results_list_media = [
                                openapi_client.models.background_check_result_object_container.backgroundCheckResultObjectContainer(
                                    bcro = openapi_client.models.background_check_result_object.backgroundCheckResultObject(
                                        check_performed_by = 'equifax', 
                                        check_source = 'DVS', 
                                        confidence_level = 70, 
                                        first_check_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        latest_check_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                                    id = '', )
                                ], 
                            check_results_list_pep = [
                                openapi_client.models.background_check_result_object_container.backgroundCheckResultObjectContainer(
                                    id = '', )
                                ], 
                            check_results_list_sanctions = [
                                
                                ], 
                            check_results_list_watchlists = [
                                
                                ], 
                            group_details = , )
                        ], 
                    date_of_birth_check = openapi_client.models.dob_check_result_object.DOBCheckResultObject(
                        dob = openapi_client.models.dob_object.DOBObject(
                            country = 'AUS', 
                            date_of_birth = 'Sat Nov 11 19:00:00 EST 1978', 
                            locality = 'Brisbane', 
                            year_of_birth = '1978', ), ), 
                    entity_id = '84a9a860-68ae-4d7d-9a53-54a1116d5051', 
                    gender_check = openapi_client.models.gender_check_result_object.GenderCheckResultObject(
                        gender = 'F', ), 
                    identity_docs_check = [
                        openapi_client.models.identity_document_check_result_object.IdentityDocumentCheckResultObject(
                            id_document = openapi_client.models.identity_document_object.IdentityDocumentObject(
                                country = 'AUS', 
                                created_from_scan = True, 
                                doc_scan = [
                                    openapi_client.models.scanned_document_object.ScannedDocumentObject(
                                        scan_delete = True, 
                                        scan_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        scan_data = 'VGhpcyBpcyBzb21lIGV4YW1wbGUgZGF0YS4gV29vLCBJIGJldCB5b3UgcmVncmV0IHRoZSB0aW1lIHlvdSB3YXN0ZWQgZGVjb2RpbmcgdGhpcywgaHVoPw==', 
                                        scan_data_retrieval_state = 'NORMAL', 
                                        scan_doc_id = '84a9a860-68ae-4d7d-9a53-54a1116d5051', 
                                        scan_filename = 'Important Document - ID1234567.pdf', 
                                        scan_mime = 'image/png', 
                                        scan_page_num = 1, 
                                        scan_side = 'F', 
                                        scan_type = 'PDF', )
                                    ], 
                                document_id = '84a9a860-68ae-4d7d-9a53-54a1116d5051', 
                                document_status = 'DOC_SCANNED', 
                                extra_data = [
                                    
                                    ], 
                                id_expiry = 'Fri Jan 31 19:00:00 EST 2020', 
                                id_issued = 'Fri Nov 03 19:00:00 EST 1972', 
                                id_number = '123456789', 
                                id_sub_type = '', 
                                id_type = 'DRIVERS_LICENCE', 
                                manually_modified = False, 
                                region = 'VIC', ), )
                        ], 
                    name_check = openapi_client.models.personal_name_check_result_object.PersonalNameCheckResultObject(
                        name = openapi_client.models.personal_name_object.PersonalNameObject(
                            display_name = 'Jane Cecily Smith', 
                            family_name = 'Smith', 
                            given_name = 'Jane', 
                            honourific = 'Duchess', 
                            middle_name = 'Cecily', ), ), 
                    pep_check = [
                        
                        ], 
                    sanctions_check = [
                        
                        ], 
                    watchlist_check = [
                        
                        ], ),
                fraud_check_results = openapi_client.models.fraud_check_result_object.FraudCheckResultObject(
                    fraud_background_check_results = [
                        openapi_client.models.process_result_object.ProcessResultObject(
                            check_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            check_id = '54a1116d-68ae-4d7d-9a53-505184a9a860', 
                            check_performed_by = 'equifax', 
                            check_source = 'DVS', 
                            check_type = '', 
                            confidence_level = 70, 
                            provider_check_id = '', 
                            result_notes = [
                                openapi_client.models.key_value_pair_object.KeyValuePairObject(
                                    kvp_key = 'Extra.Information', 
                                    kvp_type = 'general.string', 
                                    kvp_value = '123-456-789A', )
                                ], 
                            result_state = 'CHECKED_PARTIAL_SUCCESS', 
                            risk_level = 75, )
                        ], 
                    fraud_list_results = [
                        openapi_client.models.process_result_object.ProcessResultObject(
                            check_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            check_performed_by = 'equifax', 
                            check_source = 'DVS', 
                            check_type = '', 
                            confidence_level = 70, 
                            provider_check_id = '', 
                            risk_level = 75, )
                        ], ),
                manual_check_results = [
                    openapi_client.models.process_result_object.ProcessResultObject(
                        check_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        check_id = '54a1116d-68ae-4d7d-9a53-505184a9a860', 
                        check_performed_by = 'equifax', 
                        check_source = 'DVS', 
                        check_type = '', 
                        confidence_level = 70, 
                        provider_check_id = '', 
                        result_notes = [
                            openapi_client.models.key_value_pair_object.KeyValuePairObject(
                                kvp_key = 'Extra.Information', 
                                kvp_type = 'general.string', 
                                kvp_value = '123-456-789A', )
                            ], 
                        result_state = 'CHECKED_PARTIAL_SUCCESS', 
                        risk_level = 75, )
                    ],
                request_id = '01BFJA617JMJXEW6G7TDDXNSHX',
                shared_blocklist_check_results = [
                    openapi_client.models.process_result_object.ProcessResultObject(
                        check_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        check_id = '54a1116d-68ae-4d7d-9a53-505184a9a860', 
                        check_performed_by = 'equifax', 
                        check_source = 'DVS', 
                        check_type = '', 
                        confidence_level = 70, 
                        provider_check_id = '', 
                        result_notes = [
                            openapi_client.models.key_value_pair_object.KeyValuePairObject(
                                kvp_key = 'Extra.Information', 
                                kvp_type = 'general.string', 
                                kvp_value = '123-456-789A', )
                            ], 
                        result_state = 'CHECKED_PARTIAL_SUCCESS', 
                        risk_level = 75, )
                    ]
            )
        else:
            return CheckEntityCheckResultObject(
        )
        """

    def testCheckEntityCheckResultObject(self):
        """Test CheckEntityCheckResultObject"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Frankie Financial API

    ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 

    The version of the OpenAPI document: 1.5.3
    Contact: dev-support@frankiefinancial.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.organisation_data_object import OrganisationDataObject

class TestOrganisationDataObject(unittest.TestCase):
    """OrganisationDataObject unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OrganisationDataObject:
        """Test OrganisationDataObject
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OrganisationDataObject`
        """
        model = OrganisationDataObject()
        if include_optional:
            return OrganisationDataObject(
                adverse_credit_data_present = True,
                var_class = openapi_client.models.code_description.CodeDescription(
                    code = '', 
                    description = '', ),
                disclosing_entity_indicator = True,
                includes_non_beneficially_held = True,
                kyc_customer_type = '',
                last_check_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                ownership_resolved = True,
                registered_name = '',
                registration = openapi_client.models.organisation_data_object_registration.OrganisationDataObject_registration(
                    date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    previous_number = '', 
                    state = '', ),
                share_structure = [
                    openapi_client.models.share_structure_object.ShareStructureObject(
                        amount_due = 1.337, 
                        amount_paid = 1.337, 
                        class_code = '', 
                        class_title = '', 
                        doc_number = '', 
                        doc_number_qualifier = '', 
                        shares_issued = 56, 
                        status = '', )
                    ],
                start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                status = openapi_client.models.code_description.CodeDescription(
                    code = '', 
                    description = '', ),
                subclass = openapi_client.models.code_description.CodeDescription(
                    code = '', 
                    description = '', ),
                type = openapi_client.models.code_description.CodeDescription(
                    code = '', 
                    description = '', )
            )
        else:
            return OrganisationDataObject(
        )
        """

    def testOrganisationDataObject(self):
        """Test OrganisationDataObject"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

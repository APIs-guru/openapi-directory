# coding: utf-8

"""
    Frankie Financial API

    ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 

    The version of the OpenAPI document: 1.5.3
    Contact: dev-support@frankiefinancial.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.director_and_share_details import DirectorAndShareDetails

class TestDirectorAndShareDetails(unittest.TestCase):
    """DirectorAndShareDetails unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DirectorAndShareDetails:
        """Test DirectorAndShareDetails
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DirectorAndShareDetails`
        """
        model = DirectorAndShareDetails()
        if include_optional:
            return DirectorAndShareDetails(
                persons_of_significant_control = openapi_client.models.array_of_psc_details.ArrayOfPSCDetails(
                    psc_details = [
                        openapi_client.models.psc_details.PSCDetails(
                            address = '', 
                            ceased_on = '', 
                            country_of_residence = '', 
                            dob_day = 56, 
                            dob_month = 56, 
                            dob_year = 56, 
                            kind = '', 
                            name = '', 
                            nationality = '', 
                            nature_of_control = openapi_client.models.array_of_string.ArrayOfString(
                                address_line = [
                                    ''
                                    ], ), 
                            notified_on = '', )
                        ], ),
                capital_reserves = openapi_client.models.capital_reserves.CapitalReserves(
                    capitalreserves = '', 
                    networth = '', 
                    paidupequity = '', 
                    profitlossreserve = '', 
                    reserves = '', 
                    revalutationreserve = '', 
                    shareholderfunds = '', 
                    sundryreserves = '', ),
                directors = openapi_client.models.array_of_director.ArrayOfDirector(
                    director = [
                        openapi_client.models.director.Director(
                            address1 = '', 
                            address2 = '', 
                            address3 = '', 
                            address4 = '', 
                            address5 = '', 
                            address6 = '', 
                            birthdate = '', 
                            director_number = '', 
                            directorships = openapi_client.models.array_of_directorship.ArrayOfDirectorship(
                                directorship = [
                                    openapi_client.models.directorship.Directorship(
                                        appointed_date = '', 
                                        company_name = '', 
                                        company_number = '', 
                                        company_status = '', 
                                        function = '', )
                                    ], ), 
                            name = '', 
                            nationality = '', 
                            postcode = '', 
                            title = '', )
                        ], ),
                share_holder_summary = openapi_client.models.shareholder_summary.ShareholderSummary(
                    share_capital = '', ),
                share_holders = openapi_client.models.array_of_shareholder_details.ArrayOfShareholderDetails(
                    shareholder_details = [
                        openapi_client.models.shareholder_details.ShareholderDetails(
                            address = '', 
                            all_info = '', 
                            currency = '', 
                            id = '', 
                            name = '', 
                            nationality = '', 
                            nominal_value = '', 
                            percentage = '', 
                            share_class = '', 
                            share_count = 56, 
                            share_type = '', 
                            shareholder_type = '', 
                            total_share_count = 56, 
                            total_share_value = 56, 
                            total_shares = 56, )
                        ], )
            )
        else:
            return DirectorAndShareDetails(
        )
        """

    def testDirectorAndShareDetails(self):
        """Test DirectorAndShareDetails"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

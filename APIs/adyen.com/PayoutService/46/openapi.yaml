openapi: 3.0.3
servers:
  - url: https://pal-test.adyen.com/pal/servlet/Payout/v46
info:
  contact:
    email: support@adyen.com
    name: Adyen Support
    url: https://support.adyen.com/
    x-twitter: Adyen
  description: >-
    A set of API endpoints that allow you to store payout details, confirm, or decline a payout.


    For more information, refer to [Online payouts](https://docs.adyen.com/checkout/online-payouts).
  termsOfService: https://www.adyen.com/legal/terms-and-conditions
  title: Adyen Payout API
  version: "46"
  x-apisguru-categories:
    - payment
  x-logo:
    url: https://twitter.com/Adyen/profile_image?size=original
  x-origin:
    - format: openapi
      url: https://raw.githubusercontent.com/Adyen/adyen-openapi/master/json/PayoutService-v46.json
      version: "3.0"
  x-preferred: false
  x-providerName: adyen.com
  x-serviceName: PayoutService
paths:
  /confirmThirdParty:
    post:
      description: >-
        Confirms a previously submitted payout.


        To cancel a payout, use the `/declineThirdParty` endpoint.
      operationId: post-confirmThirdParty
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModifyRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModifyResponse"
          description: OK - the request has succeeded.
        "400":
          description: Bad Request - a problem reading or understanding the request.
        "401":
          description: Unauthorized - authentication required.
        "403":
          description: Forbidden - insufficient permissions to process the request.
        "422":
          description: Unprocessable Entity - a request validation error.
        "500":
          description: Internal Server Error - the server could not process the request.
      summary: Confirms a payout.
      x-groupName: Reviewing
      x-sortIndex: 1
  /declineThirdParty:
    post:
      description: >-
        Cancels a previously submitted payout.


        To confirm and send a payout, use the `/confirmThirdParty` endpoint.
      operationId: post-declineThirdParty
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModifyRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModifyResponse"
          description: OK - the request has succeeded.
        "400":
          description: Bad Request - a problem reading or understanding the request.
        "401":
          description: Unauthorized - authentication required.
        "403":
          description: Forbidden - insufficient permissions to process the request.
        "422":
          description: Unprocessable Entity - a request validation error.
        "500":
          description: Internal Server Error - the server could not process the request.
      summary: Cancels a payout.
      x-groupName: Reviewing
      x-sortIndex: 2
  /payout:
    post:
      description: With this call, you can pay out to your customers, and funds will be made available within 30 minutes on the cardholder's bank account (this is dependent on whether the issuer supports this functionality). Instant card payouts are only supported for Visa and Mastercard cards.
      operationId: post-payout
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PayoutRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PayoutResponse"
          description: OK - the request has succeeded.
        "400":
          description: Bad Request - a problem reading or understanding the request.
        "401":
          description: Unauthorized - authentication required.
        "403":
          description: Forbidden - insufficient permissions to process the request.
        "422":
          description: Unprocessable Entity - a request validation error.
        "500":
          description: Internal Server Error - the server could not process the request.
      summary: Pay out directly.
      x-groupName: Instant payouts
      x-sortIndex: 1
  /storeDetail:
    post:
      description: Stores payment details under the `PAYOUT` recurring contract. These payment details can be used later to submit a payout via the `/submitThirdParty` call.
      operationId: post-storeDetail
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StoreDetailRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreDetailResponse"
          description: OK - the request has succeeded.
        "400":
          description: Bad Request - a problem reading or understanding the request.
        "401":
          description: Unauthorized - authentication required.
        "403":
          description: Forbidden - insufficient permissions to process the request.
        "422":
          description: Unprocessable Entity - a request validation error.
        "500":
          description: Internal Server Error - the server could not process the request.
      summary: Stores payout details.
      x-groupName: Initialization
      x-sortIndex: 2
  /storeDetailAndSubmitThirdParty:
    post:
      description: >-
        Submits a payout and stores its details for subsequent payouts.


        The submitted payout must be confirmed or declined either by a reviewer or via `/confirmThirdParty` or `/declineThirdParty` calls.
      operationId: post-storeDetailAndSubmitThirdParty
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StoreDetailAndSubmitRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreDetailAndSubmitResponse"
          description: OK - the request has succeeded.
        "400":
          description: Bad Request - a problem reading or understanding the request.
        "401":
          description: Unauthorized - authentication required.
        "403":
          description: Forbidden - insufficient permissions to process the request.
        "422":
          description: Unprocessable Entity - a request validation error.
        "500":
          description: Internal Server Error - the server could not process the request.
      summary: Stores details and submits a payout.
      x-groupName: Initialization
      x-sortIndex: 1
  /submitThirdParty:
    post:
      description: >-
        Submits a payout using the previously stored payment details. To store payment details, use the `/storeDetail` API call.


        The submitted payout must be confirmed or declined either by a reviewer or via `/confirmThirdParty` or `/declineThirdParty` calls.
      operationId: post-submitThirdParty
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmitRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubmitResponse"
          description: OK - the request has succeeded.
        "400":
          description: Bad Request - a problem reading or understanding the request.
        "401":
          description: Unauthorized - authentication required.
        "403":
          description: Forbidden - insufficient permissions to process the request.
        "422":
          description: Unprocessable Entity - a request validation error.
        "500":
          description: Internal Server Error - the server could not process the request.
      summary: Submits a payout.
      x-groupName: Initialization
      x-sortIndex: 3
components:
  schemas:
    AccountInfo:
      properties:
        accountAgeIndicator:
          description: >-
            Indicator for the length of time since this shopper account was created in the merchant's environment.

            Allowed values:

            * notApplicable

            * thisTransaction

            * lessThan30Days

            * from30To60Days

            * moreThan60Days
          enum:
            - notApplicable
            - thisTransaction
            - lessThan30Days
            - from30To60Days
            - moreThan60Days
          type: string
        accountChangeDate:
          description: Date when the shopper's account was last changed.
          format: date-time
          type: string
        accountChangeIndicator:
          description: >-
            Indicator for the length of time since the shopper's account was last updated.

            Allowed values:

            * thisTransaction

            * lessThan30Days

            * from30To60Days

            * moreThan60Days
          enum:
            - thisTransaction
            - lessThan30Days
            - from30To60Days
            - moreThan60Days
          type: string
        accountCreationDate:
          description: Date when the shopper's account was created.
          format: date-time
          type: string
        addCardAttemptsDay:
          description: Number of attempts the shopper tried to add a card to their account in the last day.
          format: int32
          type: integer
        deliveryAddressUsageDate:
          description: Date the selected delivery address was first used.
          format: date-time
          type: string
        deliveryAddressUsageIndicator:
          description: >-
            Indicator for the length of time since this delivery address was first used.

            Allowed values:

            * thisTransaction

            * lessThan30Days

            * from30To60Days

            * moreThan60Days
          enum:
            - thisTransaction
            - lessThan30Days
            - from30To60Days
            - moreThan60Days
          type: string
        homePhone:
          description: Shopper's home phone number (including the country code).
          type: string
        mobilePhone:
          description: Shopper's mobile phone number (including the country code).
          type: string
        passwordChangeDate:
          description: Date when the shopper last changed their password.
          format: date-time
          type: string
        passwordChangeIndicator:
          description: >-
            Indicator when the shopper has changed their password.

            Allowed values:

            * notApplicable

            * thisTransaction

            * lessThan30Days

            * from30To60Days

            * moreThan60Days
          enum:
            - notApplicable
            - thisTransaction
            - lessThan30Days
            - from30To60Days
            - moreThan60Days
          type: string
        pastTransactionsDay:
          description: Number of all transactions (successful and abandoned) from this shopper in the past 24 hours.
          format: int32
          type: integer
        pastTransactionsYear:
          description: Number of all transactions (successful and abandoned) from this shopper in the past year.
          format: int32
          type: integer
        paymentAccountAge:
          description: Date this payment method was added to the shopper's account.
          format: date-time
          type: string
        paymentAccountIndicator:
          description: >-
            Indicator for the length of time since this payment method was added to this shopper's account.

            Allowed values:

            * notApplicable

            * thisTransaction

            * lessThan30Days

            * from30To60Days

            * moreThan60Days
          enum:
            - notApplicable
            - thisTransaction
            - lessThan30Days
            - from30To60Days
            - moreThan60Days
          type: string
        purchasesLast6Months:
          description: Number of successful purchases in the last six months.
          format: int32
          type: integer
        suspiciousActivity:
          description: Whether suspicious activity was recorded on this account.
          type: boolean
        workPhone:
          description: Shopper's work phone number (including the country code).
          type: string
    AdditionalData3DSecure:
      properties:
        allow3DS2:
          description: >-
            This parameter indicates that you are able to process 3D Secure 2 transactions natively on your payment page. Send this field when you are using `/payments` endpoint with any of our [native 3D Secure 2 solutions](https://docs.adyen.com/checkout/3d-secure/native-3ds2), such as Components or Drop-in. Possible values:

            * **true** - Ready to support native 3D Secure 2 authentication. Setting this to true does not mean always applying 3D Secure 2. Adyen still selects the version of 3D Secure based on configuration to optimize authorisation rates and improve the shopper's experience.

            * **false** – Not ready to support native 3D Secure 2 authentication. Adyen will not offer 3D Secure 2 to your shopper regardless of your configuration.

            > This parameter only indicates your readiness to support 3D Secure 2 natively on Drop-in or Components. To specify that you want to perform 3D Secure on a transaction, use Dynamic 3D Secure or send the `executeThreeD` parameter.
          type: string
        executeThreeD:
          description: >-
            This parameter indicates if you want to perform 3D Secure authentication on a transaction or not. Allowed values:

            * **true** – Perform 3D Secure authentication.

            * **false** – Don't perform 3D Secure authentication.

            > Alternatively, you can also use Dynamic 3D Secure to configure rules for applying 3D Secure.
          type: string
        mpiImplementationType:
          description: In case of Secure+, this field must be set to **CUPSecurePlus**.
          type: string
        scaExemption:
          description: >-
            Indicates the [exemption type](https://docs.adyen.com/payments-fundamentals/psd2-sca-compliance-and-implementation-guide#specifypreferenceinyourapirequest) that you want to request for the transaction. Possible values:

            * **lowValue** 

            * **secureCorporate** 

            * **trustedBeneficiary** 

            * **transactionRiskAnalysis** 
          type: string
    AdditionalDataAirline:
      properties:
        airline.agency_invoice_number:
          description: >-
            Reference number for the invoice, issued by the agency.

            * minLength: 1

            * maxLength: 6
          type: string
        airline.agency_plan_name:
          description: >-
            2-letter agency plan identifier; alphabetical.

            * minLength: 2

            * maxLength: 2
          type: string
        airline.airline_code:
          description: >-
            [IATA](https://www.iata.org/services/pages/codes.aspx) 3-digit accounting code (PAX); numeric. It identifies the carrier.

            * Format: IATA 3-digit accounting code (PAX)

            * Example: KLM = 074

            * minLength: 3

            * maxLength: 3
          type: string
        airline.airline_designator_code:
          description: >-
            [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX); alphabetical. It identifies the carrier.

            * Format: [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter airline code

            * Example: KLM = KL

            * minLength: 2

            * maxLength: 2
          type: string
        airline.boarding_fee:
          description: >-
            Chargeable amount for boarding the plane.

            The transaction amount needs to be represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes).

            * minLength: 1

            * maxLength: 18
          type: string
        airline.computerized_reservation_system:
          description: >-
            The [CRS](https://en.wikipedia.org/wiki/Computer_reservation_system) used to make the reservation and purchase the ticket.

            * Format: alphanumeric.

            * minLength: 4

            * maxLength: 4
          type: string
        airline.customer_reference_number:
          description: >-
            Reference number; alphanumeric.

            * minLength: 0

            * maxLength: 20
          type: string
        airline.document_type:
          description: >-
            Optional 2-digit code; alphanumeric. It identifies the type of product of the transaction. The description of the code may appear on credit card statements.

            * Format: 2-digit code

            * Example: Passenger ticket = 01

            * minLength: 2

            * maxLength: 2
          type: string
        airline.flight_date:
          description: >-
            Flight departure date. Local time `(HH:mm)` is optional.

            * Date format: `yyyy-MM-dd`

            * Date and time format: `yyyy-MM-dd HH:mm`

            * minLength: 10

            * maxLength: 16
          type: string
        airline.leg.carrier_code:
          description: >-
            [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX); alphabetical. It identifies the carrier.

            This field is required/mandatory if the airline data includes leg details.

            * Format: IATA 2-letter airline code

            * Example: KLM = KL

            * minLength: 2

            * maxLength: 2
          type: string
        airline.leg.class_of_travel:
          description: >-
            1-letter travel class identifier; alphabetical. There is no standard; however, the following codes are used rather consistently:

            * F: first class

            * J: business class

            * Y: economy class

            * W: premium economy


            Limitations:

            * minLength: 1

            * maxLength: 1
          type: string
        airline.leg.date_of_travel:
          description: >-
            Date and time of travel. [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)-compliant.

            * Format: `yyyy-MM-dd HH:mm`

            * minLength: 16

            * maxLength: 16
          type: string
        airline.leg.depart_airport:
          description: >-
            Alphabetical identifier of the departure airport.

            This field is required if the airline data includes leg details.

            * Format: [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code.

            * Example: Amsterdam = AMS

            * minLength: 3

            * maxLength: 3
          type: string
        airline.leg.depart_tax:
          description: >-
            [Departure tax](https://en.wikipedia.org/wiki/Departure_tax). Amount charged by a country to an individual upon their leaving. The transaction amount needs to be represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes).

            * minLength: 1

            * maxLength: 12
          type: string
        airline.leg.destination_code:
          description: >-
            Alphabetical identifier of the destination/arrival airport.

            This field is required/mandatory if the airline data includes leg details.

            * Format: [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code.

            * Example: Amsterdam = AMS

            * minLength: 3

            * maxLength: 3
          type: string
        airline.leg.fare_base_code:
          description: >-
            [Fare basis code](https://en.wikipedia.org/wiki/Fare_basis_code); alphanumeric.

            * minLength: 1

            * maxLength: 7
          type: string
        airline.leg.flight_number:
          description: >-
            The flight identifier.

            * minLength: 1

            * maxLength: 5
          type: string
        airline.leg.stop_over_code:
          description: >-
            1-letter code that indicates whether the passenger is entitled to make a stopover. Only two types of characters are allowed:

            * O: Stopover allowed

            * X: Stopover not allowed


            Limitations:

            * minLength: 1

            * maxLength: 1
          type: string
        airline.passenger.date_of_birth:
          description: >-
            Date of birth of the passenger.


            Date format: `yyyy-MM-dd`

            * minLength: 10

            * maxLength: 10
          type: string
        airline.passenger.first_name:
          description: >-
            Passenger first name/given name.

            > This field is required/mandatory if the airline data includes passenger details or leg details.
          type: string
        airline.passenger.last_name:
          description: >-
            Passenger last name/family name.

            > This field is required/mandatory if the airline data includes passenger details or leg details.
          type: string
        airline.passenger.telephone_number:
          description: >-
            Telephone number of the passenger, including country code. This is an alphanumeric field that can include the '+' and '-' signs.

            * minLength: 3

            * maxLength: 30
          type: string
        airline.passenger.traveller_type:
          description: >-
            Passenger type code (PTC). IATA PTC values are 3-letter alphabetical. Example: ADT, SRC, CNN, INS.


            However, several carriers use non-standard codes that can be up to 5 alphanumeric characters.

            * minLength: 3

            * maxLength: 6
          type: string
        airline.passenger_name:
          description: >-
            Passenger name, initials, and a title.

            * Format: last name + first name or initials + title.

            * Example: *FLYER / MARY MS*.

            * minLength: 1

            * maxLength: 49
          type: string
        airline.ticket_issue_address:
          description: >-
            Address of the place/agency that issued the ticket.

            * minLength: 0

            * maxLength: 16
          type: string
        airline.ticket_number:
          description: >-
            The ticket's unique identifier.

            * minLength: 1

            * maxLength: 150
          type: string
        airline.travel_agency_code:
          description: >-
            IATA number, also ARC number or ARC/IATA number. Unique identifier number for travel agencies.

            * minLength: 1

            * maxLength: 8
          type: string
        airline.travel_agency_name:
          description: >-
            The name of the travel agency.

            * minLength: 1

            * maxLength: 25
          type: string
      required:
        - airline.passenger_name
    AdditionalDataCarRental:
      properties:
        carRental.checkOutDate:
          description: >-
            Pick-up date.

            * Date format: `yyyyMMdd`
          type: string
        carRental.customerServiceTollFreeNumber:
          description: >-
            The customer service phone number of the car rental company.

            * Format: Alphanumeric

            * maxLength: 17
          type: string
        carRental.daysRented:
          description: >-
            Number of days for which the car is being rented.

            * Format: Numeric

            * maxLength: 19
          type: string
        carRental.fuelCharges:
          description: >-
            Any fuel charges associated with the rental.

            * Format: Numeric

            * maxLength: 12
          type: string
        carRental.insuranceCharges:
          description: >-
            Any insurance charges associated with the rental.

            * Format: Numeric

            * maxLength: 12
          type: string
        carRental.locationCity:
          description: >-
            The city from which the car is rented.

            * Format: Alphanumeric

            * maxLength: 18
          type: string
        carRental.locationCountry:
          description: >-
            The country from which the car is rented.

            * Format: Alphanumeric

            * maxLength: 2
          type: string
        carRental.locationStateProvince:
          description: >-
            The state or province from where the car is rented.

            * Format: Alphanumeric

            * maxLength: 3
          type: string
        carRental.noShowIndicator:
          description: >-
            Indicates if the customer was a "no-show" (neither keeps nor cancels their booking).

            * Y - Customer was a no show.

            * N - Not applicable.
          type: string
        carRental.oneWayDropOffCharges:
          description: Charge associated with not returning a vehicle to the original rental location.
          type: string
        carRental.rate:
          description: >-
            Daily rental rate.

            * Format: Alphanumeric

            * maxLength: 12
          type: string
        carRental.rateIndicator:
          description: >-
            Specifies whether the given rate is applied daily or weekly.

            * D - Daily rate.

            * W - Weekly rate.
          type: string
        carRental.rentalAgreementNumber:
          description: >-
            The rental agreement number associated with this car rental.

            * Format: Alphanumeric

            * maxLength: 9
          type: string
        carRental.rentalClassId:
          description: >-
            Daily rental rate.

            * Format: Alphanumeric

            * maxLength: 12
          type: string
        carRental.renterName:
          description: >-
            The name of the person renting the car.

            * Format: Alphanumeric

            * maxLength: 26
          type: string
        carRental.returnCity:
          description: >-
            The city where the car must be returned.

            * Format: Alphanumeric

            * maxLength: 18
          type: string
        carRental.returnCountry:
          description: >-
            The country where the car must be returned.

            * Format: Alphanumeric

            * maxLength: 2
          type: string
        carRental.returnDate:
          description: >-
            The last date to return the car by.

            * Date format: `yyyyMMdd`
          type: string
        carRental.returnLocationId:
          description: >-
            Agency code, phone number, or address abbreviation

            * Format: Alphanumeric

            * maxLength: 10
          type: string
        carRental.returnStateProvince:
          description: >-
            The state or province where the car must be returned.

            * Format: Alphanumeric

            * maxLength: 3
          type: string
        carRental.taxExemptIndicator:
          description: >-
            Indicates whether the goods or services were tax-exempt, or tax was not collected.


            Values:

            * Y - Goods or services were tax exempt

            * N - Tax was not collected
          type: string
        travelEntertainmentAuthData.duration:
          description: >-
            Number of nights.  This should be included in the auth message.

            * Format: Numeric

            * maxLength: 2
          type: string
        travelEntertainmentAuthData.market:
          description: >-
            Indicates what market-specific dataset will be submitted or is being submitted. Value should be "A" for Car rental. This should be included in the auth message.

            * Format: Alphanumeric

            * maxLength: 1
          type: string
    AdditionalDataCommon:
      properties:
        RequestedTestErrorResponseCode:
          description: >-
            Triggers test scenarios that allow to replicate certain communication errors.


            Allowed values:

            * **NO_CONNECTION_AVAILABLE** – There wasn't a connection available to service the outgoing communication.

            This is a transient, retriable error since no messaging could be initiated to an issuing system (or third-party acquiring system). Therefore, the header Transient-Error: true is returned in the response. A subsequent request using the same idempotency key will be processed as if it was the first request.

            * **IOEXCEPTION_RECEIVED** – Something went wrong during transmission of the message or receiving the response.

            This is a classified as non-transient because the message could have been received by the issuing party and been acted upon. No transient error header is returned. If using idempotency, the (error) response is stored as the final result for the idempotency key. Subsequent messages with the same idempotency key not be processed beyond returning the stored response.
          type: string
        authorisationType:
          description: >-
            Flags a card payment request for either pre-authorisation or final authorisation. For more information, refer to [Authorisation types](https://docs.adyen.com/checkout/adjust-authorisation#authorisation-types).


            Allowed values:

            * **PreAuth** – flags the payment request to be handled as a pre-authorisation.

            * **FinalAuth** – flags the payment request to be handled as a final authorisation.
          type: string
        customRoutingFlag:
          description: >-
            Allows you to determine or override the acquirer account that should be used for the transaction.


            If you need to process a payment with an acquirer different from a default one, you can set up a corresponding configuration on the Adyen payments platform. Then you can pass a custom routing flag in a payment request's additional data to target a specific acquirer.


            To enable this functionality, contact [Support](https://support.adyen.com/hc/en-us/requests/new).
          type: string
        networkTxReference:
          description: >-
            Allows you to link the transaction to the original or previous one in a subscription/card-on-file chain. This field is required for token-based transactions where Adyen does not tokenize the card.


            Transaction identifier from card schemes, for example, Mastercard Trace ID or the Visa Transaction ID.


            Submit the original transaction ID of the contract in your payment request if you are not tokenizing card details with Adyen and are making a merchant-initiated transaction (MIT) for subsequent charges.


            Make sure you are sending `shopperInteraction` **ContAuth** and `recurringProcessingModel` **Subscription** or **UnscheduledCardOnFile** to ensure that the transaction is classified as MIT.
          type: string
        overwriteBrand:
          description: Boolean indicator that can be optionally used for performing debit transactions on combo cards (for example, combo cards in Brazil). This is not mandatory but we recommend that you set this to true if you want to use the `selectedBrand` value to specify how to process the transaction.
          type: string
        subMerchantCity:
          description: >-
            This field is required if the transaction is performed by a registered payment facilitator. This field must contain the city of the actual merchant's address.

            * Format: alpha-numeric.

            * Maximum length: 13 characters.
          type: string
        subMerchantCountry:
          description: >-
            This field is required if the transaction is performed by a registered payment facilitator. This field must contain the three-letter country code of the actual merchant's address.

            * Format: alpha-numeric.

            * Fixed length: 3 characters.
          type: string
        subMerchantID:
          description: >-
            This field contains an identifier of the actual merchant when a transaction is submitted via a payment facilitator. The payment facilitator must send in this unique ID.


            A unique identifier per submerchant that is required if the transaction is performed by a registered payment facilitator.

            * Format: alpha-numeric.

            * Fixed length: 15 characters.
          type: string
        subMerchantName:
          description: >-
            This field is required if the transaction is performed by a registered payment facilitator. This field must contain the name of the actual merchant.

            * Format: alpha-numeric.

            * Maximum length: 22 characters.
          type: string
        subMerchantPostalCode:
          description: >-
            This field is required if the transaction is performed by a registered payment facilitator. This field must contain the postal code of the actual merchant's address.

            * Format: alpha-numeric.

            * Maximum length: 10 characters.
          type: string
        subMerchantState:
          description: >-
            This field is required if the transaction is performed by a registered payment facilitator, and if applicable to the country. This field must contain the state code of the actual merchant's address.

            * Format: alpha-numeric.

            * Maximum length: 3 characters.
          type: string
        subMerchantStreet:
          description: >-
            This field is required if the transaction is performed by a registered payment facilitator. This field must contain the street of the actual merchant's address.

            * Format: alpha-numeric.

            * Maximum length: 60 characters.
          type: string
        subMerchantTaxId:
          description: >-
            This field is required if the transaction is performed by a registered payment facilitator. This field must contain the tax ID of the actual merchant.

            * Format: alpha-numeric.

            * Fixed length: 11 or 14 characters.
          type: string
    AdditionalDataLevel23:
      properties:
        enhancedSchemeData.customerReference:
          description: >-
            Customer code, if supplied by a customer.


            Encoding: ASCII.


            Max length: 25 characters.


            > Required for Level 2 and Level 3 data.
          type: string
        enhancedSchemeData.destinationCountryCode:
          description: >-
            Destination country code.


            Encoding: ASCII.


            Max length: 3 characters.
          type: string
        enhancedSchemeData.destinationPostalCode:
          description: >-
            The postal code of a destination address.


            Encoding: ASCII.


            Max length: 10 characters.


            > Required for American Express.
          type: string
        enhancedSchemeData.destinationStateProvinceCode:
          description: >-
            Destination state or province code.


            Encoding: ASCII.Max length: 3 characters.
          type: string
        enhancedSchemeData.dutyAmount:
          description: >-
            Duty amount, in minor units.


            For example, 2000 means USD 20.00.


            Max length: 12 characters.
          type: string
        enhancedSchemeData.freightAmount:
          description: >-
            Shipping amount, in minor units.


            For example, 2000 means USD 20.00.


            Max length: 12 characters.
          type: string
        "enhancedSchemeData.itemDetailLine[itemNr].commodityCode":
          description: >-
            Item commodity code.


            Encoding: ASCII.


            Max length: 12 characters.
          type: string
        "enhancedSchemeData.itemDetailLine[itemNr].description":
          description: >-
            Item description.


            Encoding: ASCII.


            Max length: 26 characters.
          type: string
        "enhancedSchemeData.itemDetailLine[itemNr].discountAmount":
          description: >-
            Discount amount, in minor units.


            For example, 2000 means USD 20.00.


            Max length: 12 characters.
          type: string
        "enhancedSchemeData.itemDetailLine[itemNr].productCode":
          description: >-
            Product code.


            Encoding: ASCII.


            Max length: 12 characters.
          type: string
        "enhancedSchemeData.itemDetailLine[itemNr].quantity":
          description: >-
            Quantity, specified as an integer value.


            Value must be greater than 0.


            Max length: 12 characters.
          type: string
        "enhancedSchemeData.itemDetailLine[itemNr].totalAmount":
          description: >-
            Total amount, in minor units.


            For example, 2000 means USD 20.00.


            Max length: 12 characters.
          type: string
        "enhancedSchemeData.itemDetailLine[itemNr].unitOfMeasure":
          description: >-
            Item unit of measurement.


            Encoding: ASCII.


            Max length: 3 characters.
          type: string
        "enhancedSchemeData.itemDetailLine[itemNr].unitPrice":
          description: >-
            Unit price, specified in [minor units](https://docs.adyen.com/development-resources/currency-codes).


            Max length: 12 characters.
          type: string
        enhancedSchemeData.orderDate:
          description: >-
            Order date.

            * Format: `ddMMyy`


            Encoding: ASCII.


            Max length: 6 characters.
          type: string
        enhancedSchemeData.shipFromPostalCode:
          description: >-
            The postal code of a "ship-from" address.


            Encoding: ASCII.


            Max length: 10 characters.
          type: string
        enhancedSchemeData.totalTaxAmount:
          description: >-
            Total tax amount, in minor units.


            For example, 2000 means USD 20.00.


            Max length: 12 characters.


            > Required for Level 2 and Level 3 data.
          type: string
    AdditionalDataLodging:
      properties:
        lodging.checkInDate:
          description: >-
            The arrival date.

            * Date format: `yyyyMMdd`
          type: string
        lodging.checkOutDate:
          description: >-
            The departure date.

            * Date format: `yyyyMMdd`
          type: string
        lodging.customerServiceTollFreeNumber:
          description: >-
            The toll free phone number for the hotel/lodgings.

            * Format: Alphanumeric

            * maxLength: 17
          type: string
        lodging.fireSafetyActIndicator:
          description: >-
            Identifies that the facility complies with the Hotel and Motel Fire Safety Act of 1990. Values can be: 'Y' or 'N'.

            * Format: Alphabetic

            * maxLength: 1
          type: string
        lodging.folioCashAdvances:
          description: >-
            The folio cash advances.

            * Format: Numeric

            * maxLength: 12
          type: string
        lodging.folioNumber:
          description: >-
            Card acceptor’s internal invoice or billing ID reference number.

            * Format: Alphanumeric

            * maxLength: 25
          type: string
        lodging.foodBeverageCharges:
          description: >-
            Any charges for food and beverages associated with the booking.

            * Format: Numeric

            * maxLength: 12
          type: string
        lodging.noShowIndicator:
          description: >-
            Indicates if the customer was a "no-show" (neither keeps nor cancels their booking).


            Value should be Y or N.

            * Format: Numeric

            * maxLength: 1
          type: string
        lodging.prepaidExpenses:
          description: >-
            Prepaid expenses for the booking.

            * Format: Numeric

            * maxLength: 12
          type: string
        lodging.propertyPhoneNumber:
          description: >-
            Identifies specific lodging property location by its local phone number.

            * Format: Alphanumeric

            * maxLength: 17
          type: string
        lodging.room1.numberOfNights:
          description: >-
            Total number of nights the room will be rented.

            * Format: Numeric

            * maxLength: 4
          type: string
        lodging.room1.rate:
          description: >-
            The rate of the room.

            * Format: Numeric

            * maxLength: 12
          type: string
        lodging.room1.tax:
          description: >-
            The total amount of tax to be paid.

            * Format: Numeric

            * maxLength: 12
          type: string
        lodging.totalRoomTax:
          description: >-
            Total room tax amount.

            * Format: Numeric

            * maxLength: 12
          type: string
        lodging.totalTax:
          description: >-
            Total tax amount.

            * Format: Numeric

            * maxLength: 12
          type: string
        travelEntertainmentAuthData.duration:
          description: >-
            Number of nights. This should be included in the auth message.

            * Format: Numeric

            * maxLength: 2
          type: string
        travelEntertainmentAuthData.market:
          description: >-
            Indicates what market-specific dataset will be submitted or is being submitted. Value should be "H" for Hotel. This should be included in the auth message.


            * Format: Alphanumeric

            * maxLength: 1
          type: string
    AdditionalDataOpenInvoice:
      properties:
        openinvoicedata.merchantData:
          description: >-
            Holds different merchant data points like product, purchase, customer, and so on. It takes data in a Base64 encoded string.


            The `merchantData` parameter needs to be added to the `openinvoicedata` signature at the end.


            Since the field is optional, if it's not included it does not impact computing the merchant signature.


            Applies only to Klarna.


            You can contact Klarna for the format and structure of the string.
          type: string
        openinvoicedata.numberOfLines:
          description: >-
            The number of invoice lines included in `openinvoicedata`.


            There needs to be at least one line, so `numberOfLines` needs to be at least 1.
          type: string
        "openinvoicedataLine[itemNr].currencyCode":
          description: The three-character ISO currency code.
          type: string
        "openinvoicedataLine[itemNr].description":
          description: A text description of the product the invoice line refers to.
          type: string
        "openinvoicedataLine[itemNr].itemAmount":
          description: >-
            The price for one item in the invoice line, represented in minor units.


            The due amount for the item, VAT excluded.
          type: string
        "openinvoicedataLine[itemNr].itemId":
          description: A unique id for this item. Required for RatePay if the description of each item is not unique.
          type: string
        "openinvoicedataLine[itemNr].itemVatAmount":
          description: The VAT due for one item in the invoice line, represented in minor units.
          type: string
        "openinvoicedataLine[itemNr].itemVatPercentage":
          description: >-
            The VAT percentage for one item in the invoice line, represented in minor units.


            For example, 19% VAT is specified as 1900.
          type: string
        "openinvoicedataLine[itemNr].numberOfItems":
          description: The number of units purchased of a specific product.
          type: string
        "openinvoicedataLine[itemNr].vatCategory":
          description: >-
            Required for AfterPay. The country-specific VAT category a product falls under.


            Allowed values:

            * High

            * Low

            * None.
          type: string
    AdditionalDataOpi:
      properties:
        opi.includeTransToken:
          description: >-
            Optional boolean indicator. Set to **true** if you want an ecommerce transaction to return an `opi.transToken` as additional data in the response.


            Make sure that you set `shopperInteraction` to **Ecommerce** and leave the `shopperReference` blank. You can use this token to identify an ecommerce transaction in your Oracle system integrations such as Opera.
          type: string
    AdditionalDataRatepay:
      properties:
        ratepay.installmentAmount:
          description: Amount the customer has to pay each month.
          type: string
        ratepay.interestRate:
          description: Interest rate of this installment.
          type: string
        ratepay.lastInstallmentAmount:
          description: Amount of the last installment.
          type: string
        ratepay.paymentFirstday:
          description: Calendar day of the first payment.
          type: string
        ratepaydata.deliveryDate:
          description: Date the merchant delivered the goods to the customer.
          type: string
        ratepaydata.dueDate:
          description: Date by which the customer must settle the payment.
          type: string
        ratepaydata.invoiceDate:
          description: Invoice date, defined by the merchant. If not included, the invoice date is set to the delivery date.
          type: string
        ratepaydata.invoiceId:
          description: Identification name or number for the invoice, defined by the merchant.
          type: string
    AdditionalDataRetry:
      properties:
        retry.chainAttemptNumber:
          description: >-
            The number of times the transaction (not order) has been retried between different payment service providers. For instance, the `chainAttemptNumber` set to 2 means that this transaction has been recently tried on another provider before being sent to Adyen.


            > If you submit `retry.chainAttemptNumber`, `retry.orderAttemptNumber`, and `retry.skipRetry` values, we also recommend you provide the `merchantOrderReference` to facilitate linking payment attempts together.
          type: string
        retry.orderAttemptNumber:
          description: >-
            The index of the attempt to bill a particular order, which is identified by the `merchantOrderReference` field. For example, if a recurring transaction fails and is retried one day later, then the order number for these attempts would be 1 and 2, respectively.


            > If you submit `retry.chainAttemptNumber`, `retry.orderAttemptNumber`, and `retry.skipRetry` values, we also recommend you provide the `merchantOrderReference` to facilitate linking payment attempts together.
          type: string
        retry.skipRetry:
          description: >-
            The Boolean value indicating whether Adyen should skip or retry this transaction, if possible.


            > If you submit `retry.chainAttemptNumber`, `retry.orderAttemptNumber`, and `retry.skipRetry` values, we also recommend you provide the `merchantOrderReference` to facilitate linking payment attempts together.
          type: string
    AdditionalDataRisk:
      properties:
        "riskdata.[customFieldName]":
          description: The data for your custom risk field. For more information, refer to [Create custom risk fields](https://docs.adyen.com/risk-management/configure-custom-risk-rules#step-1-create-custom-risk-fields).
          type: string
        "riskdata.basket.item[itemNr].amountPerItem":
          description: The price of item in the basket, represented in [minor units](https://docs.adyen.com/development-resources/currency-codes).
          type: string
        "riskdata.basket.item[itemNr].brand":
          description: Brand of the item.
          type: string
        "riskdata.basket.item[itemNr].category":
          description: Category of the item.
          type: string
        "riskdata.basket.item[itemNr].color":
          description: Color of the item.
          type: string
        "riskdata.basket.item[itemNr].currency":
          description: The three-character [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217).
          type: string
        "riskdata.basket.item[itemNr].itemID":
          description: ID of the item.
          type: string
        "riskdata.basket.item[itemNr].manufacturer":
          description: Manufacturer of the item.
          type: string
        "riskdata.basket.item[itemNr].productTitle":
          description: A text description of the product the invoice line refers to.
          type: string
        "riskdata.basket.item[itemNr].quantity":
          description: Quantity of the item purchased.
          type: string
        "riskdata.basket.item[itemNr].receiverEmail":
          description: Email associated with the given product in the basket (usually in electronic gift cards).
          type: string
        "riskdata.basket.item[itemNr].size":
          description: Size of the item.
          type: string
        "riskdata.basket.item[itemNr].sku":
          description: "[Stock keeping unit](https://en.wikipedia.org/wiki/Stock_keeping_unit)."
          type: string
        "riskdata.basket.item[itemNr].upc":
          description: "[Universal Product Code](https://en.wikipedia.org/wiki/Universal_Product_Code)."
          type: string
        "riskdata.promotions.promotion[itemNr].promotionCode":
          description: Code of the promotion.
          type: string
        "riskdata.promotions.promotion[itemNr].promotionDiscountAmount":
          description: The discount amount of the promotion, represented in [minor units](https://docs.adyen.com/development-resources/currency-codes).
          type: string
        "riskdata.promotions.promotion[itemNr].promotionDiscountCurrency":
          description: The three-character [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217).
          type: string
        "riskdata.promotions.promotion[itemNr].promotionDiscountPercentage":
          description: >-
            Promotion's percentage discount. It is represented in percentage value and there is no need to include the '%' sign.


            e.g. for a promotion discount of 30%, the value of the field should be 30.
          type: string
        "riskdata.promotions.promotion[itemNr].promotionName":
          description: Name of the promotion.
          type: string
    AdditionalDataRiskStandalone:
      properties:
        PayPal.CountryCode:
          description: Shopper's country of residence in the form of ISO standard 3166 2-character country codes.
          type: string
        PayPal.EmailId:
          description: Shopper's email.
          type: string
        PayPal.FirstName:
          description: Shopper's first name.
          type: string
        PayPal.LastName:
          description: Shopper's last name.
          type: string
        PayPal.PayerId:
          description: "Unique PayPal Customer Account identification number. Character length and limitations: 13 single-byte alphanumeric characters."
          type: string
        PayPal.Phone:
          description: Shopper's phone number.
          type: string
        PayPal.ProtectionEligibility:
          description: >-
            Allowed values:

            * **Eligible** — Merchant is protected by PayPal's Seller Protection Policy for Unauthorized Payments and Item Not Received.


            * **PartiallyEligible** — Merchant is protected by PayPal's Seller Protection Policy for Item Not Received.


            * **Ineligible** — Merchant is not protected under the Seller Protection Policy.
          type: string
        PayPal.TransactionId:
          description: Unique transaction ID of the payment.
          type: string
        avsResultRaw:
          description: "Raw AVS result received from the acquirer, where available. Example: D"
          type: string
        bin:
          description: The Bank Identification Number of a credit card, which is the first six digits of a card number. Required for [tokenized card request](https://docs.adyen.com/risk-management/standalone-risk#tokenised-pan-request).
          type: string
        cvcResultRaw:
          description: "Raw CVC result received from the acquirer, where available. Example: 1"
          type: string
        riskToken:
          description: Unique identifier or token for the shopper's card details.
          type: string
        threeDAuthenticated:
          description: "A Boolean value indicating whether 3DS authentication was completed on this payment. Example: true"
          type: string
        threeDOffered:
          description: "A Boolean value indicating whether 3DS was offered for this payment. Example: true"
          type: string
        tokenDataType:
          description: "Required for PayPal payments only. The only supported value is: **paypal**."
          type: string
    AdditionalDataTemporaryServices:
      properties:
        enhancedSchemeData.customerReference:
          description: >-
            Customer code, if supplied by a customer.

            * Encoding: ASCII

            * maxLength: 25
          type: string
        enhancedSchemeData.employeeName:
          description: >-
            Name or ID associated with the individual working in a temporary capacity.

            * maxLength: 40
          type: string
        enhancedSchemeData.jobDescription:
          description: >-
            Description of the job or task of the individual working in a temporary capacity.

            * maxLength: 40
          type: string
        enhancedSchemeData.regularHoursRate:
          description: >-
            Amount paid per regular hours worked, minor units.

            * maxLength: 7
          type: string
        enhancedSchemeData.regularHoursWorked:
          description: >-
            Amount of time worked during a normal operation for the task or job.

            * maxLength: 7
          type: string
        enhancedSchemeData.requestName:
          description: >-
            Name of the individual requesting temporary services.

            * maxLength: 40
          type: string
        enhancedSchemeData.tempStartDate:
          description: >-
            Date for the beginning of the pay period.

            * Format: ddMMyy

            * maxLength: 6
          type: string
        enhancedSchemeData.tempWeekEnding:
          description: >-
            Date of the end of the billing cycle.

            * Format: ddMMyy

            * maxLength: 6
          type: string
        enhancedSchemeData.totalTaxAmount:
          description: >-
            Total tax amount, in minor units. For example, 2000 means USD 20.00

            * maxLength: 12
          type: string
    AdditionalDataWallets:
      properties:
        androidpay.token:
          description: The Android Pay token retrieved from the SDK.
          type: string
        masterpass.transactionId:
          description: The Mastercard Masterpass Transaction ID retrieved from the SDK.
          type: string
        payment.token:
          description: The Apple Pay token retrieved from the SDK.
          type: string
        paywithgoogle.token:
          description: The Google Pay token retrieved from the SDK.
          type: string
        samsungpay.token:
          description: The Samsung Pay token retrieved from the SDK.
          type: string
        visacheckout.callId:
          description: The Visa Checkout Call ID retrieved from the SDK.
          type: string
    Address:
      properties:
        city:
          description: The name of the city.
          type: string
        country:
          description: >-
            The two-character country code as defined in ISO-3166-1 alpha-2. For example, **US**.

            > If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.
          type: string
        houseNumberOrName:
          description: The number or name of the house.
          type: string
        postalCode:
          description: A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.
          type: string
        stateOrProvince:
          description: >-
            State or province codes as defined in ISO 3166-2. For example, **CA** in the US or **ON** in Canada.

            > Required for the US and Canada.
          type: string
        street:
          description: >-
            The name of the street.

            > The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.
          type: string
      required:
        - street
        - houseNumberOrName
        - city
        - postalCode
        - country
    Amount:
      properties:
        currency:
          description: The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
          maxLength: 3
          minLength: 3
          type: string
        value:
          description: The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
          format: int64
          type: integer
      required:
        - value
        - currency
    ApplicationInfo:
      properties:
        adyenLibrary:
          $ref: "#/components/schemas/CommonField"
          description: Adyen-developed software, such as libraries and plugins, used to interact with the Adyen API. For example, Magento plugin, Java API library, etc.
        adyenPaymentSource:
          $ref: "#/components/schemas/CommonField"
          description: Adyen-developed software to get payment details. For example, Checkout SDK, Secured Fields SDK, etc.
        externalPlatform:
          $ref: "#/components/schemas/ExternalPlatform"
          description: Third-party developed platform used to initiate payment requests. For example, Magento, Zuora, etc.
        merchantApplication:
          $ref: "#/components/schemas/CommonField"
          description: Merchant developed software, such as cashier application, used to interact with the Adyen API.
        merchantDevice:
          $ref: "#/components/schemas/MerchantDevice"
          description: Merchant device information.
        shopperInteractionDevice:
          $ref: "#/components/schemas/ShopperInteractionDevice"
          description: Shopper interaction device, such as terminal, mobile device or web browser, to initiate payment requests.
    BankAccount:
      properties:
        bankAccountNumber:
          description: The bank account number (without separators).
          type: string
        bankCity:
          description: The bank city.
          type: string
        bankLocationId:
          description: The location id of the bank. The field value is `nil` in most cases.
          type: string
        bankName:
          description: The name of the bank.
          type: string
        bic:
          description: The [Business Identifier Code](https://en.wikipedia.org/wiki/ISO_9362) (BIC) is the SWIFT address assigned to a bank. The field value is `nil` in most cases.
          type: string
        countryCode:
          description: >-
            Country code where the bank is located.


            A valid value is an ISO two-character country code (e.g. 'NL').
          type: string
        iban:
          description: The [International Bank Account Number](https://en.wikipedia.org/wiki/International_Bank_Account_Number) (IBAN).
          type: string
        ownerName:
          description: >-
            The name of the bank account holder.

            If you submit a name with non-Latin characters, we automatically replace some of them with corresponding Latin characters to meet the FATF recommendations. For example:

            * χ12 is converted to ch12.

            * üA is converted to euA.

            * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.

            After replacement, the ownerName must have at least three alphanumeric characters (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character (A-Z, a-z). For example:

            * John17 - allowed.

            * J17 - allowed.

            * 171 - not allowed.

            * John-7 - allowed.

            > If provided details don't match the required format, the response returns the error message: 203 'Invalid bank account holder name'.
          type: string
        taxId:
          description: The bank account holder's tax ID.
          type: string
    BrowserInfo:
      properties:
        acceptHeader:
          description: The accept header value of the shopper's browser.
          maxLength: 50
          minLength: 10
          type: string
        colorDepth:
          description: "The color depth of the shopper's browser in bits per pixel. This should be obtained by using the browser's `screen.colorDepth` property. Accepted values: 1, 4, 8, 15, 16, 24, 30, 32 or 48 bit color depth."
          format: int32
          type: integer
        javaEnabled:
          description: Boolean value indicating if the shopper's browser is able to execute Java.
          type: boolean
        javaScriptEnabled:
          default: "true"
          description: Boolean value indicating if the shopper's browser is able to execute JavaScript. A default 'true' value is assumed if the field is not present.
          type: boolean
        language:
          description: The `navigator.language` value of the shopper's browser (as defined in IETF BCP 47).
          type: string
        screenHeight:
          description: The total height of the shopper's device screen in pixels.
          format: int32
          type: integer
        screenWidth:
          description: The total width of the shopper's device screen in pixels.
          format: int32
          type: integer
        timeZoneOffset:
          description: Time difference between UTC time and the shopper's browser local time, in minutes.
          format: int32
          type: integer
        userAgent:
          description: The user agent value of the shopper's browser.
          maxLength: 50
          minLength: 10
          type: string
      required:
        - userAgent
        - acceptHeader
        - javaEnabled
        - colorDepth
        - screenHeight
        - screenWidth
        - timeZoneOffset
        - language
    Card:
      properties:
        cvc:
          description: >-
            The [card verification code](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid) (1-20 characters). Depending on the card brand, it is known also as:

            * CVV2/CVC2 – length: 3 digits

            * CID – length: 4 digits

            > If you are using [Client-Side Encryption](https://docs.adyen.com/classic-integration/cse-integration-ecommerce), the CVC code is present in the encrypted data. You must never post the card details to the server.

            > This field must be always present in a [one-click payment request](https://docs.adyen.com/classic-integration/recurring-payments).

            > When this value is returned in a response, it is always empty because it is not stored.
          maxLength: 20
          minLength: 1
          type: string
        expiryMonth:
          description: >-
            The card expiry month.

            Format: 2 digits, zero-padded for single digits. For example:

            * 03 = March

            * 11 = November
          maxLength: 2
          minLength: 1
          type: string
        expiryYear:
          description: >-
            The card expiry year.

            Format: 4 digits. For example: 2020
          maxLength: 4
          minLength: 4
          type: string
        holderName:
          description: The name of the cardholder, as printed on the card.
          maxLength: 50
          minLength: 1
          type: string
        issueNumber:
          description: The issue number of the card (for some UK debit cards only).
          maxLength: 2
          minLength: 1
          type: string
        number:
          description: >-
            The card number (4-19 characters). Do not use any separators.

            When this value is returned in a response, only the last 4 digits of the card number are returned.
          maxLength: 19
          minLength: 4
          type: string
        startMonth:
          description: The month component of the start date (for some UK debit cards only).
          maxLength: 2
          minLength: 1
          type: string
        startYear:
          description: The year component of the start date (for some UK debit cards only).
          maxLength: 4
          minLength: 4
          type: string
      required:
        - number
        - expiryMonth
        - expiryYear
        - holderName
    CommonField:
      properties:
        name:
          description: Name of the field. For example, Name of External Platform.
          type: string
        version:
          description: Version of the field. For example, Version of External Platform.
          type: string
    DeviceRenderOptions:
      properties:
        sdkInterface:
          default: both
          description: >-
            Supported SDK interface types.

            Allowed values:

            * native

            * html

            * both
          enum:
            - native
            - html
            - both
          type: string
        sdkUiType:
          default: <all available types>
          description: >-
            UI types supported for displaying specific challenges.

            Allowed values:

            * text

            * singleSelect

            * outOfBand

            * otherHtml

            * multiSelect
          items:
            enum:
              - multiSelect
              - otherHtml
              - outOfBand
              - singleSelect
              - text
            type: string
          type: array
    ExternalPlatform:
      properties:
        integrator:
          description: External platform integrator.
          type: string
        name:
          description: Name of the field. For example, Name of External Platform.
          type: string
        version:
          description: Version of the field. For example, Version of External Platform.
          type: string
    ForexQuote:
      properties:
        account:
          description: The account name.
          type: string
        accountType:
          description: The account type.
          type: string
        baseAmount:
          $ref: "#/components/schemas/Amount"
          description: The base amount.
        basePoints:
          description: The base points.
          format: int32
          type: integer
        buy:
          $ref: "#/components/schemas/Amount"
          description: The buy rate.
        interbank:
          $ref: "#/components/schemas/Amount"
          description: The interbank amount.
        reference:
          description: The reference assigned to the forex quote request.
          type: string
        sell:
          $ref: "#/components/schemas/Amount"
          description: The sell rate.
        signature:
          description: The signature to validate the integrity.
          type: string
        source:
          description: The source of the forex quote.
          type: string
        type:
          description: The type of forex.
          type: string
        validTill:
          description: The date until which the forex quote is valid.
          format: date-time
          type: string
      required:
        - validTill
        - basePoints
    FraudCheckResult:
      properties:
        accountScore:
          description: The fraud score generated by the risk check.
          format: int32
          type: integer
        checkId:
          description: The ID of the risk check.
          format: int32
          type: integer
        name:
          description: The name of the risk check.
          type: string
      required:
        - checkId
        - name
        - accountScore
    FraudResult:
      properties:
        accountScore:
          description: The total fraud score generated by the risk checks.
          format: int32
          type: integer
        results:
          description: The result of the individual risk checks.
          items:
            $ref: "#/components/schemas/FraudCheckResult"
          type: array
      required:
        - accountScore
    FundSource:
      properties:
        additionalData:
          additionalProperties:
            type: string
          description: a map of name/value pairs for passing in additional/industry-specific data
          type: object
        billingAddress:
          $ref: "#/components/schemas/Address"
          description: the address where to send the invoice
        card:
          $ref: "#/components/schemas/Card"
          description: a representation of a (credit or debit) card
        shopperEmail:
          description: the email address of the person
          type: string
        shopperName:
          $ref: "#/components/schemas/Name"
          description: the name of the person
        telephoneNumber:
          description: the telephone number of the person
          type: string
    Installments:
      properties:
        value:
          description: >-
            Defines the number of installments. Its value needs to be greater than zero.


            Usually, the maximum allowed number of installments is capped. For example, it may not be possible to split a payment in more than 24 installments. The acquirer sets this upper limit, so its value may vary.
          format: int32
          type: integer
      required:
        - value
    MerchantDevice:
      properties:
        os:
          description: Operating system running on the merchant device.
          type: string
        osVersion:
          description: Version of the operating system on the merchant device.
          type: string
        reference:
          description: Merchant device reference.
          type: string
    MerchantRiskIndicator:
      properties:
        addressMatch:
          description: Whether the chosen delivery address is identical to the billing address.
          type: boolean
        deliveryAddressIndicator:
          description: >-
            Indicator regarding the delivery address.

            Allowed values:

            * `shipToBillingAddress`

            * `shipToVerifiedAddress`

            * `shipToNewAddress`

            * `shipToStore`

            * `digitalGoods`

            * `goodsNotShipped`

            * `other`
          enum:
            - shipToBillingAddress
            - shipToVerifiedAddress
            - shipToNewAddress
            - shipToStore
            - digitalGoods
            - goodsNotShipped
            - other
          type: string
        deliveryEmail:
          description: The delivery email address (for digital goods).
          type: string
        deliveryTimeframe:
          description: >-
            The estimated delivery time for the shopper to receive the goods.

            Allowed values:

            * `electronicDelivery`

            * `sameDayShipping`

            * `overnightShipping`

            * `twoOrMoreDaysShipping`
          enum:
            - electronicDelivery
            - sameDayShipping
            - overnightShipping
            - twoOrMoreDaysShipping
          type: string
        giftCardAmount:
          $ref: "#/components/schemas/Amount"
          description: For prepaid or gift card purchase, the purchase amount total of prepaid or gift card(s).
        giftCardCount:
          description: For prepaid or gift card purchase, total count of individual prepaid or gift cards/codes purchased.
          format: int32
          type: integer
        preOrderDate:
          description: For pre-order purchases, the expected date this product will be available to the shopper.
          format: date-time
          type: string
        preOrderPurchase:
          description: Indicator for whether this transaction is for pre-ordering a product.
          type: boolean
        reorderItems:
          description: Indicator for whether the shopper has already purchased the same items in the past.
          type: boolean
    ModifyRequest:
      properties:
        additionalData:
          additionalProperties:
            type: string
          description: This field contains additional data, which may be required for a particular payout request.
          type: object
        merchantAccount:
          description: The merchant account identifier, with which you want to process the transaction.
          type: string
        originalReference:
          description: The PSP reference received in the `/submitThirdParty` response.
          type: string
      required:
        - merchantAccount
        - originalReference
    ModifyResponse:
      properties:
        additionalData:
          additionalProperties:
            type: string
          description: This field contains additional data, which may be returned in a particular response.
          type: object
        pspReference:
          description: Adyen's 16-character string reference associated with the transaction. This value is globally unique; quote it when communicating with us about this response.
          type: string
        response:
          description: >-
            The response:

            * In case of success, it is either `payout-confirm-received` or `payout-decline-received`.

            * In case of an error, an informational message is returned.
          type: string
      required:
        - pspReference
        - response
    Name:
      properties:
        firstName:
          description: The first name.
          type: string
        gender:
          description: >-
            The gender.

            >The following values are permitted: `MALE`, `FEMALE`, `UNKNOWN`.
          enum:
            - MALE
            - FEMALE
            - UNKNOWN
          maxLength: 1
          minLength: 1
          type: string
        infix:
          description: >-
            The name's infix, if applicable.

            >A maximum length of twenty (20) characters is imposed.
          type: string
        lastName:
          description: The last name.
          type: string
      required:
        - firstName
        - lastName
        - gender
    PayoutRequest:
      properties:
        accountInfo:
          $ref: "#/components/schemas/AccountInfo"
          description: >-
            Shopper account information for 3D Secure 2.

            > For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.
        additionalAmount:
          $ref: "#/components/schemas/Amount"
          description: >-
            If you want a [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) request to use a non-zero value, assign this value to `additionalAmount` (while the amount must be still set to 0 to trigger BIN or card verification).

            Required to be in the same currency as the `amount`. 
        additionalData:
          anyOf:
            - $ref: "#/components/schemas/AdditionalDataCommon"
            - $ref: "#/components/schemas/AdditionalData3DSecure"
            - $ref: "#/components/schemas/AdditionalDataAirline"
            - $ref: "#/components/schemas/AdditionalDataCarRental"
            - $ref: "#/components/schemas/AdditionalDataLevel23"
            - $ref: "#/components/schemas/AdditionalDataLodging"
            - $ref: "#/components/schemas/AdditionalDataOpenInvoice"
            - $ref: "#/components/schemas/AdditionalDataOpi"
            - $ref: "#/components/schemas/AdditionalDataRatepay"
            - $ref: "#/components/schemas/AdditionalDataRetry"
            - $ref: "#/components/schemas/AdditionalDataRisk"
            - $ref: "#/components/schemas/AdditionalDataRiskStandalone"
            - $ref: "#/components/schemas/AdditionalDataTemporaryServices"
            - $ref: "#/components/schemas/AdditionalDataWallets"
          description: >-
            This field contains additional data, which may be required for a particular payment request.


            The `additionalData` object consists of entries, each of which includes the key and value.
        amount:
          $ref: "#/components/schemas/Amount"
          description: The amount information for the transaction (in [minor units](https://docs.adyen.com/development-resources/currency-codes)). For [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) requests, set amount to 0 (zero).
        applicationInfo:
          $ref: "#/components/schemas/ApplicationInfo"
          description: Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions).
        bankAccount:
          $ref: "#/components/schemas/BankAccount"
          description: >-
            The details of the bank account, from which the payment should be made.

            > Either `bankAccount` or `card` field must be provided in a payment request.
        billingAddress:
          $ref: "#/components/schemas/Address"
          description: >-
            The address where to send the invoice.

            > For 3D Secure 2 transactions, schemes require the `billingAddress` for both `deviceChannel` **browser** and **app**. Include all of the fields within this object.
        browserInfo:
          $ref: "#/components/schemas/BrowserInfo"
          description: >-
            The shopper's browser information.

            > For 3D Secure transactions, `browserInfo` is required for `channel` **web** (or `deviceChannel` **browser**).
        captureDelayHours:
          description: The delay between the authorisation and scheduled auto-capture, specified in hours.
          format: int32
          type: integer
        card:
          $ref: "#/components/schemas/Card"
          description: >-
            A container for card data.

            > Either `bankAccount` or `card` field must be provided in a payment request.
        dateOfBirth:
          description: >-
            The shopper's date of birth.


            Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD
          format: date-time
          type: string
        dccQuote:
          $ref: "#/components/schemas/ForexQuote"
          description: The forex quote as returned in the response of the forex service.
        deliveryAddress:
          $ref: "#/components/schemas/Address"
          description: The address where the purchased goods should be delivered.
        deliveryDate:
          description: >-
            The date and time the purchased goods should be delivered.


            Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD


            Example: 2017-07-17T13:42:40.428+01:00
          format: date-time
          type: string
        deviceFingerprint:
          description: A string containing the shopper's device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting).
          type: string
        entityType:
          description: The type of the entity the payment is processed for.
          enum:
            - NaturalPerson
            - CompanyName
          type: string
        fraudOffset:
          description: An integer value that is added to the normal fraud score. The value can be either positive or negative.
          format: int32
          type: integer
        fundSource:
          $ref: "#/components/schemas/FundSource"
          description: The person or entity funding the money.
        installments:
          $ref: "#/components/schemas/Installments"
          description: Contains installment settings. For more information, refer to [Installments](https://docs.adyen.com/payment-methods/cards/credit-card-installments).
        mcc:
          description: The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.
          type: string
        merchantAccount:
          description: The merchant account identifier, with which you want to process the transaction.
          type: string
        merchantOrderReference:
          description: >-
            This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle.

            The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations.

            > We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.
          type: string
        merchantRiskIndicator:
          $ref: "#/components/schemas/MerchantRiskIndicator"
          description: >-
            Additional risk fields for 3D Secure 2.

            > For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.
        metadata:
          additionalProperties:
            type: string
          description: >-
            Metadata consists of entries, each of which includes a key and a value.

            Limitations: Maximum 20 key-value pairs per request. When exceeding, the "177" error occurs: "Metadata size exceeds limit".
          type: object
        mpiData:
          $ref: "#/components/schemas/ThreeDSecureData"
          description: Authentication data produced by an MPI (Mastercard SecureCode or Visa Secure).
        nationality:
          description: The two-character country code of the shopper's nationality.
          maxLength: 2
          type: string
        orderReference:
          description: When you are doing multiple partial (gift card) payments, this is the `pspReference` of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the `merchantOrderReference`instead.
          type: string
        recurring:
          $ref: "#/components/schemas/Recurring"
          description: The recurring settings for the payment. Use this property when you want to enable [recurring payments](https://docs.adyen.com/classic-integration/recurring-payments).
        recurringProcessingModel:
          description: >
            Defines a recurring payment type.

            Allowed values:

            * `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule.

            * `CardOnFile` – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction.

            * `UnscheduledCardOnFile` – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.
          enum:
            - CardOnFile
            - Subscription
            - UnscheduledCardOnFile
          type: string
        reference:
          description: >-
            The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement.

            If you need to provide multiple references for a transaction, separate them with hyphens ("-").

            Maximum length: 80 characters.
          type: string
        selectedBrand:
          description: >-
            Some payment methods require defining a value for this field to specify how to process the transaction.


            For the Bancontact payment method, it can be set to:

            * `maestro` (default), to be processed like a Maestro card, or

            * `bcmc`, to be processed like a Bancontact card.
          type: string
        selectedRecurringDetailReference:
          description: The `recurringDetailReference` you want to use for this payment. The value `LATEST` can be used to select the most recently stored recurring detail.
          type: string
        sessionId:
          description: A session ID used to identify a payment session.
          type: string
        shopperEmail:
          description: >-
            The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks.

            > For 3D Secure 2 transactions, schemes require the `shopperEmail` for both `deviceChannel` **browser** and **app**.
          type: string
        shopperIP:
          description: >-
            The shopper's IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks).

            > Required for 3D Secure 2 transactions. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://support.adyen.com/hc/en-us/requests/new).
          type: string
        shopperInteraction:
          description: >-
            Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.

            For the web service API, Adyen assumes Ecommerce shopper interaction by default.


            This field has the following possible values:

            * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.

            * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).

            * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.

            * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
          enum:
            - Ecommerce
            - ContAuth
            - Moto
            - POS
          type: string
        shopperLocale:
          description: The combination of a language code and a country code to specify the language to be used in the payment.
          type: string
        shopperName:
          $ref: "#/components/schemas/Name"
          description: The shopper's full name and gender (if specified).
        shopperReference:
          description: >-
            The shopper's reference to uniquely identify this shopper (e.g. user ID or account ID).

            > This field is required for recurring payments.
          type: string
        shopperStatement:
          description: >-
            The text to be shown on the shopper's bank statement. To enable this field, contact our [Support Team](https://support.adyen.com/hc/en-us/requests/new).
             We recommend sending a maximum of 25 characters, otherwise banks might truncate the string.
          type: string
        socialSecurityNumber:
          description: The shopper's social security number.
          type: string
        splits:
          description: Information on how the payment should be split between accounts when using [Adyen for Platforms](https://docs.adyen.com/platforms/processing-payments#providing-split-information).
          items:
            $ref: "#/components/schemas/Split"
          type: array
        store:
          description: The physical store, for which this payment is processed.
          maxLength: 16
          minLength: 1
          type: string
        telephoneNumber:
          description: The shopper's telephone number.
          type: string
        threeDS2RequestData:
          $ref: "#/components/schemas/ThreeDS2RequestData"
          description: Request fields for 3D Secure 2.
        totalsGroup:
          description: The reference value to aggregate sales totals in reporting. When not specified, the store field is used (if available).
          maxLength: 16
          minLength: 1
          type: string
        trustedShopper:
          description: Set to true if the payment should be routed to a trusted MID.
          type: boolean
      required:
        - merchantAccount
        - reference
        - amount
    PayoutResponse:
      properties:
        additionalData:
          anyOf:
            - $ref: "#/components/schemas/ResponseAdditionalDataCommon"
            - $ref: "#/components/schemas/ResponseAdditionalDataBillingAddress"
            - $ref: "#/components/schemas/ResponseAdditionalDataCard"
            - $ref: "#/components/schemas/ResponseAdditionalDataDeliveryAddress"
            - $ref: "#/components/schemas/ResponseAdditionalDataInstallments"
            - $ref: "#/components/schemas/ResponseAdditionalDataNetworkTokens"
            - $ref: "#/components/schemas/ResponseAdditionalDataOpi"
            - $ref: "#/components/schemas/ResponseAdditionalDataPayPal"
            - $ref: "#/components/schemas/ResponseAdditionalDataSepa"
          description: This field contains additional data, which may be required to return in a particular payment response. To choose data fields to be returned, go to **Customer Area** > **Account** > **API URLs** > **Additional data settings**.
        authCode:
          description: >-
            Authorisation code:

            * When the payment is authorised successfully, this field holds the authorisation code for the payment.

            * When the payment is not authorised, this field is empty.
          type: string
        dccAmount:
          $ref: "#/components/schemas/Amount"
          description: >-
            Includes the currency of the conversion and the value of the transaction.

            > This value only applies if you have implemented Dynamic Currency Conversion. For more information, [contact Support](https://support.adyen.com/hc/en-us/requests/new).
        dccSignature:
          description: >-
            Cryptographic signature used to verify `dccQuote`.

            > This value only applies if you have implemented Dynamic Currency Conversion. For more information, [contact Support](https://support.adyen.com/hc/en-us/requests/new).
          type: string
        fraudResult:
          $ref: "#/components/schemas/FraudResult"
          description: The fraud result properties of the payment.
        issuerUrl:
          description: >-
            The URL to direct the shopper to.

            > In case of SecurePlus, do not redirect a shopper to this URL.
          type: string
        md:
          description: The payment session.
          type: string
        paRequest:
          description: >-
            The 3D request data for the issuer.


            If the value is **CUPSecurePlus-CollectSMSVerificationCode**, collect an SMS code from the shopper and pass it in the `/authorise3D` request. For more information, see [3D Secure](https://docs.adyen.com/classic-integration/3d-secure).
          type: string
        pspReference:
          description: >-
            Adyen's 16-character string reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.


            > `pspReference` is returned only for non-redirect payment methods.
          type: string
        refusalReason:
          description: >-
            If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.


            For more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).
          type: string
        resultCode:
          description: >-
            The result of the payment. For more information, see [Result codes](https://docs.adyen.com/checkout/payment-result-codes).


            Possible values:


            * **AuthenticationFinished** – The payment has been successfully authenticated with 3D Secure 2. Returned for 3D Secure 2 authentication-only transactions.

            * **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state.

            * **Cancelled** – Indicates the payment has been cancelled (either by the shopper or the merchant) before processing was completed. This is a final state.

            * **ChallengeShopper** – The issuer requires further shopper interaction before the payment can be authenticated. Returned for 3D Secure 2 transactions.

            * **Error** – There was an error when the payment was being processed. The reason is given in the `refusalReason` field. This is a final state.

            * **IdentifyShopper** – The issuer requires the shopper's device fingerprint before the payment can be authenticated. Returned for 3D Secure 2 transactions.

            * **Pending** – Indicates that it is not possible to obtain the final status of the payment. This can happen if the systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment.

            * **PresentToShopper** – Indicates that the response contains additional information that you need to present to a shopper, so that they can use it to complete a payment.

            * **Received** – Indicates the payment has successfully been received by Adyen, and will be processed. This is the initial state for all payments.

            * **RedirectShopper** – Indicates the shopper should be redirected to an external web page or app to complete the authorisation.

            * **Refused** – Indicates the payment was refused. The reason is given in the `refusalReason` field. This is a final state.
          enum:
            - AuthenticationFinished
            - Authorised
            - Cancelled
            - ChallengeShopper
            - Error
            - IdentifyShopper
            - Pending
            - PresentToShopper
            - Received
            - RedirectShopper
            - Refused
          type: string
    Recurring:
      properties:
        contract:
          description: >-
            The type of recurring contract to be used.

            Possible values:

            * `ONECLICK` – Payment details can be used to initiate a one-click payment, where the shopper enters the [card security code (CVC/CVV)](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid).

            * `RECURRING` – Payment details can be used without the card security code to initiate [card-not-present transactions](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-not-present-cnp).

            * `ONECLICK,RECURRING` – Payment details can be used regardless of whether the shopper is on your site or not.

            * `PAYOUT` – Payment details can be used to [make a payout](https://docs.adyen.com/checkout/online-payouts).
          enum:
            - ONECLICK
            - RECURRING
            - PAYOUT
          type: string
        recurringDetailName:
          description: A descriptive name for this detail.
          type: string
        recurringExpiry:
          description: Date after which no further authorisations shall be performed. Only for 3D Secure 2.
          format: date-time
          type: string
        recurringFrequency:
          description: Minimum number of days between authorisations. Only for 3D Secure 2.
          type: string
        tokenService:
          description: The name of the token service.
          enum:
            - VISATOKENSERVICE
            - MCTOKENSERVICE
          type: string
    ResponseAdditionalDataBillingAddress:
      properties:
        billingAddress.city:
          description: The billing address city passed in the payment request.
          type: string
        billingAddress.country:
          description: >-
            The billing address country passed in the payment request.


            Example: NL
          type: string
        billingAddress.houseNumberOrName:
          description: The billing address house number or name passed in the payment request.
          type: string
        billingAddress.postalCode:
          description: >-
            The billing address postal code passed in the payment request.


            Example: 1011 DJ
          type: string
        billingAddress.stateOrProvince:
          description: >-
            The billing address state or province passed in the payment request.


            Example: NH
          type: string
        billingAddress.street:
          description: The billing address street passed in the payment request.
          type: string
    ResponseAdditionalDataCard:
      properties:
        cardBin:
          description: >-
            The Bank Identification Number of a credit card, which is the first six digits of a card number.


            Example: 521234
          type: string
        cardHolderName:
          description: The cardholder name passed in the payment request.
          type: string
        cardIssuingBank:
          description: The bank or the financial institution granting lines of credit through card association branded payment cards. This information can be included when available.
          type: string
        cardIssuingCountry:
          description: >-
            The country where the card was issued.


            Example: US
          type: string
        cardIssuingCurrency:
          description: >-
            The currency in which the card is issued, if this information is available. Provided as the currency code or currency number from the ISO-4217 standard. 


            Example: USD
          type: string
        cardPaymentMethod:
          description: >-
            The card payment method used for the transaction.


            Example: amex
          type: string
        cardSummary:
          description: >-
            The last four digits of a card number.


            > Returned only in case of a card payment.
          type: string
    ResponseAdditionalDataCommon:
      properties:
        acquirerAccountCode:
          description: >-
            The name of the Adyen acquirer account.


            Example: PayPalSandbox_TestAcquirer


            > Only relevant for PayPal transactions.
          type: string
        acquirerCode:
          description: >-
            The name of the acquirer processing the payment request.


            Example: TestPmmAcquirer
          type: string
        acquirerReference:
          description: >-
            The reference number that can be used for reconciliation in case a non-Adyen acquirer is used for settlement.


            Example: 7C9N3FNBKT9
          type: string
        alias:
          description: >-
            The Adyen alias of the card.


            Example: H167852639363479
          type: string
        aliasType:
          description: >-
            The type of the card alias.


            Example: Default
          type: string
        authCode:
          description: >-
            Authorisation code:

            * When the payment is authorised successfully, this field holds the authorisation code for the payment.

            * When the payment is not authorised, this field is empty.


            Example: 58747
          type: string
        authorisedAmountCurrency:
          description: The currency of the authorised amount, as a three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
          type: string
        authorisedAmountValue:
          description: >-
            Value of the amount authorised.


            This amount is represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes).
          type: string
        avsResult:
          description: >-
            The AVS result code of the payment, which provides information about the outcome of the AVS check.


            For possible values, see [AVS](https://docs.adyen.com/risk-management/configure-standard-risk-rules/consistency-rules#billing-address-does-not-match-cardholder-address-avs).
          type: string
        avsResultRaw:
          description: >-
            Raw AVS result received from the acquirer, where available.


            Example: D
          type: string
        bic:
          description: >-
            BIC of a bank account.


            Example: TESTNL01


            > Only relevant for SEPA Direct Debit transactions.
          type: string
        dsTransID:
          description: Supported for 3D Secure 2. The unique transaction identifier assigned by the DS to identify a single transaction.
          type: string
        eci:
          description: >-
            The Electronic Commerce Indicator returned from the schemes for the 3DS payment session.


            Example: 02
          type: string
        expiryDate:
          description: >-
            The expiry date on the card.


            Example: 6/2016


            > Returned only in case of a card payment.
          type: string
        extraCostsCurrency:
          description: >-
            The currency of the extra amount charged due to additional amounts set in the skin used in the HPP payment request.


            Example: EUR
          type: string
        extraCostsValue:
          description: The value of the extra amount charged due to additional amounts set in the skin used in the HPP payment request. The amount is in minor units.
          type: string
        "fraudCheck-[itemNr]-[FraudCheckname]":
          description: The fraud score due to a particular fraud check. The fraud check name is found in the key of the key-value pair.
          type: string
        fundingSource:
          description: >-
            Information regarding the funding type of the card. The possible return values are:

            * CHARGE

            * CREDIT

            * DEBIT

            * PREPAID

            * PREPAID_RELOADABLE


            * PREPAID_NONRELOADABLE

            * DEFFERED_DEBIT


            > This functionality requires additional configuration on Adyen's end. To enable it, contact the Support Team.


            For receiving this field in the notification, enable **Include Funding Source** in **Notifications** > **Additional settings**.
          type: string
        fundsAvailability:
          description: >-
            Indicates availability of funds.


            Visa:

            * "I" (fast funds are supported)

            * "N" (otherwise)


            Mastercard:

            * "I" (product type is Prepaid or Debit, or issuing country is in CEE/HGEM list)

            * "N" (otherwise)


            > Returned when you verify a card BIN or estimate costs, and only if payoutEligible is "Y" or "D".
          type: string
        inferredRefusalReason:
          description: >-
            Provides the more granular indication of why a transaction was refused. When a transaction fails with either "Refused", "Restricted Card", "Transaction Not Permitted", "Not supported" or "DeclinedNon Generic" refusalReason from the issuer, Adyen cross references its PSP-wide data for extra insight into the refusal reason. If an inferred refusal reason is available, the `inferredRefusalReason`, field is populated and the `refusalReason`, is set to "Not Supported".


            Possible values:


            * 3D Secure Mandated

            * Closed Account

            * ContAuth Not Supported

            * CVC Mandated

            * Ecommerce Not Allowed

            * Crossborder Not Supported

            * Card Updated


            * Low Authrate Bin

            * Non-reloadable prepaid card
          type: string
        issuerCountry:
          description: >-
            The issuing country of the card based on the BIN list that Adyen maintains.


            Example: JP
          type: string
        mcBankNetReferenceNumber:
          description: >-
            The `mcBankNetReferenceNumber`, is a minimum of six characters and a maximum of nine characters long.


            > Contact Support Team to enable this field.
          type: string
        networkTxReference:
          description: >-
            Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.


            This contains either the Mastercard Trace ID or the Visa Transaction ID.
          type: string
        ownerName:
          description: >-
            The owner name of a bank account.


            Only relevant for SEPA Direct Debit transactions.
          type: string
        paymentAccountReference:
          description: The Payment Account Reference (PAR) value links a network token with the underlying primary account number (PAN). The PAR value consists of 29 uppercase alphanumeric characters.
          type: string
        paymentMethodVariant:
          description: >-
            The Adyen sub-variant of the payment method used for the payment request.


            For more information, refer to [PaymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant).


            Example: mcpro
          type: string
        payoutEligible:
          description: >-
            Indicates whether a payout is eligible or not for this card.


            Visa:

            * "Y"

            * "N"


            Mastercard:

            * "Y" (domestic and cross-border)


            * "D" (only domestic)

            * "N" (no MoneySend)

            * "U" (unknown)
          type: string
        realtimeAccountUpdaterStatus:
          description: >-
            The response code from the Real Time Account Updater service.


            Possible return values are:

            * CardChanged

            * CardExpiryChanged

            * CloseAccount


            * ContactCardAccountHolder
          type: string
        receiptFreeText:
          description: Message to be displayed on the terminal.
          type: string
        recurring.firstPspReference:
          description: >-
            The `pspReference`, of the first recurring payment that created the recurring detail.


            This functionality requires additional configuration on Adyen's end. To enable it, contact the Support Team.
          type: string
        recurring.recurringDetailReference:
          description: The reference that uniquely identifies the recurring transaction.
          type: string
        referred:
          description: >-
            If the payment is referred, this field is set to true.


            This field is unavailable if the payment is referred and is usually not returned with ecommerce transactions.


            Example: true
          type: string
        refusalReasonRaw:
          description: >-
            Raw refusal reason received from the acquirer, where available.


            Example: AUTHORISED
          type: string
        shopperInteraction:
          description: >-
            The shopper interaction type of the payment request.


            Example: Ecommerce
          type: string
        shopperReference:
          description: >-
            The shopperReference passed in the payment request.


            Example: AdyenTestShopperXX
          type: string
        terminalId:
          description: >-
            The terminal ID used in a point-of-sale payment.


            Example: 06022622
          type: string
        threeDAuthenticated:
          description: >-
            A Boolean value indicating whether 3DS authentication was completed on this payment.


            Example: true
          type: string
        threeDAuthenticatedResponse:
          description: >-
            The raw 3DS authentication result from the card issuer.


            Example: N
          type: string
        threeDOffered:
          description: >-
            A Boolean value indicating whether 3DS was offered for this payment.


            Example: true
          type: string
        threeDOfferedResponse:
          description: >-
            The raw enrollment result from the 3DS directory services of the card schemes.


            Example: Y
          type: string
        threeDSVersion:
          description: The 3D Secure 2 version.
          type: string
        visaTransactionId:
          description: >-
            The `visaTransactionId`, has a fixed length of 15 numeric characters.


            > Contact Support Team to enable this field.
          type: string
        xid:
          description: >-
            The 3DS transaction ID of the 3DS session sent in notifications. The value is Base64-encoded and is returned for transactions with directoryResponse 'N' or 'Y'. If you want to submit the xid in your 3D Secure 1 request, use the `mpiData.xid`, field.


            Example: ODgxNDc2MDg2MDExODk5MAAAAAA=
          type: string
    ResponseAdditionalDataDeliveryAddress:
      properties:
        deliveryAddress.city:
          description: The delivery address city passed in the payment request.
          type: string
        deliveryAddress.country:
          description: >-
            The delivery address country passed in the payment request.


            Example: NL
          type: string
        deliveryAddress.houseNumberOrName:
          description: The delivery address house number or name passed in the payment request.
          type: string
        deliveryAddress.postalCode:
          description: >-
            The delivery address postal code passed in the payment request.


            Example: 1011 DJ
          type: string
        deliveryAddress.stateOrProvince:
          description: >-
            The delivery address state or province passed in the payment request.


            Example: NH
          type: string
        deliveryAddress.street:
          description: The delivery address street passed in the payment request.
          type: string
    ResponseAdditionalDataInstallments:
      properties:
        installmentPaymentData.installmentType:
          description: Type of installment. The value of `installmentType` should be **IssuerFinanced**.
          type: string
        "installmentPaymentData.option[itemNr].annualPercentageRate":
          description: Annual interest rate.
          type: string
        "installmentPaymentData.option[itemNr].firstInstallmentAmount":
          description: First Installment Amount in minor units.
          type: string
        "installmentPaymentData.option[itemNr].installmentFee":
          description: Installment fee amount in minor units.
          type: string
        "installmentPaymentData.option[itemNr].interestRate":
          description: Interest rate for the installment period.
          type: string
        "installmentPaymentData.option[itemNr].maximumNumberOfInstallments":
          description: Maximum number of installments possible for this payment.
          type: string
        "installmentPaymentData.option[itemNr].minimumNumberOfInstallments":
          description: Minimum number of installments possible for this payment.
          type: string
        "installmentPaymentData.option[itemNr].numberOfInstallments":
          description: Total number of installments possible for this payment.
          type: string
        "installmentPaymentData.option[itemNr].subsequentInstallmentAmount":
          description: Subsequent Installment Amount in minor units.
          type: string
        "installmentPaymentData.option[itemNr].totalAmountDue":
          description: Total amount in minor units.
          type: string
        installmentPaymentData.paymentOptions:
          description: >-
            Possible values:

            * PayInInstallmentsOnly

            * PayInFullOnly

            * PayInFullOrInstallments
          type: string
        installments.value:
          description: >-
            The number of installments that the payment amount should be charged with.


            Example: 5

            > Only relevant for card payments in countries that support installments.
          type: string
    ResponseAdditionalDataNetworkTokens:
      properties:
        networkToken.available:
          description: Indicates whether a network token is available for the specified card.
          type: string
        networkToken.bin:
          description: The Bank Identification Number of a tokenized card, which is the first six digits of a card number.
          type: string
        networkToken.tokenSummary:
          description: The last four digits of a card number.
          type: string
    ResponseAdditionalDataOpi:
      properties:
        opi.transToken:
          description: Returned in the response if you included `opi.returnTransToken` in an ecommerce request. This contains an OPI token that you can use to identify an ecommerce transaction in your Oracle system integrations such as Opera.
          type: string
    ResponseAdditionalDataPayPal:
      properties:
        paypalEmail:
          description: >-
            The buyer's PayPal account email address.


            Example: paypaltest@adyen.com
          type: string
        paypalPayerId:
          description: >-
            The buyer's PayPal ID.


            Example: LF5HCWWBRV2KL
          type: string
        paypalPayerResidenceCountry:
          description: >-
            The buyer's country of residence.


            Example: NL
          type: string
        paypalPayerStatus:
          description: >-
            The status of the buyer's PayPal account.


            Example: unverified
          type: string
        paypalProtectionEligibility:
          description: >-
            The eligibility for PayPal Seller Protection for this payment.


            Example: Ineligible
          type: string
    ResponseAdditionalDataSepa:
      properties:
        sepadirectdebit.dateOfSignature:
          description: >-
            The transaction signature date.


            Format: yyyy-MM-dd
          type: string
        sepadirectdebit.mandateId:
          description: Its value corresponds to the pspReference value of the transaction.
          type: string
        sepadirectdebit.sequenceType:
          description: >-
            This field can take one of the following values:

            * OneOff: (OOFF) Direct debit instruction to initiate exactly one direct debit transaction.


            * First: (FRST) Initial/first collection in a series of direct debit instructions.

            * Recurring: (RCUR) Direct debit instruction to carry out regular direct debit transactions initiated by the creditor.

            * Final: (FNAL) Last/final collection in a series of direct debit instructions.


            Example: OOFF
          type: string
    SDKEphemPubKey:
      properties:
        crv:
          description: The `crv` value as received from the 3D Secure 2 SDK.
          type: string
        kty:
          description: The `kty` value as received from the 3D Secure 2 SDK.
          type: string
        x:
          description: The `x` value as received from the 3D Secure 2 SDK.
          type: string
        y:
          description: The `y` value as received from the 3D Secure 2 SDK.
          type: string
    ShopperInteractionDevice:
      properties:
        locale:
          description: Locale on the shopper interaction device.
          type: string
        os:
          description: Operating system running on the shopper interaction device.
          type: string
        osVersion:
          description: Version of the operating system on the shopper interaction device.
          type: string
    Split:
      properties:
        account:
          description: >-
            The account to which this split applies.


            >Required if the type is `MarketPlace`.
          type: string
        amount:
          $ref: "#/components/schemas/SplitAmount"
          description: The amount of this split.
        description:
          description: A description of this split.
          type: string
        reference:
          description: >-
            The reference of this split. Used to link other operations (e.g. captures and refunds) to this split.


            >Required if the type is `MarketPlace`.
          type: string
        type:
          description: >-
            The type of this split.


            >Permitted values: `Default`, `PaymentFee`, `VAT`, `Commission`, `MarketPlace`, `BalanceAccount`.
          enum:
            - BalanceAccount
            - Commission
            - Default
            - MarketPlace
            - PaymentFee
            - VAT
            - Verification
          type: string
      required:
        - amount
        - type
    SplitAmount:
      properties:
        currency:
          description: >-
            The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).


            If this value is not provided, the currency in which the payment is made will be used.
          maxLength: 3
          minLength: 3
          type: string
        value:
          description: >-
            The payable amount that can be charged for the transaction.


            The transaction amount needs to be represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes).
          format: int64
          type: integer
      required:
        - value
    StoreDetailAndSubmitRequest:
      properties:
        additionalData:
          additionalProperties:
            type: string
          description: This field contains additional data, which may be required for a particular request.
          type: object
        amount:
          $ref: "#/components/schemas/Amount"
          description: A container object for the payable amount information of the transaction.
        bank:
          $ref: "#/components/schemas/BankAccount"
          description: >-
            A container for bank account data.

            > This field is mandatory if `card` is not provided.
        billingAddress:
          $ref: "#/components/schemas/Address"
          description: The billing address.
        card:
          $ref: "#/components/schemas/Card"
          description: >-
            A container for card data.

            > This field is mandatory if `bank` is not provided.
        dateOfBirth:
          description: >-
            The date of birth.

            Format: [ISO-8601](https://www.w3.org/TR/NOTE-datetime); example: YYYY-MM-DD

            For Paysafecard it must be the same as used when registering the Paysafecard account.

            > This field is mandatory for natural persons.
          format: date-time
          type: string
        entityType:
          description: The type of the entity the payout is processed for.
          enum:
            - NaturalPerson
            - Company
          type: string
        fraudOffset:
          description: An integer value that is added to the normal fraud score. The value can be either positive or negative.
          format: int32
          type: integer
        merchantAccount:
          description: The merchant account identifier, with which you want to process the transaction.
          type: string
        nationality:
          description: >-
            The shopper's nationality.


            A valid value is an ISO 2-character country code (e.g. 'NL').
          maxLength: 2
          type: string
        recurring:
          $ref: "#/components/schemas/Recurring"
          description: >-
            A container for the type of recurring contract to be retrieved.


            The recurring.contract must be set to `PAYOUT`
        reference:
          description: The merchant reference for this payment. This reference will be used in all communication to the merchant about the status of the payout. Although it is a good idea to make sure it is unique, this is not a requirement.
          type: string
        selectedBrand:
          description: >-
            The name of the brand to make a payout to.


            For Paysafecard it must be set to `paysafecard`.
          type: string
        shopperEmail:
          description: The shopper's email address.
          type: string
        shopperName:
          $ref: "#/components/schemas/Name"
          description: >-
            The shopper's name.


            When the `entityType` is `Company`, the `shopperName.lastName` must contain the company name.
        shopperReference:
          description: The shopper's reference for the payment transaction.
          type: string
        shopperStatement:
          description: The description of this payout. This description is shown on the bank statement of the shopper (if this is supported by the chosen payment method).
          type: string
        socialSecurityNumber:
          description: The shopper's social security number.
          type: string
      required:
        - merchantAccount
        - shopperEmail
        - shopperReference
        - recurring
        - dateOfBirth
        - nationality
        - entityType
        - reference
        - amount
    StoreDetailAndSubmitResponse:
      properties:
        additionalData:
          additionalProperties:
            type: string
          description: This field contains additional data, which may be returned in a particular response.
          type: object
        pspReference:
          description: A new reference to uniquely identify this request.
          type: string
        refusalReason:
          description: In case of refusal, an informational message for the reason.
          type: string
        resultCode:
          description: >-
            The response:


            * In case of success is payout-submit-received.

            * In case of an error, an informational message is returned.
          type: string
      required:
        - pspReference
        - resultCode
    StoreDetailRequest:
      properties:
        additionalData:
          additionalProperties:
            type: string
          description: This field contains additional data, which may be required for a particular request.
          type: object
        bank:
          $ref: "#/components/schemas/BankAccount"
          description: >-
            A container for bank account data.

            > This field is mandatory if `card` is not provided.
        billingAddress:
          $ref: "#/components/schemas/Address"
          description: The billing address.
        card:
          $ref: "#/components/schemas/Card"
          description: >-
            A container for card data.

            > This field is mandatory if `bank` is not provided.
        dateOfBirth:
          description: >-
            The date of birth.

            Format: [ISO-8601](https://www.w3.org/TR/NOTE-datetime); example: YYYY-MM-DD

            For Paysafecard it must be the same as used when registering the Paysafecard account.

            > This field is mandatory for natural persons.
          format: date-time
          type: string
        entityType:
          description: The type of the entity the payout is processed for.
          enum:
            - NaturalPerson
            - Company
          type: string
        fraudOffset:
          description: An integer value that is added to the normal fraud score. The value can be either positive or negative.
          format: int32
          type: integer
        merchantAccount:
          description: The merchant account identifier, with which you want to process the transaction.
          type: string
        nationality:
          description: >-
            The shopper's nationality.


            A valid value is an ISO 2-character country code (e.g. 'NL').
          maxLength: 2
          type: string
        recurring:
          $ref: "#/components/schemas/Recurring"
          description: >-
            A container for the type of recurring contract to be retrieved.


            The recurring.contract must be set to `PAYOUT`
        selectedBrand:
          description: >-
            The name of the brand to make a payout to.


            For Paysafecard it must be set to `paysafecard`.
          type: string
        shopperEmail:
          description: The shopper's email address.
          type: string
        shopperName:
          $ref: "#/components/schemas/Name"
          description: >-
            The shopper's name.


            When the `entityType` is `Company`, the `shopperName.lastName` must contain the company name.
        shopperReference:
          description: The shopper's reference for the payment transaction.
          type: string
        socialSecurityNumber:
          description: The shopper's social security number.
          type: string
      required:
        - merchantAccount
        - shopperEmail
        - shopperReference
        - recurring
        - dateOfBirth
        - nationality
        - entityType
    StoreDetailResponse:
      properties:
        additionalData:
          additionalProperties:
            type: string
          description: This field contains additional data, which may be returned in a particular response.
          type: object
        pspReference:
          description: A new reference to uniquely identify this request.
          type: string
        recurringDetailReference:
          description: The token which you can use later on for submitting the payout.
          type: string
        resultCode:
          description: The result code of the transaction. `Success` indicates that the details were stored successfully.
          type: string
      required:
        - pspReference
        - recurringDetailReference
        - resultCode
    SubmitRequest:
      properties:
        additionalData:
          additionalProperties:
            type: string
          description: This field contains additional data, which may be required for a particular request.
          type: object
        amount:
          $ref: "#/components/schemas/Amount"
          description: A container object for the payable amount information of the transaction.
        dateOfBirth:
          description: >-
            The date of birth.

            Format: ISO-8601; example: YYYY-MM-DD


            For Paysafecard it must be the same as used when registering the Paysafecard account.


            > This field is mandatory for natural persons. 

            > This field is required to update the existing `dateOfBirth` that is associated with this recurring contract.
          format: date-time
          type: string
        entityType:
          description: >-
            The type of the entity the payout is processed for.


            Allowed values:

            * NaturalPerson

            * Company

            > This field is required to update the existing `entityType` that is associated with this recurring contract.
          enum:
            - NaturalPerson
            - Company
          type: string
        fraudOffset:
          description: An integer value that is added to the normal fraud score. The value can be either positive or negative.
          format: int32
          type: integer
        merchantAccount:
          description: The merchant account identifier you want to process the transaction request with.
          type: string
        nationality:
          description: >-
            The shopper's nationality.


            A valid value is an ISO 2-character country code (e.g. 'NL').


            > This field is required to update the existing nationality that is associated with this recurring contract.
          type: string
        recurring:
          $ref: "#/components/schemas/Recurring"
          description: >-
            A container for the type of recurring contract to be retrieved.


            The `recurring.contract` must be set to "PAYOUT".
        reference:
          description: The merchant reference for this payout. This reference will be used in all communication to the merchant about the status of the payout. Although it is a good idea to make sure it is unique, this is not a requirement.
          type: string
        selectedRecurringDetailReference:
          description: >-
            This is the `recurringDetailReference` you want to use for this payout.


            You can use the value LATEST to select the most recently used recurring detail.
          type: string
        shopperEmail:
          description: The shopper's email address.
          type: string
        shopperName:
          $ref: "#/components/schemas/Name"
          description: >-
            The shopper's name.


            In case the `entityType` is `Company`, the `shopperName.lastName` must contain the company name.


            > This field is required to update the existing `shopperName` associated with a recurring contract.
        shopperReference:
          description: The shopper's reference for the payout transaction.
          type: string
        shopperStatement:
          description: The description of this payout. This description is shown on the bank statement of the shopper (if this is supported by the chosen payment method).
          type: string
        socialSecurityNumber:
          description: The shopper's social security number.
          type: string
      required:
        - merchantAccount
        - reference
        - amount
        - shopperEmail
        - shopperReference
        - recurring
        - selectedRecurringDetailReference
    SubmitResponse:
      properties:
        additionalData:
          additionalProperties:
            type: string
          description: This field contains additional data, which may be returned in a particular response.
          type: object
        pspReference:
          description: A new reference to uniquely identify this request.
          type: string
        refusalReason:
          description: In case of refusal, an informational message for the reason.
          type: string
        resultCode:
          description: >-
            The response:

            * In case of success, it is `payout-submit-received`.

            * In case of an error, an informational message is returned.
          type: string
      required:
        - pspReference
        - resultCode
    ThreeDS2RequestData:
      properties:
        authenticationOnly:
          default: "false"
          description: If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/checkout/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.
          type: boolean
        challengeIndicator:
          description: >
            Possibility to specify a preference for receiving a challenge from the issuer.

            Allowed values:

            * `noPreference`

            * `requestNoChallenge`

            * `requestChallenge`

            * `requestChallengeAsMandate`
          enum:
            - noPreference
            - requestNoChallenge
            - requestChallenge
            - requestChallengeAsMandate
          type: string
        deviceChannel:
          description: >-
            The environment of the shopper.

            Allowed values:

            * `app`

            * `browser`
          type: string
        deviceRenderOptions:
          $ref: "#/components/schemas/DeviceRenderOptions"
          description: >-
            Display options for the 3D Secure 2 SDK.

            Optional and only for `deviceChannel` **app**.
        messageVersion:
          default: 2.1.0
          description: The `messageVersion` value indicating the 3D Secure 2 protocol version.
          type: string
        notificationURL:
          description: URL to where the issuer should send the `CRes`. Required if you are not using components for `channel` **Web** or if you are using classic integration `deviceChannel` **browser**.
          type: string
        sdkAppID:
          description: >-
            The `sdkAppID` value as received from the 3D Secure 2 SDK.

            Required for `deviceChannel` set to **app**.
          type: string
        sdkEncData:
          description: >-
            The `sdkEncData` value as received from the 3D Secure 2 SDK.

            Required for `deviceChannel` set to **app**.
          type: string
        sdkEphemPubKey:
          $ref: "#/components/schemas/SDKEphemPubKey"
          description: >-
            The `sdkEphemPubKey` value as received from the 3D Secure 2 SDK.

            Required for `deviceChannel` set to **app**.
        sdkMaxTimeout:
          default: "60"
          description: >-
            The maximum amount of time in minutes for the 3D Secure 2 authentication process.

            Optional and only for `deviceChannel` set to **app**. Defaults to **60** minutes.
          format: int32
          type: integer
        sdkReferenceNumber:
          description: >-
            The `sdkReferenceNumber` value as received from the 3D Secure 2 SDK.

            Only for `deviceChannel` set to **app**.
          type: string
        sdkTransID:
          description: >-
            The `sdkTransID` value as received from the 3D Secure 2 SDK.

            Only for `deviceChannel` set to **app**.
          type: string
        threeDSCompInd:
          description: Completion indicator for the device fingerprinting.
          type: string
        threeDSRequestorID:
          description: Required for [authentication-only integration](https://docs.adyen.com/checkout/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor identifier assigned by the Directory Server when you enrol for 3D Secure 2.
          type: string
        threeDSRequestorName:
          description: Required for [authentication-only integration](https://docs.adyen.com/checkout/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor name assigned by the Directory Server when you enrol for 3D Secure 2.
          type: string
        threeDSRequestorURL:
          description: URL of the (customer service) website that will be shown to the shopper in case of technical errors during the 3D Secure 2 process.
          type: string
      required:
        - deviceChannel
    ThreeDSecureData:
      properties:
        authenticationResponse:
          description: >-
            In 3D Secure 1, the authentication response if the shopper was redirected.


            In 3D Secure 2, this is the `transStatus` from the challenge result. If the transaction was frictionless, omit this parameter.
          enum:
            - Y
            - N
            - U
            - A
          type: string
        cavv:
          description: The cardholder authentication value (base64 encoded, 20 bytes in a decoded form).
          format: byte
          type: string
        cavvAlgorithm:
          description: The CAVV algorithm used. Include this only for 3D Secure 1.
          type: string
        directoryResponse:
          description: >-
            In 3D Secure 1, this is the enrollment response from the 3D directory server.


            In 3D Secure 2, this is the `transStatus` from the `ARes`.
          enum:
            - A
            - C
            - D
            - I
            - N
            - R
            - U
            - Y
          type: string
        dsTransID:
          description: Supported for 3D Secure 2. The unique transaction identifier assigned by the Directory Server (DS) to identify a single transaction.
          type: string
        eci:
          description: The electronic commerce indicator.
          type: string
        threeDSVersion:
          description: The version of the 3D Secure protocol.
          type: string
        xid:
          description: Supported for 3D Secure 1. The transaction identifier (Base64-encoded, 20 bytes in a decoded form).
          format: byte
          type: string
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: X-API-Key
      type: apiKey
    BasicAuth:
      scheme: basic
      type: http
x-groups:
  - Initialization
  - Reviewing
  - Instant payouts

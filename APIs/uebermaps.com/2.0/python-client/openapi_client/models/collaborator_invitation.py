# coding: utf-8

"""
    uebermaps API endpoints

    Enable people to store spots on public and private maps

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.map import Map
from openapi_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class CollaboratorInvitation(BaseModel):
    """
    CollaboratorInvitation
    """ # noqa: E501
    accepted: Optional[StrictBool] = None
    created_at: Optional[datetime] = None
    email: Optional[StrictStr] = None
    group: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    invited_by_user: Optional[User] = None
    map: Optional[Map] = None
    sent: Optional[StrictBool] = None
    updated_at: Optional[datetime] = None
    user: Optional[User] = None
    __properties: ClassVar[List[str]] = ["accepted", "created_at", "email", "group", "id", "invited_by_user", "map", "sent", "updated_at", "user"]

    @field_validator('group')
    def group_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['admin', 'editor']):
            raise ValueError("must be one of enum values ('admin', 'editor')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CollaboratorInvitation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of invited_by_user
        if self.invited_by_user:
            _dict['invited_by_user'] = self.invited_by_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of map
        if self.map:
            _dict['map'] = self.map.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CollaboratorInvitation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accepted": obj.get("accepted"),
            "created_at": obj.get("created_at"),
            "email": obj.get("email"),
            "group": obj.get("group"),
            "id": obj.get("id"),
            "invited_by_user": User.from_dict(obj["invited_by_user"]) if obj.get("invited_by_user") is not None else None,
            "map": Map.from_dict(obj["map"]) if obj.get("map") is not None else None,
            "sent": obj.get("sent"),
            "updated_at": obj.get("updated_at"),
            "user": User.from_dict(obj["user"]) if obj.get("user") is not None else None
        })
        return _obj



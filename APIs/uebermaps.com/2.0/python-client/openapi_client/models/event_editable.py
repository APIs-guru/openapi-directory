# coding: utf-8

"""
    uebermaps API endpoints

    Enable people to store spots on public and private maps

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class EventEditable(BaseModel):
    """
    EventEditable
    """ # noqa: E501
    description: Optional[StrictStr] = None
    ends_at: Optional[datetime] = None
    lat: Optional[Union[StrictFloat, StrictInt]] = None
    lon: Optional[Union[StrictFloat, StrictInt]] = None
    picture: Optional[StrictStr] = None
    starts_at: Optional[datetime] = None
    time_zone: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    user_id: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["description", "ends_at", "lat", "lon", "picture", "starts_at", "time_zone", "title", "user_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventEditable from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventEditable from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "ends_at": obj.get("ends_at"),
            "lat": obj.get("lat"),
            "lon": obj.get("lon"),
            "picture": obj.get("picture"),
            "starts_at": obj.get("starts_at"),
            "time_zone": obj.get("time_zone"),
            "title": obj.get("title"),
            "user_id": obj.get("user_id")
        })
        return _obj



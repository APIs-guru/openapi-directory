# coding: utf-8

"""
    uebermaps API endpoints

    Enable people to store spots on public and private maps

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.event_counts import EventCounts
from openapi_client.models.spot import Spot
from openapi_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class Event(BaseModel):
    """
    Event
    """ # noqa: E501
    counts: Optional[EventCounts] = None
    created_at: Optional[datetime] = None
    description: Optional[StrictStr] = None
    ends_at: Optional[datetime] = None
    id: Optional[StrictInt] = None
    lat: Optional[Union[StrictFloat, StrictInt]] = None
    lon: Optional[Union[StrictFloat, StrictInt]] = None
    owner_id: Optional[StrictInt] = None
    picture_url: Optional[StrictStr] = None
    spot: Optional[Spot] = None
    starts_at: Optional[datetime] = None
    time_zone: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    updated_at: Optional[datetime] = None
    user: Optional[User] = None
    __properties: ClassVar[List[str]] = ["counts", "created_at", "description", "ends_at", "id", "lat", "lon", "owner_id", "picture_url", "spot", "starts_at", "time_zone", "title", "updated_at", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Event from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of counts
        if self.counts:
            _dict['counts'] = self.counts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of spot
        if self.spot:
            _dict['spot'] = self.spot.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Event from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "counts": EventCounts.from_dict(obj["counts"]) if obj.get("counts") is not None else None,
            "created_at": obj.get("created_at"),
            "description": obj.get("description"),
            "ends_at": obj.get("ends_at"),
            "id": obj.get("id"),
            "lat": obj.get("lat"),
            "lon": obj.get("lon"),
            "owner_id": obj.get("owner_id"),
            "picture_url": obj.get("picture_url"),
            "spot": Spot.from_dict(obj["spot"]) if obj.get("spot") is not None else None,
            "starts_at": obj.get("starts_at"),
            "time_zone": obj.get("time_zone"),
            "title": obj.get("title"),
            "updated_at": obj.get("updated_at"),
            "user": User.from_dict(obj["user"]) if obj.get("user") is not None else None
        })
        return _obj



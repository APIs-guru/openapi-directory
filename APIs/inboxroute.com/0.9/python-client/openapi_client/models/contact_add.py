# coding: utf-8

"""
    Mailsquad

    MailSquad offers an affordable and super easy way to create, send and track delightful emails.

    The version of the OpenAPI document: 0.9
    Contact: support@mailsquad.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ContactAdd(BaseModel):
    """
    ContactAdd
    """ # noqa: E501
    confirmed: Optional[datetime] = Field(default=None, description="Date+time subscriber confirmed his/her list opt-in")
    customfields: Optional[Dict[str, Any]] = Field(default=None, description="Dictionnary of field key to value")
    email: StrictStr = Field(description="Email address")
    ip: Optional[StrictStr] = Field(default=None, description="Subscriber's IP address when he/she confirmed list opt-in")
    listid: StrictStr = Field(description="Unique 16 characters ID of the list owner")
    status: Optional[StrictInt] = Field(default=None, description="Status (   1- Active,   2- Unconfirmed,   3- Unsubscribed,   4- Deleted,   5- Cleaned because of hard bounce or spam complaint) ")
    __properties: ClassVar[List[str]] = ["confirmed", "customfields", "email", "ip", "listid", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContactAdd from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContactAdd from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "confirmed": obj.get("confirmed"),
            "customfields": obj.get("customfields"),
            "email": obj.get("email"),
            "ip": obj.get("ip"),
            "listid": obj.get("listid"),
            "status": obj.get("status")
        })
        return _obj



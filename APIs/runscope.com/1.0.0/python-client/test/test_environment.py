# coding: utf-8

"""
    Runscope API

    Manage Runscope programmatically.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.environment import Environment

class TestEnvironment(unittest.TestCase):
    """Environment unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Environment:
        """Test Environment
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Environment`
        """
        model = Environment()
        if include_optional:
            return Environment(
                auth = '',
                client_certificate = '',
                emails = None,
                exported_at = 56,
                headers = None,
                id = '',
                initial_script_hash = '',
                initial_variables = None,
                integrations = [
                    openapi_client.models.integration.Integration(
                        description = '', 
                        id = '', 
                        type = '', 
                        uuid = '', )
                    ],
                name = '',
                parent_environment_id = '',
                preserve_cookies = True,
                regions = [
                    ''
                    ],
                remote_agents = [
                    openapi_client.models.agent.Agent(
                        agent_id = '', 
                        name = '', 
                        version = '', )
                    ],
                retry_on_failure = True,
                script = '',
                script_library = [
                    ''
                    ],
                stop_on_failure = True,
                test_id = '',
                verify_ssl = True,
                version = '',
                webhooks = ''
            )
        else:
            return Environment(
                name = '',
        )
        """

    def testEnvironment(self):
        """Test Environment"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

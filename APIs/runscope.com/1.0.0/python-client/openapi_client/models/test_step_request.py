# coding: utf-8

"""
    Runscope API

    Manage Runscope programmatically.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.assertion import Assertion
from openapi_client.models.variable import Variable
from typing import Optional, Set
from typing_extensions import Self

class TestStepRequest(BaseModel):
    """
    TestStepRequest
    """ # noqa: E501
    step_type: Optional[StrictStr] = Field(default=None, description="Type of test step -- request, pause, condition, ghost-inspector, or subtest.")
    assertions: Optional[List[Assertion]] = Field(default=None, description="A list of assertions to apply to the HTTP response from this request.")
    auth: Optional[Dict[str, Any]] = Field(default=None, description="An authentication object with either basic, oauth1, or client_certificate credentials for authenticating this request.")
    before_scripts: Optional[List[StrictStr]] = Field(default=None, description="A list of pre-request scripts to run before this request.")
    body: Optional[StrictStr] = Field(default=None, description="A string to use as the body of the request.")
    form: Optional[Dict[str, Any]] = Field(default=None, description="An object with keys as form post parameter names matched to their values. Values can either be a single string or an array of strings.")
    headers: Optional[Dict[str, Any]] = Field(default=None, description="An object with keys as header names matched to their values. Values can either be a single string or an array of strings.")
    method: Optional[StrictStr] = Field(default=None, description="The HTTP method for this request step. E.g. GET, POST, PUT, DELETE, etc.")
    note: Optional[StrictStr] = Field(default=None, description="A description or note for this request step.")
    scripts: Optional[List[StrictStr]] = Field(default=None, description="A list of post-response scripts to run after this request.")
    url: Optional[StrictStr] = Field(default=None, description="The URL to make a request to for this step. This may contain both query string parameters and variables.")
    variables: Optional[List[Variable]] = Field(default=None, description="A list of variables to extract out of the HTTP response from this request.")
    __properties: ClassVar[List[str]] = ["step_type", "assertions", "auth", "before_scripts", "body", "form", "headers", "method", "note", "scripts", "url", "variables"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestStepRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in assertions (list)
        _items = []
        if self.assertions:
            for _item_assertions in self.assertions:
                if _item_assertions:
                    _items.append(_item_assertions.to_dict())
            _dict['assertions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in variables (list)
        _items = []
        if self.variables:
            for _item_variables in self.variables:
                if _item_variables:
                    _items.append(_item_variables.to_dict())
            _dict['variables'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestStepRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "step_type": obj.get("step_type"),
            "assertions": [Assertion.from_dict(_item) for _item in obj["assertions"]] if obj.get("assertions") is not None else None,
            "auth": obj.get("auth"),
            "before_scripts": obj.get("before_scripts"),
            "body": obj.get("body"),
            "form": obj.get("form"),
            "headers": obj.get("headers"),
            "method": obj.get("method"),
            "note": obj.get("note"),
            "scripts": obj.get("scripts"),
            "url": obj.get("url"),
            "variables": [Variable.from_dict(_item) for _item in obj["variables"]] if obj.get("variables") is not None else None
        })
        return _obj



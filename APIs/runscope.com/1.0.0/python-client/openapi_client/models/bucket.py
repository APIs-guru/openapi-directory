# coding: utf-8

"""
    Runscope API

    Manage Runscope programmatically.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.team import Team
from typing import Optional, Set
from typing_extensions import Self

class Bucket(BaseModel):
    """
    Bucket
    """ # noqa: E501
    auth_token: Optional[StrictStr] = Field(default=None, description="Bucket auth token if set, otherwise this value is null.")
    collections_url: Optional[StrictStr] = None
    default: Optional[StrictBool] = Field(default=None, description="True if this bucket is the 'default' for a team. Default buckets cannot be deleted.")
    key: Optional[StrictStr] = Field(default=None, description="The unique identifier used to address a bucket.")
    messages_url: Optional[StrictStr] = None
    name: Optional[StrictStr] = Field(default=None, description="The name of this bucket as displayed in your dashboard.")
    team: Optional[Team] = None
    tests_url: Optional[StrictStr] = None
    trigger_url: Optional[StrictStr] = None
    verify_ssl: Optional[StrictBool] = Field(default=None, description="True if this bucket is configured to verify ssl for requests made to it.")
    __properties: ClassVar[List[str]] = ["auth_token", "collections_url", "default", "key", "messages_url", "name", "team", "tests_url", "trigger_url", "verify_ssl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Bucket from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of team
        if self.team:
            _dict['team'] = self.team.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Bucket from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auth_token": obj.get("auth_token"),
            "collections_url": obj.get("collections_url"),
            "default": obj.get("default"),
            "key": obj.get("key"),
            "messages_url": obj.get("messages_url"),
            "name": obj.get("name"),
            "team": Team.from_dict(obj["team"]) if obj.get("team") is not None else None,
            "tests_url": obj.get("tests_url"),
            "trigger_url": obj.get("trigger_url"),
            "verify_ssl": obj.get("verify_ssl")
        })
        return _obj



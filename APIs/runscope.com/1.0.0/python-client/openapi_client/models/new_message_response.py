# coding: utf-8

"""
    Runscope API

    Manage Runscope programmatically.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class NewMessageResponse(BaseModel):
    """
    NewMessageResponse
    """ # noqa: E501
    body: Optional[StrictStr] = Field(default=None, description="HTTP response body. If the response body contains binary data that cannot be included directly in the JSON, you should encode the content with Base64. ")
    body_encoding: Optional[StrictStr] = Field(default=None, description="If the request body was encoded with Base64, this field should be present and set to  \"base64\". If not specified, defaults to \"plaintext\" ")
    headers: Optional[StrictStr] = Field(default=None, description="JSON object of header keys and values -- with values as a string or an array of strings.")
    reason: Optional[StrictStr] = Field(default=None, description="Textual description of HTTP status code. This will be set automatically if not  provided in the API call. For example, if the status code is 404, this will be  set to \"Not Found\" unless you explicitly specify a different reason. ")
    response_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Length of time it took to receive the response, in seconds.")
    status: Optional[StrictInt] = Field(default=None, description="HTTP status code returned in the response.")
    timestamp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Unix timestamp indicating when the request was made.")
    __properties: ClassVar[List[str]] = ["body", "body_encoding", "headers", "reason", "response_time", "status", "timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NewMessageResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NewMessageResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "body": obj.get("body"),
            "body_encoding": obj.get("body_encoding"),
            "headers": obj.get("headers"),
            "reason": obj.get("reason"),
            "response_time": obj.get("response_time"),
            "status": obj.get("status"),
            "timestamp": obj.get("timestamp")
        })
        return _obj



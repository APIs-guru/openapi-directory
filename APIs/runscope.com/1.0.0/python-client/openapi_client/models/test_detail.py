# coding: utf-8

"""
    Runscope API

    Manage Runscope programmatically.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.environment import Environment
from openapi_client.models.schedule import Schedule
from openapi_client.models.test_created_by import TestCreatedBy
from typing import Optional, Set
from typing_extensions import Self

class TestDetail(BaseModel):
    """
    TestDetail
    """ # noqa: E501
    created_at: Optional[StrictInt] = Field(default=None, description="The date the test was created in seconds (Unix time stamp format).")
    created_by: Optional[TestCreatedBy] = None
    default_environment_id: Optional[StrictStr] = None
    description: Optional[StrictStr] = Field(default=None, description="The description for the test.")
    id: Optional[StrictStr] = None
    last_run: Optional[Dict[str, Any]] = None
    name: StrictStr = Field(description="The name for the test.")
    trigger_url: Optional[StrictStr] = None
    environments: Optional[Environment] = None
    exported_at: Optional[StrictInt] = None
    schedules: Optional[List[Schedule]] = None
    steps: Optional[List[Dict[str, Any]]] = None
    version: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["created_at", "created_by", "default_environment_id", "description", "id", "last_run", "name", "trigger_url", "environments", "exported_at", "schedules", "steps", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of environments
        if self.environments:
            _dict['environments'] = self.environments.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in schedules (list)
        _items = []
        if self.schedules:
            for _item_schedules in self.schedules:
                if _item_schedules:
                    _items.append(_item_schedules.to_dict())
            _dict['schedules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created_at": obj.get("created_at"),
            "created_by": TestCreatedBy.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "default_environment_id": obj.get("default_environment_id"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "last_run": obj.get("last_run"),
            "name": obj.get("name"),
            "trigger_url": obj.get("trigger_url"),
            "environments": Environment.from_dict(obj["environments"]) if obj.get("environments") is not None else None,
            "exported_at": obj.get("exported_at"),
            "schedules": [Schedule.from_dict(_item) for _item in obj["schedules"]] if obj.get("schedules") is not None else None,
            "steps": obj.get("steps"),
            "version": obj.get("version")
        })
        return _obj



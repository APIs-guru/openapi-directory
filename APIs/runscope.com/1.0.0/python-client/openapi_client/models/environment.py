# coding: utf-8

"""
    Runscope API

    Manage Runscope programmatically.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.agent import Agent
from openapi_client.models.integration import Integration
from typing import Optional, Set
from typing_extensions import Self

class Environment(BaseModel):
    """
    Environment
    """ # noqa: E501
    auth: Optional[StrictStr] = None
    client_certificate: Optional[StrictStr] = None
    emails: Optional[Dict[str, Any]] = None
    exported_at: Optional[StrictInt] = None
    headers: Optional[Dict[str, Any]] = None
    id: Optional[StrictStr] = Field(default=None, description="The unique identifier for this environment.")
    initial_script_hash: Optional[StrictStr] = None
    initial_variables: Optional[Dict[str, Any]] = None
    integrations: Optional[List[Integration]] = Field(default=None, description="The list of integrations for this environment.")
    name: StrictStr = Field(description="Name of this environment.")
    parent_environment_id: Optional[StrictStr] = None
    preserve_cookies: Optional[StrictBool] = None
    regions: Optional[List[StrictStr]] = Field(default=None, description="An array of the region codes that this environment is using.")
    remote_agents: Optional[List[Agent]] = None
    retry_on_failure: Optional[StrictBool] = None
    script: Optional[StrictStr] = None
    script_library: Optional[List[StrictStr]] = Field(default=None, description="The list of ids for scripts, part of the script libraries, being used for this environment.")
    stop_on_failure: Optional[StrictBool] = Field(default=None, description="Stop executing the test after the first failed step.")
    test_id: Optional[StrictStr] = Field(default=None, description="The unique identifier for this test.")
    verify_ssl: Optional[StrictBool] = Field(default=None, description="Validate all SSL certificates on any HTTPS connections.")
    version: Optional[StrictStr] = None
    webhooks: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["auth", "client_certificate", "emails", "exported_at", "headers", "id", "initial_script_hash", "initial_variables", "integrations", "name", "parent_environment_id", "preserve_cookies", "regions", "remote_agents", "retry_on_failure", "script", "script_library", "stop_on_failure", "test_id", "verify_ssl", "version", "webhooks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Environment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in integrations (list)
        _items = []
        if self.integrations:
            for _item_integrations in self.integrations:
                if _item_integrations:
                    _items.append(_item_integrations.to_dict())
            _dict['integrations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in remote_agents (list)
        _items = []
        if self.remote_agents:
            for _item_remote_agents in self.remote_agents:
                if _item_remote_agents:
                    _items.append(_item_remote_agents.to_dict())
            _dict['remote_agents'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Environment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auth": obj.get("auth"),
            "client_certificate": obj.get("client_certificate"),
            "emails": obj.get("emails"),
            "exported_at": obj.get("exported_at"),
            "headers": obj.get("headers"),
            "id": obj.get("id"),
            "initial_script_hash": obj.get("initial_script_hash"),
            "initial_variables": obj.get("initial_variables"),
            "integrations": [Integration.from_dict(_item) for _item in obj["integrations"]] if obj.get("integrations") is not None else None,
            "name": obj.get("name"),
            "parent_environment_id": obj.get("parent_environment_id"),
            "preserve_cookies": obj.get("preserve_cookies"),
            "regions": obj.get("regions"),
            "remote_agents": [Agent.from_dict(_item) for _item in obj["remote_agents"]] if obj.get("remote_agents") is not None else None,
            "retry_on_failure": obj.get("retry_on_failure"),
            "script": obj.get("script"),
            "script_library": obj.get("script_library"),
            "stop_on_failure": obj.get("stop_on_failure"),
            "test_id": obj.get("test_id"),
            "verify_ssl": obj.get("verify_ssl"),
            "version": obj.get("version"),
            "webhooks": obj.get("webhooks")
        })
        return _obj



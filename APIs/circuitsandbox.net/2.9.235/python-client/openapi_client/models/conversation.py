# coding: utf-8

"""
    REST API Version 2

    Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)

    The version of the OpenAPI document: 2.9.235
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Conversation(BaseModel):
    """
    Conversation
    """ # noqa: E501
    avatar: Optional[StrictStr] = Field(default=None, description="The URL of the small avatar image of the conversation")
    avatar_large: Optional[StrictStr] = Field(default=None, description="The URL of the large avatar image of the conversation", alias="avatarLarge")
    conv_id: Optional[StrictStr] = Field(default=None, description="The ID of the conversation", alias="convId")
    creation_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="UTC timestamp when the conversation was created", alias="creationTime")
    creator_id: Optional[StrictStr] = Field(default=None, description="The ID of the user who created the conversation", alias="creatorId")
    creator_tenant_id: Optional[StrictStr] = Field(default=None, description="The ID of the Circuit domain (tenant) where the creator of the conversation belongs to", alias="creatorTenantId")
    description: Optional[StrictStr] = Field(default=None, description="The description of the conversation. This field is available only for conversations with type COMMUNITY")
    is_guest_access_disabled: Optional[StrictBool] = Field(default=None, description="Indicates whether guest access to the conversation is disabled or not", alias="isGuestAccessDisabled")
    is_moderated: Optional[StrictBool] = Field(default=None, description="Indicates whether the conversation is moderated or not. In a moderated conversation only participants who have been assigned the role of a moderator are allowed to add or remove participants into the conversation", alias="isModerated")
    modification_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="UTC timestamp when the conversation was modified. A conversation is modified when any of the conversation object fields change but not when conversation items are added or edited", alias="modificationTime")
    participants: Optional[List[StrictStr]] = Field(default=None, description="Array of active participants")
    topic: Optional[StrictStr] = Field(default=None, description="The title of the conversation. Conversations of type DIRECT cannot have a title")
    topic_placeholder: Optional[StrictStr] = Field(default=None, description="The title of the conversation. Conversations of type DIRECT cannot have a title", alias="topicPlaceholder")
    type: Optional[StrictStr] = Field(default=None, description="The type of the conversation. It can be one of the following: DIRECT, GROUP, COMMUNITY or LARGE")
    __properties: ClassVar[List[str]] = ["avatar", "avatarLarge", "convId", "creationTime", "creatorId", "creatorTenantId", "description", "isGuestAccessDisabled", "isModerated", "modificationTime", "participants", "topic", "topicPlaceholder", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Conversation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Conversation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "avatar": obj.get("avatar"),
            "avatarLarge": obj.get("avatarLarge"),
            "convId": obj.get("convId"),
            "creationTime": obj.get("creationTime"),
            "creatorId": obj.get("creatorId"),
            "creatorTenantId": obj.get("creatorTenantId"),
            "description": obj.get("description"),
            "isGuestAccessDisabled": obj.get("isGuestAccessDisabled"),
            "isModerated": obj.get("isModerated"),
            "modificationTime": obj.get("modificationTime"),
            "participants": obj.get("participants"),
            "topic": obj.get("topic"),
            "topicPlaceholder": obj.get("topicPlaceholder"),
            "type": obj.get("type")
        })
        return _obj



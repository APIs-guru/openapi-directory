# coding: utf-8

"""
    REST API Version 2

    Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)

    The version of the OpenAPI document: 2.9.235
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Presence(BaseModel):
    """
    Presence
    """ # noqa: E501
    dnd_until: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Timestamp until the DND state of the user is active", alias="dndUntil")
    is_opted_out: Optional[StrictBool] = Field(default=None, description="Indicates whether the user has opted out of their presence", alias="isOptedOut")
    latitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The latitude of the geo location of the user")
    location_text: Optional[StrictStr] = Field(default=None, description="The geo location of the user in clear text", alias="locationText")
    longitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The longitude of the geo location of the user")
    mobile: Optional[StrictBool] = Field(default=None, description="Identifies whether the presence state is based on the state information of a mobile device or not")
    poor: Optional[StrictBool] = Field(default=None, description="n/a")
    state: Optional[StrictStr] = Field(default=None, description="The presence state of the user. It can be one of the following: AVAILABLE, OFFLINE, AWAY, BUSY, or DND (Do-Not-Disturb)")
    status_message: Optional[StrictStr] = Field(default=None, description="A free formed status message of the user", alias="statusMessage")
    time_zone_offset: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The timezone offset of the user compared to UTC", alias="timeZoneOffset")
    user_id: Optional[StrictStr] = Field(default=None, description="The ID of the user", alias="userId")
    __properties: ClassVar[List[str]] = ["dndUntil", "isOptedOut", "latitude", "locationText", "longitude", "mobile", "poor", "state", "statusMessage", "timeZoneOffset", "userId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Presence from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Presence from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dndUntil": obj.get("dndUntil"),
            "isOptedOut": obj.get("isOptedOut"),
            "latitude": obj.get("latitude"),
            "locationText": obj.get("locationText"),
            "longitude": obj.get("longitude"),
            "mobile": obj.get("mobile"),
            "poor": obj.get("poor"),
            "state": obj.get("state"),
            "statusMessage": obj.get("statusMessage"),
            "timeZoneOffset": obj.get("timeZoneOffset"),
            "userId": obj.get("userId")
        })
        return _obj



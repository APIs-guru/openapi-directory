# coding: utf-8

"""
    REST API Version 2

    Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)

    The version of the OpenAPI document: 2.9.235
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Attachment(BaseModel):
    """
    Attachment
    """ # noqa: E501
    creation_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The creation time of the attachment.", alias="creationTime")
    creator_id: Optional[StrictStr] = Field(default=None, description="The id of the creator of the attachment.", alias="creatorId")
    delete_url: Optional[StrictStr] = Field(default=None, description="The delete URL of the attachment.", alias="deleteUrl")
    file_id: Optional[StrictStr] = Field(default=None, description="The id of the attachment file.", alias="fileId")
    file_name: Optional[StrictStr] = Field(default=None, description="The name of the attachment file.", alias="fileName")
    item_id: Optional[StrictStr] = Field(default=None, description="The item id to which the attachment is attached.", alias="itemId")
    mime_type: Optional[StrictStr] = Field(default=None, description="The mime type of the attachment file.", alias="mimeType")
    modification_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The modification time of the attachment.", alias="modificationTime")
    size: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The size of the attachment file.")
    url: Optional[StrictStr] = Field(default=None, description="The URL of the attachment.")
    __properties: ClassVar[List[str]] = ["creationTime", "creatorId", "deleteUrl", "fileId", "fileName", "itemId", "mimeType", "modificationTime", "size", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Attachment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Attachment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationTime": obj.get("creationTime"),
            "creatorId": obj.get("creatorId"),
            "deleteUrl": obj.get("deleteUrl"),
            "fileId": obj.get("fileId"),
            "fileName": obj.get("fileName"),
            "itemId": obj.get("itemId"),
            "mimeType": obj.get("mimeType"),
            "modificationTime": obj.get("modificationTime"),
            "size": obj.get("size"),
            "url": obj.get("url")
        })
        return _obj



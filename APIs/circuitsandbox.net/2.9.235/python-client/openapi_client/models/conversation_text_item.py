# coding: utf-8

"""
    REST API Version 2

    Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)

    The version of the OpenAPI document: 2.9.235
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.preview import Preview
from typing import Optional, Set
from typing_extensions import Self

class ConversationTextItem(BaseModel):
    """
    ConversationTextItem
    """ # noqa: E501
    content: Optional[StrictStr] = Field(default=None, description="The content of the text item")
    content_type: Optional[StrictStr] = Field(default=None, description="The type of the text item. It can be one of the following: RICH (with HTML content) or PLAIN (only text)", alias="contentType")
    form_meta_data: Optional[StrictStr] = Field(default=None, description="The meta data form", alias="formMetaData")
    is_webhook_message: Optional[StrictBool] = Field(default=None, description="Is this a webhook message?", alias="isWebhookMessage")
    liked_user_ids: Optional[List[StrictStr]] = Field(default=None, description="Array of IDs of the users who liked the item", alias="likedUserIds")
    parent_id: Optional[StrictStr] = Field(default=None, description="The ID of the parent item of the text item. This field is optional and can be used for thread views", alias="parentId")
    preview: Optional[Preview] = None
    state: Optional[StrictStr] = Field(default=None, description="The state of the text item. It can be one of the following: CREATED (which denotes that it was not modified since its creation), EDITED (which denotes that the creator of this item modified the item) or DELETED (which denotes that the item itself exists but its content was removed)")
    subject: Optional[StrictStr] = Field(default=None, description="TThe subject of the text item. This field is optional and maybe filled when creating the text item")
    __properties: ClassVar[List[str]] = ["content", "contentType", "formMetaData", "isWebhookMessage", "likedUserIds", "parentId", "preview", "state", "subject"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConversationTextItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of preview
        if self.preview:
            _dict['preview'] = self.preview.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConversationTextItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content": obj.get("content"),
            "contentType": obj.get("contentType"),
            "formMetaData": obj.get("formMetaData"),
            "isWebhookMessage": obj.get("isWebhookMessage"),
            "likedUserIds": obj.get("likedUserIds"),
            "parentId": obj.get("parentId"),
            "preview": Preview.from_dict(obj["preview"]) if obj.get("preview") is not None else None,
            "state": obj.get("state"),
            "subject": obj.get("subject")
        })
        return _obj



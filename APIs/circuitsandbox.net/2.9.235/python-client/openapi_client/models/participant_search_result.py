# coding: utf-8

"""
    REST API Version 2

    Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)

    The version of the OpenAPI document: 2.9.235
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ParticipantSearchResult(BaseModel):
    """
    ParticipantSearchResult
    """ # noqa: E501
    creation_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Time when the participant was added to the space", alias="creationTime")
    first_name: Optional[StrictStr] = Field(default=None, description="The first name of the participant", alias="firstName")
    last_name: Optional[StrictStr] = Field(default=None, description="The last name of the participant", alias="lastName")
    modification_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Time when the participant was changed last.", alias="modificationTime")
    number_of_replies: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of replies in the space created by this participant.", alias="numberOfReplies")
    number_of_topics: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of topics in the space created by this participant.", alias="numberOfTopics")
    role: Optional[StrictStr] = Field(default=None, description="The name of the role of the participant")
    small_image_uri: Optional[StrictStr] = Field(default=None, description="The uri of the small picture of the participant", alias="smallImageUri")
    state: Optional[StrictStr] = Field(default=None, description="The name of the state of the participant")
    tenant_id: Optional[StrictStr] = Field(default=None, description="the tenant id of the participant", alias="tenantId")
    user_id: Optional[StrictStr] = Field(default=None, description="The id of the participant", alias="userId")
    __properties: ClassVar[List[str]] = ["creationTime", "firstName", "lastName", "modificationTime", "numberOfReplies", "numberOfTopics", "role", "smallImageUri", "state", "tenantId", "userId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ParticipantSearchResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ParticipantSearchResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationTime": obj.get("creationTime"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "modificationTime": obj.get("modificationTime"),
            "numberOfReplies": obj.get("numberOfReplies"),
            "numberOfTopics": obj.get("numberOfTopics"),
            "role": obj.get("role"),
            "smallImageUri": obj.get("smallImageUri"),
            "state": obj.get("state"),
            "tenantId": obj.get("tenantId"),
            "userId": obj.get("userId")
        })
        return _obj



# coding: utf-8

"""
    REST API Version 2

    Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)

    The version of the OpenAPI document: 2.9.235
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.user_email_address import UserEmailAddress
from openapi_client.models.user_phone_number import UserPhoneNumber
from typing import Optional, Set
from typing_extensions import Self

class User(BaseModel):
    """
    User
    """ # noqa: E501
    avatar: Optional[StrictStr] = Field(default=None, description="The URL of the small avatar picture.")
    avatar_large: Optional[StrictStr] = Field(default=None, description="The URL of the large avatar picture.", alias="avatarLarge")
    company: Optional[StrictStr] = Field(default=None, description="The name of the user's company")
    department: Optional[StrictStr] = Field(default=None, description="missing documentation")
    display_name: Optional[StrictStr] = Field(default=None, description="The user's display name", alias="displayName")
    email_address: Optional[StrictStr] = Field(default=None, description="The primary email address of the user", alias="emailAddress")
    email_addresses: Optional[List[UserEmailAddress]] = Field(default=None, description="additional email addresses of the user", alias="emailAddresses")
    first_name: Optional[StrictStr] = Field(default=None, description="The first name of the user", alias="firstName")
    job_title: Optional[StrictStr] = Field(default=None, description="The job title of the user", alias="jobTitle")
    last_name: Optional[StrictStr] = Field(default=None, description="The last name of the user", alias="lastName")
    locale: Optional[StrictStr] = Field(default=None, description="The locale of the user. (E.g. en-US, de-DE)")
    phone_number: Optional[StrictStr] = Field(default=None, description="provisioned phone number of the user", alias="phoneNumber")
    phone_numbers: Optional[List[UserPhoneNumber]] = Field(default=None, description="additional phone numbers of the user", alias="phoneNumbers")
    primary_tenant_id: Optional[StrictStr] = Field(default=None, description="The primary tenant id", alias="primaryTenantId")
    secondary_email_address: Optional[StrictStr] = Field(default=None, description="The secondary email address", alias="secondaryEmailAddress")
    secondary_tenant_id: Optional[StrictStr] = Field(default=None, description="The secondary tenant id", alias="secondaryTenantId")
    user_id: Optional[StrictStr] = Field(default=None, description="The ID of the user", alias="userId")
    user_state: Optional[StrictStr] = Field(default=None, description="The state of the user, e.g. deleted", alias="userState")
    user_type: Optional[StrictStr] = Field(default=None, description="the type of the user", alias="userType")
    __properties: ClassVar[List[str]] = ["avatar", "avatarLarge", "company", "department", "displayName", "emailAddress", "emailAddresses", "firstName", "jobTitle", "lastName", "locale", "phoneNumber", "phoneNumbers", "primaryTenantId", "secondaryEmailAddress", "secondaryTenantId", "userId", "userState", "userType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in email_addresses (list)
        _items = []
        if self.email_addresses:
            for _item_email_addresses in self.email_addresses:
                if _item_email_addresses:
                    _items.append(_item_email_addresses.to_dict())
            _dict['emailAddresses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in phone_numbers (list)
        _items = []
        if self.phone_numbers:
            for _item_phone_numbers in self.phone_numbers:
                if _item_phone_numbers:
                    _items.append(_item_phone_numbers.to_dict())
            _dict['phoneNumbers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "avatar": obj.get("avatar"),
            "avatarLarge": obj.get("avatarLarge"),
            "company": obj.get("company"),
            "department": obj.get("department"),
            "displayName": obj.get("displayName"),
            "emailAddress": obj.get("emailAddress"),
            "emailAddresses": [UserEmailAddress.from_dict(_item) for _item in obj["emailAddresses"]] if obj.get("emailAddresses") is not None else None,
            "firstName": obj.get("firstName"),
            "jobTitle": obj.get("jobTitle"),
            "lastName": obj.get("lastName"),
            "locale": obj.get("locale"),
            "phoneNumber": obj.get("phoneNumber"),
            "phoneNumbers": [UserPhoneNumber.from_dict(_item) for _item in obj["phoneNumbers"]] if obj.get("phoneNumbers") is not None else None,
            "primaryTenantId": obj.get("primaryTenantId"),
            "secondaryEmailAddress": obj.get("secondaryEmailAddress"),
            "secondaryTenantId": obj.get("secondaryTenantId"),
            "userId": obj.get("userId"),
            "userState": obj.get("userState"),
            "userType": obj.get("userType")
        })
        return _obj



# coding: utf-8

"""
    REST API Version 2

    Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)

    The version of the OpenAPI document: 2.9.235
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.shared_item import SharedItem
from openapi_client.models.space_attachment import SpaceAttachment
from openapi_client.models.space_external_attachment import SpaceExternalAttachment
from openapi_client.models.space_item_preview import SpaceItemPreview
from typing import Optional, Set
from typing_extensions import Self

class SpaceItem(BaseModel):
    """
    SpaceItem
    """ # noqa: E501
    status: Optional[StrictStr] = Field(default=None, description="The Status of this item", alias="Status")
    attachments: Optional[List[SpaceAttachment]] = Field(default=None, description="The list of attachments")
    complex: Optional[StrictBool] = Field(default=None, description="Is this item complex")
    content: Optional[StrictStr] = Field(default=None, description="The content of this item")
    creation_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The time this item got created", alias="creationTime")
    creator_id: Optional[StrictStr] = Field(default=None, description="The Id of the creator", alias="creatorId")
    deleted_by: Optional[StrictStr] = Field(default=None, description="Incase this item got deleted, the id of the deletor", alias="deletedBy")
    external_attachments: Optional[List[SpaceExternalAttachment]] = Field(default=None, description="A list of external attachments", alias="externalAttachments")
    form_meta_data: Optional[StrictStr] = Field(default=None, description="Incase there is FormMetaData", alias="formMetaData")
    item_id: Optional[StrictStr] = Field(default=None, description="the Id of this item", alias="itemId")
    mentioned_users: Optional[List[StrictStr]] = Field(default=None, description="A list of userIds who have been mentioned in this item", alias="mentionedUsers")
    modification_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="the time this item got modified", alias="modificationTime")
    number_of_likes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of likes", alias="numberOfLikes")
    previews: Optional[List[SpaceItemPreview]] = Field(default=None, description="A list of previews")
    shared_items: Optional[List[SharedItem]] = Field(default=None, description="missing documentation", alias="sharedItems")
    space_id: Optional[StrictStr] = Field(default=None, description="the Id of the space containing this item", alias="spaceId")
    tenant_id: Optional[StrictStr] = Field(default=None, description="the Id of the tenant", alias="tenantId")
    __properties: ClassVar[List[str]] = ["Status", "attachments", "complex", "content", "creationTime", "creatorId", "deletedBy", "externalAttachments", "formMetaData", "itemId", "mentionedUsers", "modificationTime", "numberOfLikes", "previews", "sharedItems", "spaceId", "tenantId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SpaceItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in external_attachments (list)
        _items = []
        if self.external_attachments:
            for _item_external_attachments in self.external_attachments:
                if _item_external_attachments:
                    _items.append(_item_external_attachments.to_dict())
            _dict['externalAttachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in previews (list)
        _items = []
        if self.previews:
            for _item_previews in self.previews:
                if _item_previews:
                    _items.append(_item_previews.to_dict())
            _dict['previews'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shared_items (list)
        _items = []
        if self.shared_items:
            for _item_shared_items in self.shared_items:
                if _item_shared_items:
                    _items.append(_item_shared_items.to_dict())
            _dict['sharedItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SpaceItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Status": obj.get("Status"),
            "attachments": [SpaceAttachment.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "complex": obj.get("complex"),
            "content": obj.get("content"),
            "creationTime": obj.get("creationTime"),
            "creatorId": obj.get("creatorId"),
            "deletedBy": obj.get("deletedBy"),
            "externalAttachments": [SpaceExternalAttachment.from_dict(_item) for _item in obj["externalAttachments"]] if obj.get("externalAttachments") is not None else None,
            "formMetaData": obj.get("formMetaData"),
            "itemId": obj.get("itemId"),
            "mentionedUsers": obj.get("mentionedUsers"),
            "modificationTime": obj.get("modificationTime"),
            "numberOfLikes": obj.get("numberOfLikes"),
            "previews": [SpaceItemPreview.from_dict(_item) for _item in obj["previews"]] if obj.get("previews") is not None else None,
            "sharedItems": [SharedItem.from_dict(_item) for _item in obj["sharedItems"]] if obj.get("sharedItems") is not None else None,
            "spaceId": obj.get("spaceId"),
            "tenantId": obj.get("tenantId")
        })
        return _obj



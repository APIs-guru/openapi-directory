# coding: utf-8

"""
    REST API Version 2

    Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)

    The version of the OpenAPI document: 2.9.235
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Space(BaseModel):
    """
    Space
    """ # noqa: E501
    access_mode_type: Optional[StrictStr] = Field(default=None, description="The name of the access mode type of the space.", alias="accessModeType")
    creation_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The space creation time.", alias="creationTime")
    creator_id: Optional[StrictStr] = Field(default=None, description="The ID of the space creator.", alias="creatorId")
    default_role: Optional[StrictStr] = Field(default=None, description="The name of the default role of a new participant.", alias="defaultRole")
    description: Optional[StrictStr] = Field(default=None, description="The space description.")
    large_picture_base64: Optional[StrictStr] = Field(default=None, description="Base64 encoded image that can be set during the creation and the update of a space.", alias="largePictureBase64")
    large_picture_content_type: Optional[StrictStr] = Field(default=None, description="The content type of the image.", alias="largePictureContentType")
    large_picture_id: Optional[StrictStr] = Field(default=None, description="The file id of the large version of the picture.", alias="largePictureId")
    last_content_creation_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Time stamp when the last content (topic / reply) was created within this space.", alias="lastContentCreationTime")
    last_content_creator_id: Optional[StrictStr] = Field(default=None, description="User ID of the user which created the last content.", alias="lastContentCreatorId")
    modification_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The space modification time.", alias="modificationTime")
    name: Optional[StrictStr] = Field(default=None, description="The unique space name.")
    number_of_external_participants: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of external participants in the space.", alias="numberOfExternalParticipants")
    number_of_participants: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of participants in the space.", alias="numberOfParticipants")
    number_of_pinned_topics: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of pinned topics in the space.", alias="numberOfPinnedTopics")
    number_of_replies: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of replies in the space.", alias="numberOfReplies")
    number_of_topics: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of topics in the space.", alias="numberOfTopics")
    owner_id: Optional[StrictStr] = Field(default=None, description="The ID of the space owner.", alias="ownerId")
    small_picture_base64: Optional[StrictStr] = Field(default=None, description="Base64 encoded image that can be set during the creation and the update of a space.", alias="smallPictureBase64")
    small_picture_content_type: Optional[StrictStr] = Field(default=None, description="The content type of the image.", alias="smallPictureContentType")
    small_picture_id: Optional[StrictStr] = Field(default=None, description="The file id of the small version of the picture.", alias="smallPictureId")
    space_id: Optional[StrictStr] = Field(default=None, description="The unique space ID generated by the backend during the creation of the space.", alias="spaceId")
    status: Optional[StrictStr] = Field(default=None, description="The name of the status of the space.")
    tags: Optional[List[StrictStr]] = Field(default=None, description="The list of space tags.")
    tenant_id: Optional[StrictStr] = Field(default=None, description="The ID of the space tenant.", alias="tenantId")
    type: Optional[StrictStr] = Field(default=None, description="The name of the space type.")
    __properties: ClassVar[List[str]] = ["accessModeType", "creationTime", "creatorId", "defaultRole", "description", "largePictureBase64", "largePictureContentType", "largePictureId", "lastContentCreationTime", "lastContentCreatorId", "modificationTime", "name", "numberOfExternalParticipants", "numberOfParticipants", "numberOfPinnedTopics", "numberOfReplies", "numberOfTopics", "ownerId", "smallPictureBase64", "smallPictureContentType", "smallPictureId", "spaceId", "status", "tags", "tenantId", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Space from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Space from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessModeType": obj.get("accessModeType"),
            "creationTime": obj.get("creationTime"),
            "creatorId": obj.get("creatorId"),
            "defaultRole": obj.get("defaultRole"),
            "description": obj.get("description"),
            "largePictureBase64": obj.get("largePictureBase64"),
            "largePictureContentType": obj.get("largePictureContentType"),
            "largePictureId": obj.get("largePictureId"),
            "lastContentCreationTime": obj.get("lastContentCreationTime"),
            "lastContentCreatorId": obj.get("lastContentCreatorId"),
            "modificationTime": obj.get("modificationTime"),
            "name": obj.get("name"),
            "numberOfExternalParticipants": obj.get("numberOfExternalParticipants"),
            "numberOfParticipants": obj.get("numberOfParticipants"),
            "numberOfPinnedTopics": obj.get("numberOfPinnedTopics"),
            "numberOfReplies": obj.get("numberOfReplies"),
            "numberOfTopics": obj.get("numberOfTopics"),
            "ownerId": obj.get("ownerId"),
            "smallPictureBase64": obj.get("smallPictureBase64"),
            "smallPictureContentType": obj.get("smallPictureContentType"),
            "smallPictureId": obj.get("smallPictureId"),
            "spaceId": obj.get("spaceId"),
            "status": obj.get("status"),
            "tags": obj.get("tags"),
            "tenantId": obj.get("tenantId"),
            "type": obj.get("type")
        })
        return _obj



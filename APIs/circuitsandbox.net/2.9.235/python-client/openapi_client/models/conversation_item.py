# coding: utf-8

"""
    REST API Version 2

    Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)

    The version of the OpenAPI document: 2.9.235
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.attachment import Attachment
from openapi_client.models.conversation_text_item import ConversationTextItem
from openapi_client.models.rtc_item import RtcItem
from openapi_client.models.system_item import SystemItem
from typing import Optional, Set
from typing_extensions import Self

class ConversationItem(BaseModel):
    """
    ConversationItem
    """ # noqa: E501
    attachments: Optional[List[Attachment]] = Field(default=None, description="Array of files attached to the item")
    conv_id: Optional[StrictStr] = Field(default=None, description="The ID of the conversation the item belongs to", alias="convId")
    creation_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="UTC timestamp when the item was created", alias="creationTime")
    creator_id: Optional[StrictStr] = Field(default=None, description="The ID of the user who created the conversation item", alias="creatorId")
    include_in_unread_count: Optional[StrictBool] = Field(default=None, description="Indicates whether the item is included in the unread message count", alias="includeInUnreadCount")
    item_id: Optional[StrictStr] = Field(default=None, description="The ID of the item", alias="itemId")
    modification_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="UTC timestamp when the conversation was modified", alias="modificationTime")
    rtc: Optional[RtcItem] = None
    system: Optional[SystemItem] = None
    text: Optional[ConversationTextItem] = None
    type: Optional[StrictStr] = Field(default=None, description="The type of the conversation item. It can be one of the following TEXT, SYSTEM or RTC")
    __properties: ClassVar[List[str]] = ["attachments", "convId", "creationTime", "creatorId", "includeInUnreadCount", "itemId", "modificationTime", "rtc", "system", "text", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConversationItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of rtc
        if self.rtc:
            _dict['rtc'] = self.rtc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of system
        if self.system:
            _dict['system'] = self.system.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text
        if self.text:
            _dict['text'] = self.text.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConversationItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attachments": [Attachment.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "convId": obj.get("convId"),
            "creationTime": obj.get("creationTime"),
            "creatorId": obj.get("creatorId"),
            "includeInUnreadCount": obj.get("includeInUnreadCount"),
            "itemId": obj.get("itemId"),
            "modificationTime": obj.get("modificationTime"),
            "rtc": RtcItem.from_dict(obj["rtc"]) if obj.get("rtc") is not None else None,
            "system": SystemItem.from_dict(obj["system"]) if obj.get("system") is not None else None,
            "text": ConversationTextItem.from_dict(obj["text"]) if obj.get("text") is not None else None,
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    REST API Version 2

    Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)

    The version of the OpenAPI document: 2.9.235
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BridgeNumber(BaseModel):
    """
    BridgeNumber
    """ # noqa: E501
    bridge_number: Optional[StrictStr] = Field(default=None, description="The number that has to be called to join the real time session of a conversation", alias="bridgeNumber")
    country: Optional[StrictStr] = Field(default=None, description="The country where the bridge is hosted")
    is_most_used: Optional[StrictBool] = Field(default=None, description="Is most used", alias="isMostUsed")
    locale: Optional[StrictStr] = Field(default=None, description="The locale of the bridge")
    name: Optional[StrictStr] = Field(default=None, description="The name / identifier of the bridge")
    type: Optional[StrictStr] = Field(default=None, description="Information of the billing for the call, i.e. if the caller has to pay or not for the call")
    __properties: ClassVar[List[str]] = ["bridgeNumber", "country", "isMostUsed", "locale", "name", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BridgeNumber from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BridgeNumber from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bridgeNumber": obj.get("bridgeNumber"),
            "country": obj.get("country"),
            "isMostUsed": obj.get("isMostUsed"),
            "locale": obj.get("locale"),
            "name": obj.get("name"),
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    REST API Version 2

    Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)

    The version of the OpenAPI document: 2.9.235
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ParticipantsImportDataResult(BaseModel):
    """
    ParticipantsImportDataResult
    """ # noqa: E501
    actual_number_of_imported_participants: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Actual number of imported participants", alias="actualNumberOfImportedParticipants")
    estimated_import_duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Estimated import duration", alias="estimatedImportDuration")
    import_end_date: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Import end date", alias="importEndDate")
    import_file_id: Optional[StrictStr] = Field(default=None, description="The file id of the import", alias="importFileId")
    import_file_name: Optional[StrictStr] = Field(default=None, description="The name of the import file", alias="importFileName")
    import_progress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The progress of the import", alias="importProgress")
    import_start_date: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Import start date", alias="importStartDate")
    import_status: Optional[StrictStr] = Field(default=None, description="The status of the import", alias="importStatus")
    planned_number_of_imported_participants: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Planned number of imported participants", alias="plannedNumberOfImportedParticipants")
    result_file_id: Optional[StrictStr] = Field(default=None, description="The file id of the result file", alias="resultFileId")
    result_file_name: Optional[StrictStr] = Field(default=None, description="The name of the result file", alias="resultFileName")
    __properties: ClassVar[List[str]] = ["actualNumberOfImportedParticipants", "estimatedImportDuration", "importEndDate", "importFileId", "importFileName", "importProgress", "importStartDate", "importStatus", "plannedNumberOfImportedParticipants", "resultFileId", "resultFileName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ParticipantsImportDataResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ParticipantsImportDataResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actualNumberOfImportedParticipants": obj.get("actualNumberOfImportedParticipants"),
            "estimatedImportDuration": obj.get("estimatedImportDuration"),
            "importEndDate": obj.get("importEndDate"),
            "importFileId": obj.get("importFileId"),
            "importFileName": obj.get("importFileName"),
            "importProgress": obj.get("importProgress"),
            "importStartDate": obj.get("importStartDate"),
            "importStatus": obj.get("importStatus"),
            "plannedNumberOfImportedParticipants": obj.get("plannedNumberOfImportedParticipants"),
            "resultFileId": obj.get("resultFileId"),
            "resultFileName": obj.get("resultFileName")
        })
        return _obj



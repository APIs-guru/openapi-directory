# coding: utf-8

"""
    smart-me

    With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.smart_me_device_configuration_container import SmartMeDeviceConfigurationContainer

class TestSmartMeDeviceConfigurationContainer(unittest.TestCase):
    """SmartMeDeviceConfigurationContainer unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SmartMeDeviceConfigurationContainer:
        """Test SmartMeDeviceConfigurationContainer
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SmartMeDeviceConfigurationContainer`
        """
        model = SmartMeDeviceConfigurationContainer()
        if include_optional:
            return SmartMeDeviceConfigurationContainer(
                device_encryption_key = '',
                device_pin_code = '',
                dns_update_state = 'NoUpdate',
                enable_modbus_tcp = True,
                id = '',
                input_configuration = [
                    openapi_client.models.input_configuration_container.InputConfigurationContainer(
                        name = '', 
                        number = 56, 
                        off_text = '', 
                        on_text = '', 
                        type = 'TariffInput', )
                    ],
                output_configuration = [
                    openapi_client.models.output_configuration_container.OutputConfigurationContainer(
                        digital_output_no_connection_action = 'Nothing', 
                        name = '', 
                        number = 56, 
                        s0_pulse_value = 'PulseValue1000Kwh', 
                        type = 'ImpulseOutputActiveEnergy', )
                    ],
                show_reactive_energy = True,
                switch_configuration = [
                    openapi_client.models.switch_configuration_container.SwitchConfigurationContainer(
                        can_switch_off = True, 
                        number = 56, )
                    ],
                upload_interval = 'UploadInterval_1s'
            )
        else:
            return SmartMeDeviceConfigurationContainer(
        )
        """

    def testSmartMeDeviceConfigurationContainer(self):
        """Test SmartMeDeviceConfigurationContainer"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

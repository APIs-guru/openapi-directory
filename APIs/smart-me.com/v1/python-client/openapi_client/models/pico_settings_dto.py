# coding: utf-8

"""
    smart-me

    With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PicoSettingsDto(BaseModel):
    """
    DTO for the pico charging station settings
    """ # noqa: E501
    authentication_type: Optional[StrictStr] = Field(default=None, description="The authentication type", alias="AuthenticationType")
    car_id_detection: Optional[StrictBool] = Field(default=None, description="Flag if the car id detection is enabled", alias="CarIdDetection")
    display_brightness: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The Brightness of the LCD Matrix display. 0 = minimum, 255 = maximum", alias="DisplayBrightness")
    dns_name: Optional[StrictStr] = Field(default=None, description="The DNS name of the pico's internal ip", alias="DnsName")
    fix_cable_lock_enable: Optional[StrictBool] = Field(default=None, description="Enable the fix lock of the charging cable", alias="FixCableLockEnable")
    idle_image_url: Optional[StrictStr] = Field(default=None, description="The url of the idle image", alias="IdleImageUrl")
    internal_ip: Optional[StrictStr] = Field(default=None, description="The internal IP address", alias="InternalIp")
    loadmanagement_group_id: Optional[StrictStr] = Field(default=None, description="The ID of the loadmanagement group", alias="LoadmanagementGroupId")
    max_current: Optional[StrictInt] = Field(default=None, description="The max current of this station (in A)", alias="MaxCurrent")
    min_current: Optional[StrictInt] = Field(default=None, description="The max current of this station (in A)", alias="MinCurrent")
    modbus_tcp: Optional[StrictBool] = Field(default=None, description="Flag if ModbusTcp is enabled", alias="ModbusTcp")
    name: Optional[StrictStr] = Field(default=None, description="The name of the station", alias="Name")
    serial_number: Optional[StrictStr] = Field(default=None, description="The Serial number of the station", alias="SerialNumber")
    __properties: ClassVar[List[str]] = ["AuthenticationType", "CarIdDetection", "DisplayBrightness", "DnsName", "FixCableLockEnable", "IdleImageUrl", "InternalIp", "LoadmanagementGroupId", "MaxCurrent", "MinCurrent", "ModbusTcp", "Name", "SerialNumber"]

    @field_validator('authentication_type')
    def authentication_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'Backend']):
            raise ValueError("must be one of enum values ('None', 'Backend')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PicoSettingsDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PicoSettingsDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AuthenticationType": obj.get("AuthenticationType"),
            "CarIdDetection": obj.get("CarIdDetection"),
            "DisplayBrightness": obj.get("DisplayBrightness"),
            "DnsName": obj.get("DnsName"),
            "FixCableLockEnable": obj.get("FixCableLockEnable"),
            "IdleImageUrl": obj.get("IdleImageUrl"),
            "InternalIp": obj.get("InternalIp"),
            "LoadmanagementGroupId": obj.get("LoadmanagementGroupId"),
            "MaxCurrent": obj.get("MaxCurrent"),
            "MinCurrent": obj.get("MinCurrent"),
            "ModbusTcp": obj.get("ModbusTcp"),
            "Name": obj.get("Name"),
            "SerialNumber": obj.get("SerialNumber")
        })
        return _obj



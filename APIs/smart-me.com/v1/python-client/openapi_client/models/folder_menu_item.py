# coding: utf-8

"""
    smart-me

    With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.auto_export_settings import AutoExportSettings
from typing import Optional, Set
from typing_extensions import Self

class FolderMenuItem(BaseModel):
    """
    A folder menu item
    """ # noqa: E501
    auto_export_settings: Optional[AutoExportSettings] = Field(default=None, alias="AutoExportSettings")
    children: Optional[List[FolderMenuItem]] = Field(default=None, description="Children folder menu items (sub folder menu items)", alias="Children")
    description: Optional[StrictStr] = Field(default=None, description="The Description of the folder", alias="Description")
    folder_type: Optional[StrictStr] = Field(default=None, description="The folder type of the item", alias="FolderType")
    icon: Optional[StrictStr] = Field(default=None, description="The path to the Icon of this folder", alias="Icon")
    id: Optional[StrictStr] = Field(default=None, description="The id of the folder menu item", alias="Id")
    meter_serial_number: Optional[StrictStr] = Field(default=None, description="The serial number if the folder menu item is a meter.               Serial number is handled as a string, as javascript on client side cannot handle long integers properly.", alias="MeterSerialNumber")
    name: Optional[StrictStr] = Field(default=None, description="The Name of the item", alias="Name")
    user_id: Optional[StrictStr] = Field(default=None, description="The ID of the user of this folder (only for foldertype user)", alias="UserId")
    __properties: ClassVar[List[str]] = ["AutoExportSettings", "Children", "Description", "FolderType", "Icon", "Id", "MeterSerialNumber", "Name", "UserId"]

    @field_validator('folder_type')
    def folder_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Folder', 'Location', 'Factory', 'House', 'Office', 'Machine', 'VirtualMeter', 'ElecticityFolder', 'WaterFolder', 'HeatFolder', 'GasFolder', 'TemperatureFolder', 'Sun', 'Light', 'Ice', 'Sofa', 'Food', 'Coffee', 'Car', 'ChargingStation', 'Meter', 'User', 'Trash', 'GridPhotovoltaicPowerSystem']):
            raise ValueError("must be one of enum values ('Folder', 'Location', 'Factory', 'House', 'Office', 'Machine', 'VirtualMeter', 'ElecticityFolder', 'WaterFolder', 'HeatFolder', 'GasFolder', 'TemperatureFolder', 'Sun', 'Light', 'Ice', 'Sofa', 'Food', 'Coffee', 'Car', 'ChargingStation', 'Meter', 'User', 'Trash', 'GridPhotovoltaicPowerSystem')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FolderMenuItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of auto_export_settings
        if self.auto_export_settings:
            _dict['AutoExportSettings'] = self.auto_export_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item_children in self.children:
                if _item_children:
                    _items.append(_item_children.to_dict())
            _dict['Children'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FolderMenuItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AutoExportSettings": AutoExportSettings.from_dict(obj["AutoExportSettings"]) if obj.get("AutoExportSettings") is not None else None,
            "Children": [FolderMenuItem.from_dict(_item) for _item in obj["Children"]] if obj.get("Children") is not None else None,
            "Description": obj.get("Description"),
            "FolderType": obj.get("FolderType"),
            "Icon": obj.get("Icon"),
            "Id": obj.get("Id"),
            "MeterSerialNumber": obj.get("MeterSerialNumber"),
            "Name": obj.get("Name"),
            "UserId": obj.get("UserId")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
FolderMenuItem.model_rebuild(raise_errors=False)


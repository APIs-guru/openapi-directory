# coding: utf-8

"""
    smart-me

    With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.input_information import InputInformation
from openapi_client.models.output_information import OutputInformation
from typing import Optional, Set
from typing_extensions import Self

class MeterFolderInformation(BaseModel):
    """
    Container Class for the Web API
    """ # noqa: E501
    communication_module_firmware_version: Optional[StrictInt] = Field(default=None, description="The Version of the Communication Module (if exists)", alias="CommunicationModuleFirmwareVersion")
    communication_module_hardware_version: Optional[StrictInt] = Field(default=None, description="The Version of the Communication Module (if exists)", alias="CommunicationModuleHardwareVersion")
    firmware_version: Optional[StrictInt] = Field(default=None, description="The Firmware Version of a Meter", alias="FirmwareVersion")
    hardware_version: Optional[StrictInt] = Field(default=None, description="The Hardware Version of a Meter.", alias="HardwareVersion")
    input_informations: Optional[List[InputInformation]] = Field(default=None, description="Informations about the available Inputs", alias="InputInformations")
    is_folder: Optional[StrictBool] = Field(default=None, description="Flag if it's a Folder or a Meter", alias="IsFolder")
    name: Optional[StrictStr] = Field(default=None, description="Name of the Meter or Folder", alias="Name")
    output_informations: Optional[List[OutputInformation]] = Field(default=None, description="Informations about the available Outputs", alias="OutputInformations")
    __properties: ClassVar[List[str]] = ["CommunicationModuleFirmwareVersion", "CommunicationModuleHardwareVersion", "FirmwareVersion", "HardwareVersion", "InputInformations", "IsFolder", "Name", "OutputInformations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MeterFolderInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in input_informations (list)
        _items = []
        if self.input_informations:
            for _item_input_informations in self.input_informations:
                if _item_input_informations:
                    _items.append(_item_input_informations.to_dict())
            _dict['InputInformations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in output_informations (list)
        _items = []
        if self.output_informations:
            for _item_output_informations in self.output_informations:
                if _item_output_informations:
                    _items.append(_item_output_informations.to_dict())
            _dict['OutputInformations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MeterFolderInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CommunicationModuleFirmwareVersion": obj.get("CommunicationModuleFirmwareVersion"),
            "CommunicationModuleHardwareVersion": obj.get("CommunicationModuleHardwareVersion"),
            "FirmwareVersion": obj.get("FirmwareVersion"),
            "HardwareVersion": obj.get("HardwareVersion"),
            "InputInformations": [InputInformation.from_dict(_item) for _item in obj["InputInformations"]] if obj.get("InputInformations") is not None else None,
            "IsFolder": obj.get("IsFolder"),
            "Name": obj.get("Name"),
            "OutputInformations": [OutputInformation.from_dict(_item) for _item in obj["OutputInformations"]] if obj.get("OutputInformations") is not None else None
        })
        return _obj



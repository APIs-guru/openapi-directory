# coding: utf-8

"""
    smart-me

    With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SubUserData(BaseModel):
    """
    Container data for the sub user
    """ # noqa: E501
    access_end_date: Optional[datetime] = Field(default=None, description="The end date. until this date the user has access", alias="AccessEndDate")
    access_time_start_date: Optional[datetime] = Field(default=None, description="The start date. From this date the user has access", alias="AccessTimeStartDate")
    email: Optional[StrictStr] = Field(default=None, description="The Email adress", alias="Email")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the user", alias="Id")
    new_password: Optional[StrictStr] = Field(default=None, description="If set this is used a new password", alias="NewPassword")
    permission_level: Optional[StrictStr] = Field(default=None, description="The permission level of the user", alias="PermissionLevel")
    username: Optional[StrictStr] = Field(default=None, description="The username", alias="Username")
    __properties: ClassVar[List[str]] = ["AccessEndDate", "AccessTimeStartDate", "Email", "Id", "NewPassword", "PermissionLevel", "Username"]

    @field_validator('permission_level')
    def permission_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SelectedFolderAndSubfoldersMeters', 'SelectedFolderOnly']):
            raise ValueError("must be one of enum values ('SelectedFolderAndSubfoldersMeters', 'SelectedFolderOnly')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubUserData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubUserData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AccessEndDate": obj.get("AccessEndDate"),
            "AccessTimeStartDate": obj.get("AccessTimeStartDate"),
            "Email": obj.get("Email"),
            "Id": obj.get("Id"),
            "NewPassword": obj.get("NewPassword"),
            "PermissionLevel": obj.get("PermissionLevel"),
            "Username": obj.get("Username")
        })
        return _obj



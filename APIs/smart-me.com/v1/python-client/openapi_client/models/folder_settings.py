# coding: utf-8

"""
    smart-me

    With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class FolderSettings(BaseModel):
    """
    Container for the folder settings
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="The Description of the folder or meter", alias="Description")
    enable: Optional[StrictBool] = Field(default=None, description="Flag if the meter is enabled (folder not supported yet)", alias="Enable")
    folder_type: Optional[StrictStr] = Field(default=None, description="The Type of the folder", alias="FolderType")
    name: Optional[StrictStr] = Field(default=None, description="The Name of the folder or meter", alias="Name")
    parent_folder_id: Optional[StrictStr] = Field(default=None, description="The parent folder ID of this item", alias="ParentFolderId")
    serial_number: Optional[StrictInt] = Field(default=None, description="The serial number (meter only)", alias="SerialNumber")
    useable_for_virtual_billing_meters: Optional[StrictBool] = Field(default=None, description="Flag if the meter is usable for virtual billing meters (e.g. washroom)", alias="UseableForVirtualBillingMeters")
    value_correction: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The value correction on this meter", alias="ValueCorrection")
    value_correction_parent_folder: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The value correction on all parent folders. but not on the meter itself", alias="ValueCorrectionParentFolder")
    visualization_name: Optional[StrictStr] = Field(default=None, description="The name of the visualization of the folder", alias="VisualizationName")
    __properties: ClassVar[List[str]] = ["Description", "Enable", "FolderType", "Name", "ParentFolderId", "SerialNumber", "UseableForVirtualBillingMeters", "ValueCorrection", "ValueCorrectionParentFolder", "VisualizationName"]

    @field_validator('folder_type')
    def folder_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Folder', 'Location', 'Factory', 'House', 'Office', 'Machine', 'VirtualMeter', 'ElecticityFolder', 'WaterFolder', 'HeatFolder', 'GasFolder', 'TemperatureFolder', 'Sun', 'Light', 'Ice', 'Sofa', 'Food', 'Coffee', 'Car', 'ChargingStation', 'Meter', 'User', 'Trash', 'GridPhotovoltaicPowerSystem']):
            raise ValueError("must be one of enum values ('Folder', 'Location', 'Factory', 'House', 'Office', 'Machine', 'VirtualMeter', 'ElecticityFolder', 'WaterFolder', 'HeatFolder', 'GasFolder', 'TemperatureFolder', 'Sun', 'Light', 'Ice', 'Sofa', 'Food', 'Coffee', 'Car', 'ChargingStation', 'Meter', 'User', 'Trash', 'GridPhotovoltaicPowerSystem')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FolderSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FolderSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Description": obj.get("Description"),
            "Enable": obj.get("Enable"),
            "FolderType": obj.get("FolderType"),
            "Name": obj.get("Name"),
            "ParentFolderId": obj.get("ParentFolderId"),
            "SerialNumber": obj.get("SerialNumber"),
            "UseableForVirtualBillingMeters": obj.get("UseableForVirtualBillingMeters"),
            "ValueCorrection": obj.get("ValueCorrection"),
            "ValueCorrectionParentFolder": obj.get("ValueCorrectionParentFolder"),
            "VisualizationName": obj.get("VisualizationName")
        })
        return _obj



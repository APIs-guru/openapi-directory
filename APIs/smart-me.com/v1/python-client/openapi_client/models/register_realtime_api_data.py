# coding: utf-8

"""
    smart-me

    With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RegisterRealtimeApiData(BaseModel):
    """
    Container class for the register realtime API API
    """ # noqa: E501
    api_url: Optional[StrictStr] = Field(default=None, description="The URL of your endpoint. To this endpoint all the values are send to.", alias="ApiUrl")
    basic_auth_password: Optional[StrictStr] = Field(default=None, description="The Password (basic auth) of your endpoint. Leave empty of none.", alias="BasicAuthPassword")
    basic_auth_username: Optional[StrictStr] = Field(default=None, description="The Username (basic auth) of your endpoint. Leave empty of none.", alias="BasicAuthUsername")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the registration", alias="Id")
    meter_id: Optional[StrictStr] = Field(default=None, description="The ID of the Meter. Just used if the RegistrationType is \"SingleMeterRegistration\".", alias="MeterId")
    registration_type: Optional[StrictStr] = Field(default=None, description="The Type of this registration (per meter, per user, ...)", alias="RegistrationType")
    serial_number: Optional[StrictStr] = Field(default=None, description="The serial number of the Meter. Just used if the RegistrationType is \"SingleMeterRegistration\" and the MeterId is null.               Example: 1 SME 01 63000000 or 6300000", alias="SerialNumber")
    __properties: ClassVar[List[str]] = ["ApiUrl", "BasicAuthPassword", "BasicAuthUsername", "Id", "MeterId", "RegistrationType", "SerialNumber"]

    @field_validator('registration_type')
    def registration_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Disabled', 'SingleMeterRegistration', 'UserRegistration']):
            raise ValueError("must be one of enum values ('Disabled', 'SingleMeterRegistration', 'UserRegistration')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RegisterRealtimeApiData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RegisterRealtimeApiData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApiUrl": obj.get("ApiUrl"),
            "BasicAuthPassword": obj.get("BasicAuthPassword"),
            "BasicAuthUsername": obj.get("BasicAuthUsername"),
            "Id": obj.get("Id"),
            "MeterId": obj.get("MeterId"),
            "RegistrationType": obj.get("RegistrationType"),
            "SerialNumber": obj.get("SerialNumber")
        })
        return _obj



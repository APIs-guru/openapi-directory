# coding: utf-8

"""
    smart-me

    With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.custom_device_values import CustomDeviceValues
from typing import Optional, Set
from typing_extensions import Self

class CustomDeviceToPost(BaseModel):
    """
    Container Class for the Web API
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The ID of the device", alias="Id")
    name: Optional[StrictStr] = Field(default=None, description="The Name of the Device", alias="Name")
    serial: Optional[StrictInt] = Field(default=None, description="The Serial number", alias="Serial")
    value_date: Optional[datetime] = Field(default=None, description="The Date of the Value (in UTC). If this is null the Server Time is used.", alias="ValueDate")
    values: Optional[List[CustomDeviceValues]] = Field(default=None, description="The Values of the custom Device", alias="Values")
    __properties: ClassVar[List[str]] = ["Id", "Name", "Serial", "ValueDate", "Values"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomDeviceToPost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in values (list)
        _items = []
        if self.values:
            for _item_values in self.values:
                if _item_values:
                    _items.append(_item_values.to_dict())
            _dict['Values'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomDeviceToPost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Id": obj.get("Id"),
            "Name": obj.get("Name"),
            "Serial": obj.get("Serial"),
            "ValueDate": obj.get("ValueDate"),
            "Values": [CustomDeviceValues.from_dict(_item) for _item in obj["Values"]] if obj.get("Values") is not None else None
        })
        return _obj



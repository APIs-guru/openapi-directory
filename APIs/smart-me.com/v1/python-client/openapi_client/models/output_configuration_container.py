# coding: utf-8

"""
    smart-me

    With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OutputConfigurationContainer(BaseModel):
    """
    Configuration for the outputs of a meter (analog/digital outputs)
    """ # noqa: E501
    digital_output_no_connection_action: Optional[StrictStr] = Field(default=None, description="The Action when the device has lost the connection", alias="DigitalOutputNoConnectionAction")
    name: Optional[StrictStr] = Field(default=None, description="The Name of the Output", alias="Name")
    number: Optional[StrictInt] = Field(default=None, description="The number of the Output. (1 for Output 1, 2 for Output 2)", alias="Number")
    s0_pulse_value: Optional[StrictStr] = Field(default=None, description="The S0 Pulse Value", alias="S0PulseValue")
    type: Optional[StrictStr] = Field(default=None, description="The Type of the output", alias="Type")
    __properties: ClassVar[List[str]] = ["DigitalOutputNoConnectionAction", "Name", "Number", "S0PulseValue", "Type"]

    @field_validator('digital_output_no_connection_action')
    def digital_output_no_connection_action_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Nothing', 'TurnOff', 'TurnOn', 'SetPwmValue']):
            raise ValueError("must be one of enum values ('Nothing', 'TurnOff', 'TurnOn', 'SetPwmValue')")
        return value

    @field_validator('s0_pulse_value')
    def s0_pulse_value_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PulseValue1000Kwh', 'PulseValue10000Kwh']):
            raise ValueError("must be one of enum values ('PulseValue1000Kwh', 'PulseValue10000Kwh')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ImpulseOutputActiveEnergy', 'ImpulseOutputActiveEnergyImport', 'ImpulseOutputActiveEnergyExport', 'ImpulseOutputReactiveEnergy', 'DigitalOutput', 'AnalogPwmSignalOutput', 'Disabled']):
            raise ValueError("must be one of enum values ('ImpulseOutputActiveEnergy', 'ImpulseOutputActiveEnergyImport', 'ImpulseOutputActiveEnergyExport', 'ImpulseOutputReactiveEnergy', 'DigitalOutput', 'AnalogPwmSignalOutput', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OutputConfigurationContainer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OutputConfigurationContainer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "DigitalOutputNoConnectionAction": obj.get("DigitalOutputNoConnectionAction"),
            "Name": obj.get("Name"),
            "Number": obj.get("Number"),
            "S0PulseValue": obj.get("S0PulseValue"),
            "Type": obj.get("Type")
        })
        return _obj



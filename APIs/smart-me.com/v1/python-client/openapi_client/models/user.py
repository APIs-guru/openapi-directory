# coding: utf-8

"""
    smart-me

    With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class User(BaseModel):
    """
    Container Class for the Web API
    """ # noqa: E501
    child_users: Optional[List[User]] = Field(default=None, description="The Users created by this users.", alias="ChildUsers")
    email: Optional[StrictStr] = Field(default=None, description="The EMail Address of the User", alias="Email")
    id: Optional[StrictInt] = Field(default=None, description="The ID of the User", alias="Id")
    id_as_string: Optional[StrictStr] = Field(default=None, description="The ID of the user as string", alias="IdAsString")
    is_admin: Optional[StrictBool] = Field(default=None, description="Flag if this User is an Admin User", alias="IsAdmin")
    permissions: Optional[List[StrictStr]] = Field(default=None, description="Additional Permissions", alias="Permissions")
    username: Optional[StrictStr] = Field(default=None, description="The Username of the User", alias="Username")
    __properties: ClassVar[List[str]] = ["ChildUsers", "Email", "Id", "IdAsString", "IsAdmin", "Permissions", "Username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in child_users (list)
        _items = []
        if self.child_users:
            for _item_child_users in self.child_users:
                if _item_child_users:
                    _items.append(_item_child_users.to_dict())
            _dict['ChildUsers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ChildUsers": [User.from_dict(_item) for _item in obj["ChildUsers"]] if obj.get("ChildUsers") is not None else None,
            "Email": obj.get("Email"),
            "Id": obj.get("Id"),
            "IdAsString": obj.get("IdAsString"),
            "IsAdmin": obj.get("IsAdmin"),
            "Permissions": obj.get("Permissions"),
            "Username": obj.get("Username")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
User.model_rebuild(raise_errors=False)


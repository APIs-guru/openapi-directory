# coding: utf-8

"""
    smart-me

    With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PicoChargingData(BaseModel):
    """
    Container class for the pico charging station API
    """ # noqa: E501
    active_charging_energy: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The energy used by this active charging (in kWh)", alias="ActiveChargingEnergy")
    active_charging_power: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The power of the active charging (in kW)", alias="ActiveChargingPower")
    connection_mode: Optional[StrictStr] = Field(default=None, description="The mode how this station is connected to the cloud", alias="ConnectionMode")
    duration: Optional[StrictInt] = Field(default=None, description="The duration of this charging in seconds", alias="Duration")
    last_warning_or_error: Optional[StrictStr] = Field(default=None, description="The last warning or error of the station. This message is only shown if the warning or error happend in the last 5 minutes.", alias="LastWarningOrError")
    last_warning_or_error_message: Optional[StrictStr] = Field(default=None, description="The message of the last warning or error of the station.", alias="LastWarningOrErrorMessage")
    last_warning_or_error_time: Optional[datetime] = Field(default=None, description="The time when the LastWarningOrError happend", alias="LastWarningOrErrorTime")
    load_shedding_state: Optional[StrictStr] = Field(default=None, description="Max. dynamic current (e.g. set over API or Modbus TCP) of this station or the loadmanagement group of the station if the station is in a group. in A", alias="LoadSheddingState")
    loadmanagement_group_name: Optional[StrictStr] = Field(default=None, description="The name of the loadmanagement group. Or string.empty if the station is not in a group", alias="LoadmanagementGroupName")
    max_allowed_charging_current: Optional[StrictInt] = Field(default=None, description="Max allowed charging current in A", alias="MaxAllowedChargingCurrent")
    max_dynamic_current: Optional[StrictInt] = Field(default=None, description="Max. dynamic current (e.g. set over API or Modbus TCP) of this station or the loadmanagement group of the station if the station is in a group. in A", alias="MaxDynamicCurrent")
    max_loadmanagement_group_current: Optional[StrictInt] = Field(default=None, description="Max. current of the loadmanagement group of this station (if there is any) in A", alias="MaxLoadmanagementGroupCurrent")
    max_station_current: Optional[StrictInt] = Field(default=None, description="Max. current of the station in A", alias="MaxStationCurrent")
    min_station_current: Optional[StrictInt] = Field(default=None, description="Min. current of the station in A", alias="MinStationCurrent")
    rssi: Optional[StrictInt] = Field(default=None, description="Received Signal Strength Indicator for the connection mode (wifi or mobile).               -127 (min) to 0 (Max)", alias="RSSI")
    state: Optional[StrictStr] = Field(default=None, description="The state of the charging station", alias="State")
    value_date: Optional[datetime] = Field(default=None, description="The date of this values", alias="ValueDate")
    __properties: ClassVar[List[str]] = ["ActiveChargingEnergy", "ActiveChargingPower", "ConnectionMode", "Duration", "LastWarningOrError", "LastWarningOrErrorMessage", "LastWarningOrErrorTime", "LoadSheddingState", "LoadmanagementGroupName", "MaxAllowedChargingCurrent", "MaxDynamicCurrent", "MaxLoadmanagementGroupCurrent", "MaxStationCurrent", "MinStationCurrent", "RSSI", "State", "ValueDate"]

    @field_validator('connection_mode')
    def connection_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NetworkToCloudConnectionMode_NoConnection', 'NetworkToCloudConnectionMode_DirectWiFiConnection', 'NetworkToCloudConnectionMode_GPRSConnection', 'NetworkToCloudConnectionMode_NBIotConnection', 'NetworkToCloudConnectionMode_LteCatM1Connection', 'NetworkToCloudConnectionMode_MeshWiFiConnection', 'NetworkToCloudConnectionMode_MeshMobileConnection']):
            raise ValueError("must be one of enum values ('NetworkToCloudConnectionMode_NoConnection', 'NetworkToCloudConnectionMode_DirectWiFiConnection', 'NetworkToCloudConnectionMode_GPRSConnection', 'NetworkToCloudConnectionMode_NBIotConnection', 'NetworkToCloudConnectionMode_LteCatM1Connection', 'NetworkToCloudConnectionMode_MeshWiFiConnection', 'NetworkToCloudConnectionMode_MeshMobileConnection')")
        return value

    @field_validator('last_warning_or_error')
    def last_warning_or_error_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MeterDataloggerEvent', 'MeterRestart', 'PowerDown', 'MissingPhaseL1', 'MissingPhaseL2', 'MissingPhaseL3', 'TamperDetectionCover', 'MagneticFieldDetection', 'ClockAdjusted', 'Overvoltage', 'Undervoltage', 'OvervoltageL1', 'OvervoltageL2', 'OvervoltageL3', 'ChargingTransaction', 'PicoErrorControllerPanic', 'PicoErrorMidServicePanic', 'PicoWarningRcdTriggered', 'PicoWarningCableLockError', 'PicoWarningDiodeFailure', 'PicoWarningOverload', 'PicoWarningHighTemperature']):
            raise ValueError("must be one of enum values ('MeterDataloggerEvent', 'MeterRestart', 'PowerDown', 'MissingPhaseL1', 'MissingPhaseL2', 'MissingPhaseL3', 'TamperDetectionCover', 'MagneticFieldDetection', 'ClockAdjusted', 'Overvoltage', 'Undervoltage', 'OvervoltageL1', 'OvervoltageL2', 'OvervoltageL3', 'ChargingTransaction', 'PicoErrorControllerPanic', 'PicoErrorMidServicePanic', 'PicoWarningRcdTriggered', 'PicoWarningCableLockError', 'PicoWarningDiodeFailure', 'PicoWarningOverload', 'PicoWarningHighTemperature')")
        return value

    @field_validator('load_shedding_state')
    def load_shedding_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MaxCurrent', 'HalfCurrent', 'MinCurrent', 'NoCurrent']):
            raise ValueError("must be one of enum values ('MaxCurrent', 'HalfCurrent', 'MinCurrent', 'NoCurrent')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Booting', 'ReadyNoCarConnected', 'ReadyCarConnected', 'StartedWaitForCar', 'Charging', 'Installation', 'Authorize', 'Offline']):
            raise ValueError("must be one of enum values ('Booting', 'ReadyNoCarConnected', 'ReadyCarConnected', 'StartedWaitForCar', 'Charging', 'Installation', 'Authorize', 'Offline')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PicoChargingData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PicoChargingData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ActiveChargingEnergy": obj.get("ActiveChargingEnergy"),
            "ActiveChargingPower": obj.get("ActiveChargingPower"),
            "ConnectionMode": obj.get("ConnectionMode"),
            "Duration": obj.get("Duration"),
            "LastWarningOrError": obj.get("LastWarningOrError"),
            "LastWarningOrErrorMessage": obj.get("LastWarningOrErrorMessage"),
            "LastWarningOrErrorTime": obj.get("LastWarningOrErrorTime"),
            "LoadSheddingState": obj.get("LoadSheddingState"),
            "LoadmanagementGroupName": obj.get("LoadmanagementGroupName"),
            "MaxAllowedChargingCurrent": obj.get("MaxAllowedChargingCurrent"),
            "MaxDynamicCurrent": obj.get("MaxDynamicCurrent"),
            "MaxLoadmanagementGroupCurrent": obj.get("MaxLoadmanagementGroupCurrent"),
            "MaxStationCurrent": obj.get("MaxStationCurrent"),
            "MinStationCurrent": obj.get("MinStationCurrent"),
            "RSSI": obj.get("RSSI"),
            "State": obj.get("State"),
            "ValueDate": obj.get("ValueDate")
        })
        return _obj



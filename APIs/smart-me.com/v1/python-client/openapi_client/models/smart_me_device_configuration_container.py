# coding: utf-8

"""
    smart-me

    With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.input_configuration_container import InputConfigurationContainer
from openapi_client.models.output_configuration_container import OutputConfigurationContainer
from openapi_client.models.switch_configuration_container import SwitchConfigurationContainer
from typing import Optional, Set
from typing_extensions import Self

class SmartMeDeviceConfigurationContainer(BaseModel):
    """
    API Container class for the meter configuration
    """ # noqa: E501
    device_encryption_key: Optional[StrictStr] = Field(default=None, description="The encryption key used to decrypt messages received from an external meter (used only for the smart-me modules)", alias="DeviceEncryptionKey")
    device_pin_code: Optional[StrictStr] = Field(default=None, description="PIN code to enter on a external meter (e.g. for the FNN meters)", alias="DevicePinCode")
    dns_update_state: Optional[StrictStr] = Field(default=None, description="Configuration of the dynamic DNS service. More information: http://wiki.smart-me.com/index.php/Dynamisches_DNS", alias="DnsUpdateState")
    enable_modbus_tcp: Optional[StrictBool] = Field(default=None, description="Enables or disables Modbus TCP (if the meter supports it).", alias="EnableModbusTcp")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the device", alias="Id")
    input_configuration: Optional[List[InputConfigurationContainer]] = Field(default=None, description="The configuration for the intput outputs", alias="InputConfiguration")
    output_configuration: Optional[List[OutputConfigurationContainer]] = Field(default=None, description="The configuration for the external outputs", alias="OutputConfiguration")
    show_reactive_energy: Optional[StrictBool] = Field(default=None, description="Shows the reactive energy values (if the meter supports it).", alias="ShowReactiveEnergy")
    switch_configuration: Optional[List[SwitchConfigurationContainer]] = Field(default=None, description="The configuration for the phase switches", alias="SwitchConfiguration")
    upload_interval: Optional[StrictStr] = Field(default=None, description="Number of seconds the device will upload the data. For smaller values maybe a professional license is needed.", alias="UploadInterval")
    __properties: ClassVar[List[str]] = ["DeviceEncryptionKey", "DevicePinCode", "DnsUpdateState", "EnableModbusTcp", "Id", "InputConfiguration", "OutputConfiguration", "ShowReactiveEnergy", "SwitchConfiguration", "UploadInterval"]

    @field_validator('dns_update_state')
    def dns_update_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NoUpdate', 'DnsUpdatePublicIp', 'DnsUpdateInternalIp']):
            raise ValueError("must be one of enum values ('NoUpdate', 'DnsUpdatePublicIp', 'DnsUpdateInternalIp')")
        return value

    @field_validator('upload_interval')
    def upload_interval_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UploadInterval_1s', 'UploadInterval_5s', 'UploadInterval_10s', 'UploadInterval_30s', 'UploadInterval_60s', 'UploadInterval_5min', 'UploadInterval_15min', 'UploadInterval_30min', 'UploadInterval_60min', 'UploadInterval_6h', 'UploadInterval_12h', 'UploadInterval_24h']):
            raise ValueError("must be one of enum values ('UploadInterval_1s', 'UploadInterval_5s', 'UploadInterval_10s', 'UploadInterval_30s', 'UploadInterval_60s', 'UploadInterval_5min', 'UploadInterval_15min', 'UploadInterval_30min', 'UploadInterval_60min', 'UploadInterval_6h', 'UploadInterval_12h', 'UploadInterval_24h')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SmartMeDeviceConfigurationContainer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in input_configuration (list)
        _items = []
        if self.input_configuration:
            for _item_input_configuration in self.input_configuration:
                if _item_input_configuration:
                    _items.append(_item_input_configuration.to_dict())
            _dict['InputConfiguration'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in output_configuration (list)
        _items = []
        if self.output_configuration:
            for _item_output_configuration in self.output_configuration:
                if _item_output_configuration:
                    _items.append(_item_output_configuration.to_dict())
            _dict['OutputConfiguration'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in switch_configuration (list)
        _items = []
        if self.switch_configuration:
            for _item_switch_configuration in self.switch_configuration:
                if _item_switch_configuration:
                    _items.append(_item_switch_configuration.to_dict())
            _dict['SwitchConfiguration'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SmartMeDeviceConfigurationContainer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "DeviceEncryptionKey": obj.get("DeviceEncryptionKey"),
            "DevicePinCode": obj.get("DevicePinCode"),
            "DnsUpdateState": obj.get("DnsUpdateState"),
            "EnableModbusTcp": obj.get("EnableModbusTcp"),
            "Id": obj.get("Id"),
            "InputConfiguration": [InputConfigurationContainer.from_dict(_item) for _item in obj["InputConfiguration"]] if obj.get("InputConfiguration") is not None else None,
            "OutputConfiguration": [OutputConfigurationContainer.from_dict(_item) for _item in obj["OutputConfiguration"]] if obj.get("OutputConfiguration") is not None else None,
            "ShowReactiveEnergy": obj.get("ShowReactiveEnergy"),
            "SwitchConfiguration": [SwitchConfigurationContainer.from_dict(_item) for _item in obj["SwitchConfiguration"]] if obj.get("SwitchConfiguration") is not None else None,
            "UploadInterval": obj.get("UploadInterval")
        })
        return _obj



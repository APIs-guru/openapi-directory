# coding: utf-8

"""
    smart-me

    With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class DeviceInPast(BaseModel):
    """
    Container Class for the Web API. Conatinas the MeterValues in the Past
    """ # noqa: E501
    counter_reading: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Meter Counter Reading (Total Energy used)", alias="CounterReading")
    counter_reading_export: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Meter Counter Reading Export", alias="CounterReadingExport")
    counter_reading_export_t1: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Meter Counter Reading Export Tariff 1", alias="CounterReadingExportT1")
    counter_reading_export_t2: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Meter Counter Reading Export Tariff 2", alias="CounterReadingExportT2")
    counter_reading_export_t3: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Meter Counter Reading Export Tariff 3", alias="CounterReadingExportT3")
    counter_reading_export_t4: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Meter Counter Reading Export Tariff 4", alias="CounterReadingExportT4")
    counter_reading_import: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Meter Counter Reading Import", alias="CounterReadingImport")
    counter_reading_import_t1: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Meter Counter Reading Import Tariff 1", alias="CounterReadingImportT1")
    counter_reading_import_t2: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Meter Counter Reading Import Tariff 2", alias="CounterReadingImportT2")
    counter_reading_import_t3: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Meter Counter Reading Import Tariff 3", alias="CounterReadingImportT3")
    counter_reading_import_t4: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Meter Counter Reading Import Tariff 4", alias="CounterReadingImportT4")
    counter_reading_t1: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Meter Counter Reading Tariff 1", alias="CounterReadingT1")
    counter_reading_t2: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Meter Counter Reading Tariff 2", alias="CounterReadingT2")
    counter_reading_t3: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Meter Counter Reading Tariff 3", alias="CounterReadingT3")
    counter_reading_t4: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Meter Counter Reading Tariff 4", alias="CounterReadingT4")
    counter_reading_unit: Optional[StrictStr] = Field(default=None, description="The Unit of the Counter Reading", alias="CounterReadingUnit")
    var_date: Optional[datetime] = Field(default=None, description="The Date of the Values", alias="Date")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the device", alias="Id")
    serial: Optional[StrictInt] = Field(default=None, description="The Serial number", alias="Serial")
    __properties: ClassVar[List[str]] = ["CounterReading", "CounterReadingExport", "CounterReadingExportT1", "CounterReadingExportT2", "CounterReadingExportT3", "CounterReadingExportT4", "CounterReadingImport", "CounterReadingImportT1", "CounterReadingImportT2", "CounterReadingImportT3", "CounterReadingImportT4", "CounterReadingT1", "CounterReadingT2", "CounterReadingT3", "CounterReadingT4", "CounterReadingUnit", "Date", "Id", "Serial"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceInPast from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceInPast from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CounterReading": obj.get("CounterReading"),
            "CounterReadingExport": obj.get("CounterReadingExport"),
            "CounterReadingExportT1": obj.get("CounterReadingExportT1"),
            "CounterReadingExportT2": obj.get("CounterReadingExportT2"),
            "CounterReadingExportT3": obj.get("CounterReadingExportT3"),
            "CounterReadingExportT4": obj.get("CounterReadingExportT4"),
            "CounterReadingImport": obj.get("CounterReadingImport"),
            "CounterReadingImportT1": obj.get("CounterReadingImportT1"),
            "CounterReadingImportT2": obj.get("CounterReadingImportT2"),
            "CounterReadingImportT3": obj.get("CounterReadingImportT3"),
            "CounterReadingImportT4": obj.get("CounterReadingImportT4"),
            "CounterReadingT1": obj.get("CounterReadingT1"),
            "CounterReadingT2": obj.get("CounterReadingT2"),
            "CounterReadingT3": obj.get("CounterReadingT3"),
            "CounterReadingT4": obj.get("CounterReadingT4"),
            "CounterReadingUnit": obj.get("CounterReadingUnit"),
            "Date": obj.get("Date"),
            "Id": obj.get("Id"),
            "Serial": obj.get("Serial")
        })
        return _obj



swagger: "2.0"
schemes:
  - https
host: www.versioneye.com
basePath: /api/v2
info:
  description: VersionEye is a cross-platform search engine for free/libre/open source software libraries.
  title: Available API endpoints
  version: "2.0"
  x-apisguru-categories:
    - open_data
    - search
  x-logo:
    url: https://versioneye.files.wordpress.com/2015/05/versioneyetransparent.png
  x-origin:
    - format: openapi
      url: https://www.versioneye.com/api-docs/v1/swagger.yaml
      version: "3.0"
  x-providerName: versioneye.com
produces:
  - application/json
tags:
  - description: Operations about sessions
    name: sessions
  - description: Operations about services
    name: services
  - description: Operations about products
    name: products
  - description: Operations about projects
    name: projects
  - description: Operations about organisations
    name: organisations
  - description: Operations about mes
    name: me
  - description: Operations about users
    name: users
  - description: Operations about githubs
    name: github
  - description: Operations about securities
    name: security
paths:
  /github:
    get:
      description: |-
        
        This endpoint shows all imported repositories from your Github account.

        This enpoint expects that you have a GitHub account connected and the token
        is still valid. If that is not the case please visit **https://www.versioneye.com/settings/connect**.
        to update your GitHub credentials.

        If it shows no or old data, then you can use the `github/sync` endpoint
        to update your account with the current meta data from GitHub.
      operationId: getGithub
      parameters:
        - description: Filter by language
          in: query
          name: lang
          required: false
          type: string
        - description: Filter by visibility
          in: query
          name: private
          required: false
          type: boolean
        - description: Filter by name of organization
          in: query
          name: org_name
          required: false
          type: string
        - description: Filter by type of organization
          in: query
          name: org_type
          required: false
          type: string
        - default: "1"
          description: Number of page
          in: query
          name: page
          required: false
          type: string
        - description: Show only imported repositories
          in: query
          name: only_imported
          required: false
          type: boolean
      responses:
        "200":
          description: lists your's github repos
      summary: lists your's github repos
      tags:
        - github
  "/github/hook/{project_id}":
    post:
      consumes:
        - application/json
      description: "This endpoint is registered as service hook on GitHub. It triggers a project re-parse on each git push. "
      operationId: postGithubHookProjectId
      parameters:
        - description: Project ID
          in: path
          name: project_id
          required: true
          type: string
      responses:
        "201":
          description: github service hook
      summary: github service hook
      tags:
        - github
  /github/sync:
    get:
      description: |-
        
        Reimports ALL GitHub Repositories. This Endpoint fetches meta information to all
        repositories in your GitHub account. Meta information such as repo name, branches and
        supported project files.

        This endpoint works asynchronously and returns a status code. The status code is either
        **running** or **done**.
      operationId: getGithubSync
      responses:
        "200":
          description: re-load github data
      summary: re-load github data
      tags:
        - github
  "/github/{repo_key}":
    delete:
      description: |-
        
        This Endpoint deletes a project on VersionEye!

        Due the limits of our current API framework, the repo key has to be
        encoded as url-safe string. That means all '/' has to be replaced with
        colons ':' and '.' has to be replaced with '~'.

        For example,  repository with fullname `versioneye/veye` has to transformed
        to `versioneye:veye`.
      operationId: deleteGithubRepoKey
      parameters:
        - description: encoded repo-key
          in: path
          name: repo_key
          required: true
          type: string
        - default: master
          description: the name of the branch
          in: query
          name: branch
          required: false
          type: string
      responses:
        "204":
          description: remove imported project
      summary: remove imported project
      tags:
        - github
    get:
      description: |-
        
        This Endpoint returns detailed information about a GitHub repository.

        Due the limits of our current API framework, the repo key has to be
        encoded as url-safe string. That means all '/' has to be replaced with
        colons ':' and '.' has to be replaced with '~'.

        For example,  repository with fullname `versioneye/veye` has to transformed
        to `versioneye:veye`.
      operationId: getGithubRepoKey
      parameters:
        - description: encoded repo name with optional branch info.
          in: path
          name: repo_key
          required: true
          type: string
      responses:
        "200":
          description: shows the detailed information for the repository
      summary: shows the detailed information for the repository
      tags:
        - github
    post:
      consumes:
        - application/json
      description: |-
        
        Use this Endpoint to import a project file from GitHub. This will create a new project on VersionEye.

        Due the limits of our current API framework, the repo key has to be
        encoded as url-safe string. That means all '/' has to be replaced with
        colons ':' and '.' has to be replaced with '~'.

        For example,  repository with fullname `versioneye/veye` has to transformed
        to `versioneye:veye`.
      operationId: postGithubRepoKey
      parameters:
        - description: encoded repo name
          in: path
          name: repo_key
          required: true
          type: string
        - default: master
          description: the name of the branch
          in: formData
          name: branch
          required: false
          type: string
        - default: Gemfile
          description: the project file (default is Gemfile)
          in: formData
          name: file
          required: false
          type: string
      responses:
        "201":
          description: imports project file from github
      summary: imports project file from github
      tags:
        - github
  /me:
    get:
      description: On Swagger, you can create session by adding additional parameter :api_key.
      operationId: getMe
      responses:
        "200":
          description: shows profile of authorized user
      summary: shows profile of authorized user
      tags:
        - me
  /me/comments:
    get:
      description: shows comments of authorized user
      operationId: getMeComments
      parameters:
        - description: page number for pagination
          format: int32
          in: query
          name: page
          required: false
          type: integer
      responses:
        "200":
          description: shows comments of authorized user
      summary: shows comments of authorized user
      tags:
        - me
  /me/favorites:
    get:
      description: shows the packages you are following
      operationId: getMeFavorites
      parameters:
        - description: page number for pagination
          format: int32
          in: query
          name: page
          required: false
          type: integer
      responses:
        "200":
          description: shows the packages you are following
      summary: shows the packages you are following
      tags:
        - me
  /me/notifications:
    get:
      description: |-
        
        This Endpoint returns the 30 latest notifications.

        If there are new versions out there for software packages you follow directly on VersionEye, then
        each new version is a new **notification** for your account.
      operationId: getMeNotifications
      parameters:
        - description: Specify page for paging
          format: int32
          in: query
          name: page
          required: false
          type: integer
      responses:
        "200":
          description: shows unread notifications of authorized user
      summary: shows unread notifications of authorized user
      tags:
        - me
  /organisations:
    get:
      description: |-
        
        This endpoint requires the API key from a user. The result is a set of organisations and their API keys.
      operationId: getOrganisations
      responses:
        "200":
          description: Returns the list of organisations you have access to
      summary: Returns the list of organisations you have access to
      tags:
        - organisations
  "/organisations/{orga_name}/inventory":
    get:
      description: |-
        
        Find a detailed description here: https://github.com/versioneye/versioneye-api/blob/master/docs/api/v2/organisation.md
      operationId: getOrganisationsOrgaNameInventory
      parameters:
        - description: Filter by team name
          in: query
          name: team_name
          required: false
          type: string
        - description: Filter by programming language
          in: query
          name: language
          required: false
          type: string
        - description: Filter down by project version
          in: query
          name: project_version
          required: false
          type: string
        - description: Post processing filter. Possible values are 'ALL', 'duplicates_only', 'show_duplicates'
          in: query
          name: post_filter
          required: false
          type: string
        - format: int32
          in: path
          name: orga_name
          required: true
          type: integer
      responses:
        "200":
          description: Returns the inventory list of the organisation
      summary: Returns the inventory list of the organisation
      tags:
        - organisations
  "/organisations/{orga_name}/inventory_diff":
    get:
      operationId: getOrganisationsOrgaNameInventoryDiff
      parameters:
        - description: ID of the inventory diff object
          in: query
          name: inventory_diff_id
          required: false
          type: string
        - format: int32
          in: path
          name: orga_name
          required: true
          type: integer
      responses:
        "200":
          description: Returns the inventory diff object
      summary: Returns the inventory diff object
      tags:
        - organisations
    post:
      consumes:
        - application/json
      description: |-
        
        This Endpoint takes 2 inventory filters and calculates the difference between them.
        The diff object contains wich items have been removed and/or added compared to the inventory1 filter.
        The response of this Endpoint is the ID of the diff object, which is calculated async in the background.
      operationId: postOrganisationsOrgaNameInventoryDiff
      parameters:
        - description: Inventory1, filter by team name
          in: formData
          name: f1_team_name
          required: false
          type: string
        - description: Inventory1, filter by programming language
          in: formData
          name: f1_language
          required: false
          type: string
        - description: Inventory1, filter down by project version
          in: formData
          name: f1_project_version
          required: false
          type: string
        - description: Inventory1, post processing filter. Possible values are 'ALL', 'duplicates_only', 'show_duplicates'
          in: formData
          name: f1_post_filter
          required: false
          type: string
        - description: Inventory2, filter by team name
          in: formData
          name: f2_team_name
          required: false
          type: string
        - description: Inventory2, filter by programming language
          in: formData
          name: f2_language
          required: false
          type: string
        - description: Inventory2, filter down by project version
          in: formData
          name: f2_project_version
          required: false
          type: string
        - description: Inventory2, post processing filter. Possible values are 'ALL', 'duplicates_only', 'show_duplicates'
          in: formData
          name: f2_post_filter
          required: false
          type: string
        - format: int32
          in: path
          name: orga_name
          required: true
          type: integer
      responses:
        "201":
          description: Creates an inventory diff object
      summary: Creates an inventory diff object
      tags:
        - organisations
  "/organisations/{orga_name}/projects":
    get:
      description: Returns the list of projects
      operationId: getOrganisationsOrgaNameProjects
      parameters:
        - format: int32
          in: path
          name: orga_name
          required: true
          type: integer
      responses:
        "200":
          description: Returns the list of projects
      summary: Returns the list of projects
      tags:
        - organisations
  "/organisations/{orga_name}/teams":
    get:
      description: Returns the list of teams
      operationId: getOrganisationsOrgaNameTeams
      parameters:
        - format: int32
          in: path
          name: orga_name
          required: true
          type: integer
      responses:
        "200":
          description: Returns the list of teams
      summary: Returns the list of teams
      tags:
        - organisations
  "/products/search/{q}":
    get:
      description: |-
        
        This resource returns same results as our web application. But you get it as JSON objects -
        the result is an JSON array of product objects.

        When there's no match for the query, the result array will be empty.
      operationId: getProductsSearchQ
      parameters:
        - description: Query string. At least 2 characters.
          in: path
          name: q
          required: true
          type: string
        - description: |-
            Filter results by programming languages;
                                              For filtering multiple languages submit a comma separated list of language strings.
          in: query
          name: lang
          required: false
          type: string
        - description: Filter by GroupID. This is Java/Maven specific
          in: query
          name: g
          required: false
          type: string
        - description: Specify page for paging
          format: int32
          in: query
          name: page
          required: false
          type: integer
      responses:
        "200":
          description: search packages
      summary: search packages
      tags:
        - products
  "/products/sha/{sha}":
    get:
      description: |-
        
        This Endpoint expects a SHA value and returns the corresponding product to it, if available.
      operationId: getProductsShaSha
      parameters:
        - format: int32
          in: path
          name: sha
          required: true
          type: integer
      responses:
        "200":
          description: search by SHA value
      summary: search by SHA value
      tags:
        - products
  "/products/{lang}/{prod_key}":
    get:
      description: |-
        
        Please replace all slashes `/` through colons `:` and all dots `.` through `~`!

        Example: The clojure package `yummy.json/json` has to be transformed to  `yummy~json:json`.

        #### Notes about status codes

          * API returns 404, when the product with given product key doesnt exists.

          * Response 302 means that you didnt encode prod_key correctly.* (Replace all dots & slashes ) *
      operationId: getProductsLangProdKey
      parameters:
        - description: '"Name of programming language"'
          in: path
          name: lang
          required: true
          type: string
        - description: '"Encoded product key, replace all `/` and `.`'
          in: path
          name: prod_key
          required: true
          type: string
        - description: '"Version string"'
          in: query
          name: prod_version
          required: false
          type: string
      responses:
        "200":
          description: detailed information for specific package
      summary: detailed information for specific package
      tags:
        - products
  "/products/{lang}/{prod_key}/follow":
    delete:
      description: |-
        
        Please replace all slashes `/` through colons `:` and all dots `.` through `~`!

        Example: The clojure package `yummy.json/json` has to be transformed to  `yummy~json:json`.

        #### Response codes

          * 400 - bad request; you used wrong product key;
          * 401 - unauthorized - please append api_key
          * 403 - forbidden; you are not authorized; or just missed api_key;
      operationId: deleteProductsLangProdKeyFollow
      parameters:
        - description: Programming language
          in: path
          name: lang
          required: true
          type: string
        - description: Package specifier
          in: path
          name: prod_key
          required: true
          type: string
      responses:
        "204":
          description: unfollow given software package
      summary: unfollow given software package
      tags:
        - products
    get:
      description: |-
        
        Please replace all slashes `/` through colons `:` and all dots `.` through `~`!

        Example: The clojure package `yummy.json/json` has to be transformed to  `yummy~json:json`.

        #### Notes about status codes

        This resource will returns the status code 404 if there is no product
        for the given prod_key.
      operationId: getProductsLangProdKeyFollow
      parameters:
        - description: '"Name of programming language"'
          in: path
          name: lang
          required: true
          type: string
        - description: Package specifier
          in: path
          name: prod_key
          required: true
          type: string
      responses:
        "200":
          description: check your following status
      summary: check your following status
      tags:
        - products
    post:
      consumes:
        - application/json
      description: |-
        
        Please replace all slashes `/` through colons `:` and all dots `.` through `~`!

        Example: The clojure package `yummy.json/json` has to be transformed to  `yummy~json:json`.

        #### Notes about status codes

        It will respond 404, when you are using wrong product key or encode it uncorrectly.
      operationId: postProductsLangProdKeyFollow
      parameters:
        - description: Programming language
          in: path
          name: lang
          required: true
          type: string
        - description: " Package product key. "
          in: path
          name: prod_key
          required: true
          type: string
      responses:
        "201":
          description: follow your favorite software package
      summary: follow your favorite software package
      tags:
        - products
  "/products/{lang}/{prod_key}/references":
    get:
      description: |-
        
        It returns the references of a package.

        Please replace all slashes `/` through colons `:` and all dots `.` through `~`!

        Example: The clojure package `yummy.json/json` has to be transformed to  `yummy~json:json`.

        #### Notes about status codes

        This resource will return the status code 404 if there is no product for
        the given prod_key or the product has 0 references.
      operationId: getProductsLangProdKeyReferences
      parameters:
        - description: Language
          in: path
          name: lang
          required: true
          type: string
        - description: Product Key
          in: path
          name: prod_key
          required: true
          type: string
        - description: Page for paging
          format: int32
          in: query
          name: page
          required: false
          type: integer
      responses:
        "200":
          description: references
      summary: references
      tags:
        - products
  "/products/{lang}/{prod_key}/versions":
    get:
      description: |-
        
        Please replace all slashes `/` through colons `:` and all dots `.` through `~`!

        Example: The clojure package `yummy.json/json` has to be transformed to  `yummy~json:json`.

        #### Notes about status codes

          * API returns 404, when the product with given product key doesnt exists.

          * Response 302 means that you didnt encode prod_key correctly.* (Replace all dots & slashes ) *
      operationId: getProductsLangProdKeyVersions
      parameters:
        - description: '"Name of programming language"'
          in: path
          name: lang
          required: true
          type: string
        - description: '"Encoded product key, replace all `/` and `.`'
          in: path
          name: prod_key
          required: true
          type: string
      responses:
        "200":
          description: list versions of a package
      summary: list versions of a package
      tags:
        - products
  "/products/{lang}/{prod_key}/{prod_version}/license":
    post:
      consumes:
        - application/json
      description: With this endpoint users can suggest a license for an artifact.
      operationId: postProductsLangProdKeyProdVersionLicense
      parameters:
        - description: " programming language "
          in: path
          name: lang
          required: true
          type: string
        - description: " product key "
          in: path
          name: prod_key
          required: true
          type: string
        - description: " product version "
          in: path
          name: prod_version
          required: true
          type: string
        - description: " name of the license "
          in: formData
          name: license_name
          required: true
          type: string
        - description: " source of the license. Where did you find it? "
          in: formData
          name: license_source
          required: true
          type: string
        - description: " you wanna say anyting important to this license? "
          in: formData
          name: comments
          required: false
          type: string
      responses:
        "201":
          description: suggest a license for an artifact
      summary: suggest a license for an artifact
      tags:
        - products
  "/products/{lang}/{prod_key}/{prod_version}/scm_changes":
    post:
      consumes:
        - application/json
      description: |-
        
        This resource can parse a changelog.xml from the maven-changelog-plugin, assign
        it to a specific artifact and display the changelog infos on the product page.

        Please replace all slashes `/` through colons `:` and all dots `.` through `~`!

        Example: The clojure package `yummy.json/json` has to be transformed to  `yummy~json:json`.

        #### Notes about status codes

        It will respond 404, when you are using wrong product key or encode it uncorrectly.
      operationId: postProductsLangProdKeyProdVersionScmChanges
      parameters:
        - description: " programming language "
          in: path
          name: lang
          required: true
          type: string
        - description: " product key "
          in: path
          name: prod_key
          required: true
          type: string
        - description: " product version "
          in: path
          name: prod_version
          required: true
          type: string
      responses:
        "201":
          description: upload scm changelogs to an artifact
      summary: upload scm changelogs to an artifact
      tags:
        - products
  /projects:
    get:
      description: |-
        
        To use this resource you need either an active session or you have to append
        your API Key to the URL as parameter. For example: "?api_key=666_your_api_key_666"
      operationId: getProjects
      parameters:
        - description: The name of the organisation the project is assigned to.
          in: query
          name: orga_name
          required: false
          type: string
        - description: The name of the team in the organisation this project is assigned to.
          in: query
          name: team_name
          required: false
          type: string
      responses:
        "200":
          description: list of projects
      summary: list of projects
      tags:
        - projects
    post:
      consumes:
        - application/json
      description: |-
        
        To use this resource you need either an active session or you have to append
        your API Key to the URL as parameter. For example: "?api_key=666_your_api_key_666"
      operationId: postProjects
      parameters:
        - description: Project file - [maven.pom, Gemfile ...]
          in: formData
          name: upload
          required: true
          type: file
        - description: By default 'public'. If 'public' everybody can see the project.
          in: formData
          name: visibility
          required: false
          type: string
        - description: The name of the VersionEye project. By default it is the filename.
          in: formData
          name: name
          required: false
          type: string
        - description: The name of the organisation this project should be assigned to.
          in: formData
          name: orga_name
          required: false
          type: string
        - description: The name of the team in the organisation this project should be assigned to.
          in: formData
          name: team_name
          required: false
          type: string
        - description: If 'true' this project will not show up in the UI and gets removed later.
          in: formData
          name: temp
          required: false
          type: string
      responses:
        "201":
          description: upload project file and create a new project
      summary: upload project file and create a new project
      tags:
        - projects
  "/projects/{group_id}/{artifact_id}/merge_ga/{child_id}":
    get:
      description: |-
        
        This endpoint merges a project (child_id) into another project (group_id/artifact_id).
        This endpoint is specially for Maven based projects!
        To use this resource you need either an active session or you have to append
        your API Key to the URL as parameter. For example: "?api_key=666_your_api_key_666"
      operationId: getProjectsGroupIdArtifactIdMergeGaChildId
      parameters:
        - description: GroupId of the parent project
          in: path
          name: group_id
          required: true
          type: string
        - description: ArtifactId of the parent project
          in: path
          name: artifact_id
          required: true
          type: string
        - description: Project ID of the child
          in: path
          name: child_id
          required: true
          type: string
      responses:
        "200":
          description: merge a project into another one
      summary: merge a project into another one
      tags:
        - projects
  "/projects/{parent_id}/merge/{child_id}":
    get:
      description: |-
        
        This endpoint merges a project (child_id) into another project (parent_id).
        To use this resource you need either an active session or you have to append
        your API Key to the URL as parameter. For example: "?api_key=666_your_api_key_666"
      operationId: getProjectsParentIdMergeChildId
      parameters:
        - description: Project ID of the parent
          in: path
          name: parent_id
          required: true
          type: string
        - description: Project ID of the child
          in: path
          name: child_id
          required: true
          type: string
      responses:
        "200":
          description: merge a project into another one
      summary: merge a project into another one
      tags:
        - projects
  "/projects/{parent_id}/unmerge/{child_id}":
    get:
      description: |-
        
        This endpoint unmerges a project (child_id) from another project (parent_id). It makes the
        chilld again a separate project!
        To use this resource you need either an active session or you have to append
        your API Key to the URL as parameter. For example: "?api_key=666_your_api_key_666"
      operationId: getProjectsParentIdUnmergeChildId
      parameters:
        - description: Project ID of the parent
          in: path
          name: parent_id
          required: true
          type: string
        - description: Project ID of the child
          in: path
          name: child_id
          required: true
          type: string
      responses:
        "200":
          description: unmerge a project
      summary: unmerge a project
      tags:
        - projects
  "/projects/{project_key}":
    delete:
      description: |-
        
        To use this resource you need either an active session or you have to append
        your API Key to the URL as parameter. For example: "?api_key=666_your_api_key_666"
      operationId: deleteProjectsProjectKey
      parameters:
        - description: Delete project with given project ID.
          in: path
          name: project_key
          required: true
          type: string
      responses:
        "204":
          description: delete given project
      summary: delete given project
      tags:
        - projects
    get:
      description: " It shows detailed info of your project. "
      operationId: getProjectsProjectKey
      parameters:
        - description: Project ID
          in: path
          name: project_key
          required: true
          type: string
      responses:
        "200":
          description: shows the project's information
      summary: shows the project's information
      tags:
        - projects
    post:
      consumes:
        - application/json
      description: |-
        
        To use this resource you need either an active session or you have to append
        your API Key to the URL as parameter. For example: "?api_key=666_your_api_key_666"
      operationId: postProjectsProjectKey
      parameters:
        - description: Project ID
          in: path
          name: project_key
          required: true
          type: string
        - description: Project file - [maven.pom, Gemfile ...]
          in: formData
          name: project_file
          required: true
          type: file
      responses:
        "201":
          description: update project with new file
      summary: update project with new file
      tags:
        - projects
    put:
      consumes:
        - application/json
      description: |-
        
        To use this resource you need either an active session or you have to append
        your API Key to the URL as parameter. For example: "?api_key=666_your_api_key_666"

        With this Endpoint an existing project can be updated. This are the fields which 
        can be updated: 

        ```
        {
          public: false,
          name: "toto",
          description: "beschreibung",
          license: "Lizenz",
          version: "Versionio"
        }
        ```
      operationId: putProjectsProjectKey
      parameters:
        - description: Project ID
          in: path
          name: project_key
          required: true
          type: string
      responses:
        "200":
          description: update project properites
      summary: update project properites
      tags:
        - projects
  "/projects/{project_key}/dependencies":
    get:
      description: |-
        
        This Endpoint returns a list of ALL dependencies of the project. This list includes
        dependencies of child projects as well.

        To use this resource you need either an active session or you have to append
        your API Key to the URL as parameter. For example: "?api_key=666_your_api_key_666"
      operationId: getProjectsProjectKeyDependencies
      parameters:
        - description: Project ID or project_key
          in: path
          name: project_key
          required: true
          type: string
      responses:
        "200":
          description: get a list of ALL dependencies
      summary: get a list of ALL dependencies
      tags:
        - projects
  "/projects/{project_key}/licenses":
    get:
      description: |-
        
        To use this resource you need either an active session or you have to append
        your API Key to the URL as parameter. For example: "?api_key=666_your_api_key_666"
      operationId: getProjectsProjectKeyLicenses
      parameters:
        - description: Project ID or project_key
          in: path
          name: project_key
          required: true
          type: string
      responses:
        "200":
          description: get grouped view of licences for dependencies
      summary: get grouped view of licences for dependencies
      tags:
        - projects
  /security:
    get:
      description: Security Vulnerabilities
      operationId: getSecurity
      parameters:
        - description: Filter by programming languages
          in: query
          name: language
          required: true
          type: string
        - description: prod_key of the package
          in: query
          name: prod_key
          required: false
          type: string
        - description: Specify page for paging
          format: int32
          in: query
          name: page
          required: false
          type: integer
        - description: Asc sort by value
          in: query
          name: asc_sort
          required: false
          type: string
        - description: Desc sort by value
          in: query
          name: desc_sort
          required: false
          type: string
      responses:
        "200":
          description: Security Vulnerabilities
      summary: Security Vulnerabilities
      tags:
        - security
  /services/ping:
    get:
      description: check is the service up and running
      operationId: getServicesPing
      responses:
        "200":
          description: Answers to request with basic pong.
      summary: Answers to request with basic pong.
      tags:
        - services
  /sessions:
    delete:
      description: Close current session. It's very handy method when you re-generated your current API-key.
      operationId: deleteSessions
      responses:
        "204":
          description: delete current session aka log out.
      summary: delete current session aka log out.
      tags:
        - sessions
    get:
      description: |-
        
        If current user has active session, then this
        method will return 200 with short user profile.
        For othercase, it will return error message with status code 401.
      operationId: getSessions
      responses:
        "200":
          description: returns session info for authorized users
      summary: returns session info for authorized users
      tags:
        - sessions
    post:
      consumes:
        - application/json
      description: " You need to append your api_key to request. "
      operationId: postSessions
      parameters:
        - description: your personal token for API.
          in: formData
          name: api_key
          required: true
          type: string
      responses:
        "201":
          description: creates new sessions
      summary: creates new sessions
      tags:
        - sessions
  /sessions/login:
    post:
      consumes:
        - application/json
      description: " You need to append your api_key to request. "
      operationId: postSessionsLogin
      parameters:
        - description: email or username
          in: formData
          name: username
          required: true
          type: string
        - description: password
          in: formData
          name: password
          required: true
          type: string
      responses:
        "201":
          description: creates new sessions
      summary: creates new sessions
      tags:
        - sessions
  "/users/{username}":
    get:
      description: shows profile of given user_id
      operationId: getUsersUsername
      parameters:
        - description: username
          in: path
          name: username
          required: true
          type: string
      responses:
        "200":
          description: shows profile of given user_id
      summary: shows profile of given user_id
      tags:
        - users
  "/users/{username}/comments":
    get:
      description: shows user's comments
      operationId: getUsersUsernameComments
      parameters:
        - description: VersionEye users' nickname
          in: path
          name: username
          required: true
          type: string
        - description: pagination number
          format: int32
          in: query
          name: page
          required: false
          type: integer
      responses:
        "200":
          description: shows user's comments
      summary: shows user's comments
      tags:
        - users
  "/users/{username}/favorites":
    get:
      description: shows user's favorite packages
      operationId: getUsersUsernameFavorites
      parameters:
        - description: username
          in: path
          name: username
          required: true
          type: string
        - description: Pagination number
          format: int32
          in: query
          name: page
          required: false
          type: integer
      responses:
        "200":
          description: shows user's favorite packages
      summary: shows user's favorite packages
      tags:
        - users

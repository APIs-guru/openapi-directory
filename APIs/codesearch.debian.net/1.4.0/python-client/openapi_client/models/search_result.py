# coding: utf-8

"""
    Debian Code Search

    OpenAPI for https://codesearch.debian.net/

    The version of the OpenAPI document: 1.4.0
    Contact: stapelberg@debian.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SearchResult(BaseModel):
    """
    A search result matching the specified query. You can use sources.debian.org to view the file contents. See https://github.com/Debian/dcs/blob/master/cmd/dcs-web/show/show.go for how to construct a sources.debian.org URL from a search result.
    """ # noqa: E501
    context: StrictStr = Field(description="The full line containing the search result.")
    context_after: Optional[List[StrictStr]] = Field(default=None, description="Up to 2 full lines after the search result (see `context`).")
    context_before: Optional[List[StrictStr]] = Field(default=None, description="Up to 2 full lines before the search result (see `context`).")
    line: StrictInt = Field(description="Line number containing the search result.")
    package: StrictStr = Field(description="The Debian source package containing this search result, including the full Debian version number.")
    path: StrictStr = Field(description="Path to the file containing the this search result, starting with `package`.")
    __properties: ClassVar[List[str]] = ["context", "context_after", "context_before", "line", "package", "path"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "context": obj.get("context"),
            "context_after": obj.get("context_after"),
            "context_before": obj.get("context_before"),
            "line": obj.get("line"),
            "package": obj.get("package"),
            "path": obj.get("path")
        })
        return _obj



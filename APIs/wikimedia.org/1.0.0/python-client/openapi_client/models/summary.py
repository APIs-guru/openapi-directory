# coding: utf-8

"""
    Wikimedia

    This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats. ### Global Rules - Limit your clients to no more than 200 requests/s to this API.   Each API endpoint's documentation may detail more specific usage limits. - Set a unique `User-Agent` or `Api-User-Agent` header that   allows us to contact you quickly. Email addresses or URLs   of contact pages work well.  By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details. ### Endpoint documentation Please consult each endpoint's documentation for details on: - Licensing information for the specific type of content   and data served via the endpoint. - Stability markers to inform you about development status and   change policy, according to   [our API version policy](https://www.mediawiki.org/wiki/API_versioning). - Endpoint specific usage limits. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.originalimage import Originalimage
from openapi_client.models.summary_coordinates import SummaryCoordinates
from openapi_client.models.thumbnail import Thumbnail
from typing import Optional, Set
from typing_extensions import Self

class Summary(BaseModel):
    """
    Summary
    """ # noqa: E501
    coordinates: Optional[SummaryCoordinates] = None
    description: Optional[StrictStr] = Field(default=None, description="Wikidata description for the page")
    dir: StrictStr = Field(description="The page language direction code")
    displaytitle: Optional[StrictStr] = Field(default=None, description="The page title how it should be shown to the user")
    extract: StrictStr = Field(description="First several sentences of an article in plain text")
    extract_html: Optional[StrictStr] = Field(default=None, description="First several sentences of an article in simple HTML format")
    lang: StrictStr = Field(description="The page language code")
    originalimage: Optional[Originalimage] = None
    pageid: Optional[StrictInt] = Field(default=None, description="The page ID")
    thumbnail: Optional[Thumbnail] = None
    timestamp: Optional[StrictStr] = Field(default=None, description="The time when the page was last editted in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format")
    title: StrictStr = Field(description="The page title")
    __properties: ClassVar[List[str]] = ["coordinates", "description", "dir", "displaytitle", "extract", "extract_html", "lang", "originalimage", "pageid", "thumbnail", "timestamp", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Summary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of coordinates
        if self.coordinates:
            _dict['coordinates'] = self.coordinates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of originalimage
        if self.originalimage:
            _dict['originalimage'] = self.originalimage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of thumbnail
        if self.thumbnail:
            _dict['thumbnail'] = self.thumbnail.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Summary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "coordinates": SummaryCoordinates.from_dict(obj["coordinates"]) if obj.get("coordinates") is not None else None,
            "description": obj.get("description"),
            "dir": obj.get("dir"),
            "displaytitle": obj.get("displaytitle"),
            "extract": obj.get("extract"),
            "extract_html": obj.get("extract_html"),
            "lang": obj.get("lang"),
            "originalimage": Originalimage.from_dict(obj["originalimage"]) if obj.get("originalimage") is not None else None,
            "pageid": obj.get("pageid"),
            "thumbnail": Thumbnail.from_dict(obj["thumbnail"]) if obj.get("thumbnail") is not None else None,
            "timestamp": obj.get("timestamp"),
            "title": obj.get("title")
        })
        return _obj



# coding: utf-8

"""
    Ntropy Transaction API v1

    Ntropy Transaction API for transaction classification & management  Contact Support:  Name: API Support  Email: api@ntropy.network

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_a_batch_of_consumer_transaction_classification_results200_response_results_inner_contact import GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInnerContact
from openapi_client.models.get_a_batch_of_consumer_transaction_classification_results200_response_results_inner_location import GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInnerLocation
from openapi_client.models.get_a_batch_of_consumer_transaction_classification_results200_response_results_inner_rating import GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInnerRating
from typing import Optional, Set
from typing_extensions import Self

class GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner(BaseModel):
    """
    GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner
    """ # noqa: E501
    contact: Optional[GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInnerContact] = None
    labels: Optional[List[StrictStr]] = None
    location: Optional[GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInnerLocation] = None
    logo: Optional[StrictStr] = None
    merchant: Optional[StrictStr] = None
    person: Optional[StrictStr] = None
    rating: Optional[GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInnerRating] = None
    transaction_id: Optional[StrictStr] = None
    website: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["contact", "labels", "location", "logo", "merchant", "person", "rating", "transaction_id", "website"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of contact
        if self.contact:
            _dict['contact'] = self.contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rating
        if self.rating:
            _dict['rating'] = self.rating.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contact": GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInnerContact.from_dict(obj["contact"]) if obj.get("contact") is not None else None,
            "labels": obj.get("labels"),
            "location": GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInnerLocation.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "logo": obj.get("logo"),
            "merchant": obj.get("merchant"),
            "person": obj.get("person"),
            "rating": GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInnerRating.from_dict(obj["rating"]) if obj.get("rating") is not None else None,
            "transaction_id": obj.get("transaction_id"),
            "website": obj.get("website")
        })
        return _obj



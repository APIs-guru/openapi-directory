# coding: utf-8

"""
    Ntropy Transaction API v1

    Ntropy Transaction API for transaction classification & management  Contact Support:  Name: API Support  Email: api@ntropy.network

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.get_a_batch_of_consumer_transaction_classification_results200_response import GetABatchOfConsumerTransactionClassificationResults200Response

class TestGetABatchOfConsumerTransactionClassificationResults200Response(unittest.TestCase):
    """GetABatchOfConsumerTransactionClassificationResults200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetABatchOfConsumerTransactionClassificationResults200Response:
        """Test GetABatchOfConsumerTransactionClassificationResults200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetABatchOfConsumerTransactionClassificationResults200Response`
        """
        model = GetABatchOfConsumerTransactionClassificationResults200Response()
        if include_optional:
            return GetABatchOfConsumerTransactionClassificationResults200Response(
                id = '5d13df6c-6a20-59b6-9259-fb4f0ad90411',
                progress = -62518197,
                results = [{"contact":{"email":"hUkvsYKUamGpI@rWdfbzlEMyCxWD.ep","phone":"exercitation esse sed nisi"},"labels":["eu quis pr","eu"],"location":{"address":"pariatur esse officia cupidatat","city":"fugiat tempor reprehenderit","country":"ad ea ut id","lat":-6.816440035857312E7,"lon":8.511897913578662E7,"postal_code":"minim est"},"logo":"laborum fugiat","merchant":"do enim ullamco irure","person":"non","rating":{"reviews":49181631,"value":-1.8636660679956168E7},"transaction_id":"proident occaecat","website":""},{"contact":{"email":"B2b9F6BqZI@dnlLjJGCVnHqEgVFyDwSWrcCVtCuR.wsx","phone":"incididunt reprehenderit do cupidatat"},"labels":["non cupidatat et esse","nisi reprehenderit est conse"],"location":{"address":"irure magna","city":"deserunt ut in","country":"dolore Excepteur aliqua do","lat":-5.3232704415080525E7,"lon":2.4234387569050018E7,"postal_code":"officia dolore dolor"},"logo":"est","merchant":"laboris culpa Excepteur consequat consectetur","person":"fugiat","rating":{"reviews":97241118,"value":-5.1476788074969985E7},"transaction_id":"labore Ut","website":"cillum laborum c"}],
                status = 'error',
                updated_at = '2014-05-05T08:09:39.758Z'
            )
        else:
            return GetABatchOfConsumerTransactionClassificationResults200Response(
        )
        """

    def testGetABatchOfConsumerTransactionClassificationResults200Response(self):
        """Test GetABatchOfConsumerTransactionClassificationResults200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    DFlight API

    [DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories: - Airspace - Weather - Temporary Flight Restrictions - Special Security Areas - Restricted Public Venues - Surface Obstacles - Aerodromes - UAS Operating Areas  You can define your geographic area of interest in one of three convenient ways: - Providing a latitude/longitude point and distance around that point - Providing a GeoJSON LineString defining your route - Providing an arbitrary GeoJSON Polygon defining your area of interest

    The version of the OpenAPI document: V 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.airspace_by_polygon import AirspaceByPolygon

class TestAirspaceByPolygon(unittest.TestCase):
    """AirspaceByPolygon unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AirspaceByPolygon:
        """Test AirspaceByPolygon
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AirspaceByPolygon`
        """
        model = AirspaceByPolygon()
        if include_optional:
            return AirspaceByPolygon(
                asptypes = [
                    ''
                    ],
                poly = openapi_client.models.poly.Poly()
            )
        else:
            return AirspaceByPolygon(
                asptypes = [
                    ''
                    ],
                poly = openapi_client.models.poly.Poly(),
        )
        """

    def testAirspaceByPolygon(self):
        """Test AirspaceByPolygon"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

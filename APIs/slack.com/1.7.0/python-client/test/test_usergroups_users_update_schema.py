# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.usergroups_users_update_schema import UsergroupsUsersUpdateSchema

class TestUsergroupsUsersUpdateSchema(unittest.TestCase):
    """UsergroupsUsersUpdateSchema unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UsergroupsUsersUpdateSchema:
        """Test UsergroupsUsersUpdateSchema
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UsergroupsUsersUpdateSchema`
        """
        model = UsergroupsUsersUpdateSchema()
        if include_optional:
            return UsergroupsUsersUpdateSchema(
                ok = True,
                usergroup = openapi_client.models.subteam/usergroup_object.Subteam/Usergroup Object(
                    auto_provision = True, 
                    auto_type = [
                        null
                        ], 
                    channel_count = 56, 
                    created_by = 'WQ6ZGCKEC0L3O4GI7XHK0JCY075UA034PGMUG8', 
                    date_create = 56, 
                    date_delete = 56, 
                    date_update = 56, 
                    deleted_by = [
                        null
                        ], 
                    description = '', 
                    enterprise_subteam_id = '', 
                    handle = '', 
                    id = 'S8Q6ZGCKEC0L3O4GI7XHK0JCY075UA034PGMUG8IQ37LLR1PLNJKT', 
                    is_external = True, 
                    is_subteam = True, 
                    is_usergroup = True, 
                    name = '', 
                    prefs = openapi_client.models.objs_subteam_prefs.objs_subteam_prefs(
                        channels = [
                            'CQ6ZGCKEC0L3O4GI7XHK0JCY075UA034PGMUG8'
                            ], 
                        groups = [
                            'GQ6ZGCKEC0L3O4GI7XHK0JCY075UA034PGMUG8IQ37LLR1PLNJKTGOS9HDVPWI4JDIXDXXML6JAJ4SWHSA0'
                            ], ), 
                    team_id = 'TQ6ZGCKEC0L3O4GI7XHK0JCY075UA034PGMUG8', 
                    updated_by = 'WQ6ZGCKEC0L3O4GI7XHK0JCY075UA034PGMUG8', 
                    user_count = 56, 
                    users = [
                        'WQ6ZGCKEC0L3O4GI7XHK0JCY075UA034PGMUG8'
                        ], )
            )
        else:
            return UsergroupsUsersUpdateSchema(
                ok = True,
                usergroup = openapi_client.models.subteam/usergroup_object.Subteam/Usergroup Object(
                    auto_provision = True, 
                    auto_type = [
                        null
                        ], 
                    channel_count = 56, 
                    created_by = 'WQ6ZGCKEC0L3O4GI7XHK0JCY075UA034PGMUG8', 
                    date_create = 56, 
                    date_delete = 56, 
                    date_update = 56, 
                    deleted_by = [
                        null
                        ], 
                    description = '', 
                    enterprise_subteam_id = '', 
                    handle = '', 
                    id = 'S8Q6ZGCKEC0L3O4GI7XHK0JCY075UA034PGMUG8IQ37LLR1PLNJKT', 
                    is_external = True, 
                    is_subteam = True, 
                    is_usergroup = True, 
                    name = '', 
                    prefs = openapi_client.models.objs_subteam_prefs.objs_subteam_prefs(
                        channels = [
                            'CQ6ZGCKEC0L3O4GI7XHK0JCY075UA034PGMUG8'
                            ], 
                        groups = [
                            'GQ6ZGCKEC0L3O4GI7XHK0JCY075UA034PGMUG8IQ37LLR1PLNJKTGOS9HDVPWI4JDIXDXXML6JAJ4SWHSA0'
                            ], ), 
                    team_id = 'TQ6ZGCKEC0L3O4GI7XHK0JCY075UA034PGMUG8', 
                    updated_by = 'WQ6ZGCKEC0L3O4GI7XHK0JCY075UA034PGMUG8', 
                    user_count = 56, 
                    users = [
                        'WQ6ZGCKEC0L3O4GI7XHK0JCY075UA034PGMUG8'
                        ], ),
        )
        """

    def testUsergroupsUsersUpdateSchema(self):
        """Test UsergroupsUsersUpdateSchema"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

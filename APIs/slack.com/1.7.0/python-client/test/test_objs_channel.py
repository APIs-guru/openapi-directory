# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.objs_channel import ObjsChannel

class TestObjsChannel(unittest.TestCase):
    """ObjsChannel unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ObjsChannel:
        """Test ObjsChannel
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ObjsChannel`
        """
        model = ObjsChannel()
        if include_optional:
            return ObjsChannel(
                accepted_user = 'WQ6ZGCKEC0L3O4GI7XHK0JCY075UA034PGMUG8',
                created = 56,
                creator = 'WQ6ZGCKEC0L3O4GI7XHK0JCY075UA034PGMUG8',
                id = 'CQ6ZGCKEC0L3O4GI7XHK0JCY075UA034PGMUG8',
                is_archived = True,
                is_channel = True,
                is_frozen = True,
                is_general = True,
                is_member = True,
                is_moved = 56,
                is_mpim = True,
                is_non_threadable = True,
                is_org_shared = True,
                is_pending_ext_shared = True,
                is_private = True,
                is_read_only = True,
                is_shared = True,
                is_thread_only = True,
                last_read = '0480728880.015280',
                latest = [
                    null
                    ],
                members = [
                    'WQ6ZGCKEC0L3O4GI7XHK0JCY075UA034PGMUG8'
                    ],
                name = '',
                name_normalized = '',
                num_members = 56,
                pending_shared = [
                    'TQ6ZGCKEC0L3O4GI7XHK0JCY075UA034PGMUG8'
                    ],
                previous_names = [
                    ''
                    ],
                priority = 1.337,
                purpose = openapi_client.models.objs_channel_purpose.objs_channel_purpose(
                    creator = '', 
                    last_set = 56, 
                    value = '', ),
                topic = openapi_client.models.objs_channel_purpose.objs_channel_purpose(
                    creator = '', 
                    last_set = 56, 
                    value = '', ),
                unlinked = 56,
                unread_count = 56,
                unread_count_display = 56
            )
        else:
            return ObjsChannel(
                created = 56,
                creator = 'WQ6ZGCKEC0L3O4GI7XHK0JCY075UA034PGMUG8',
                id = 'CQ6ZGCKEC0L3O4GI7XHK0JCY075UA034PGMUG8',
                is_channel = True,
                is_mpim = True,
                is_org_shared = True,
                is_private = True,
                is_shared = True,
                members = [
                    'WQ6ZGCKEC0L3O4GI7XHK0JCY075UA034PGMUG8'
                    ],
                name = '',
                name_normalized = '',
                purpose = openapi_client.models.objs_channel_purpose.objs_channel_purpose(
                    creator = '', 
                    last_set = 56, 
                    value = '', ),
                topic = openapi_client.models.objs_channel_purpose.objs_channel_purpose(
                    creator = '', 
                    last_set = 56, 
                    value = '', ),
        )
        """

    def testObjsChannel(self):
        """Test ObjsChannel"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

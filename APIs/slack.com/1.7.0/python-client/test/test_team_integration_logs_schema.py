# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.team_integration_logs_schema import TeamIntegrationLogsSchema

class TestTeamIntegrationLogsSchema(unittest.TestCase):
    """TeamIntegrationLogsSchema unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TeamIntegrationLogsSchema:
        """Test TeamIntegrationLogsSchema
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TeamIntegrationLogsSchema`
        """
        model = TeamIntegrationLogsSchema()
        if include_optional:
            return TeamIntegrationLogsSchema(
                logs = [
                    openapi_client.models.team_integration_logs_schema_logs_inner.team_integrationLogs_schema_logs_inner(
                        admin_app_id = 'A8', 
                        app_id = 'A8', 
                        app_type = '', 
                        change_type = '', 
                        channel = 'GQ6ZGCKEC0L3O4GI7XHK0JCY075UA034PGMUG8IQ37LLR1PLNJKTGOS9HDVPWI4JDIXDXXML6JAJ4SWHSA0', 
                        date = '', 
                        scope = '', 
                        service_id = '', 
                        service_type = '', 
                        user_id = 'WQ6ZGCKEC0L3O4GI7XHK0JCY075UA034PGMUG8', 
                        user_name = '', )
                    ],
                ok = True,
                paging = openapi_client.models.paging_object.paging object(
                    count = 56, 
                    page = 56, 
                    pages = 56, 
                    per_page = 56, 
                    spill = 56, 
                    total = 56, )
            )
        else:
            return TeamIntegrationLogsSchema(
                logs = [
                    openapi_client.models.team_integration_logs_schema_logs_inner.team_integrationLogs_schema_logs_inner(
                        admin_app_id = 'A8', 
                        app_id = 'A8', 
                        app_type = '', 
                        change_type = '', 
                        channel = 'GQ6ZGCKEC0L3O4GI7XHK0JCY075UA034PGMUG8IQ37LLR1PLNJKTGOS9HDVPWI4JDIXDXXML6JAJ4SWHSA0', 
                        date = '', 
                        scope = '', 
                        service_id = '', 
                        service_type = '', 
                        user_id = 'WQ6ZGCKEC0L3O4GI7XHK0JCY075UA034PGMUG8', 
                        user_name = '', )
                    ],
                ok = True,
                paging = openapi_client.models.paging_object.paging object(
                    count = 56, 
                    page = 56, 
                    pages = 56, 
                    per_page = 56, 
                    spill = 56, 
                    total = 56, ),
        )
        """

    def testTeamIntegrationLogsSchema(self):
        """Test TeamIntegrationLogsSchema"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

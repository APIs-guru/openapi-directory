# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.default_success_template import DefaultSuccessTemplate

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class WorkflowsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def workflows_step_completed(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `workflow.steps:execute`")],
        workflow_step_execute_id: Annotated[StrictStr, Field(description="Context identifier that maps to the correct workflow step execution.")],
        outputs: Annotated[Optional[StrictStr], Field(description="Key-value object of outputs from your step. Keys of this object reflect the configured `key` properties of your [`outputs`](/reference/workflows/workflow_step#output) array from your `workflow_step` object.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DefaultSuccessTemplate:
        """workflows_step_completed

        Indicate that an app's step in a workflow completed execution.

        :param token: Authentication token. Requires scope: `workflow.steps:execute` (required)
        :type token: str
        :param workflow_step_execute_id: Context identifier that maps to the correct workflow step execution. (required)
        :type workflow_step_execute_id: str
        :param outputs: Key-value object of outputs from your step. Keys of this object reflect the configured `key` properties of your [`outputs`](/reference/workflows/workflow_step#output) array from your `workflow_step` object.
        :type outputs: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workflows_step_completed_serialize(
            token=token,
            workflow_step_execute_id=workflow_step_execute_id,
            outputs=outputs,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def workflows_step_completed_with_http_info(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `workflow.steps:execute`")],
        workflow_step_execute_id: Annotated[StrictStr, Field(description="Context identifier that maps to the correct workflow step execution.")],
        outputs: Annotated[Optional[StrictStr], Field(description="Key-value object of outputs from your step. Keys of this object reflect the configured `key` properties of your [`outputs`](/reference/workflows/workflow_step#output) array from your `workflow_step` object.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DefaultSuccessTemplate]:
        """workflows_step_completed

        Indicate that an app's step in a workflow completed execution.

        :param token: Authentication token. Requires scope: `workflow.steps:execute` (required)
        :type token: str
        :param workflow_step_execute_id: Context identifier that maps to the correct workflow step execution. (required)
        :type workflow_step_execute_id: str
        :param outputs: Key-value object of outputs from your step. Keys of this object reflect the configured `key` properties of your [`outputs`](/reference/workflows/workflow_step#output) array from your `workflow_step` object.
        :type outputs: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workflows_step_completed_serialize(
            token=token,
            workflow_step_execute_id=workflow_step_execute_id,
            outputs=outputs,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def workflows_step_completed_without_preload_content(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `workflow.steps:execute`")],
        workflow_step_execute_id: Annotated[StrictStr, Field(description="Context identifier that maps to the correct workflow step execution.")],
        outputs: Annotated[Optional[StrictStr], Field(description="Key-value object of outputs from your step. Keys of this object reflect the configured `key` properties of your [`outputs`](/reference/workflows/workflow_step#output) array from your `workflow_step` object.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """workflows_step_completed

        Indicate that an app's step in a workflow completed execution.

        :param token: Authentication token. Requires scope: `workflow.steps:execute` (required)
        :type token: str
        :param workflow_step_execute_id: Context identifier that maps to the correct workflow step execution. (required)
        :type workflow_step_execute_id: str
        :param outputs: Key-value object of outputs from your step. Keys of this object reflect the configured `key` properties of your [`outputs`](/reference/workflows/workflow_step#output) array from your `workflow_step` object.
        :type outputs: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workflows_step_completed_serialize(
            token=token,
            workflow_step_execute_id=workflow_step_execute_id,
            outputs=outputs,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _workflows_step_completed_serialize(
        self,
        token,
        workflow_step_execute_id,
        outputs,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if workflow_step_execute_id is not None:
            
            _query_params.append(('workflow_step_execute_id', workflow_step_execute_id))
            
        if outputs is not None:
            
            _query_params.append(('outputs', outputs))
            
        # process the header parameters
        if token is not None:
            _header_params['token'] = token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'slackAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/workflows.stepCompleted',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def workflows_step_failed(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `workflow.steps:execute`")],
        workflow_step_execute_id: Annotated[StrictStr, Field(description="Context identifier that maps to the correct workflow step execution.")],
        error: Annotated[StrictStr, Field(description="A JSON-based object with a `message` property that should contain a human readable error message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DefaultSuccessTemplate:
        """workflows_step_failed

        Indicate that an app's step in a workflow failed to execute.

        :param token: Authentication token. Requires scope: `workflow.steps:execute` (required)
        :type token: str
        :param workflow_step_execute_id: Context identifier that maps to the correct workflow step execution. (required)
        :type workflow_step_execute_id: str
        :param error: A JSON-based object with a `message` property that should contain a human readable error message. (required)
        :type error: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workflows_step_failed_serialize(
            token=token,
            workflow_step_execute_id=workflow_step_execute_id,
            error=error,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def workflows_step_failed_with_http_info(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `workflow.steps:execute`")],
        workflow_step_execute_id: Annotated[StrictStr, Field(description="Context identifier that maps to the correct workflow step execution.")],
        error: Annotated[StrictStr, Field(description="A JSON-based object with a `message` property that should contain a human readable error message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DefaultSuccessTemplate]:
        """workflows_step_failed

        Indicate that an app's step in a workflow failed to execute.

        :param token: Authentication token. Requires scope: `workflow.steps:execute` (required)
        :type token: str
        :param workflow_step_execute_id: Context identifier that maps to the correct workflow step execution. (required)
        :type workflow_step_execute_id: str
        :param error: A JSON-based object with a `message` property that should contain a human readable error message. (required)
        :type error: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workflows_step_failed_serialize(
            token=token,
            workflow_step_execute_id=workflow_step_execute_id,
            error=error,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def workflows_step_failed_without_preload_content(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `workflow.steps:execute`")],
        workflow_step_execute_id: Annotated[StrictStr, Field(description="Context identifier that maps to the correct workflow step execution.")],
        error: Annotated[StrictStr, Field(description="A JSON-based object with a `message` property that should contain a human readable error message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """workflows_step_failed

        Indicate that an app's step in a workflow failed to execute.

        :param token: Authentication token. Requires scope: `workflow.steps:execute` (required)
        :type token: str
        :param workflow_step_execute_id: Context identifier that maps to the correct workflow step execution. (required)
        :type workflow_step_execute_id: str
        :param error: A JSON-based object with a `message` property that should contain a human readable error message. (required)
        :type error: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workflows_step_failed_serialize(
            token=token,
            workflow_step_execute_id=workflow_step_execute_id,
            error=error,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _workflows_step_failed_serialize(
        self,
        token,
        workflow_step_execute_id,
        error,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if workflow_step_execute_id is not None:
            
            _query_params.append(('workflow_step_execute_id', workflow_step_execute_id))
            
        if error is not None:
            
            _query_params.append(('error', error))
            
        # process the header parameters
        if token is not None:
            _header_params['token'] = token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'slackAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/workflows.stepFailed',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def workflows_update_step(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `workflow.steps:execute`")],
        workflow_step_edit_id: Annotated[StrictStr, Field(description="A context identifier provided with `view_submission` payloads used to call back to `workflows.updateStep`.")],
        inputs: Annotated[Optional[StrictStr], Field(description="A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](/workflows/steps#variables).")] = None,
        outputs: Annotated[Optional[StrictStr], Field(description="An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed.")] = None,
        step_name: Annotated[Optional[StrictStr], Field(description="An optional field that can be used to override the step name that is shown in the Workflow Builder.")] = None,
        step_image_url: Annotated[Optional[StrictStr], Field(description="An optional field that can be used to override app image that is shown in the Workflow Builder.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DefaultSuccessTemplate:
        """workflows_update_step

        Update the configuration for a workflow extension step.

        :param token: Authentication token. Requires scope: `workflow.steps:execute` (required)
        :type token: str
        :param workflow_step_edit_id: A context identifier provided with `view_submission` payloads used to call back to `workflows.updateStep`. (required)
        :type workflow_step_edit_id: str
        :param inputs: A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](/workflows/steps#variables).
        :type inputs: str
        :param outputs: An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed.
        :type outputs: str
        :param step_name: An optional field that can be used to override the step name that is shown in the Workflow Builder.
        :type step_name: str
        :param step_image_url: An optional field that can be used to override app image that is shown in the Workflow Builder.
        :type step_image_url: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workflows_update_step_serialize(
            token=token,
            workflow_step_edit_id=workflow_step_edit_id,
            inputs=inputs,
            outputs=outputs,
            step_name=step_name,
            step_image_url=step_image_url,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def workflows_update_step_with_http_info(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `workflow.steps:execute`")],
        workflow_step_edit_id: Annotated[StrictStr, Field(description="A context identifier provided with `view_submission` payloads used to call back to `workflows.updateStep`.")],
        inputs: Annotated[Optional[StrictStr], Field(description="A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](/workflows/steps#variables).")] = None,
        outputs: Annotated[Optional[StrictStr], Field(description="An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed.")] = None,
        step_name: Annotated[Optional[StrictStr], Field(description="An optional field that can be used to override the step name that is shown in the Workflow Builder.")] = None,
        step_image_url: Annotated[Optional[StrictStr], Field(description="An optional field that can be used to override app image that is shown in the Workflow Builder.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DefaultSuccessTemplate]:
        """workflows_update_step

        Update the configuration for a workflow extension step.

        :param token: Authentication token. Requires scope: `workflow.steps:execute` (required)
        :type token: str
        :param workflow_step_edit_id: A context identifier provided with `view_submission` payloads used to call back to `workflows.updateStep`. (required)
        :type workflow_step_edit_id: str
        :param inputs: A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](/workflows/steps#variables).
        :type inputs: str
        :param outputs: An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed.
        :type outputs: str
        :param step_name: An optional field that can be used to override the step name that is shown in the Workflow Builder.
        :type step_name: str
        :param step_image_url: An optional field that can be used to override app image that is shown in the Workflow Builder.
        :type step_image_url: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workflows_update_step_serialize(
            token=token,
            workflow_step_edit_id=workflow_step_edit_id,
            inputs=inputs,
            outputs=outputs,
            step_name=step_name,
            step_image_url=step_image_url,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def workflows_update_step_without_preload_content(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `workflow.steps:execute`")],
        workflow_step_edit_id: Annotated[StrictStr, Field(description="A context identifier provided with `view_submission` payloads used to call back to `workflows.updateStep`.")],
        inputs: Annotated[Optional[StrictStr], Field(description="A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](/workflows/steps#variables).")] = None,
        outputs: Annotated[Optional[StrictStr], Field(description="An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed.")] = None,
        step_name: Annotated[Optional[StrictStr], Field(description="An optional field that can be used to override the step name that is shown in the Workflow Builder.")] = None,
        step_image_url: Annotated[Optional[StrictStr], Field(description="An optional field that can be used to override app image that is shown in the Workflow Builder.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """workflows_update_step

        Update the configuration for a workflow extension step.

        :param token: Authentication token. Requires scope: `workflow.steps:execute` (required)
        :type token: str
        :param workflow_step_edit_id: A context identifier provided with `view_submission` payloads used to call back to `workflows.updateStep`. (required)
        :type workflow_step_edit_id: str
        :param inputs: A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](/workflows/steps#variables).
        :type inputs: str
        :param outputs: An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed.
        :type outputs: str
        :param step_name: An optional field that can be used to override the step name that is shown in the Workflow Builder.
        :type step_name: str
        :param step_image_url: An optional field that can be used to override app image that is shown in the Workflow Builder.
        :type step_image_url: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workflows_update_step_serialize(
            token=token,
            workflow_step_edit_id=workflow_step_edit_id,
            inputs=inputs,
            outputs=outputs,
            step_name=step_name,
            step_image_url=step_image_url,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _workflows_update_step_serialize(
        self,
        token,
        workflow_step_edit_id,
        inputs,
        outputs,
        step_name,
        step_image_url,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if workflow_step_edit_id is not None:
            
            _query_params.append(('workflow_step_edit_id', workflow_step_edit_id))
            
        if inputs is not None:
            
            _query_params.append(('inputs', inputs))
            
        if outputs is not None:
            
            _query_params.append(('outputs', outputs))
            
        if step_name is not None:
            
            _query_params.append(('step_name', step_name))
            
        if step_image_url is not None:
            
            _query_params.append(('step_image_url', step_image_url))
            
        # process the header parameters
        if token is not None:
            _header_params['token'] = token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'slackAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/workflows.updateStep',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.objs_team_profile_field_options_inner import ObjsTeamProfileFieldOptionsInner
from typing import Optional, Set
from typing_extensions import Self

class ObjsTeamProfileField(BaseModel):
    """
    ObjsTeamProfileField
    """ # noqa: E501
    field_name: Optional[StrictStr] = None
    hint: StrictStr
    id: Annotated[str, Field(strict=True)]
    is_hidden: Optional[StrictBool] = None
    label: StrictStr
    options: Optional[List[Optional[ObjsTeamProfileFieldOptionsInner]]] = None
    ordering: Union[StrictFloat, StrictInt]
    possible_values: Optional[List[StrictStr]] = None
    type: StrictStr
    __properties: ClassVar[List[str]] = ["field_name", "hint", "id", "is_hidden", "label", "options", "ordering", "possible_values", "type"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^X[a-zA-Z0-9]{9,}$", value):
            raise ValueError(r"must validate the regular expression /^X[a-zA-Z0-9]{9,}$/")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['text', 'date', 'link', 'mailto', 'options_list', 'user']):
            raise ValueError("must be one of enum values ('text', 'date', 'link', 'mailto', 'options_list', 'user')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ObjsTeamProfileField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in options (list)
        _items = []
        if self.options:
            for _item_options in self.options:
                if _item_options:
                    _items.append(_item_options.to_dict())
            _dict['options'] = _items
        # set to None if field_name (nullable) is None
        # and model_fields_set contains the field
        if self.field_name is None and "field_name" in self.model_fields_set:
            _dict['field_name'] = None

        # set to None if possible_values (nullable) is None
        # and model_fields_set contains the field
        if self.possible_values is None and "possible_values" in self.model_fields_set:
            _dict['possible_values'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ObjsTeamProfileField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "field_name": obj.get("field_name"),
            "hint": obj.get("hint"),
            "id": obj.get("id"),
            "is_hidden": obj.get("is_hidden"),
            "label": obj.get("label"),
            "options": [ObjsTeamProfileFieldOptionsInner.from_dict(_item) for _item in obj["options"]] if obj.get("options") is not None else None,
            "ordering": obj.get("ordering"),
            "possible_values": obj.get("possible_values"),
            "type": obj.get("type")
        })
        return _obj



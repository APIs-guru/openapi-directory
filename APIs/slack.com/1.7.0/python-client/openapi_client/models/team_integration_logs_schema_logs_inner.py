# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class TeamIntegrationLogsSchemaLogsInner(BaseModel):
    """
    TeamIntegrationLogsSchemaLogsInner
    """ # noqa: E501
    admin_app_id: Optional[Annotated[str, Field(strict=True)]] = None
    app_id: Annotated[str, Field(strict=True)]
    app_type: StrictStr
    change_type: StrictStr
    channel: Optional[Annotated[str, Field(strict=True)]] = None
    var_date: StrictStr = Field(alias="date")
    scope: StrictStr
    service_id: Optional[StrictStr] = None
    service_type: Optional[StrictStr] = None
    user_id: Annotated[str, Field(strict=True)]
    user_name: StrictStr
    __properties: ClassVar[List[str]] = ["admin_app_id", "app_id", "app_type", "change_type", "channel", "date", "scope", "service_id", "service_type", "user_id", "user_name"]

    @field_validator('admin_app_id')
    def admin_app_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^A[A-Z0-9]{1,}$", value):
            raise ValueError(r"must validate the regular expression /^A[A-Z0-9]{1,}$/")
        return value

    @field_validator('app_id')
    def app_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^A[A-Z0-9]{1,}$", value):
            raise ValueError(r"must validate the regular expression /^A[A-Z0-9]{1,}$/")
        return value

    @field_validator('channel')
    def channel_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[CGD][A-Z0-9]{8,}$", value):
            raise ValueError(r"must validate the regular expression /^[CGD][A-Z0-9]{8,}$/")
        return value

    @field_validator('user_id')
    def user_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[UW][A-Z0-9]{2,}$", value):
            raise ValueError(r"must validate the regular expression /^[UW][A-Z0-9]{2,}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TeamIntegrationLogsSchemaLogsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TeamIntegrationLogsSchemaLogsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "admin_app_id": obj.get("admin_app_id"),
            "app_id": obj.get("app_id"),
            "app_type": obj.get("app_type"),
            "change_type": obj.get("change_type"),
            "channel": obj.get("channel"),
            "date": obj.get("date"),
            "scope": obj.get("scope"),
            "service_id": obj.get("service_id"),
            "service_type": obj.get("service_type"),
            "user_id": obj.get("user_id"),
            "user_name": obj.get("user_name")
        })
        return _obj



# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class UsersSetPhotoSchemaProfile(BaseModel):
    """
    UsersSetPhotoSchemaProfile
    """ # noqa: E501
    avatar_hash: Annotated[str, Field(strict=True)]
    image_1024: StrictStr
    image_192: StrictStr
    image_24: StrictStr
    image_32: StrictStr
    image_48: StrictStr
    image_512: StrictStr
    image_72: StrictStr
    image_original: StrictStr
    __properties: ClassVar[List[str]] = ["avatar_hash", "image_1024", "image_192", "image_24", "image_32", "image_48", "image_512", "image_72", "image_original"]

    @field_validator('avatar_hash')
    def avatar_hash_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9a-f]{12}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-f]{12}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UsersSetPhotoSchemaProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UsersSetPhotoSchemaProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "avatar_hash": obj.get("avatar_hash"),
            "image_1024": obj.get("image_1024"),
            "image_192": obj.get("image_192"),
            "image_24": obj.get("image_24"),
            "image_32": obj.get("image_32"),
            "image_48": obj.get("image_48"),
            "image_512": obj.get("image_512"),
            "image_72": obj.get("image_72"),
            "image_original": obj.get("image_original")
        })
        return _obj



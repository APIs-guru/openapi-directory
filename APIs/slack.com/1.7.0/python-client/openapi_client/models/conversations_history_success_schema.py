# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.conversations_history_success_schema_channel_actions_ts_inner import ConversationsHistorySuccessSchemaChannelActionsTsInner
from openapi_client.models.objs_message import ObjsMessage
from typing import Optional, Set
from typing_extensions import Self

class ConversationsHistorySuccessSchema(BaseModel):
    """
    Schema for successful response from conversations.history method
    """ # noqa: E501
    channel_actions_count: StrictInt
    channel_actions_ts: List[Optional[ConversationsHistorySuccessSchemaChannelActionsTsInner]]
    has_more: StrictBool
    messages: Annotated[List[ObjsMessage], Field(min_length=1)]
    ok: StrictBool
    pin_count: StrictInt
    __properties: ClassVar[List[str]] = ["channel_actions_count", "channel_actions_ts", "has_more", "messages", "ok", "pin_count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConversationsHistorySuccessSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in channel_actions_ts (list)
        _items = []
        if self.channel_actions_ts:
            for _item_channel_actions_ts in self.channel_actions_ts:
                if _item_channel_actions_ts:
                    _items.append(_item_channel_actions_ts.to_dict())
            _dict['channel_actions_ts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item_messages in self.messages:
                if _item_messages:
                    _items.append(_item_messages.to_dict())
            _dict['messages'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConversationsHistorySuccessSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channel_actions_count": obj.get("channel_actions_count"),
            "channel_actions_ts": [ConversationsHistorySuccessSchemaChannelActionsTsInner.from_dict(_item) for _item in obj["channel_actions_ts"]] if obj.get("channel_actions_ts") is not None else None,
            "has_more": obj.get("has_more"),
            "messages": [ObjsMessage.from_dict(_item) for _item in obj["messages"]] if obj.get("messages") is not None else None,
            "ok": obj.get("ok"),
            "pin_count": obj.get("pin_count")
        })
        return _obj



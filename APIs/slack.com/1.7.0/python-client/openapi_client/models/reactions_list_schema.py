# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.objs_paging import ObjsPaging
from openapi_client.models.objs_response_metadata_inner import ObjsResponseMetadataInner
from openapi_client.models.reactions_list_schema_items_inner_inner import ReactionsListSchemaItemsInnerInner
from typing import Optional, Set
from typing_extensions import Self

class ReactionsListSchema(BaseModel):
    """
    Schema for successful response from reactions.list method
    """ # noqa: E501
    items: List[List[ReactionsListSchemaItemsInnerInner]]
    ok: StrictBool
    paging: Optional[ObjsPaging] = None
    response_metadata: Optional[List[ObjsResponseMetadataInner]] = None
    __properties: ClassVar[List[str]] = ["items", "ok", "paging", "response_metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReactionsListSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list of list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(
                         [_inner_item.to_dict() for _inner_item in _item_items if _inner_item is not None]
                    )
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of paging
        if self.paging:
            _dict['paging'] = self.paging.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in response_metadata (list)
        _items = []
        if self.response_metadata:
            for _item_response_metadata in self.response_metadata:
                if _item_response_metadata:
                    _items.append(_item_response_metadata.to_dict())
            _dict['response_metadata'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReactionsListSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "items": [
                    [ReactionsListSchemaItemsInnerInner.from_dict(_inner_item) for _inner_item in _item]
                    for _item in obj["items"]
                ] if obj.get("items") is not None else None,
            "ok": obj.get("ok"),
            "paging": ObjsPaging.from_dict(obj["paging"]) if obj.get("paging") is not None else None,
            "response_metadata": [ObjsResponseMetadataInner.from_dict(_item) for _item in obj["response_metadata"]] if obj.get("response_metadata") is not None else None
        })
        return _obj



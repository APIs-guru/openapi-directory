# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.conversation_object_display_counts import ConversationObjectDisplayCounts
from openapi_client.models.conversation_object_parent_conversation_inner import ConversationObjectParentConversationInner
from openapi_client.models.conversation_object_shares_inner import ConversationObjectSharesInner
from openapi_client.models.objs_channel_latest_inner import ObjsChannelLatestInner
from openapi_client.models.objs_channel_purpose import ObjsChannelPurpose
from typing import Optional, Set
from typing_extensions import Self

class ConversationObject(BaseModel):
    """
    ConversationObject
    """ # noqa: E501
    accepted_user: Optional[Annotated[str, Field(strict=True)]] = None
    connected_team_ids: Optional[Annotated[List[Annotated[str, Field(strict=True)]], Field(min_length=0)]] = None
    conversation_host_id: Optional[Annotated[str, Field(strict=True)]] = None
    created: StrictInt
    creator: Annotated[str, Field(strict=True)]
    display_counts: Optional[ConversationObjectDisplayCounts] = None
    enterprise_id: Optional[Annotated[str, Field(strict=True)]] = None
    has_pins: Optional[StrictBool] = None
    id: Annotated[str, Field(strict=True)]
    internal_team_ids: Optional[Annotated[List[Annotated[str, Field(strict=True)]], Field(min_length=0)]] = None
    is_archived: StrictBool
    is_channel: StrictBool
    is_ext_shared: Optional[StrictBool] = None
    is_frozen: Optional[StrictBool] = None
    is_general: StrictBool
    is_global_shared: Optional[StrictBool] = None
    is_group: StrictBool
    is_im: StrictBool
    is_member: Optional[StrictBool] = None
    is_moved: Optional[StrictInt] = None
    is_mpim: StrictBool
    is_non_threadable: Optional[StrictBool] = None
    is_open: Optional[StrictBool] = None
    is_org_default: Optional[StrictBool] = None
    is_org_mandatory: Optional[StrictBool] = None
    is_org_shared: StrictBool
    is_pending_ext_shared: Optional[StrictBool] = None
    is_private: StrictBool
    is_read_only: Optional[StrictBool] = None
    is_shared: StrictBool
    is_starred: Optional[StrictBool] = None
    is_thread_only: Optional[StrictBool] = None
    last_read: Optional[Annotated[str, Field(strict=True)]] = None
    latest: Optional[List[Optional[ObjsChannelLatestInner]]] = None
    members: Optional[Annotated[List[Annotated[str, Field(strict=True)]], Field(min_length=0)]] = None
    name: StrictStr
    name_normalized: StrictStr
    num_members: Optional[StrictInt] = None
    parent_conversation: Optional[List[Optional[ConversationObjectParentConversationInner]]] = None
    pending_connected_team_ids: Optional[Annotated[List[Annotated[str, Field(strict=True)]], Field(min_length=0)]] = None
    pending_shared: Optional[Annotated[List[Annotated[str, Field(strict=True)]], Field(min_length=0)]] = None
    pin_count: Optional[StrictInt] = None
    previous_names: Optional[Annotated[List[StrictStr], Field(min_length=0)]] = None
    priority: Optional[Union[StrictFloat, StrictInt]] = None
    purpose: ObjsChannelPurpose
    shared_team_ids: Optional[Annotated[List[Annotated[str, Field(strict=True)]], Field(min_length=0)]] = None
    shares: Optional[Annotated[List[ConversationObjectSharesInner], Field(min_length=0)]] = None
    timezone_count: Optional[StrictInt] = None
    topic: ObjsChannelPurpose
    unlinked: Optional[StrictInt] = None
    unread_count: Optional[StrictInt] = None
    unread_count_display: Optional[StrictInt] = None
    use_case: Optional[StrictStr] = None
    user: Optional[Annotated[str, Field(strict=True)]] = None
    version: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["accepted_user", "connected_team_ids", "conversation_host_id", "created", "creator", "display_counts", "enterprise_id", "has_pins", "id", "internal_team_ids", "is_archived", "is_channel", "is_ext_shared", "is_frozen", "is_general", "is_global_shared", "is_group", "is_im", "is_member", "is_moved", "is_mpim", "is_non_threadable", "is_open", "is_org_default", "is_org_mandatory", "is_org_shared", "is_pending_ext_shared", "is_private", "is_read_only", "is_shared", "is_starred", "is_thread_only", "last_read", "latest", "members", "name", "name_normalized", "num_members", "parent_conversation", "pending_connected_team_ids", "pending_shared", "pin_count", "previous_names", "priority", "purpose", "shared_team_ids", "shares", "timezone_count", "topic", "unlinked", "unread_count", "unread_count_display", "use_case", "user", "version"]

    @field_validator('accepted_user')
    def accepted_user_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[UW][A-Z0-9]{2,}$", value):
            raise ValueError(r"must validate the regular expression /^[UW][A-Z0-9]{2,}$/")
        return value

    @field_validator('conversation_host_id')
    def conversation_host_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[TE][A-Z0-9]{8,}$", value):
            raise ValueError(r"must validate the regular expression /^[TE][A-Z0-9]{8,}$/")
        return value

    @field_validator('creator')
    def creator_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[UW][A-Z0-9]{2,}$", value):
            raise ValueError(r"must validate the regular expression /^[UW][A-Z0-9]{2,}$/")
        return value

    @field_validator('enterprise_id')
    def enterprise_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[E][A-Z0-9]{8,}$", value):
            raise ValueError(r"must validate the regular expression /^[E][A-Z0-9]{8,}$/")
        return value

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[CGD][A-Z0-9]{8,}$", value):
            raise ValueError(r"must validate the regular expression /^[CGD][A-Z0-9]{8,}$/")
        return value

    @field_validator('last_read')
    def last_read_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{10}\.\d{6}$", value):
            raise ValueError(r"must validate the regular expression /^\d{10}\.\d{6}$/")
        return value

    @field_validator('user')
    def user_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[UW][A-Z0-9]{2,}$", value):
            raise ValueError(r"must validate the regular expression /^[UW][A-Z0-9]{2,}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConversationObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of display_counts
        if self.display_counts:
            _dict['display_counts'] = self.display_counts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in latest (list)
        _items = []
        if self.latest:
            for _item_latest in self.latest:
                if _item_latest:
                    _items.append(_item_latest.to_dict())
            _dict['latest'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in parent_conversation (list)
        _items = []
        if self.parent_conversation:
            for _item_parent_conversation in self.parent_conversation:
                if _item_parent_conversation:
                    _items.append(_item_parent_conversation.to_dict())
            _dict['parent_conversation'] = _items
        # override the default output from pydantic by calling `to_dict()` of purpose
        if self.purpose:
            _dict['purpose'] = self.purpose.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in shares (list)
        _items = []
        if self.shares:
            for _item_shares in self.shares:
                if _item_shares:
                    _items.append(_item_shares.to_dict())
            _dict['shares'] = _items
        # override the default output from pydantic by calling `to_dict()` of topic
        if self.topic:
            _dict['topic'] = self.topic.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConversationObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accepted_user": obj.get("accepted_user"),
            "connected_team_ids": obj.get("connected_team_ids"),
            "conversation_host_id": obj.get("conversation_host_id"),
            "created": obj.get("created"),
            "creator": obj.get("creator"),
            "display_counts": ConversationObjectDisplayCounts.from_dict(obj["display_counts"]) if obj.get("display_counts") is not None else None,
            "enterprise_id": obj.get("enterprise_id"),
            "has_pins": obj.get("has_pins"),
            "id": obj.get("id"),
            "internal_team_ids": obj.get("internal_team_ids"),
            "is_archived": obj.get("is_archived"),
            "is_channel": obj.get("is_channel"),
            "is_ext_shared": obj.get("is_ext_shared"),
            "is_frozen": obj.get("is_frozen"),
            "is_general": obj.get("is_general"),
            "is_global_shared": obj.get("is_global_shared"),
            "is_group": obj.get("is_group"),
            "is_im": obj.get("is_im"),
            "is_member": obj.get("is_member"),
            "is_moved": obj.get("is_moved"),
            "is_mpim": obj.get("is_mpim"),
            "is_non_threadable": obj.get("is_non_threadable"),
            "is_open": obj.get("is_open"),
            "is_org_default": obj.get("is_org_default"),
            "is_org_mandatory": obj.get("is_org_mandatory"),
            "is_org_shared": obj.get("is_org_shared"),
            "is_pending_ext_shared": obj.get("is_pending_ext_shared"),
            "is_private": obj.get("is_private"),
            "is_read_only": obj.get("is_read_only"),
            "is_shared": obj.get("is_shared"),
            "is_starred": obj.get("is_starred"),
            "is_thread_only": obj.get("is_thread_only"),
            "last_read": obj.get("last_read"),
            "latest": [ObjsChannelLatestInner.from_dict(_item) for _item in obj["latest"]] if obj.get("latest") is not None else None,
            "members": obj.get("members"),
            "name": obj.get("name"),
            "name_normalized": obj.get("name_normalized"),
            "num_members": obj.get("num_members"),
            "parent_conversation": [ConversationObjectParentConversationInner.from_dict(_item) for _item in obj["parent_conversation"]] if obj.get("parent_conversation") is not None else None,
            "pending_connected_team_ids": obj.get("pending_connected_team_ids"),
            "pending_shared": obj.get("pending_shared"),
            "pin_count": obj.get("pin_count"),
            "previous_names": obj.get("previous_names"),
            "priority": obj.get("priority"),
            "purpose": ObjsChannelPurpose.from_dict(obj["purpose"]) if obj.get("purpose") is not None else None,
            "shared_team_ids": obj.get("shared_team_ids"),
            "shares": [ConversationObjectSharesInner.from_dict(_item) for _item in obj["shares"]] if obj.get("shares") is not None else None,
            "timezone_count": obj.get("timezone_count"),
            "topic": ObjsChannelPurpose.from_dict(obj["topic"]) if obj.get("topic") is not None else None,
            "unlinked": obj.get("unlinked"),
            "unread_count": obj.get("unread_count"),
            "unread_count_display": obj.get("unread_count_display"),
            "use_case": obj.get("use_case"),
            "user": obj.get("user"),
            "version": obj.get("version")
        })
        return _obj



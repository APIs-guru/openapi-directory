# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from openapi_client.models.bots_info_schema_bot_icons import BotsInfoSchemaBotIcons
from typing import Optional, Set
from typing_extensions import Self

class ObjsBotProfile(BaseModel):
    """
    ObjsBotProfile
    """ # noqa: E501
    app_id: Annotated[str, Field(strict=True)]
    deleted: StrictBool
    icons: BotsInfoSchemaBotIcons
    id: Annotated[str, Field(strict=True)]
    name: StrictStr
    team_id: Annotated[str, Field(strict=True)]
    updated: StrictInt
    __properties: ClassVar[List[str]] = ["app_id", "deleted", "icons", "id", "name", "team_id", "updated"]

    @field_validator('app_id')
    def app_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^A[A-Z0-9]{1,}$", value):
            raise ValueError(r"must validate the regular expression /^A[A-Z0-9]{1,}$/")
        return value

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^B[A-Z0-9]{8,}$", value):
            raise ValueError(r"must validate the regular expression /^B[A-Z0-9]{8,}$/")
        return value

    @field_validator('team_id')
    def team_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[T][A-Z0-9]{2,}$", value):
            raise ValueError(r"must validate the regular expression /^[T][A-Z0-9]{2,}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ObjsBotProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of icons
        if self.icons:
            _dict['icons'] = self.icons.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ObjsBotProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app_id": obj.get("app_id"),
            "deleted": obj.get("deleted"),
            "icons": BotsInfoSchemaBotIcons.from_dict(obj["icons"]) if obj.get("icons") is not None else None,
            "id": obj.get("id"),
            "name": obj.get("name"),
            "team_id": obj.get("team_id"),
            "updated": obj.get("updated")
        })
        return _obj



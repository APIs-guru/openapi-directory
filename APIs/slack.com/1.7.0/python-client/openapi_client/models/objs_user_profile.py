# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ObjsUserProfile(BaseModel):
    """
    ObjsUserProfile
    """ # noqa: E501
    always_active: Optional[StrictBool] = None
    api_app_id: Optional[Annotated[str, Field(strict=True)]] = None
    avatar_hash: StrictStr
    bot_id: Optional[Annotated[str, Field(strict=True)]] = None
    display_name: StrictStr
    display_name_normalized: StrictStr
    email: Optional[StrictStr] = None
    fields: Optional[List[Dict[str, Any]]]
    first_name: Optional[StrictStr] = None
    guest_expiration_ts: Optional[StrictInt] = None
    guest_invited_by: Optional[StrictStr] = None
    image_1024: Optional[StrictStr] = None
    image_192: Optional[StrictStr] = None
    image_24: Optional[StrictStr] = None
    image_32: Optional[StrictStr] = None
    image_48: Optional[StrictStr] = None
    image_512: Optional[StrictStr] = None
    image_72: Optional[StrictStr] = None
    image_original: Optional[StrictStr] = None
    is_app_user: Optional[StrictBool] = None
    is_custom_image: Optional[StrictBool] = None
    is_restricted: Optional[StrictBool] = None
    is_ultra_restricted: Optional[StrictBool] = None
    last_avatar_image_hash: Optional[StrictStr] = None
    last_name: Optional[StrictStr] = None
    memberships_count: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    phone: StrictStr
    pronouns: Optional[StrictStr] = None
    real_name: StrictStr
    real_name_normalized: StrictStr
    skype: StrictStr
    status_default_emoji: Optional[StrictStr] = None
    status_default_text: Optional[StrictStr] = None
    status_default_text_canonical: Optional[StrictStr] = None
    status_emoji: StrictStr
    status_expiration: Optional[StrictInt] = None
    status_text: StrictStr
    status_text_canonical: Optional[StrictStr] = None
    team: Optional[Annotated[str, Field(strict=True)]] = None
    title: StrictStr
    updated: Optional[StrictInt] = None
    user_id: Optional[StrictStr] = None
    username: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["always_active", "api_app_id", "avatar_hash", "bot_id", "display_name", "display_name_normalized", "email", "fields", "first_name", "guest_expiration_ts", "guest_invited_by", "image_1024", "image_192", "image_24", "image_32", "image_48", "image_512", "image_72", "image_original", "is_app_user", "is_custom_image", "is_restricted", "is_ultra_restricted", "last_avatar_image_hash", "last_name", "memberships_count", "name", "phone", "pronouns", "real_name", "real_name_normalized", "skype", "status_default_emoji", "status_default_text", "status_default_text_canonical", "status_emoji", "status_expiration", "status_text", "status_text_canonical", "team", "title", "updated", "user_id", "username"]

    @field_validator('api_app_id')
    def api_app_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(A[A-Z0-9]{1,})?$", value):
            raise ValueError(r"must validate the regular expression /^(A[A-Z0-9]{1,})?$/")
        return value

    @field_validator('bot_id')
    def bot_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^B[A-Z0-9]{8,}$", value):
            raise ValueError(r"must validate the regular expression /^B[A-Z0-9]{8,}$/")
        return value

    @field_validator('team')
    def team_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[TE][A-Z0-9]{8,}$", value):
            raise ValueError(r"must validate the regular expression /^[TE][A-Z0-9]{8,}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ObjsUserProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if fields (nullable) is None
        # and model_fields_set contains the field
        if self.fields is None and "fields" in self.model_fields_set:
            _dict['fields'] = None

        # set to None if first_name (nullable) is None
        # and model_fields_set contains the field
        if self.first_name is None and "first_name" in self.model_fields_set:
            _dict['first_name'] = None

        # set to None if guest_expiration_ts (nullable) is None
        # and model_fields_set contains the field
        if self.guest_expiration_ts is None and "guest_expiration_ts" in self.model_fields_set:
            _dict['guest_expiration_ts'] = None

        # set to None if guest_invited_by (nullable) is None
        # and model_fields_set contains the field
        if self.guest_invited_by is None and "guest_invited_by" in self.model_fields_set:
            _dict['guest_invited_by'] = None

        # set to None if image_1024 (nullable) is None
        # and model_fields_set contains the field
        if self.image_1024 is None and "image_1024" in self.model_fields_set:
            _dict['image_1024'] = None

        # set to None if image_192 (nullable) is None
        # and model_fields_set contains the field
        if self.image_192 is None and "image_192" in self.model_fields_set:
            _dict['image_192'] = None

        # set to None if image_24 (nullable) is None
        # and model_fields_set contains the field
        if self.image_24 is None and "image_24" in self.model_fields_set:
            _dict['image_24'] = None

        # set to None if image_32 (nullable) is None
        # and model_fields_set contains the field
        if self.image_32 is None and "image_32" in self.model_fields_set:
            _dict['image_32'] = None

        # set to None if image_48 (nullable) is None
        # and model_fields_set contains the field
        if self.image_48 is None and "image_48" in self.model_fields_set:
            _dict['image_48'] = None

        # set to None if image_512 (nullable) is None
        # and model_fields_set contains the field
        if self.image_512 is None and "image_512" in self.model_fields_set:
            _dict['image_512'] = None

        # set to None if image_72 (nullable) is None
        # and model_fields_set contains the field
        if self.image_72 is None and "image_72" in self.model_fields_set:
            _dict['image_72'] = None

        # set to None if image_original (nullable) is None
        # and model_fields_set contains the field
        if self.image_original is None and "image_original" in self.model_fields_set:
            _dict['image_original'] = None

        # set to None if is_restricted (nullable) is None
        # and model_fields_set contains the field
        if self.is_restricted is None and "is_restricted" in self.model_fields_set:
            _dict['is_restricted'] = None

        # set to None if is_ultra_restricted (nullable) is None
        # and model_fields_set contains the field
        if self.is_ultra_restricted is None and "is_ultra_restricted" in self.model_fields_set:
            _dict['is_ultra_restricted'] = None

        # set to None if last_name (nullable) is None
        # and model_fields_set contains the field
        if self.last_name is None and "last_name" in self.model_fields_set:
            _dict['last_name'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if status_default_text_canonical (nullable) is None
        # and model_fields_set contains the field
        if self.status_default_text_canonical is None and "status_default_text_canonical" in self.model_fields_set:
            _dict['status_default_text_canonical'] = None

        # set to None if status_text_canonical (nullable) is None
        # and model_fields_set contains the field
        if self.status_text_canonical is None and "status_text_canonical" in self.model_fields_set:
            _dict['status_text_canonical'] = None

        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict['username'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ObjsUserProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "always_active": obj.get("always_active"),
            "api_app_id": obj.get("api_app_id"),
            "avatar_hash": obj.get("avatar_hash"),
            "bot_id": obj.get("bot_id"),
            "display_name": obj.get("display_name"),
            "display_name_normalized": obj.get("display_name_normalized"),
            "email": obj.get("email"),
            "fields": obj.get("fields"),
            "first_name": obj.get("first_name"),
            "guest_expiration_ts": obj.get("guest_expiration_ts"),
            "guest_invited_by": obj.get("guest_invited_by"),
            "image_1024": obj.get("image_1024"),
            "image_192": obj.get("image_192"),
            "image_24": obj.get("image_24"),
            "image_32": obj.get("image_32"),
            "image_48": obj.get("image_48"),
            "image_512": obj.get("image_512"),
            "image_72": obj.get("image_72"),
            "image_original": obj.get("image_original"),
            "is_app_user": obj.get("is_app_user"),
            "is_custom_image": obj.get("is_custom_image"),
            "is_restricted": obj.get("is_restricted"),
            "is_ultra_restricted": obj.get("is_ultra_restricted"),
            "last_avatar_image_hash": obj.get("last_avatar_image_hash"),
            "last_name": obj.get("last_name"),
            "memberships_count": obj.get("memberships_count"),
            "name": obj.get("name"),
            "phone": obj.get("phone"),
            "pronouns": obj.get("pronouns"),
            "real_name": obj.get("real_name"),
            "real_name_normalized": obj.get("real_name_normalized"),
            "skype": obj.get("skype"),
            "status_default_emoji": obj.get("status_default_emoji"),
            "status_default_text": obj.get("status_default_text"),
            "status_default_text_canonical": obj.get("status_default_text_canonical"),
            "status_emoji": obj.get("status_emoji"),
            "status_expiration": obj.get("status_expiration"),
            "status_text": obj.get("status_text"),
            "status_text_canonical": obj.get("status_text_canonical"),
            "team": obj.get("team"),
            "title": obj.get("title"),
            "updated": obj.get("updated"),
            "user_id": obj.get("user_id"),
            "username": obj.get("username")
        })
        return _obj



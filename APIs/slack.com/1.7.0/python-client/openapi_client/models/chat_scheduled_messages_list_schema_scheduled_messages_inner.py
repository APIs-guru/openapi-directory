# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ChatScheduledMessagesListSchemaScheduledMessagesInner(BaseModel):
    """
    ChatScheduledMessagesListSchemaScheduledMessagesInner
    """ # noqa: E501
    channel_id: Annotated[str, Field(strict=True)]
    date_created: Annotated[int, Field(strict=True)]
    id: Annotated[str, Field(strict=True)]
    post_at: Annotated[int, Field(strict=True)]
    text: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["channel_id", "date_created", "id", "post_at", "text"]

    @field_validator('channel_id')
    def channel_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[C][A-Z0-9]{2,}$", value):
            raise ValueError(r"must validate the regular expression /^[C][A-Z0-9]{2,}$/")
        return value

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[Q][A-Z0-9]{8,}$", value):
            raise ValueError(r"must validate the regular expression /^[Q][A-Z0-9]{8,}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatScheduledMessagesListSchemaScheduledMessagesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatScheduledMessagesListSchemaScheduledMessagesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channel_id": obj.get("channel_id"),
            "date_created": obj.get("date_created"),
            "id": obj.get("id"),
            "post_at": obj.get("post_at"),
            "text": obj.get("text")
        })
        return _obj



# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.objs_reaction import ObjsReaction
from typing import Optional, Set
from typing_extensions import Self

class ObjsComment(BaseModel):
    """
    ObjsComment
    """ # noqa: E501
    comment: StrictStr
    created: StrictInt
    id: Annotated[str, Field(strict=True)]
    is_intro: StrictBool
    is_starred: Optional[StrictBool] = None
    num_stars: Optional[StrictInt] = None
    pinned_info: Optional[Dict[str, Any]] = None
    pinned_to: Optional[List[Annotated[str, Field(strict=True)]]] = None
    reactions: Optional[List[ObjsReaction]] = None
    timestamp: StrictInt
    user: Annotated[str, Field(strict=True)]
    __properties: ClassVar[List[str]] = ["comment", "created", "id", "is_intro", "is_starred", "num_stars", "pinned_info", "pinned_to", "reactions", "timestamp", "user"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^Fc[A-Z0-9]{8,}$", value):
            raise ValueError(r"must validate the regular expression /^Fc[A-Z0-9]{8,}$/")
        return value

    @field_validator('user')
    def user_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[UW][A-Z0-9]{2,}$", value):
            raise ValueError(r"must validate the regular expression /^[UW][A-Z0-9]{2,}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ObjsComment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in reactions (list)
        _items = []
        if self.reactions:
            for _item_reactions in self.reactions:
                if _item_reactions:
                    _items.append(_item_reactions.to_dict())
            _dict['reactions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ObjsComment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comment": obj.get("comment"),
            "created": obj.get("created"),
            "id": obj.get("id"),
            "is_intro": obj.get("is_intro"),
            "is_starred": obj.get("is_starred"),
            "num_stars": obj.get("num_stars"),
            "pinned_info": obj.get("pinned_info"),
            "pinned_to": obj.get("pinned_to"),
            "reactions": [ObjsReaction.from_dict(_item) for _item in obj["reactions"]] if obj.get("reactions") is not None else None,
            "timestamp": obj.get("timestamp"),
            "user": obj.get("user")
        })
        return _obj



# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List
from openapi_client.models.apps_permissions_info_schema_info_app_home import AppsPermissionsInfoSchemaInfoAppHome
from openapi_client.models.apps_permissions_info_schema_info_team import AppsPermissionsInfoSchemaInfoTeam
from typing import Optional, Set
from typing_extensions import Self

class AppsPermissionsInfoSchemaInfo(BaseModel):
    """
    AppsPermissionsInfoSchemaInfo
    """ # noqa: E501
    app_home: AppsPermissionsInfoSchemaInfoAppHome
    channel: AppsPermissionsInfoSchemaInfoAppHome
    group: AppsPermissionsInfoSchemaInfoAppHome
    im: AppsPermissionsInfoSchemaInfoAppHome
    mpim: AppsPermissionsInfoSchemaInfoAppHome
    team: AppsPermissionsInfoSchemaInfoTeam
    __properties: ClassVar[List[str]] = ["app_home", "channel", "group", "im", "mpim", "team"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppsPermissionsInfoSchemaInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app_home
        if self.app_home:
            _dict['app_home'] = self.app_home.to_dict()
        # override the default output from pydantic by calling `to_dict()` of channel
        if self.channel:
            _dict['channel'] = self.channel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of group
        if self.group:
            _dict['group'] = self.group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of im
        if self.im:
            _dict['im'] = self.im.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mpim
        if self.mpim:
            _dict['mpim'] = self.mpim.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team
        if self.team:
            _dict['team'] = self.team.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppsPermissionsInfoSchemaInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app_home": AppsPermissionsInfoSchemaInfoAppHome.from_dict(obj["app_home"]) if obj.get("app_home") is not None else None,
            "channel": AppsPermissionsInfoSchemaInfoAppHome.from_dict(obj["channel"]) if obj.get("channel") is not None else None,
            "group": AppsPermissionsInfoSchemaInfoAppHome.from_dict(obj["group"]) if obj.get("group") is not None else None,
            "im": AppsPermissionsInfoSchemaInfoAppHome.from_dict(obj["im"]) if obj.get("im") is not None else None,
            "mpim": AppsPermissionsInfoSchemaInfoAppHome.from_dict(obj["mpim"]) if obj.get("mpim") is not None else None,
            "team": AppsPermissionsInfoSchemaInfoTeam.from_dict(obj["team"]) if obj.get("team") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.objs_enterprise_user import ObjsEnterpriseUser
from openapi_client.models.objs_team_discoverable_inner import ObjsTeamDiscoverableInner
from openapi_client.models.objs_user_inner_any_of_team_profile import ObjsUserInnerAnyOfTeamProfile
from openapi_client.models.objs_user_profile import ObjsUserProfile
from typing import Optional, Set
from typing_extensions import Self

class ObjsUserInnerAnyOf(BaseModel):
    """
    user object for non enterprise type
    """ # noqa: E501
    color: Optional[Annotated[str, Field(strict=True)]] = None
    deleted: Optional[StrictBool] = None
    enterprise_user: Optional[ObjsEnterpriseUser] = None
    has_2fa: Optional[StrictBool] = None
    id: Annotated[str, Field(strict=True)]
    is_admin: Optional[StrictBool] = None
    is_app_user: StrictBool
    is_bot: StrictBool
    is_external: Optional[StrictBool] = None
    is_forgotten: Optional[StrictBool] = None
    is_invited_user: Optional[StrictBool] = None
    is_owner: Optional[StrictBool] = None
    is_primary_owner: Optional[StrictBool] = None
    is_restricted: Optional[StrictBool] = None
    is_stranger: Optional[StrictBool] = None
    is_ultra_restricted: Optional[StrictBool] = None
    locale: Optional[StrictStr] = None
    name: StrictStr
    presence: Optional[StrictStr] = None
    profile: ObjsUserProfile
    real_name: Optional[StrictStr] = None
    team: Optional[Annotated[str, Field(strict=True)]] = None
    team_id: Optional[Annotated[str, Field(strict=True)]] = None
    team_profile: Optional[ObjsUserInnerAnyOfTeamProfile] = None
    two_factor_type: Optional[StrictStr] = None
    tz: Optional[List[Optional[ObjsTeamDiscoverableInner]]] = None
    tz_label: Optional[StrictStr] = None
    tz_offset: Optional[Union[StrictFloat, StrictInt]] = None
    updated: Union[StrictFloat, StrictInt]
    __properties: ClassVar[List[str]] = ["color", "deleted", "enterprise_user", "has_2fa", "id", "is_admin", "is_app_user", "is_bot", "is_external", "is_forgotten", "is_invited_user", "is_owner", "is_primary_owner", "is_restricted", "is_stranger", "is_ultra_restricted", "locale", "name", "presence", "profile", "real_name", "team", "team_id", "team_profile", "two_factor_type", "tz", "tz_label", "tz_offset", "updated"]

    @field_validator('color')
    def color_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-fA-F0-9]{6}$", value):
            raise ValueError(r"must validate the regular expression /^[a-fA-F0-9]{6}$/")
        return value

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[UW][A-Z0-9]{2,}$", value):
            raise ValueError(r"must validate the regular expression /^[UW][A-Z0-9]{2,}$/")
        return value

    @field_validator('team')
    def team_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[TE][A-Z0-9]{8,}$", value):
            raise ValueError(r"must validate the regular expression /^[TE][A-Z0-9]{8,}$/")
        return value

    @field_validator('team_id')
    def team_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[TE][A-Z0-9]{8,}$", value):
            raise ValueError(r"must validate the regular expression /^[TE][A-Z0-9]{8,}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ObjsUserInnerAnyOf from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of enterprise_user
        if self.enterprise_user:
            _dict['enterprise_user'] = self.enterprise_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of profile
        if self.profile:
            _dict['profile'] = self.profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team_profile
        if self.team_profile:
            _dict['team_profile'] = self.team_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tz (list)
        _items = []
        if self.tz:
            for _item_tz in self.tz:
                if _item_tz:
                    _items.append(_item_tz.to_dict())
            _dict['tz'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ObjsUserInnerAnyOf from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "color": obj.get("color"),
            "deleted": obj.get("deleted"),
            "enterprise_user": ObjsEnterpriseUser.from_dict(obj["enterprise_user"]) if obj.get("enterprise_user") is not None else None,
            "has_2fa": obj.get("has_2fa"),
            "id": obj.get("id"),
            "is_admin": obj.get("is_admin"),
            "is_app_user": obj.get("is_app_user"),
            "is_bot": obj.get("is_bot"),
            "is_external": obj.get("is_external"),
            "is_forgotten": obj.get("is_forgotten"),
            "is_invited_user": obj.get("is_invited_user"),
            "is_owner": obj.get("is_owner"),
            "is_primary_owner": obj.get("is_primary_owner"),
            "is_restricted": obj.get("is_restricted"),
            "is_stranger": obj.get("is_stranger"),
            "is_ultra_restricted": obj.get("is_ultra_restricted"),
            "locale": obj.get("locale"),
            "name": obj.get("name"),
            "presence": obj.get("presence"),
            "profile": ObjsUserProfile.from_dict(obj["profile"]) if obj.get("profile") is not None else None,
            "real_name": obj.get("real_name"),
            "team": obj.get("team"),
            "team_id": obj.get("team_id"),
            "team_profile": ObjsUserInnerAnyOfTeamProfile.from_dict(obj["team_profile"]) if obj.get("team_profile") is not None else None,
            "two_factor_type": obj.get("two_factor_type"),
            "tz": [ObjsTeamDiscoverableInner.from_dict(_item) for _item in obj["tz"]] if obj.get("tz") is not None else None,
            "tz_label": obj.get("tz_label"),
            "tz_offset": obj.get("tz_offset"),
            "updated": obj.get("updated")
        })
        return _obj



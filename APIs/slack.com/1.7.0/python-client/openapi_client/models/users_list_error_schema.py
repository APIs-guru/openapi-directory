# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UsersListErrorSchema(BaseModel):
    """
    Schema for error response from users.list method
    """ # noqa: E501
    callstack: Optional[StrictStr] = Field(default=None, description="Note: PHP callstack is only visible in dev/qa")
    error: StrictStr
    ok: StrictBool
    __properties: ClassVar[List[str]] = ["callstack", "error", "ok"]

    @field_validator('error')
    def error_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['limit_required', 'invalid_cursor', 'not_authed', 'invalid_auth', 'account_inactive', 'no_permission', 'invalid_arg_name', 'invalid_array_arg', 'invalid_charset', 'invalid_form_data', 'invalid_post_type', 'missing_post_type', 'team_added_to_org', 'invalid_json', 'json_not_object', 'request_timeout', 'upgrade_required', 'fatal_error']):
            raise ValueError("must be one of enum values ('limit_required', 'invalid_cursor', 'not_authed', 'invalid_auth', 'account_inactive', 'no_permission', 'invalid_arg_name', 'invalid_array_arg', 'invalid_charset', 'invalid_form_data', 'invalid_post_type', 'missing_post_type', 'team_added_to_org', 'invalid_json', 'json_not_object', 'request_timeout', 'upgrade_required', 'fatal_error')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UsersListErrorSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UsersListErrorSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "callstack": obj.get("callstack"),
            "error": obj.get("error"),
            "ok": obj.get("ok")
        })
        return _obj



# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.objs_user_profile_short import ObjsUserProfileShort
from typing import Optional, Set
from typing_extensions import Self

class ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf1(BaseModel):
    """
    ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf1
    """ # noqa: E501
    is_starred: Optional[StrictBool] = None
    parent_user_id: Annotated[str, Field(strict=True)]
    source_team: Optional[Annotated[str, Field(strict=True)]] = None
    team: Optional[Annotated[str, Field(strict=True)]] = None
    text: StrictStr
    thread_ts: Annotated[str, Field(strict=True)]
    ts: Annotated[str, Field(strict=True)]
    type: StrictStr
    user: Annotated[str, Field(strict=True)]
    user_profile: Optional[ObjsUserProfileShort] = None
    user_team: Optional[Annotated[str, Field(strict=True)]] = None
    __properties: ClassVar[List[str]] = ["is_starred", "parent_user_id", "source_team", "team", "text", "thread_ts", "ts", "type", "user", "user_profile", "user_team"]

    @field_validator('parent_user_id')
    def parent_user_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[UW][A-Z0-9]{2,}$", value):
            raise ValueError(r"must validate the regular expression /^[UW][A-Z0-9]{2,}$/")
        return value

    @field_validator('source_team')
    def source_team_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[T][A-Z0-9]{2,}$", value):
            raise ValueError(r"must validate the regular expression /^[T][A-Z0-9]{2,}$/")
        return value

    @field_validator('team')
    def team_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[T][A-Z0-9]{2,}$", value):
            raise ValueError(r"must validate the regular expression /^[T][A-Z0-9]{2,}$/")
        return value

    @field_validator('thread_ts')
    def thread_ts_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d{10}\.\d{6}$", value):
            raise ValueError(r"must validate the regular expression /^\d{10}\.\d{6}$/")
        return value

    @field_validator('ts')
    def ts_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d{10}\.\d{6}$", value):
            raise ValueError(r"must validate the regular expression /^\d{10}\.\d{6}$/")
        return value

    @field_validator('user')
    def user_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[UW][A-Z0-9]{2,}$", value):
            raise ValueError(r"must validate the regular expression /^[UW][A-Z0-9]{2,}$/")
        return value

    @field_validator('user_team')
    def user_team_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[T][A-Z0-9]{2,}$", value):
            raise ValueError(r"must validate the regular expression /^[T][A-Z0-9]{2,}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user_profile
        if self.user_profile:
            _dict['user_profile'] = self.user_profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "is_starred": obj.get("is_starred"),
            "parent_user_id": obj.get("parent_user_id"),
            "source_team": obj.get("source_team"),
            "team": obj.get("team"),
            "text": obj.get("text"),
            "thread_ts": obj.get("thread_ts"),
            "ts": obj.get("ts"),
            "type": obj.get("type"),
            "user": obj.get("user"),
            "user_profile": ObjsUserProfileShort.from_dict(obj["user_profile"]) if obj.get("user_profile") is not None else None,
            "user_team": obj.get("user_team")
        })
        return _obj



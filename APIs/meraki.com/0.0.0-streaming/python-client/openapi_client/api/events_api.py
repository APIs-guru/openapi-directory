# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 0.0.0-streaming
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class EventsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_network_events(
        self,
        network_id: StrictStr,
        product_type: Annotated[Optional[StrictStr], Field(description="The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and environmental")] = None,
        included_event_types: Annotated[Optional[List[StrictStr]], Field(description="A list of event types. The returned events will be filtered to only include events with these types.")] = None,
        excluded_event_types: Annotated[Optional[List[StrictStr]], Field(description="A list of event types. The returned events will be filtered to exclude events with these types.")] = None,
        device_mac: Annotated[Optional[StrictStr], Field(description="The MAC address of the Meraki device which the list of events will be filtered with")] = None,
        device_serial: Annotated[Optional[StrictStr], Field(description="The serial of the Meraki device which the list of events will be filtered with")] = None,
        device_name: Annotated[Optional[StrictStr], Field(description="The name of the Meraki device which the list of events will be filtered with")] = None,
        client_ip: Annotated[Optional[StrictStr], Field(description="The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks.")] = None,
        client_mac: Annotated[Optional[StrictStr], Field(description="The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks.")] = None,
        client_name: Annotated[Optional[StrictStr], Field(description="The name, or partial name, of the client which the list of events will be filtered with")] = None,
        sm_device_mac: Annotated[Optional[StrictStr], Field(description="The MAC address of the Systems Manager device which the list of events will be filtered with")] = None,
        sm_device_name: Annotated[Optional[StrictStr], Field(description="The name of the Systems Manager device which the list of events will be filtered with")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10.")] = None,
        starting_after: Annotated[Optional[StrictStr], Field(description="A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.")] = None,
        ending_before: Annotated[Optional[StrictStr], Field(description="A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """List the events for the network

        List the events for the network

        :param network_id: (required)
        :type network_id: str
        :param product_type: The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and environmental
        :type product_type: str
        :param included_event_types: A list of event types. The returned events will be filtered to only include events with these types.
        :type included_event_types: List[str]
        :param excluded_event_types: A list of event types. The returned events will be filtered to exclude events with these types.
        :type excluded_event_types: List[str]
        :param device_mac: The MAC address of the Meraki device which the list of events will be filtered with
        :type device_mac: str
        :param device_serial: The serial of the Meraki device which the list of events will be filtered with
        :type device_serial: str
        :param device_name: The name of the Meraki device which the list of events will be filtered with
        :type device_name: str
        :param client_ip: The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks.
        :type client_ip: str
        :param client_mac: The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks.
        :type client_mac: str
        :param client_name: The name, or partial name, of the client which the list of events will be filtered with
        :type client_name: str
        :param sm_device_mac: The MAC address of the Systems Manager device which the list of events will be filtered with
        :type sm_device_mac: str
        :param sm_device_name: The name of the Systems Manager device which the list of events will be filtered with
        :type sm_device_name: str
        :param per_page: The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10.
        :type per_page: int
        :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        :type starting_after: str
        :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        :type ending_before: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_network_events_serialize(
            network_id=network_id,
            product_type=product_type,
            included_event_types=included_event_types,
            excluded_event_types=excluded_event_types,
            device_mac=device_mac,
            device_serial=device_serial,
            device_name=device_name,
            client_ip=client_ip,
            client_mac=client_mac,
            client_name=client_name,
            sm_device_mac=sm_device_mac,
            sm_device_name=sm_device_name,
            per_page=per_page,
            starting_after=starting_after,
            ending_before=ending_before,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_network_events_with_http_info(
        self,
        network_id: StrictStr,
        product_type: Annotated[Optional[StrictStr], Field(description="The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and environmental")] = None,
        included_event_types: Annotated[Optional[List[StrictStr]], Field(description="A list of event types. The returned events will be filtered to only include events with these types.")] = None,
        excluded_event_types: Annotated[Optional[List[StrictStr]], Field(description="A list of event types. The returned events will be filtered to exclude events with these types.")] = None,
        device_mac: Annotated[Optional[StrictStr], Field(description="The MAC address of the Meraki device which the list of events will be filtered with")] = None,
        device_serial: Annotated[Optional[StrictStr], Field(description="The serial of the Meraki device which the list of events will be filtered with")] = None,
        device_name: Annotated[Optional[StrictStr], Field(description="The name of the Meraki device which the list of events will be filtered with")] = None,
        client_ip: Annotated[Optional[StrictStr], Field(description="The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks.")] = None,
        client_mac: Annotated[Optional[StrictStr], Field(description="The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks.")] = None,
        client_name: Annotated[Optional[StrictStr], Field(description="The name, or partial name, of the client which the list of events will be filtered with")] = None,
        sm_device_mac: Annotated[Optional[StrictStr], Field(description="The MAC address of the Systems Manager device which the list of events will be filtered with")] = None,
        sm_device_name: Annotated[Optional[StrictStr], Field(description="The name of the Systems Manager device which the list of events will be filtered with")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10.")] = None,
        starting_after: Annotated[Optional[StrictStr], Field(description="A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.")] = None,
        ending_before: Annotated[Optional[StrictStr], Field(description="A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """List the events for the network

        List the events for the network

        :param network_id: (required)
        :type network_id: str
        :param product_type: The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and environmental
        :type product_type: str
        :param included_event_types: A list of event types. The returned events will be filtered to only include events with these types.
        :type included_event_types: List[str]
        :param excluded_event_types: A list of event types. The returned events will be filtered to exclude events with these types.
        :type excluded_event_types: List[str]
        :param device_mac: The MAC address of the Meraki device which the list of events will be filtered with
        :type device_mac: str
        :param device_serial: The serial of the Meraki device which the list of events will be filtered with
        :type device_serial: str
        :param device_name: The name of the Meraki device which the list of events will be filtered with
        :type device_name: str
        :param client_ip: The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks.
        :type client_ip: str
        :param client_mac: The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks.
        :type client_mac: str
        :param client_name: The name, or partial name, of the client which the list of events will be filtered with
        :type client_name: str
        :param sm_device_mac: The MAC address of the Systems Manager device which the list of events will be filtered with
        :type sm_device_mac: str
        :param sm_device_name: The name of the Systems Manager device which the list of events will be filtered with
        :type sm_device_name: str
        :param per_page: The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10.
        :type per_page: int
        :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        :type starting_after: str
        :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        :type ending_before: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_network_events_serialize(
            network_id=network_id,
            product_type=product_type,
            included_event_types=included_event_types,
            excluded_event_types=excluded_event_types,
            device_mac=device_mac,
            device_serial=device_serial,
            device_name=device_name,
            client_ip=client_ip,
            client_mac=client_mac,
            client_name=client_name,
            sm_device_mac=sm_device_mac,
            sm_device_name=sm_device_name,
            per_page=per_page,
            starting_after=starting_after,
            ending_before=ending_before,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_network_events_without_preload_content(
        self,
        network_id: StrictStr,
        product_type: Annotated[Optional[StrictStr], Field(description="The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and environmental")] = None,
        included_event_types: Annotated[Optional[List[StrictStr]], Field(description="A list of event types. The returned events will be filtered to only include events with these types.")] = None,
        excluded_event_types: Annotated[Optional[List[StrictStr]], Field(description="A list of event types. The returned events will be filtered to exclude events with these types.")] = None,
        device_mac: Annotated[Optional[StrictStr], Field(description="The MAC address of the Meraki device which the list of events will be filtered with")] = None,
        device_serial: Annotated[Optional[StrictStr], Field(description="The serial of the Meraki device which the list of events will be filtered with")] = None,
        device_name: Annotated[Optional[StrictStr], Field(description="The name of the Meraki device which the list of events will be filtered with")] = None,
        client_ip: Annotated[Optional[StrictStr], Field(description="The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks.")] = None,
        client_mac: Annotated[Optional[StrictStr], Field(description="The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks.")] = None,
        client_name: Annotated[Optional[StrictStr], Field(description="The name, or partial name, of the client which the list of events will be filtered with")] = None,
        sm_device_mac: Annotated[Optional[StrictStr], Field(description="The MAC address of the Systems Manager device which the list of events will be filtered with")] = None,
        sm_device_name: Annotated[Optional[StrictStr], Field(description="The name of the Systems Manager device which the list of events will be filtered with")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10.")] = None,
        starting_after: Annotated[Optional[StrictStr], Field(description="A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.")] = None,
        ending_before: Annotated[Optional[StrictStr], Field(description="A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List the events for the network

        List the events for the network

        :param network_id: (required)
        :type network_id: str
        :param product_type: The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and environmental
        :type product_type: str
        :param included_event_types: A list of event types. The returned events will be filtered to only include events with these types.
        :type included_event_types: List[str]
        :param excluded_event_types: A list of event types. The returned events will be filtered to exclude events with these types.
        :type excluded_event_types: List[str]
        :param device_mac: The MAC address of the Meraki device which the list of events will be filtered with
        :type device_mac: str
        :param device_serial: The serial of the Meraki device which the list of events will be filtered with
        :type device_serial: str
        :param device_name: The name of the Meraki device which the list of events will be filtered with
        :type device_name: str
        :param client_ip: The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks.
        :type client_ip: str
        :param client_mac: The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks.
        :type client_mac: str
        :param client_name: The name, or partial name, of the client which the list of events will be filtered with
        :type client_name: str
        :param sm_device_mac: The MAC address of the Systems Manager device which the list of events will be filtered with
        :type sm_device_mac: str
        :param sm_device_name: The name of the Systems Manager device which the list of events will be filtered with
        :type sm_device_name: str
        :param per_page: The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10.
        :type per_page: int
        :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        :type starting_after: str
        :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        :type ending_before: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_network_events_serialize(
            network_id=network_id,
            product_type=product_type,
            included_event_types=included_event_types,
            excluded_event_types=excluded_event_types,
            device_mac=device_mac,
            device_serial=device_serial,
            device_name=device_name,
            client_ip=client_ip,
            client_mac=client_mac,
            client_name=client_name,
            sm_device_mac=sm_device_mac,
            sm_device_name=sm_device_name,
            per_page=per_page,
            starting_after=starting_after,
            ending_before=ending_before,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_network_events_serialize(
        self,
        network_id,
        product_type,
        included_event_types,
        excluded_event_types,
        device_mac,
        device_serial,
        device_name,
        client_ip,
        client_mac,
        client_name,
        sm_device_mac,
        sm_device_name,
        per_page,
        starting_after,
        ending_before,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'includedEventTypes': 'csv',
            'excludedEventTypes': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if network_id is not None:
            _path_params['networkId'] = network_id
        # process the query parameters
        if product_type is not None:
            
            _query_params.append(('productType', product_type))
            
        if included_event_types is not None:
            
            _query_params.append(('includedEventTypes', included_event_types))
            
        if excluded_event_types is not None:
            
            _query_params.append(('excludedEventTypes', excluded_event_types))
            
        if device_mac is not None:
            
            _query_params.append(('deviceMac', device_mac))
            
        if device_serial is not None:
            
            _query_params.append(('deviceSerial', device_serial))
            
        if device_name is not None:
            
            _query_params.append(('deviceName', device_name))
            
        if client_ip is not None:
            
            _query_params.append(('clientIp', client_ip))
            
        if client_mac is not None:
            
            _query_params.append(('clientMac', client_mac))
            
        if client_name is not None:
            
            _query_params.append(('clientName', client_name))
            
        if sm_device_mac is not None:
            
            _query_params.append(('smDeviceMac', sm_device_mac))
            
        if sm_device_name is not None:
            
            _query_params.append(('smDeviceName', sm_device_name))
            
        if per_page is not None:
            
            _query_params.append(('perPage', per_page))
            
        if starting_after is not None:
            
            _query_params.append(('startingAfter', starting_after))
            
        if ending_before is not None:
            
            _query_params.append(('endingBefore', ending_before))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'meraki_api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/networks/{networkId}/events',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_network_events_event_types(
        self,
        network_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[object]:
        """List the event type to human-readable description

        List the event type to human-readable description

        :param network_id: (required)
        :type network_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_network_events_event_types_serialize(
            network_id=network_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[object]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_network_events_event_types_with_http_info(
        self,
        network_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[object]]:
        """List the event type to human-readable description

        List the event type to human-readable description

        :param network_id: (required)
        :type network_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_network_events_event_types_serialize(
            network_id=network_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[object]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_network_events_event_types_without_preload_content(
        self,
        network_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List the event type to human-readable description

        List the event type to human-readable description

        :param network_id: (required)
        :type network_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_network_events_event_types_serialize(
            network_id=network_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[object]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_network_events_event_types_serialize(
        self,
        network_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if network_id is not None:
            _path_params['networkId'] = network_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'meraki_api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/networks/{networkId}/events/eventTypes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 0.0.0-streaming
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr
from typing import Any, Dict, List, Optional, Union
from typing_extensions import Annotated

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class APIUsageApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_organization_api_requests(
        self,
        organization_id: StrictStr,
        t0: Annotated[Optional[StrictStr], Field(description="The beginning of the timespan for the data. The maximum lookback period is 31 days from today.")] = None,
        t1: Annotated[Optional[StrictStr], Field(description="The end of the timespan for the data. t1 can be a maximum of 31 days after t0.")] = None,
        timespan: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days.")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50.")] = None,
        starting_after: Annotated[Optional[StrictStr], Field(description="A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.")] = None,
        ending_before: Annotated[Optional[StrictStr], Field(description="A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.")] = None,
        admin_id: Annotated[Optional[StrictStr], Field(description="Filter the results by the ID of the admin who made the API requests")] = None,
        path: Annotated[Optional[StrictStr], Field(description="Filter the results by the path of the API requests")] = None,
        method: Annotated[Optional[StrictStr], Field(description="Filter the results by the method of the API requests (must be 'GET', 'PUT', 'POST' or 'DELETE')")] = None,
        response_code: Annotated[Optional[StrictInt], Field(description="Filter the results by the response code of the API requests")] = None,
        source_ip: Annotated[Optional[StrictStr], Field(description="Filter the results by the IP address of the originating API request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[object]:
        """List the API requests made by an organization

        List the API requests made by an organization

        :param organization_id: (required)
        :type organization_id: str
        :param t0: The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
        :type t0: str
        :param t1: The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
        :type t1: str
        :param timespan: The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days.
        :type timespan: float
        :param per_page: The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50.
        :type per_page: int
        :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        :type starting_after: str
        :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        :type ending_before: str
        :param admin_id: Filter the results by the ID of the admin who made the API requests
        :type admin_id: str
        :param path: Filter the results by the path of the API requests
        :type path: str
        :param method: Filter the results by the method of the API requests (must be 'GET', 'PUT', 'POST' or 'DELETE')
        :type method: str
        :param response_code: Filter the results by the response code of the API requests
        :type response_code: int
        :param source_ip: Filter the results by the IP address of the originating API request
        :type source_ip: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_organization_api_requests_serialize(
            organization_id=organization_id,
            t0=t0,
            t1=t1,
            timespan=timespan,
            per_page=per_page,
            starting_after=starting_after,
            ending_before=ending_before,
            admin_id=admin_id,
            path=path,
            method=method,
            response_code=response_code,
            source_ip=source_ip,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[object]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_organization_api_requests_with_http_info(
        self,
        organization_id: StrictStr,
        t0: Annotated[Optional[StrictStr], Field(description="The beginning of the timespan for the data. The maximum lookback period is 31 days from today.")] = None,
        t1: Annotated[Optional[StrictStr], Field(description="The end of the timespan for the data. t1 can be a maximum of 31 days after t0.")] = None,
        timespan: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days.")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50.")] = None,
        starting_after: Annotated[Optional[StrictStr], Field(description="A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.")] = None,
        ending_before: Annotated[Optional[StrictStr], Field(description="A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.")] = None,
        admin_id: Annotated[Optional[StrictStr], Field(description="Filter the results by the ID of the admin who made the API requests")] = None,
        path: Annotated[Optional[StrictStr], Field(description="Filter the results by the path of the API requests")] = None,
        method: Annotated[Optional[StrictStr], Field(description="Filter the results by the method of the API requests (must be 'GET', 'PUT', 'POST' or 'DELETE')")] = None,
        response_code: Annotated[Optional[StrictInt], Field(description="Filter the results by the response code of the API requests")] = None,
        source_ip: Annotated[Optional[StrictStr], Field(description="Filter the results by the IP address of the originating API request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[object]]:
        """List the API requests made by an organization

        List the API requests made by an organization

        :param organization_id: (required)
        :type organization_id: str
        :param t0: The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
        :type t0: str
        :param t1: The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
        :type t1: str
        :param timespan: The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days.
        :type timespan: float
        :param per_page: The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50.
        :type per_page: int
        :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        :type starting_after: str
        :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        :type ending_before: str
        :param admin_id: Filter the results by the ID of the admin who made the API requests
        :type admin_id: str
        :param path: Filter the results by the path of the API requests
        :type path: str
        :param method: Filter the results by the method of the API requests (must be 'GET', 'PUT', 'POST' or 'DELETE')
        :type method: str
        :param response_code: Filter the results by the response code of the API requests
        :type response_code: int
        :param source_ip: Filter the results by the IP address of the originating API request
        :type source_ip: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_organization_api_requests_serialize(
            organization_id=organization_id,
            t0=t0,
            t1=t1,
            timespan=timespan,
            per_page=per_page,
            starting_after=starting_after,
            ending_before=ending_before,
            admin_id=admin_id,
            path=path,
            method=method,
            response_code=response_code,
            source_ip=source_ip,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[object]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_organization_api_requests_without_preload_content(
        self,
        organization_id: StrictStr,
        t0: Annotated[Optional[StrictStr], Field(description="The beginning of the timespan for the data. The maximum lookback period is 31 days from today.")] = None,
        t1: Annotated[Optional[StrictStr], Field(description="The end of the timespan for the data. t1 can be a maximum of 31 days after t0.")] = None,
        timespan: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days.")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50.")] = None,
        starting_after: Annotated[Optional[StrictStr], Field(description="A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.")] = None,
        ending_before: Annotated[Optional[StrictStr], Field(description="A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.")] = None,
        admin_id: Annotated[Optional[StrictStr], Field(description="Filter the results by the ID of the admin who made the API requests")] = None,
        path: Annotated[Optional[StrictStr], Field(description="Filter the results by the path of the API requests")] = None,
        method: Annotated[Optional[StrictStr], Field(description="Filter the results by the method of the API requests (must be 'GET', 'PUT', 'POST' or 'DELETE')")] = None,
        response_code: Annotated[Optional[StrictInt], Field(description="Filter the results by the response code of the API requests")] = None,
        source_ip: Annotated[Optional[StrictStr], Field(description="Filter the results by the IP address of the originating API request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List the API requests made by an organization

        List the API requests made by an organization

        :param organization_id: (required)
        :type organization_id: str
        :param t0: The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
        :type t0: str
        :param t1: The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
        :type t1: str
        :param timespan: The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days.
        :type timespan: float
        :param per_page: The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50.
        :type per_page: int
        :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        :type starting_after: str
        :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        :type ending_before: str
        :param admin_id: Filter the results by the ID of the admin who made the API requests
        :type admin_id: str
        :param path: Filter the results by the path of the API requests
        :type path: str
        :param method: Filter the results by the method of the API requests (must be 'GET', 'PUT', 'POST' or 'DELETE')
        :type method: str
        :param response_code: Filter the results by the response code of the API requests
        :type response_code: int
        :param source_ip: Filter the results by the IP address of the originating API request
        :type source_ip: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_organization_api_requests_serialize(
            organization_id=organization_id,
            t0=t0,
            t1=t1,
            timespan=timespan,
            per_page=per_page,
            starting_after=starting_after,
            ending_before=ending_before,
            admin_id=admin_id,
            path=path,
            method=method,
            response_code=response_code,
            source_ip=source_ip,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[object]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_organization_api_requests_serialize(
        self,
        organization_id,
        t0,
        t1,
        timespan,
        per_page,
        starting_after,
        ending_before,
        admin_id,
        path,
        method,
        response_code,
        source_ip,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params['organizationId'] = organization_id
        # process the query parameters
        if t0 is not None:
            
            _query_params.append(('t0', t0))
            
        if t1 is not None:
            
            _query_params.append(('t1', t1))
            
        if timespan is not None:
            
            _query_params.append(('timespan', timespan))
            
        if per_page is not None:
            
            _query_params.append(('perPage', per_page))
            
        if starting_after is not None:
            
            _query_params.append(('startingAfter', starting_after))
            
        if ending_before is not None:
            
            _query_params.append(('endingBefore', ending_before))
            
        if admin_id is not None:
            
            _query_params.append(('adminId', admin_id))
            
        if path is not None:
            
            _query_params.append(('path', path))
            
        if method is not None:
            
            _query_params.append(('method', method))
            
        if response_code is not None:
            
            _query_params.append(('responseCode', response_code))
            
        if source_ip is not None:
            
            _query_params.append(('sourceIp', source_ip))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'meraki_api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/organizations/{organizationId}/apiRequests',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_organization_api_requests_overview(
        self,
        organization_id: StrictStr,
        t0: Annotated[Optional[StrictStr], Field(description="The beginning of the timespan for the data. The maximum lookback period is 31 days from today.")] = None,
        t1: Annotated[Optional[StrictStr], Field(description="The end of the timespan for the data. t1 can be a maximum of 31 days after t0.")] = None,
        timespan: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Return an aggregated overview of API requests data

        Return an aggregated overview of API requests data

        :param organization_id: (required)
        :type organization_id: str
        :param t0: The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
        :type t0: str
        :param t1: The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
        :type t1: str
        :param timespan: The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days.
        :type timespan: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_organization_api_requests_overview_serialize(
            organization_id=organization_id,
            t0=t0,
            t1=t1,
            timespan=timespan,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_organization_api_requests_overview_with_http_info(
        self,
        organization_id: StrictStr,
        t0: Annotated[Optional[StrictStr], Field(description="The beginning of the timespan for the data. The maximum lookback period is 31 days from today.")] = None,
        t1: Annotated[Optional[StrictStr], Field(description="The end of the timespan for the data. t1 can be a maximum of 31 days after t0.")] = None,
        timespan: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Return an aggregated overview of API requests data

        Return an aggregated overview of API requests data

        :param organization_id: (required)
        :type organization_id: str
        :param t0: The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
        :type t0: str
        :param t1: The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
        :type t1: str
        :param timespan: The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days.
        :type timespan: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_organization_api_requests_overview_serialize(
            organization_id=organization_id,
            t0=t0,
            t1=t1,
            timespan=timespan,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_organization_api_requests_overview_without_preload_content(
        self,
        organization_id: StrictStr,
        t0: Annotated[Optional[StrictStr], Field(description="The beginning of the timespan for the data. The maximum lookback period is 31 days from today.")] = None,
        t1: Annotated[Optional[StrictStr], Field(description="The end of the timespan for the data. t1 can be a maximum of 31 days after t0.")] = None,
        timespan: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return an aggregated overview of API requests data

        Return an aggregated overview of API requests data

        :param organization_id: (required)
        :type organization_id: str
        :param t0: The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
        :type t0: str
        :param t1: The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
        :type t1: str
        :param timespan: The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days.
        :type timespan: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_organization_api_requests_overview_serialize(
            organization_id=organization_id,
            t0=t0,
            t1=t1,
            timespan=timespan,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_organization_api_requests_overview_serialize(
        self,
        organization_id,
        t0,
        t1,
        timespan,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params['organizationId'] = organization_id
        # process the query parameters
        if t0 is not None:
            
            _query_params.append(('t0', t0))
            
        if t1 is not None:
            
            _query_params.append(('t1', t1))
            
        if timespan is not None:
            
            _query_params.append(('timespan', timespan))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'meraki_api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/organizations/{organizationId}/apiRequests/overview',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



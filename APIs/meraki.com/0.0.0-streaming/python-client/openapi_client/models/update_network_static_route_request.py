# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 0.0.0-streaming
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.update_network_static_route_request_reserved_ip_ranges_inner import UpdateNetworkStaticRouteRequestReservedIpRangesInner
from typing import Optional, Set
from typing_extensions import Self

class UpdateNetworkStaticRouteRequest(BaseModel):
    """
    UpdateNetworkStaticRouteRequest
    """ # noqa: E501
    enabled: Optional[StrictBool] = Field(default=None, description="The enabled state of the static route")
    fixed_ip_assignments: Optional[Dict[str, Any]] = Field(default=None, description="The DHCP fixed IP assignments on the static route. This should be an object that contains mappings from MAC addresses to objects that themselves each contain \"ip\" and \"name\" string fields. See the sample request/response for more details.", alias="fixedIpAssignments")
    gateway_ip: Optional[StrictStr] = Field(default=None, description="The gateway IP (next hop) of the static route", alias="gatewayIp")
    name: Optional[StrictStr] = Field(default=None, description="The name of the static route")
    reserved_ip_ranges: Optional[List[UpdateNetworkStaticRouteRequestReservedIpRangesInner]] = Field(default=None, description="The DHCP reserved IP ranges on the static route", alias="reservedIpRanges")
    subnet: Optional[StrictStr] = Field(default=None, description="The subnet of the static route")
    __properties: ClassVar[List[str]] = ["enabled", "fixedIpAssignments", "gatewayIp", "name", "reservedIpRanges", "subnet"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateNetworkStaticRouteRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in reserved_ip_ranges (list)
        _items = []
        if self.reserved_ip_ranges:
            for _item_reserved_ip_ranges in self.reserved_ip_ranges:
                if _item_reserved_ip_ranges:
                    _items.append(_item_reserved_ip_ranges.to_dict())
            _dict['reservedIpRanges'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateNetworkStaticRouteRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled"),
            "fixedIpAssignments": obj.get("fixedIpAssignments"),
            "gatewayIp": obj.get("gatewayIp"),
            "name": obj.get("name"),
            "reservedIpRanges": [UpdateNetworkStaticRouteRequestReservedIpRangesInner.from_dict(_item) for _item in obj["reservedIpRanges"]] if obj.get("reservedIpRanges") is not None else None,
            "subnet": obj.get("subnet")
        })
        return _obj



# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 0.0.0-streaming
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.update_network_one_to_one_nat_rules_request_rules_inner_allowed_inbound_inner import UpdateNetworkOneToOneNatRulesRequestRulesInnerAllowedInboundInner
from typing import Optional, Set
from typing_extensions import Self

class UpdateNetworkOneToOneNatRulesRequestRulesInner(BaseModel):
    """
    UpdateNetworkOneToOneNatRulesRequestRulesInner
    """ # noqa: E501
    allowed_inbound: Optional[List[UpdateNetworkOneToOneNatRulesRequestRulesInnerAllowedInboundInner]] = Field(default=None, description="The ports this mapping will provide access on, and the remote IPs that will be allowed access to the resource", alias="allowedInbound")
    lan_ip: StrictStr = Field(description="The IP address of the server or device that hosts the internal resource that you wish to make available on the WAN", alias="lanIp")
    name: Optional[StrictStr] = Field(default=None, description="A descriptive name for the rule")
    public_ip: Optional[StrictStr] = Field(default=None, description="The IP address that will be used to access the internal resource from the WAN", alias="publicIp")
    uplink: Optional[StrictStr] = Field(default=None, description="The physical WAN interface on which the traffic will arrive ('internet1' or, if available, 'internet2')")
    __properties: ClassVar[List[str]] = ["allowedInbound", "lanIp", "name", "publicIp", "uplink"]

    @field_validator('uplink')
    def uplink_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['internet1', 'internet2']):
            raise ValueError("must be one of enum values ('internet1', 'internet2')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateNetworkOneToOneNatRulesRequestRulesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in allowed_inbound (list)
        _items = []
        if self.allowed_inbound:
            for _item_allowed_inbound in self.allowed_inbound:
                if _item_allowed_inbound:
                    _items.append(_item_allowed_inbound.to_dict())
            _dict['allowedInbound'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateNetworkOneToOneNatRulesRequestRulesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedInbound": [UpdateNetworkOneToOneNatRulesRequestRulesInnerAllowedInboundInner.from_dict(_item) for _item in obj["allowedInbound"]] if obj.get("allowedInbound") is not None else None,
            "lanIp": obj.get("lanIp"),
            "name": obj.get("name"),
            "publicIp": obj.get("publicIp"),
            "uplink": obj.get("uplink")
        })
        return _obj



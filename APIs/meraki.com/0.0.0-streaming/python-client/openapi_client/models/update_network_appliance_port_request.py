# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 0.0.0-streaming
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateNetworkAppliancePortRequest(BaseModel):
    """
    UpdateNetworkAppliancePortRequest
    """ # noqa: E501
    access_policy: Optional[StrictStr] = Field(default=None, description="The name of the policy. Only applicable to Access ports. Valid values are: 'open', '8021x-radius', 'mac-radius', 'hybris-radius' for MX64 or Z3 or any MX supporting the per port authentication feature. Otherwise, 'open' is the only valid value and 'open' is the default value if the field is missing.", alias="accessPolicy")
    allowed_vlans: Optional[StrictStr] = Field(default=None, description="Comma-delimited list of the VLAN ID's allowed on the port, or 'all' to permit all VLAN's on the port.", alias="allowedVlans")
    drop_untagged_traffic: Optional[StrictBool] = Field(default=None, description="Trunk port can Drop all Untagged traffic. When true, no VLAN is required. Access ports cannot have dropUntaggedTraffic set to true.", alias="dropUntaggedTraffic")
    enabled: Optional[StrictBool] = Field(default=None, description="The status of the port")
    type: Optional[StrictStr] = Field(default=None, description="The type of the port: 'access' or 'trunk'.")
    vlan: Optional[StrictInt] = Field(default=None, description="Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode.")
    __properties: ClassVar[List[str]] = ["accessPolicy", "allowedVlans", "dropUntaggedTraffic", "enabled", "type", "vlan"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateNetworkAppliancePortRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateNetworkAppliancePortRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessPolicy": obj.get("accessPolicy"),
            "allowedVlans": obj.get("allowedVlans"),
            "dropUntaggedTraffic": obj.get("dropUntaggedTraffic"),
            "enabled": obj.get("enabled"),
            "type": obj.get("type"),
            "vlan": obj.get("vlan")
        })
        return _obj



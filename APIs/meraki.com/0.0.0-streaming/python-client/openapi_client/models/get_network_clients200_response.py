# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 0.0.0-streaming
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_network_clients200_response_usage import GetNetworkClients200ResponseUsage
from typing import Optional, Set
from typing_extensions import Self

class GetNetworkClients200Response(BaseModel):
    """
    GetNetworkClients200Response
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Short description of the client")
    first_seen: Optional[StrictInt] = Field(default=None, description="Timestamp client was first seen in the network", alias="firstSeen")
    group_policy8021x: Optional[StrictStr] = Field(default=None, description="802.1x group policy of the client", alias="groupPolicy8021x")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the client")
    ip: Optional[StrictStr] = Field(default=None, description="The IP address of the client")
    ip6: Optional[StrictStr] = Field(default=None, description="The IPv6 address of the client")
    ip6_local: Optional[StrictStr] = Field(default=None, description="Local IPv6 address of the client", alias="ip6Local")
    last_seen: Optional[StrictInt] = Field(default=None, description="Timestamp client was last seen in the network", alias="lastSeen")
    mac: Optional[StrictStr] = Field(default=None, description="The MAC address of the client")
    manufacturer: Optional[StrictStr] = Field(default=None, description="Manufacturer of the client")
    notes: Optional[StrictStr] = Field(default=None, description="Notes on the client")
    os: Optional[StrictStr] = Field(default=None, description="The operating system of the client")
    recent_device_mac: Optional[StrictStr] = Field(default=None, description="The MAC address of the node that the device was last connected to", alias="recentDeviceMac")
    recent_device_name: Optional[StrictStr] = Field(default=None, description="The name of the node the device was last connected to", alias="recentDeviceName")
    recent_device_serial: Optional[StrictStr] = Field(default=None, description="The serial of the node the device was last connected to", alias="recentDeviceSerial")
    sm_installed: Optional[StrictBool] = Field(default=None, description="Status of SM for the client", alias="smInstalled")
    ssid: Optional[StrictStr] = Field(default=None, description="The name of the SSID that the client is connected to")
    status: Optional[StrictStr] = Field(default=None, description="The connection status of the client")
    switchport: Optional[StrictStr] = Field(default=None, description="The switch port that the client is connected to")
    usage: Optional[GetNetworkClients200ResponseUsage] = None
    user: Optional[StrictStr] = Field(default=None, description="The username of the user of the client")
    vlan: Optional[StrictStr] = Field(default=None, description="The name of the VLAN that the client is connected to")
    __properties: ClassVar[List[str]] = ["description", "firstSeen", "groupPolicy8021x", "id", "ip", "ip6", "ip6Local", "lastSeen", "mac", "manufacturer", "notes", "os", "recentDeviceMac", "recentDeviceName", "recentDeviceSerial", "smInstalled", "ssid", "status", "switchport", "usage", "user", "vlan"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Offline', 'Online']):
            raise ValueError("must be one of enum values ('Offline', 'Online')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetNetworkClients200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of usage
        if self.usage:
            _dict['usage'] = self.usage.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetNetworkClients200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "firstSeen": obj.get("firstSeen"),
            "groupPolicy8021x": obj.get("groupPolicy8021x"),
            "id": obj.get("id"),
            "ip": obj.get("ip"),
            "ip6": obj.get("ip6"),
            "ip6Local": obj.get("ip6Local"),
            "lastSeen": obj.get("lastSeen"),
            "mac": obj.get("mac"),
            "manufacturer": obj.get("manufacturer"),
            "notes": obj.get("notes"),
            "os": obj.get("os"),
            "recentDeviceMac": obj.get("recentDeviceMac"),
            "recentDeviceName": obj.get("recentDeviceName"),
            "recentDeviceSerial": obj.get("recentDeviceSerial"),
            "smInstalled": obj.get("smInstalled"),
            "ssid": obj.get("ssid"),
            "status": obj.get("status"),
            "switchport": obj.get("switchport"),
            "usage": GetNetworkClients200ResponseUsage.from_dict(obj["usage"]) if obj.get("usage") is not None else None,
            "user": obj.get("user"),
            "vlan": obj.get("vlan")
        })
        return _obj



# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 0.0.0-streaming
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateOrganizationVpnFirewallRulesRequestRulesInner(BaseModel):
    """
    UpdateOrganizationVpnFirewallRulesRequestRulesInner
    """ # noqa: E501
    comment: Optional[StrictStr] = Field(default=None, description="Description of the rule (optional)")
    dest_cidr: StrictStr = Field(description="Comma-separated list of destination IP address(es) (in IP or CIDR notation) or 'any' (FQDN not supported)", alias="destCidr")
    dest_port: Optional[StrictStr] = Field(default=None, description="Comma-separated list of destination port(s) (integer in the range 1-65535), or 'any'", alias="destPort")
    policy: StrictStr = Field(description="'allow' or 'deny' traffic specified by this rule")
    protocol: StrictStr = Field(description="The type of protocol (must be 'tcp', 'udp', 'icmp', 'icmp6' or 'any')")
    src_cidr: StrictStr = Field(description="Comma-separated list of source IP address(es) (in IP or CIDR notation), or 'any' (FQDN not supported)", alias="srcCidr")
    src_port: Optional[StrictStr] = Field(default=None, description="Comma-separated list of source port(s) (integer in the range 1-65535), or 'any'", alias="srcPort")
    syslog_enabled: Optional[StrictBool] = Field(default=None, description="Log this rule to syslog (true or false, boolean value) - only applicable if a syslog has been configured (optional)", alias="syslogEnabled")
    __properties: ClassVar[List[str]] = ["comment", "destCidr", "destPort", "policy", "protocol", "srcCidr", "srcPort", "syslogEnabled"]

    @field_validator('policy')
    def policy_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['allow', 'deny']):
            raise ValueError("must be one of enum values ('allow', 'deny')")
        return value

    @field_validator('protocol')
    def protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['any', 'icmp', 'icmp6', 'tcp', 'udp']):
            raise ValueError("must be one of enum values ('any', 'icmp', 'icmp6', 'tcp', 'udp')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateOrganizationVpnFirewallRulesRequestRulesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateOrganizationVpnFirewallRulesRequestRulesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comment": obj.get("comment"),
            "destCidr": obj.get("destCidr"),
            "destPort": obj.get("destPort"),
            "policy": obj.get("policy"),
            "protocol": obj.get("protocol"),
            "srcCidr": obj.get("srcCidr"),
            "srcPort": obj.get("srcPort"),
            "syslogEnabled": obj.get("syslogEnabled")
        })
        return _obj



# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 0.0.0-streaming
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.update_network_security_malware_settings_request_allowed_files_inner import UpdateNetworkSecurityMalwareSettingsRequestAllowedFilesInner
from openapi_client.models.update_network_security_malware_settings_request_allowed_urls_inner import UpdateNetworkSecurityMalwareSettingsRequestAllowedUrlsInner
from typing import Optional, Set
from typing_extensions import Self

class UpdateNetworkSecurityMalwareSettingsRequest(BaseModel):
    """
    UpdateNetworkSecurityMalwareSettingsRequest
    """ # noqa: E501
    allowed_files: Optional[List[UpdateNetworkSecurityMalwareSettingsRequestAllowedFilesInner]] = Field(default=None, description="The sha256 digests of files that should be permitted by the malware detection engine. If omitted, the current config will remain unchanged. This is available only if your network supports AMP allow listing", alias="allowedFiles")
    allowed_urls: Optional[List[UpdateNetworkSecurityMalwareSettingsRequestAllowedUrlsInner]] = Field(default=None, description="The urls that should be permitted by the malware detection engine. If omitted, the current config will remain unchanged. This is available only if your network supports AMP allow listing", alias="allowedUrls")
    mode: StrictStr = Field(description="Set mode to 'enabled' to enable malware prevention, otherwise 'disabled'")
    __properties: ClassVar[List[str]] = ["allowedFiles", "allowedUrls", "mode"]

    @field_validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['disabled', 'enabled']):
            raise ValueError("must be one of enum values ('disabled', 'enabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateNetworkSecurityMalwareSettingsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in allowed_files (list)
        _items = []
        if self.allowed_files:
            for _item_allowed_files in self.allowed_files:
                if _item_allowed_files:
                    _items.append(_item_allowed_files.to_dict())
            _dict['allowedFiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in allowed_urls (list)
        _items = []
        if self.allowed_urls:
            for _item_allowed_urls in self.allowed_urls:
                if _item_allowed_urls:
                    _items.append(_item_allowed_urls.to_dict())
            _dict['allowedUrls'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateNetworkSecurityMalwareSettingsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedFiles": [UpdateNetworkSecurityMalwareSettingsRequestAllowedFilesInner.from_dict(_item) for _item in obj["allowedFiles"]] if obj.get("allowedFiles") is not None else None,
            "allowedUrls": [UpdateNetworkSecurityMalwareSettingsRequestAllowedUrlsInner.from_dict(_item) for _item in obj["allowedUrls"]] if obj.get("allowedUrls") is not None else None,
            "mode": obj.get("mode")
        })
        return _obj



# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 0.0.0-streaming
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.create_network_camera_quality_retention_profile_request_video_settings_mv12_mv22_mv72 import CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV12MV22MV72
from openapi_client.models.create_network_camera_quality_retention_profile_request_video_settings_mv12_we import CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV12WE
from openapi_client.models.create_network_camera_quality_retention_profile_request_video_settings_mv13 import CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV13
from openapi_client.models.create_network_camera_quality_retention_profile_request_video_settings_mv21_mv71 import CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV21MV71
from openapi_client.models.create_network_camera_quality_retention_profile_request_video_settings_mv22_xmv72_x import CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV22XMV72X
from openapi_client.models.create_network_camera_quality_retention_profile_request_video_settings_mv32 import CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV32
from openapi_client.models.create_network_camera_quality_retention_profile_request_video_settings_mv33 import CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV33
from openapi_client.models.create_network_camera_quality_retention_profile_request_video_settings_mv52 import CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV52
from openapi_client.models.create_network_camera_quality_retention_profile_request_video_settings_mv63 import CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV63
from openapi_client.models.create_network_camera_quality_retention_profile_request_video_settings_mv63_x import CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV63X
from openapi_client.models.create_network_camera_quality_retention_profile_request_video_settings_mv93 import CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV93
from openapi_client.models.create_network_camera_quality_retention_profile_request_video_settings_mv93_x import CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV93X
from typing import Optional, Set
from typing_extensions import Self

class CreateNetworkCameraQualityRetentionProfileRequestVideoSettings(BaseModel):
    """
    Video quality and resolution settings for all the camera models.
    """ # noqa: E501
    mv12_mv22_mv72: Optional[CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV12MV22MV72] = Field(default=None, alias="MV12/MV22/MV72")
    mv12_we: Optional[CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV12WE] = Field(default=None, alias="MV12WE")
    mv13: Optional[CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV13] = Field(default=None, alias="MV13")
    mv21_mv71: Optional[CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV21MV71] = Field(default=None, alias="MV21/MV71")
    mv22_x_mv72_x: Optional[CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV22XMV72X] = Field(default=None, alias="MV22X/MV72X")
    mv32: Optional[CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV32] = Field(default=None, alias="MV32")
    mv33: Optional[CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV33] = Field(default=None, alias="MV33")
    mv52: Optional[CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV52] = Field(default=None, alias="MV52")
    mv63: Optional[CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV63] = Field(default=None, alias="MV63")
    mv63_x: Optional[CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV63X] = Field(default=None, alias="MV63X")
    mv93: Optional[CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV93] = Field(default=None, alias="MV93")
    mv93_x: Optional[CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV93X] = Field(default=None, alias="MV93X")
    __properties: ClassVar[List[str]] = ["MV12/MV22/MV72", "MV12WE", "MV13", "MV21/MV71", "MV22X/MV72X", "MV32", "MV33", "MV52", "MV63", "MV63X", "MV93", "MV93X"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateNetworkCameraQualityRetentionProfileRequestVideoSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of mv12_mv22_mv72
        if self.mv12_mv22_mv72:
            _dict['MV12/MV22/MV72'] = self.mv12_mv22_mv72.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mv12_we
        if self.mv12_we:
            _dict['MV12WE'] = self.mv12_we.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mv13
        if self.mv13:
            _dict['MV13'] = self.mv13.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mv21_mv71
        if self.mv21_mv71:
            _dict['MV21/MV71'] = self.mv21_mv71.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mv22_x_mv72_x
        if self.mv22_x_mv72_x:
            _dict['MV22X/MV72X'] = self.mv22_x_mv72_x.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mv32
        if self.mv32:
            _dict['MV32'] = self.mv32.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mv33
        if self.mv33:
            _dict['MV33'] = self.mv33.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mv52
        if self.mv52:
            _dict['MV52'] = self.mv52.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mv63
        if self.mv63:
            _dict['MV63'] = self.mv63.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mv63_x
        if self.mv63_x:
            _dict['MV63X'] = self.mv63_x.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mv93
        if self.mv93:
            _dict['MV93'] = self.mv93.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mv93_x
        if self.mv93_x:
            _dict['MV93X'] = self.mv93_x.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateNetworkCameraQualityRetentionProfileRequestVideoSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "MV12/MV22/MV72": CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV12MV22MV72.from_dict(obj["MV12/MV22/MV72"]) if obj.get("MV12/MV22/MV72") is not None else None,
            "MV12WE": CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV12WE.from_dict(obj["MV12WE"]) if obj.get("MV12WE") is not None else None,
            "MV13": CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV13.from_dict(obj["MV13"]) if obj.get("MV13") is not None else None,
            "MV21/MV71": CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV21MV71.from_dict(obj["MV21/MV71"]) if obj.get("MV21/MV71") is not None else None,
            "MV22X/MV72X": CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV22XMV72X.from_dict(obj["MV22X/MV72X"]) if obj.get("MV22X/MV72X") is not None else None,
            "MV32": CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV32.from_dict(obj["MV32"]) if obj.get("MV32") is not None else None,
            "MV33": CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV33.from_dict(obj["MV33"]) if obj.get("MV33") is not None else None,
            "MV52": CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV52.from_dict(obj["MV52"]) if obj.get("MV52") is not None else None,
            "MV63": CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV63.from_dict(obj["MV63"]) if obj.get("MV63") is not None else None,
            "MV63X": CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV63X.from_dict(obj["MV63X"]) if obj.get("MV63X") is not None else None,
            "MV93": CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV93.from_dict(obj["MV93"]) if obj.get("MV93") is not None else None,
            "MV93X": CreateNetworkCameraQualityRetentionProfileRequestVideoSettingsMV93X.from_dict(obj["MV93X"]) if obj.get("MV93X") is not None else None
        })
        return _obj



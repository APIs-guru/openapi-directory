# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 0.0.0-streaming
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateNetworkWirelessSettingsRequest(BaseModel):
    """
    UpdateNetworkWirelessSettingsRequest
    """ # noqa: E501
    ipv6_bridge_enabled: Optional[StrictBool] = Field(default=None, description="Toggle for enabling or disabling IPv6 bridging in a network (Note: if enabled, SSIDs must also be configured to use bridge mode)", alias="ipv6BridgeEnabled")
    led_lights_on: Optional[StrictBool] = Field(default=None, description="Toggle for enabling or disabling LED lights on all APs in the network (making them run dark)", alias="ledLightsOn")
    location_analytics_enabled: Optional[StrictBool] = Field(default=None, description="Toggle for enabling or disabling location analytics for your network", alias="locationAnalyticsEnabled")
    meshing_enabled: Optional[StrictBool] = Field(default=None, description="Toggle for enabling or disabling meshing in a network", alias="meshingEnabled")
    upgrade_strategy: Optional[StrictStr] = Field(default=None, description="The upgrade strategy to apply to the network. Must be one of 'minimizeUpgradeTime' or 'minimizeClientDowntime'. Requires firmware version MR 26.8 or higher'", alias="upgradeStrategy")
    __properties: ClassVar[List[str]] = ["ipv6BridgeEnabled", "ledLightsOn", "locationAnalyticsEnabled", "meshingEnabled", "upgradeStrategy"]

    @field_validator('upgrade_strategy')
    def upgrade_strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['minimizeClientDowntime', 'minimizeUpgradeTime']):
            raise ValueError("must be one of enum values ('minimizeClientDowntime', 'minimizeUpgradeTime')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateNetworkWirelessSettingsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateNetworkWirelessSettingsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ipv6BridgeEnabled": obj.get("ipv6BridgeEnabled"),
            "ledLightsOn": obj.get("ledLightsOn"),
            "locationAnalyticsEnabled": obj.get("locationAnalyticsEnabled"),
            "meshingEnabled": obj.get("meshingEnabled"),
            "upgradeStrategy": obj.get("upgradeStrategy")
        })
        return _obj



# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 0.0.0-streaming
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateNetworkPiiRequestRequest(BaseModel):
    """
    CreateNetworkPiiRequestRequest
    """ # noqa: E501
    datasets: Optional[List[StrictStr]] = Field(default=None, description="The datasets related to the provided key that should be deleted. Only applies to \"delete\" requests. The value \"all\" will be expanded to all datasets applicable to this type. The datasets by applicable to each type are: mac (usage, events, traffic), email (users, loginAttempts), username (users, loginAttempts), bluetoothMac (client, connectivity), smDeviceId (device), smUserId (user)")
    email: Optional[StrictStr] = Field(default=None, description="The email of a network user account. Only applies to \"delete\" requests.")
    mac: Optional[StrictStr] = Field(default=None, description="The MAC of a network client device. Applies to both \"restrict processing\" and \"delete\" requests.")
    sm_device_id: Optional[StrictStr] = Field(default=None, description="The sm_device_id of a Systems Manager device. The only way to \"restrict processing\" or \"delete\" a Systems Manager device. Must include \"device\" in the dataset for a \"delete\" request to destroy the device.", alias="smDeviceId")
    sm_user_id: Optional[StrictStr] = Field(default=None, description="The sm_user_id of a Systems Manager user. The only way to \"restrict processing\" or \"delete\" a Systems Manager user. Must include \"user\" in the dataset for a \"delete\" request to destroy the user.", alias="smUserId")
    type: Optional[StrictStr] = Field(default=None, description="One of \"delete\" or \"restrict processing\"")
    username: Optional[StrictStr] = Field(default=None, description="The username of a network log in. Only applies to \"delete\" requests.")
    __properties: ClassVar[List[str]] = ["datasets", "email", "mac", "smDeviceId", "smUserId", "type", "username"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['delete', 'restrict processing']):
            raise ValueError("must be one of enum values ('delete', 'restrict processing')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateNetworkPiiRequestRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateNetworkPiiRequestRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "datasets": obj.get("datasets"),
            "email": obj.get("email"),
            "mac": obj.get("mac"),
            "smDeviceId": obj.get("smDeviceId"),
            "smUserId": obj.get("smUserId"),
            "type": obj.get("type"),
            "username": obj.get("username")
        })
        return _obj



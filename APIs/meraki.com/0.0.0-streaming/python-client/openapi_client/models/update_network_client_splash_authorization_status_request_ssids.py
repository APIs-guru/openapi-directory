# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 0.0.0-streaming
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.update_network_client_splash_authorization_status_request_ssids0 import UpdateNetworkClientSplashAuthorizationStatusRequestSsids0
from openapi_client.models.update_network_client_splash_authorization_status_request_ssids1 import UpdateNetworkClientSplashAuthorizationStatusRequestSsids1
from openapi_client.models.update_network_client_splash_authorization_status_request_ssids10 import UpdateNetworkClientSplashAuthorizationStatusRequestSsids10
from openapi_client.models.update_network_client_splash_authorization_status_request_ssids11 import UpdateNetworkClientSplashAuthorizationStatusRequestSsids11
from openapi_client.models.update_network_client_splash_authorization_status_request_ssids12 import UpdateNetworkClientSplashAuthorizationStatusRequestSsids12
from openapi_client.models.update_network_client_splash_authorization_status_request_ssids13 import UpdateNetworkClientSplashAuthorizationStatusRequestSsids13
from openapi_client.models.update_network_client_splash_authorization_status_request_ssids14 import UpdateNetworkClientSplashAuthorizationStatusRequestSsids14
from openapi_client.models.update_network_client_splash_authorization_status_request_ssids2 import UpdateNetworkClientSplashAuthorizationStatusRequestSsids2
from openapi_client.models.update_network_client_splash_authorization_status_request_ssids3 import UpdateNetworkClientSplashAuthorizationStatusRequestSsids3
from openapi_client.models.update_network_client_splash_authorization_status_request_ssids4 import UpdateNetworkClientSplashAuthorizationStatusRequestSsids4
from openapi_client.models.update_network_client_splash_authorization_status_request_ssids5 import UpdateNetworkClientSplashAuthorizationStatusRequestSsids5
from openapi_client.models.update_network_client_splash_authorization_status_request_ssids6 import UpdateNetworkClientSplashAuthorizationStatusRequestSsids6
from openapi_client.models.update_network_client_splash_authorization_status_request_ssids7 import UpdateNetworkClientSplashAuthorizationStatusRequestSsids7
from openapi_client.models.update_network_client_splash_authorization_status_request_ssids8 import UpdateNetworkClientSplashAuthorizationStatusRequestSsids8
from openapi_client.models.update_network_client_splash_authorization_status_request_ssids9 import UpdateNetworkClientSplashAuthorizationStatusRequestSsids9
from typing import Optional, Set
from typing_extensions import Self

class UpdateNetworkClientSplashAuthorizationStatusRequestSsids(BaseModel):
    """
    The target SSIDs. Each SSID must be enabled and must have Click-through splash enabled. For each SSID where isAuthorized is true, the expiration time will automatically be set according to the SSID's splash frequency. Not all networks support configuring all SSIDs
    """ # noqa: E501
    var_0: Optional[UpdateNetworkClientSplashAuthorizationStatusRequestSsids0] = Field(default=None, alias="0")
    var_1: Optional[UpdateNetworkClientSplashAuthorizationStatusRequestSsids1] = Field(default=None, alias="1")
    var_2: Optional[UpdateNetworkClientSplashAuthorizationStatusRequestSsids2] = Field(default=None, alias="2")
    var_3: Optional[UpdateNetworkClientSplashAuthorizationStatusRequestSsids3] = Field(default=None, alias="3")
    var_4: Optional[UpdateNetworkClientSplashAuthorizationStatusRequestSsids4] = Field(default=None, alias="4")
    var_5: Optional[UpdateNetworkClientSplashAuthorizationStatusRequestSsids5] = Field(default=None, alias="5")
    var_6: Optional[UpdateNetworkClientSplashAuthorizationStatusRequestSsids6] = Field(default=None, alias="6")
    var_7: Optional[UpdateNetworkClientSplashAuthorizationStatusRequestSsids7] = Field(default=None, alias="7")
    var_8: Optional[UpdateNetworkClientSplashAuthorizationStatusRequestSsids8] = Field(default=None, alias="8")
    var_9: Optional[UpdateNetworkClientSplashAuthorizationStatusRequestSsids9] = Field(default=None, alias="9")
    var_10: Optional[UpdateNetworkClientSplashAuthorizationStatusRequestSsids10] = Field(default=None, alias="10")
    var_11: Optional[UpdateNetworkClientSplashAuthorizationStatusRequestSsids11] = Field(default=None, alias="11")
    var_12: Optional[UpdateNetworkClientSplashAuthorizationStatusRequestSsids12] = Field(default=None, alias="12")
    var_13: Optional[UpdateNetworkClientSplashAuthorizationStatusRequestSsids13] = Field(default=None, alias="13")
    var_14: Optional[UpdateNetworkClientSplashAuthorizationStatusRequestSsids14] = Field(default=None, alias="14")
    __properties: ClassVar[List[str]] = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateNetworkClientSplashAuthorizationStatusRequestSsids from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_0
        if self.var_0:
            _dict['0'] = self.var_0.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_1
        if self.var_1:
            _dict['1'] = self.var_1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_2
        if self.var_2:
            _dict['2'] = self.var_2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_3
        if self.var_3:
            _dict['3'] = self.var_3.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_4
        if self.var_4:
            _dict['4'] = self.var_4.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_5
        if self.var_5:
            _dict['5'] = self.var_5.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_6
        if self.var_6:
            _dict['6'] = self.var_6.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_7
        if self.var_7:
            _dict['7'] = self.var_7.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_8
        if self.var_8:
            _dict['8'] = self.var_8.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_9
        if self.var_9:
            _dict['9'] = self.var_9.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_10
        if self.var_10:
            _dict['10'] = self.var_10.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_11
        if self.var_11:
            _dict['11'] = self.var_11.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_12
        if self.var_12:
            _dict['12'] = self.var_12.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_13
        if self.var_13:
            _dict['13'] = self.var_13.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_14
        if self.var_14:
            _dict['14'] = self.var_14.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateNetworkClientSplashAuthorizationStatusRequestSsids from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "0": UpdateNetworkClientSplashAuthorizationStatusRequestSsids0.from_dict(obj["0"]) if obj.get("0") is not None else None,
            "1": UpdateNetworkClientSplashAuthorizationStatusRequestSsids1.from_dict(obj["1"]) if obj.get("1") is not None else None,
            "2": UpdateNetworkClientSplashAuthorizationStatusRequestSsids2.from_dict(obj["2"]) if obj.get("2") is not None else None,
            "3": UpdateNetworkClientSplashAuthorizationStatusRequestSsids3.from_dict(obj["3"]) if obj.get("3") is not None else None,
            "4": UpdateNetworkClientSplashAuthorizationStatusRequestSsids4.from_dict(obj["4"]) if obj.get("4") is not None else None,
            "5": UpdateNetworkClientSplashAuthorizationStatusRequestSsids5.from_dict(obj["5"]) if obj.get("5") is not None else None,
            "6": UpdateNetworkClientSplashAuthorizationStatusRequestSsids6.from_dict(obj["6"]) if obj.get("6") is not None else None,
            "7": UpdateNetworkClientSplashAuthorizationStatusRequestSsids7.from_dict(obj["7"]) if obj.get("7") is not None else None,
            "8": UpdateNetworkClientSplashAuthorizationStatusRequestSsids8.from_dict(obj["8"]) if obj.get("8") is not None else None,
            "9": UpdateNetworkClientSplashAuthorizationStatusRequestSsids9.from_dict(obj["9"]) if obj.get("9") is not None else None,
            "10": UpdateNetworkClientSplashAuthorizationStatusRequestSsids10.from_dict(obj["10"]) if obj.get("10") is not None else None,
            "11": UpdateNetworkClientSplashAuthorizationStatusRequestSsids11.from_dict(obj["11"]) if obj.get("11") is not None else None,
            "12": UpdateNetworkClientSplashAuthorizationStatusRequestSsids12.from_dict(obj["12"]) if obj.get("12") is not None else None,
            "13": UpdateNetworkClientSplashAuthorizationStatusRequestSsids13.from_dict(obj["13"]) if obj.get("13") is not None else None,
            "14": UpdateNetworkClientSplashAuthorizationStatusRequestSsids14.from_dict(obj["14"]) if obj.get("14") is not None else None
        })
        return _obj



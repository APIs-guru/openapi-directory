# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 0.0.0-streaming
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.create_network_floor_plan_request_bottom_left_corner import CreateNetworkFloorPlanRequestBottomLeftCorner
from openapi_client.models.create_network_floor_plan_request_bottom_right_corner import CreateNetworkFloorPlanRequestBottomRightCorner
from openapi_client.models.create_network_floor_plan_request_top_left_corner import CreateNetworkFloorPlanRequestTopLeftCorner
from openapi_client.models.create_network_floor_plan_request_top_right_corner import CreateNetworkFloorPlanRequestTopRightCorner
from openapi_client.models.update_network_floor_plan_request_center import UpdateNetworkFloorPlanRequestCenter
from typing import Optional, Set
from typing_extensions import Self

class UpdateNetworkFloorPlanRequest(BaseModel):
    """
    UpdateNetworkFloorPlanRequest
    """ # noqa: E501
    bottom_left_corner: Optional[CreateNetworkFloorPlanRequestBottomLeftCorner] = Field(default=None, alias="bottomLeftCorner")
    bottom_right_corner: Optional[CreateNetworkFloorPlanRequestBottomRightCorner] = Field(default=None, alias="bottomRightCorner")
    center: Optional[UpdateNetworkFloorPlanRequestCenter] = None
    image_contents: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The file contents (a base 64 encoded string) of your new image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in. If you upload a new image, and you do NOT specify any new geolocation fields ('center, 'topLeftCorner', etc), the floor plan will be recentered with no rotation in order to maintain the aspect ratio of your new image.", alias="imageContents")
    name: Optional[StrictStr] = Field(default=None, description="The name of your floor plan.")
    top_left_corner: Optional[CreateNetworkFloorPlanRequestTopLeftCorner] = Field(default=None, alias="topLeftCorner")
    top_right_corner: Optional[CreateNetworkFloorPlanRequestTopRightCorner] = Field(default=None, alias="topRightCorner")
    __properties: ClassVar[List[str]] = ["bottomLeftCorner", "bottomRightCorner", "center", "imageContents", "name", "topLeftCorner", "topRightCorner"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateNetworkFloorPlanRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bottom_left_corner
        if self.bottom_left_corner:
            _dict['bottomLeftCorner'] = self.bottom_left_corner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bottom_right_corner
        if self.bottom_right_corner:
            _dict['bottomRightCorner'] = self.bottom_right_corner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of center
        if self.center:
            _dict['center'] = self.center.to_dict()
        # override the default output from pydantic by calling `to_dict()` of top_left_corner
        if self.top_left_corner:
            _dict['topLeftCorner'] = self.top_left_corner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of top_right_corner
        if self.top_right_corner:
            _dict['topRightCorner'] = self.top_right_corner.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateNetworkFloorPlanRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bottomLeftCorner": CreateNetworkFloorPlanRequestBottomLeftCorner.from_dict(obj["bottomLeftCorner"]) if obj.get("bottomLeftCorner") is not None else None,
            "bottomRightCorner": CreateNetworkFloorPlanRequestBottomRightCorner.from_dict(obj["bottomRightCorner"]) if obj.get("bottomRightCorner") is not None else None,
            "center": UpdateNetworkFloorPlanRequestCenter.from_dict(obj["center"]) if obj.get("center") is not None else None,
            "imageContents": obj.get("imageContents"),
            "name": obj.get("name"),
            "topLeftCorner": CreateNetworkFloorPlanRequestTopLeftCorner.from_dict(obj["topLeftCorner"]) if obj.get("topLeftCorner") is not None else None,
            "topRightCorner": CreateNetworkFloorPlanRequestTopRightCorner.from_dict(obj["topRightCorner"]) if obj.get("topRightCorner") is not None else None
        })
        return _obj



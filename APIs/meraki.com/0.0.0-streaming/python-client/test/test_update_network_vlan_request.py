# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 0.0.0-streaming
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.update_network_vlan_request import UpdateNetworkVlanRequest

class TestUpdateNetworkVlanRequest(unittest.TestCase):
    """UpdateNetworkVlanRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UpdateNetworkVlanRequest:
        """Test UpdateNetworkVlanRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UpdateNetworkVlanRequest`
        """
        model = UpdateNetworkVlanRequest()
        if include_optional:
            return UpdateNetworkVlanRequest(
                appliance_ip = '',
                dhcp_boot_filename = '',
                dhcp_boot_next_server = '',
                dhcp_boot_options_enabled = True,
                dhcp_handling = 'Do not respond to DHCP requests',
                dhcp_lease_time = '1 day',
                dhcp_options = [
                    openapi_client.models.update_network_vlan_request_dhcp_options_inner.updateNetworkVlan_request_dhcpOptions_inner(
                        code = '', 
                        type = 'hex', 
                        value = '', )
                    ],
                dhcp_relay_server_ips = [
                    ''
                    ],
                dns_nameservers = '',
                fixed_ip_assignments = None,
                group_policy_id = '',
                name = '',
                reserved_ip_ranges = [
                    openapi_client.models.update_network_static_route_request_reserved_ip_ranges_inner.updateNetworkStaticRoute_request_reservedIpRanges_inner(
                        comment = '', 
                        end = '', 
                        start = '', )
                    ],
                subnet = '',
                vpn_nat_subnet = ''
            )
        else:
            return UpdateNetworkVlanRequest(
        )
        """

    def testUpdateNetworkVlanRequest(self):
        """Test UpdateNetworkVlanRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

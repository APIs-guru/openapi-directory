# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 0.0.0-streaming
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.update_network_ssid_request import UpdateNetworkSsidRequest

class TestUpdateNetworkSsidRequest(unittest.TestCase):
    """UpdateNetworkSsidRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UpdateNetworkSsidRequest:
        """Test UpdateNetworkSsidRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UpdateNetworkSsidRequest`
        """
        model = UpdateNetworkSsidRequest()
        if include_optional:
            return UpdateNetworkSsidRequest(
                ap_tags_and_vlan_ids = [
                    openapi_client.models.update_network_ssid_request_ap_tags_and_vlan_ids_inner.updateNetworkSsid_request_apTagsAndVlanIds_inner(
                        tags = '', 
                        vlan_id = 56, )
                    ],
                auth_mode = '8021x-google',
                availability_tags = [
                    ''
                    ],
                available_on_all_aps = True,
                band_selection = '',
                concentrator_network_id = '',
                default_vlan_id = 56,
                disassociate_clients_on_vpn_failover = True,
                enabled = True,
                encryption_mode = 'wep',
                enterprise_admin_access = 'access disabled',
                ip_assignment_mode = '',
                lan_isolation_enabled = True,
                min_bitrate = 1.337,
                name = '',
                per_client_bandwidth_limit_down = 56,
                per_client_bandwidth_limit_up = 56,
                psk = '',
                radius_accounting_enabled = True,
                radius_accounting_servers = [
                    openapi_client.models.update_network_ssid_request_radius_accounting_servers_inner.updateNetworkSsid_request_radiusAccountingServers_inner(
                        host = '', 
                        port = 56, 
                        secret = '', )
                    ],
                radius_attribute_for_group_policies = '',
                radius_coa_enabled = True,
                radius_failover_policy = 'Allow access',
                radius_load_balancing_policy = 'Round robin',
                radius_override = True,
                radius_servers = [
                    openapi_client.models.update_network_ssid_request_radius_servers_inner.updateNetworkSsid_request_radiusServers_inner(
                        host = '', 
                        port = 56, 
                        secret = '', )
                    ],
                secondary_concentrator_network_id = '',
                splash_page = 'Billing',
                use_vlan_tagging = True,
                visible = True,
                vlan_id = 56,
                walled_garden_enabled = True,
                walled_garden_ranges = '',
                wpa_encryption_mode = 'WPA1 and WPA2'
            )
        else:
            return UpdateNetworkSsidRequest(
        )
        """

    def testUpdateNetworkSsidRequest(self):
        """Test UpdateNetworkSsidRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 0.0.0-streaming
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.update_network_one_to_one_nat_rules_request_rules_inner import UpdateNetworkOneToOneNatRulesRequestRulesInner

class TestUpdateNetworkOneToOneNatRulesRequestRulesInner(unittest.TestCase):
    """UpdateNetworkOneToOneNatRulesRequestRulesInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UpdateNetworkOneToOneNatRulesRequestRulesInner:
        """Test UpdateNetworkOneToOneNatRulesRequestRulesInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UpdateNetworkOneToOneNatRulesRequestRulesInner`
        """
        model = UpdateNetworkOneToOneNatRulesRequestRulesInner()
        if include_optional:
            return UpdateNetworkOneToOneNatRulesRequestRulesInner(
                allowed_inbound = [
                    openapi_client.models.update_network_one_to_one_nat_rules_request_rules_inner_allowed_inbound_inner.updateNetworkOneToOneNatRules_request_rules_inner_allowedInbound_inner(
                        allowed_ips = [
                            ''
                            ], 
                        destination_ports = [
                            ''
                            ], 
                        protocol = 'any', )
                    ],
                lan_ip = '',
                name = '',
                public_ip = '',
                uplink = 'internet1'
            )
        else:
            return UpdateNetworkOneToOneNatRulesRequestRulesInner(
                lan_ip = '',
        )
        """

    def testUpdateNetworkOneToOneNatRulesRequestRulesInner(self):
        """Test UpdateNetworkOneToOneNatRulesRequestRulesInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

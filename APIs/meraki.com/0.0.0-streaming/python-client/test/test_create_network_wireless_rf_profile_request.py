# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 0.0.0-streaming
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.create_network_wireless_rf_profile_request import CreateNetworkWirelessRfProfileRequest

class TestCreateNetworkWirelessRfProfileRequest(unittest.TestCase):
    """CreateNetworkWirelessRfProfileRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateNetworkWirelessRfProfileRequest:
        """Test CreateNetworkWirelessRfProfileRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateNetworkWirelessRfProfileRequest`
        """
        model = CreateNetworkWirelessRfProfileRequest()
        if include_optional:
            return CreateNetworkWirelessRfProfileRequest(
                ap_band_settings = openapi_client.models.create_network_wireless_rf_profile_request_ap_band_settings.createNetworkWirelessRfProfile_request_apBandSettings(
                    band_operation_mode = '2.4ghz', 
                    band_steering_enabled = True, ),
                band_selection_type = 'ap',
                client_balancing_enabled = True,
                five_ghz_settings = openapi_client.models.create_network_wireless_rf_profile_request_five_ghz_settings.createNetworkWirelessRfProfile_request_fiveGhzSettings(
                    channel_width = '', 
                    max_power = 56, 
                    min_bitrate = 56, 
                    min_power = 56, 
                    rxsop = 56, 
                    valid_auto_channels = [
                        56
                        ], ),
                min_bitrate_type = 'band',
                name = '',
                two_four_ghz_settings = openapi_client.models.create_network_wireless_rf_profile_request_two_four_ghz_settings.createNetworkWirelessRfProfile_request_twoFourGhzSettings(
                    ax_enabled = True, 
                    max_power = 56, 
                    min_bitrate = 1.337, 
                    min_power = 56, 
                    rxsop = 56, 
                    valid_auto_channels = [
                        56
                        ], )
            )
        else:
            return CreateNetworkWirelessRfProfileRequest(
                band_selection_type = 'ap',
                name = '',
        )
        """

    def testCreateNetworkWirelessRfProfileRequest(self):
        """Test CreateNetworkWirelessRfProfileRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetNetworkSmDeviceDesktopLogs200ResponseInner(BaseModel):
    """
    GetNetworkSmDeviceDesktopLogs200ResponseInner
    """ # noqa: E501
    dhcp_server: Optional[StrictStr] = Field(default=None, description="The IP address of the DCHP Server.", alias="dhcpServer")
    dns_server: Optional[StrictStr] = Field(default=None, description="The DNS Server during the connection.", alias="dnsServer")
    gateway: Optional[StrictStr] = Field(default=None, description="The gateway IP the device was connected to.")
    ip: Optional[StrictStr] = Field(default=None, description="The IP of the device during connection.")
    measured_at: Optional[StrictStr] = Field(default=None, description="The time the data was measured at.", alias="measuredAt")
    network_device: Optional[StrictStr] = Field(default=None, description="The network device for the device used for connection.", alias="networkDevice")
    network_driver: Optional[StrictStr] = Field(default=None, description="The network driver for the device.", alias="networkDriver")
    network_mtu: Optional[StrictStr] = Field(default=None, description="The network max transmission unit.", alias="networkMTU")
    public_ip: Optional[StrictStr] = Field(default=None, description="The public IP address of the device.", alias="publicIP")
    subnet: Optional[StrictStr] = Field(default=None, description="The subnet of the device connection.")
    ts: Optional[StrictStr] = Field(default=None, description="The time the connection was logged.")
    user: Optional[StrictStr] = Field(default=None, description="The user during connection.")
    wifi_auth: Optional[StrictStr] = Field(default=None, description="The type of authentication used by the SSID.", alias="wifiAuth")
    wifi_bssid: Optional[StrictStr] = Field(default=None, description="The MAC of the access point the device is connected to.", alias="wifiBssid")
    wifi_channel: Optional[StrictStr] = Field(default=None, description="Channel through which the connection is routing.", alias="wifiChannel")
    wifi_noise: Optional[StrictStr] = Field(default=None, description="The wireless signal power level received by the device.", alias="wifiNoise")
    wifi_rssi: Optional[StrictStr] = Field(default=None, description="The Received Signal Strength Indicator for the device.", alias="wifiRssi")
    wifi_ssid: Optional[StrictStr] = Field(default=None, description="The name of the network the device is connected to.", alias="wifiSsid")
    __properties: ClassVar[List[str]] = ["dhcpServer", "dnsServer", "gateway", "ip", "measuredAt", "networkDevice", "networkDriver", "networkMTU", "publicIP", "subnet", "ts", "user", "wifiAuth", "wifiBssid", "wifiChannel", "wifiNoise", "wifiRssi", "wifiSsid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetNetworkSmDeviceDesktopLogs200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetNetworkSmDeviceDesktopLogs200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dhcpServer": obj.get("dhcpServer"),
            "dnsServer": obj.get("dnsServer"),
            "gateway": obj.get("gateway"),
            "ip": obj.get("ip"),
            "measuredAt": obj.get("measuredAt"),
            "networkDevice": obj.get("networkDevice"),
            "networkDriver": obj.get("networkDriver"),
            "networkMTU": obj.get("networkMTU"),
            "publicIP": obj.get("publicIP"),
            "subnet": obj.get("subnet"),
            "ts": obj.get("ts"),
            "user": obj.get("user"),
            "wifiAuth": obj.get("wifiAuth"),
            "wifiBssid": obj.get("wifiBssid"),
            "wifiChannel": obj.get("wifiChannel"),
            "wifiNoise": obj.get("wifiNoise"),
            "wifiRssi": obj.get("wifiRssi"),
            "wifiSsid": obj.get("wifiSsid")
        })
        return _obj



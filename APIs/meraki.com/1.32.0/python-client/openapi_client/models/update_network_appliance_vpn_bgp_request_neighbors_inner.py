# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.update_network_appliance_vpn_bgp_request_neighbors_inner_ipv6 import UpdateNetworkApplianceVpnBgpRequestNeighborsInnerIpv6
from typing import Optional, Set
from typing_extensions import Self

class UpdateNetworkApplianceVpnBgpRequestNeighborsInner(BaseModel):
    """
    UpdateNetworkApplianceVpnBgpRequestNeighborsInner
    """ # noqa: E501
    allow_transit: Optional[StrictBool] = Field(default=None, description="When this feature is on, the Meraki device will advertise routes learned from other Autonomous Systems, thereby allowing traffic between Autonomous Systems to transit this AS. When absent, it defaults to false.", alias="allowTransit")
    ebgp_hold_timer: StrictInt = Field(description="The EBGP hold timer in seconds for each neighbor. The EBGP hold timer must be an integer between 12 and 240.", alias="ebgpHoldTimer")
    ebgp_multihop: StrictInt = Field(description="Configure this if the neighbor is not adjacent. The EBGP multi-hop must be an integer between 1 and 255.", alias="ebgpMultihop")
    ip: Optional[StrictStr] = Field(default=None, description="The IPv4 address of the neighbor")
    ipv6: Optional[UpdateNetworkApplianceVpnBgpRequestNeighborsInnerIpv6] = None
    receive_limit: Optional[StrictInt] = Field(default=None, description="The receive limit is the maximum number of routes that can be received from any BGP peer. The receive limit must be an integer between 0 and 4294967295. When absent, it defaults to 0.", alias="receiveLimit")
    remote_as_number: StrictInt = Field(description="Remote ASN of the neighbor. The remote ASN must be an integer between 1 and 4294967295.", alias="remoteAsNumber")
    __properties: ClassVar[List[str]] = ["allowTransit", "ebgpHoldTimer", "ebgpMultihop", "ip", "ipv6", "receiveLimit", "remoteAsNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateNetworkApplianceVpnBgpRequestNeighborsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ipv6
        if self.ipv6:
            _dict['ipv6'] = self.ipv6.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateNetworkApplianceVpnBgpRequestNeighborsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowTransit": obj.get("allowTransit"),
            "ebgpHoldTimer": obj.get("ebgpHoldTimer"),
            "ebgpMultihop": obj.get("ebgpMultihop"),
            "ip": obj.get("ip"),
            "ipv6": UpdateNetworkApplianceVpnBgpRequestNeighborsInnerIpv6.from_dict(obj["ipv6"]) if obj.get("ipv6") is not None else None,
            "receiveLimit": obj.get("receiveLimit"),
            "remoteAsNumber": obj.get("remoteAsNumber")
        })
        return _obj



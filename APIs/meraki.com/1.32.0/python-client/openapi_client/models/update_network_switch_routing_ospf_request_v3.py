# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.update_network_switch_routing_ospf_request_areas_inner import UpdateNetworkSwitchRoutingOspfRequestAreasInner
from typing import Optional, Set
from typing_extensions import Self

class UpdateNetworkSwitchRoutingOspfRequestV3(BaseModel):
    """
    OSPF v3 configuration
    """ # noqa: E501
    areas: Optional[List[UpdateNetworkSwitchRoutingOspfRequestAreasInner]] = Field(default=None, description="OSPF v3 areas")
    dead_timer_in_seconds: Optional[StrictInt] = Field(default=None, description="Time interval to determine when the peer will be declared inactive/dead. Value must be between 1 and 65535", alias="deadTimerInSeconds")
    enabled: Optional[StrictBool] = Field(default=None, description="Boolean value to enable or disable V3 OSPF routing. OSPF V3 routing is disabled by default.")
    hello_timer_in_seconds: Optional[StrictInt] = Field(default=None, description="Time interval in seconds at which hello packet will be sent to OSPF neighbors to maintain connectivity. Value must be between 1 and 255. Default is 10 seconds.", alias="helloTimerInSeconds")
    __properties: ClassVar[List[str]] = ["areas", "deadTimerInSeconds", "enabled", "helloTimerInSeconds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateNetworkSwitchRoutingOspfRequestV3 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in areas (list)
        _items = []
        if self.areas:
            for _item_areas in self.areas:
                if _item_areas:
                    _items.append(_item_areas.to_dict())
            _dict['areas'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateNetworkSwitchRoutingOspfRequestV3 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "areas": [UpdateNetworkSwitchRoutingOspfRequestAreasInner.from_dict(_item) for _item in obj["areas"]] if obj.get("areas") is not None else None,
            "deadTimerInSeconds": obj.get("deadTimerInSeconds"),
            "enabled": obj.get("enabled"),
            "helloTimerInSeconds": obj.get("helloTimerInSeconds")
        })
        return _obj



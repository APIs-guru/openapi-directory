# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.update_network_appliance_traffic_shaping_rules_request_rules_inner_definitions_inner import UpdateNetworkApplianceTrafficShapingRulesRequestRulesInnerDefinitionsInner
from openapi_client.models.update_network_appliance_traffic_shaping_rules_request_rules_inner_per_client_bandwidth_limits import UpdateNetworkApplianceTrafficShapingRulesRequestRulesInnerPerClientBandwidthLimits
from typing import Optional, Set
from typing_extensions import Self

class CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingTrafficShapingRulesInner(BaseModel):
    """
    CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingTrafficShapingRulesInner
    """ # noqa: E501
    definitions: List[UpdateNetworkApplianceTrafficShapingRulesRequestRulesInnerDefinitionsInner] = Field(description="    A list of objects describing the definitions of your traffic shaping rule. At least one definition is required. ")
    dscp_tag_value: Optional[StrictInt] = Field(default=None, description="    The DSCP tag applied by your rule. null means 'Do not change DSCP tag'.     For a list of possible tag values, use the trafficShaping/dscpTaggingOptions endpoint. ", alias="dscpTagValue")
    pcp_tag_value: Optional[StrictInt] = Field(default=None, description="    The PCP tag applied by your rule. Can be 0 (lowest priority) through 7 (highest priority).     null means 'Do not set PCP tag'. ", alias="pcpTagValue")
    per_client_bandwidth_limits: Optional[UpdateNetworkApplianceTrafficShapingRulesRequestRulesInnerPerClientBandwidthLimits] = Field(default=None, alias="perClientBandwidthLimits")
    priority: Optional[StrictStr] = Field(default=None, description="    A string, indicating the priority level for packets bound to your rule.     Can be 'low', 'normal' or 'high'. ")
    __properties: ClassVar[List[str]] = ["definitions", "dscpTagValue", "pcpTagValue", "perClientBandwidthLimits", "priority"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingTrafficShapingRulesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in definitions (list)
        _items = []
        if self.definitions:
            for _item_definitions in self.definitions:
                if _item_definitions:
                    _items.append(_item_definitions.to_dict())
            _dict['definitions'] = _items
        # override the default output from pydantic by calling `to_dict()` of per_client_bandwidth_limits
        if self.per_client_bandwidth_limits:
            _dict['perClientBandwidthLimits'] = self.per_client_bandwidth_limits.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingTrafficShapingRulesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "definitions": [UpdateNetworkApplianceTrafficShapingRulesRequestRulesInnerDefinitionsInner.from_dict(_item) for _item in obj["definitions"]] if obj.get("definitions") is not None else None,
            "dscpTagValue": obj.get("dscpTagValue"),
            "pcpTagValue": obj.get("pcpTagValue"),
            "perClientBandwidthLimits": UpdateNetworkApplianceTrafficShapingRulesRequestRulesInnerPerClientBandwidthLimits.from_dict(obj["perClientBandwidthLimits"]) if obj.get("perClientBandwidthLimits") is not None else None,
            "priority": obj.get("priority")
        })
        return _obj



# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateDeviceCameraQualityAndRetentionRequest(BaseModel):
    """
    UpdateDeviceCameraQualityAndRetentionRequest
    """ # noqa: E501
    audio_recording_enabled: Optional[StrictBool] = Field(default=None, description="Boolean indicating if audio recording is enabled(true) or disabled(false) on the camera", alias="audioRecordingEnabled")
    motion_based_retention_enabled: Optional[StrictBool] = Field(default=None, description="Boolean indicating if motion-based retention is enabled(true) or disabled(false) on the camera.", alias="motionBasedRetentionEnabled")
    motion_detector_version: Optional[StrictInt] = Field(default=None, description="The version of the motion detector that will be used by the camera. Only applies to Gen 2 cameras. Defaults to v2.", alias="motionDetectorVersion")
    profile_id: Optional[StrictStr] = Field(default=None, description="The ID of a quality and retention profile to assign to the camera. The profile's settings will override all of the per-camera quality and retention settings. If the value of this parameter is null, any existing profile will be unassigned from the camera.", alias="profileId")
    quality: Optional[StrictStr] = Field(default=None, description="Quality of the camera. Can be one of 'Standard', 'High' or 'Enhanced'. Not all qualities are supported by every camera model.")
    resolution: Optional[StrictStr] = Field(default=None, description="Resolution of the camera. Can be one of '1280x720', '1920x1080', '1080x1080', '2058x2058', '2112x2112', '2880x2880', '2688x1512' or '3840x2160'.Not all resolutions are supported by every camera model.")
    restricted_bandwidth_mode_enabled: Optional[StrictBool] = Field(default=None, description="Boolean indicating if restricted bandwidth is enabled(true) or disabled(false) on the camera. This setting does not apply to MV2 cameras.", alias="restrictedBandwidthModeEnabled")
    __properties: ClassVar[List[str]] = ["audioRecordingEnabled", "motionBasedRetentionEnabled", "motionDetectorVersion", "profileId", "quality", "resolution", "restrictedBandwidthModeEnabled"]

    @field_validator('motion_detector_version')
    def motion_detector_version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([1, 2]):
            raise ValueError("must be one of enum values (1, 2)")
        return value

    @field_validator('quality')
    def quality_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enhanced', 'High', 'Standard']):
            raise ValueError("must be one of enum values ('Enhanced', 'High', 'Standard')")
        return value

    @field_validator('resolution')
    def resolution_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['1080x1080', '1280x720', '1920x1080', '2058x2058', '2112x2112', '2688x1512', '2880x2880', '3840x2160']):
            raise ValueError("must be one of enum values ('1080x1080', '1280x720', '1920x1080', '2058x2058', '2112x2112', '2688x1512', '2880x2880', '3840x2160')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateDeviceCameraQualityAndRetentionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateDeviceCameraQualityAndRetentionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audioRecordingEnabled": obj.get("audioRecordingEnabled"),
            "motionBasedRetentionEnabled": obj.get("motionBasedRetentionEnabled"),
            "motionDetectorVersion": obj.get("motionDetectorVersion"),
            "profileId": obj.get("profileId"),
            "quality": obj.get("quality"),
            "resolution": obj.get("resolution"),
            "restrictedBandwidthModeEnabled": obj.get("restrictedBandwidthModeEnabled")
        })
        return _obj



# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.create_network_firmware_upgrades_rollback_request_reasons_inner import CreateNetworkFirmwareUpgradesRollbackRequestReasonsInner
from openapi_client.models.create_network_firmware_upgrades_rollback_request_to_version import CreateNetworkFirmwareUpgradesRollbackRequestToVersion
from typing import Optional, Set
from typing_extensions import Self

class CreateNetworkFirmwareUpgradesRollbackRequest(BaseModel):
    """
    CreateNetworkFirmwareUpgradesRollbackRequest
    """ # noqa: E501
    product: Optional[StrictStr] = Field(default=None, description="Product type to rollback (if the network is a combined network)")
    reasons: List[CreateNetworkFirmwareUpgradesRollbackRequestReasonsInner] = Field(description="Reasons for the rollback")
    time: Optional[datetime] = Field(default=None, description="Scheduled time for the rollback")
    to_version: Optional[CreateNetworkFirmwareUpgradesRollbackRequestToVersion] = Field(default=None, alias="toVersion")
    __properties: ClassVar[List[str]] = ["product", "reasons", "time", "toVersion"]

    @field_validator('product')
    def product_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['appliance', 'camera', 'cellularGateway', 'switch', 'wireless']):
            raise ValueError("must be one of enum values ('appliance', 'camera', 'cellularGateway', 'switch', 'wireless')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateNetworkFirmwareUpgradesRollbackRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in reasons (list)
        _items = []
        if self.reasons:
            for _item_reasons in self.reasons:
                if _item_reasons:
                    _items.append(_item_reasons.to_dict())
            _dict['reasons'] = _items
        # override the default output from pydantic by calling `to_dict()` of to_version
        if self.to_version:
            _dict['toVersion'] = self.to_version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateNetworkFirmwareUpgradesRollbackRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "product": obj.get("product"),
            "reasons": [CreateNetworkFirmwareUpgradesRollbackRequestReasonsInner.from_dict(_item) for _item in obj["reasons"]] if obj.get("reasons") is not None else None,
            "time": obj.get("time"),
            "toVersion": CreateNetworkFirmwareUpgradesRollbackRequestToVersion.from_dict(obj["toVersion"]) if obj.get("toVersion") is not None else None
        })
        return _obj



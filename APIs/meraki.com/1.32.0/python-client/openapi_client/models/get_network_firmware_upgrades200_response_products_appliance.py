# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_network_firmware_upgrades200_response_products_appliance_available_versions_inner import GetNetworkFirmwareUpgrades200ResponseProductsApplianceAvailableVersionsInner
from openapi_client.models.get_network_firmware_upgrades200_response_products_appliance_current_version import GetNetworkFirmwareUpgrades200ResponseProductsApplianceCurrentVersion
from openapi_client.models.get_network_firmware_upgrades200_response_products_appliance_last_upgrade import GetNetworkFirmwareUpgrades200ResponseProductsApplianceLastUpgrade
from openapi_client.models.get_network_firmware_upgrades200_response_products_appliance_next_upgrade import GetNetworkFirmwareUpgrades200ResponseProductsApplianceNextUpgrade
from typing import Optional, Set
from typing_extensions import Self

class GetNetworkFirmwareUpgrades200ResponseProductsAppliance(BaseModel):
    """
    The network device to be updated
    """ # noqa: E501
    available_versions: Optional[List[GetNetworkFirmwareUpgrades200ResponseProductsApplianceAvailableVersionsInner]] = Field(default=None, description="Firmware versions available for upgrade", alias="availableVersions")
    current_version: Optional[GetNetworkFirmwareUpgrades200ResponseProductsApplianceCurrentVersion] = Field(default=None, alias="currentVersion")
    last_upgrade: Optional[GetNetworkFirmwareUpgrades200ResponseProductsApplianceLastUpgrade] = Field(default=None, alias="lastUpgrade")
    next_upgrade: Optional[GetNetworkFirmwareUpgrades200ResponseProductsApplianceNextUpgrade] = Field(default=None, alias="nextUpgrade")
    participate_in_next_beta_release: Optional[StrictBool] = Field(default=None, description="Whether or not the network wants beta firmware", alias="participateInNextBetaRelease")
    __properties: ClassVar[List[str]] = ["availableVersions", "currentVersion", "lastUpgrade", "nextUpgrade", "participateInNextBetaRelease"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetNetworkFirmwareUpgrades200ResponseProductsAppliance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in available_versions (list)
        _items = []
        if self.available_versions:
            for _item_available_versions in self.available_versions:
                if _item_available_versions:
                    _items.append(_item_available_versions.to_dict())
            _dict['availableVersions'] = _items
        # override the default output from pydantic by calling `to_dict()` of current_version
        if self.current_version:
            _dict['currentVersion'] = self.current_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_upgrade
        if self.last_upgrade:
            _dict['lastUpgrade'] = self.last_upgrade.to_dict()
        # override the default output from pydantic by calling `to_dict()` of next_upgrade
        if self.next_upgrade:
            _dict['nextUpgrade'] = self.next_upgrade.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetNetworkFirmwareUpgrades200ResponseProductsAppliance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availableVersions": [GetNetworkFirmwareUpgrades200ResponseProductsApplianceAvailableVersionsInner.from_dict(_item) for _item in obj["availableVersions"]] if obj.get("availableVersions") is not None else None,
            "currentVersion": GetNetworkFirmwareUpgrades200ResponseProductsApplianceCurrentVersion.from_dict(obj["currentVersion"]) if obj.get("currentVersion") is not None else None,
            "lastUpgrade": GetNetworkFirmwareUpgrades200ResponseProductsApplianceLastUpgrade.from_dict(obj["lastUpgrade"]) if obj.get("lastUpgrade") is not None else None,
            "nextUpgrade": GetNetworkFirmwareUpgrades200ResponseProductsApplianceNextUpgrade.from_dict(obj["nextUpgrade"]) if obj.get("nextUpgrade") is not None else None,
            "participateInNextBetaRelease": obj.get("participateInNextBetaRelease")
        })
        return _obj



# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_device_switch_ports200_response_inner_profile import GetDeviceSwitchPorts200ResponseInnerProfile
from typing import Optional, Set
from typing_extensions import Self

class UpdateOrganizationConfigTemplateSwitchProfilePortRequest(BaseModel):
    """
    UpdateOrganizationConfigTemplateSwitchProfilePortRequest
    """ # noqa: E501
    access_policy_number: Optional[StrictInt] = Field(default=None, description="The number of a custom access policy to configure on the switch profile port. Only applicable when 'accessPolicyType' is 'Custom access policy'.", alias="accessPolicyNumber")
    access_policy_type: Optional[StrictStr] = Field(default=None, description="The type of the access policy of the switch profile port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.", alias="accessPolicyType")
    allowed_vlans: Optional[StrictStr] = Field(default=None, description="The VLANs allowed on the switch profile port. Only applicable to trunk ports.", alias="allowedVlans")
    dai_trusted: Optional[StrictBool] = Field(default=None, description="If true, ARP packets for this port will be considered trusted, and Dynamic ARP Inspection will allow the traffic.", alias="daiTrusted")
    enabled: Optional[StrictBool] = Field(default=None, description="The status of the switch profile port.")
    flexible_stacking_enabled: Optional[StrictBool] = Field(default=None, description="For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.", alias="flexibleStackingEnabled")
    isolation_enabled: Optional[StrictBool] = Field(default=None, description="The isolation status of the switch profile port.", alias="isolationEnabled")
    link_negotiation: Optional[StrictStr] = Field(default=None, description="The link speed for the switch profile port.", alias="linkNegotiation")
    mac_allow_list: Optional[List[StrictStr]] = Field(default=None, description="Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'.", alias="macAllowList")
    name: Optional[StrictStr] = Field(default=None, description="The name of the switch profile port.")
    poe_enabled: Optional[StrictBool] = Field(default=None, description="The PoE status of the switch profile port.", alias="poeEnabled")
    port_schedule_id: Optional[StrictStr] = Field(default=None, description="The ID of the port schedule. A value of null will clear the port schedule.", alias="portScheduleId")
    profile: Optional[GetDeviceSwitchPorts200ResponseInnerProfile] = None
    rstp_enabled: Optional[StrictBool] = Field(default=None, description="The rapid spanning tree protocol status.", alias="rstpEnabled")
    sticky_mac_allow_list: Optional[List[StrictStr]] = Field(default=None, description="The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.", alias="stickyMacAllowList")
    sticky_mac_allow_list_limit: Optional[StrictInt] = Field(default=None, description="The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.", alias="stickyMacAllowListLimit")
    storm_control_enabled: Optional[StrictBool] = Field(default=None, description="The storm control status of the switch profile port.", alias="stormControlEnabled")
    stp_guard: Optional[StrictStr] = Field(default=None, description="The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').", alias="stpGuard")
    tags: Optional[List[StrictStr]] = Field(default=None, description="The list of tags of the switch profile port.")
    type: Optional[StrictStr] = Field(default=None, description="The type of the switch profile port ('trunk' or 'access').")
    udld: Optional[StrictStr] = Field(default=None, description="The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.")
    vlan: Optional[StrictInt] = Field(default=None, description="The VLAN of the switch profile port. A null value will clear the value set for trunk ports.")
    voice_vlan: Optional[StrictInt] = Field(default=None, description="The voice VLAN of the switch profile port. Only applicable to access ports.", alias="voiceVlan")
    __properties: ClassVar[List[str]] = ["accessPolicyNumber", "accessPolicyType", "allowedVlans", "daiTrusted", "enabled", "flexibleStackingEnabled", "isolationEnabled", "linkNegotiation", "macAllowList", "name", "poeEnabled", "portScheduleId", "profile", "rstpEnabled", "stickyMacAllowList", "stickyMacAllowListLimit", "stormControlEnabled", "stpGuard", "tags", "type", "udld", "vlan", "voiceVlan"]

    @field_validator('access_policy_type')
    def access_policy_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Custom access policy', 'MAC allow list', 'Open', 'Sticky MAC allow list']):
            raise ValueError("must be one of enum values ('Custom access policy', 'MAC allow list', 'Open', 'Sticky MAC allow list')")
        return value

    @field_validator('stp_guard')
    def stp_guard_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['bpdu guard', 'disabled', 'loop guard', 'root guard']):
            raise ValueError("must be one of enum values ('bpdu guard', 'disabled', 'loop guard', 'root guard')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['access', 'trunk']):
            raise ValueError("must be one of enum values ('access', 'trunk')")
        return value

    @field_validator('udld')
    def udld_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Alert only', 'Enforce']):
            raise ValueError("must be one of enum values ('Alert only', 'Enforce')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateOrganizationConfigTemplateSwitchProfilePortRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of profile
        if self.profile:
            _dict['profile'] = self.profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateOrganizationConfigTemplateSwitchProfilePortRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessPolicyNumber": obj.get("accessPolicyNumber"),
            "accessPolicyType": obj.get("accessPolicyType"),
            "allowedVlans": obj.get("allowedVlans"),
            "daiTrusted": obj.get("daiTrusted"),
            "enabled": obj.get("enabled"),
            "flexibleStackingEnabled": obj.get("flexibleStackingEnabled"),
            "isolationEnabled": obj.get("isolationEnabled"),
            "linkNegotiation": obj.get("linkNegotiation"),
            "macAllowList": obj.get("macAllowList"),
            "name": obj.get("name"),
            "poeEnabled": obj.get("poeEnabled"),
            "portScheduleId": obj.get("portScheduleId"),
            "profile": GetDeviceSwitchPorts200ResponseInnerProfile.from_dict(obj["profile"]) if obj.get("profile") is not None else None,
            "rstpEnabled": obj.get("rstpEnabled"),
            "stickyMacAllowList": obj.get("stickyMacAllowList"),
            "stickyMacAllowListLimit": obj.get("stickyMacAllowListLimit"),
            "stormControlEnabled": obj.get("stormControlEnabled"),
            "stpGuard": obj.get("stpGuard"),
            "tags": obj.get("tags"),
            "type": obj.get("type"),
            "udld": obj.get("udld"),
            "vlan": obj.get("vlan"),
            "voiceVlan": obj.get("voiceVlan")
        })
        return _obj



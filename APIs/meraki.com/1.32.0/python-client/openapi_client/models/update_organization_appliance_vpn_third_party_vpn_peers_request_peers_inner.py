# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_organization_appliance_vpn_third_party_vpn_peers200_response_peers_inner_ipsec_policies import GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies
from typing import Optional, Set
from typing_extensions import Self

class UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner(BaseModel):
    """
    UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner
    """ # noqa: E501
    ike_version: Optional[StrictStr] = Field(default='1', description="[optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted.", alias="ikeVersion")
    ipsec_policies: Optional[GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies] = Field(default=None, alias="ipsecPolicies")
    ipsec_policies_preset: Optional[StrictStr] = Field(default=None, description="One of the following available presets: 'default', 'aws', 'azure'. If this is provided, the 'ipsecPolicies' parameter is ignored.", alias="ipsecPoliciesPreset")
    local_id: Optional[StrictStr] = Field(default=None, description="[optional] The local ID is used to identify the MX to the peer. This will apply to all MXs this peer applies to.", alias="localId")
    name: StrictStr = Field(description="The name of the VPN peer")
    network_tags: Optional[List[StrictStr]] = Field(default=None, description="A list of network tags that will connect with this peer. Use ['all'] for all networks. Use ['none'] for no networks. If not included, the default is ['all'].", alias="networkTags")
    private_subnets: List[StrictStr] = Field(description="The list of the private subnets of the VPN peer", alias="privateSubnets")
    public_ip: Optional[StrictStr] = Field(default=None, description="[optional] The public IP of the VPN peer", alias="publicIp")
    remote_id: Optional[StrictStr] = Field(default=None, description="[optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN.", alias="remoteId")
    secret: StrictStr = Field(description="The shared secret with the VPN peer")
    __properties: ClassVar[List[str]] = ["ikeVersion", "ipsecPolicies", "ipsecPoliciesPreset", "localId", "name", "networkTags", "privateSubnets", "publicIp", "remoteId", "secret"]

    @field_validator('ike_version')
    def ike_version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['1', '2']):
            raise ValueError("must be one of enum values ('1', '2')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ipsec_policies
        if self.ipsec_policies:
            _dict['ipsecPolicies'] = self.ipsec_policies.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ikeVersion": obj.get("ikeVersion") if obj.get("ikeVersion") is not None else '1',
            "ipsecPolicies": GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies.from_dict(obj["ipsecPolicies"]) if obj.get("ipsecPolicies") is not None else None,
            "ipsecPoliciesPreset": obj.get("ipsecPoliciesPreset"),
            "localId": obj.get("localId"),
            "name": obj.get("name"),
            "networkTags": obj.get("networkTags"),
            "privateSubnets": obj.get("privateSubnets"),
            "publicIp": obj.get("publicIp"),
            "remoteId": obj.get("remoteId"),
            "secret": obj.get("secret")
        })
        return _obj



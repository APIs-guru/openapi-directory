# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetNetworkSmDeviceSoftwares200ResponseInner(BaseModel):
    """
    GetNetworkSmDeviceSoftwares200ResponseInner
    """ # noqa: E501
    app_id: Optional[StrictStr] = Field(default=None, description="The Meraki managed application Id for this record on a particular device.", alias="appId")
    bundle_size: Optional[StrictInt] = Field(default=None, description="The size of the software bundle.", alias="bundleSize")
    created_at: Optional[StrictStr] = Field(default=None, description="When the Meraki record for the software was created.", alias="createdAt")
    device_id: Optional[StrictStr] = Field(default=None, description="The Meraki managed device Id.", alias="deviceId")
    dynamic_size: Optional[StrictInt] = Field(default=None, description="The size of the data stored in the application.", alias="dynamicSize")
    id: Optional[StrictStr] = Field(default=None, description="The Meraki software Id.")
    identifier: Optional[StrictStr] = Field(default=None, description="Software bundle identifier.")
    installed_at: Optional[StrictStr] = Field(default=None, description="When the Software was installed on the device.", alias="installedAt")
    ios_redemption_code: Optional[StrictBool] = Field(default=None, description="A boolean indicating whether or not an iOS redemption code was used.", alias="iosRedemptionCode")
    is_managed: Optional[StrictBool] = Field(default=None, description="A boolean indicating whether or not the software is managed by Meraki.", alias="isManaged")
    itunes_id: Optional[StrictStr] = Field(default=None, description="The itunes numerical identifier.", alias="itunesId")
    license_key: Optional[StrictStr] = Field(default=None, description="The license key associated with this software installation.", alias="licenseKey")
    name: Optional[StrictStr] = Field(default=None, description="The name of the software.")
    path: Optional[StrictStr] = Field(default=None, description="The path on the device where the software record is located.")
    redemption_code: Optional[StrictInt] = Field(default=None, description="The redemption code used for this software.", alias="redemptionCode")
    short_version: Optional[StrictStr] = Field(default=None, description="Short version notation for the software.", alias="shortVersion")
    status: Optional[StrictStr] = Field(default=None, description="The management status of the software.")
    to_install: Optional[StrictBool] = Field(default=None, description="A boolean indicating this software record should be installed on the associated device.", alias="toInstall")
    to_uninstall: Optional[StrictBool] = Field(default=None, description="A boolean indicating this software record should be uninstalled on the associated device.", alias="toUninstall")
    uninstalled_at: Optional[StrictStr] = Field(default=None, description="When the record was uninstalled from the device.", alias="uninstalledAt")
    updated_at: Optional[StrictStr] = Field(default=None, description="When the record was last updated by Meraki.", alias="updatedAt")
    vendor: Optional[StrictStr] = Field(default=None, description="The vendor of the software.")
    version: Optional[StrictStr] = Field(default=None, description="Full version notation for the software.")
    __properties: ClassVar[List[str]] = ["appId", "bundleSize", "createdAt", "deviceId", "dynamicSize", "id", "identifier", "installedAt", "iosRedemptionCode", "isManaged", "itunesId", "licenseKey", "name", "path", "redemptionCode", "shortVersion", "status", "toInstall", "toUninstall", "uninstalledAt", "updatedAt", "vendor", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetNetworkSmDeviceSoftwares200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetNetworkSmDeviceSoftwares200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appId": obj.get("appId"),
            "bundleSize": obj.get("bundleSize"),
            "createdAt": obj.get("createdAt"),
            "deviceId": obj.get("deviceId"),
            "dynamicSize": obj.get("dynamicSize"),
            "id": obj.get("id"),
            "identifier": obj.get("identifier"),
            "installedAt": obj.get("installedAt"),
            "iosRedemptionCode": obj.get("iosRedemptionCode"),
            "isManaged": obj.get("isManaged"),
            "itunesId": obj.get("itunesId"),
            "licenseKey": obj.get("licenseKey"),
            "name": obj.get("name"),
            "path": obj.get("path"),
            "redemptionCode": obj.get("redemptionCode"),
            "shortVersion": obj.get("shortVersion"),
            "status": obj.get("status"),
            "toInstall": obj.get("toInstall"),
            "toUninstall": obj.get("toUninstall"),
            "uninstalledAt": obj.get("uninstalledAt"),
            "updatedAt": obj.get("updatedAt"),
            "vendor": obj.get("vendor"),
            "version": obj.get("version")
        })
        return _obj



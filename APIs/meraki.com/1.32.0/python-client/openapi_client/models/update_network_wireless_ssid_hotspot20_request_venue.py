# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateNetworkWirelessSsidHotspot20RequestVenue(BaseModel):
    """
    Venue settings for this SSID
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Venue name")
    type: Optional[StrictStr] = Field(default=None, description="Venue type ('Unspecified', 'Unspecified Assembly', 'Arena', 'Stadium', 'Passenger Terminal', 'Amphitheater', 'Amusement Park', 'Place of Worship', 'Convention Center', 'Library', 'Museum', 'Restaurant', 'Theater', 'Bar', 'Coffee Shop', 'Zoo or Aquarium', 'Emergency Coordination Center', 'Unspecified Business', 'Doctor or Dentist office', 'Bank', 'Fire Station', 'Police Station', 'Post Office', 'Professional Office', 'Research and Development Facility', 'Attorney Office', 'Unspecified Educational', 'School, Primary', 'School, Secondary', 'University or College', 'Unspecified Factory and Industrial', 'Factory', 'Unspecified Institutional', 'Hospital', 'Long-Term Care Facility', 'Alcohol and Drug Rehabilitation Center', 'Group Home', 'Prison or Jail', 'Unspecified Mercantile', 'Retail Store', 'Grocery Market', 'Automotive Service Station', 'Shopping Mall', 'Gas Station', 'Unspecified Residential', 'Private Residence', 'Hotel or Motel', 'Dormitory', 'Boarding House', 'Unspecified Storage', 'Unspecified Utility and Miscellaneous', 'Unspecified Vehicular', 'Automobile or Truck', 'Airplane', 'Bus', 'Ferry', 'Ship or Boat', 'Train', 'Motor Bike', 'Unspecified Outdoor', 'Muni-mesh Network', 'City Park', 'Rest Area', 'Traffic Control', 'Bus Stop', 'Kiosk')")
    __properties: ClassVar[List[str]] = ["name", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Airplane', 'Alcohol and Drug Rehabilitation Center', 'Amphitheater', 'Amusement Park', 'Arena', 'Attorney Office', 'Automobile or Truck', 'Automotive Service Station', 'Bank', 'Bar', 'Boarding House', 'Bus', 'Bus Stop', 'City Park', 'Coffee Shop', 'Convention Center', 'Doctor or Dentist office', 'Dormitory', 'Emergency Coordination Center', 'Factory', 'Ferry', 'Fire Station', 'Gas Station', 'Grocery Market', 'Group Home', 'Hospital', 'Hotel or Motel', 'Kiosk', 'Library', 'Long-Term Care Facility', 'Motor Bike', 'Muni-mesh Network', 'Museum', 'Passenger Terminal', 'Place of Worship', 'Police Station', 'Post Office', 'Prison or Jail', 'Private Residence', 'Professional Office', 'Research and Development Facility', 'Rest Area', 'Restaurant', 'Retail Store', 'School, Primary', 'School, Secondary', 'Ship or Boat', 'Shopping Mall', 'Stadium', 'Theater', 'Traffic Control', 'Train', 'University or College', 'Unspecified', 'Unspecified Assembly', 'Unspecified Business', 'Unspecified Educational', 'Unspecified Factory and Industrial', 'Unspecified Institutional', 'Unspecified Mercantile', 'Unspecified Outdoor', 'Unspecified Residential', 'Unspecified Storage', 'Unspecified Utility and Miscellaneous', 'Unspecified Vehicular', 'Zoo or Aquarium']):
            raise ValueError("must be one of enum values ('Airplane', 'Alcohol and Drug Rehabilitation Center', 'Amphitheater', 'Amusement Park', 'Arena', 'Attorney Office', 'Automobile or Truck', 'Automotive Service Station', 'Bank', 'Bar', 'Boarding House', 'Bus', 'Bus Stop', 'City Park', 'Coffee Shop', 'Convention Center', 'Doctor or Dentist office', 'Dormitory', 'Emergency Coordination Center', 'Factory', 'Ferry', 'Fire Station', 'Gas Station', 'Grocery Market', 'Group Home', 'Hospital', 'Hotel or Motel', 'Kiosk', 'Library', 'Long-Term Care Facility', 'Motor Bike', 'Muni-mesh Network', 'Museum', 'Passenger Terminal', 'Place of Worship', 'Police Station', 'Post Office', 'Prison or Jail', 'Private Residence', 'Professional Office', 'Research and Development Facility', 'Rest Area', 'Restaurant', 'Retail Store', 'School, Primary', 'School, Secondary', 'Ship or Boat', 'Shopping Mall', 'Stadium', 'Theater', 'Traffic Control', 'Train', 'University or College', 'Unspecified', 'Unspecified Assembly', 'Unspecified Business', 'Unspecified Educational', 'Unspecified Factory and Industrial', 'Unspecified Institutional', 'Unspecified Mercantile', 'Unspecified Outdoor', 'Unspecified Residential', 'Unspecified Storage', 'Unspecified Utility and Miscellaneous', 'Unspecified Vehicular', 'Zoo or Aquarium')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateNetworkWirelessSsidHotspot20RequestVenue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateNetworkWirelessSsidHotspot20RequestVenue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "type": obj.get("type")
        })
        return _obj



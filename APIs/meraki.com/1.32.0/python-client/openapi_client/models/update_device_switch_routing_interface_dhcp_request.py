# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.update_device_switch_routing_interface_dhcp_request_dhcp_options_inner import UpdateDeviceSwitchRoutingInterfaceDhcpRequestDhcpOptionsInner
from openapi_client.models.update_device_switch_routing_interface_dhcp_request_fixed_ip_assignments_inner import UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner
from openapi_client.models.update_device_switch_routing_interface_dhcp_request_reserved_ip_ranges_inner import UpdateDeviceSwitchRoutingInterfaceDhcpRequestReservedIpRangesInner
from typing import Optional, Set
from typing_extensions import Self

class UpdateDeviceSwitchRoutingInterfaceDhcpRequest(BaseModel):
    """
    UpdateDeviceSwitchRoutingInterfaceDhcpRequest
    """ # noqa: E501
    boot_file_name: Optional[StrictStr] = Field(default=None, description="The PXE boot server filename for the DHCP server running on the switch interface", alias="bootFileName")
    boot_next_server: Optional[StrictStr] = Field(default=None, description="The PXE boot server IP for the DHCP server running on the switch interface", alias="bootNextServer")
    boot_options_enabled: Optional[StrictBool] = Field(default=None, description="Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch interface", alias="bootOptionsEnabled")
    dhcp_lease_time: Optional[StrictStr] = Field(default=None, description="The DHCP lease time config for the dhcp server running on switch interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')", alias="dhcpLeaseTime")
    dhcp_mode: Optional[StrictStr] = Field(default=None, description="The DHCP mode options for the switch interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')", alias="dhcpMode")
    dhcp_options: Optional[List[UpdateDeviceSwitchRoutingInterfaceDhcpRequestDhcpOptionsInner]] = Field(default=None, description="Array of DHCP options consisting of code, type and value for the DHCP server running on the switch interface", alias="dhcpOptions")
    dhcp_relay_server_ips: Optional[List[StrictStr]] = Field(default=None, description="The DHCP relay server IPs to which DHCP packets would get relayed for the switch interface", alias="dhcpRelayServerIps")
    dns_custom_nameservers: Optional[List[StrictStr]] = Field(default=None, description="The DHCP name server IPs when DHCP name server option is 'custom'", alias="dnsCustomNameservers")
    dns_nameservers_option: Optional[StrictStr] = Field(default=None, description="The DHCP name server option for the dhcp server running on the switch interface ('googlePublicDns', 'openDns' or 'custom')", alias="dnsNameserversOption")
    fixed_ip_assignments: Optional[List[UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner]] = Field(default=None, description="Array of DHCP fixed IP assignments for the DHCP server running on the switch interface", alias="fixedIpAssignments")
    reserved_ip_ranges: Optional[List[UpdateDeviceSwitchRoutingInterfaceDhcpRequestReservedIpRangesInner]] = Field(default=None, description="Array of DHCP reserved IP assignments for the DHCP server running on the switch interface", alias="reservedIpRanges")
    __properties: ClassVar[List[str]] = ["bootFileName", "bootNextServer", "bootOptionsEnabled", "dhcpLeaseTime", "dhcpMode", "dhcpOptions", "dhcpRelayServerIps", "dnsCustomNameservers", "dnsNameserversOption", "fixedIpAssignments", "reservedIpRanges"]

    @field_validator('dhcp_lease_time')
    def dhcp_lease_time_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['1 day', '1 hour', '1 week', '12 hours', '30 minutes', '4 hours']):
            raise ValueError("must be one of enum values ('1 day', '1 hour', '1 week', '12 hours', '30 minutes', '4 hours')")
        return value

    @field_validator('dhcp_mode')
    def dhcp_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['dhcpDisabled', 'dhcpRelay', 'dhcpServer']):
            raise ValueError("must be one of enum values ('dhcpDisabled', 'dhcpRelay', 'dhcpServer')")
        return value

    @field_validator('dns_nameservers_option')
    def dns_nameservers_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['custom', 'googlePublicDns', 'openDns']):
            raise ValueError("must be one of enum values ('custom', 'googlePublicDns', 'openDns')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateDeviceSwitchRoutingInterfaceDhcpRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dhcp_options (list)
        _items = []
        if self.dhcp_options:
            for _item_dhcp_options in self.dhcp_options:
                if _item_dhcp_options:
                    _items.append(_item_dhcp_options.to_dict())
            _dict['dhcpOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fixed_ip_assignments (list)
        _items = []
        if self.fixed_ip_assignments:
            for _item_fixed_ip_assignments in self.fixed_ip_assignments:
                if _item_fixed_ip_assignments:
                    _items.append(_item_fixed_ip_assignments.to_dict())
            _dict['fixedIpAssignments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reserved_ip_ranges (list)
        _items = []
        if self.reserved_ip_ranges:
            for _item_reserved_ip_ranges in self.reserved_ip_ranges:
                if _item_reserved_ip_ranges:
                    _items.append(_item_reserved_ip_ranges.to_dict())
            _dict['reservedIpRanges'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateDeviceSwitchRoutingInterfaceDhcpRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bootFileName": obj.get("bootFileName"),
            "bootNextServer": obj.get("bootNextServer"),
            "bootOptionsEnabled": obj.get("bootOptionsEnabled"),
            "dhcpLeaseTime": obj.get("dhcpLeaseTime"),
            "dhcpMode": obj.get("dhcpMode"),
            "dhcpOptions": [UpdateDeviceSwitchRoutingInterfaceDhcpRequestDhcpOptionsInner.from_dict(_item) for _item in obj["dhcpOptions"]] if obj.get("dhcpOptions") is not None else None,
            "dhcpRelayServerIps": obj.get("dhcpRelayServerIps"),
            "dnsCustomNameservers": obj.get("dnsCustomNameservers"),
            "dnsNameserversOption": obj.get("dnsNameserversOption"),
            "fixedIpAssignments": [UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner.from_dict(_item) for _item in obj["fixedIpAssignments"]] if obj.get("fixedIpAssignments") is not None else None,
            "reservedIpRanges": [UpdateDeviceSwitchRoutingInterfaceDhcpRequestReservedIpRangesInner.from_dict(_item) for _item in obj["reservedIpRanges"]] if obj.get("reservedIpRanges") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_network_appliance_vlans200_response_inner_ipv6 import GetNetworkApplianceVlans200ResponseInnerIpv6
from openapi_client.models.get_network_appliance_vlans200_response_inner_mandatory_dhcp import GetNetworkApplianceVlans200ResponseInnerMandatoryDhcp
from typing import Optional, Set
from typing_extensions import Self

class CreateNetworkApplianceVlan201Response(BaseModel):
    """
    CreateNetworkApplianceVlan201Response
    """ # noqa: E501
    appliance_ip: Optional[StrictStr] = Field(default=None, description="The local IP of the appliance on the VLAN", alias="applianceIp")
    cidr: Optional[StrictStr] = Field(default=None, description="CIDR of the pool of subnets. Applicable only for template network. Each network bound to the template will automatically pick a subnet from this pool to build its own VLAN.")
    group_policy_id: Optional[StrictStr] = Field(default=None, description="The id of the desired group policy to apply to the VLAN", alias="groupPolicyId")
    id: Optional[StrictStr] = Field(default=None, description="The VLAN ID of the VLAN")
    interface_id: Optional[StrictStr] = Field(default=None, description="The interface ID of the VLAN", alias="interfaceId")
    ipv6: Optional[GetNetworkApplianceVlans200ResponseInnerIpv6] = None
    mandatory_dhcp: Optional[GetNetworkApplianceVlans200ResponseInnerMandatoryDhcp] = Field(default=None, alias="mandatoryDhcp")
    mask: Optional[StrictInt] = Field(default=None, description="Mask used for the subnet of all bound to the template networks. Applicable only for template network.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the VLAN")
    subnet: Optional[StrictStr] = Field(default=None, description="The subnet of the VLAN")
    template_vlan_type: Optional[StrictStr] = Field(default='same', description="Type of subnetting of the VLAN. Applicable only for template network.", alias="templateVlanType")
    __properties: ClassVar[List[str]] = ["applianceIp", "cidr", "groupPolicyId", "id", "interfaceId", "ipv6", "mandatoryDhcp", "mask", "name", "subnet", "templateVlanType"]

    @field_validator('template_vlan_type')
    def template_vlan_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['same', 'unique']):
            raise ValueError("must be one of enum values ('same', 'unique')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateNetworkApplianceVlan201Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ipv6
        if self.ipv6:
            _dict['ipv6'] = self.ipv6.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mandatory_dhcp
        if self.mandatory_dhcp:
            _dict['mandatoryDhcp'] = self.mandatory_dhcp.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateNetworkApplianceVlan201Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applianceIp": obj.get("applianceIp"),
            "cidr": obj.get("cidr"),
            "groupPolicyId": obj.get("groupPolicyId"),
            "id": obj.get("id"),
            "interfaceId": obj.get("interfaceId"),
            "ipv6": GetNetworkApplianceVlans200ResponseInnerIpv6.from_dict(obj["ipv6"]) if obj.get("ipv6") is not None else None,
            "mandatoryDhcp": GetNetworkApplianceVlans200ResponseInnerMandatoryDhcp.from_dict(obj["mandatoryDhcp"]) if obj.get("mandatoryDhcp") is not None else None,
            "mask": obj.get("mask"),
            "name": obj.get("name"),
            "subnet": obj.get("subnet"),
            "templateVlanType": obj.get("templateVlanType") if obj.get("templateVlanType") is not None else 'same'
        })
        return _obj



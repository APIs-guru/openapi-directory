# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateOrganizationNetworkRequest(BaseModel):
    """
    CreateOrganizationNetworkRequest
    """ # noqa: E501
    copy_from_network_id: Optional[StrictStr] = Field(default=None, description="The ID of the network to copy configuration from. Other provided parameters will override the copied configuration, except type which must match this network's type exactly.", alias="copyFromNetworkId")
    name: StrictStr = Field(description="The name of the new network")
    notes: Optional[StrictStr] = Field(default=None, description="Add any notes or additional information about this network here.")
    product_types: List[StrictStr] = Field(description="The product type(s) of the new network. If more than one type is included, the network will be a combined network.", alias="productTypes")
    tags: Optional[List[StrictStr]] = Field(default=None, description="A list of tags to be applied to the network")
    time_zone: Optional[StrictStr] = Field(default=None, description="The timezone of the network. For a list of allowed timezones, please see the 'TZ' column in the table in <a target='_blank' href='https://en.wikipedia.org/wiki/List_of_tz_database_time_zones'>this article.</a>", alias="timeZone")
    __properties: ClassVar[List[str]] = ["copyFromNetworkId", "name", "notes", "productTypes", "tags", "timeZone"]

    @field_validator('product_types')
    def product_types_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['appliance', 'camera', 'cellularGateway', 'sensor', 'switch', 'systemsManager', 'wireless']):
                raise ValueError("each list item must be one of ('appliance', 'camera', 'cellularGateway', 'sensor', 'switch', 'systemsManager', 'wireless')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateOrganizationNetworkRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateOrganizationNetworkRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "copyFromNetworkId": obj.get("copyFromNetworkId"),
            "name": obj.get("name"),
            "notes": obj.get("notes"),
            "productTypes": obj.get("productTypes"),
            "tags": obj.get("tags"),
            "timeZone": obj.get("timeZone")
        })
        return _obj



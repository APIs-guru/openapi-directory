# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.update_network_wireless_ssid_hotspot20_request_mcc_mncs_inner import UpdateNetworkWirelessSsidHotspot20RequestMccMncsInner
from openapi_client.models.update_network_wireless_ssid_hotspot20_request_nai_realms_inner import UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInner
from openapi_client.models.update_network_wireless_ssid_hotspot20_request_operator import UpdateNetworkWirelessSsidHotspot20RequestOperator
from openapi_client.models.update_network_wireless_ssid_hotspot20_request_venue import UpdateNetworkWirelessSsidHotspot20RequestVenue
from typing import Optional, Set
from typing_extensions import Self

class UpdateNetworkWirelessSsidHotspot20Request(BaseModel):
    """
    UpdateNetworkWirelessSsidHotspot20Request
    """ # noqa: E501
    domains: Optional[List[StrictStr]] = Field(default=None, description="An array of domain names")
    enabled: Optional[StrictBool] = Field(default=None, description="Whether or not Hotspot 2.0 for this SSID is enabled")
    mcc_mncs: Optional[List[UpdateNetworkWirelessSsidHotspot20RequestMccMncsInner]] = Field(default=None, description="An array of MCC/MNC pairs", alias="mccMncs")
    nai_realms: Optional[List[UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInner]] = Field(default=None, description="An array of NAI realms", alias="naiRealms")
    network_access_type: Optional[StrictStr] = Field(default=None, description="The network type of this SSID ('Private network', 'Private network with guest access', 'Chargeable public network', 'Free public network', 'Personal device network', 'Emergency services only network', 'Test or experimental', 'Wildcard')", alias="networkAccessType")
    operator: Optional[UpdateNetworkWirelessSsidHotspot20RequestOperator] = None
    roam_consort_ois: Optional[List[StrictStr]] = Field(default=None, description="An array of roaming consortium OIs (hexadecimal number 3-5 octets in length)", alias="roamConsortOis")
    venue: Optional[UpdateNetworkWirelessSsidHotspot20RequestVenue] = None
    __properties: ClassVar[List[str]] = ["domains", "enabled", "mccMncs", "naiRealms", "networkAccessType", "operator", "roamConsortOis", "venue"]

    @field_validator('network_access_type')
    def network_access_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Chargeable public network', 'Emergency services only network', 'Free public network', 'Personal device network', 'Private network', 'Private network with guest access', 'Test or experimental', 'Wildcard']):
            raise ValueError("must be one of enum values ('Chargeable public network', 'Emergency services only network', 'Free public network', 'Personal device network', 'Private network', 'Private network with guest access', 'Test or experimental', 'Wildcard')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateNetworkWirelessSsidHotspot20Request from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in mcc_mncs (list)
        _items = []
        if self.mcc_mncs:
            for _item_mcc_mncs in self.mcc_mncs:
                if _item_mcc_mncs:
                    _items.append(_item_mcc_mncs.to_dict())
            _dict['mccMncs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in nai_realms (list)
        _items = []
        if self.nai_realms:
            for _item_nai_realms in self.nai_realms:
                if _item_nai_realms:
                    _items.append(_item_nai_realms.to_dict())
            _dict['naiRealms'] = _items
        # override the default output from pydantic by calling `to_dict()` of operator
        if self.operator:
            _dict['operator'] = self.operator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of venue
        if self.venue:
            _dict['venue'] = self.venue.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateNetworkWirelessSsidHotspot20Request from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "domains": obj.get("domains"),
            "enabled": obj.get("enabled"),
            "mccMncs": [UpdateNetworkWirelessSsidHotspot20RequestMccMncsInner.from_dict(_item) for _item in obj["mccMncs"]] if obj.get("mccMncs") is not None else None,
            "naiRealms": [UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInner.from_dict(_item) for _item in obj["naiRealms"]] if obj.get("naiRealms") is not None else None,
            "networkAccessType": obj.get("networkAccessType"),
            "operator": UpdateNetworkWirelessSsidHotspot20RequestOperator.from_dict(obj["operator"]) if obj.get("operator") is not None else None,
            "roamConsortOis": obj.get("roamConsortOis"),
            "venue": UpdateNetworkWirelessSsidHotspot20RequestVenue.from_dict(obj["venue"]) if obj.get("venue") is not None else None
        })
        return _obj



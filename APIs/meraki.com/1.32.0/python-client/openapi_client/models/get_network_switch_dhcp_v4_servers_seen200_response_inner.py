# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_network_switch_dhcp_v4_servers_seen200_response_inner_device import GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerDevice
from openapi_client.models.get_network_switch_dhcp_v4_servers_seen200_response_inner_ipv4 import GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerIpv4
from openapi_client.models.get_network_switch_dhcp_v4_servers_seen200_response_inner_last_ack import GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastAck
from openapi_client.models.get_network_switch_dhcp_v4_servers_seen200_response_inner_last_packet import GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacket
from openapi_client.models.get_network_switch_dhcp_v4_servers_seen200_response_inner_seen_by_inner import GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerSeenByInner
from typing import Optional, Set
from typing_extensions import Self

class GetNetworkSwitchDhcpV4ServersSeen200ResponseInner(BaseModel):
    """
    GetNetworkSwitchDhcpV4ServersSeen200ResponseInner
    """ # noqa: E501
    client_id: Optional[StrictStr] = Field(default=None, description="Client id of the server if available.", alias="clientId")
    device: Optional[GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerDevice] = None
    ipv4: Optional[GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerIpv4] = None
    is_allowed: Optional[StrictBool] = Field(default=None, description="Whether the server is allowed or blocked. Always true for configured servers.", alias="isAllowed")
    is_configured: Optional[StrictBool] = Field(default=None, description="Whether the server is configured.", alias="isConfigured")
    last_ack: Optional[GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastAck] = Field(default=None, alias="lastAck")
    last_packet: Optional[GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacket] = Field(default=None, alias="lastPacket")
    last_seen_at: Optional[datetime] = Field(default=None, description="Last time the server was seen.", alias="lastSeenAt")
    mac: Optional[StrictStr] = Field(default=None, description="Mac address of the server.")
    seen_by: Optional[List[GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerSeenByInner]] = Field(default=None, description="Devices that saw the server.", alias="seenBy")
    type: Optional[StrictStr] = Field(default=None, description="server type. Can be a 'device', 'stack', or 'discovered' (i.e client).")
    vlan: Optional[StrictInt] = Field(default=None, description="Vlan id of the server.")
    __properties: ClassVar[List[str]] = ["clientId", "device", "ipv4", "isAllowed", "isConfigured", "lastAck", "lastPacket", "lastSeenAt", "mac", "seenBy", "type", "vlan"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['device', 'discovered', 'stack']):
            raise ValueError("must be one of enum values ('device', 'discovered', 'stack')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetNetworkSwitchDhcpV4ServersSeen200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of device
        if self.device:
            _dict['device'] = self.device.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ipv4
        if self.ipv4:
            _dict['ipv4'] = self.ipv4.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_ack
        if self.last_ack:
            _dict['lastAck'] = self.last_ack.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_packet
        if self.last_packet:
            _dict['lastPacket'] = self.last_packet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in seen_by (list)
        _items = []
        if self.seen_by:
            for _item_seen_by in self.seen_by:
                if _item_seen_by:
                    _items.append(_item_seen_by.to_dict())
            _dict['seenBy'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetNetworkSwitchDhcpV4ServersSeen200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientId": obj.get("clientId"),
            "device": GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerDevice.from_dict(obj["device"]) if obj.get("device") is not None else None,
            "ipv4": GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerIpv4.from_dict(obj["ipv4"]) if obj.get("ipv4") is not None else None,
            "isAllowed": obj.get("isAllowed"),
            "isConfigured": obj.get("isConfigured"),
            "lastAck": GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastAck.from_dict(obj["lastAck"]) if obj.get("lastAck") is not None else None,
            "lastPacket": GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacket.from_dict(obj["lastPacket"]) if obj.get("lastPacket") is not None else None,
            "lastSeenAt": obj.get("lastSeenAt"),
            "mac": obj.get("mac"),
            "seenBy": [GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerSeenByInner.from_dict(_item) for _item in obj["seenBy"]] if obj.get("seenBy") is not None else None,
            "type": obj.get("type"),
            "vlan": obj.get("vlan")
        })
        return _obj



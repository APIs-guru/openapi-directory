# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_network_wireless_ssid_splash_settings200_response_billing import GetNetworkWirelessSsidSplashSettings200ResponseBilling
from openapi_client.models.get_network_wireless_ssid_splash_settings200_response_guest_sponsorship import GetNetworkWirelessSsidSplashSettings200ResponseGuestSponsorship
from openapi_client.models.get_network_wireless_ssid_splash_settings200_response_self_registration import GetNetworkWirelessSsidSplashSettings200ResponseSelfRegistration
from openapi_client.models.get_network_wireless_ssid_splash_settings200_response_sentry_enrollment import GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment
from openapi_client.models.get_network_wireless_ssid_splash_settings200_response_splash_image import GetNetworkWirelessSsidSplashSettings200ResponseSplashImage
from openapi_client.models.get_network_wireless_ssid_splash_settings200_response_splash_logo import GetNetworkWirelessSsidSplashSettings200ResponseSplashLogo
from openapi_client.models.get_network_wireless_ssid_splash_settings200_response_splash_prepaid_front import GetNetworkWirelessSsidSplashSettings200ResponseSplashPrepaidFront
from typing import Optional, Set
from typing_extensions import Self

class GetNetworkWirelessSsidSplashSettings200Response(BaseModel):
    """
    GetNetworkWirelessSsidSplashSettings200Response
    """ # noqa: E501
    allow_simultaneous_logins: Optional[StrictBool] = Field(default=None, description="Whether or not to allow simultaneous logins from different devices.", alias="allowSimultaneousLogins")
    billing: Optional[GetNetworkWirelessSsidSplashSettings200ResponseBilling] = None
    block_all_traffic_before_sign_on: Optional[StrictBool] = Field(default=None, description="How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.", alias="blockAllTrafficBeforeSignOn")
    controller_disconnection_behavior: Optional[StrictStr] = Field(default=None, description="How login attempts should be handled when the controller is unreachable.", alias="controllerDisconnectionBehavior")
    guest_sponsorship: Optional[GetNetworkWirelessSsidSplashSettings200ResponseGuestSponsorship] = Field(default=None, alias="guestSponsorship")
    redirect_url: Optional[StrictStr] = Field(default=None, description="The custom redirect URL where the users will go after the splash page.", alias="redirectUrl")
    self_registration: Optional[GetNetworkWirelessSsidSplashSettings200ResponseSelfRegistration] = Field(default=None, alias="selfRegistration")
    sentry_enrollment: Optional[GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment] = Field(default=None, alias="sentryEnrollment")
    splash_image: Optional[GetNetworkWirelessSsidSplashSettings200ResponseSplashImage] = Field(default=None, alias="splashImage")
    splash_logo: Optional[GetNetworkWirelessSsidSplashSettings200ResponseSplashLogo] = Field(default=None, alias="splashLogo")
    splash_page: Optional[StrictStr] = Field(default=None, description="The type of splash page for this SSID", alias="splashPage")
    splash_prepaid_front: Optional[GetNetworkWirelessSsidSplashSettings200ResponseSplashPrepaidFront] = Field(default=None, alias="splashPrepaidFront")
    splash_timeout: Optional[StrictInt] = Field(default=None, description="Splash timeout in minutes.", alias="splashTimeout")
    splash_url: Optional[StrictStr] = Field(default=None, description="The custom splash URL of the click-through splash page.", alias="splashUrl")
    ssid_number: Optional[StrictInt] = Field(default=None, description="SSID number", alias="ssidNumber")
    use_redirect_url: Optional[StrictBool] = Field(default=None, description="The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page.", alias="useRedirectUrl")
    use_splash_url: Optional[StrictBool] = Field(default=None, description="Boolean indicating whether the users will be redirected to the custom splash url", alias="useSplashUrl")
    welcome_message: Optional[StrictStr] = Field(default=None, description="The welcome message for the users on the splash page.", alias="welcomeMessage")
    __properties: ClassVar[List[str]] = ["allowSimultaneousLogins", "billing", "blockAllTrafficBeforeSignOn", "controllerDisconnectionBehavior", "guestSponsorship", "redirectUrl", "selfRegistration", "sentryEnrollment", "splashImage", "splashLogo", "splashPage", "splashPrepaidFront", "splashTimeout", "splashUrl", "ssidNumber", "useRedirectUrl", "useSplashUrl", "welcomeMessage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetNetworkWirelessSsidSplashSettings200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing
        if self.billing:
            _dict['billing'] = self.billing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of guest_sponsorship
        if self.guest_sponsorship:
            _dict['guestSponsorship'] = self.guest_sponsorship.to_dict()
        # override the default output from pydantic by calling `to_dict()` of self_registration
        if self.self_registration:
            _dict['selfRegistration'] = self.self_registration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sentry_enrollment
        if self.sentry_enrollment:
            _dict['sentryEnrollment'] = self.sentry_enrollment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of splash_image
        if self.splash_image:
            _dict['splashImage'] = self.splash_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of splash_logo
        if self.splash_logo:
            _dict['splashLogo'] = self.splash_logo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of splash_prepaid_front
        if self.splash_prepaid_front:
            _dict['splashPrepaidFront'] = self.splash_prepaid_front.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetNetworkWirelessSsidSplashSettings200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowSimultaneousLogins": obj.get("allowSimultaneousLogins"),
            "billing": GetNetworkWirelessSsidSplashSettings200ResponseBilling.from_dict(obj["billing"]) if obj.get("billing") is not None else None,
            "blockAllTrafficBeforeSignOn": obj.get("blockAllTrafficBeforeSignOn"),
            "controllerDisconnectionBehavior": obj.get("controllerDisconnectionBehavior"),
            "guestSponsorship": GetNetworkWirelessSsidSplashSettings200ResponseGuestSponsorship.from_dict(obj["guestSponsorship"]) if obj.get("guestSponsorship") is not None else None,
            "redirectUrl": obj.get("redirectUrl"),
            "selfRegistration": GetNetworkWirelessSsidSplashSettings200ResponseSelfRegistration.from_dict(obj["selfRegistration"]) if obj.get("selfRegistration") is not None else None,
            "sentryEnrollment": GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment.from_dict(obj["sentryEnrollment"]) if obj.get("sentryEnrollment") is not None else None,
            "splashImage": GetNetworkWirelessSsidSplashSettings200ResponseSplashImage.from_dict(obj["splashImage"]) if obj.get("splashImage") is not None else None,
            "splashLogo": GetNetworkWirelessSsidSplashSettings200ResponseSplashLogo.from_dict(obj["splashLogo"]) if obj.get("splashLogo") is not None else None,
            "splashPage": obj.get("splashPage"),
            "splashPrepaidFront": GetNetworkWirelessSsidSplashSettings200ResponseSplashPrepaidFront.from_dict(obj["splashPrepaidFront"]) if obj.get("splashPrepaidFront") is not None else None,
            "splashTimeout": obj.get("splashTimeout"),
            "splashUrl": obj.get("splashUrl"),
            "ssidNumber": obj.get("ssidNumber"),
            "useRedirectUrl": obj.get("useRedirectUrl"),
            "useSplashUrl": obj.get("useSplashUrl"),
            "welcomeMessage": obj.get("welcomeMessage")
        })
        return _obj



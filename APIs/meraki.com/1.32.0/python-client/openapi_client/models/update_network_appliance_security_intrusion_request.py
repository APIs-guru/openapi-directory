# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.update_network_appliance_security_intrusion_request_protected_networks import UpdateNetworkApplianceSecurityIntrusionRequestProtectedNetworks
from typing import Optional, Set
from typing_extensions import Self

class UpdateNetworkApplianceSecurityIntrusionRequest(BaseModel):
    """
    UpdateNetworkApplianceSecurityIntrusionRequest
    """ # noqa: E501
    ids_rulesets: Optional[StrictStr] = Field(default=None, description="Set the detection ruleset 'connectivity'/'balanced'/'security' (optional - omitting will leave current config unchanged). Default value is 'balanced' if none currently saved", alias="idsRulesets")
    mode: Optional[StrictStr] = Field(default=None, description="Set mode to 'disabled'/'detection'/'prevention' (optional - omitting will leave current config unchanged)")
    protected_networks: Optional[UpdateNetworkApplianceSecurityIntrusionRequestProtectedNetworks] = Field(default=None, alias="protectedNetworks")
    __properties: ClassVar[List[str]] = ["idsRulesets", "mode", "protectedNetworks"]

    @field_validator('ids_rulesets')
    def ids_rulesets_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['balanced', 'connectivity', 'security']):
            raise ValueError("must be one of enum values ('balanced', 'connectivity', 'security')")
        return value

    @field_validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['detection', 'disabled', 'prevention']):
            raise ValueError("must be one of enum values ('detection', 'disabled', 'prevention')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateNetworkApplianceSecurityIntrusionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of protected_networks
        if self.protected_networks:
            _dict['protectedNetworks'] = self.protected_networks.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateNetworkApplianceSecurityIntrusionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "idsRulesets": obj.get("idsRulesets"),
            "mode": obj.get("mode"),
            "protectedNetworks": UpdateNetworkApplianceSecurityIntrusionRequestProtectedNetworks.from_dict(obj["protectedNetworks"]) if obj.get("protectedNetworks") is not None else None
        })
        return _obj



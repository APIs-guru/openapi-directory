# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_network_events200_response_events_inner_event_data import GetNetworkEvents200ResponseEventsInnerEventData
from typing import Optional, Set
from typing_extensions import Self

class GetNetworkEvents200ResponseEventsInner(BaseModel):
    """
    GetNetworkEvents200ResponseEventsInner
    """ # noqa: E501
    category: Optional[StrictStr] = Field(default=None, description="The category that the event type belongs to")
    client_description: Optional[StrictStr] = Field(default=None, description="A description of the client. This is usually the client's device name.", alias="clientDescription")
    client_id: Optional[StrictStr] = Field(default=None, description="A string identifying the client. This could be a client's MAC or IP address", alias="clientId")
    client_mac: Optional[StrictStr] = Field(default=None, description="The client's MAC address.", alias="clientMac")
    description: Optional[StrictStr] = Field(default=None, description="A description of the event the happened.")
    device_name: Optional[StrictStr] = Field(default=None, description="The name of the device. Only shown if the device is an access point.", alias="deviceName")
    device_serial: Optional[StrictStr] = Field(default=None, description="The serial number of the device. Only shown if the device is an access point.", alias="deviceSerial")
    event_data: Optional[GetNetworkEvents200ResponseEventsInnerEventData] = Field(default=None, alias="eventData")
    network_id: Optional[StrictStr] = Field(default=None, description="The ID of the network.", alias="networkId")
    occurred_at: Optional[StrictStr] = Field(default=None, description="An UTC ISO8601 string of the time the event occurred at.", alias="occurredAt")
    ssid_number: Optional[StrictInt] = Field(default=None, description="The SSID number of the device.", alias="ssidNumber")
    type: Optional[StrictStr] = Field(default=None, description="The type of event being listed.")
    __properties: ClassVar[List[str]] = ["category", "clientDescription", "clientId", "clientMac", "description", "deviceName", "deviceSerial", "eventData", "networkId", "occurredAt", "ssidNumber", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetNetworkEvents200ResponseEventsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of event_data
        if self.event_data:
            _dict['eventData'] = self.event_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetNetworkEvents200ResponseEventsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "category": obj.get("category"),
            "clientDescription": obj.get("clientDescription"),
            "clientId": obj.get("clientId"),
            "clientMac": obj.get("clientMac"),
            "description": obj.get("description"),
            "deviceName": obj.get("deviceName"),
            "deviceSerial": obj.get("deviceSerial"),
            "eventData": GetNetworkEvents200ResponseEventsInnerEventData.from_dict(obj["eventData"]) if obj.get("eventData") is not None else None,
            "networkId": obj.get("networkId"),
            "occurredAt": obj.get("occurredAt"),
            "ssidNumber": obj.get("ssidNumber"),
            "type": obj.get("type")
        })
        return _obj



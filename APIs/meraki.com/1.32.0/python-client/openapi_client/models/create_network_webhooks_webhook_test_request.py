# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateNetworkWebhooksWebhookTestRequest(BaseModel):
    """
    CreateNetworkWebhooksWebhookTestRequest
    """ # noqa: E501
    alert_type_id: Optional[StrictStr] = Field(default='power_supply_down', description="The type of alert which the test webhook will send. Optional. Defaults to power_supply_down.", alias="alertTypeId")
    payload_template_id: Optional[StrictStr] = Field(default=None, description="The ID of the payload template of the test webhook. Defaults to the HTTP server's template ID if one exists for the given URL, or Generic template ID otherwise", alias="payloadTemplateId")
    payload_template_name: Optional[StrictStr] = Field(default=None, description="The name of the payload template.", alias="payloadTemplateName")
    shared_secret: Optional[StrictStr] = Field(default='', description="The shared secret the test webhook will send. Optional. Defaults to an empty string.", alias="sharedSecret")
    url: StrictStr = Field(description="The URL where the test webhook will be sent")
    __properties: ClassVar[List[str]] = ["alertTypeId", "payloadTemplateId", "payloadTemplateName", "sharedSecret", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateNetworkWebhooksWebhookTestRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateNetworkWebhooksWebhookTestRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alertTypeId": obj.get("alertTypeId") if obj.get("alertTypeId") is not None else 'power_supply_down',
            "payloadTemplateId": obj.get("payloadTemplateId"),
            "payloadTemplateName": obj.get("payloadTemplateName"),
            "sharedSecret": obj.get("sharedSecret") if obj.get("sharedSecret") is not None else '',
            "url": obj.get("url")
        })
        return _obj



# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.get_device_switch_ports_statuses200_response_inner_cdp import GetDeviceSwitchPortsStatuses200ResponseInnerCdp
from openapi_client.models.get_device_switch_ports_statuses200_response_inner_lldp import GetDeviceSwitchPortsStatuses200ResponseInnerLldp
from openapi_client.models.get_device_switch_ports_statuses200_response_inner_secure_port import GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort
from openapi_client.models.get_device_switch_ports_statuses200_response_inner_traffic_in_kbps import GetDeviceSwitchPortsStatuses200ResponseInnerTrafficInKbps
from openapi_client.models.get_device_switch_ports_statuses200_response_inner_usage_in_kb import GetDeviceSwitchPortsStatuses200ResponseInnerUsageInKb
from typing import Optional, Set
from typing_extensions import Self

class GetDeviceSwitchPortsStatuses200ResponseInner(BaseModel):
    """
    GetDeviceSwitchPortsStatuses200ResponseInner
    """ # noqa: E501
    cdp: Optional[GetDeviceSwitchPortsStatuses200ResponseInnerCdp] = None
    client_count: Optional[StrictInt] = Field(default=None, description="The number of clients connected through this port.", alias="clientCount")
    duplex: Optional[StrictStr] = Field(default=None, description="The current duplex of a connected port.")
    enabled: Optional[StrictBool] = Field(default=None, description="Whether the port is configured to be enabled.")
    errors: Optional[List[StrictStr]] = Field(default=None, description="All errors present on the port.")
    is_uplink: Optional[StrictBool] = Field(default=None, description="Whether the port is the switch's uplink.", alias="isUplink")
    lldp: Optional[GetDeviceSwitchPortsStatuses200ResponseInnerLldp] = None
    port_id: Optional[StrictStr] = Field(default=None, description="The string identifier of this port on the switch. This is commonly just the port number but may contain additional identifying information such as the slot and module-type if the port is located on a port module.", alias="portId")
    power_usage_in_wh: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="How much power (in watt-hours) has been delivered by this port during the timespan.", alias="powerUsageInWh")
    secure_port: Optional[GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort] = Field(default=None, alias="securePort")
    speed: Optional[StrictStr] = Field(default=None, description="The current data transfer rate which the port is operating at.")
    status: Optional[StrictStr] = Field(default=None, description="The current connection status of the port.")
    traffic_in_kbps: Optional[GetDeviceSwitchPortsStatuses200ResponseInnerTrafficInKbps] = Field(default=None, alias="trafficInKbps")
    usage_in_kb: Optional[GetDeviceSwitchPortsStatuses200ResponseInnerUsageInKb] = Field(default=None, alias="usageInKb")
    warnings: Optional[List[StrictStr]] = Field(default=None, description="All warnings present on the port.")
    __properties: ClassVar[List[str]] = ["cdp", "clientCount", "duplex", "enabled", "errors", "isUplink", "lldp", "portId", "powerUsageInWh", "securePort", "speed", "status", "trafficInKbps", "usageInKb", "warnings"]

    @field_validator('duplex')
    def duplex_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['', 'full', 'half']):
            raise ValueError("must be one of enum values ('', 'full', 'half')")
        return value

    @field_validator('speed')
    def speed_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['', '1 Gbps', '10 Gbps', '10 Mbps', '100 Gbps', '100 Mbps', '2.5 Gbps', '20 Gbps', '40 Gbps', '5 Gbps']):
            raise ValueError("must be one of enum values ('', '1 Gbps', '10 Gbps', '10 Mbps', '100 Gbps', '100 Mbps', '2.5 Gbps', '20 Gbps', '40 Gbps', '5 Gbps')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Connected', 'Disabled', 'Disconnected']):
            raise ValueError("must be one of enum values ('Connected', 'Disabled', 'Disconnected')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetDeviceSwitchPortsStatuses200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cdp
        if self.cdp:
            _dict['cdp'] = self.cdp.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lldp
        if self.lldp:
            _dict['lldp'] = self.lldp.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secure_port
        if self.secure_port:
            _dict['securePort'] = self.secure_port.to_dict()
        # override the default output from pydantic by calling `to_dict()` of traffic_in_kbps
        if self.traffic_in_kbps:
            _dict['trafficInKbps'] = self.traffic_in_kbps.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usage_in_kb
        if self.usage_in_kb:
            _dict['usageInKb'] = self.usage_in_kb.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetDeviceSwitchPortsStatuses200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cdp": GetDeviceSwitchPortsStatuses200ResponseInnerCdp.from_dict(obj["cdp"]) if obj.get("cdp") is not None else None,
            "clientCount": obj.get("clientCount"),
            "duplex": obj.get("duplex"),
            "enabled": obj.get("enabled"),
            "errors": obj.get("errors"),
            "isUplink": obj.get("isUplink"),
            "lldp": GetDeviceSwitchPortsStatuses200ResponseInnerLldp.from_dict(obj["lldp"]) if obj.get("lldp") is not None else None,
            "portId": obj.get("portId"),
            "powerUsageInWh": obj.get("powerUsageInWh"),
            "securePort": GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.from_dict(obj["securePort"]) if obj.get("securePort") is not None else None,
            "speed": obj.get("speed"),
            "status": obj.get("status"),
            "trafficInKbps": GetDeviceSwitchPortsStatuses200ResponseInnerTrafficInKbps.from_dict(obj["trafficInKbps"]) if obj.get("trafficInKbps") is not None else None,
            "usageInKb": GetDeviceSwitchPortsStatuses200ResponseInnerUsageInKb.from_dict(obj["usageInKb"]) if obj.get("usageInKb") is not None else None,
            "warnings": obj.get("warnings")
        })
        return _obj



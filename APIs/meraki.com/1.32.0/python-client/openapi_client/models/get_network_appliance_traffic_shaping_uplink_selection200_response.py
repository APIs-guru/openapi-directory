# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_network_appliance_traffic_shaping_uplink_selection200_response_failover_and_failback import GetNetworkApplianceTrafficShapingUplinkSelection200ResponseFailoverAndFailback
from openapi_client.models.get_network_appliance_traffic_shaping_uplink_selection200_response_vpn_traffic_uplink_preferences_inner import GetNetworkApplianceTrafficShapingUplinkSelection200ResponseVpnTrafficUplinkPreferencesInner
from openapi_client.models.get_network_appliance_traffic_shaping_uplink_selection200_response_wan_traffic_uplink_preferences_inner import GetNetworkApplianceTrafficShapingUplinkSelection200ResponseWanTrafficUplinkPreferencesInner
from typing import Optional, Set
from typing_extensions import Self

class GetNetworkApplianceTrafficShapingUplinkSelection200Response(BaseModel):
    """
    GetNetworkApplianceTrafficShapingUplinkSelection200Response
    """ # noqa: E501
    active_active_auto_vpn_enabled: Optional[StrictBool] = Field(default=None, description="Whether active-active AutoVPN is enabled", alias="activeActiveAutoVpnEnabled")
    default_uplink: Optional[StrictStr] = Field(default=None, description="The default uplink. Must be one of: 'wan1' or 'wan2'", alias="defaultUplink")
    failover_and_failback: Optional[GetNetworkApplianceTrafficShapingUplinkSelection200ResponseFailoverAndFailback] = Field(default=None, alias="failoverAndFailback")
    load_balancing_enabled: Optional[StrictBool] = Field(default=None, description="Whether load balancing is enabled", alias="loadBalancingEnabled")
    vpn_traffic_uplink_preferences: Optional[List[GetNetworkApplianceTrafficShapingUplinkSelection200ResponseVpnTrafficUplinkPreferencesInner]] = Field(default=None, description="Uplink preference rules for VPN traffic", alias="vpnTrafficUplinkPreferences")
    wan_traffic_uplink_preferences: Optional[List[GetNetworkApplianceTrafficShapingUplinkSelection200ResponseWanTrafficUplinkPreferencesInner]] = Field(default=None, description="Uplink preference rules for WAN traffic", alias="wanTrafficUplinkPreferences")
    __properties: ClassVar[List[str]] = ["activeActiveAutoVpnEnabled", "defaultUplink", "failoverAndFailback", "loadBalancingEnabled", "vpnTrafficUplinkPreferences", "wanTrafficUplinkPreferences"]

    @field_validator('default_uplink')
    def default_uplink_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['wan1', 'wan2']):
            raise ValueError("must be one of enum values ('wan1', 'wan2')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetNetworkApplianceTrafficShapingUplinkSelection200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of failover_and_failback
        if self.failover_and_failback:
            _dict['failoverAndFailback'] = self.failover_and_failback.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in vpn_traffic_uplink_preferences (list)
        _items = []
        if self.vpn_traffic_uplink_preferences:
            for _item_vpn_traffic_uplink_preferences in self.vpn_traffic_uplink_preferences:
                if _item_vpn_traffic_uplink_preferences:
                    _items.append(_item_vpn_traffic_uplink_preferences.to_dict())
            _dict['vpnTrafficUplinkPreferences'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in wan_traffic_uplink_preferences (list)
        _items = []
        if self.wan_traffic_uplink_preferences:
            for _item_wan_traffic_uplink_preferences in self.wan_traffic_uplink_preferences:
                if _item_wan_traffic_uplink_preferences:
                    _items.append(_item_wan_traffic_uplink_preferences.to_dict())
            _dict['wanTrafficUplinkPreferences'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetNetworkApplianceTrafficShapingUplinkSelection200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeActiveAutoVpnEnabled": obj.get("activeActiveAutoVpnEnabled"),
            "defaultUplink": obj.get("defaultUplink"),
            "failoverAndFailback": GetNetworkApplianceTrafficShapingUplinkSelection200ResponseFailoverAndFailback.from_dict(obj["failoverAndFailback"]) if obj.get("failoverAndFailback") is not None else None,
            "loadBalancingEnabled": obj.get("loadBalancingEnabled"),
            "vpnTrafficUplinkPreferences": [GetNetworkApplianceTrafficShapingUplinkSelection200ResponseVpnTrafficUplinkPreferencesInner.from_dict(_item) for _item in obj["vpnTrafficUplinkPreferences"]] if obj.get("vpnTrafficUplinkPreferences") is not None else None,
            "wanTrafficUplinkPreferences": [GetNetworkApplianceTrafficShapingUplinkSelection200ResponseWanTrafficUplinkPreferencesInner.from_dict(_item) for _item in obj["wanTrafficUplinkPreferences"]] if obj.get("wanTrafficUplinkPreferences") is not None else None
        })
        return _obj



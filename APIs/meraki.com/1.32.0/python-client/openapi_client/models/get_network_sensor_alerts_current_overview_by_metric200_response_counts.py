# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_network_sensor_alerts_current_overview_by_metric200_response_counts_noise import GetNetworkSensorAlertsCurrentOverviewByMetric200ResponseCountsNoise
from typing import Optional, Set
from typing_extensions import Self

class GetNetworkSensorAlertsCurrentOverviewByMetric200ResponseCounts(BaseModel):
    """
    Counts of currently alerting sensors, aggregated by alerting metric
    """ # noqa: E501
    door: Optional[StrictInt] = Field(default=None, description="Number of sensors that are currently alerting due to an open door")
    humidity: Optional[StrictInt] = Field(default=None, description="Number of sensors that are currently alerting due to humidity readings")
    indoor_air_quality: Optional[StrictInt] = Field(default=None, description="Number of sensors that are currently alerting due to indoor air quality readings", alias="indoorAirQuality")
    noise: Optional[GetNetworkSensorAlertsCurrentOverviewByMetric200ResponseCountsNoise] = None
    pm25: Optional[StrictInt] = Field(default=None, description="Number of sensors that are currently alerting due to PM2.5 readings")
    temperature: Optional[StrictInt] = Field(default=None, description="Number of sensors that are currently alerting due to temperature readings")
    tvoc: Optional[StrictInt] = Field(default=None, description="Number of sensors that are currently alerting due to TVOC readings")
    water: Optional[StrictInt] = Field(default=None, description="Number of sensors that are currently alerting due to the presence of water")
    __properties: ClassVar[List[str]] = ["door", "humidity", "indoorAirQuality", "noise", "pm25", "temperature", "tvoc", "water"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetNetworkSensorAlertsCurrentOverviewByMetric200ResponseCounts from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of noise
        if self.noise:
            _dict['noise'] = self.noise.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetNetworkSensorAlertsCurrentOverviewByMetric200ResponseCounts from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "door": obj.get("door"),
            "humidity": obj.get("humidity"),
            "indoorAirQuality": obj.get("indoorAirQuality"),
            "noise": GetNetworkSensorAlertsCurrentOverviewByMetric200ResponseCountsNoise.from_dict(obj["noise"]) if obj.get("noise") is not None else None,
            "pm25": obj.get("pm25"),
            "temperature": obj.get("temperature"),
            "tvoc": obj.get("tvoc"),
            "water": obj.get("water")
        })
        return _obj



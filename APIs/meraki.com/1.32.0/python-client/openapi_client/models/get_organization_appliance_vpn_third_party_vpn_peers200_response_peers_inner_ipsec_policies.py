# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies(BaseModel):
    """
    Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
    """ # noqa: E501
    child_auth_algo: Optional[List[StrictStr]] = Field(default=None, description="This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'", alias="childAuthAlgo")
    child_cipher_algo: Optional[List[StrictStr]] = Field(default=None, description="This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des', 'null'", alias="childCipherAlgo")
    child_lifetime: Optional[StrictInt] = Field(default=None, description="The lifetime of the Phase 2 SA in seconds.", alias="childLifetime")
    child_pfs_group: Optional[List[StrictStr]] = Field(default=None, description="This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: 'disabled','group14', 'group5', 'group2', 'group1'", alias="childPfsGroup")
    ike_auth_algo: Optional[List[StrictStr]] = Field(default=None, description="This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'", alias="ikeAuthAlgo")
    ike_cipher_algo: Optional[List[StrictStr]] = Field(default=None, description="This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des'", alias="ikeCipherAlgo")
    ike_diffie_hellman_group: Optional[List[StrictStr]] = Field(default=None, description="This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: 'group14', 'group5', 'group2', 'group1'", alias="ikeDiffieHellmanGroup")
    ike_lifetime: Optional[StrictInt] = Field(default=None, description="The lifetime of the Phase 1 SA in seconds.", alias="ikeLifetime")
    ike_prf_algo: Optional[List[StrictStr]] = Field(default=None, description="[optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: 'prfsha256', 'prfsha1', 'prfmd5', 'default'. The 'default' option can be used to default to the Authentication algorithm.", alias="ikePrfAlgo")
    __properties: ClassVar[List[str]] = ["childAuthAlgo", "childCipherAlgo", "childLifetime", "childPfsGroup", "ikeAuthAlgo", "ikeCipherAlgo", "ikeDiffieHellmanGroup", "ikeLifetime", "ikePrfAlgo"]

    @field_validator('child_auth_algo')
    def child_auth_algo_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['md5', 'sha1', 'sha256']):
                raise ValueError("each list item must be one of ('md5', 'sha1', 'sha256')")
        return value

    @field_validator('child_cipher_algo')
    def child_cipher_algo_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['aes128', 'aes192', 'aes256', 'des', 'null', 'tripledes']):
                raise ValueError("each list item must be one of ('aes128', 'aes192', 'aes256', 'des', 'null', 'tripledes')")
        return value

    @field_validator('ike_auth_algo')
    def ike_auth_algo_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['md5', 'sha1', 'sha256']):
                raise ValueError("each list item must be one of ('md5', 'sha1', 'sha256')")
        return value

    @field_validator('ike_cipher_algo')
    def ike_cipher_algo_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['aes128', 'aes192', 'aes256', 'des', 'tripledes']):
                raise ValueError("each list item must be one of ('aes128', 'aes192', 'aes256', 'des', 'tripledes')")
        return value

    @field_validator('ike_prf_algo')
    def ike_prf_algo_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['default', 'prfmd5', 'prfsha1', 'prfsha256']):
                raise ValueError("each list item must be one of ('default', 'prfmd5', 'prfsha1', 'prfsha256')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "childAuthAlgo": obj.get("childAuthAlgo"),
            "childCipherAlgo": obj.get("childCipherAlgo"),
            "childLifetime": obj.get("childLifetime"),
            "childPfsGroup": obj.get("childPfsGroup"),
            "ikeAuthAlgo": obj.get("ikeAuthAlgo"),
            "ikeCipherAlgo": obj.get("ikeCipherAlgo"),
            "ikeDiffieHellmanGroup": obj.get("ikeDiffieHellmanGroup"),
            "ikeLifetime": obj.get("ikeLifetime"),
            "ikePrfAlgo": obj.get("ikePrfAlgo")
        })
        return _obj



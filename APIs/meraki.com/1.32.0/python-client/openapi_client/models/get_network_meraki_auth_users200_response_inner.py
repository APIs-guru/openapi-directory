# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_network_meraki_auth_users200_response_inner_authorizations_inner import GetNetworkMerakiAuthUsers200ResponseInnerAuthorizationsInner
from typing import Optional, Set
from typing_extensions import Self

class GetNetworkMerakiAuthUsers200ResponseInner(BaseModel):
    """
    GetNetworkMerakiAuthUsers200ResponseInner
    """ # noqa: E501
    account_type: Optional[StrictStr] = Field(default=None, description="Authorization type for user.", alias="accountType")
    authorizations: Optional[List[GetNetworkMerakiAuthUsers200ResponseInnerAuthorizationsInner]] = Field(default=None, description="User authorization info")
    created_at: Optional[datetime] = Field(default=None, description="Creation time of the user", alias="createdAt")
    email: Optional[StrictStr] = Field(default=None, description="Email address of the user")
    id: Optional[StrictStr] = Field(default=None, description="Meraki auth user id")
    is_admin: Optional[StrictBool] = Field(default=None, description="Whether or not the user is a Dashboard administrator", alias="isAdmin")
    name: Optional[StrictStr] = Field(default=None, description="Name of the user")
    __properties: ClassVar[List[str]] = ["accountType", "authorizations", "createdAt", "email", "id", "isAdmin", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetNetworkMerakiAuthUsers200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in authorizations (list)
        _items = []
        if self.authorizations:
            for _item_authorizations in self.authorizations:
                if _item_authorizations:
                    _items.append(_item_authorizations.to_dict())
            _dict['authorizations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetNetworkMerakiAuthUsers200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountType": obj.get("accountType"),
            "authorizations": [GetNetworkMerakiAuthUsers200ResponseInnerAuthorizationsInner.from_dict(_item) for _item in obj["authorizations"]] if obj.get("authorizations") is not None else None,
            "createdAt": obj.get("createdAt"),
            "email": obj.get("email"),
            "id": obj.get("id"),
            "isAdmin": obj.get("isAdmin"),
            "name": obj.get("name")
        })
        return _obj



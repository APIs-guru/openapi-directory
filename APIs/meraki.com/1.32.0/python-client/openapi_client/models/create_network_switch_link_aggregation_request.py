# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.create_network_switch_link_aggregation_request_switch_ports_inner import CreateNetworkSwitchLinkAggregationRequestSwitchPortsInner
from openapi_client.models.create_network_switch_link_aggregation_request_switch_profile_ports_inner import CreateNetworkSwitchLinkAggregationRequestSwitchProfilePortsInner
from typing import Optional, Set
from typing_extensions import Self

class CreateNetworkSwitchLinkAggregationRequest(BaseModel):
    """
    CreateNetworkSwitchLinkAggregationRequest
    """ # noqa: E501
    switch_ports: Optional[List[CreateNetworkSwitchLinkAggregationRequestSwitchPortsInner]] = Field(default=None, description="Array of switch or stack ports for creating aggregation group. Minimum 2 and maximum 8 ports are supported.", alias="switchPorts")
    switch_profile_ports: Optional[List[CreateNetworkSwitchLinkAggregationRequestSwitchProfilePortsInner]] = Field(default=None, description="Array of switch profile ports for creating aggregation group. Minimum 2 and maximum 8 ports are supported.", alias="switchProfilePorts")
    __properties: ClassVar[List[str]] = ["switchPorts", "switchProfilePorts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateNetworkSwitchLinkAggregationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in switch_ports (list)
        _items = []
        if self.switch_ports:
            for _item_switch_ports in self.switch_ports:
                if _item_switch_ports:
                    _items.append(_item_switch_ports.to_dict())
            _dict['switchPorts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in switch_profile_ports (list)
        _items = []
        if self.switch_profile_ports:
            for _item_switch_profile_ports in self.switch_profile_ports:
                if _item_switch_profile_ports:
                    _items.append(_item_switch_profile_ports.to_dict())
            _dict['switchProfilePorts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateNetworkSwitchLinkAggregationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "switchPorts": [CreateNetworkSwitchLinkAggregationRequestSwitchPortsInner.from_dict(_item) for _item in obj["switchPorts"]] if obj.get("switchPorts") is not None else None,
            "switchProfilePorts": [CreateNetworkSwitchLinkAggregationRequestSwitchProfilePortsInner.from_dict(_item) for _item in obj["switchProfilePorts"]] if obj.get("switchProfilePorts") is not None else None
        })
        return _obj



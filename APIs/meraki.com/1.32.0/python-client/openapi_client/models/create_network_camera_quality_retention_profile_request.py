# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.create_network_camera_quality_retention_profile_request_video_settings import CreateNetworkCameraQualityRetentionProfileRequestVideoSettings
from typing import Optional, Set
from typing_extensions import Self

class CreateNetworkCameraQualityRetentionProfileRequest(BaseModel):
    """
    CreateNetworkCameraQualityRetentionProfileRequest
    """ # noqa: E501
    audio_recording_enabled: Optional[StrictBool] = Field(default=None, description="Whether or not to record audio. Can be either true or false. Defaults to false.", alias="audioRecordingEnabled")
    cloud_archive_enabled: Optional[StrictBool] = Field(default=None, description="Create redundant video backup using Cloud Archive. Can be either true or false. Defaults to false.", alias="cloudArchiveEnabled")
    max_retention_days: Optional[StrictInt] = Field(default=None, description="The maximum number of days for which the data will be stored, or 'null' to keep data until storage space runs out. If the former, it can be one of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 30, 60, 90] days.", alias="maxRetentionDays")
    motion_based_retention_enabled: Optional[StrictBool] = Field(default=None, description="Deletes footage older than 3 days in which no motion was detected. Can be either true or false. Defaults to false. This setting does not apply to MV2 cameras.", alias="motionBasedRetentionEnabled")
    motion_detector_version: Optional[StrictInt] = Field(default=None, description="The version of the motion detector that will be used by the camera. Only applies to Gen 2 cameras. Defaults to v2.", alias="motionDetectorVersion")
    name: StrictStr = Field(description="The name of the new profile. Must be unique. This parameter is required.")
    restricted_bandwidth_mode_enabled: Optional[StrictBool] = Field(default=None, description="Disable features that require additional bandwidth such as Motion Recap. Can be either true or false. Defaults to false. This setting does not apply to MV2 cameras.", alias="restrictedBandwidthModeEnabled")
    schedule_id: Optional[StrictStr] = Field(default=None, description="Schedule for which this camera will record video, or 'null' to always record.", alias="scheduleId")
    video_settings: Optional[CreateNetworkCameraQualityRetentionProfileRequestVideoSettings] = Field(default=None, alias="videoSettings")
    __properties: ClassVar[List[str]] = ["audioRecordingEnabled", "cloudArchiveEnabled", "maxRetentionDays", "motionBasedRetentionEnabled", "motionDetectorVersion", "name", "restrictedBandwidthModeEnabled", "scheduleId", "videoSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateNetworkCameraQualityRetentionProfileRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of video_settings
        if self.video_settings:
            _dict['videoSettings'] = self.video_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateNetworkCameraQualityRetentionProfileRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audioRecordingEnabled": obj.get("audioRecordingEnabled"),
            "cloudArchiveEnabled": obj.get("cloudArchiveEnabled"),
            "maxRetentionDays": obj.get("maxRetentionDays"),
            "motionBasedRetentionEnabled": obj.get("motionBasedRetentionEnabled"),
            "motionDetectorVersion": obj.get("motionDetectorVersion"),
            "name": obj.get("name"),
            "restrictedBandwidthModeEnabled": obj.get("restrictedBandwidthModeEnabled"),
            "scheduleId": obj.get("scheduleId"),
            "videoSettings": CreateNetworkCameraQualityRetentionProfileRequestVideoSettings.from_dict(obj["videoSettings"]) if obj.get("videoSettings") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateOrganizationSnmpRequest(BaseModel):
    """
    UpdateOrganizationSnmpRequest
    """ # noqa: E501
    peer_ips: Optional[List[StrictStr]] = Field(default=None, description="The list of IPv4 addresses that are allowed to access the SNMP server.", alias="peerIps")
    v2c_enabled: Optional[StrictBool] = Field(default=None, description="Boolean indicating whether SNMP version 2c is enabled for the organization.", alias="v2cEnabled")
    v3_auth_mode: Optional[StrictStr] = Field(default=None, description="The SNMP version 3 authentication mode. Can be either 'MD5' or 'SHA'.", alias="v3AuthMode")
    v3_auth_pass: Optional[StrictStr] = Field(default=None, description="The SNMP version 3 authentication password. Must be at least 8 characters if specified.", alias="v3AuthPass")
    v3_enabled: Optional[StrictBool] = Field(default=None, description="Boolean indicating whether SNMP version 3 is enabled for the organization.", alias="v3Enabled")
    v3_priv_mode: Optional[StrictStr] = Field(default=None, description="The SNMP version 3 privacy mode. Can be either 'DES' or 'AES128'.", alias="v3PrivMode")
    v3_priv_pass: Optional[StrictStr] = Field(default=None, description="The SNMP version 3 privacy password. Must be at least 8 characters if specified.", alias="v3PrivPass")
    __properties: ClassVar[List[str]] = ["peerIps", "v2cEnabled", "v3AuthMode", "v3AuthPass", "v3Enabled", "v3PrivMode", "v3PrivPass"]

    @field_validator('v3_auth_mode')
    def v3_auth_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MD5', 'SHA']):
            raise ValueError("must be one of enum values ('MD5', 'SHA')")
        return value

    @field_validator('v3_priv_mode')
    def v3_priv_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AES128', 'DES']):
            raise ValueError("must be one of enum values ('AES128', 'DES')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateOrganizationSnmpRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateOrganizationSnmpRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "peerIps": obj.get("peerIps"),
            "v2cEnabled": obj.get("v2cEnabled"),
            "v3AuthMode": obj.get("v3AuthMode"),
            "v3AuthPass": obj.get("v3AuthPass"),
            "v3Enabled": obj.get("v3Enabled"),
            "v3PrivMode": obj.get("v3PrivMode"),
            "v3PrivPass": obj.get("v3PrivPass")
        })
        return _obj



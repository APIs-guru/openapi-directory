# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetOrganizationApiRequests200ResponseInner(BaseModel):
    """
    GetOrganizationApiRequests200ResponseInner
    """ # noqa: E501
    admin_id: Optional[StrictStr] = Field(default=None, description="Database ID for the admin user who made the API request.", alias="adminId")
    host: Optional[StrictStr] = Field(default=None, description="The host which the API request was directed at.")
    method: Optional[StrictStr] = Field(default=None, description="HTTP method used in the API request.")
    operation_id: Optional[StrictStr] = Field(default=None, description="Operation ID for the endpoint.", alias="operationId")
    path: Optional[StrictStr] = Field(default=None, description="The API request path.")
    query_string: Optional[StrictStr] = Field(default=None, description="The query string sent with the API request.", alias="queryString")
    response_code: Optional[StrictInt] = Field(default=None, description="API request response code.", alias="responseCode")
    source_ip: Optional[StrictStr] = Field(default=None, description="Public IP address from which the API request was made.", alias="sourceIp")
    ts: Optional[datetime] = Field(default=None, description="Timestamp, in iso8601 format, indicating when the API request was made.")
    user_agent: Optional[StrictStr] = Field(default=None, description="The API request user agent.", alias="userAgent")
    version: Optional[StrictInt] = Field(default=None, description="API version of the endpoint.")
    __properties: ClassVar[List[str]] = ["adminId", "host", "method", "operationId", "path", "queryString", "responseCode", "sourceIp", "ts", "userAgent", "version"]

    @field_validator('version')
    def version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1]):
            raise ValueError("must be one of enum values (0, 1)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetOrganizationApiRequests200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetOrganizationApiRequests200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adminId": obj.get("adminId"),
            "host": obj.get("host"),
            "method": obj.get("method"),
            "operationId": obj.get("operationId"),
            "path": obj.get("path"),
            "queryString": obj.get("queryString"),
            "responseCode": obj.get("responseCode"),
            "sourceIp": obj.get("sourceIp"),
            "ts": obj.get("ts"),
            "userAgent": obj.get("userAgent"),
            "version": obj.get("version")
        })
        return _obj



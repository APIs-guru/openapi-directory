# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_device_live_tools_ping200_response_results_latencies import GetDeviceLiveToolsPing200ResponseResultsLatencies
from openapi_client.models.get_device_live_tools_ping200_response_results_loss import GetDeviceLiveToolsPing200ResponseResultsLoss
from openapi_client.models.get_device_live_tools_ping200_response_results_replies_inner import GetDeviceLiveToolsPing200ResponseResultsRepliesInner
from typing import Optional, Set
from typing_extensions import Self

class GetDeviceLiveToolsPing200ResponseResults(BaseModel):
    """
    Results of the ping request.
    """ # noqa: E501
    latencies: Optional[GetDeviceLiveToolsPing200ResponseResultsLatencies] = None
    loss: Optional[GetDeviceLiveToolsPing200ResponseResultsLoss] = None
    received: Optional[StrictInt] = Field(default=None, description="Number of packets received")
    replies: Optional[List[GetDeviceLiveToolsPing200ResponseResultsRepliesInner]] = Field(default=None, description="Received packets")
    sent: Optional[StrictInt] = Field(default=None, description="Number of packets sent")
    __properties: ClassVar[List[str]] = ["latencies", "loss", "received", "replies", "sent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetDeviceLiveToolsPing200ResponseResults from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of latencies
        if self.latencies:
            _dict['latencies'] = self.latencies.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loss
        if self.loss:
            _dict['loss'] = self.loss.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in replies (list)
        _items = []
        if self.replies:
            for _item_replies in self.replies:
                if _item_replies:
                    _items.append(_item_replies.to_dict())
            _dict['replies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetDeviceLiveToolsPing200ResponseResults from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "latencies": GetDeviceLiveToolsPing200ResponseResultsLatencies.from_dict(obj["latencies"]) if obj.get("latencies") is not None else None,
            "loss": GetDeviceLiveToolsPing200ResponseResultsLoss.from_dict(obj["loss"]) if obj.get("loss") is not None else None,
            "received": obj.get("received"),
            "replies": [GetDeviceLiveToolsPing200ResponseResultsRepliesInner.from_dict(_item) for _item in obj["replies"]] if obj.get("replies") is not None else None,
            "sent": obj.get("sent")
        })
        return _obj



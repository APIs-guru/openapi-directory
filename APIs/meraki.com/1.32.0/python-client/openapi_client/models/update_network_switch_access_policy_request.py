# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.create_network_switch_access_policy_request_radius_accounting_servers_inner import CreateNetworkSwitchAccessPolicyRequestRadiusAccountingServersInner
from openapi_client.models.create_network_switch_access_policy_request_radius_servers_inner import CreateNetworkSwitchAccessPolicyRequestRadiusServersInner
from openapi_client.models.get_network_switch_access_policies200_response_inner_dot1x import GetNetworkSwitchAccessPolicies200ResponseInnerDot1x
from openapi_client.models.get_network_switch_access_policies200_response_inner_radius import GetNetworkSwitchAccessPolicies200ResponseInnerRadius
from typing import Optional, Set
from typing_extensions import Self

class UpdateNetworkSwitchAccessPolicyRequest(BaseModel):
    """
    UpdateNetworkSwitchAccessPolicyRequest
    """ # noqa: E501
    access_policy_type: Optional[StrictStr] = Field(default=None, description="Access Type of the policy. Automatically 'Hybrid authentication' when hostMode is 'Multi-Domain'.", alias="accessPolicyType")
    dot1x: Optional[GetNetworkSwitchAccessPolicies200ResponseInnerDot1x] = None
    guest_port_bouncing: Optional[StrictBool] = Field(default=None, description="If enabled, Meraki devices will periodically send access-request messages to these RADIUS servers", alias="guestPortBouncing")
    guest_vlan_id: Optional[StrictInt] = Field(default=None, description="ID for the guest VLAN allow unauthorized devices access to limited network resources", alias="guestVlanId")
    host_mode: Optional[StrictStr] = Field(default=None, description="Choose the Host Mode for the access policy.", alias="hostMode")
    increase_access_speed: Optional[StrictBool] = Field(default=None, description="Enabling this option will make switches execute 802.1X and MAC-bypass authentication simultaneously so that clients authenticate faster. Only required when accessPolicyType is 'Hybrid Authentication.", alias="increaseAccessSpeed")
    name: Optional[StrictStr] = Field(default=None, description="Name of the access policy")
    radius: Optional[GetNetworkSwitchAccessPolicies200ResponseInnerRadius] = None
    radius_accounting_enabled: Optional[StrictBool] = Field(default=None, description="Enable to send start, interim-update and stop messages to a configured RADIUS accounting server for tracking connected clients", alias="radiusAccountingEnabled")
    radius_accounting_servers: Optional[List[CreateNetworkSwitchAccessPolicyRequestRadiusAccountingServersInner]] = Field(default=None, description="List of RADIUS accounting servers to require connecting devices to authenticate against before granting network access", alias="radiusAccountingServers")
    radius_coa_support_enabled: Optional[StrictBool] = Field(default=None, description="Change of authentication for RADIUS re-authentication and disconnection", alias="radiusCoaSupportEnabled")
    radius_group_attribute: Optional[StrictStr] = Field(default=None, description="Acceptable values are `\"\"` for None, or `\"11\"` for Group Policies ACL", alias="radiusGroupAttribute")
    radius_servers: Optional[List[CreateNetworkSwitchAccessPolicyRequestRadiusServersInner]] = Field(default=None, description="List of RADIUS servers to require connecting devices to authenticate against before granting network access", alias="radiusServers")
    radius_testing_enabled: Optional[StrictBool] = Field(default=None, description="If enabled, Meraki devices will periodically send access-request messages to these RADIUS servers", alias="radiusTestingEnabled")
    url_redirect_walled_garden_enabled: Optional[StrictBool] = Field(default=None, description="Enable to restrict access for clients to a specific set of IP addresses or hostnames prior to authentication", alias="urlRedirectWalledGardenEnabled")
    url_redirect_walled_garden_ranges: Optional[List[StrictStr]] = Field(default=None, description="IP address ranges, in CIDR notation, to restrict access for clients to a specific set of IP addresses or hostnames prior to authentication", alias="urlRedirectWalledGardenRanges")
    voice_vlan_clients: Optional[StrictBool] = Field(default=None, description="CDP/LLDP capable voice clients will be able to use this VLAN. Automatically true when hostMode is 'Multi-Domain'.", alias="voiceVlanClients")
    __properties: ClassVar[List[str]] = ["accessPolicyType", "dot1x", "guestPortBouncing", "guestVlanId", "hostMode", "increaseAccessSpeed", "name", "radius", "radiusAccountingEnabled", "radiusAccountingServers", "radiusCoaSupportEnabled", "radiusGroupAttribute", "radiusServers", "radiusTestingEnabled", "urlRedirectWalledGardenEnabled", "urlRedirectWalledGardenRanges", "voiceVlanClients"]

    @field_validator('access_policy_type')
    def access_policy_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['802.1x', 'Hybrid authentication', 'MAC authentication bypass']):
            raise ValueError("must be one of enum values ('802.1x', 'Hybrid authentication', 'MAC authentication bypass')")
        return value

    @field_validator('host_mode')
    def host_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Multi-Auth', 'Multi-Domain', 'Multi-Host', 'Single-Host']):
            raise ValueError("must be one of enum values ('Multi-Auth', 'Multi-Domain', 'Multi-Host', 'Single-Host')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateNetworkSwitchAccessPolicyRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dot1x
        if self.dot1x:
            _dict['dot1x'] = self.dot1x.to_dict()
        # override the default output from pydantic by calling `to_dict()` of radius
        if self.radius:
            _dict['radius'] = self.radius.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in radius_accounting_servers (list)
        _items = []
        if self.radius_accounting_servers:
            for _item_radius_accounting_servers in self.radius_accounting_servers:
                if _item_radius_accounting_servers:
                    _items.append(_item_radius_accounting_servers.to_dict())
            _dict['radiusAccountingServers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in radius_servers (list)
        _items = []
        if self.radius_servers:
            for _item_radius_servers in self.radius_servers:
                if _item_radius_servers:
                    _items.append(_item_radius_servers.to_dict())
            _dict['radiusServers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateNetworkSwitchAccessPolicyRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessPolicyType": obj.get("accessPolicyType"),
            "dot1x": GetNetworkSwitchAccessPolicies200ResponseInnerDot1x.from_dict(obj["dot1x"]) if obj.get("dot1x") is not None else None,
            "guestPortBouncing": obj.get("guestPortBouncing"),
            "guestVlanId": obj.get("guestVlanId"),
            "hostMode": obj.get("hostMode"),
            "increaseAccessSpeed": obj.get("increaseAccessSpeed"),
            "name": obj.get("name"),
            "radius": GetNetworkSwitchAccessPolicies200ResponseInnerRadius.from_dict(obj["radius"]) if obj.get("radius") is not None else None,
            "radiusAccountingEnabled": obj.get("radiusAccountingEnabled"),
            "radiusAccountingServers": [CreateNetworkSwitchAccessPolicyRequestRadiusAccountingServersInner.from_dict(_item) for _item in obj["radiusAccountingServers"]] if obj.get("radiusAccountingServers") is not None else None,
            "radiusCoaSupportEnabled": obj.get("radiusCoaSupportEnabled"),
            "radiusGroupAttribute": obj.get("radiusGroupAttribute"),
            "radiusServers": [CreateNetworkSwitchAccessPolicyRequestRadiusServersInner.from_dict(_item) for _item in obj["radiusServers"]] if obj.get("radiusServers") is not None else None,
            "radiusTestingEnabled": obj.get("radiusTestingEnabled"),
            "urlRedirectWalledGardenEnabled": obj.get("urlRedirectWalledGardenEnabled"),
            "urlRedirectWalledGardenRanges": obj.get("urlRedirectWalledGardenRanges"),
            "voiceVlanClients": obj.get("voiceVlanClients")
        })
        return _obj



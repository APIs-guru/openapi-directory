# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_network_settings200_response_client_privacy import GetNetworkSettings200ResponseClientPrivacy
from openapi_client.models.get_network_settings200_response_fips import GetNetworkSettings200ResponseFips
from openapi_client.models.get_network_settings200_response_local_status_page import GetNetworkSettings200ResponseLocalStatusPage
from openapi_client.models.get_network_settings200_response_named_vlans import GetNetworkSettings200ResponseNamedVlans
from openapi_client.models.get_network_settings200_response_secure_port import GetNetworkSettings200ResponseSecurePort
from typing import Optional, Set
from typing_extensions import Self

class GetNetworkSettings200Response(BaseModel):
    """
    GetNetworkSettings200Response
    """ # noqa: E501
    client_privacy: Optional[GetNetworkSettings200ResponseClientPrivacy] = Field(default=None, alias="clientPrivacy")
    fips: Optional[GetNetworkSettings200ResponseFips] = None
    local_status_page: Optional[GetNetworkSettings200ResponseLocalStatusPage] = Field(default=None, alias="localStatusPage")
    local_status_page_enabled: Optional[StrictBool] = Field(default=None, description="Enables / disables the local device status pages (<a target='_blank' href='http://my.meraki.com/'>my.meraki.com, </a><a target='_blank' href='http://ap.meraki.com/'>ap.meraki.com, </a><a target='_blank' href='http://switch.meraki.com/'>switch.meraki.com, </a><a target='_blank' href='http://wired.meraki.com/'>wired.meraki.com</a>). Optional (defaults to false)", alias="localStatusPageEnabled")
    named_vlans: Optional[GetNetworkSettings200ResponseNamedVlans] = Field(default=None, alias="namedVlans")
    remote_status_page_enabled: Optional[StrictBool] = Field(default=None, description="Enables / disables access to the device status page (<a target='_blank'>http://[device's LAN IP])</a>. Optional. Can only be set if localStatusPageEnabled is set to true", alias="remoteStatusPageEnabled")
    secure_port: Optional[GetNetworkSettings200ResponseSecurePort] = Field(default=None, alias="securePort")
    __properties: ClassVar[List[str]] = ["clientPrivacy", "fips", "localStatusPage", "localStatusPageEnabled", "namedVlans", "remoteStatusPageEnabled", "securePort"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetNetworkSettings200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client_privacy
        if self.client_privacy:
            _dict['clientPrivacy'] = self.client_privacy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fips
        if self.fips:
            _dict['fips'] = self.fips.to_dict()
        # override the default output from pydantic by calling `to_dict()` of local_status_page
        if self.local_status_page:
            _dict['localStatusPage'] = self.local_status_page.to_dict()
        # override the default output from pydantic by calling `to_dict()` of named_vlans
        if self.named_vlans:
            _dict['namedVlans'] = self.named_vlans.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secure_port
        if self.secure_port:
            _dict['securePort'] = self.secure_port.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetNetworkSettings200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientPrivacy": GetNetworkSettings200ResponseClientPrivacy.from_dict(obj["clientPrivacy"]) if obj.get("clientPrivacy") is not None else None,
            "fips": GetNetworkSettings200ResponseFips.from_dict(obj["fips"]) if obj.get("fips") is not None else None,
            "localStatusPage": GetNetworkSettings200ResponseLocalStatusPage.from_dict(obj["localStatusPage"]) if obj.get("localStatusPage") is not None else None,
            "localStatusPageEnabled": obj.get("localStatusPageEnabled"),
            "namedVlans": GetNetworkSettings200ResponseNamedVlans.from_dict(obj["namedVlans"]) if obj.get("namedVlans") is not None else None,
            "remoteStatusPageEnabled": obj.get("remoteStatusPageEnabled"),
            "securePort": GetNetworkSettings200ResponseSecurePort.from_dict(obj["securePort"]) if obj.get("securePort") is not None else None
        })
        return _obj



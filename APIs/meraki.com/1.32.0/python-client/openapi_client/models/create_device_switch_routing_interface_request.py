# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.create_device_switch_routing_interface_request_ipv6 import CreateDeviceSwitchRoutingInterfaceRequestIpv6
from openapi_client.models.create_device_switch_routing_interface_request_ospf_settings import CreateDeviceSwitchRoutingInterfaceRequestOspfSettings
from openapi_client.models.create_device_switch_routing_interface_request_ospf_v3 import CreateDeviceSwitchRoutingInterfaceRequestOspfV3
from typing import Optional, Set
from typing_extensions import Self

class CreateDeviceSwitchRoutingInterfaceRequest(BaseModel):
    """
    CreateDeviceSwitchRoutingInterfaceRequest
    """ # noqa: E501
    default_gateway: Optional[StrictStr] = Field(default=None, description="The next hop for any traffic that isn't going to a directly connected subnet or over a static route.         This IP address must exist in a subnet with a routed interface. Required if this is the first IPv4 interface.", alias="defaultGateway")
    interface_ip: Optional[StrictStr] = Field(default=None, description="The IP address this switch will use for layer 3 routing on this VLAN or subnet. This cannot be the same         as the switch's management IP.", alias="interfaceIp")
    ipv6: Optional[CreateDeviceSwitchRoutingInterfaceRequestIpv6] = None
    multicast_routing: Optional[StrictStr] = Field(default=None, description="Enable multicast support if, multicast routing between VLANs is required. Options are:         'disabled', 'enabled' or 'IGMP snooping querier'. Default is 'disabled'.", alias="multicastRouting")
    name: Optional[StrictStr] = Field(default=None, description="A friendly name or description for the interface or VLAN.")
    ospf_settings: Optional[CreateDeviceSwitchRoutingInterfaceRequestOspfSettings] = Field(default=None, alias="ospfSettings")
    ospf_v3: Optional[CreateDeviceSwitchRoutingInterfaceRequestOspfV3] = Field(default=None, alias="ospfV3")
    subnet: Optional[StrictStr] = Field(default=None, description="The network that this routed interface is on, in CIDR notation (ex. 10.1.1.0/24).")
    vlan_id: Optional[StrictInt] = Field(default=None, description="The VLAN this routed interface is on. VLAN must be between 1 and 4094.", alias="vlanId")
    __properties: ClassVar[List[str]] = ["defaultGateway", "interfaceIp", "ipv6", "multicastRouting", "name", "ospfSettings", "ospfV3", "subnet", "vlanId"]

    @field_validator('multicast_routing')
    def multicast_routing_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IGMP snooping querier', 'disabled', 'enabled']):
            raise ValueError("must be one of enum values ('IGMP snooping querier', 'disabled', 'enabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateDeviceSwitchRoutingInterfaceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ipv6
        if self.ipv6:
            _dict['ipv6'] = self.ipv6.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ospf_settings
        if self.ospf_settings:
            _dict['ospfSettings'] = self.ospf_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ospf_v3
        if self.ospf_v3:
            _dict['ospfV3'] = self.ospf_v3.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateDeviceSwitchRoutingInterfaceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultGateway": obj.get("defaultGateway"),
            "interfaceIp": obj.get("interfaceIp"),
            "ipv6": CreateDeviceSwitchRoutingInterfaceRequestIpv6.from_dict(obj["ipv6"]) if obj.get("ipv6") is not None else None,
            "multicastRouting": obj.get("multicastRouting"),
            "name": obj.get("name"),
            "ospfSettings": CreateDeviceSwitchRoutingInterfaceRequestOspfSettings.from_dict(obj["ospfSettings"]) if obj.get("ospfSettings") is not None else None,
            "ospfV3": CreateDeviceSwitchRoutingInterfaceRequestOspfV3.from_dict(obj["ospfV3"]) if obj.get("ospfV3") is not None else None,
            "subnet": obj.get("subnet"),
            "vlanId": obj.get("vlanId")
        })
        return _obj



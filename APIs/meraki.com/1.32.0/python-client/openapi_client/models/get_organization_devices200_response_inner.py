# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GetOrganizationDevices200ResponseInner(BaseModel):
    """
    GetOrganizationDevices200ResponseInner
    """ # noqa: E501
    address: Optional[StrictStr] = Field(default=None, description="Physical address of the device")
    firmware: Optional[StrictStr] = Field(default=None, description="Firmware version of the device")
    lan_ip: Optional[StrictStr] = Field(default=None, description="LAN IP address of the device", alias="lanIp")
    lat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Latitude of the device")
    lng: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Longitude of the device")
    mac: Optional[StrictStr] = Field(default=None, description="MAC address of the device")
    model: Optional[StrictStr] = Field(default=None, description="Model of the device")
    name: Optional[StrictStr] = Field(default=None, description="Name of the device")
    network_id: Optional[StrictStr] = Field(default=None, description="ID of the network the device belongs to", alias="networkId")
    notes: Optional[StrictStr] = Field(default=None, description="Notes for the device, limited to 255 characters")
    product_type: Optional[StrictStr] = Field(default=None, description="Product type of the device", alias="productType")
    serial: Optional[StrictStr] = Field(default=None, description="Serial number of the device")
    tags: Optional[List[StrictStr]] = Field(default=None, description="List of tags assigned to the device")
    __properties: ClassVar[List[str]] = ["address", "firmware", "lanIp", "lat", "lng", "mac", "model", "name", "networkId", "notes", "productType", "serial", "tags"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetOrganizationDevices200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetOrganizationDevices200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "firmware": obj.get("firmware"),
            "lanIp": obj.get("lanIp"),
            "lat": obj.get("lat"),
            "lng": obj.get("lng"),
            "mac": obj.get("mac"),
            "model": obj.get("model"),
            "name": obj.get("name"),
            "networkId": obj.get("networkId"),
            "notes": obj.get("notes"),
            "productType": obj.get("productType"),
            "serial": obj.get("serial"),
            "tags": obj.get("tags")
        })
        return _obj



# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_organization_licenses200_response_inner_permanently_queued_licenses_inner import GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner
from typing import Optional, Set
from typing_extensions import Self

class GetOrganizationLicenses200ResponseInner(BaseModel):
    """
    GetOrganizationLicenses200ResponseInner
    """ # noqa: E501
    activation_date: Optional[StrictStr] = Field(default=None, description="The date the license started burning", alias="activationDate")
    claim_date: Optional[StrictStr] = Field(default=None, description="The date the license was claimed into the organization", alias="claimDate")
    device_serial: Optional[StrictStr] = Field(default=None, description="Serial number of the device the license is assigned to", alias="deviceSerial")
    duration_in_days: Optional[StrictInt] = Field(default=None, description="The duration of the individual license", alias="durationInDays")
    expiration_date: Optional[StrictStr] = Field(default=None, description="The date the license will expire", alias="expirationDate")
    head_license_id: Optional[StrictStr] = Field(default=None, description="The id of the head license this license is queued behind. If there is no head license, it returns nil.", alias="headLicenseId")
    id: Optional[StrictStr] = Field(default=None, description="License ID")
    license_key: Optional[StrictStr] = Field(default=None, description="License key", alias="licenseKey")
    license_type: Optional[StrictStr] = Field(default=None, description="License type", alias="licenseType")
    network_id: Optional[StrictStr] = Field(default=None, description="ID of the network the license is assigned to", alias="networkId")
    order_number: Optional[StrictStr] = Field(default=None, description="Order number", alias="orderNumber")
    permanently_queued_licenses: Optional[List[GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner]] = Field(default=None, description="DEPRECATED List of permanently queued licenses attached to the license. Instead, use /organizations/{organizationId}/licenses?deviceSerial= to retrieved queued licenses for a given device.", alias="permanentlyQueuedLicenses")
    seat_count: Optional[StrictInt] = Field(default=None, description="The number of seats of the license. Only applicable to SM licenses.", alias="seatCount")
    state: Optional[StrictStr] = Field(default=None, description="The state of the license. All queued licenses have a status of `recentlyQueued`.")
    total_duration_in_days: Optional[StrictInt] = Field(default=None, description="The duration of the license plus all permanently queued licenses associated with it", alias="totalDurationInDays")
    __properties: ClassVar[List[str]] = ["activationDate", "claimDate", "deviceSerial", "durationInDays", "expirationDate", "headLicenseId", "id", "licenseKey", "licenseType", "networkId", "orderNumber", "permanentlyQueuedLicenses", "seatCount", "state", "totalDurationInDays"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['active', 'expired', 'expiring', 'recentlyQueued', 'unused', 'unusedActive']):
            raise ValueError("must be one of enum values ('active', 'expired', 'expiring', 'recentlyQueued', 'unused', 'unusedActive')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetOrganizationLicenses200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in permanently_queued_licenses (list)
        _items = []
        if self.permanently_queued_licenses:
            for _item_permanently_queued_licenses in self.permanently_queued_licenses:
                if _item_permanently_queued_licenses:
                    _items.append(_item_permanently_queued_licenses.to_dict())
            _dict['permanentlyQueuedLicenses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetOrganizationLicenses200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activationDate": obj.get("activationDate"),
            "claimDate": obj.get("claimDate"),
            "deviceSerial": obj.get("deviceSerial"),
            "durationInDays": obj.get("durationInDays"),
            "expirationDate": obj.get("expirationDate"),
            "headLicenseId": obj.get("headLicenseId"),
            "id": obj.get("id"),
            "licenseKey": obj.get("licenseKey"),
            "licenseType": obj.get("licenseType"),
            "networkId": obj.get("networkId"),
            "orderNumber": obj.get("orderNumber"),
            "permanentlyQueuedLicenses": [GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner.from_dict(_item) for _item in obj["permanentlyQueuedLicenses"]] if obj.get("permanentlyQueuedLicenses") is not None else None,
            "seatCount": obj.get("seatCount"),
            "state": obj.get("state"),
            "totalDurationInDays": obj.get("totalDurationInDays")
        })
        return _obj



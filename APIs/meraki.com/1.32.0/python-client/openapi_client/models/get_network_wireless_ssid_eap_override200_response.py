# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_network_wireless_ssid_eap_override200_response_eapol_key import GetNetworkWirelessSsidEapOverride200ResponseEapolKey
from openapi_client.models.get_network_wireless_ssid_eap_override200_response_identity import GetNetworkWirelessSsidEapOverride200ResponseIdentity
from typing import Optional, Set
from typing_extensions import Self

class GetNetworkWirelessSsidEapOverride200Response(BaseModel):
    """
    GetNetworkWirelessSsidEapOverride200Response
    """ # noqa: E501
    eapol_key: Optional[GetNetworkWirelessSsidEapOverride200ResponseEapolKey] = Field(default=None, alias="eapolKey")
    identity: Optional[GetNetworkWirelessSsidEapOverride200ResponseIdentity] = None
    max_retries: Optional[StrictInt] = Field(default=None, description="Maximum number of general EAP retries.", alias="maxRetries")
    timeout: Optional[StrictInt] = Field(default=None, description="General EAP timeout in seconds.")
    __properties: ClassVar[List[str]] = ["eapolKey", "identity", "maxRetries", "timeout"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetNetworkWirelessSsidEapOverride200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of eapol_key
        if self.eapol_key:
            _dict['eapolKey'] = self.eapol_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of identity
        if self.identity:
            _dict['identity'] = self.identity.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetNetworkWirelessSsidEapOverride200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eapolKey": GetNetworkWirelessSsidEapOverride200ResponseEapolKey.from_dict(obj["eapolKey"]) if obj.get("eapolKey") is not None else None,
            "identity": GetNetworkWirelessSsidEapOverride200ResponseIdentity.from_dict(obj["identity"]) if obj.get("identity") is not None else None,
            "maxRetries": obj.get("maxRetries"),
            "timeout": obj.get("timeout")
        })
        return _obj



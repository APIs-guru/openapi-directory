# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_device_switch_routing_interfaces200_response_inner_ipv6 import GetDeviceSwitchRoutingInterfaces200ResponseInnerIpv6
from openapi_client.models.get_device_switch_routing_interfaces200_response_inner_ospf_settings import GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfSettings
from openapi_client.models.get_device_switch_routing_interfaces200_response_inner_ospf_v3 import GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfV3
from typing import Optional, Set
from typing_extensions import Self

class GetDeviceSwitchRoutingInterfaces200ResponseInner(BaseModel):
    """
    GetDeviceSwitchRoutingInterfaces200ResponseInner
    """ # noqa: E501
    default_gateway: Optional[StrictStr] = Field(default=None, description="IPv4 default gateway", alias="defaultGateway")
    interface_id: Optional[StrictStr] = Field(default=None, description="The id", alias="interfaceId")
    interface_ip: Optional[StrictStr] = Field(default=None, description="IPv4 address", alias="interfaceIp")
    ipv6: Optional[GetDeviceSwitchRoutingInterfaces200ResponseInnerIpv6] = None
    multicast_routing: Optional[StrictStr] = Field(default=None, description="Multicast routing status", alias="multicastRouting")
    name: Optional[StrictStr] = Field(default=None, description="The name")
    ospf_settings: Optional[GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfSettings] = Field(default=None, alias="ospfSettings")
    ospf_v3: Optional[GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfV3] = Field(default=None, alias="ospfV3")
    subnet: Optional[StrictStr] = Field(default=None, description="IPv4 subnet")
    vlan_id: Optional[StrictInt] = Field(default=None, description="VLAN id", alias="vlanId")
    __properties: ClassVar[List[str]] = ["defaultGateway", "interfaceId", "interfaceIp", "ipv6", "multicastRouting", "name", "ospfSettings", "ospfV3", "subnet", "vlanId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetDeviceSwitchRoutingInterfaces200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ipv6
        if self.ipv6:
            _dict['ipv6'] = self.ipv6.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ospf_settings
        if self.ospf_settings:
            _dict['ospfSettings'] = self.ospf_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ospf_v3
        if self.ospf_v3:
            _dict['ospfV3'] = self.ospf_v3.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetDeviceSwitchRoutingInterfaces200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultGateway": obj.get("defaultGateway"),
            "interfaceId": obj.get("interfaceId"),
            "interfaceIp": obj.get("interfaceIp"),
            "ipv6": GetDeviceSwitchRoutingInterfaces200ResponseInnerIpv6.from_dict(obj["ipv6"]) if obj.get("ipv6") is not None else None,
            "multicastRouting": obj.get("multicastRouting"),
            "name": obj.get("name"),
            "ospfSettings": GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfSettings.from_dict(obj["ospfSettings"]) if obj.get("ospfSettings") is not None else None,
            "ospfV3": GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfV3.from_dict(obj["ospfV3"]) if obj.get("ospfV3") is not None else None,
            "subnet": obj.get("subnet"),
            "vlanId": obj.get("vlanId")
        })
        return _obj



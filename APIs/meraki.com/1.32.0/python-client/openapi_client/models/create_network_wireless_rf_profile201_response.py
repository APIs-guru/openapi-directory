# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.create_network_wireless_rf_profile201_response_ap_band_settings import CreateNetworkWirelessRfProfile201ResponseApBandSettings
from openapi_client.models.create_network_wireless_rf_profile201_response_per_ssid_settings import CreateNetworkWirelessRfProfile201ResponsePerSsidSettings
from openapi_client.models.create_network_wireless_rf_profile_request_five_ghz_settings import CreateNetworkWirelessRfProfileRequestFiveGhzSettings
from openapi_client.models.create_network_wireless_rf_profile_request_transmission import CreateNetworkWirelessRfProfileRequestTransmission
from openapi_client.models.create_network_wireless_rf_profile_request_two_four_ghz_settings import CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings
from typing import Optional, Set
from typing_extensions import Self

class CreateNetworkWirelessRfProfile201Response(BaseModel):
    """
    CreateNetworkWirelessRfProfile201Response
    """ # noqa: E501
    ap_band_settings: Optional[CreateNetworkWirelessRfProfile201ResponseApBandSettings] = Field(default=None, alias="apBandSettings")
    band_selection_type: Optional[StrictStr] = Field(default=None, description="Band selection can be set to either 'ssid' or 'ap'. This param is required on creation.", alias="bandSelectionType")
    client_balancing_enabled: Optional[StrictBool] = Field(default=None, description="Steers client to best available access point. Can be either true or false. Defaults to true.", alias="clientBalancingEnabled")
    five_ghz_settings: Optional[CreateNetworkWirelessRfProfileRequestFiveGhzSettings] = Field(default=None, alias="fiveGhzSettings")
    id: Optional[StrictStr] = Field(default=None, description="The name of the new profile. Must be unique.")
    min_bitrate_type: Optional[StrictStr] = Field(default=None, description="Minimum bitrate can be set to either 'band' or 'ssid'. Defaults to band.", alias="minBitrateType")
    name: Optional[StrictStr] = Field(default=None, description="The name of the new profile. Must be unique. This param is required on creation.")
    network_id: Optional[StrictStr] = Field(default=None, description="The network ID of the RF Profile", alias="networkId")
    per_ssid_settings: Optional[CreateNetworkWirelessRfProfile201ResponsePerSsidSettings] = Field(default=None, alias="perSsidSettings")
    transmission: Optional[CreateNetworkWirelessRfProfileRequestTransmission] = None
    two_four_ghz_settings: Optional[CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings] = Field(default=None, alias="twoFourGhzSettings")
    __properties: ClassVar[List[str]] = ["apBandSettings", "bandSelectionType", "clientBalancingEnabled", "fiveGhzSettings", "id", "minBitrateType", "name", "networkId", "perSsidSettings", "transmission", "twoFourGhzSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateNetworkWirelessRfProfile201Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ap_band_settings
        if self.ap_band_settings:
            _dict['apBandSettings'] = self.ap_band_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of five_ghz_settings
        if self.five_ghz_settings:
            _dict['fiveGhzSettings'] = self.five_ghz_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of per_ssid_settings
        if self.per_ssid_settings:
            _dict['perSsidSettings'] = self.per_ssid_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transmission
        if self.transmission:
            _dict['transmission'] = self.transmission.to_dict()
        # override the default output from pydantic by calling `to_dict()` of two_four_ghz_settings
        if self.two_four_ghz_settings:
            _dict['twoFourGhzSettings'] = self.two_four_ghz_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateNetworkWirelessRfProfile201Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apBandSettings": CreateNetworkWirelessRfProfile201ResponseApBandSettings.from_dict(obj["apBandSettings"]) if obj.get("apBandSettings") is not None else None,
            "bandSelectionType": obj.get("bandSelectionType"),
            "clientBalancingEnabled": obj.get("clientBalancingEnabled"),
            "fiveGhzSettings": CreateNetworkWirelessRfProfileRequestFiveGhzSettings.from_dict(obj["fiveGhzSettings"]) if obj.get("fiveGhzSettings") is not None else None,
            "id": obj.get("id"),
            "minBitrateType": obj.get("minBitrateType"),
            "name": obj.get("name"),
            "networkId": obj.get("networkId"),
            "perSsidSettings": CreateNetworkWirelessRfProfile201ResponsePerSsidSettings.from_dict(obj["perSsidSettings"]) if obj.get("perSsidSettings") is not None else None,
            "transmission": CreateNetworkWirelessRfProfileRequestTransmission.from_dict(obj["transmission"]) if obj.get("transmission") is not None else None,
            "twoFourGhzSettings": CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings.from_dict(obj["twoFourGhzSettings"]) if obj.get("twoFourGhzSettings") is not None else None
        })
        return _obj



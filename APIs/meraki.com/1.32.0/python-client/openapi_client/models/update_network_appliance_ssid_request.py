# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.update_network_appliance_ssid_request_dhcp_enforced_deauthentication import UpdateNetworkApplianceSsidRequestDhcpEnforcedDeauthentication
from openapi_client.models.update_network_appliance_ssid_request_radius_servers_inner import UpdateNetworkApplianceSsidRequestRadiusServersInner
from typing import Optional, Set
from typing_extensions import Self

class UpdateNetworkApplianceSsidRequest(BaseModel):
    """
    UpdateNetworkApplianceSsidRequest
    """ # noqa: E501
    auth_mode: Optional[StrictStr] = Field(default=None, description="The association control method for the SSID ('open', 'psk', '8021x-meraki' or '8021x-radius').", alias="authMode")
    default_vlan_id: Optional[StrictInt] = Field(default=None, description="The VLAN ID of the VLAN associated to this SSID. This parameter is only valid if the network is in routed mode.", alias="defaultVlanId")
    dhcp_enforced_deauthentication: Optional[UpdateNetworkApplianceSsidRequestDhcpEnforcedDeauthentication] = Field(default=None, alias="dhcpEnforcedDeauthentication")
    enabled: Optional[StrictBool] = Field(default=None, description="Whether or not the SSID is enabled.")
    encryption_mode: Optional[StrictStr] = Field(default=None, description="The psk encryption mode for the SSID ('wep' or 'wpa'). This param is only valid if the authMode is 'psk'.", alias="encryptionMode")
    name: Optional[StrictStr] = Field(default=None, description="The name of the SSID.")
    psk: Optional[StrictStr] = Field(default=None, description="The passkey for the SSID. This param is only valid if the authMode is 'psk'.")
    radius_servers: Optional[List[UpdateNetworkApplianceSsidRequestRadiusServersInner]] = Field(default=None, description="The RADIUS 802.1x servers to be used for authentication. This param is only valid if the authMode is '8021x-radius'.", alias="radiusServers")
    visible: Optional[StrictBool] = Field(default=None, description="Boolean indicating whether the MX should advertise or hide this SSID.")
    wpa_encryption_mode: Optional[StrictStr] = Field(default=None, description="The types of WPA encryption. ('WPA1 and WPA2', 'WPA2 only', 'WPA3 Transition Mode' or 'WPA3 only'). This param is only valid if (1) the authMode is 'psk' & the encryptionMode is 'wpa' OR (2) the authMode is '8021x-meraki' OR (3) the authMode is '8021x-radius'", alias="wpaEncryptionMode")
    __properties: ClassVar[List[str]] = ["authMode", "defaultVlanId", "dhcpEnforcedDeauthentication", "enabled", "encryptionMode", "name", "psk", "radiusServers", "visible", "wpaEncryptionMode"]

    @field_validator('auth_mode')
    def auth_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['8021x-meraki', '8021x-radius', 'open', 'psk']):
            raise ValueError("must be one of enum values ('8021x-meraki', '8021x-radius', 'open', 'psk')")
        return value

    @field_validator('encryption_mode')
    def encryption_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['wep', 'wpa']):
            raise ValueError("must be one of enum values ('wep', 'wpa')")
        return value

    @field_validator('wpa_encryption_mode')
    def wpa_encryption_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WPA1 and WPA2', 'WPA2 only', 'WPA3 Transition Mode', 'WPA3 only']):
            raise ValueError("must be one of enum values ('WPA1 and WPA2', 'WPA2 only', 'WPA3 Transition Mode', 'WPA3 only')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateNetworkApplianceSsidRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dhcp_enforced_deauthentication
        if self.dhcp_enforced_deauthentication:
            _dict['dhcpEnforcedDeauthentication'] = self.dhcp_enforced_deauthentication.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in radius_servers (list)
        _items = []
        if self.radius_servers:
            for _item_radius_servers in self.radius_servers:
                if _item_radius_servers:
                    _items.append(_item_radius_servers.to_dict())
            _dict['radiusServers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateNetworkApplianceSsidRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authMode": obj.get("authMode"),
            "defaultVlanId": obj.get("defaultVlanId"),
            "dhcpEnforcedDeauthentication": UpdateNetworkApplianceSsidRequestDhcpEnforcedDeauthentication.from_dict(obj["dhcpEnforcedDeauthentication"]) if obj.get("dhcpEnforcedDeauthentication") is not None else None,
            "enabled": obj.get("enabled"),
            "encryptionMode": obj.get("encryptionMode"),
            "name": obj.get("name"),
            "psk": obj.get("psk"),
            "radiusServers": [UpdateNetworkApplianceSsidRequestRadiusServersInner.from_dict(_item) for _item in obj["radiusServers"]] if obj.get("radiusServers") is not None else None,
            "visible": obj.get("visible"),
            "wpaEncryptionMode": obj.get("wpaEncryptionMode")
        })
        return _obj



# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetOrganizationSwitchPortsBySwitch200ResponseInnerPortsInner(BaseModel):
    """
    GetOrganizationSwitchPortsBySwitch200ResponseInnerPortsInner
    """ # noqa: E501
    access_policy_type: Optional[StrictStr] = Field(default=None, description="The type of the access policy of the switch port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.", alias="accessPolicyType")
    allowed_vlans: Optional[StrictStr] = Field(default=None, description="The VLANs allowed on the switch port. Only applicable to trunk ports.", alias="allowedVlans")
    enabled: Optional[StrictBool] = Field(default=None, description="The status of the switch port.")
    link_negotiation: Optional[StrictStr] = Field(default=None, description="The link speed for the switch port.", alias="linkNegotiation")
    name: Optional[StrictStr] = Field(default=None, description="The name of the switch port.")
    poe_enabled: Optional[StrictBool] = Field(default=None, description="The PoE status of the switch port.", alias="poeEnabled")
    port_id: Optional[StrictStr] = Field(default=None, description="The identifier of the switch port.", alias="portId")
    rstp_enabled: Optional[StrictBool] = Field(default=None, description="The rapid spanning tree protocol status.", alias="rstpEnabled")
    sticky_mac_allow_list: Optional[List[StrictStr]] = Field(default=None, description="The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.", alias="stickyMacAllowList")
    sticky_mac_allow_list_limit: Optional[StrictInt] = Field(default=None, description="The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.", alias="stickyMacAllowListLimit")
    stp_guard: Optional[StrictStr] = Field(default=None, description="The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').", alias="stpGuard")
    tags: Optional[List[StrictStr]] = Field(default=None, description="The list of tags of the switch port.")
    type: Optional[StrictStr] = Field(default=None, description="The type of the switch port ('trunk' or 'access').")
    vlan: Optional[StrictInt] = Field(default=None, description="The VLAN of the switch port. A null value will clear the value set for trunk ports.")
    voice_vlan: Optional[StrictInt] = Field(default=None, description="The voice VLAN of the switch port. Only applicable to access ports.", alias="voiceVlan")
    __properties: ClassVar[List[str]] = ["accessPolicyType", "allowedVlans", "enabled", "linkNegotiation", "name", "poeEnabled", "portId", "rstpEnabled", "stickyMacAllowList", "stickyMacAllowListLimit", "stpGuard", "tags", "type", "vlan", "voiceVlan"]

    @field_validator('access_policy_type')
    def access_policy_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Custom access policy', 'MAC allow list', 'Open', 'Sticky MAC allow list']):
            raise ValueError("must be one of enum values ('Custom access policy', 'MAC allow list', 'Open', 'Sticky MAC allow list')")
        return value

    @field_validator('stp_guard')
    def stp_guard_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['bpdu guard', 'disabled', 'loop guard', 'root guard']):
            raise ValueError("must be one of enum values ('bpdu guard', 'disabled', 'loop guard', 'root guard')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['access', 'trunk']):
            raise ValueError("must be one of enum values ('access', 'trunk')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetOrganizationSwitchPortsBySwitch200ResponseInnerPortsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetOrganizationSwitchPortsBySwitch200ResponseInnerPortsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessPolicyType": obj.get("accessPolicyType"),
            "allowedVlans": obj.get("allowedVlans"),
            "enabled": obj.get("enabled"),
            "linkNegotiation": obj.get("linkNegotiation"),
            "name": obj.get("name"),
            "poeEnabled": obj.get("poeEnabled"),
            "portId": obj.get("portId"),
            "rstpEnabled": obj.get("rstpEnabled"),
            "stickyMacAllowList": obj.get("stickyMacAllowList"),
            "stickyMacAllowListLimit": obj.get("stickyMacAllowListLimit"),
            "stpGuard": obj.get("stpGuard"),
            "tags": obj.get("tags"),
            "type": obj.get("type"),
            "vlan": obj.get("vlan"),
            "voiceVlan": obj.get("voiceVlan")
        })
        return _obj



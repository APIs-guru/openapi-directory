# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateDeviceManagementInterfaceRequestWan2(BaseModel):
    """
    WAN 2 settings (only for MX devices)
    """ # noqa: E501
    static_dns: Optional[List[StrictStr]] = Field(default=None, description="Up to two DNS IPs.", alias="staticDns")
    static_gateway_ip: Optional[StrictStr] = Field(default=None, description="The IP of the gateway on the WAN.", alias="staticGatewayIp")
    static_ip: Optional[StrictStr] = Field(default=None, description="The IP the device should use on the WAN.", alias="staticIp")
    static_subnet_mask: Optional[StrictStr] = Field(default=None, description="The subnet mask for the WAN.", alias="staticSubnetMask")
    using_static_ip: Optional[StrictBool] = Field(default=None, description="Configure the interface to have static IP settings or use DHCP.", alias="usingStaticIp")
    vlan: Optional[StrictInt] = Field(default=None, description="The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false.")
    wan_enabled: Optional[StrictStr] = Field(default=None, description="Enable or disable the interface (only for MX devices). Valid values are 'enabled', 'disabled', and 'not configured'.", alias="wanEnabled")
    __properties: ClassVar[List[str]] = ["staticDns", "staticGatewayIp", "staticIp", "staticSubnetMask", "usingStaticIp", "vlan", "wanEnabled"]

    @field_validator('wan_enabled')
    def wan_enabled_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['disabled', 'enabled', 'not configured']):
            raise ValueError("must be one of enum values ('disabled', 'enabled', 'not configured')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateDeviceManagementInterfaceRequestWan2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateDeviceManagementInterfaceRequestWan2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "staticDns": obj.get("staticDns"),
            "staticGatewayIp": obj.get("staticGatewayIp"),
            "staticIp": obj.get("staticIp"),
            "staticSubnetMask": obj.get("staticSubnetMask"),
            "usingStaticIp": obj.get("usingStaticIp"),
            "vlan": obj.get("vlan"),
            "wanEnabled": obj.get("wanEnabled")
        })
        return _obj



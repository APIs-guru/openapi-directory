# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.create_network_group_policy_request_bandwidth import CreateNetworkGroupPolicyRequestBandwidth
from openapi_client.models.create_network_group_policy_request_bonjour_forwarding import CreateNetworkGroupPolicyRequestBonjourForwarding
from openapi_client.models.create_network_group_policy_request_content_filtering import CreateNetworkGroupPolicyRequestContentFiltering
from openapi_client.models.create_network_group_policy_request_firewall_and_traffic_shaping import CreateNetworkGroupPolicyRequestFirewallAndTrafficShaping
from openapi_client.models.create_network_group_policy_request_scheduling import CreateNetworkGroupPolicyRequestScheduling
from openapi_client.models.create_network_group_policy_request_vlan_tagging import CreateNetworkGroupPolicyRequestVlanTagging
from typing import Optional, Set
from typing_extensions import Self

class CreateNetworkGroupPolicyRequest(BaseModel):
    """
    CreateNetworkGroupPolicyRequest
    """ # noqa: E501
    bandwidth: Optional[CreateNetworkGroupPolicyRequestBandwidth] = None
    bonjour_forwarding: Optional[CreateNetworkGroupPolicyRequestBonjourForwarding] = Field(default=None, alias="bonjourForwarding")
    content_filtering: Optional[CreateNetworkGroupPolicyRequestContentFiltering] = Field(default=None, alias="contentFiltering")
    firewall_and_traffic_shaping: Optional[CreateNetworkGroupPolicyRequestFirewallAndTrafficShaping] = Field(default=None, alias="firewallAndTrafficShaping")
    name: StrictStr = Field(description="The name for your group policy. Required.")
    scheduling: Optional[CreateNetworkGroupPolicyRequestScheduling] = None
    splash_auth_settings: Optional[StrictStr] = Field(default=None, description="Whether clients bound to your policy will bypass splash authorization or behave according to the network's rules. Can be one of 'network default' or 'bypass'. Only available if your network has a wireless configuration.", alias="splashAuthSettings")
    vlan_tagging: Optional[CreateNetworkGroupPolicyRequestVlanTagging] = Field(default=None, alias="vlanTagging")
    __properties: ClassVar[List[str]] = ["bandwidth", "bonjourForwarding", "contentFiltering", "firewallAndTrafficShaping", "name", "scheduling", "splashAuthSettings", "vlanTagging"]

    @field_validator('splash_auth_settings')
    def splash_auth_settings_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['bypass', 'network default']):
            raise ValueError("must be one of enum values ('bypass', 'network default')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateNetworkGroupPolicyRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bandwidth
        if self.bandwidth:
            _dict['bandwidth'] = self.bandwidth.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bonjour_forwarding
        if self.bonjour_forwarding:
            _dict['bonjourForwarding'] = self.bonjour_forwarding.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content_filtering
        if self.content_filtering:
            _dict['contentFiltering'] = self.content_filtering.to_dict()
        # override the default output from pydantic by calling `to_dict()` of firewall_and_traffic_shaping
        if self.firewall_and_traffic_shaping:
            _dict['firewallAndTrafficShaping'] = self.firewall_and_traffic_shaping.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scheduling
        if self.scheduling:
            _dict['scheduling'] = self.scheduling.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vlan_tagging
        if self.vlan_tagging:
            _dict['vlanTagging'] = self.vlan_tagging.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateNetworkGroupPolicyRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bandwidth": CreateNetworkGroupPolicyRequestBandwidth.from_dict(obj["bandwidth"]) if obj.get("bandwidth") is not None else None,
            "bonjourForwarding": CreateNetworkGroupPolicyRequestBonjourForwarding.from_dict(obj["bonjourForwarding"]) if obj.get("bonjourForwarding") is not None else None,
            "contentFiltering": CreateNetworkGroupPolicyRequestContentFiltering.from_dict(obj["contentFiltering"]) if obj.get("contentFiltering") is not None else None,
            "firewallAndTrafficShaping": CreateNetworkGroupPolicyRequestFirewallAndTrafficShaping.from_dict(obj["firewallAndTrafficShaping"]) if obj.get("firewallAndTrafficShaping") is not None else None,
            "name": obj.get("name"),
            "scheduling": CreateNetworkGroupPolicyRequestScheduling.from_dict(obj["scheduling"]) if obj.get("scheduling") is not None else None,
            "splashAuthSettings": obj.get("splashAuthSettings"),
            "vlanTagging": CreateNetworkGroupPolicyRequestVlanTagging.from_dict(obj["vlanTagging"]) if obj.get("vlanTagging") is not None else None
        })
        return _obj



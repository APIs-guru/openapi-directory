# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateNetworkWirelessRfProfileRequestFiveGhzSettings(BaseModel):
    """
    Settings related to 5Ghz band
    """ # noqa: E501
    channel_width: Optional[StrictStr] = Field(default=None, description="Sets channel width (MHz) for 5Ghz band. Can be one of 'auto', '20', '40' or '80'.", alias="channelWidth")
    max_power: Optional[StrictInt] = Field(default=None, description="Sets max power (dBm) of 5Ghz band. Can be integer between 2 and 30.", alias="maxPower")
    min_bitrate: Optional[StrictInt] = Field(default=None, description="Sets min bitrate (Mbps) of 5Ghz band. Can be one of '6', '9', '12', '18', '24', '36', '48' or '54'.", alias="minBitrate")
    min_power: Optional[StrictInt] = Field(default=None, description="Sets min power (dBm) of 5Ghz band. Can be integer between 2 and 30.", alias="minPower")
    rxsop: Optional[StrictInt] = Field(default=None, description="The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default.")
    valid_auto_channels: Optional[List[StrictInt]] = Field(default=None, description="Sets valid auto channels for 5Ghz band. Can be one of '36', '40', '44', '48', '52', '56', '60', '64', '100', '104', '108', '112', '116', '120', '124', '128', '132', '136', '140', '144', '149', '153', '157', '161' or '165'.", alias="validAutoChannels")
    __properties: ClassVar[List[str]] = ["channelWidth", "maxPower", "minBitrate", "minPower", "rxsop", "validAutoChannels"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateNetworkWirelessRfProfileRequestFiveGhzSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateNetworkWirelessRfProfileRequestFiveGhzSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channelWidth": obj.get("channelWidth"),
            "maxPower": obj.get("maxPower"),
            "minBitrate": obj.get("minBitrate"),
            "minPower": obj.get("minPower"),
            "rxsop": obj.get("rxsop"),
            "validAutoChannels": obj.get("validAutoChannels")
        })
        return _obj



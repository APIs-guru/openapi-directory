# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.create_network_group_policy_request_firewall_and_traffic_shaping_l3_firewall_rules_inner import CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingL3FirewallRulesInner
from openapi_client.models.create_network_group_policy_request_firewall_and_traffic_shaping_l7_firewall_rules_inner import CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingL7FirewallRulesInner
from openapi_client.models.create_network_group_policy_request_firewall_and_traffic_shaping_traffic_shaping_rules_inner import CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingTrafficShapingRulesInner
from typing import Optional, Set
from typing_extensions import Self

class CreateNetworkGroupPolicyRequestFirewallAndTrafficShaping(BaseModel):
    """
        The firewall and traffic shaping rules and settings for your policy. 
    """ # noqa: E501
    l3_firewall_rules: Optional[List[CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingL3FirewallRulesInner]] = Field(default=None, description="An ordered array of the L3 firewall rules", alias="l3FirewallRules")
    l7_firewall_rules: Optional[List[CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingL7FirewallRulesInner]] = Field(default=None, description="An ordered array of L7 firewall rules", alias="l7FirewallRules")
    settings: Optional[StrictStr] = Field(default=None, description="How firewall and traffic shaping rules are enforced. Can be 'network default', 'ignore' or 'custom'.")
    traffic_shaping_rules: Optional[List[CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingTrafficShapingRulesInner]] = Field(default=None, description="    An array of traffic shaping rules. Rules are applied in the order that     they are specified in. An empty list (or null) means no rules. Note that     you are allowed a maximum of 8 rules. ", alias="trafficShapingRules")
    __properties: ClassVar[List[str]] = ["l3FirewallRules", "l7FirewallRules", "settings", "trafficShapingRules"]

    @field_validator('settings')
    def settings_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['custom', 'ignore', 'network default']):
            raise ValueError("must be one of enum values ('custom', 'ignore', 'network default')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateNetworkGroupPolicyRequestFirewallAndTrafficShaping from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in l3_firewall_rules (list)
        _items = []
        if self.l3_firewall_rules:
            for _item_l3_firewall_rules in self.l3_firewall_rules:
                if _item_l3_firewall_rules:
                    _items.append(_item_l3_firewall_rules.to_dict())
            _dict['l3FirewallRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in l7_firewall_rules (list)
        _items = []
        if self.l7_firewall_rules:
            for _item_l7_firewall_rules in self.l7_firewall_rules:
                if _item_l7_firewall_rules:
                    _items.append(_item_l7_firewall_rules.to_dict())
            _dict['l7FirewallRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in traffic_shaping_rules (list)
        _items = []
        if self.traffic_shaping_rules:
            for _item_traffic_shaping_rules in self.traffic_shaping_rules:
                if _item_traffic_shaping_rules:
                    _items.append(_item_traffic_shaping_rules.to_dict())
            _dict['trafficShapingRules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateNetworkGroupPolicyRequestFirewallAndTrafficShaping from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "l3FirewallRules": [CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingL3FirewallRulesInner.from_dict(_item) for _item in obj["l3FirewallRules"]] if obj.get("l3FirewallRules") is not None else None,
            "l7FirewallRules": [CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingL7FirewallRulesInner.from_dict(_item) for _item in obj["l7FirewallRules"]] if obj.get("l7FirewallRules") is not None else None,
            "settings": obj.get("settings"),
            "trafficShapingRules": [CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingTrafficShapingRulesInner.from_dict(_item) for _item in obj["trafficShapingRules"]] if obj.get("trafficShapingRules") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.update_network_wireless_alternate_management_interface_request_access_points_inner import UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner
from typing import Optional, Set
from typing_extensions import Self

class UpdateNetworkWirelessAlternateManagementInterfaceRequest(BaseModel):
    """
    UpdateNetworkWirelessAlternateManagementInterfaceRequest
    """ # noqa: E501
    access_points: Optional[List[UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner]] = Field(default=None, description="Array of access point serial number and IP assignment. Note: accessPoints IP assignment is not applicable for template networks, in other words, do not put 'accessPoints' in the body when updating template networks. Also, an empty 'accessPoints' array will remove all previous static IP assignments", alias="accessPoints")
    enabled: Optional[StrictBool] = Field(default=None, description="Boolean value to enable or disable alternate management interface")
    protocols: Optional[List[StrictStr]] = Field(default=None, description="Can be one or more of the following values: 'radius', 'snmp', 'syslog' or 'ldap'")
    vlan_id: Optional[StrictInt] = Field(default=None, description="Alternate management interface VLAN, must be between 1 and 4094", alias="vlanId")
    __properties: ClassVar[List[str]] = ["accessPoints", "enabled", "protocols", "vlanId"]

    @field_validator('protocols')
    def protocols_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['ldap', 'radius', 'snmp', 'syslog']):
                raise ValueError("each list item must be one of ('ldap', 'radius', 'snmp', 'syslog')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateNetworkWirelessAlternateManagementInterfaceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in access_points (list)
        _items = []
        if self.access_points:
            for _item_access_points in self.access_points:
                if _item_access_points:
                    _items.append(_item_access_points.to_dict())
            _dict['accessPoints'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateNetworkWirelessAlternateManagementInterfaceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessPoints": [UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner.from_dict(_item) for _item in obj["accessPoints"]] if obj.get("accessPoints") is not None else None,
            "enabled": obj.get("enabled"),
            "protocols": obj.get("protocols"),
            "vlanId": obj.get("vlanId")
        })
        return _obj



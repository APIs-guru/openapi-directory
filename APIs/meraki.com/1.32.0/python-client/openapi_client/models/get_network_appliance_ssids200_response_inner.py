# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_network_appliance_ssids200_response_inner_radius_servers_inner import GetNetworkApplianceSsids200ResponseInnerRadiusServersInner
from typing import Optional, Set
from typing_extensions import Self

class GetNetworkApplianceSsids200ResponseInner(BaseModel):
    """
    GetNetworkApplianceSsids200ResponseInner
    """ # noqa: E501
    auth_mode: Optional[StrictStr] = Field(default=None, description="The association control method for the SSID.", alias="authMode")
    default_vlan_id: Optional[StrictInt] = Field(default=None, description="The VLAN ID of the VLAN associated to this SSID.", alias="defaultVlanId")
    enabled: Optional[StrictBool] = Field(default=None, description="Whether or not the SSID is enabled.")
    encryption_mode: Optional[StrictStr] = Field(default=None, description="The psk encryption mode for the SSID.", alias="encryptionMode")
    name: Optional[StrictStr] = Field(default=None, description="The name of the SSID.")
    number: Optional[StrictInt] = Field(default=None, description="The number of the SSID.")
    radius_servers: Optional[List[GetNetworkApplianceSsids200ResponseInnerRadiusServersInner]] = Field(default=None, description="The RADIUS 802.1x servers to be used for authentication.", alias="radiusServers")
    visible: Optional[StrictBool] = Field(default=None, description="Boolean indicating whether the MX should advertise or hide this SSID.")
    wpa_encryption_mode: Optional[StrictStr] = Field(default=None, description="WPA encryption mode for the SSID.", alias="wpaEncryptionMode")
    __properties: ClassVar[List[str]] = ["authMode", "defaultVlanId", "enabled", "encryptionMode", "name", "number", "radiusServers", "visible", "wpaEncryptionMode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetNetworkApplianceSsids200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in radius_servers (list)
        _items = []
        if self.radius_servers:
            for _item_radius_servers in self.radius_servers:
                if _item_radius_servers:
                    _items.append(_item_radius_servers.to_dict())
            _dict['radiusServers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetNetworkApplianceSsids200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authMode": obj.get("authMode"),
            "defaultVlanId": obj.get("defaultVlanId"),
            "enabled": obj.get("enabled"),
            "encryptionMode": obj.get("encryptionMode"),
            "name": obj.get("name"),
            "number": obj.get("number"),
            "radiusServers": [GetNetworkApplianceSsids200ResponseInnerRadiusServersInner.from_dict(_item) for _item in obj["radiusServers"]] if obj.get("radiusServers") is not None else None,
            "visible": obj.get("visible"),
            "wpaEncryptionMode": obj.get("wpaEncryptionMode")
        })
        return _obj



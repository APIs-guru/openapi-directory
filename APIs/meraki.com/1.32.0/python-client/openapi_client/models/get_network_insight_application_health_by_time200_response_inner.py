# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GetNetworkInsightApplicationHealthByTime200ResponseInner(BaseModel):
    """
    GetNetworkInsightApplicationHealthByTime200ResponseInner
    """ # noqa: E501
    end_ts: Optional[datetime] = Field(default=None, description="The end time of the query range", alias="endTs")
    lan_goodput: Optional[StrictInt] = Field(default=None, description="LAN goodput (Number of useful information bits delivered over a LAN per unit of time)", alias="lanGoodput")
    lan_latency_ms: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="LAN latency in milliseconds", alias="lanLatencyMs")
    lan_loss_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="LAN loss percentage", alias="lanLossPercent")
    num_clients: Optional[StrictInt] = Field(default=None, description="Number of clients", alias="numClients")
    recv: Optional[StrictInt] = Field(default=None, description="Received kilobytes-per-second")
    response_duration: Optional[StrictInt] = Field(default=None, description="Duration of the response, in milliseconds", alias="responseDuration")
    sent: Optional[StrictInt] = Field(default=None, description="Sent kilobytes-per-second")
    start_ts: Optional[datetime] = Field(default=None, description="The start time of the query range", alias="startTs")
    wan_goodput: Optional[StrictInt] = Field(default=None, description="WAN goodput (Number of useful information bits delivered over a WAN per unit of time)", alias="wanGoodput")
    wan_latency_ms: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="WAN latency in milliseconds", alias="wanLatencyMs")
    wan_loss_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="WAN loss percentage", alias="wanLossPercent")
    __properties: ClassVar[List[str]] = ["endTs", "lanGoodput", "lanLatencyMs", "lanLossPercent", "numClients", "recv", "responseDuration", "sent", "startTs", "wanGoodput", "wanLatencyMs", "wanLossPercent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetNetworkInsightApplicationHealthByTime200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetNetworkInsightApplicationHealthByTime200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endTs": obj.get("endTs"),
            "lanGoodput": obj.get("lanGoodput"),
            "lanLatencyMs": obj.get("lanLatencyMs"),
            "lanLossPercent": obj.get("lanLossPercent"),
            "numClients": obj.get("numClients"),
            "recv": obj.get("recv"),
            "responseDuration": obj.get("responseDuration"),
            "sent": obj.get("sent"),
            "startTs": obj.get("startTs"),
            "wanGoodput": obj.get("wanGoodput"),
            "wanLatencyMs": obj.get("wanLatencyMs"),
            "wanLossPercent": obj.get("wanLossPercent")
        })
        return _obj



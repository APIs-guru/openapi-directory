# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.provision_network_clients_request_clients_inner import ProvisionNetworkClientsRequestClientsInner
from openapi_client.models.provision_network_clients_request_policies_by_security_appliance import ProvisionNetworkClientsRequestPoliciesBySecurityAppliance
from openapi_client.models.provision_network_clients_request_policies_by_ssid import ProvisionNetworkClientsRequestPoliciesBySsid
from typing import Optional, Set
from typing_extensions import Self

class ProvisionNetworkClientsRequest(BaseModel):
    """
    ProvisionNetworkClientsRequest
    """ # noqa: E501
    clients: List[ProvisionNetworkClientsRequestClientsInner] = Field(description="The array of clients to provision")
    device_policy: StrictStr = Field(description="The policy to apply to the specified client. Can be 'Group policy', 'Allowed', 'Blocked', 'Per connection' or 'Normal'. Required.", alias="devicePolicy")
    group_policy_id: Optional[StrictStr] = Field(default=None, description="The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to \"Group policy\". Otherwise this is ignored.", alias="groupPolicyId")
    policies_by_security_appliance: Optional[ProvisionNetworkClientsRequestPoliciesBySecurityAppliance] = Field(default=None, alias="policiesBySecurityAppliance")
    policies_by_ssid: Optional[ProvisionNetworkClientsRequestPoliciesBySsid] = Field(default=None, alias="policiesBySsid")
    __properties: ClassVar[List[str]] = ["clients", "devicePolicy", "groupPolicyId", "policiesBySecurityAppliance", "policiesBySsid"]

    @field_validator('device_policy')
    def device_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Allowed', 'Blocked', 'Group policy', 'Normal', 'Per connection']):
            raise ValueError("must be one of enum values ('Allowed', 'Blocked', 'Group policy', 'Normal', 'Per connection')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProvisionNetworkClientsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in clients (list)
        _items = []
        if self.clients:
            for _item_clients in self.clients:
                if _item_clients:
                    _items.append(_item_clients.to_dict())
            _dict['clients'] = _items
        # override the default output from pydantic by calling `to_dict()` of policies_by_security_appliance
        if self.policies_by_security_appliance:
            _dict['policiesBySecurityAppliance'] = self.policies_by_security_appliance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policies_by_ssid
        if self.policies_by_ssid:
            _dict['policiesBySsid'] = self.policies_by_ssid.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProvisionNetworkClientsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clients": [ProvisionNetworkClientsRequestClientsInner.from_dict(_item) for _item in obj["clients"]] if obj.get("clients") is not None else None,
            "devicePolicy": obj.get("devicePolicy"),
            "groupPolicyId": obj.get("groupPolicyId"),
            "policiesBySecurityAppliance": ProvisionNetworkClientsRequestPoliciesBySecurityAppliance.from_dict(obj["policiesBySecurityAppliance"]) if obj.get("policiesBySecurityAppliance") is not None else None,
            "policiesBySsid": ProvisionNetworkClientsRequestPoliciesBySsid.from_dict(obj["policiesBySsid"]) if obj.get("policiesBySsid") is not None else None
        })
        return _obj



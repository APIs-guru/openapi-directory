# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.update_network_appliance_vpn_bgp_request_neighbors_inner import UpdateNetworkApplianceVpnBgpRequestNeighborsInner
from typing import Optional, Set
from typing_extensions import Self

class UpdateNetworkApplianceVpnBgpRequest(BaseModel):
    """
    UpdateNetworkApplianceVpnBgpRequest
    """ # noqa: E501
    as_number: Optional[StrictInt] = Field(default=None, description="An Autonomous System Number (ASN) is required if you are to run BGP and peer with another BGP Speaker outside of the Auto VPN domain. This ASN will be applied to the entire Auto VPN domain. The entire 4-byte ASN range is supported. So, the ASN must be an integer between 1 and 4294967295. When absent, this field is not updated. If no value exists then it defaults to 64512.", alias="asNumber")
    enabled: StrictBool = Field(description="Boolean value to enable or disable the BGP configuration. When BGP is enabled, the asNumber (ASN) will be autopopulated with the preconfigured ASN at other Hubs or a default value if there is no ASN configured.")
    ibgp_hold_timer: Optional[StrictInt] = Field(default=None, description="The IBGP holdtimer in seconds. The IBGP holdtimer must be an integer between 12 and 240. When absent, this field is not updated. If no value exists then it defaults to 240.", alias="ibgpHoldTimer")
    neighbors: Optional[List[UpdateNetworkApplianceVpnBgpRequestNeighborsInner]] = Field(default=None, description="List of BGP neighbors. This list replaces the existing set of neighbors. When absent, this field is not updated.")
    __properties: ClassVar[List[str]] = ["asNumber", "enabled", "ibgpHoldTimer", "neighbors"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateNetworkApplianceVpnBgpRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in neighbors (list)
        _items = []
        if self.neighbors:
            for _item_neighbors in self.neighbors:
                if _item_neighbors:
                    _items.append(_item_neighbors.to_dict())
            _dict['neighbors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateNetworkApplianceVpnBgpRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asNumber": obj.get("asNumber"),
            "enabled": obj.get("enabled"),
            "ibgpHoldTimer": obj.get("ibgpHoldTimer"),
            "neighbors": [UpdateNetworkApplianceVpnBgpRequestNeighborsInner.from_dict(_item) for _item in obj["neighbors"]] if obj.get("neighbors") is not None else None
        })
        return _obj



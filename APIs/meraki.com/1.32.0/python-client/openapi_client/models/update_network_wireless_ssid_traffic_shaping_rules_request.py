# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.update_network_wireless_ssid_traffic_shaping_rules_request_rules_inner import UpdateNetworkWirelessSsidTrafficShapingRulesRequestRulesInner
from typing import Optional, Set
from typing_extensions import Self

class UpdateNetworkWirelessSsidTrafficShapingRulesRequest(BaseModel):
    """
    UpdateNetworkWirelessSsidTrafficShapingRulesRequest
    """ # noqa: E501
    default_rules_enabled: Optional[StrictBool] = Field(default=None, description="Whether default traffic shaping rules are enabled (true) or disabled (false). There are 4 default rules, which can be seen on your network's traffic shaping page. Note that default rules count against the rule limit of 8.", alias="defaultRulesEnabled")
    rules: Optional[List[UpdateNetworkWirelessSsidTrafficShapingRulesRequestRulesInner]] = Field(default=None, description="    An array of traffic shaping rules. Rules are applied in the order that     they are specified in. An empty list (or null) means no rules. Note that     you are allowed a maximum of 8 rules. ")
    traffic_shaping_enabled: Optional[StrictBool] = Field(default=None, description="Whether traffic shaping rules are applied to clients on your SSID.", alias="trafficShapingEnabled")
    __properties: ClassVar[List[str]] = ["defaultRulesEnabled", "rules", "trafficShapingEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateNetworkWirelessSsidTrafficShapingRulesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in rules (list)
        _items = []
        if self.rules:
            for _item_rules in self.rules:
                if _item_rules:
                    _items.append(_item_rules.to_dict())
            _dict['rules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateNetworkWirelessSsidTrafficShapingRulesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultRulesEnabled": obj.get("defaultRulesEnabled"),
            "rules": [UpdateNetworkWirelessSsidTrafficShapingRulesRequestRulesInner.from_dict(_item) for _item in obj["rules"]] if obj.get("rules") is not None else None,
            "trafficShapingEnabled": obj.get("trafficShapingEnabled")
        })
        return _obj



# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_network_sensor_alerts_profiles200_response_inner_conditions_inner import GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner
from openapi_client.models.get_network_sensor_alerts_profiles200_response_inner_recipients import GetNetworkSensorAlertsProfiles200ResponseInnerRecipients
from openapi_client.models.get_network_sensor_alerts_profiles200_response_inner_schedule import GetNetworkSensorAlertsProfiles200ResponseInnerSchedule
from typing import Optional, Set
from typing_extensions import Self

class GetNetworkSensorAlertsProfiles200ResponseInner(BaseModel):
    """
    GetNetworkSensorAlertsProfiles200ResponseInner
    """ # noqa: E501
    conditions: List[GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner] = Field(description="List of conditions that will cause the profile to send an alert.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the sensor alert profile.")
    profile_id: Optional[StrictStr] = Field(default=None, description="ID of the sensor alert profile.", alias="profileId")
    recipients: Optional[GetNetworkSensorAlertsProfiles200ResponseInnerRecipients] = None
    schedule: Optional[GetNetworkSensorAlertsProfiles200ResponseInnerSchedule] = None
    serials: Optional[List[StrictStr]] = Field(default=None, description="List of device serials assigned to this sensor alert profile.")
    __properties: ClassVar[List[str]] = ["conditions", "name", "profileId", "recipients", "schedule", "serials"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetNetworkSensorAlertsProfiles200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item_conditions in self.conditions:
                if _item_conditions:
                    _items.append(_item_conditions.to_dict())
            _dict['conditions'] = _items
        # override the default output from pydantic by calling `to_dict()` of recipients
        if self.recipients:
            _dict['recipients'] = self.recipients.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule
        if self.schedule:
            _dict['schedule'] = self.schedule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetNetworkSensorAlertsProfiles200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conditions": [GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.from_dict(_item) for _item in obj["conditions"]] if obj.get("conditions") is not None else None,
            "name": obj.get("name"),
            "profileId": obj.get("profileId"),
            "recipients": GetNetworkSensorAlertsProfiles200ResponseInnerRecipients.from_dict(obj["recipients"]) if obj.get("recipients") is not None else None,
            "schedule": GetNetworkSensorAlertsProfiles200ResponseInnerSchedule.from_dict(obj["schedule"]) if obj.get("schedule") is not None else None,
            "serials": obj.get("serials")
        })
        return _obj



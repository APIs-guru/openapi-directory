# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.update_device_wireless_radio_settings_request_five_ghz_settings import UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings
from openapi_client.models.update_device_wireless_radio_settings_request_two_four_ghz_settings import UpdateDeviceWirelessRadioSettingsRequestTwoFourGhzSettings
from typing import Optional, Set
from typing_extensions import Self

class UpdateDeviceWirelessRadioSettingsRequest(BaseModel):
    """
    UpdateDeviceWirelessRadioSettingsRequest
    """ # noqa: E501
    five_ghz_settings: Optional[UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings] = Field(default=None, alias="fiveGhzSettings")
    rf_profile_id: Optional[StrictStr] = Field(default=None, description="The ID of an RF profile to assign to the device. If the value of this parameter is null, the appropriate basic RF profile (indoor or outdoor) will be assigned to the device. Assigning an RF profile will clear ALL manually configured overrides on the device (channel width, channel, power).", alias="rfProfileId")
    two_four_ghz_settings: Optional[UpdateDeviceWirelessRadioSettingsRequestTwoFourGhzSettings] = Field(default=None, alias="twoFourGhzSettings")
    __properties: ClassVar[List[str]] = ["fiveGhzSettings", "rfProfileId", "twoFourGhzSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateDeviceWirelessRadioSettingsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of five_ghz_settings
        if self.five_ghz_settings:
            _dict['fiveGhzSettings'] = self.five_ghz_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of two_four_ghz_settings
        if self.two_four_ghz_settings:
            _dict['twoFourGhzSettings'] = self.two_four_ghz_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateDeviceWirelessRadioSettingsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fiveGhzSettings": UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings.from_dict(obj["fiveGhzSettings"]) if obj.get("fiveGhzSettings") is not None else None,
            "rfProfileId": obj.get("rfProfileId"),
            "twoFourGhzSettings": UpdateDeviceWirelessRadioSettingsRequestTwoFourGhzSettings.from_dict(obj["twoFourGhzSettings"]) if obj.get("twoFourGhzSettings") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_network_sensor_alerts_profiles200_response_inner_conditions_inner_threshold import GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThreshold
from typing import Optional, Set
from typing_extensions import Self

class GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner(BaseModel):
    """
    GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner
    """ # noqa: E501
    direction: Optional[StrictStr] = Field(default=None, description="If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.")
    duration: Optional[StrictInt] = Field(default=0, description="Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.")
    metric: StrictStr = Field(description="The type of sensor metric that will be monitored for changes. Available metrics are door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.")
    threshold: GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThreshold
    __properties: ClassVar[List[str]] = ["direction", "duration", "metric", "threshold"]

    @field_validator('direction')
    def direction_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['above', 'below']):
            raise ValueError("must be one of enum values ('above', 'below')")
        return value

    @field_validator('duration')
    def duration_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 60, 120, 180, 240, 300, 600, 900, 1800, 3600]):
            raise ValueError("must be one of enum values (0, 60, 120, 180, 240, 300, 600, 900, 1800, 3600)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of threshold
        if self.threshold:
            _dict['threshold'] = self.threshold.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "direction": obj.get("direction"),
            "duration": obj.get("duration") if obj.get("duration") is not None else 0,
            "metric": obj.get("metric"),
            "threshold": GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThreshold.from_dict(obj["threshold"]) if obj.get("threshold") is not None else None
        })
        return _obj



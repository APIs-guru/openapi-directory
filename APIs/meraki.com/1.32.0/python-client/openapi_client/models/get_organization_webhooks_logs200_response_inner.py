# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetOrganizationWebhooksLogs200ResponseInner(BaseModel):
    """
    GetOrganizationWebhooksLogs200ResponseInner
    """ # noqa: E501
    alert_type: Optional[StrictStr] = Field(default=None, description="Type of alert that the webhook is delivering", alias="alertType")
    logged_at: Optional[datetime] = Field(default=None, description="When the webhook log was created, in ISO8601 format", alias="loggedAt")
    network_id: Optional[StrictStr] = Field(default=None, description="Network ID for the webhook log", alias="networkId")
    organization_id: Optional[StrictStr] = Field(default=None, description="ID for the webhook log's organization", alias="organizationId")
    response_code: Optional[StrictInt] = Field(default=None, description="Response code from the webhook", alias="responseCode")
    response_duration: Optional[StrictInt] = Field(default=None, description="Duration of the response, in milliseconds", alias="responseDuration")
    sent_at: Optional[datetime] = Field(default=None, description="When the webhook was sent, in ISO8601 format", alias="sentAt")
    url: Optional[StrictStr] = Field(default=None, description="URL where the webhook was sent")
    __properties: ClassVar[List[str]] = ["alertType", "loggedAt", "networkId", "organizationId", "responseCode", "responseDuration", "sentAt", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetOrganizationWebhooksLogs200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetOrganizationWebhooksLogs200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alertType": obj.get("alertType"),
            "loggedAt": obj.get("loggedAt"),
            "networkId": obj.get("networkId"),
            "organizationId": obj.get("organizationId"),
            "responseCode": obj.get("responseCode"),
            "responseDuration": obj.get("responseDuration"),
            "sentAt": obj.get("sentAt"),
            "url": obj.get("url")
        })
        return _obj



# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_network_appliance_vlans200_response_inner_dhcp_options_inner import GetNetworkApplianceVlans200ResponseInnerDhcpOptionsInner
from openapi_client.models.get_network_appliance_vlans200_response_inner_ipv6 import GetNetworkApplianceVlans200ResponseInnerIpv6
from openapi_client.models.get_network_appliance_vlans200_response_inner_mandatory_dhcp import GetNetworkApplianceVlans200ResponseInnerMandatoryDhcp
from openapi_client.models.get_network_appliance_vlans200_response_inner_reserved_ip_ranges_inner import GetNetworkApplianceVlans200ResponseInnerReservedIpRangesInner
from typing import Optional, Set
from typing_extensions import Self

class GetNetworkApplianceVlans200ResponseInner(BaseModel):
    """
    GetNetworkApplianceVlans200ResponseInner
    """ # noqa: E501
    appliance_ip: Optional[StrictStr] = Field(default=None, description="The local IP of the appliance on the VLAN", alias="applianceIp")
    cidr: Optional[StrictStr] = Field(default=None, description="CIDR of the pool of subnets. Applicable only for template network. Each network bound to the template will automatically pick a subnet from this pool to build its own VLAN.")
    dhcp_boot_filename: Optional[StrictStr] = Field(default=None, description="DHCP boot option for boot filename", alias="dhcpBootFilename")
    dhcp_boot_next_server: Optional[StrictStr] = Field(default=None, description="DHCP boot option to direct boot clients to the server to load the boot file from", alias="dhcpBootNextServer")
    dhcp_boot_options_enabled: Optional[StrictBool] = Field(default=None, description="Use DHCP boot options specified in other properties", alias="dhcpBootOptionsEnabled")
    dhcp_handling: Optional[StrictStr] = Field(default=None, description="The appliance's handling of DHCP requests on this VLAN. One of: 'Run a DHCP server', 'Relay DHCP to another server' or 'Do not respond to DHCP requests'", alias="dhcpHandling")
    dhcp_lease_time: Optional[StrictStr] = Field(default=None, description="The term of DHCP leases if the appliance is running a DHCP server on this VLAN. One of: '30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week'", alias="dhcpLeaseTime")
    dhcp_options: Optional[List[GetNetworkApplianceVlans200ResponseInnerDhcpOptionsInner]] = Field(default=None, description="The list of DHCP options that will be included in DHCP responses. Each object in the list should have \"code\", \"type\", and \"value\" properties.", alias="dhcpOptions")
    dhcp_relay_server_ips: Optional[List[StrictStr]] = Field(default=None, description="The IPs of the DHCP servers that DHCP requests should be relayed to", alias="dhcpRelayServerIps")
    dns_nameservers: Optional[StrictStr] = Field(default=None, description="The DNS nameservers used for DHCP responses, either \"upstream_dns\", \"google_dns\", \"opendns\", or a newline seperated string of IP addresses or domain names", alias="dnsNameservers")
    fixed_ip_assignments: Optional[Dict[str, Any]] = Field(default=None, description="The DHCP fixed IP assignments on the VLAN. This should be an object that contains mappings from MAC addresses to objects that themselves each contain \"ip\" and \"name\" string fields. See the sample request/response for more details.", alias="fixedIpAssignments")
    group_policy_id: Optional[StrictStr] = Field(default=None, description="The id of the desired group policy to apply to the VLAN", alias="groupPolicyId")
    id: Optional[StrictStr] = Field(default=None, description="The VLAN ID of the VLAN")
    interface_id: Optional[StrictStr] = Field(default=None, description="The interface ID of the VLAN", alias="interfaceId")
    ipv6: Optional[GetNetworkApplianceVlans200ResponseInnerIpv6] = None
    mandatory_dhcp: Optional[GetNetworkApplianceVlans200ResponseInnerMandatoryDhcp] = Field(default=None, alias="mandatoryDhcp")
    mask: Optional[StrictInt] = Field(default=None, description="Mask used for the subnet of all bound to the template networks. Applicable only for template network.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the VLAN")
    reserved_ip_ranges: Optional[List[GetNetworkApplianceVlans200ResponseInnerReservedIpRangesInner]] = Field(default=None, description="The DHCP reserved IP ranges on the VLAN", alias="reservedIpRanges")
    subnet: Optional[StrictStr] = Field(default=None, description="The subnet of the VLAN")
    template_vlan_type: Optional[StrictStr] = Field(default='same', description="Type of subnetting of the VLAN. Applicable only for template network.", alias="templateVlanType")
    vpn_nat_subnet: Optional[StrictStr] = Field(default=None, description="The translated VPN subnet if VPN and VPN subnet translation are enabled on the VLAN", alias="vpnNatSubnet")
    __properties: ClassVar[List[str]] = ["applianceIp", "cidr", "dhcpBootFilename", "dhcpBootNextServer", "dhcpBootOptionsEnabled", "dhcpHandling", "dhcpLeaseTime", "dhcpOptions", "dhcpRelayServerIps", "dnsNameservers", "fixedIpAssignments", "groupPolicyId", "id", "interfaceId", "ipv6", "mandatoryDhcp", "mask", "name", "reservedIpRanges", "subnet", "templateVlanType", "vpnNatSubnet"]

    @field_validator('dhcp_handling')
    def dhcp_handling_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Do not respond to DHCP requests', 'Relay DHCP to another server', 'Run a DHCP server']):
            raise ValueError("must be one of enum values ('Do not respond to DHCP requests', 'Relay DHCP to another server', 'Run a DHCP server')")
        return value

    @field_validator('dhcp_lease_time')
    def dhcp_lease_time_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['1 day', '1 hour', '1 week', '12 hours', '30 minutes', '4 hours']):
            raise ValueError("must be one of enum values ('1 day', '1 hour', '1 week', '12 hours', '30 minutes', '4 hours')")
        return value

    @field_validator('template_vlan_type')
    def template_vlan_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['same', 'unique']):
            raise ValueError("must be one of enum values ('same', 'unique')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetNetworkApplianceVlans200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dhcp_options (list)
        _items = []
        if self.dhcp_options:
            for _item_dhcp_options in self.dhcp_options:
                if _item_dhcp_options:
                    _items.append(_item_dhcp_options.to_dict())
            _dict['dhcpOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of ipv6
        if self.ipv6:
            _dict['ipv6'] = self.ipv6.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mandatory_dhcp
        if self.mandatory_dhcp:
            _dict['mandatoryDhcp'] = self.mandatory_dhcp.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in reserved_ip_ranges (list)
        _items = []
        if self.reserved_ip_ranges:
            for _item_reserved_ip_ranges in self.reserved_ip_ranges:
                if _item_reserved_ip_ranges:
                    _items.append(_item_reserved_ip_ranges.to_dict())
            _dict['reservedIpRanges'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetNetworkApplianceVlans200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applianceIp": obj.get("applianceIp"),
            "cidr": obj.get("cidr"),
            "dhcpBootFilename": obj.get("dhcpBootFilename"),
            "dhcpBootNextServer": obj.get("dhcpBootNextServer"),
            "dhcpBootOptionsEnabled": obj.get("dhcpBootOptionsEnabled"),
            "dhcpHandling": obj.get("dhcpHandling"),
            "dhcpLeaseTime": obj.get("dhcpLeaseTime"),
            "dhcpOptions": [GetNetworkApplianceVlans200ResponseInnerDhcpOptionsInner.from_dict(_item) for _item in obj["dhcpOptions"]] if obj.get("dhcpOptions") is not None else None,
            "dhcpRelayServerIps": obj.get("dhcpRelayServerIps"),
            "dnsNameservers": obj.get("dnsNameservers"),
            "fixedIpAssignments": obj.get("fixedIpAssignments"),
            "groupPolicyId": obj.get("groupPolicyId"),
            "id": obj.get("id"),
            "interfaceId": obj.get("interfaceId"),
            "ipv6": GetNetworkApplianceVlans200ResponseInnerIpv6.from_dict(obj["ipv6"]) if obj.get("ipv6") is not None else None,
            "mandatoryDhcp": GetNetworkApplianceVlans200ResponseInnerMandatoryDhcp.from_dict(obj["mandatoryDhcp"]) if obj.get("mandatoryDhcp") is not None else None,
            "mask": obj.get("mask"),
            "name": obj.get("name"),
            "reservedIpRanges": [GetNetworkApplianceVlans200ResponseInnerReservedIpRangesInner.from_dict(_item) for _item in obj["reservedIpRanges"]] if obj.get("reservedIpRanges") is not None else None,
            "subnet": obj.get("subnet"),
            "templateVlanType": obj.get("templateVlanType") if obj.get("templateVlanType") is not None else 'same',
            "vpnNatSubnet": obj.get("vpnNatSubnet")
        })
        return _obj



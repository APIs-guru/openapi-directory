# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_organization_licensing_coterm_licenses200_response_inner_counts_inner import GetOrganizationLicensingCotermLicenses200ResponseInnerCountsInner
from openapi_client.models.get_organization_licensing_coterm_licenses200_response_inner_editions_inner import GetOrganizationLicensingCotermLicenses200ResponseInnerEditionsInner
from typing import Optional, Set
from typing_extensions import Self

class GetOrganizationLicensingCotermLicenses200ResponseInner(BaseModel):
    """
    GetOrganizationLicensingCotermLicenses200ResponseInner
    """ # noqa: E501
    claimed_at: Optional[datetime] = Field(default=None, description="When the license was claimed into the organization", alias="claimedAt")
    counts: Optional[List[GetOrganizationLicensingCotermLicenses200ResponseInnerCountsInner]] = Field(default=None, description="The counts of the license by model type")
    duration: Optional[StrictInt] = Field(default=None, description="The duration (term length) of the license, measured in days")
    editions: Optional[List[GetOrganizationLicensingCotermLicenses200ResponseInnerEditionsInner]] = Field(default=None, description="The editions of the license for each relevant product type")
    expired: Optional[StrictBool] = Field(default=None, description="Flag to indicate if the license is expired")
    invalidated: Optional[StrictBool] = Field(default=None, description="Flag to indicated that the license is invalidated")
    invalidated_at: Optional[datetime] = Field(default=None, description="When the license was invalidated. Will be null for active licenses", alias="invalidatedAt")
    key: Optional[StrictStr] = Field(default=None, description="The key of the license")
    mode: Optional[StrictStr] = Field(default=None, description="The operation mode of the license when it was claimed")
    organization_id: Optional[StrictStr] = Field(default=None, description="The ID of the organization that the license is claimed in", alias="organizationId")
    started_at: Optional[datetime] = Field(default=None, description="When the license's term began (approximately the date when the license was created)", alias="startedAt")
    __properties: ClassVar[List[str]] = ["claimedAt", "counts", "duration", "editions", "expired", "invalidated", "invalidatedAt", "key", "mode", "organizationId", "startedAt"]

    @field_validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['addDevices', 'renew']):
            raise ValueError("must be one of enum values ('addDevices', 'renew')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetOrganizationLicensingCotermLicenses200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in counts (list)
        _items = []
        if self.counts:
            for _item_counts in self.counts:
                if _item_counts:
                    _items.append(_item_counts.to_dict())
            _dict['counts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in editions (list)
        _items = []
        if self.editions:
            for _item_editions in self.editions:
                if _item_editions:
                    _items.append(_item_editions.to_dict())
            _dict['editions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetOrganizationLicensingCotermLicenses200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "claimedAt": obj.get("claimedAt"),
            "counts": [GetOrganizationLicensingCotermLicenses200ResponseInnerCountsInner.from_dict(_item) for _item in obj["counts"]] if obj.get("counts") is not None else None,
            "duration": obj.get("duration"),
            "editions": [GetOrganizationLicensingCotermLicenses200ResponseInnerEditionsInner.from_dict(_item) for _item in obj["editions"]] if obj.get("editions") is not None else None,
            "expired": obj.get("expired"),
            "invalidated": obj.get("invalidated"),
            "invalidatedAt": obj.get("invalidatedAt"),
            "key": obj.get("key"),
            "mode": obj.get("mode"),
            "organizationId": obj.get("organizationId"),
            "startedAt": obj.get("startedAt")
        })
        return _obj



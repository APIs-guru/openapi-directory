# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_organization_cellular_gateway_uplink_statuses200_response_inner_uplinks_inner_signal_stat import GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInnerSignalStat
from typing import Optional, Set
from typing_extensions import Self

class GetOrganizationUplinksStatuses200ResponseInnerUplinksInner(BaseModel):
    """
    GetOrganizationUplinksStatuses200ResponseInnerUplinksInner
    """ # noqa: E501
    apn: Optional[StrictStr] = Field(default=None, description="Access Point Name")
    connection_type: Optional[StrictStr] = Field(default=None, description="Connection Type", alias="connectionType")
    dns1: Optional[StrictStr] = Field(default=None, description="Primary DNS IP")
    dns2: Optional[StrictStr] = Field(default=None, description="Secondary DNS IP")
    gateway: Optional[StrictStr] = Field(default=None, description="Gateway IP")
    iccid: Optional[StrictStr] = Field(default=None, description="Integrated Circuit Card Identification Number")
    interface: Optional[StrictStr] = Field(default=None, description="Uplink interface")
    ip: Optional[StrictStr] = Field(default=None, description="Uplink IP")
    ip_assigned_by: Optional[StrictStr] = Field(default=None, description="The way in which the IP is assigned", alias="ipAssignedBy")
    primary_dns: Optional[StrictStr] = Field(default=None, description="Primary DNS IP", alias="primaryDns")
    provider: Optional[StrictStr] = Field(default=None, description="Network Provider")
    public_ip: Optional[StrictStr] = Field(default=None, description="Public IP", alias="publicIp")
    secondary_dns: Optional[StrictStr] = Field(default=None, description="Secondary DNS IP", alias="secondaryDns")
    signal_stat: Optional[GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInnerSignalStat] = Field(default=None, alias="signalStat")
    signal_type: Optional[StrictStr] = Field(default=None, description="Signal Type", alias="signalType")
    status: Optional[StrictStr] = Field(default=None, description="Uplink status")
    __properties: ClassVar[List[str]] = ["apn", "connectionType", "dns1", "dns2", "gateway", "iccid", "interface", "ip", "ipAssignedBy", "primaryDns", "provider", "publicIp", "secondaryDns", "signalStat", "signalType", "status"]

    @field_validator('interface')
    def interface_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['cellular', 'wan1', 'wan2']):
            raise ValueError("must be one of enum values ('cellular', 'wan1', 'wan2')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['active', 'connecting', 'failed', 'not connected', 'ready']):
            raise ValueError("must be one of enum values ('active', 'connecting', 'failed', 'not connected', 'ready')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetOrganizationUplinksStatuses200ResponseInnerUplinksInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of signal_stat
        if self.signal_stat:
            _dict['signalStat'] = self.signal_stat.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetOrganizationUplinksStatuses200ResponseInnerUplinksInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apn": obj.get("apn"),
            "connectionType": obj.get("connectionType"),
            "dns1": obj.get("dns1"),
            "dns2": obj.get("dns2"),
            "gateway": obj.get("gateway"),
            "iccid": obj.get("iccid"),
            "interface": obj.get("interface"),
            "ip": obj.get("ip"),
            "ipAssignedBy": obj.get("ipAssignedBy"),
            "primaryDns": obj.get("primaryDns"),
            "provider": obj.get("provider"),
            "publicIp": obj.get("publicIp"),
            "secondaryDns": obj.get("secondaryDns"),
            "signalStat": GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInnerSignalStat.from_dict(obj["signalStat"]) if obj.get("signalStat") is not None else None,
            "signalType": obj.get("signalType"),
            "status": obj.get("status")
        })
        return _obj



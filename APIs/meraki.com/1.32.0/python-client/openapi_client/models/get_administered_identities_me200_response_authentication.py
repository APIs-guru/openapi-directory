# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_administered_identities_me200_response_authentication_api import GetAdministeredIdentitiesMe200ResponseAuthenticationApi
from openapi_client.models.get_administered_identities_me200_response_authentication_saml import GetAdministeredIdentitiesMe200ResponseAuthenticationSaml
from openapi_client.models.get_administered_identities_me200_response_authentication_two_factor import GetAdministeredIdentitiesMe200ResponseAuthenticationTwoFactor
from typing import Optional, Set
from typing_extensions import Self

class GetAdministeredIdentitiesMe200ResponseAuthentication(BaseModel):
    """
    Authentication info
    """ # noqa: E501
    api: Optional[GetAdministeredIdentitiesMe200ResponseAuthenticationApi] = None
    mode: Optional[StrictStr] = Field(default=None, description="Authentication mode")
    saml: Optional[GetAdministeredIdentitiesMe200ResponseAuthenticationSaml] = None
    two_factor: Optional[GetAdministeredIdentitiesMe200ResponseAuthenticationTwoFactor] = Field(default=None, alias="twoFactor")
    __properties: ClassVar[List[str]] = ["api", "mode", "saml", "twoFactor"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetAdministeredIdentitiesMe200ResponseAuthentication from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of api
        if self.api:
            _dict['api'] = self.api.to_dict()
        # override the default output from pydantic by calling `to_dict()` of saml
        if self.saml:
            _dict['saml'] = self.saml.to_dict()
        # override the default output from pydantic by calling `to_dict()` of two_factor
        if self.two_factor:
            _dict['twoFactor'] = self.two_factor.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetAdministeredIdentitiesMe200ResponseAuthentication from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "api": GetAdministeredIdentitiesMe200ResponseAuthenticationApi.from_dict(obj["api"]) if obj.get("api") is not None else None,
            "mode": obj.get("mode"),
            "saml": GetAdministeredIdentitiesMe200ResponseAuthenticationSaml.from_dict(obj["saml"]) if obj.get("saml") is not None else None,
            "twoFactor": GetAdministeredIdentitiesMe200ResponseAuthenticationTwoFactor.from_dict(obj["twoFactor"]) if obj.get("twoFactor") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetNetworkSmUsers200ResponseInner(BaseModel):
    """
    GetNetworkSmUsers200ResponseInner
    """ # noqa: E501
    ad_groups: Optional[List[StrictStr]] = Field(default=None, description="Active Directory Groups the user belongs to.", alias="adGroups")
    asm_groups: Optional[List[StrictStr]] = Field(default=None, description="Apple School Manager Groups the user belongs to.", alias="asmGroups")
    azure_ad_groups: Optional[List[StrictStr]] = Field(default=None, description="Azure Active Directory Groups the user belongs to.", alias="azureAdGroups")
    display_name: Optional[StrictStr] = Field(default=None, description="The user display name.", alias="displayName")
    email: Optional[StrictStr] = Field(default=None, description="User email.")
    full_name: Optional[StrictStr] = Field(default=None, description="User full name.", alias="fullName")
    has_identity_certificate: Optional[StrictBool] = Field(default=None, description="A boolean indicating if the user has an associated identity certificate..", alias="hasIdentityCertificate")
    has_password: Optional[StrictBool] = Field(default=None, description="A boolean denoting if the user has a password associated with the record.", alias="hasPassword")
    id: Optional[StrictStr] = Field(default=None, description="The Meraki managed Id of the user record.")
    is_external: Optional[StrictBool] = Field(default=None, description="Whether the user was created using an external integration, or via the Meraki Dashboard.", alias="isExternal")
    saml_groups: Optional[List[StrictStr]] = Field(default=None, description="SAML Groups the user belongs to.", alias="samlGroups")
    tags: Optional[StrictStr] = Field(default=None, description="The set of tags the user is scoped to.")
    user_thumbnail: Optional[StrictStr] = Field(default=None, description="The url where the users thumbnail is hosted.", alias="userThumbnail")
    username: Optional[StrictStr] = Field(default=None, description="The users username.")
    __properties: ClassVar[List[str]] = ["adGroups", "asmGroups", "azureAdGroups", "displayName", "email", "fullName", "hasIdentityCertificate", "hasPassword", "id", "isExternal", "samlGroups", "tags", "userThumbnail", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetNetworkSmUsers200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetNetworkSmUsers200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adGroups": obj.get("adGroups"),
            "asmGroups": obj.get("asmGroups"),
            "azureAdGroups": obj.get("azureAdGroups"),
            "displayName": obj.get("displayName"),
            "email": obj.get("email"),
            "fullName": obj.get("fullName"),
            "hasIdentityCertificate": obj.get("hasIdentityCertificate"),
            "hasPassword": obj.get("hasPassword"),
            "id": obj.get("id"),
            "isExternal": obj.get("isExternal"),
            "samlGroups": obj.get("samlGroups"),
            "tags": obj.get("tags"),
            "userThumbnail": obj.get("userThumbnail"),
            "username": obj.get("username")
        })
        return _obj



# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.update_network_wireless_ssid_schedules_request_ranges_in_seconds_inner import UpdateNetworkWirelessSsidSchedulesRequestRangesInSecondsInner
from openapi_client.models.update_network_wireless_ssid_schedules_request_ranges_inner import UpdateNetworkWirelessSsidSchedulesRequestRangesInner
from typing import Optional, Set
from typing_extensions import Self

class UpdateNetworkWirelessSsidSchedulesRequest(BaseModel):
    """
    UpdateNetworkWirelessSsidSchedulesRequest
    """ # noqa: E501
    enabled: Optional[StrictBool] = Field(default=None, description="If true, the SSID outage schedule is enabled.")
    ranges: Optional[List[UpdateNetworkWirelessSsidSchedulesRequestRangesInner]] = Field(default=None, description="List of outage ranges. Has a start date and time, and end date and time. If this parameter is passed in along with rangesInSeconds parameter, this will take precedence.")
    ranges_in_seconds: Optional[List[UpdateNetworkWirelessSsidSchedulesRequestRangesInSecondsInner]] = Field(default=None, description="List of outage ranges in seconds since Sunday at Midnight. Has a start and end. If this parameter is passed in along with the ranges parameter, ranges will take precedence.", alias="rangesInSeconds")
    __properties: ClassVar[List[str]] = ["enabled", "ranges", "rangesInSeconds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateNetworkWirelessSsidSchedulesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ranges (list)
        _items = []
        if self.ranges:
            for _item_ranges in self.ranges:
                if _item_ranges:
                    _items.append(_item_ranges.to_dict())
            _dict['ranges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ranges_in_seconds (list)
        _items = []
        if self.ranges_in_seconds:
            for _item_ranges_in_seconds in self.ranges_in_seconds:
                if _item_ranges_in_seconds:
                    _items.append(_item_ranges_in_seconds.to_dict())
            _dict['rangesInSeconds'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateNetworkWirelessSsidSchedulesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled"),
            "ranges": [UpdateNetworkWirelessSsidSchedulesRequestRangesInner.from_dict(_item) for _item in obj["ranges"]] if obj.get("ranges") is not None else None,
            "rangesInSeconds": [UpdateNetworkWirelessSsidSchedulesRequestRangesInSecondsInner.from_dict(_item) for _item in obj["rangesInSeconds"]] if obj.get("rangesInSeconds") is not None else None
        })
        return _obj



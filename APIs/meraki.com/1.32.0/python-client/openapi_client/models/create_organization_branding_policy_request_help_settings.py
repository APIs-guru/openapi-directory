# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateOrganizationBrandingPolicyRequestHelpSettings(BaseModel):
    """
          Settings for describing the modifications to various Help page features. Each property in this object accepts one of       'default or inherit' (do not modify functionality), 'hide' (remove the section from Dashboard), or 'show' (always show       the section on Dashboard). Some properties in this object also accept custom HTML used to replace the section on       Dashboard; see the documentation for each property to see the allowed values.  Each property defaults to 'default or inherit' when not provided.
    """ # noqa: E501
    api_docs_subtab: Optional[StrictStr] = Field(default=None, description="      The 'Help -> API docs' subtab where a detailed description of the Dashboard API is listed. Can be one of       'default or inherit', 'hide' or 'show'. ", alias="apiDocsSubtab")
    cases_subtab: Optional[StrictStr] = Field(default=None, description="      The 'Help -> Cases' Dashboard subtab on which Cisco Meraki support cases for this organization can be managed. Can be one       of 'default or inherit', 'hide' or 'show'. ", alias="casesSubtab")
    cisco_meraki_product_documentation: Optional[StrictStr] = Field(default=None, description="      The 'Product Manuals' section of the 'Help -> Get Help' subtab. Can be one of 'default or inherit', 'hide', 'show', or a replacement custom HTML string. ", alias="ciscoMerakiProductDocumentation")
    community_subtab: Optional[StrictStr] = Field(default=None, description="      The 'Help -> Community' subtab which provides a link to Meraki Community. Can be one of 'default or inherit', 'hide' or 'show'. ", alias="communitySubtab")
    data_protection_requests_subtab: Optional[StrictStr] = Field(default=None, description="      The 'Help -> Data protection requests' Dashboard subtab on which requests to delete, restrict, or export end-user data can       be audited. Can be one of 'default or inherit', 'hide' or 'show'. ", alias="dataProtectionRequestsSubtab")
    firewall_info_subtab: Optional[StrictStr] = Field(default=None, description="      The 'Help -> Firewall info' subtab where necessary upstream firewall rules for communication to the Cisco Meraki cloud are       listed. Can be one of 'default or inherit', 'hide' or 'show'. ", alias="firewallInfoSubtab")
    get_help_subtab: Optional[StrictStr] = Field(default=None, description="      The 'Help -> Get Help' subtab on which Cisco Meraki KB, Product Manuals, and Support/Case Information are displayed. Note       that if this subtab is hidden, branding customizations for the KB on 'Get help', Cisco Meraki product documentation,       and support contact info will not be visible. Can be one of 'default or inherit', 'hide' or 'show'. ", alias="getHelpSubtab")
    get_help_subtab_knowledge_base_search: Optional[StrictStr] = Field(default=None, description="      The KB search box which appears on the Help page. Can be one of 'default or inherit', 'hide', 'show', or a replacement custom HTML string. ", alias="getHelpSubtabKnowledgeBaseSearch")
    hardware_replacements_subtab: Optional[StrictStr] = Field(default=None, description="      The 'Help -> Replacement info' subtab where important information regarding device replacements is detailed. Can be one of       'default or inherit', 'hide' or 'show'. ", alias="hardwareReplacementsSubtab")
    help_tab: Optional[StrictStr] = Field(default=None, description="      The Help tab, under which all support information resides. If this tab is hidden, no other 'Help' branding       customizations will be visible. Can be one of 'default or inherit', 'hide' or 'show'. ", alias="helpTab")
    help_widget: Optional[StrictStr] = Field(default=None, description="      The 'Help Widget' is a support widget which provides access to live chat, documentation links, Sales contact info,       and other contact avenues to reach Meraki Support. Can be one of 'default or inherit', 'hide' or 'show'. ", alias="helpWidget")
    new_features_subtab: Optional[StrictStr] = Field(default=None, description="      The 'Help -> New features' subtab where new Dashboard features are detailed. Can be one of 'default or inherit', 'hide' or 'show'. ", alias="newFeaturesSubtab")
    sm_forums: Optional[StrictStr] = Field(default=None, description="      The 'SM Forums' subtab which links to community-based support for Cisco Meraki Systems Manager. Only configurable for       organizations that contain Systems Manager networks. Can be one of 'default or inherit', 'hide' or 'show'. ", alias="smForums")
    support_contact_info: Optional[StrictStr] = Field(default=None, description="      The 'Contact Meraki Support' section of the 'Help -> Get Help' subtab. Can be one of 'default or inherit', 'hide', 'show', or a replacement custom HTML string. ", alias="supportContactInfo")
    universal_search_knowledge_base_search: Optional[StrictStr] = Field(default=None, description="      The universal search box always visible on Dashboard will, by default, present results from the Meraki KB. This configures       whether these Meraki KB results should be returned. Can be one of 'default or inherit', 'hide' or 'show'. ", alias="universalSearchKnowledgeBaseSearch")
    __properties: ClassVar[List[str]] = ["apiDocsSubtab", "casesSubtab", "ciscoMerakiProductDocumentation", "communitySubtab", "dataProtectionRequestsSubtab", "firewallInfoSubtab", "getHelpSubtab", "getHelpSubtabKnowledgeBaseSearch", "hardwareReplacementsSubtab", "helpTab", "helpWidget", "newFeaturesSubtab", "smForums", "supportContactInfo", "universalSearchKnowledgeBaseSearch"]

    @field_validator('api_docs_subtab')
    def api_docs_subtab_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['default or inherit', 'hide', 'show']):
            raise ValueError("must be one of enum values ('default or inherit', 'hide', 'show')")
        return value

    @field_validator('cases_subtab')
    def cases_subtab_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['default or inherit', 'hide', 'show']):
            raise ValueError("must be one of enum values ('default or inherit', 'hide', 'show')")
        return value

    @field_validator('community_subtab')
    def community_subtab_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['default or inherit', 'hide', 'show']):
            raise ValueError("must be one of enum values ('default or inherit', 'hide', 'show')")
        return value

    @field_validator('data_protection_requests_subtab')
    def data_protection_requests_subtab_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['default or inherit', 'hide', 'show']):
            raise ValueError("must be one of enum values ('default or inherit', 'hide', 'show')")
        return value

    @field_validator('firewall_info_subtab')
    def firewall_info_subtab_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['default or inherit', 'hide', 'show']):
            raise ValueError("must be one of enum values ('default or inherit', 'hide', 'show')")
        return value

    @field_validator('get_help_subtab')
    def get_help_subtab_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['default or inherit', 'hide', 'show']):
            raise ValueError("must be one of enum values ('default or inherit', 'hide', 'show')")
        return value

    @field_validator('hardware_replacements_subtab')
    def hardware_replacements_subtab_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['default or inherit', 'hide', 'show']):
            raise ValueError("must be one of enum values ('default or inherit', 'hide', 'show')")
        return value

    @field_validator('help_tab')
    def help_tab_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['default or inherit', 'hide', 'show']):
            raise ValueError("must be one of enum values ('default or inherit', 'hide', 'show')")
        return value

    @field_validator('help_widget')
    def help_widget_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['default or inherit', 'hide', 'show']):
            raise ValueError("must be one of enum values ('default or inherit', 'hide', 'show')")
        return value

    @field_validator('new_features_subtab')
    def new_features_subtab_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['default or inherit', 'hide', 'show']):
            raise ValueError("must be one of enum values ('default or inherit', 'hide', 'show')")
        return value

    @field_validator('sm_forums')
    def sm_forums_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['default or inherit', 'hide', 'show']):
            raise ValueError("must be one of enum values ('default or inherit', 'hide', 'show')")
        return value

    @field_validator('universal_search_knowledge_base_search')
    def universal_search_knowledge_base_search_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['default or inherit', 'hide', 'show']):
            raise ValueError("must be one of enum values ('default or inherit', 'hide', 'show')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateOrganizationBrandingPolicyRequestHelpSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateOrganizationBrandingPolicyRequestHelpSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiDocsSubtab": obj.get("apiDocsSubtab"),
            "casesSubtab": obj.get("casesSubtab"),
            "ciscoMerakiProductDocumentation": obj.get("ciscoMerakiProductDocumentation"),
            "communitySubtab": obj.get("communitySubtab"),
            "dataProtectionRequestsSubtab": obj.get("dataProtectionRequestsSubtab"),
            "firewallInfoSubtab": obj.get("firewallInfoSubtab"),
            "getHelpSubtab": obj.get("getHelpSubtab"),
            "getHelpSubtabKnowledgeBaseSearch": obj.get("getHelpSubtabKnowledgeBaseSearch"),
            "hardwareReplacementsSubtab": obj.get("hardwareReplacementsSubtab"),
            "helpTab": obj.get("helpTab"),
            "helpWidget": obj.get("helpWidget"),
            "newFeaturesSubtab": obj.get("newFeaturesSubtab"),
            "smForums": obj.get("smForums"),
            "supportContactInfo": obj.get("supportContactInfo"),
            "universalSearchKnowledgeBaseSearch": obj.get("universalSearchKnowledgeBaseSearch")
        })
        return _obj



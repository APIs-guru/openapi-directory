# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CreateOrganizationAlertsProfileRequestAlertCondition(BaseModel):
    """
    The conditions that determine if the alert triggers
    """ # noqa: E501
    bit_rate_bps: Optional[StrictInt] = Field(default=None, description="The threshold the metric must cross to be valid for alerting. Used only for WAN Utilization alerts.")
    duration: Optional[StrictInt] = Field(default=None, description="The total duration in seconds that the threshold should be crossed before alerting")
    interface: Optional[StrictStr] = Field(default=None, description="The uplink observed for the alert.  interface must be one of the following: wan1, wan2, cellular")
    jitter_ms: Optional[StrictInt] = Field(default=None, description="The threshold the metric must cross to be valid for alerting. Used only for VoIP Jitter alerts.")
    latency_ms: Optional[StrictInt] = Field(default=None, description="The threshold the metric must cross to be valid for alerting. Used only for WAN Latency alerts.")
    loss_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The threshold the metric must cross to be valid for alerting. Used only for Packet Loss alerts.")
    mos: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The threshold the metric must drop below to be valid for alerting. Used only for VoIP MOS alerts.")
    window: Optional[StrictInt] = Field(default=None, description="The look back period in seconds for sensing the alert")
    __properties: ClassVar[List[str]] = ["bit_rate_bps", "duration", "interface", "jitter_ms", "latency_ms", "loss_ratio", "mos", "window"]

    @field_validator('interface')
    def interface_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['cellular', 'wan1', 'wan2']):
            raise ValueError("must be one of enum values ('cellular', 'wan1', 'wan2')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateOrganizationAlertsProfileRequestAlertCondition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateOrganizationAlertsProfileRequestAlertCondition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bit_rate_bps": obj.get("bit_rate_bps"),
            "duration": obj.get("duration"),
            "interface": obj.get("interface"),
            "jitter_ms": obj.get("jitter_ms"),
            "latency_ms": obj.get("latency_ms"),
            "loss_ratio": obj.get("loss_ratio"),
            "mos": obj.get("mos"),
            "window": obj.get("window")
        })
        return _obj



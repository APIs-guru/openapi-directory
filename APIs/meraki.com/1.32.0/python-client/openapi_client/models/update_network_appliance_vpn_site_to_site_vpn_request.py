# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.update_network_appliance_vpn_site_to_site_vpn_request_hubs_inner import UpdateNetworkApplianceVpnSiteToSiteVpnRequestHubsInner
from openapi_client.models.update_network_appliance_vpn_site_to_site_vpn_request_subnets_inner import UpdateNetworkApplianceVpnSiteToSiteVpnRequestSubnetsInner
from typing import Optional, Set
from typing_extensions import Self

class UpdateNetworkApplianceVpnSiteToSiteVpnRequest(BaseModel):
    """
    UpdateNetworkApplianceVpnSiteToSiteVpnRequest
    """ # noqa: E501
    hubs: Optional[List[UpdateNetworkApplianceVpnSiteToSiteVpnRequestHubsInner]] = Field(default=None, description="The list of VPN hubs, in order of preference. In spoke mode, at least 1 hub is required.")
    mode: StrictStr = Field(description="The site-to-site VPN mode. Can be one of 'none', 'spoke' or 'hub'")
    subnets: Optional[List[UpdateNetworkApplianceVpnSiteToSiteVpnRequestSubnetsInner]] = Field(default=None, description="The list of subnets and their VPN presence.")
    __properties: ClassVar[List[str]] = ["hubs", "mode", "subnets"]

    @field_validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['hub', 'none', 'spoke']):
            raise ValueError("must be one of enum values ('hub', 'none', 'spoke')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateNetworkApplianceVpnSiteToSiteVpnRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in hubs (list)
        _items = []
        if self.hubs:
            for _item_hubs in self.hubs:
                if _item_hubs:
                    _items.append(_item_hubs.to_dict())
            _dict['hubs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subnets (list)
        _items = []
        if self.subnets:
            for _item_subnets in self.subnets:
                if _item_subnets:
                    _items.append(_item_subnets.to_dict())
            _dict['subnets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateNetworkApplianceVpnSiteToSiteVpnRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hubs": [UpdateNetworkApplianceVpnSiteToSiteVpnRequestHubsInner.from_dict(_item) for _item in obj["hubs"]] if obj.get("hubs") is not None else None,
            "mode": obj.get("mode"),
            "subnets": [UpdateNetworkApplianceVpnSiteToSiteVpnRequestSubnetsInner.from_dict(_item) for _item in obj["subnets"]] if obj.get("subnets") is not None else None
        })
        return _obj



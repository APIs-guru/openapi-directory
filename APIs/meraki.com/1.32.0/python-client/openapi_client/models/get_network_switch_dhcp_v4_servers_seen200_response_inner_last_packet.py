# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_network_switch_dhcp_v4_servers_seen200_response_inner_last_packet_destination import GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketDestination
from openapi_client.models.get_network_switch_dhcp_v4_servers_seen200_response_inner_last_packet_ethernet import GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketEthernet
from openapi_client.models.get_network_switch_dhcp_v4_servers_seen200_response_inner_last_packet_fields import GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields
from openapi_client.models.get_network_switch_dhcp_v4_servers_seen200_response_inner_last_packet_ip import GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp
from openapi_client.models.get_network_switch_dhcp_v4_servers_seen200_response_inner_last_packet_source import GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketSource
from openapi_client.models.get_network_switch_dhcp_v4_servers_seen200_response_inner_last_packet_udp import GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketUdp
from typing import Optional, Set
from typing_extensions import Self

class GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacket(BaseModel):
    """
    Last packet the server received.
    """ # noqa: E501
    destination: Optional[GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketDestination] = None
    ethernet: Optional[GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketEthernet] = None
    fields: Optional[GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields] = None
    ip: Optional[GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp] = None
    source: Optional[GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketSource] = None
    type: Optional[StrictStr] = Field(default=None, description="Packet type.")
    udp: Optional[GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketUdp] = None
    __properties: ClassVar[List[str]] = ["destination", "ethernet", "fields", "ip", "source", "type", "udp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacket from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of destination
        if self.destination:
            _dict['destination'] = self.destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ethernet
        if self.ethernet:
            _dict['ethernet'] = self.ethernet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fields
        if self.fields:
            _dict['fields'] = self.fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ip
        if self.ip:
            _dict['ip'] = self.ip.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of udp
        if self.udp:
            _dict['udp'] = self.udp.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacket from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "destination": GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketDestination.from_dict(obj["destination"]) if obj.get("destination") is not None else None,
            "ethernet": GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketEthernet.from_dict(obj["ethernet"]) if obj.get("ethernet") is not None else None,
            "fields": GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields.from_dict(obj["fields"]) if obj.get("fields") is not None else None,
            "ip": GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp.from_dict(obj["ip"]) if obj.get("ip") is not None else None,
            "source": GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketSource.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "type": obj.get("type"),
            "udp": GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketUdp.from_dict(obj["udp"]) if obj.get("udp") is not None else None
        })
        return _obj



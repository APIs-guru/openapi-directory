# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_network_sensor_alerts_profiles200_response_inner_conditions_inner_threshold_door import GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdDoor
from openapi_client.models.get_network_sensor_alerts_profiles200_response_inner_conditions_inner_threshold_humidity import GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdHumidity
from openapi_client.models.get_network_sensor_alerts_profiles200_response_inner_conditions_inner_threshold_indoor_air_quality import GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdIndoorAirQuality
from openapi_client.models.get_network_sensor_alerts_profiles200_response_inner_conditions_inner_threshold_noise import GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdNoise
from openapi_client.models.get_network_sensor_alerts_profiles200_response_inner_conditions_inner_threshold_pm25 import GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdPm25
from openapi_client.models.get_network_sensor_alerts_profiles200_response_inner_conditions_inner_threshold_temperature import GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdTemperature
from openapi_client.models.get_network_sensor_alerts_profiles200_response_inner_conditions_inner_threshold_tvoc import GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdTvoc
from openapi_client.models.get_network_sensor_alerts_profiles200_response_inner_conditions_inner_threshold_water import GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdWater
from typing import Optional, Set
from typing_extensions import Self

class GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThreshold(BaseModel):
    """
    Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value.
    """ # noqa: E501
    door: Optional[GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdDoor] = None
    humidity: Optional[GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdHumidity] = None
    indoor_air_quality: Optional[GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdIndoorAirQuality] = Field(default=None, alias="indoorAirQuality")
    noise: Optional[GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdNoise] = None
    pm25: Optional[GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdPm25] = None
    temperature: Optional[GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdTemperature] = None
    tvoc: Optional[GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdTvoc] = None
    water: Optional[GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdWater] = None
    __properties: ClassVar[List[str]] = ["door", "humidity", "indoorAirQuality", "noise", "pm25", "temperature", "tvoc", "water"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThreshold from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of door
        if self.door:
            _dict['door'] = self.door.to_dict()
        # override the default output from pydantic by calling `to_dict()` of humidity
        if self.humidity:
            _dict['humidity'] = self.humidity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of indoor_air_quality
        if self.indoor_air_quality:
            _dict['indoorAirQuality'] = self.indoor_air_quality.to_dict()
        # override the default output from pydantic by calling `to_dict()` of noise
        if self.noise:
            _dict['noise'] = self.noise.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pm25
        if self.pm25:
            _dict['pm25'] = self.pm25.to_dict()
        # override the default output from pydantic by calling `to_dict()` of temperature
        if self.temperature:
            _dict['temperature'] = self.temperature.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tvoc
        if self.tvoc:
            _dict['tvoc'] = self.tvoc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of water
        if self.water:
            _dict['water'] = self.water.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThreshold from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "door": GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdDoor.from_dict(obj["door"]) if obj.get("door") is not None else None,
            "humidity": GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdHumidity.from_dict(obj["humidity"]) if obj.get("humidity") is not None else None,
            "indoorAirQuality": GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdIndoorAirQuality.from_dict(obj["indoorAirQuality"]) if obj.get("indoorAirQuality") is not None else None,
            "noise": GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdNoise.from_dict(obj["noise"]) if obj.get("noise") is not None else None,
            "pm25": GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdPm25.from_dict(obj["pm25"]) if obj.get("pm25") is not None else None,
            "temperature": GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdTemperature.from_dict(obj["temperature"]) if obj.get("temperature") is not None else None,
            "tvoc": GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdTvoc.from_dict(obj["tvoc"]) if obj.get("tvoc") is not None else None,
            "water": GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdWater.from_dict(obj["water"]) if obj.get("water") is not None else None
        })
        return _obj



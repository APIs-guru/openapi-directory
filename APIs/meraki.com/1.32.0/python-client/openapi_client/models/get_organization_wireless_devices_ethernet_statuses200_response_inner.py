# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_organization_wireless_devices_ethernet_statuses200_response_inner_aggregation import GetOrganizationWirelessDevicesEthernetStatuses200ResponseInnerAggregation
from openapi_client.models.get_organization_wireless_devices_ethernet_statuses200_response_inner_network import GetOrganizationWirelessDevicesEthernetStatuses200ResponseInnerNetwork
from openapi_client.models.get_organization_wireless_devices_ethernet_statuses200_response_inner_ports_inner import GetOrganizationWirelessDevicesEthernetStatuses200ResponseInnerPortsInner
from openapi_client.models.get_organization_wireless_devices_ethernet_statuses200_response_inner_power import GetOrganizationWirelessDevicesEthernetStatuses200ResponseInnerPower
from typing import Optional, Set
from typing_extensions import Self

class GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner(BaseModel):
    """
    GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner
    """ # noqa: E501
    aggregation: Optional[GetOrganizationWirelessDevicesEthernetStatuses200ResponseInnerAggregation] = None
    name: Optional[StrictStr] = Field(default=None, description="The name of the AP")
    network: Optional[GetOrganizationWirelessDevicesEthernetStatuses200ResponseInnerNetwork] = None
    ports: Optional[List[GetOrganizationWirelessDevicesEthernetStatuses200ResponseInnerPortsInner]] = Field(default=None, description="List of port details")
    power: Optional[GetOrganizationWirelessDevicesEthernetStatuses200ResponseInnerPower] = None
    serial: Optional[StrictStr] = Field(default=None, description="The serial number of the AP")
    __properties: ClassVar[List[str]] = ["aggregation", "name", "network", "ports", "power", "serial"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aggregation
        if self.aggregation:
            _dict['aggregation'] = self.aggregation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network
        if self.network:
            _dict['network'] = self.network.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ports (list)
        _items = []
        if self.ports:
            for _item_ports in self.ports:
                if _item_ports:
                    _items.append(_item_ports.to_dict())
            _dict['ports'] = _items
        # override the default output from pydantic by calling `to_dict()` of power
        if self.power:
            _dict['power'] = self.power.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregation": GetOrganizationWirelessDevicesEthernetStatuses200ResponseInnerAggregation.from_dict(obj["aggregation"]) if obj.get("aggregation") is not None else None,
            "name": obj.get("name"),
            "network": GetOrganizationWirelessDevicesEthernetStatuses200ResponseInnerNetwork.from_dict(obj["network"]) if obj.get("network") is not None else None,
            "ports": [GetOrganizationWirelessDevicesEthernetStatuses200ResponseInnerPortsInner.from_dict(_item) for _item in obj["ports"]] if obj.get("ports") is not None else None,
            "power": GetOrganizationWirelessDevicesEthernetStatuses200ResponseInnerPower.from_dict(obj["power"]) if obj.get("power") is not None else None,
            "serial": obj.get("serial")
        })
        return _obj



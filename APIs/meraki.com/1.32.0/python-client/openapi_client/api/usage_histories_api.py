# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, Dict, List, Optional, Union
from typing_extensions import Annotated

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class UsageHistoriesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_network_clients_usage_histories_2(
        self,
        network_id: StrictStr,
        clients: Annotated[StrictStr, Field(description="A list of client keys, MACs or IPs separated by comma.")],
        ssid_number: Annotated[Optional[StrictInt], Field(description="An SSID number to include. If not specified, events for all SSIDs will be returned.")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="The number of entries per page returned. Acceptable range is 3 - 1000.")] = None,
        starting_after: Annotated[Optional[StrictStr], Field(description="A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.")] = None,
        ending_before: Annotated[Optional[StrictStr], Field(description="A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.")] = None,
        t0: Annotated[Optional[StrictStr], Field(description="The beginning of the timespan for the data. The maximum lookback period is 31 days from today.")] = None,
        t1: Annotated[Optional[StrictStr], Field(description="The end of the timespan for the data. t1 can be a maximum of 31 days after t0.")] = None,
        timespan: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[object]:
        """Return the usage histories for clients

        Return the usage histories for clients. Usage data is in kilobytes. Clients can be identified by client keys or either the MACs or IPs depending on whether the network uses Track-by-IP.

        :param network_id: (required)
        :type network_id: str
        :param clients: A list of client keys, MACs or IPs separated by comma. (required)
        :type clients: str
        :param ssid_number: An SSID number to include. If not specified, events for all SSIDs will be returned.
        :type ssid_number: int
        :param per_page: The number of entries per page returned. Acceptable range is 3 - 1000.
        :type per_page: int
        :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        :type starting_after: str
        :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        :type ending_before: str
        :param t0: The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
        :type t0: str
        :param t1: The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
        :type t1: str
        :param timespan: The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
        :type timespan: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_network_clients_usage_histories_2_serialize(
            network_id=network_id,
            clients=clients,
            ssid_number=ssid_number,
            per_page=per_page,
            starting_after=starting_after,
            ending_before=ending_before,
            t0=t0,
            t1=t1,
            timespan=timespan,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[object]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_network_clients_usage_histories_2_with_http_info(
        self,
        network_id: StrictStr,
        clients: Annotated[StrictStr, Field(description="A list of client keys, MACs or IPs separated by comma.")],
        ssid_number: Annotated[Optional[StrictInt], Field(description="An SSID number to include. If not specified, events for all SSIDs will be returned.")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="The number of entries per page returned. Acceptable range is 3 - 1000.")] = None,
        starting_after: Annotated[Optional[StrictStr], Field(description="A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.")] = None,
        ending_before: Annotated[Optional[StrictStr], Field(description="A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.")] = None,
        t0: Annotated[Optional[StrictStr], Field(description="The beginning of the timespan for the data. The maximum lookback period is 31 days from today.")] = None,
        t1: Annotated[Optional[StrictStr], Field(description="The end of the timespan for the data. t1 can be a maximum of 31 days after t0.")] = None,
        timespan: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[object]]:
        """Return the usage histories for clients

        Return the usage histories for clients. Usage data is in kilobytes. Clients can be identified by client keys or either the MACs or IPs depending on whether the network uses Track-by-IP.

        :param network_id: (required)
        :type network_id: str
        :param clients: A list of client keys, MACs or IPs separated by comma. (required)
        :type clients: str
        :param ssid_number: An SSID number to include. If not specified, events for all SSIDs will be returned.
        :type ssid_number: int
        :param per_page: The number of entries per page returned. Acceptable range is 3 - 1000.
        :type per_page: int
        :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        :type starting_after: str
        :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        :type ending_before: str
        :param t0: The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
        :type t0: str
        :param t1: The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
        :type t1: str
        :param timespan: The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
        :type timespan: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_network_clients_usage_histories_2_serialize(
            network_id=network_id,
            clients=clients,
            ssid_number=ssid_number,
            per_page=per_page,
            starting_after=starting_after,
            ending_before=ending_before,
            t0=t0,
            t1=t1,
            timespan=timespan,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[object]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_network_clients_usage_histories_2_without_preload_content(
        self,
        network_id: StrictStr,
        clients: Annotated[StrictStr, Field(description="A list of client keys, MACs or IPs separated by comma.")],
        ssid_number: Annotated[Optional[StrictInt], Field(description="An SSID number to include. If not specified, events for all SSIDs will be returned.")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="The number of entries per page returned. Acceptable range is 3 - 1000.")] = None,
        starting_after: Annotated[Optional[StrictStr], Field(description="A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.")] = None,
        ending_before: Annotated[Optional[StrictStr], Field(description="A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.")] = None,
        t0: Annotated[Optional[StrictStr], Field(description="The beginning of the timespan for the data. The maximum lookback period is 31 days from today.")] = None,
        t1: Annotated[Optional[StrictStr], Field(description="The end of the timespan for the data. t1 can be a maximum of 31 days after t0.")] = None,
        timespan: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return the usage histories for clients

        Return the usage histories for clients. Usage data is in kilobytes. Clients can be identified by client keys or either the MACs or IPs depending on whether the network uses Track-by-IP.

        :param network_id: (required)
        :type network_id: str
        :param clients: A list of client keys, MACs or IPs separated by comma. (required)
        :type clients: str
        :param ssid_number: An SSID number to include. If not specified, events for all SSIDs will be returned.
        :type ssid_number: int
        :param per_page: The number of entries per page returned. Acceptable range is 3 - 1000.
        :type per_page: int
        :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        :type starting_after: str
        :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        :type ending_before: str
        :param t0: The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
        :type t0: str
        :param t1: The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
        :type t1: str
        :param timespan: The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
        :type timespan: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_network_clients_usage_histories_2_serialize(
            network_id=network_id,
            clients=clients,
            ssid_number=ssid_number,
            per_page=per_page,
            starting_after=starting_after,
            ending_before=ending_before,
            t0=t0,
            t1=t1,
            timespan=timespan,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[object]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_network_clients_usage_histories_2_serialize(
        self,
        network_id,
        clients,
        ssid_number,
        per_page,
        starting_after,
        ending_before,
        t0,
        t1,
        timespan,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if network_id is not None:
            _path_params['networkId'] = network_id
        # process the query parameters
        if clients is not None:
            
            _query_params.append(('clients', clients))
            
        if ssid_number is not None:
            
            _query_params.append(('ssidNumber', ssid_number))
            
        if per_page is not None:
            
            _query_params.append(('perPage', per_page))
            
        if starting_after is not None:
            
            _query_params.append(('startingAfter', starting_after))
            
        if ending_before is not None:
            
            _query_params.append(('endingBefore', ending_before))
            
        if t0 is not None:
            
            _query_params.append(('t0', t0))
            
        if t1 is not None:
            
            _query_params.append(('t1', t1))
            
        if timespan is not None:
            
            _query_params.append(('timespan', timespan))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'meraki_api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/networks/{networkId}/clients/usageHistories',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



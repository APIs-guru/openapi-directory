# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.get_network_wireless_failed_connections200_response_inner import GetNetworkWirelessFailedConnections200ResponseInner

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class FailedConnectionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_network_wireless_failed_connections_1(
        self,
        network_id: StrictStr,
        t0: Annotated[Optional[StrictStr], Field(description="The beginning of the timespan for the data. The maximum lookback period is 180 days from today.")] = None,
        t1: Annotated[Optional[StrictStr], Field(description="The end of the timespan for the data. t1 can be a maximum of 7 days after t0.")] = None,
        timespan: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.")] = None,
        band: Annotated[Optional[StrictStr], Field(description="Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.")] = None,
        ssid: Annotated[Optional[StrictInt], Field(description="Filter results by SSID")] = None,
        vlan: Annotated[Optional[StrictInt], Field(description="Filter results by VLAN")] = None,
        ap_tag: Annotated[Optional[StrictStr], Field(description="Filter results by AP Tag")] = None,
        serial: Annotated[Optional[StrictStr], Field(description="Filter by AP")] = None,
        client_id: Annotated[Optional[StrictStr], Field(description="Filter by client MAC")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GetNetworkWirelessFailedConnections200ResponseInner]:
        """List of all failed client connection events on this network in a given time range

        List of all failed client connection events on this network in a given time range

        :param network_id: (required)
        :type network_id: str
        :param t0: The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
        :type t0: str
        :param t1: The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
        :type t1: str
        :param timespan: The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
        :type timespan: float
        :param band: Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
        :type band: str
        :param ssid: Filter results by SSID
        :type ssid: int
        :param vlan: Filter results by VLAN
        :type vlan: int
        :param ap_tag: Filter results by AP Tag
        :type ap_tag: str
        :param serial: Filter by AP
        :type serial: str
        :param client_id: Filter by client MAC
        :type client_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_network_wireless_failed_connections_1_serialize(
            network_id=network_id,
            t0=t0,
            t1=t1,
            timespan=timespan,
            band=band,
            ssid=ssid,
            vlan=vlan,
            ap_tag=ap_tag,
            serial=serial,
            client_id=client_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetNetworkWirelessFailedConnections200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_network_wireless_failed_connections_1_with_http_info(
        self,
        network_id: StrictStr,
        t0: Annotated[Optional[StrictStr], Field(description="The beginning of the timespan for the data. The maximum lookback period is 180 days from today.")] = None,
        t1: Annotated[Optional[StrictStr], Field(description="The end of the timespan for the data. t1 can be a maximum of 7 days after t0.")] = None,
        timespan: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.")] = None,
        band: Annotated[Optional[StrictStr], Field(description="Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.")] = None,
        ssid: Annotated[Optional[StrictInt], Field(description="Filter results by SSID")] = None,
        vlan: Annotated[Optional[StrictInt], Field(description="Filter results by VLAN")] = None,
        ap_tag: Annotated[Optional[StrictStr], Field(description="Filter results by AP Tag")] = None,
        serial: Annotated[Optional[StrictStr], Field(description="Filter by AP")] = None,
        client_id: Annotated[Optional[StrictStr], Field(description="Filter by client MAC")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GetNetworkWirelessFailedConnections200ResponseInner]]:
        """List of all failed client connection events on this network in a given time range

        List of all failed client connection events on this network in a given time range

        :param network_id: (required)
        :type network_id: str
        :param t0: The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
        :type t0: str
        :param t1: The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
        :type t1: str
        :param timespan: The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
        :type timespan: float
        :param band: Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
        :type band: str
        :param ssid: Filter results by SSID
        :type ssid: int
        :param vlan: Filter results by VLAN
        :type vlan: int
        :param ap_tag: Filter results by AP Tag
        :type ap_tag: str
        :param serial: Filter by AP
        :type serial: str
        :param client_id: Filter by client MAC
        :type client_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_network_wireless_failed_connections_1_serialize(
            network_id=network_id,
            t0=t0,
            t1=t1,
            timespan=timespan,
            band=band,
            ssid=ssid,
            vlan=vlan,
            ap_tag=ap_tag,
            serial=serial,
            client_id=client_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetNetworkWirelessFailedConnections200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_network_wireless_failed_connections_1_without_preload_content(
        self,
        network_id: StrictStr,
        t0: Annotated[Optional[StrictStr], Field(description="The beginning of the timespan for the data. The maximum lookback period is 180 days from today.")] = None,
        t1: Annotated[Optional[StrictStr], Field(description="The end of the timespan for the data. t1 can be a maximum of 7 days after t0.")] = None,
        timespan: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.")] = None,
        band: Annotated[Optional[StrictStr], Field(description="Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.")] = None,
        ssid: Annotated[Optional[StrictInt], Field(description="Filter results by SSID")] = None,
        vlan: Annotated[Optional[StrictInt], Field(description="Filter results by VLAN")] = None,
        ap_tag: Annotated[Optional[StrictStr], Field(description="Filter results by AP Tag")] = None,
        serial: Annotated[Optional[StrictStr], Field(description="Filter by AP")] = None,
        client_id: Annotated[Optional[StrictStr], Field(description="Filter by client MAC")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List of all failed client connection events on this network in a given time range

        List of all failed client connection events on this network in a given time range

        :param network_id: (required)
        :type network_id: str
        :param t0: The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
        :type t0: str
        :param t1: The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
        :type t1: str
        :param timespan: The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
        :type timespan: float
        :param band: Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
        :type band: str
        :param ssid: Filter results by SSID
        :type ssid: int
        :param vlan: Filter results by VLAN
        :type vlan: int
        :param ap_tag: Filter results by AP Tag
        :type ap_tag: str
        :param serial: Filter by AP
        :type serial: str
        :param client_id: Filter by client MAC
        :type client_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_network_wireless_failed_connections_1_serialize(
            network_id=network_id,
            t0=t0,
            t1=t1,
            timespan=timespan,
            band=band,
            ssid=ssid,
            vlan=vlan,
            ap_tag=ap_tag,
            serial=serial,
            client_id=client_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetNetworkWirelessFailedConnections200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_network_wireless_failed_connections_1_serialize(
        self,
        network_id,
        t0,
        t1,
        timespan,
        band,
        ssid,
        vlan,
        ap_tag,
        serial,
        client_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if network_id is not None:
            _path_params['networkId'] = network_id
        # process the query parameters
        if t0 is not None:
            
            _query_params.append(('t0', t0))
            
        if t1 is not None:
            
            _query_params.append(('t1', t1))
            
        if timespan is not None:
            
            _query_params.append(('timespan', timespan))
            
        if band is not None:
            
            _query_params.append(('band', band))
            
        if ssid is not None:
            
            _query_params.append(('ssid', ssid))
            
        if vlan is not None:
            
            _query_params.append(('vlan', vlan))
            
        if ap_tag is not None:
            
            _query_params.append(('apTag', ap_tag))
            
        if serial is not None:
            
            _query_params.append(('serial', serial))
            
        if client_id is not None:
            
            _query_params.append(('clientId', client_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'meraki_api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/networks/{networkId}/wireless/failedConnections',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.get_organization_sensor_readings_latest200_response_inner import GetOrganizationSensorReadingsLatest200ResponseInner

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class LatestApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_organization_sensor_readings_latest_2(
        self,
        organization_id: StrictStr,
        per_page: Annotated[Optional[StrictInt], Field(description="The number of entries per page returned. Acceptable range is 3 - 100. Default is 100.")] = None,
        starting_after: Annotated[Optional[StrictStr], Field(description="A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.")] = None,
        ending_before: Annotated[Optional[StrictStr], Field(description="A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.")] = None,
        network_ids: Annotated[Optional[List[StrictStr]], Field(description="Optional parameter to filter readings by network.")] = None,
        serials: Annotated[Optional[List[StrictStr]], Field(description="Optional parameter to filter readings by sensor.")] = None,
        metrics: Annotated[Optional[List[StrictStr]], Field(description="Types of sensor readings to retrieve. If no metrics are supplied, all available types of readings will be retrieved. Allowed values are battery, button, door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GetOrganizationSensorReadingsLatest200ResponseInner]:
        """Return the latest available reading for each metric from each sensor, sorted by sensor serial

        Return the latest available reading for each metric from each sensor, sorted by sensor serial

        :param organization_id: (required)
        :type organization_id: str
        :param per_page: The number of entries per page returned. Acceptable range is 3 - 100. Default is 100.
        :type per_page: int
        :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        :type starting_after: str
        :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        :type ending_before: str
        :param network_ids: Optional parameter to filter readings by network.
        :type network_ids: List[str]
        :param serials: Optional parameter to filter readings by sensor.
        :type serials: List[str]
        :param metrics: Types of sensor readings to retrieve. If no metrics are supplied, all available types of readings will be retrieved. Allowed values are battery, button, door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.
        :type metrics: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_organization_sensor_readings_latest_2_serialize(
            organization_id=organization_id,
            per_page=per_page,
            starting_after=starting_after,
            ending_before=ending_before,
            network_ids=network_ids,
            serials=serials,
            metrics=metrics,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetOrganizationSensorReadingsLatest200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_organization_sensor_readings_latest_2_with_http_info(
        self,
        organization_id: StrictStr,
        per_page: Annotated[Optional[StrictInt], Field(description="The number of entries per page returned. Acceptable range is 3 - 100. Default is 100.")] = None,
        starting_after: Annotated[Optional[StrictStr], Field(description="A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.")] = None,
        ending_before: Annotated[Optional[StrictStr], Field(description="A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.")] = None,
        network_ids: Annotated[Optional[List[StrictStr]], Field(description="Optional parameter to filter readings by network.")] = None,
        serials: Annotated[Optional[List[StrictStr]], Field(description="Optional parameter to filter readings by sensor.")] = None,
        metrics: Annotated[Optional[List[StrictStr]], Field(description="Types of sensor readings to retrieve. If no metrics are supplied, all available types of readings will be retrieved. Allowed values are battery, button, door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GetOrganizationSensorReadingsLatest200ResponseInner]]:
        """Return the latest available reading for each metric from each sensor, sorted by sensor serial

        Return the latest available reading for each metric from each sensor, sorted by sensor serial

        :param organization_id: (required)
        :type organization_id: str
        :param per_page: The number of entries per page returned. Acceptable range is 3 - 100. Default is 100.
        :type per_page: int
        :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        :type starting_after: str
        :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        :type ending_before: str
        :param network_ids: Optional parameter to filter readings by network.
        :type network_ids: List[str]
        :param serials: Optional parameter to filter readings by sensor.
        :type serials: List[str]
        :param metrics: Types of sensor readings to retrieve. If no metrics are supplied, all available types of readings will be retrieved. Allowed values are battery, button, door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.
        :type metrics: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_organization_sensor_readings_latest_2_serialize(
            organization_id=organization_id,
            per_page=per_page,
            starting_after=starting_after,
            ending_before=ending_before,
            network_ids=network_ids,
            serials=serials,
            metrics=metrics,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetOrganizationSensorReadingsLatest200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_organization_sensor_readings_latest_2_without_preload_content(
        self,
        organization_id: StrictStr,
        per_page: Annotated[Optional[StrictInt], Field(description="The number of entries per page returned. Acceptable range is 3 - 100. Default is 100.")] = None,
        starting_after: Annotated[Optional[StrictStr], Field(description="A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.")] = None,
        ending_before: Annotated[Optional[StrictStr], Field(description="A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.")] = None,
        network_ids: Annotated[Optional[List[StrictStr]], Field(description="Optional parameter to filter readings by network.")] = None,
        serials: Annotated[Optional[List[StrictStr]], Field(description="Optional parameter to filter readings by sensor.")] = None,
        metrics: Annotated[Optional[List[StrictStr]], Field(description="Types of sensor readings to retrieve. If no metrics are supplied, all available types of readings will be retrieved. Allowed values are battery, button, door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return the latest available reading for each metric from each sensor, sorted by sensor serial

        Return the latest available reading for each metric from each sensor, sorted by sensor serial

        :param organization_id: (required)
        :type organization_id: str
        :param per_page: The number of entries per page returned. Acceptable range is 3 - 100. Default is 100.
        :type per_page: int
        :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        :type starting_after: str
        :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        :type ending_before: str
        :param network_ids: Optional parameter to filter readings by network.
        :type network_ids: List[str]
        :param serials: Optional parameter to filter readings by sensor.
        :type serials: List[str]
        :param metrics: Types of sensor readings to retrieve. If no metrics are supplied, all available types of readings will be retrieved. Allowed values are battery, button, door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.
        :type metrics: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_organization_sensor_readings_latest_2_serialize(
            organization_id=organization_id,
            per_page=per_page,
            starting_after=starting_after,
            ending_before=ending_before,
            network_ids=network_ids,
            serials=serials,
            metrics=metrics,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetOrganizationSensorReadingsLatest200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_organization_sensor_readings_latest_2_serialize(
        self,
        organization_id,
        per_page,
        starting_after,
        ending_before,
        network_ids,
        serials,
        metrics,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'networkIds': 'csv',
            'serials': 'csv',
            'metrics': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params['organizationId'] = organization_id
        # process the query parameters
        if per_page is not None:
            
            _query_params.append(('perPage', per_page))
            
        if starting_after is not None:
            
            _query_params.append(('startingAfter', starting_after))
            
        if ending_before is not None:
            
            _query_params.append(('endingBefore', ending_before))
            
        if network_ids is not None:
            
            _query_params.append(('networkIds', network_ids))
            
        if serials is not None:
            
            _query_params.append(('serials', serials))
            
        if metrics is not None:
            
            _query_params.append(('metrics', metrics))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'meraki_api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/organizations/{organizationId}/sensor/readings/latest',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



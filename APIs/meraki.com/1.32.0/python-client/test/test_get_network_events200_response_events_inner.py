# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.get_network_events200_response_events_inner import GetNetworkEvents200ResponseEventsInner

class TestGetNetworkEvents200ResponseEventsInner(unittest.TestCase):
    """GetNetworkEvents200ResponseEventsInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetNetworkEvents200ResponseEventsInner:
        """Test GetNetworkEvents200ResponseEventsInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetNetworkEvents200ResponseEventsInner`
        """
        model = GetNetworkEvents200ResponseEventsInner()
        if include_optional:
            return GetNetworkEvents200ResponseEventsInner(
                category = '',
                client_description = '',
                client_id = '',
                client_mac = '',
                description = '',
                device_name = '',
                device_serial = '',
                event_data = openapi_client.models.get_network_events_200_response_events_inner_event_data.getNetworkEvents_200_response_events_inner_eventData(
                    aid = '', 
                    channel = '', 
                    client_ip = '', 
                    client_mac = '', 
                    radio = '', 
                    rssi = '', 
                    vap = '', ),
                network_id = '',
                occurred_at = '',
                ssid_number = 56,
                type = ''
            )
        else:
            return GetNetworkEvents200ResponseEventsInner(
        )
        """

    def testGetNetworkEvents200ResponseEventsInner(self):
        """Test GetNetworkEvents200ResponseEventsInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.update_network_wireless_ssid_splash_settings_request import UpdateNetworkWirelessSsidSplashSettingsRequest

class TestUpdateNetworkWirelessSsidSplashSettingsRequest(unittest.TestCase):
    """UpdateNetworkWirelessSsidSplashSettingsRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UpdateNetworkWirelessSsidSplashSettingsRequest:
        """Test UpdateNetworkWirelessSsidSplashSettingsRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UpdateNetworkWirelessSsidSplashSettingsRequest`
        """
        model = UpdateNetworkWirelessSsidSplashSettingsRequest()
        if include_optional:
            return UpdateNetworkWirelessSsidSplashSettingsRequest(
                allow_simultaneous_logins = True,
                billing = openapi_client.models.update_network_wireless_ssid_splash_settings_request_billing.updateNetworkWirelessSsidSplashSettings_request_billing(
                    free_access = openapi_client.models.update_network_wireless_ssid_splash_settings_request_billing_free_access.updateNetworkWirelessSsidSplashSettings_request_billing_freeAccess(
                        duration_in_minutes = 56, 
                        enabled = True, ), 
                    prepaid_access_fast_login_enabled = True, 
                    reply_to_email_address = '', ),
                block_all_traffic_before_sign_on = True,
                controller_disconnection_behavior = 'default',
                guest_sponsorship = openapi_client.models.update_network_wireless_ssid_splash_settings_request_guest_sponsorship.updateNetworkWirelessSsidSplashSettings_request_guestSponsorship(
                    duration_in_minutes = 56, 
                    guest_can_request_timeframe = True, ),
                redirect_url = '',
                sentry_enrollment = openapi_client.models.update_network_wireless_ssid_splash_settings_request_sentry_enrollment.updateNetworkWirelessSsidSplashSettings_request_sentryEnrollment(
                    enforced_systems = [
                        ''
                        ], 
                    strength = 'click-through', 
                    systems_manager_network = openapi_client.models.update_network_wireless_ssid_splash_settings_request_sentry_enrollment_systems_manager_network.updateNetworkWirelessSsidSplashSettings_request_sentryEnrollment_systemsManagerNetwork(
                        id = '', ), ),
                splash_image = openapi_client.models.update_network_wireless_ssid_splash_settings_request_splash_image.updateNetworkWirelessSsidSplashSettings_request_splashImage(
                    extension = '', 
                    image = openapi_client.models.update_network_wireless_ssid_splash_settings_request_splash_image_image.updateNetworkWirelessSsidSplashSettings_request_splashImage_image(
                        contents = 'YQ==', 
                        format = 'gif', ), 
                    md5 = '', ),
                splash_logo = openapi_client.models.update_network_wireless_ssid_splash_settings_request_splash_logo.updateNetworkWirelessSsidSplashSettings_request_splashLogo(
                    extension = '', 
                    image = openapi_client.models.update_network_wireless_ssid_splash_settings_request_splash_logo_image.updateNetworkWirelessSsidSplashSettings_request_splashLogo_image(
                        contents = 'YQ==', 
                        format = 'gif', ), 
                    md5 = '', ),
                splash_prepaid_front = openapi_client.models.update_network_wireless_ssid_splash_settings_request_splash_prepaid_front.updateNetworkWirelessSsidSplashSettings_request_splashPrepaidFront(
                    extension = '', 
                    image = openapi_client.models.update_network_wireless_ssid_splash_settings_request_splash_prepaid_front_image.updateNetworkWirelessSsidSplashSettings_request_splashPrepaidFront_image(
                        contents = 'YQ==', 
                        format = 'gif', ), 
                    md5 = '', ),
                splash_timeout = 56,
                splash_url = '',
                use_redirect_url = True,
                use_splash_url = True,
                welcome_message = ''
            )
        else:
            return UpdateNetworkWirelessSsidSplashSettingsRequest(
        )
        """

    def testUpdateNetworkWirelessSsidSplashSettingsRequest(self):
        """Test UpdateNetworkWirelessSsidSplashSettingsRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

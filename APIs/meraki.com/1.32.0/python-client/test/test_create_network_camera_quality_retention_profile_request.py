# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.create_network_camera_quality_retention_profile_request import CreateNetworkCameraQualityRetentionProfileRequest

class TestCreateNetworkCameraQualityRetentionProfileRequest(unittest.TestCase):
    """CreateNetworkCameraQualityRetentionProfileRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateNetworkCameraQualityRetentionProfileRequest:
        """Test CreateNetworkCameraQualityRetentionProfileRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateNetworkCameraQualityRetentionProfileRequest`
        """
        model = CreateNetworkCameraQualityRetentionProfileRequest()
        if include_optional:
            return CreateNetworkCameraQualityRetentionProfileRequest(
                audio_recording_enabled = True,
                cloud_archive_enabled = True,
                max_retention_days = 56,
                motion_based_retention_enabled = True,
                motion_detector_version = 56,
                name = '',
                restricted_bandwidth_mode_enabled = True,
                schedule_id = '',
                video_settings = openapi_client.models.create_network_camera_quality_retention_profile_request_video_settings.createNetworkCameraQualityRetentionProfile_request_videoSettings(
                    mv12/mv22/mv72 = openapi_client.models.create_network_camera_quality_retention_profile_request_video_settings_mv12_mv22_mv72.createNetworkCameraQualityRetentionProfile_request_videoSettings_MV12_MV22_MV72(
                        quality = 'Enhanced', 
                        resolution = '1280x720', ), 
                    mv12_we = openapi_client.models.create_network_camera_quality_retention_profile_request_video_settings_mv12_we.createNetworkCameraQualityRetentionProfile_request_videoSettings_MV12WE(
                        quality = 'Enhanced', 
                        resolution = '1280x720', ), 
                    mv13 = openapi_client.models.create_network_camera_quality_retention_profile_request_video_settings_mv13.createNetworkCameraQualityRetentionProfile_request_videoSettings_MV13(
                        quality = 'Enhanced', 
                        resolution = '1080x1080', ), 
                    mv21/mv71 = openapi_client.models.create_network_camera_quality_retention_profile_request_video_settings_mv21_mv71.createNetworkCameraQualityRetentionProfile_request_videoSettings_MV21_MV71(
                        quality = 'Enhanced', 
                        resolution = '1280x720', ), 
                    mv22_x/mv72_x = openapi_client.models.create_network_camera_quality_retention_profile_request_video_settings_mv22_x_mv72_x.createNetworkCameraQualityRetentionProfile_request_videoSettings_MV22X_MV72X(
                        quality = 'Enhanced', 
                        resolution = '1280x720', ), 
                    mv32 = openapi_client.models.create_network_camera_quality_retention_profile_request_video_settings_mv32.createNetworkCameraQualityRetentionProfile_request_videoSettings_MV32(
                        quality = 'Enhanced', 
                        resolution = '1080x1080', ), 
                    mv33 = openapi_client.models.create_network_camera_quality_retention_profile_request_video_settings_mv33.createNetworkCameraQualityRetentionProfile_request_videoSettings_MV33(
                        quality = 'Enhanced', 
                        resolution = '1080x1080', ), 
                    mv52 = openapi_client.models.create_network_camera_quality_retention_profile_request_video_settings_mv52.createNetworkCameraQualityRetentionProfile_request_videoSettings_MV52(
                        quality = 'Enhanced', 
                        resolution = '1280x720', ), 
                    mv63 = openapi_client.models.create_network_camera_quality_retention_profile_request_video_settings_mv63.createNetworkCameraQualityRetentionProfile_request_videoSettings_MV63(
                        quality = 'Enhanced', 
                        resolution = '1920x1080', ), 
                    mv63_x = openapi_client.models.create_network_camera_quality_retention_profile_request_video_settings_mv63_x.createNetworkCameraQualityRetentionProfile_request_videoSettings_MV63X(
                        quality = 'Enhanced', 
                        resolution = '1920x1080', ), 
                    mv93 = openapi_client.models.create_network_camera_quality_retention_profile_request_video_settings_mv93.createNetworkCameraQualityRetentionProfile_request_videoSettings_MV93(
                        quality = 'Enhanced', 
                        resolution = '1080x1080', ), 
                    mv93_x = openapi_client.models.create_network_camera_quality_retention_profile_request_video_settings_mv93_x.createNetworkCameraQualityRetentionProfile_request_videoSettings_MV93X(
                        quality = 'Enhanced', 
                        resolution = '1080x1080', ), )
            )
        else:
            return CreateNetworkCameraQualityRetentionProfileRequest(
                name = '',
        )
        """

    def testCreateNetworkCameraQualityRetentionProfileRequest(self):
        """Test CreateNetworkCameraQualityRetentionProfileRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

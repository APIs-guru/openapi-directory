# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.get_network_appliance_vpn_site_to_site_vpn200_response import GetNetworkApplianceVpnSiteToSiteVpn200Response

class TestGetNetworkApplianceVpnSiteToSiteVpn200Response(unittest.TestCase):
    """GetNetworkApplianceVpnSiteToSiteVpn200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetNetworkApplianceVpnSiteToSiteVpn200Response:
        """Test GetNetworkApplianceVpnSiteToSiteVpn200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetNetworkApplianceVpnSiteToSiteVpn200Response`
        """
        model = GetNetworkApplianceVpnSiteToSiteVpn200Response()
        if include_optional:
            return GetNetworkApplianceVpnSiteToSiteVpn200Response(
                hubs = [
                    openapi_client.models.get_network_appliance_vpn_site_to_site_vpn_200_response_hubs_inner.getNetworkApplianceVpnSiteToSiteVpn_200_response_hubs_inner(
                        hub_id = '', 
                        use_default_route = True, )
                    ],
                mode = '',
                subnets = [
                    openapi_client.models.get_network_appliance_vpn_site_to_site_vpn_200_response_subnets_inner.getNetworkApplianceVpnSiteToSiteVpn_200_response_subnets_inner(
                        local_subnet = '', 
                        use_vpn = True, )
                    ]
            )
        else:
            return GetNetworkApplianceVpnSiteToSiteVpn200Response(
        )
        """

    def testGetNetworkApplianceVpnSiteToSiteVpn200Response(self):
        """Test GetNetworkApplianceVpnSiteToSiteVpn200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.get_device_switch_ports_statuses200_response_inner import GetDeviceSwitchPortsStatuses200ResponseInner

class TestGetDeviceSwitchPortsStatuses200ResponseInner(unittest.TestCase):
    """GetDeviceSwitchPortsStatuses200ResponseInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetDeviceSwitchPortsStatuses200ResponseInner:
        """Test GetDeviceSwitchPortsStatuses200ResponseInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetDeviceSwitchPortsStatuses200ResponseInner`
        """
        model = GetDeviceSwitchPortsStatuses200ResponseInner()
        if include_optional:
            return GetDeviceSwitchPortsStatuses200ResponseInner(
                cdp = openapi_client.models.get_device_switch_ports_statuses_200_response_inner_cdp.getDeviceSwitchPortsStatuses_200_response_inner_cdp(
                    address = '', 
                    capabilities = '', 
                    device_id = '', 
                    management_address = '', 
                    native_vlan = 56, 
                    platform = '', 
                    port_id = '', 
                    system_name = '', 
                    version = '', 
                    vtp_management_domain = '', ),
                client_count = 56,
                duplex = '',
                enabled = True,
                errors = [
                    ''
                    ],
                is_uplink = True,
                lldp = openapi_client.models.get_device_switch_ports_statuses_200_response_inner_lldp.getDeviceSwitchPortsStatuses_200_response_inner_lldp(
                    chassis_id = '', 
                    management_address = '', 
                    management_vlan = 56, 
                    port_description = '', 
                    port_id = '', 
                    port_vlan = 56, 
                    system_capabilities = '', 
                    system_description = '', 
                    system_name = '', ),
                port_id = '',
                power_usage_in_wh = 1.337,
                secure_port = openapi_client.models.get_device_switch_ports_statuses_200_response_inner_secure_port.getDeviceSwitchPortsStatuses_200_response_inner_securePort(
                    active = True, 
                    authentication_status = 'Authentication failure', 
                    config_overrides = openapi_client.models.get_device_switch_ports_statuses_200_response_inner_secure_port_config_overrides.getDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides(
                        allowed_vlans = '', 
                        type = 'access', 
                        vlan = 56, 
                        voice_vlan = 56, ), 
                    enabled = True, ),
                speed = '',
                status = 'Connected',
                traffic_in_kbps = openapi_client.models.get_device_switch_ports_statuses_200_response_inner_traffic_in_kbps.getDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps(
                    recv = 1.337, 
                    sent = 1.337, 
                    total = 1.337, ),
                usage_in_kb = openapi_client.models.get_device_switch_ports_statuses_200_response_inner_usage_in_kb.getDeviceSwitchPortsStatuses_200_response_inner_usageInKb(
                    recv = 56, 
                    sent = 56, 
                    total = 56, ),
                warnings = [
                    ''
                    ]
            )
        else:
            return GetDeviceSwitchPortsStatuses200ResponseInner(
        )
        """

    def testGetDeviceSwitchPortsStatuses200ResponseInner(self):
        """Test GetDeviceSwitchPortsStatuses200ResponseInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.get_network_firmware_upgrades200_response import GetNetworkFirmwareUpgrades200Response

class TestGetNetworkFirmwareUpgrades200Response(unittest.TestCase):
    """GetNetworkFirmwareUpgrades200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetNetworkFirmwareUpgrades200Response:
        """Test GetNetworkFirmwareUpgrades200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetNetworkFirmwareUpgrades200Response`
        """
        model = GetNetworkFirmwareUpgrades200Response()
        if include_optional:
            return GetNetworkFirmwareUpgrades200Response(
                products = openapi_client.models.get_network_firmware_upgrades_200_response_products.getNetworkFirmwareUpgrades_200_response_products(
                    appliance = openapi_client.models.get_network_firmware_upgrades_200_response_products_appliance.getNetworkFirmwareUpgrades_200_response_products_appliance(
                        available_versions = [
                            openapi_client.models.get_network_firmware_upgrades_200_response_products_appliance_available_versions_inner.getNetworkFirmwareUpgrades_200_response_products_appliance_availableVersions_inner(
                                firmware = '', 
                                id = '', 
                                release_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                release_type = '', 
                                short_name = '', )
                            ], 
                        current_version = openapi_client.models.get_network_firmware_upgrades_200_response_products_appliance_current_version.getNetworkFirmwareUpgrades_200_response_products_appliance_currentVersion(
                            firmware = '', 
                            id = '', 
                            release_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            release_type = '', 
                            short_name = '', ), 
                        last_upgrade = openapi_client.models.get_network_firmware_upgrades_200_response_products_appliance_last_upgrade.getNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade(
                            from_version = openapi_client.models.get_network_firmware_upgrades_200_response_products_appliance_last_upgrade_from_version.getNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade_fromVersion(
                                firmware = '', 
                                id = '', 
                                release_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                release_type = '', 
                                short_name = '', ), 
                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            to_version = openapi_client.models.get_network_firmware_upgrades_200_response_products_appliance_last_upgrade_to_version.getNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade_toVersion(
                                firmware = '', 
                                id = '', 
                                release_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                release_type = '', 
                                short_name = '', ), ), 
                        next_upgrade = openapi_client.models.get_network_firmware_upgrades_200_response_products_appliance_next_upgrade.getNetworkFirmwareUpgrades_200_response_products_appliance_nextUpgrade(
                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        participate_in_next_beta_release = True, ), 
                    camera = openapi_client.models.get_network_firmware_upgrades_200_response_products_appliance.getNetworkFirmwareUpgrades_200_response_products_appliance(
                        participate_in_next_beta_release = True, ), 
                    cellular_gateway = , 
                    sensor = , 
                    switch = , 
                    wireless = , ),
                timezone = '',
                upgrade_window = openapi_client.models.get_network_firmware_upgrades_200_response_upgrade_window.getNetworkFirmwareUpgrades_200_response_upgradeWindow(
                    day_of_week = 'fri', 
                    hour_of_day = '0:00', )
            )
        else:
            return GetNetworkFirmwareUpgrades200Response(
        )
        """

    def testGetNetworkFirmwareUpgrades200Response(self):
        """Test GetNetworkFirmwareUpgrades200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

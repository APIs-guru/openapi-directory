# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.get_organization_sensor_readings_history200_response_inner import GetOrganizationSensorReadingsHistory200ResponseInner

class TestGetOrganizationSensorReadingsHistory200ResponseInner(unittest.TestCase):
    """GetOrganizationSensorReadingsHistory200ResponseInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetOrganizationSensorReadingsHistory200ResponseInner:
        """Test GetOrganizationSensorReadingsHistory200ResponseInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetOrganizationSensorReadingsHistory200ResponseInner`
        """
        model = GetOrganizationSensorReadingsHistory200ResponseInner()
        if include_optional:
            return GetOrganizationSensorReadingsHistory200ResponseInner(
                battery = openapi_client.models.get_organization_sensor_readings_history_200_response_inner_battery.getOrganizationSensorReadingsHistory_200_response_inner_battery(
                    percentage = 56, ),
                button = openapi_client.models.get_organization_sensor_readings_history_200_response_inner_button.getOrganizationSensorReadingsHistory_200_response_inner_button(
                    press_type = 'long', ),
                door = openapi_client.models.get_organization_sensor_readings_history_200_response_inner_door.getOrganizationSensorReadingsHistory_200_response_inner_door(
                    open = True, ),
                humidity = openapi_client.models.get_organization_sensor_readings_history_200_response_inner_humidity.getOrganizationSensorReadingsHistory_200_response_inner_humidity(
                    relative_percentage = 56, ),
                indoor_air_quality = openapi_client.models.get_organization_sensor_readings_history_200_response_inner_indoor_air_quality.getOrganizationSensorReadingsHistory_200_response_inner_indoorAirQuality(
                    score = 56, ),
                metric = 'battery',
                network = openapi_client.models.get_organization_sensor_readings_history_200_response_inner_network.getOrganizationSensorReadingsHistory_200_response_inner_network(
                    id = '', 
                    name = '', ),
                noise = openapi_client.models.get_organization_sensor_readings_history_200_response_inner_noise.getOrganizationSensorReadingsHistory_200_response_inner_noise(
                    ambient = openapi_client.models.get_organization_sensor_readings_history_200_response_inner_noise_ambient.getOrganizationSensorReadingsHistory_200_response_inner_noise_ambient(
                        level = 56, ), ),
                pm25 = openapi_client.models.get_organization_sensor_readings_history_200_response_inner_pm25.getOrganizationSensorReadingsHistory_200_response_inner_pm25(
                    concentration = 56, ),
                serial = '',
                temperature = openapi_client.models.get_organization_sensor_readings_history_200_response_inner_temperature.getOrganizationSensorReadingsHistory_200_response_inner_temperature(
                    celsius = 1.337, 
                    fahrenheit = 1.337, ),
                ts = '',
                tvoc = openapi_client.models.get_organization_sensor_readings_history_200_response_inner_tvoc.getOrganizationSensorReadingsHistory_200_response_inner_tvoc(
                    concentration = 56, ),
                water = openapi_client.models.get_organization_sensor_readings_history_200_response_inner_water.getOrganizationSensorReadingsHistory_200_response_inner_water(
                    present = True, )
            )
        else:
            return GetOrganizationSensorReadingsHistory200ResponseInner(
        )
        """

    def testGetOrganizationSensorReadingsHistory200ResponseInner(self):
        """Test GetOrganizationSensorReadingsHistory200ResponseInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.firewall_api import FirewallApi


class TestFirewallApi(unittest.TestCase):
    """FirewallApi unit test stubs"""

    def setUp(self) -> None:
        self.api = FirewallApi()

    def tearDown(self) -> None:
        pass

    def test_get_network_appliance_firewall_cellular_firewall_rules_1(self) -> None:
        """Test case for get_network_appliance_firewall_cellular_firewall_rules_1

        Return the cellular firewall rules for an MX network
        """
        pass

    def test_get_network_appliance_firewall_firewalled_service_1(self) -> None:
        """Test case for get_network_appliance_firewall_firewalled_service_1

        Return the accessibility settings of the given service ('ICMP', 'web', or 'SNMP')
        """
        pass

    def test_get_network_appliance_firewall_firewalled_services_1(self) -> None:
        """Test case for get_network_appliance_firewall_firewalled_services_1

        List the appliance services and their accessibility rules
        """
        pass

    def test_get_network_appliance_firewall_inbound_cellular_firewall_rules_1(self) -> None:
        """Test case for get_network_appliance_firewall_inbound_cellular_firewall_rules_1

        Return the inbound cellular firewall rules for an MX network
        """
        pass

    def test_get_network_appliance_firewall_inbound_firewall_rules_1(self) -> None:
        """Test case for get_network_appliance_firewall_inbound_firewall_rules_1

        Return the inbound firewall rules for an MX network
        """
        pass

    def test_get_network_appliance_firewall_l3_firewall_rules_1(self) -> None:
        """Test case for get_network_appliance_firewall_l3_firewall_rules_1

        Return the L3 firewall rules for an MX network
        """
        pass

    def test_get_network_appliance_firewall_l7_firewall_rules_1(self) -> None:
        """Test case for get_network_appliance_firewall_l7_firewall_rules_1

        List the MX L7 firewall rules for an MX network
        """
        pass

    def test_get_network_appliance_firewall_l7_firewall_rules_application_categories_1(self) -> None:
        """Test case for get_network_appliance_firewall_l7_firewall_rules_application_categories_1

        Return the L7 firewall application categories and their associated applications for an MX network
        """
        pass

    def test_get_network_appliance_firewall_one_to_many_nat_rules_1(self) -> None:
        """Test case for get_network_appliance_firewall_one_to_many_nat_rules_1

        Return the 1:Many NAT mapping rules for an MX network
        """
        pass

    def test_get_network_appliance_firewall_one_to_one_nat_rules_1(self) -> None:
        """Test case for get_network_appliance_firewall_one_to_one_nat_rules_1

        Return the 1:1 NAT mapping rules for an MX network
        """
        pass

    def test_get_network_appliance_firewall_port_forwarding_rules_1(self) -> None:
        """Test case for get_network_appliance_firewall_port_forwarding_rules_1

        Return the port forwarding rules for an MX network
        """
        pass

    def test_get_network_appliance_firewall_settings_1(self) -> None:
        """Test case for get_network_appliance_firewall_settings_1

        Return the firewall settings for this network
        """
        pass

    def test_get_network_wireless_ssid_firewall_l3_firewall_rules_2(self) -> None:
        """Test case for get_network_wireless_ssid_firewall_l3_firewall_rules_2

        Return the L3 firewall rules for an SSID on an MR network
        """
        pass

    def test_get_network_wireless_ssid_firewall_l7_firewall_rules_2(self) -> None:
        """Test case for get_network_wireless_ssid_firewall_l7_firewall_rules_2

        Return the L7 firewall rules for an SSID on an MR network
        """
        pass

    def test_update_network_appliance_firewall_cellular_firewall_rules_1(self) -> None:
        """Test case for update_network_appliance_firewall_cellular_firewall_rules_1

        Update the cellular firewall rules of an MX network
        """
        pass

    def test_update_network_appliance_firewall_firewalled_service_1(self) -> None:
        """Test case for update_network_appliance_firewall_firewalled_service_1

        Updates the accessibility settings for the given service ('ICMP', 'web', or 'SNMP')
        """
        pass

    def test_update_network_appliance_firewall_inbound_cellular_firewall_rules_1(self) -> None:
        """Test case for update_network_appliance_firewall_inbound_cellular_firewall_rules_1

        Update the inbound cellular firewall rules of an MX network
        """
        pass

    def test_update_network_appliance_firewall_inbound_firewall_rules_1(self) -> None:
        """Test case for update_network_appliance_firewall_inbound_firewall_rules_1

        Update the inbound firewall rules of an MX network
        """
        pass

    def test_update_network_appliance_firewall_l3_firewall_rules_1(self) -> None:
        """Test case for update_network_appliance_firewall_l3_firewall_rules_1

        Update the L3 firewall rules of an MX network
        """
        pass

    def test_update_network_appliance_firewall_l7_firewall_rules_1(self) -> None:
        """Test case for update_network_appliance_firewall_l7_firewall_rules_1

        Update the MX L7 firewall rules for an MX network
        """
        pass

    def test_update_network_appliance_firewall_one_to_many_nat_rules_1(self) -> None:
        """Test case for update_network_appliance_firewall_one_to_many_nat_rules_1

        Set the 1:Many NAT mapping rules for an MX network
        """
        pass

    def test_update_network_appliance_firewall_one_to_one_nat_rules_1(self) -> None:
        """Test case for update_network_appliance_firewall_one_to_one_nat_rules_1

        Set the 1:1 NAT mapping rules for an MX network
        """
        pass

    def test_update_network_appliance_firewall_port_forwarding_rules_1(self) -> None:
        """Test case for update_network_appliance_firewall_port_forwarding_rules_1

        Update the port forwarding rules for an MX network
        """
        pass

    def test_update_network_appliance_firewall_settings_1(self) -> None:
        """Test case for update_network_appliance_firewall_settings_1

        Update the firewall settings for this network
        """
        pass

    def test_update_network_wireless_ssid_firewall_l3_firewall_rules_2(self) -> None:
        """Test case for update_network_wireless_ssid_firewall_l3_firewall_rules_2

        Update the L3 firewall rules of an SSID on an MR network
        """
        pass

    def test_update_network_wireless_ssid_firewall_l7_firewall_rules_2(self) -> None:
        """Test case for update_network_wireless_ssid_firewall_l7_firewall_rules_2

        Update the L7 firewall rules of an SSID on an MR network
        """
        pass


if __name__ == '__main__':
    unittest.main()

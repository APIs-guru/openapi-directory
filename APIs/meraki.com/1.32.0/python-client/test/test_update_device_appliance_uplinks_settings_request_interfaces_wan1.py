# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.update_device_appliance_uplinks_settings_request_interfaces_wan1 import UpdateDeviceApplianceUplinksSettingsRequestInterfacesWan1

class TestUpdateDeviceApplianceUplinksSettingsRequestInterfacesWan1(unittest.TestCase):
    """UpdateDeviceApplianceUplinksSettingsRequestInterfacesWan1 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UpdateDeviceApplianceUplinksSettingsRequestInterfacesWan1:
        """Test UpdateDeviceApplianceUplinksSettingsRequestInterfacesWan1
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UpdateDeviceApplianceUplinksSettingsRequestInterfacesWan1`
        """
        model = UpdateDeviceApplianceUplinksSettingsRequestInterfacesWan1()
        if include_optional:
            return UpdateDeviceApplianceUplinksSettingsRequestInterfacesWan1(
                enabled = True,
                pppoe = openapi_client.models.update_device_appliance_uplinks_settings_request_interfaces_wan1_pppoe.updateDeviceApplianceUplinksSettings_request_interfaces_wan1_pppoe(
                    authentication = openapi_client.models.update_device_appliance_uplinks_settings_request_interfaces_wan1_pppoe_authentication.updateDeviceApplianceUplinksSettings_request_interfaces_wan1_pppoe_authentication(
                        enabled = True, 
                        password = '', 
                        username = '', ), 
                    enabled = True, ),
                svis = openapi_client.models.get_device_appliance_uplinks_settings_200_response_interfaces_wan1_svis.getDeviceApplianceUplinksSettings_200_response_interfaces_wan1_svis(
                    ipv4 = openapi_client.models.get_device_appliance_uplinks_settings_200_response_interfaces_wan1_svis_ipv4.getDeviceApplianceUplinksSettings_200_response_interfaces_wan1_svis_ipv4(
                        address = '', 
                        assignment_mode = 'dynamic', 
                        gateway = '', 
                        nameservers = openapi_client.models.get_device_appliance_uplinks_settings_200_response_interfaces_wan1_svis_ipv4_nameservers.getDeviceApplianceUplinksSettings_200_response_interfaces_wan1_svis_ipv4_nameservers(
                            addresses = [
                                ''
                                ], ), ), 
                    ipv6 = openapi_client.models.get_device_appliance_uplinks_settings_200_response_interfaces_wan1_svis_ipv6.getDeviceApplianceUplinksSettings_200_response_interfaces_wan1_svis_ipv6(
                        address = '', 
                        assignment_mode = 'dynamic', 
                        gateway = '', ), ),
                vlan_tagging = openapi_client.models.get_device_appliance_uplinks_settings_200_response_interfaces_wan1_vlan_tagging.getDeviceApplianceUplinksSettings_200_response_interfaces_wan1_vlanTagging(
                    enabled = True, 
                    vlan_id = 56, )
            )
        else:
            return UpdateDeviceApplianceUplinksSettingsRequestInterfacesWan1(
        )
        """

    def testUpdateDeviceApplianceUplinksSettingsRequestInterfacesWan1(self):
        """Test UpdateDeviceApplianceUplinksSettingsRequestInterfacesWan1"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.appliance_api import ApplianceApi


class TestApplianceApi(unittest.TestCase):
    """ApplianceApi unit test stubs"""

    def setUp(self) -> None:
        self.api = ApplianceApi()

    def tearDown(self) -> None:
        pass

    def test_create_device_appliance_vmx_authentication_token(self) -> None:
        """Test case for create_device_appliance_vmx_authentication_token

        Generate a new vMX authentication token
        """
        pass

    def test_create_network_appliance_prefixes_delegated_static(self) -> None:
        """Test case for create_network_appliance_prefixes_delegated_static

        Add a static delegated prefix from a network
        """
        pass

    def test_create_network_appliance_static_route(self) -> None:
        """Test case for create_network_appliance_static_route

        Add a static route for an MX or teleworker network
        """
        pass

    def test_create_network_appliance_traffic_shaping_custom_performance_class(self) -> None:
        """Test case for create_network_appliance_traffic_shaping_custom_performance_class

        Add a custom performance class for an MX network
        """
        pass

    def test_create_network_appliance_vlan(self) -> None:
        """Test case for create_network_appliance_vlan

        Add a VLAN
        """
        pass

    def test_delete_network_appliance_prefixes_delegated_static(self) -> None:
        """Test case for delete_network_appliance_prefixes_delegated_static

        Delete a static delegated prefix from a network
        """
        pass

    def test_delete_network_appliance_static_route(self) -> None:
        """Test case for delete_network_appliance_static_route

        Delete a static route from an MX or teleworker network
        """
        pass

    def test_delete_network_appliance_traffic_shaping_custom_performance_class(self) -> None:
        """Test case for delete_network_appliance_traffic_shaping_custom_performance_class

        Delete a custom performance class from an MX network
        """
        pass

    def test_delete_network_appliance_vlan(self) -> None:
        """Test case for delete_network_appliance_vlan

        Delete a VLAN from a network
        """
        pass

    def test_get_device_appliance_dhcp_subnets(self) -> None:
        """Test case for get_device_appliance_dhcp_subnets

        Return the DHCP subnet information for an appliance
        """
        pass

    def test_get_device_appliance_performance(self) -> None:
        """Test case for get_device_appliance_performance

        Return the performance score for a single MX
        """
        pass

    def test_get_device_appliance_prefixes_delegated(self) -> None:
        """Test case for get_device_appliance_prefixes_delegated

        Return current delegated IPv6 prefixes on an appliance.
        """
        pass

    def test_get_device_appliance_prefixes_delegated_vlan_assignments(self) -> None:
        """Test case for get_device_appliance_prefixes_delegated_vlan_assignments

        Return prefixes assigned to all IPv6 enabled VLANs on an appliance.
        """
        pass

    def test_get_device_appliance_uplinks_settings(self) -> None:
        """Test case for get_device_appliance_uplinks_settings

        Return the uplink settings for an MX appliance
        """
        pass

    def test_get_network_appliance_client_security_events(self) -> None:
        """Test case for get_network_appliance_client_security_events

        List the security events for a client
        """
        pass

    def test_get_network_appliance_connectivity_monitoring_destinations(self) -> None:
        """Test case for get_network_appliance_connectivity_monitoring_destinations

        Return the connectivity testing destinations for an MX network
        """
        pass

    def test_get_network_appliance_content_filtering(self) -> None:
        """Test case for get_network_appliance_content_filtering

        Return the content filtering settings for an MX network
        """
        pass

    def test_get_network_appliance_content_filtering_categories(self) -> None:
        """Test case for get_network_appliance_content_filtering_categories

        List all available content filtering categories for an MX network
        """
        pass

    def test_get_network_appliance_firewall_cellular_firewall_rules(self) -> None:
        """Test case for get_network_appliance_firewall_cellular_firewall_rules

        Return the cellular firewall rules for an MX network
        """
        pass

    def test_get_network_appliance_firewall_firewalled_service(self) -> None:
        """Test case for get_network_appliance_firewall_firewalled_service

        Return the accessibility settings of the given service ('ICMP', 'web', or 'SNMP')
        """
        pass

    def test_get_network_appliance_firewall_firewalled_services(self) -> None:
        """Test case for get_network_appliance_firewall_firewalled_services

        List the appliance services and their accessibility rules
        """
        pass

    def test_get_network_appliance_firewall_inbound_cellular_firewall_rules(self) -> None:
        """Test case for get_network_appliance_firewall_inbound_cellular_firewall_rules

        Return the inbound cellular firewall rules for an MX network
        """
        pass

    def test_get_network_appliance_firewall_inbound_firewall_rules(self) -> None:
        """Test case for get_network_appliance_firewall_inbound_firewall_rules

        Return the inbound firewall rules for an MX network
        """
        pass

    def test_get_network_appliance_firewall_l3_firewall_rules(self) -> None:
        """Test case for get_network_appliance_firewall_l3_firewall_rules

        Return the L3 firewall rules for an MX network
        """
        pass

    def test_get_network_appliance_firewall_l7_firewall_rules(self) -> None:
        """Test case for get_network_appliance_firewall_l7_firewall_rules

        List the MX L7 firewall rules for an MX network
        """
        pass

    def test_get_network_appliance_firewall_l7_firewall_rules_application_categories(self) -> None:
        """Test case for get_network_appliance_firewall_l7_firewall_rules_application_categories

        Return the L7 firewall application categories and their associated applications for an MX network
        """
        pass

    def test_get_network_appliance_firewall_one_to_many_nat_rules(self) -> None:
        """Test case for get_network_appliance_firewall_one_to_many_nat_rules

        Return the 1:Many NAT mapping rules for an MX network
        """
        pass

    def test_get_network_appliance_firewall_one_to_one_nat_rules(self) -> None:
        """Test case for get_network_appliance_firewall_one_to_one_nat_rules

        Return the 1:1 NAT mapping rules for an MX network
        """
        pass

    def test_get_network_appliance_firewall_port_forwarding_rules(self) -> None:
        """Test case for get_network_appliance_firewall_port_forwarding_rules

        Return the port forwarding rules for an MX network
        """
        pass

    def test_get_network_appliance_firewall_settings(self) -> None:
        """Test case for get_network_appliance_firewall_settings

        Return the firewall settings for this network
        """
        pass

    def test_get_network_appliance_port(self) -> None:
        """Test case for get_network_appliance_port

        Return per-port VLAN settings for a single MX port.
        """
        pass

    def test_get_network_appliance_ports(self) -> None:
        """Test case for get_network_appliance_ports

        List per-port VLAN settings for all ports of a MX.
        """
        pass

    def test_get_network_appliance_prefixes_delegated_static(self) -> None:
        """Test case for get_network_appliance_prefixes_delegated_static

        Return a static delegated prefix from a network
        """
        pass

    def test_get_network_appliance_prefixes_delegated_statics(self) -> None:
        """Test case for get_network_appliance_prefixes_delegated_statics

        List static delegated prefixes for a network
        """
        pass

    def test_get_network_appliance_security_events(self) -> None:
        """Test case for get_network_appliance_security_events

        List the security events for a network
        """
        pass

    def test_get_network_appliance_security_intrusion(self) -> None:
        """Test case for get_network_appliance_security_intrusion

        Returns all supported intrusion settings for an MX network
        """
        pass

    def test_get_network_appliance_security_malware(self) -> None:
        """Test case for get_network_appliance_security_malware

        Returns all supported malware settings for an MX network
        """
        pass

    def test_get_network_appliance_settings(self) -> None:
        """Test case for get_network_appliance_settings

        Return the appliance settings for a network
        """
        pass

    def test_get_network_appliance_single_lan(self) -> None:
        """Test case for get_network_appliance_single_lan

        Return single LAN configuration
        """
        pass

    def test_get_network_appliance_ssid(self) -> None:
        """Test case for get_network_appliance_ssid

        Return a single MX SSID
        """
        pass

    def test_get_network_appliance_ssids(self) -> None:
        """Test case for get_network_appliance_ssids

        List the MX SSIDs in a network
        """
        pass

    def test_get_network_appliance_static_route(self) -> None:
        """Test case for get_network_appliance_static_route

        Return a static route for an MX or teleworker network
        """
        pass

    def test_get_network_appliance_static_routes(self) -> None:
        """Test case for get_network_appliance_static_routes

        List the static routes for an MX or teleworker network
        """
        pass

    def test_get_network_appliance_traffic_shaping(self) -> None:
        """Test case for get_network_appliance_traffic_shaping

        Display the traffic shaping settings for an MX network
        """
        pass

    def test_get_network_appliance_traffic_shaping_custom_performance_class(self) -> None:
        """Test case for get_network_appliance_traffic_shaping_custom_performance_class

        Return a custom performance class for an MX network
        """
        pass

    def test_get_network_appliance_traffic_shaping_custom_performance_classes(self) -> None:
        """Test case for get_network_appliance_traffic_shaping_custom_performance_classes

        List all custom performance classes for an MX network
        """
        pass

    def test_get_network_appliance_traffic_shaping_rules(self) -> None:
        """Test case for get_network_appliance_traffic_shaping_rules

        Display the traffic shaping settings rules for an MX network
        """
        pass

    def test_get_network_appliance_traffic_shaping_uplink_bandwidth(self) -> None:
        """Test case for get_network_appliance_traffic_shaping_uplink_bandwidth

        Returns the uplink bandwidth limits for your MX network
        """
        pass

    def test_get_network_appliance_traffic_shaping_uplink_selection(self) -> None:
        """Test case for get_network_appliance_traffic_shaping_uplink_selection

        Show uplink selection settings for an MX network
        """
        pass

    def test_get_network_appliance_uplinks_usage_history(self) -> None:
        """Test case for get_network_appliance_uplinks_usage_history

        Get the sent and received bytes for each uplink of a network.
        """
        pass

    def test_get_network_appliance_vlan(self) -> None:
        """Test case for get_network_appliance_vlan

        Return a VLAN
        """
        pass

    def test_get_network_appliance_vlans(self) -> None:
        """Test case for get_network_appliance_vlans

        List the VLANs for an MX network
        """
        pass

    def test_get_network_appliance_vlans_settings(self) -> None:
        """Test case for get_network_appliance_vlans_settings

        Returns the enabled status of VLANs for the network
        """
        pass

    def test_get_network_appliance_vpn_bgp(self) -> None:
        """Test case for get_network_appliance_vpn_bgp

        Return a Hub BGP Configuration
        """
        pass

    def test_get_network_appliance_vpn_site_to_site_vpn(self) -> None:
        """Test case for get_network_appliance_vpn_site_to_site_vpn

        Return the site-to-site VPN settings of a network
        """
        pass

    def test_get_network_appliance_warm_spare(self) -> None:
        """Test case for get_network_appliance_warm_spare

        Return MX warm spare settings
        """
        pass

    def test_get_organization_appliance_security_events(self) -> None:
        """Test case for get_organization_appliance_security_events

        List the security events for an organization
        """
        pass

    def test_get_organization_appliance_security_intrusion(self) -> None:
        """Test case for get_organization_appliance_security_intrusion

        Returns all supported intrusion settings for an organization
        """
        pass

    def test_get_organization_appliance_uplink_statuses(self) -> None:
        """Test case for get_organization_appliance_uplink_statuses

        List the uplink status of every Meraki MX and Z series appliances in the organization
        """
        pass

    def test_get_organization_appliance_vpn_stats(self) -> None:
        """Test case for get_organization_appliance_vpn_stats

        Show VPN history stat for networks in an organization
        """
        pass

    def test_get_organization_appliance_vpn_statuses(self) -> None:
        """Test case for get_organization_appliance_vpn_statuses

        Show VPN status for networks in an organization
        """
        pass

    def test_get_organization_appliance_vpn_third_party_vpn_peers(self) -> None:
        """Test case for get_organization_appliance_vpn_third_party_vpn_peers

        Return the third party VPN peers for an organization
        """
        pass

    def test_get_organization_appliance_vpn_vpn_firewall_rules(self) -> None:
        """Test case for get_organization_appliance_vpn_vpn_firewall_rules

        Return the firewall rules for an organization's site-to-site VPN
        """
        pass

    def test_swap_network_appliance_warm_spare(self) -> None:
        """Test case for swap_network_appliance_warm_spare

        Swap MX primary and warm spare appliances
        """
        pass

    def test_update_device_appliance_uplinks_settings(self) -> None:
        """Test case for update_device_appliance_uplinks_settings

        Update the uplink settings for an MX appliance
        """
        pass

    def test_update_network_appliance_connectivity_monitoring_destinations(self) -> None:
        """Test case for update_network_appliance_connectivity_monitoring_destinations

        Update the connectivity testing destinations for an MX network
        """
        pass

    def test_update_network_appliance_content_filtering(self) -> None:
        """Test case for update_network_appliance_content_filtering

        Update the content filtering settings for an MX network
        """
        pass

    def test_update_network_appliance_firewall_cellular_firewall_rules(self) -> None:
        """Test case for update_network_appliance_firewall_cellular_firewall_rules

        Update the cellular firewall rules of an MX network
        """
        pass

    def test_update_network_appliance_firewall_firewalled_service(self) -> None:
        """Test case for update_network_appliance_firewall_firewalled_service

        Updates the accessibility settings for the given service ('ICMP', 'web', or 'SNMP')
        """
        pass

    def test_update_network_appliance_firewall_inbound_cellular_firewall_rules(self) -> None:
        """Test case for update_network_appliance_firewall_inbound_cellular_firewall_rules

        Update the inbound cellular firewall rules of an MX network
        """
        pass

    def test_update_network_appliance_firewall_inbound_firewall_rules(self) -> None:
        """Test case for update_network_appliance_firewall_inbound_firewall_rules

        Update the inbound firewall rules of an MX network
        """
        pass

    def test_update_network_appliance_firewall_l3_firewall_rules(self) -> None:
        """Test case for update_network_appliance_firewall_l3_firewall_rules

        Update the L3 firewall rules of an MX network
        """
        pass

    def test_update_network_appliance_firewall_l7_firewall_rules(self) -> None:
        """Test case for update_network_appliance_firewall_l7_firewall_rules

        Update the MX L7 firewall rules for an MX network
        """
        pass

    def test_update_network_appliance_firewall_one_to_many_nat_rules(self) -> None:
        """Test case for update_network_appliance_firewall_one_to_many_nat_rules

        Set the 1:Many NAT mapping rules for an MX network
        """
        pass

    def test_update_network_appliance_firewall_one_to_one_nat_rules(self) -> None:
        """Test case for update_network_appliance_firewall_one_to_one_nat_rules

        Set the 1:1 NAT mapping rules for an MX network
        """
        pass

    def test_update_network_appliance_firewall_port_forwarding_rules(self) -> None:
        """Test case for update_network_appliance_firewall_port_forwarding_rules

        Update the port forwarding rules for an MX network
        """
        pass

    def test_update_network_appliance_firewall_settings(self) -> None:
        """Test case for update_network_appliance_firewall_settings

        Update the firewall settings for this network
        """
        pass

    def test_update_network_appliance_port(self) -> None:
        """Test case for update_network_appliance_port

        Update the per-port VLAN settings for a single MX port.
        """
        pass

    def test_update_network_appliance_prefixes_delegated_static(self) -> None:
        """Test case for update_network_appliance_prefixes_delegated_static

        Update a static delegated prefix from a network
        """
        pass

    def test_update_network_appliance_security_intrusion(self) -> None:
        """Test case for update_network_appliance_security_intrusion

        Set the supported intrusion settings for an MX network
        """
        pass

    def test_update_network_appliance_security_malware(self) -> None:
        """Test case for update_network_appliance_security_malware

        Set the supported malware settings for an MX network
        """
        pass

    def test_update_network_appliance_settings(self) -> None:
        """Test case for update_network_appliance_settings

        Update the appliance settings for a network
        """
        pass

    def test_update_network_appliance_single_lan(self) -> None:
        """Test case for update_network_appliance_single_lan

        Update single LAN configuration
        """
        pass

    def test_update_network_appliance_ssid(self) -> None:
        """Test case for update_network_appliance_ssid

        Update the attributes of an MX SSID
        """
        pass

    def test_update_network_appliance_static_route(self) -> None:
        """Test case for update_network_appliance_static_route

        Update a static route for an MX or teleworker network
        """
        pass

    def test_update_network_appliance_traffic_shaping(self) -> None:
        """Test case for update_network_appliance_traffic_shaping

        Update the traffic shaping settings for an MX network
        """
        pass

    def test_update_network_appliance_traffic_shaping_custom_performance_class(self) -> None:
        """Test case for update_network_appliance_traffic_shaping_custom_performance_class

        Update a custom performance class for an MX network
        """
        pass

    def test_update_network_appliance_traffic_shaping_rules(self) -> None:
        """Test case for update_network_appliance_traffic_shaping_rules

        Update the traffic shaping settings rules for an MX network
        """
        pass

    def test_update_network_appliance_traffic_shaping_uplink_bandwidth(self) -> None:
        """Test case for update_network_appliance_traffic_shaping_uplink_bandwidth

        Updates the uplink bandwidth settings for your MX network.
        """
        pass

    def test_update_network_appliance_traffic_shaping_uplink_selection(self) -> None:
        """Test case for update_network_appliance_traffic_shaping_uplink_selection

        Update uplink selection settings for an MX network
        """
        pass

    def test_update_network_appliance_vlan(self) -> None:
        """Test case for update_network_appliance_vlan

        Update a VLAN
        """
        pass

    def test_update_network_appliance_vlans_settings(self) -> None:
        """Test case for update_network_appliance_vlans_settings

        Enable/Disable VLANs for the given network
        """
        pass

    def test_update_network_appliance_vpn_bgp(self) -> None:
        """Test case for update_network_appliance_vpn_bgp

        Update a Hub BGP Configuration
        """
        pass

    def test_update_network_appliance_vpn_site_to_site_vpn(self) -> None:
        """Test case for update_network_appliance_vpn_site_to_site_vpn

        Update the site-to-site VPN settings of a network
        """
        pass

    def test_update_network_appliance_warm_spare(self) -> None:
        """Test case for update_network_appliance_warm_spare

        Update MX warm spare settings
        """
        pass

    def test_update_organization_appliance_security_intrusion(self) -> None:
        """Test case for update_organization_appliance_security_intrusion

        Sets supported intrusion settings for an organization
        """
        pass

    def test_update_organization_appliance_vpn_third_party_vpn_peers(self) -> None:
        """Test case for update_organization_appliance_vpn_third_party_vpn_peers

        Update the third party VPN peers for an organization
        """
        pass

    def test_update_organization_appliance_vpn_vpn_firewall_rules(self) -> None:
        """Test case for update_organization_appliance_vpn_vpn_firewall_rules

        Update the firewall rules of an organization's site-to-site VPN
        """
        pass


if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.configure_api import ConfigureApi


class TestConfigureApi(unittest.TestCase):
    """ConfigureApi unit test stubs"""

    def setUp(self) -> None:
        self.api = ConfigureApi()

    def tearDown(self) -> None:
        pass

    def test_add_network_switch_stack_0(self) -> None:
        """Test case for add_network_switch_stack_0

        Add a switch to a stack
        """
        pass

    def test_assign_organization_licenses_seats_0(self) -> None:
        """Test case for assign_organization_licenses_seats_0

        Assign SM seats to a network
        """
        pass

    def test_bind_network_0(self) -> None:
        """Test case for bind_network_0

        Bind a network to a template.
        """
        pass

    def test_checkin_network_sm_devices_0(self) -> None:
        """Test case for checkin_network_sm_devices_0

        Force check-in a set of devices
        """
        pass

    def test_claim_into_organization_0(self) -> None:
        """Test case for claim_into_organization_0

        Claim a list of devices, licenses, and/or orders into an organization
        """
        pass

    def test_claim_into_organization_inventory_0(self) -> None:
        """Test case for claim_into_organization_inventory_0

        Claim a list of devices, licenses, and/or orders into an organization inventory
        """
        pass

    def test_claim_network_devices_0(self) -> None:
        """Test case for claim_network_devices_0

        Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
        """
        pass

    def test_clone_organization_0(self) -> None:
        """Test case for clone_organization_0

        Create a new organization by cloning the addressed organization
        """
        pass

    def test_clone_organization_switch_devices_0(self) -> None:
        """Test case for clone_organization_switch_devices_0

        Clone port-level and some switch-level configuration settings from a source switch to one or more target switches
        """
        pass

    def test_combine_organization_networks_0(self) -> None:
        """Test case for combine_organization_networks_0

        Combine multiple networks into a single network
        """
        pass

    def test_create_device_appliance_vmx_authentication_token_0(self) -> None:
        """Test case for create_device_appliance_vmx_authentication_token_0

        Generate a new vMX authentication token
        """
        pass

    def test_create_device_switch_routing_interface_0(self) -> None:
        """Test case for create_device_switch_routing_interface_0

        Create a layer 3 interface for a switch
        """
        pass

    def test_create_device_switch_routing_static_route_0(self) -> None:
        """Test case for create_device_switch_routing_static_route_0

        Create a layer 3 static route for a switch
        """
        pass

    def test_create_network_appliance_prefixes_delegated_static_0(self) -> None:
        """Test case for create_network_appliance_prefixes_delegated_static_0

        Add a static delegated prefix from a network
        """
        pass

    def test_create_network_appliance_static_route_0(self) -> None:
        """Test case for create_network_appliance_static_route_0

        Add a static route for an MX or teleworker network
        """
        pass

    def test_create_network_appliance_traffic_shaping_custom_performance_class_0(self) -> None:
        """Test case for create_network_appliance_traffic_shaping_custom_performance_class_0

        Add a custom performance class for an MX network
        """
        pass

    def test_create_network_appliance_vlan_0(self) -> None:
        """Test case for create_network_appliance_vlan_0

        Add a VLAN
        """
        pass

    def test_create_network_camera_quality_retention_profile_0(self) -> None:
        """Test case for create_network_camera_quality_retention_profile_0

        Creates new quality retention profile for this network.
        """
        pass

    def test_create_network_camera_wireless_profile_0(self) -> None:
        """Test case for create_network_camera_wireless_profile_0

        Creates a new camera wireless profile for this network.
        """
        pass

    def test_create_network_firmware_upgrades_rollback_0(self) -> None:
        """Test case for create_network_firmware_upgrades_rollback_0

        Rollback a Firmware Upgrade For A Network
        """
        pass

    def test_create_network_firmware_upgrades_staged_event_0(self) -> None:
        """Test case for create_network_firmware_upgrades_staged_event_0

        Create a Staged Upgrade Event for a network
        """
        pass

    def test_create_network_firmware_upgrades_staged_group_0(self) -> None:
        """Test case for create_network_firmware_upgrades_staged_group_0

        Create a Staged Upgrade Group for a network
        """
        pass

    def test_create_network_floor_plan_0(self) -> None:
        """Test case for create_network_floor_plan_0

        Upload a floor plan
        """
        pass

    def test_create_network_group_policy_0(self) -> None:
        """Test case for create_network_group_policy_0

        Create a group policy
        """
        pass

    def test_create_network_meraki_auth_user_0(self) -> None:
        """Test case for create_network_meraki_auth_user_0

        Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
        """
        pass

    def test_create_network_mqtt_broker_0(self) -> None:
        """Test case for create_network_mqtt_broker_0

        Add an MQTT broker
        """
        pass

    def test_create_network_pii_request_0(self) -> None:
        """Test case for create_network_pii_request_0

        Submit a new delete or restrict processing PII request
        """
        pass

    def test_create_network_sensor_alerts_profile_0(self) -> None:
        """Test case for create_network_sensor_alerts_profile_0

        Creates a sensor alert profile for a network.
        """
        pass

    def test_create_network_sm_bypass_activation_lock_attempt_0(self) -> None:
        """Test case for create_network_sm_bypass_activation_lock_attempt_0

        Bypass activation lock attempt
        """
        pass

    def test_create_network_sm_target_group_0(self) -> None:
        """Test case for create_network_sm_target_group_0

        Add a target group
        """
        pass

    def test_create_network_switch_access_policy_0(self) -> None:
        """Test case for create_network_switch_access_policy_0

        Create an access policy for a switch network
        """
        pass

    def test_create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_0(self) -> None:
        """Test case for create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_0

        Add a server to be trusted by Dynamic ARP Inspection on this network
        """
        pass

    def test_create_network_switch_link_aggregation_0(self) -> None:
        """Test case for create_network_switch_link_aggregation_0

        Create a link aggregation group
        """
        pass

    def test_create_network_switch_port_schedule_0(self) -> None:
        """Test case for create_network_switch_port_schedule_0

        Add a switch port schedule
        """
        pass

    def test_create_network_switch_qos_rule_0(self) -> None:
        """Test case for create_network_switch_qos_rule_0

        Add a quality of service rule
        """
        pass

    def test_create_network_switch_routing_multicast_rendezvous_point_0(self) -> None:
        """Test case for create_network_switch_routing_multicast_rendezvous_point_0

        Create a multicast rendezvous point
        """
        pass

    def test_create_network_switch_stack_0(self) -> None:
        """Test case for create_network_switch_stack_0

        Create a stack
        """
        pass

    def test_create_network_switch_stack_routing_interface_0(self) -> None:
        """Test case for create_network_switch_stack_routing_interface_0

        Create a layer 3 interface for a switch stack
        """
        pass

    def test_create_network_switch_stack_routing_static_route_0(self) -> None:
        """Test case for create_network_switch_stack_routing_static_route_0

        Create a layer 3 static route for a switch stack
        """
        pass

    def test_create_network_webhooks_http_server_0(self) -> None:
        """Test case for create_network_webhooks_http_server_0

        Add an HTTP server to a network
        """
        pass

    def test_create_network_webhooks_payload_template_0(self) -> None:
        """Test case for create_network_webhooks_payload_template_0

        Create a webhook payload template for a network
        """
        pass

    def test_create_network_webhooks_webhook_test_0(self) -> None:
        """Test case for create_network_webhooks_webhook_test_0

        Send a test webhook for a network
        """
        pass

    def test_create_network_wireless_rf_profile_0(self) -> None:
        """Test case for create_network_wireless_rf_profile_0

        Creates new RF profile for this network
        """
        pass

    def test_create_network_wireless_ssid_identity_psk_0(self) -> None:
        """Test case for create_network_wireless_ssid_identity_psk_0

        Create an Identity PSK
        """
        pass

    def test_create_organization_0(self) -> None:
        """Test case for create_organization_0

        Create a new organization
        """
        pass

    def test_create_organization_action_batch_0(self) -> None:
        """Test case for create_organization_action_batch_0

        Create an action batch
        """
        pass

    def test_create_organization_adaptive_policy_acl_0(self) -> None:
        """Test case for create_organization_adaptive_policy_acl_0

        Creates new adaptive policy ACL
        """
        pass

    def test_create_organization_adaptive_policy_group_0(self) -> None:
        """Test case for create_organization_adaptive_policy_group_0

        Creates a new adaptive policy group
        """
        pass

    def test_create_organization_adaptive_policy_policy_0(self) -> None:
        """Test case for create_organization_adaptive_policy_policy_0

        Add an Adaptive Policy
        """
        pass

    def test_create_organization_admin_0(self) -> None:
        """Test case for create_organization_admin_0

        Create a new dashboard administrator
        """
        pass

    def test_create_organization_alerts_profile_0(self) -> None:
        """Test case for create_organization_alerts_profile_0

        Create an organization-wide alert configuration
        """
        pass

    def test_create_organization_branding_policy_0(self) -> None:
        """Test case for create_organization_branding_policy_0

        Add a new branding policy to an organization
        """
        pass

    def test_create_organization_camera_custom_analytics_artifact_0(self) -> None:
        """Test case for create_organization_camera_custom_analytics_artifact_0

        Create custom analytics artifact
        """
        pass

    def test_create_organization_config_template_0(self) -> None:
        """Test case for create_organization_config_template_0

        Create a new configuration template
        """
        pass

    def test_create_organization_early_access_features_opt_in_0(self) -> None:
        """Test case for create_organization_early_access_features_opt_in_0

        Create a new early access feature opt-in for an organization
        """
        pass

    def test_create_organization_insight_monitored_media_server_0(self) -> None:
        """Test case for create_organization_insight_monitored_media_server_0

        Add a media server to be monitored for this organization
        """
        pass

    def test_create_organization_inventory_onboarding_cloud_monitoring_export_event_0(self) -> None:
        """Test case for create_organization_inventory_onboarding_cloud_monitoring_export_event_0

        Imports event logs related to the onboarding app into elastisearch
        """
        pass

    def test_create_organization_inventory_onboarding_cloud_monitoring_import_0(self) -> None:
        """Test case for create_organization_inventory_onboarding_cloud_monitoring_import_0

        Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
        """
        pass

    def test_create_organization_inventory_onboarding_cloud_monitoring_prepare_0(self) -> None:
        """Test case for create_organization_inventory_onboarding_cloud_monitoring_prepare_0

        Initiates or updates an import session
        """
        pass

    def test_create_organization_network_0(self) -> None:
        """Test case for create_organization_network_0

        Create a network
        """
        pass

    def test_create_organization_policy_object_0(self) -> None:
        """Test case for create_organization_policy_object_0

        Creates a new Policy Object.
        """
        pass

    def test_create_organization_policy_objects_group_0(self) -> None:
        """Test case for create_organization_policy_objects_group_0

        Creates a new Policy Object Group.
        """
        pass

    def test_create_organization_saml_idp_0(self) -> None:
        """Test case for create_organization_saml_idp_0

        Create a SAML IdP for your organization.
        """
        pass

    def test_create_organization_saml_role_0(self) -> None:
        """Test case for create_organization_saml_role_0

        Create a SAML role
        """
        pass

    def test_defer_network_firmware_upgrades_staged_events_0(self) -> None:
        """Test case for defer_network_firmware_upgrades_staged_events_0

        Postpone by 1 week all pending staged upgrade stages for a network
        """
        pass

    def test_delete_device_switch_routing_interface_0(self) -> None:
        """Test case for delete_device_switch_routing_interface_0

        Delete a layer 3 interface from the switch
        """
        pass

    def test_delete_device_switch_routing_static_route_0(self) -> None:
        """Test case for delete_device_switch_routing_static_route_0

        Delete a layer 3 static route for a switch
        """
        pass

    def test_delete_network_0(self) -> None:
        """Test case for delete_network_0

        Delete a network
        """
        pass

    def test_delete_network_appliance_prefixes_delegated_static_0(self) -> None:
        """Test case for delete_network_appliance_prefixes_delegated_static_0

        Delete a static delegated prefix from a network
        """
        pass

    def test_delete_network_appliance_static_route_0(self) -> None:
        """Test case for delete_network_appliance_static_route_0

        Delete a static route from an MX or teleworker network
        """
        pass

    def test_delete_network_appliance_traffic_shaping_custom_performance_class_0(self) -> None:
        """Test case for delete_network_appliance_traffic_shaping_custom_performance_class_0

        Delete a custom performance class from an MX network
        """
        pass

    def test_delete_network_appliance_vlan_0(self) -> None:
        """Test case for delete_network_appliance_vlan_0

        Delete a VLAN from a network
        """
        pass

    def test_delete_network_camera_quality_retention_profile_0(self) -> None:
        """Test case for delete_network_camera_quality_retention_profile_0

        Delete an existing quality retention profile for this network.
        """
        pass

    def test_delete_network_camera_wireless_profile_0(self) -> None:
        """Test case for delete_network_camera_wireless_profile_0

        Delete an existing camera wireless profile for this network.
        """
        pass

    def test_delete_network_firmware_upgrades_staged_group_0(self) -> None:
        """Test case for delete_network_firmware_upgrades_staged_group_0

        Delete a Staged Upgrade Group
        """
        pass

    def test_delete_network_floor_plan_0(self) -> None:
        """Test case for delete_network_floor_plan_0

        Destroy a floor plan
        """
        pass

    def test_delete_network_group_policy_0(self) -> None:
        """Test case for delete_network_group_policy_0

        Delete a group policy
        """
        pass

    def test_delete_network_meraki_auth_user_0(self) -> None:
        """Test case for delete_network_meraki_auth_user_0

        Deauthorize a user
        """
        pass

    def test_delete_network_mqtt_broker_0(self) -> None:
        """Test case for delete_network_mqtt_broker_0

        Delete an MQTT broker
        """
        pass

    def test_delete_network_pii_request_0(self) -> None:
        """Test case for delete_network_pii_request_0

        Delete a restrict processing PII request
        """
        pass

    def test_delete_network_sensor_alerts_profile_0(self) -> None:
        """Test case for delete_network_sensor_alerts_profile_0

        Deletes a sensor alert profile from a network.
        """
        pass

    def test_delete_network_sm_target_group_0(self) -> None:
        """Test case for delete_network_sm_target_group_0

        Delete a target group from a network
        """
        pass

    def test_delete_network_sm_user_access_device_0(self) -> None:
        """Test case for delete_network_sm_user_access_device_0

        Delete a User Access Device
        """
        pass

    def test_delete_network_switch_access_policy_0(self) -> None:
        """Test case for delete_network_switch_access_policy_0

        Delete an access policy for a switch network
        """
        pass

    def test_delete_network_switch_dhcp_server_policy_arp_inspection_trusted_server_0(self) -> None:
        """Test case for delete_network_switch_dhcp_server_policy_arp_inspection_trusted_server_0

        Remove a server from being trusted by Dynamic ARP Inspection on this network
        """
        pass

    def test_delete_network_switch_link_aggregation_0(self) -> None:
        """Test case for delete_network_switch_link_aggregation_0

        Split a link aggregation group into separate ports
        """
        pass

    def test_delete_network_switch_port_schedule_0(self) -> None:
        """Test case for delete_network_switch_port_schedule_0

        Delete a switch port schedule
        """
        pass

    def test_delete_network_switch_qos_rule_0(self) -> None:
        """Test case for delete_network_switch_qos_rule_0

        Delete a quality of service rule
        """
        pass

    def test_delete_network_switch_routing_multicast_rendezvous_point_0(self) -> None:
        """Test case for delete_network_switch_routing_multicast_rendezvous_point_0

        Delete a multicast rendezvous point
        """
        pass

    def test_delete_network_switch_stack_0(self) -> None:
        """Test case for delete_network_switch_stack_0

        Delete a stack
        """
        pass

    def test_delete_network_switch_stack_routing_interface_0(self) -> None:
        """Test case for delete_network_switch_stack_routing_interface_0

        Delete a layer 3 interface from a switch stack
        """
        pass

    def test_delete_network_switch_stack_routing_static_route_0(self) -> None:
        """Test case for delete_network_switch_stack_routing_static_route_0

        Delete a layer 3 static route for a switch stack
        """
        pass

    def test_delete_network_webhooks_http_server_0(self) -> None:
        """Test case for delete_network_webhooks_http_server_0

        Delete an HTTP server from a network
        """
        pass

    def test_delete_network_webhooks_payload_template_0(self) -> None:
        """Test case for delete_network_webhooks_payload_template_0

        Destroy a webhook payload template for a network
        """
        pass

    def test_delete_network_wireless_rf_profile_0(self) -> None:
        """Test case for delete_network_wireless_rf_profile_0

        Delete a RF Profile
        """
        pass

    def test_delete_network_wireless_ssid_identity_psk_0(self) -> None:
        """Test case for delete_network_wireless_ssid_identity_psk_0

        Delete an Identity PSK
        """
        pass

    def test_delete_organization_0(self) -> None:
        """Test case for delete_organization_0

        Delete an organization
        """
        pass

    def test_delete_organization_action_batch_0(self) -> None:
        """Test case for delete_organization_action_batch_0

        Delete an action batch
        """
        pass

    def test_delete_organization_adaptive_policy_acl_0(self) -> None:
        """Test case for delete_organization_adaptive_policy_acl_0

        Deletes the specified adaptive policy ACL
        """
        pass

    def test_delete_organization_adaptive_policy_group_0(self) -> None:
        """Test case for delete_organization_adaptive_policy_group_0

        Deletes the specified adaptive policy group and any associated policies and references
        """
        pass

    def test_delete_organization_adaptive_policy_policy_0(self) -> None:
        """Test case for delete_organization_adaptive_policy_policy_0

        Delete an Adaptive Policy
        """
        pass

    def test_delete_organization_admin_0(self) -> None:
        """Test case for delete_organization_admin_0

        Revoke all access for a dashboard administrator within this organization
        """
        pass

    def test_delete_organization_alerts_profile_0(self) -> None:
        """Test case for delete_organization_alerts_profile_0

        Removes an organization-wide alert config
        """
        pass

    def test_delete_organization_branding_policy_0(self) -> None:
        """Test case for delete_organization_branding_policy_0

        Delete a branding policy
        """
        pass

    def test_delete_organization_camera_custom_analytics_artifact_0(self) -> None:
        """Test case for delete_organization_camera_custom_analytics_artifact_0

        Delete Custom Analytics Artifact
        """
        pass

    def test_delete_organization_config_template_0(self) -> None:
        """Test case for delete_organization_config_template_0

        Remove a configuration template
        """
        pass

    def test_delete_organization_early_access_features_opt_in_0(self) -> None:
        """Test case for delete_organization_early_access_features_opt_in_0

        Delete an early access feature opt-in
        """
        pass

    def test_delete_organization_insight_monitored_media_server_0(self) -> None:
        """Test case for delete_organization_insight_monitored_media_server_0

        Delete a monitored media server from this organization
        """
        pass

    def test_delete_organization_policy_object_0(self) -> None:
        """Test case for delete_organization_policy_object_0

        Deletes a Policy Object.
        """
        pass

    def test_delete_organization_policy_objects_group_0(self) -> None:
        """Test case for delete_organization_policy_objects_group_0

        Deletes a Policy Object Group.
        """
        pass

    def test_delete_organization_saml_idp_0(self) -> None:
        """Test case for delete_organization_saml_idp_0

        Remove a SAML IdP in your organization.
        """
        pass

    def test_delete_organization_saml_role_0(self) -> None:
        """Test case for delete_organization_saml_role_0

        Remove a SAML role
        """
        pass

    def test_delete_organization_user_0(self) -> None:
        """Test case for delete_organization_user_0

        Delete a user and all of its authentication methods.
        """
        pass

    def test_get_device_0(self) -> None:
        """Test case for get_device_0

        Return a single device
        """
        pass

    def test_get_device_appliance_uplinks_settings_0(self) -> None:
        """Test case for get_device_appliance_uplinks_settings_0

        Return the uplink settings for an MX appliance
        """
        pass

    def test_get_device_camera_custom_analytics_0(self) -> None:
        """Test case for get_device_camera_custom_analytics_0

        Return custom analytics settings for a camera
        """
        pass

    def test_get_device_camera_quality_and_retention_0(self) -> None:
        """Test case for get_device_camera_quality_and_retention_0

        Returns quality and retention settings for the given camera
        """
        pass

    def test_get_device_camera_sense_0(self) -> None:
        """Test case for get_device_camera_sense_0

        Returns sense settings for a given camera
        """
        pass

    def test_get_device_camera_sense_object_detection_models_0(self) -> None:
        """Test case for get_device_camera_sense_object_detection_models_0

        Returns the MV Sense object detection model list for the given camera
        """
        pass

    def test_get_device_camera_video_link_0(self) -> None:
        """Test case for get_device_camera_video_link_0

        Returns video link to the specified camera
        """
        pass

    def test_get_device_camera_video_settings_0(self) -> None:
        """Test case for get_device_camera_video_settings_0

        Returns video settings for the given camera
        """
        pass

    def test_get_device_camera_wireless_profiles_0(self) -> None:
        """Test case for get_device_camera_wireless_profiles_0

        Returns wireless profile assigned to the given camera
        """
        pass

    def test_get_device_cellular_gateway_lan_0(self) -> None:
        """Test case for get_device_cellular_gateway_lan_0

        Show the LAN Settings of a MG
        """
        pass

    def test_get_device_cellular_gateway_port_forwarding_rules_0(self) -> None:
        """Test case for get_device_cellular_gateway_port_forwarding_rules_0

        Returns the port forwarding rules for a single MG.
        """
        pass

    def test_get_device_cellular_sims_0(self) -> None:
        """Test case for get_device_cellular_sims_0

        Return the SIM and APN configurations for a cellular device.
        """
        pass

    def test_get_device_management_interface_0(self) -> None:
        """Test case for get_device_management_interface_0

        Return the management interface settings for a device
        """
        pass

    def test_get_device_sensor_relationships_0(self) -> None:
        """Test case for get_device_sensor_relationships_0

        List the sensor roles for a given sensor or camera device.
        """
        pass

    def test_get_device_switch_port_0(self) -> None:
        """Test case for get_device_switch_port_0

        Return a switch port
        """
        pass

    def test_get_device_switch_ports_0(self) -> None:
        """Test case for get_device_switch_ports_0

        List the switch ports for a switch
        """
        pass

    def test_get_device_switch_routing_interface_0(self) -> None:
        """Test case for get_device_switch_routing_interface_0

        Return a layer 3 interface for a switch
        """
        pass

    def test_get_device_switch_routing_interface_dhcp_0(self) -> None:
        """Test case for get_device_switch_routing_interface_dhcp_0

        Return a layer 3 interface DHCP configuration for a switch
        """
        pass

    def test_get_device_switch_routing_interfaces_0(self) -> None:
        """Test case for get_device_switch_routing_interfaces_0

        List layer 3 interfaces for a switch
        """
        pass

    def test_get_device_switch_routing_static_route_0(self) -> None:
        """Test case for get_device_switch_routing_static_route_0

        Return a layer 3 static route for a switch
        """
        pass

    def test_get_device_switch_routing_static_routes_0(self) -> None:
        """Test case for get_device_switch_routing_static_routes_0

        List layer 3 static routes for a switch
        """
        pass

    def test_get_device_switch_warm_spare_0(self) -> None:
        """Test case for get_device_switch_warm_spare_0

        Return warm spare configuration for a switch
        """
        pass

    def test_get_device_wireless_bluetooth_settings_0(self) -> None:
        """Test case for get_device_wireless_bluetooth_settings_0

        Return the bluetooth settings for a wireless device
        """
        pass

    def test_get_device_wireless_radio_settings_0(self) -> None:
        """Test case for get_device_wireless_radio_settings_0

        Return the radio settings of a device
        """
        pass

    def test_get_network_0(self) -> None:
        """Test case for get_network_0

        Return a network
        """
        pass

    def test_get_network_alerts_settings_0(self) -> None:
        """Test case for get_network_alerts_settings_0

        Return the alert configuration for this network
        """
        pass

    def test_get_network_appliance_connectivity_monitoring_destinations_0(self) -> None:
        """Test case for get_network_appliance_connectivity_monitoring_destinations_0

        Return the connectivity testing destinations for an MX network
        """
        pass

    def test_get_network_appliance_content_filtering_0(self) -> None:
        """Test case for get_network_appliance_content_filtering_0

        Return the content filtering settings for an MX network
        """
        pass

    def test_get_network_appliance_content_filtering_categories_0(self) -> None:
        """Test case for get_network_appliance_content_filtering_categories_0

        List all available content filtering categories for an MX network
        """
        pass

    def test_get_network_appliance_firewall_cellular_firewall_rules_0(self) -> None:
        """Test case for get_network_appliance_firewall_cellular_firewall_rules_0

        Return the cellular firewall rules for an MX network
        """
        pass

    def test_get_network_appliance_firewall_firewalled_service_0(self) -> None:
        """Test case for get_network_appliance_firewall_firewalled_service_0

        Return the accessibility settings of the given service ('ICMP', 'web', or 'SNMP')
        """
        pass

    def test_get_network_appliance_firewall_firewalled_services_0(self) -> None:
        """Test case for get_network_appliance_firewall_firewalled_services_0

        List the appliance services and their accessibility rules
        """
        pass

    def test_get_network_appliance_firewall_inbound_cellular_firewall_rules_0(self) -> None:
        """Test case for get_network_appliance_firewall_inbound_cellular_firewall_rules_0

        Return the inbound cellular firewall rules for an MX network
        """
        pass

    def test_get_network_appliance_firewall_inbound_firewall_rules_0(self) -> None:
        """Test case for get_network_appliance_firewall_inbound_firewall_rules_0

        Return the inbound firewall rules for an MX network
        """
        pass

    def test_get_network_appliance_firewall_l3_firewall_rules_0(self) -> None:
        """Test case for get_network_appliance_firewall_l3_firewall_rules_0

        Return the L3 firewall rules for an MX network
        """
        pass

    def test_get_network_appliance_firewall_l7_firewall_rules_0(self) -> None:
        """Test case for get_network_appliance_firewall_l7_firewall_rules_0

        List the MX L7 firewall rules for an MX network
        """
        pass

    def test_get_network_appliance_firewall_l7_firewall_rules_application_categories_0(self) -> None:
        """Test case for get_network_appliance_firewall_l7_firewall_rules_application_categories_0

        Return the L7 firewall application categories and their associated applications for an MX network
        """
        pass

    def test_get_network_appliance_firewall_one_to_many_nat_rules_0(self) -> None:
        """Test case for get_network_appliance_firewall_one_to_many_nat_rules_0

        Return the 1:Many NAT mapping rules for an MX network
        """
        pass

    def test_get_network_appliance_firewall_one_to_one_nat_rules_0(self) -> None:
        """Test case for get_network_appliance_firewall_one_to_one_nat_rules_0

        Return the 1:1 NAT mapping rules for an MX network
        """
        pass

    def test_get_network_appliance_firewall_port_forwarding_rules_0(self) -> None:
        """Test case for get_network_appliance_firewall_port_forwarding_rules_0

        Return the port forwarding rules for an MX network
        """
        pass

    def test_get_network_appliance_firewall_settings_0(self) -> None:
        """Test case for get_network_appliance_firewall_settings_0

        Return the firewall settings for this network
        """
        pass

    def test_get_network_appliance_port_0(self) -> None:
        """Test case for get_network_appliance_port_0

        Return per-port VLAN settings for a single MX port.
        """
        pass

    def test_get_network_appliance_ports_0(self) -> None:
        """Test case for get_network_appliance_ports_0

        List per-port VLAN settings for all ports of a MX.
        """
        pass

    def test_get_network_appliance_prefixes_delegated_static_0(self) -> None:
        """Test case for get_network_appliance_prefixes_delegated_static_0

        Return a static delegated prefix from a network
        """
        pass

    def test_get_network_appliance_prefixes_delegated_statics_0(self) -> None:
        """Test case for get_network_appliance_prefixes_delegated_statics_0

        List static delegated prefixes for a network
        """
        pass

    def test_get_network_appliance_security_intrusion_0(self) -> None:
        """Test case for get_network_appliance_security_intrusion_0

        Returns all supported intrusion settings for an MX network
        """
        pass

    def test_get_network_appliance_security_malware_0(self) -> None:
        """Test case for get_network_appliance_security_malware_0

        Returns all supported malware settings for an MX network
        """
        pass

    def test_get_network_appliance_settings_0(self) -> None:
        """Test case for get_network_appliance_settings_0

        Return the appliance settings for a network
        """
        pass

    def test_get_network_appliance_single_lan_0(self) -> None:
        """Test case for get_network_appliance_single_lan_0

        Return single LAN configuration
        """
        pass

    def test_get_network_appliance_ssid_0(self) -> None:
        """Test case for get_network_appliance_ssid_0

        Return a single MX SSID
        """
        pass

    def test_get_network_appliance_ssids_0(self) -> None:
        """Test case for get_network_appliance_ssids_0

        List the MX SSIDs in a network
        """
        pass

    def test_get_network_appliance_static_route_0(self) -> None:
        """Test case for get_network_appliance_static_route_0

        Return a static route for an MX or teleworker network
        """
        pass

    def test_get_network_appliance_static_routes_0(self) -> None:
        """Test case for get_network_appliance_static_routes_0

        List the static routes for an MX or teleworker network
        """
        pass

    def test_get_network_appliance_traffic_shaping_0(self) -> None:
        """Test case for get_network_appliance_traffic_shaping_0

        Display the traffic shaping settings for an MX network
        """
        pass

    def test_get_network_appliance_traffic_shaping_custom_performance_class_0(self) -> None:
        """Test case for get_network_appliance_traffic_shaping_custom_performance_class_0

        Return a custom performance class for an MX network
        """
        pass

    def test_get_network_appliance_traffic_shaping_custom_performance_classes_0(self) -> None:
        """Test case for get_network_appliance_traffic_shaping_custom_performance_classes_0

        List all custom performance classes for an MX network
        """
        pass

    def test_get_network_appliance_traffic_shaping_rules_0(self) -> None:
        """Test case for get_network_appliance_traffic_shaping_rules_0

        Display the traffic shaping settings rules for an MX network
        """
        pass

    def test_get_network_appliance_traffic_shaping_uplink_bandwidth_0(self) -> None:
        """Test case for get_network_appliance_traffic_shaping_uplink_bandwidth_0

        Returns the uplink bandwidth limits for your MX network
        """
        pass

    def test_get_network_appliance_traffic_shaping_uplink_selection_0(self) -> None:
        """Test case for get_network_appliance_traffic_shaping_uplink_selection_0

        Show uplink selection settings for an MX network
        """
        pass

    def test_get_network_appliance_vlan_0(self) -> None:
        """Test case for get_network_appliance_vlan_0

        Return a VLAN
        """
        pass

    def test_get_network_appliance_vlans_0(self) -> None:
        """Test case for get_network_appliance_vlans_0

        List the VLANs for an MX network
        """
        pass

    def test_get_network_appliance_vlans_settings_0(self) -> None:
        """Test case for get_network_appliance_vlans_settings_0

        Returns the enabled status of VLANs for the network
        """
        pass

    def test_get_network_appliance_vpn_bgp_0(self) -> None:
        """Test case for get_network_appliance_vpn_bgp_0

        Return a Hub BGP Configuration
        """
        pass

    def test_get_network_appliance_vpn_site_to_site_vpn_0(self) -> None:
        """Test case for get_network_appliance_vpn_site_to_site_vpn_0

        Return the site-to-site VPN settings of a network
        """
        pass

    def test_get_network_appliance_warm_spare_0(self) -> None:
        """Test case for get_network_appliance_warm_spare_0

        Return MX warm spare settings
        """
        pass

    def test_get_network_camera_quality_retention_profile_0(self) -> None:
        """Test case for get_network_camera_quality_retention_profile_0

        Retrieve a single quality retention profile
        """
        pass

    def test_get_network_camera_quality_retention_profiles_0(self) -> None:
        """Test case for get_network_camera_quality_retention_profiles_0

        List the quality retention profiles for this network
        """
        pass

    def test_get_network_camera_schedules_0(self) -> None:
        """Test case for get_network_camera_schedules_0

        Returns a list of all camera recording schedules.
        """
        pass

    def test_get_network_camera_wireless_profile_0(self) -> None:
        """Test case for get_network_camera_wireless_profile_0

        Retrieve a single camera wireless profile.
        """
        pass

    def test_get_network_camera_wireless_profiles_0(self) -> None:
        """Test case for get_network_camera_wireless_profiles_0

        List the camera wireless profiles for this network.
        """
        pass

    def test_get_network_cellular_gateway_connectivity_monitoring_destinations_0(self) -> None:
        """Test case for get_network_cellular_gateway_connectivity_monitoring_destinations_0

        Return the connectivity testing destinations for an MG network
        """
        pass

    def test_get_network_cellular_gateway_dhcp_0(self) -> None:
        """Test case for get_network_cellular_gateway_dhcp_0

        List common DHCP settings of MGs
        """
        pass

    def test_get_network_cellular_gateway_subnet_pool_0(self) -> None:
        """Test case for get_network_cellular_gateway_subnet_pool_0

        Return the subnet pool and mask configured for MGs in the network.
        """
        pass

    def test_get_network_cellular_gateway_uplink_0(self) -> None:
        """Test case for get_network_cellular_gateway_uplink_0

        Returns the uplink settings for your MG network.
        """
        pass

    def test_get_network_client_policy_0(self) -> None:
        """Test case for get_network_client_policy_0

        Return the policy assigned to a client on the network
        """
        pass

    def test_get_network_client_splash_authorization_status_0(self) -> None:
        """Test case for get_network_client_splash_authorization_status_0

        Return the splash authorization for a client, for each SSID they've associated with through splash
        """
        pass

    def test_get_network_devices_0(self) -> None:
        """Test case for get_network_devices_0

        List the devices in a network
        """
        pass

    def test_get_network_firmware_upgrades_0(self) -> None:
        """Test case for get_network_firmware_upgrades_0

        Get firmware upgrade information for a network
        """
        pass

    def test_get_network_firmware_upgrades_staged_events_0(self) -> None:
        """Test case for get_network_firmware_upgrades_staged_events_0

        Get the Staged Upgrade Event from a network
        """
        pass

    def test_get_network_firmware_upgrades_staged_group_0(self) -> None:
        """Test case for get_network_firmware_upgrades_staged_group_0

        Get a Staged Upgrade Group from a network
        """
        pass

    def test_get_network_firmware_upgrades_staged_groups_0(self) -> None:
        """Test case for get_network_firmware_upgrades_staged_groups_0

        List of Staged Upgrade Groups in a network
        """
        pass

    def test_get_network_firmware_upgrades_staged_stages_0(self) -> None:
        """Test case for get_network_firmware_upgrades_staged_stages_0

        Order of Staged Upgrade Groups in a network
        """
        pass

    def test_get_network_floor_plan_0(self) -> None:
        """Test case for get_network_floor_plan_0

        Find a floor plan by ID
        """
        pass

    def test_get_network_floor_plans_0(self) -> None:
        """Test case for get_network_floor_plans_0

        List the floor plans that belong to your network
        """
        pass

    def test_get_network_group_policies_0(self) -> None:
        """Test case for get_network_group_policies_0

        List the group policies in a network
        """
        pass

    def test_get_network_group_policy_0(self) -> None:
        """Test case for get_network_group_policy_0

        Display a group policy
        """
        pass

    def test_get_network_health_alerts_0(self) -> None:
        """Test case for get_network_health_alerts_0

        Return all global alerts on this network
        """
        pass

    def test_get_network_meraki_auth_user_0(self) -> None:
        """Test case for get_network_meraki_auth_user_0

        Return the Meraki Auth splash guest, RADIUS, or client VPN user
        """
        pass

    def test_get_network_meraki_auth_users_0(self) -> None:
        """Test case for get_network_meraki_auth_users_0

        List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
        """
        pass

    def test_get_network_mqtt_broker_0(self) -> None:
        """Test case for get_network_mqtt_broker_0

        Return an MQTT broker
        """
        pass

    def test_get_network_mqtt_brokers_0(self) -> None:
        """Test case for get_network_mqtt_brokers_0

        List the MQTT brokers for this network
        """
        pass

    def test_get_network_netflow_0(self) -> None:
        """Test case for get_network_netflow_0

        Return the NetFlow traffic reporting settings for a network
        """
        pass

    def test_get_network_pii_pii_keys_0(self) -> None:
        """Test case for get_network_pii_pii_keys_0

        List the keys required to access Personally Identifiable Information (PII) for a given identifier
        """
        pass

    def test_get_network_pii_request_0(self) -> None:
        """Test case for get_network_pii_request_0

        Return a PII request
        """
        pass

    def test_get_network_pii_requests_0(self) -> None:
        """Test case for get_network_pii_requests_0

        List the PII requests for this network or organization
        """
        pass

    def test_get_network_pii_sm_devices_for_key_0(self) -> None:
        """Test case for get_network_pii_sm_devices_for_key_0

        Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier
        """
        pass

    def test_get_network_pii_sm_owners_for_key_0(self) -> None:
        """Test case for get_network_pii_sm_owners_for_key_0

        Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier
        """
        pass

    def test_get_network_policies_by_client_0(self) -> None:
        """Test case for get_network_policies_by_client_0

        Get policies for all clients with policies
        """
        pass

    def test_get_network_sensor_alerts_profile_0(self) -> None:
        """Test case for get_network_sensor_alerts_profile_0

        Show details of a sensor alert profile for a network.
        """
        pass

    def test_get_network_sensor_alerts_profiles_0(self) -> None:
        """Test case for get_network_sensor_alerts_profiles_0

        Lists all sensor alert profiles for a network.
        """
        pass

    def test_get_network_sensor_relationships_0(self) -> None:
        """Test case for get_network_sensor_relationships_0

        List the sensor roles for devices in a given network
        """
        pass

    def test_get_network_settings_0(self) -> None:
        """Test case for get_network_settings_0

        Return the settings for a network
        """
        pass

    def test_get_network_sm_bypass_activation_lock_attempt_0(self) -> None:
        """Test case for get_network_sm_bypass_activation_lock_attempt_0

        Bypass activation lock attempt status
        """
        pass

    def test_get_network_sm_device_certs_0(self) -> None:
        """Test case for get_network_sm_device_certs_0

        List the certs on a device
        """
        pass

    def test_get_network_sm_device_device_profiles_0(self) -> None:
        """Test case for get_network_sm_device_device_profiles_0

        Get the installed profiles associated with a device
        """
        pass

    def test_get_network_sm_device_network_adapters_0(self) -> None:
        """Test case for get_network_sm_device_network_adapters_0

        List the network adapters of a device
        """
        pass

    def test_get_network_sm_device_restrictions_0(self) -> None:
        """Test case for get_network_sm_device_restrictions_0

        List the restrictions on a device
        """
        pass

    def test_get_network_sm_device_security_centers_0(self) -> None:
        """Test case for get_network_sm_device_security_centers_0

        List the security centers on a device
        """
        pass

    def test_get_network_sm_device_softwares_0(self) -> None:
        """Test case for get_network_sm_device_softwares_0

        Get a list of softwares associated with a device
        """
        pass

    def test_get_network_sm_device_wlan_lists_0(self) -> None:
        """Test case for get_network_sm_device_wlan_lists_0

        List the saved SSID names on a device
        """
        pass

    def test_get_network_sm_devices_0(self) -> None:
        """Test case for get_network_sm_devices_0

        List the devices enrolled in an SM network with various specified fields and filters
        """
        pass

    def test_get_network_sm_profiles_0(self) -> None:
        """Test case for get_network_sm_profiles_0

        List all profiles in a network
        """
        pass

    def test_get_network_sm_target_group_0(self) -> None:
        """Test case for get_network_sm_target_group_0

        Return a target group
        """
        pass

    def test_get_network_sm_target_groups_0(self) -> None:
        """Test case for get_network_sm_target_groups_0

        List the target groups in this network
        """
        pass

    def test_get_network_sm_trusted_access_configs_0(self) -> None:
        """Test case for get_network_sm_trusted_access_configs_0

        List Trusted Access Configs
        """
        pass

    def test_get_network_sm_user_access_devices_0(self) -> None:
        """Test case for get_network_sm_user_access_devices_0

        List User Access Devices and its Trusted Access Connections
        """
        pass

    def test_get_network_sm_user_device_profiles_0(self) -> None:
        """Test case for get_network_sm_user_device_profiles_0

        Get the profiles associated with a user
        """
        pass

    def test_get_network_sm_user_softwares_0(self) -> None:
        """Test case for get_network_sm_user_softwares_0

        Get a list of softwares associated with a user
        """
        pass

    def test_get_network_sm_users_0(self) -> None:
        """Test case for get_network_sm_users_0

        List the owners in an SM network with various specified fields and filters
        """
        pass

    def test_get_network_snmp_0(self) -> None:
        """Test case for get_network_snmp_0

        Return the SNMP settings for a network
        """
        pass

    def test_get_network_switch_access_control_lists_0(self) -> None:
        """Test case for get_network_switch_access_control_lists_0

        Return the access control lists for a MS network
        """
        pass

    def test_get_network_switch_access_policies_0(self) -> None:
        """Test case for get_network_switch_access_policies_0

        List the access policies for a switch network
        """
        pass

    def test_get_network_switch_access_policy_0(self) -> None:
        """Test case for get_network_switch_access_policy_0

        Return a specific access policy for a switch network
        """
        pass

    def test_get_network_switch_alternate_management_interface_0(self) -> None:
        """Test case for get_network_switch_alternate_management_interface_0

        Return the switch alternate management interface for the network
        """
        pass

    def test_get_network_switch_dhcp_server_policy_0(self) -> None:
        """Test case for get_network_switch_dhcp_server_policy_0

        Return the DHCP server settings
        """
        pass

    def test_get_network_switch_dhcp_server_policy_arp_inspection_trusted_servers_0(self) -> None:
        """Test case for get_network_switch_dhcp_server_policy_arp_inspection_trusted_servers_0

        Return the list of servers trusted by Dynamic ARP Inspection on this network
        """
        pass

    def test_get_network_switch_dhcp_server_policy_arp_inspection_warnings_by_device_0(self) -> None:
        """Test case for get_network_switch_dhcp_server_policy_arp_inspection_warnings_by_device_0

        Return the devices that have a Dynamic ARP Inspection warning and their warnings
        """
        pass

    def test_get_network_switch_dhcp_v4_servers_seen_0(self) -> None:
        """Test case for get_network_switch_dhcp_v4_servers_seen_0

        Return the network's DHCPv4 servers seen within the selected timeframe (default 1 day)
        """
        pass

    def test_get_network_switch_dscp_to_cos_mappings_0(self) -> None:
        """Test case for get_network_switch_dscp_to_cos_mappings_0

        Return the DSCP to CoS mappings
        """
        pass

    def test_get_network_switch_link_aggregations_0(self) -> None:
        """Test case for get_network_switch_link_aggregations_0

        List link aggregation groups
        """
        pass

    def test_get_network_switch_mtu_0(self) -> None:
        """Test case for get_network_switch_mtu_0

        Return the MTU configuration
        """
        pass

    def test_get_network_switch_port_schedules_0(self) -> None:
        """Test case for get_network_switch_port_schedules_0

        List switch port schedules
        """
        pass

    def test_get_network_switch_qos_rule_0(self) -> None:
        """Test case for get_network_switch_qos_rule_0

        Return a quality of service rule
        """
        pass

    def test_get_network_switch_qos_rules_0(self) -> None:
        """Test case for get_network_switch_qos_rules_0

        List quality of service rules
        """
        pass

    def test_get_network_switch_qos_rules_order_0(self) -> None:
        """Test case for get_network_switch_qos_rules_order_0

        Return the quality of service rule IDs by order in which they will be processed by the switch
        """
        pass

    def test_get_network_switch_routing_multicast_0(self) -> None:
        """Test case for get_network_switch_routing_multicast_0

        Return multicast settings for a network
        """
        pass

    def test_get_network_switch_routing_multicast_rendezvous_point_0(self) -> None:
        """Test case for get_network_switch_routing_multicast_rendezvous_point_0

        Return a multicast rendezvous point
        """
        pass

    def test_get_network_switch_routing_multicast_rendezvous_points_0(self) -> None:
        """Test case for get_network_switch_routing_multicast_rendezvous_points_0

        List multicast rendezvous points
        """
        pass

    def test_get_network_switch_routing_ospf_0(self) -> None:
        """Test case for get_network_switch_routing_ospf_0

        Return layer 3 OSPF routing configuration
        """
        pass

    def test_get_network_switch_settings_0(self) -> None:
        """Test case for get_network_switch_settings_0

        Returns the switch network settings
        """
        pass

    def test_get_network_switch_stack_0(self) -> None:
        """Test case for get_network_switch_stack_0

        Show a switch stack
        """
        pass

    def test_get_network_switch_stack_routing_interface_0(self) -> None:
        """Test case for get_network_switch_stack_routing_interface_0

        Return a layer 3 interface from a switch stack
        """
        pass

    def test_get_network_switch_stack_routing_interface_dhcp_0(self) -> None:
        """Test case for get_network_switch_stack_routing_interface_dhcp_0

        Return a layer 3 interface DHCP configuration for a switch stack
        """
        pass

    def test_get_network_switch_stack_routing_interfaces_0(self) -> None:
        """Test case for get_network_switch_stack_routing_interfaces_0

        List layer 3 interfaces for a switch stack
        """
        pass

    def test_get_network_switch_stack_routing_static_route_0(self) -> None:
        """Test case for get_network_switch_stack_routing_static_route_0

        Return a layer 3 static route for a switch stack
        """
        pass

    def test_get_network_switch_stack_routing_static_routes_0(self) -> None:
        """Test case for get_network_switch_stack_routing_static_routes_0

        List layer 3 static routes for a switch stack
        """
        pass

    def test_get_network_switch_stacks_0(self) -> None:
        """Test case for get_network_switch_stacks_0

        List the switch stacks in a network
        """
        pass

    def test_get_network_switch_storm_control_0(self) -> None:
        """Test case for get_network_switch_storm_control_0

        Return the storm control configuration for a switch network
        """
        pass

    def test_get_network_switch_stp_0(self) -> None:
        """Test case for get_network_switch_stp_0

        Returns STP settings
        """
        pass

    def test_get_network_syslog_servers_0(self) -> None:
        """Test case for get_network_syslog_servers_0

        List the syslog servers for a network
        """
        pass

    def test_get_network_traffic_analysis_0(self) -> None:
        """Test case for get_network_traffic_analysis_0

        Return the traffic analysis settings for a network
        """
        pass

    def test_get_network_traffic_shaping_application_categories_0(self) -> None:
        """Test case for get_network_traffic_shaping_application_categories_0

        Returns the application categories for traffic shaping rules.
        """
        pass

    def test_get_network_traffic_shaping_dscp_tagging_options_0(self) -> None:
        """Test case for get_network_traffic_shaping_dscp_tagging_options_0

        Returns the available DSCP tagging options for your traffic shaping rules.
        """
        pass

    def test_get_network_webhooks_http_server_0(self) -> None:
        """Test case for get_network_webhooks_http_server_0

        Return an HTTP server for a network
        """
        pass

    def test_get_network_webhooks_http_servers_0(self) -> None:
        """Test case for get_network_webhooks_http_servers_0

        List the HTTP servers for a network
        """
        pass

    def test_get_network_webhooks_payload_template_0(self) -> None:
        """Test case for get_network_webhooks_payload_template_0

        Get the webhook payload template for a network
        """
        pass

    def test_get_network_webhooks_payload_templates_0(self) -> None:
        """Test case for get_network_webhooks_payload_templates_0

        List the webhook payload templates for a network
        """
        pass

    def test_get_network_webhooks_webhook_test_0(self) -> None:
        """Test case for get_network_webhooks_webhook_test_0

        Return the status of a webhook test for a network
        """
        pass

    def test_get_network_wireless_alternate_management_interface_0(self) -> None:
        """Test case for get_network_wireless_alternate_management_interface_0

        Return alternate management interface and devices with IP assigned
        """
        pass

    def test_get_network_wireless_billing_0(self) -> None:
        """Test case for get_network_wireless_billing_0

        Return the billing settings of this network
        """
        pass

    def test_get_network_wireless_bluetooth_settings_0(self) -> None:
        """Test case for get_network_wireless_bluetooth_settings_0

        Return the Bluetooth settings for a network. <a href=\"https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\">Bluetooth settings</a> must be enabled on the network.
        """
        pass

    def test_get_network_wireless_rf_profile_0(self) -> None:
        """Test case for get_network_wireless_rf_profile_0

        Return a RF profile
        """
        pass

    def test_get_network_wireless_rf_profiles_0(self) -> None:
        """Test case for get_network_wireless_rf_profiles_0

        List the non-basic RF profiles for this network
        """
        pass

    def test_get_network_wireless_settings_0(self) -> None:
        """Test case for get_network_wireless_settings_0

        Return the wireless settings for a network
        """
        pass

    def test_get_network_wireless_ssid_0(self) -> None:
        """Test case for get_network_wireless_ssid_0

        Return a single MR SSID
        """
        pass

    def test_get_network_wireless_ssid_bonjour_forwarding_0(self) -> None:
        """Test case for get_network_wireless_ssid_bonjour_forwarding_0

        List the Bonjour forwarding setting and rules for the SSID
        """
        pass

    def test_get_network_wireless_ssid_device_type_group_policies_0(self) -> None:
        """Test case for get_network_wireless_ssid_device_type_group_policies_0

        List the device type group policies for the SSID
        """
        pass

    def test_get_network_wireless_ssid_eap_override_0(self) -> None:
        """Test case for get_network_wireless_ssid_eap_override_0

        Return the EAP overridden parameters for an SSID
        """
        pass

    def test_get_network_wireless_ssid_firewall_l3_firewall_rules_0(self) -> None:
        """Test case for get_network_wireless_ssid_firewall_l3_firewall_rules_0

        Return the L3 firewall rules for an SSID on an MR network
        """
        pass

    def test_get_network_wireless_ssid_firewall_l7_firewall_rules_0(self) -> None:
        """Test case for get_network_wireless_ssid_firewall_l7_firewall_rules_0

        Return the L7 firewall rules for an SSID on an MR network
        """
        pass

    def test_get_network_wireless_ssid_hotspot20_0(self) -> None:
        """Test case for get_network_wireless_ssid_hotspot20_0

        Return the Hotspot 2.0 settings for an SSID
        """
        pass

    def test_get_network_wireless_ssid_identity_psk_0(self) -> None:
        """Test case for get_network_wireless_ssid_identity_psk_0

        Return an Identity PSK
        """
        pass

    def test_get_network_wireless_ssid_identity_psks_0(self) -> None:
        """Test case for get_network_wireless_ssid_identity_psks_0

        List all Identity PSKs in a wireless network
        """
        pass

    def test_get_network_wireless_ssid_schedules_0(self) -> None:
        """Test case for get_network_wireless_ssid_schedules_0

        List the outage schedule for the SSID
        """
        pass

    def test_get_network_wireless_ssid_splash_settings_0(self) -> None:
        """Test case for get_network_wireless_ssid_splash_settings_0

        Display the splash page settings for the given SSID
        """
        pass

    def test_get_network_wireless_ssid_traffic_shaping_rules_0(self) -> None:
        """Test case for get_network_wireless_ssid_traffic_shaping_rules_0

        Display the traffic shaping settings for a SSID on an MR network
        """
        pass

    def test_get_network_wireless_ssid_vpn_0(self) -> None:
        """Test case for get_network_wireless_ssid_vpn_0

        List the VPN settings for the SSID.
        """
        pass

    def test_get_network_wireless_ssids_0(self) -> None:
        """Test case for get_network_wireless_ssids_0

        List the MR SSIDs in a network
        """
        pass

    def test_get_organization_0(self) -> None:
        """Test case for get_organization_0

        Return an organization
        """
        pass

    def test_get_organization_action_batch_0(self) -> None:
        """Test case for get_organization_action_batch_0

        Return an action batch
        """
        pass

    def test_get_organization_action_batches_0(self) -> None:
        """Test case for get_organization_action_batches_0

        Return the list of action batches in the organization
        """
        pass

    def test_get_organization_adaptive_policy_acl_0(self) -> None:
        """Test case for get_organization_adaptive_policy_acl_0

        Returns the adaptive policy ACL information
        """
        pass

    def test_get_organization_adaptive_policy_acls_0(self) -> None:
        """Test case for get_organization_adaptive_policy_acls_0

        List adaptive policy ACLs in a organization
        """
        pass

    def test_get_organization_adaptive_policy_group_0(self) -> None:
        """Test case for get_organization_adaptive_policy_group_0

        Returns an adaptive policy group
        """
        pass

    def test_get_organization_adaptive_policy_groups_0(self) -> None:
        """Test case for get_organization_adaptive_policy_groups_0

        List adaptive policy groups in a organization
        """
        pass

    def test_get_organization_adaptive_policy_policies_0(self) -> None:
        """Test case for get_organization_adaptive_policy_policies_0

        List adaptive policies in an organization
        """
        pass

    def test_get_organization_adaptive_policy_policy_0(self) -> None:
        """Test case for get_organization_adaptive_policy_policy_0

        Return an adaptive policy
        """
        pass

    def test_get_organization_adaptive_policy_settings_0(self) -> None:
        """Test case for get_organization_adaptive_policy_settings_0

        Returns global adaptive policy settings in an organization
        """
        pass

    def test_get_organization_admins_0(self) -> None:
        """Test case for get_organization_admins_0

        List the dashboard administrators in this organization
        """
        pass

    def test_get_organization_alerts_profiles_0(self) -> None:
        """Test case for get_organization_alerts_profiles_0

        List all organization-wide alert configurations
        """
        pass

    def test_get_organization_appliance_security_intrusion_0(self) -> None:
        """Test case for get_organization_appliance_security_intrusion_0

        Returns all supported intrusion settings for an organization
        """
        pass

    def test_get_organization_appliance_vpn_third_party_vpn_peers_0(self) -> None:
        """Test case for get_organization_appliance_vpn_third_party_vpn_peers_0

        Return the third party VPN peers for an organization
        """
        pass

    def test_get_organization_appliance_vpn_vpn_firewall_rules_0(self) -> None:
        """Test case for get_organization_appliance_vpn_vpn_firewall_rules_0

        Return the firewall rules for an organization's site-to-site VPN
        """
        pass

    def test_get_organization_branding_policies_0(self) -> None:
        """Test case for get_organization_branding_policies_0

        List the branding policies of an organization
        """
        pass

    def test_get_organization_branding_policies_priorities_0(self) -> None:
        """Test case for get_organization_branding_policies_priorities_0

        Return the branding policy IDs of an organization in priority order
        """
        pass

    def test_get_organization_branding_policy_0(self) -> None:
        """Test case for get_organization_branding_policy_0

        Return a branding policy
        """
        pass

    def test_get_organization_camera_custom_analytics_artifact_0(self) -> None:
        """Test case for get_organization_camera_custom_analytics_artifact_0

        Get Custom Analytics Artifact
        """
        pass

    def test_get_organization_camera_custom_analytics_artifacts_0(self) -> None:
        """Test case for get_organization_camera_custom_analytics_artifacts_0

        List Custom Analytics Artifacts
        """
        pass

    def test_get_organization_camera_onboarding_statuses_0(self) -> None:
        """Test case for get_organization_camera_onboarding_statuses_0

        Fetch onboarding status of cameras
        """
        pass

    def test_get_organization_clients_search_0(self) -> None:
        """Test case for get_organization_clients_search_0

        Return the client details in an organization
        """
        pass

    def test_get_organization_config_template_0(self) -> None:
        """Test case for get_organization_config_template_0

        Return a single configuration template
        """
        pass

    def test_get_organization_config_template_switch_profile_port_0(self) -> None:
        """Test case for get_organization_config_template_switch_profile_port_0

        Return a switch profile port
        """
        pass

    def test_get_organization_config_template_switch_profile_ports_0(self) -> None:
        """Test case for get_organization_config_template_switch_profile_ports_0

        Return all the ports of a switch profile
        """
        pass

    def test_get_organization_config_template_switch_profiles_0(self) -> None:
        """Test case for get_organization_config_template_switch_profiles_0

        List the switch profiles for your switch template configuration
        """
        pass

    def test_get_organization_config_templates_0(self) -> None:
        """Test case for get_organization_config_templates_0

        List the configuration templates for this organization
        """
        pass

    def test_get_organization_devices_0(self) -> None:
        """Test case for get_organization_devices_0

        List the devices in an organization
        """
        pass

    def test_get_organization_early_access_features_0(self) -> None:
        """Test case for get_organization_early_access_features_0

        List the available early access features for organization
        """
        pass

    def test_get_organization_early_access_features_opt_in_0(self) -> None:
        """Test case for get_organization_early_access_features_opt_in_0

        Show an early access feature opt-in for an organization
        """
        pass

    def test_get_organization_early_access_features_opt_ins_0(self) -> None:
        """Test case for get_organization_early_access_features_opt_ins_0

        List the early access feature opt-ins for an organization
        """
        pass

    def test_get_organization_firmware_upgrades_0(self) -> None:
        """Test case for get_organization_firmware_upgrades_0

        Get firmware upgrade information for an organization
        """
        pass

    def test_get_organization_firmware_upgrades_by_device_0(self) -> None:
        """Test case for get_organization_firmware_upgrades_by_device_0

        Get firmware upgrade status for the filtered devices
        """
        pass

    def test_get_organization_insight_applications_0(self) -> None:
        """Test case for get_organization_insight_applications_0

        List all Insight tracked applications
        """
        pass

    def test_get_organization_insight_monitored_media_server_0(self) -> None:
        """Test case for get_organization_insight_monitored_media_server_0

        Return a monitored media server for this organization
        """
        pass

    def test_get_organization_insight_monitored_media_servers_0(self) -> None:
        """Test case for get_organization_insight_monitored_media_servers_0

        List the monitored media servers for this organization
        """
        pass

    def test_get_organization_inventory_device_0(self) -> None:
        """Test case for get_organization_inventory_device_0

        Return a single device from the inventory of an organization
        """
        pass

    def test_get_organization_inventory_devices_0(self) -> None:
        """Test case for get_organization_inventory_devices_0

        Return the device inventory for an organization
        """
        pass

    def test_get_organization_inventory_onboarding_cloud_monitoring_imports_0(self) -> None:
        """Test case for get_organization_inventory_onboarding_cloud_monitoring_imports_0

        Check the status of a committed Import operation
        """
        pass

    def test_get_organization_inventory_onboarding_cloud_monitoring_networks_0(self) -> None:
        """Test case for get_organization_inventory_onboarding_cloud_monitoring_networks_0

        Returns list of networks eligible for adding cloud monitored device
        """
        pass

    def test_get_organization_license_0(self) -> None:
        """Test case for get_organization_license_0

        Display a license
        """
        pass

    def test_get_organization_licenses_0(self) -> None:
        """Test case for get_organization_licenses_0

        List the licenses for an organization
        """
        pass

    def test_get_organization_licensing_coterm_licenses_0(self) -> None:
        """Test case for get_organization_licensing_coterm_licenses_0

        List the licenses in a coterm organization
        """
        pass

    def test_get_organization_login_security_0(self) -> None:
        """Test case for get_organization_login_security_0

        Returns the login security settings for an organization.
        """
        pass

    def test_get_organization_networks_0(self) -> None:
        """Test case for get_organization_networks_0

        List the networks that the user has privileges on in an organization
        """
        pass

    def test_get_organization_policy_object_0(self) -> None:
        """Test case for get_organization_policy_object_0

        Shows details of a Policy Object.
        """
        pass

    def test_get_organization_policy_objects_0(self) -> None:
        """Test case for get_organization_policy_objects_0

        Lists Policy Objects belonging to the organization.
        """
        pass

    def test_get_organization_policy_objects_group_0(self) -> None:
        """Test case for get_organization_policy_objects_group_0

        Shows details of a Policy Object Group.
        """
        pass

    def test_get_organization_policy_objects_groups_0(self) -> None:
        """Test case for get_organization_policy_objects_groups_0

        Lists Policy Object Groups belonging to the organization.
        """
        pass

    def test_get_organization_saml_0(self) -> None:
        """Test case for get_organization_saml_0

        Returns the SAML SSO enabled settings for an organization.
        """
        pass

    def test_get_organization_saml_idp_0(self) -> None:
        """Test case for get_organization_saml_idp_0

        Get a SAML IdP from your organization.
        """
        pass

    def test_get_organization_saml_idps_0(self) -> None:
        """Test case for get_organization_saml_idps_0

        List the SAML IdPs in your organization.
        """
        pass

    def test_get_organization_saml_role_0(self) -> None:
        """Test case for get_organization_saml_role_0

        Return a SAML role
        """
        pass

    def test_get_organization_saml_roles_0(self) -> None:
        """Test case for get_organization_saml_roles_0

        List the SAML roles for this organization
        """
        pass

    def test_get_organization_sm_apns_cert_0(self) -> None:
        """Test case for get_organization_sm_apns_cert_0

        Get the organization's APNS certificate
        """
        pass

    def test_get_organization_sm_vpp_account_0(self) -> None:
        """Test case for get_organization_sm_vpp_account_0

        Get a hash containing the unparsed token of the VPP account with the given ID
        """
        pass

    def test_get_organization_sm_vpp_accounts_0(self) -> None:
        """Test case for get_organization_sm_vpp_accounts_0

        List the VPP accounts in the organization
        """
        pass

    def test_get_organization_snmp_0(self) -> None:
        """Test case for get_organization_snmp_0

        Return the SNMP settings for an organization
        """
        pass

    def test_get_organization_switch_ports_by_switch_0(self) -> None:
        """Test case for get_organization_switch_ports_by_switch_0

        List the switchports in an organization by switch
        """
        pass

    def test_get_organization_wireless_devices_ethernet_statuses_0(self) -> None:
        """Test case for get_organization_wireless_devices_ethernet_statuses_0

        Endpoint to see power status for wireless devices
        """
        pass

    def test_get_organizations_0(self) -> None:
        """Test case for get_organizations_0

        List the organizations that the user has privileges on
        """
        pass

    def test_lock_network_sm_devices_0(self) -> None:
        """Test case for lock_network_sm_devices_0

        Lock a set of devices
        """
        pass

    def test_modify_network_sm_devices_tags_0(self) -> None:
        """Test case for modify_network_sm_devices_tags_0

        Add, delete, or update the tags of a set of devices
        """
        pass

    def test_move_network_sm_devices_0(self) -> None:
        """Test case for move_network_sm_devices_0

        Move a set of devices to a new network
        """
        pass

    def test_move_organization_licenses_0(self) -> None:
        """Test case for move_organization_licenses_0

        Move licenses to another organization
        """
        pass

    def test_move_organization_licenses_seats_0(self) -> None:
        """Test case for move_organization_licenses_seats_0

        Move SM seats to another organization
        """
        pass

    def test_move_organization_licensing_coterm_licenses_0(self) -> None:
        """Test case for move_organization_licensing_coterm_licenses_0

        Moves a license to a different organization (coterm only)
        """
        pass

    def test_provision_network_clients_0(self) -> None:
        """Test case for provision_network_clients_0

        Provisions a client with a name and policy
        """
        pass

    def test_refresh_network_sm_device_details_0(self) -> None:
        """Test case for refresh_network_sm_device_details_0

        Refresh the details of a device
        """
        pass

    def test_release_from_organization_inventory_0(self) -> None:
        """Test case for release_from_organization_inventory_0

        Release a list of claimed devices from an organization.
        """
        pass

    def test_remove_network_devices_0(self) -> None:
        """Test case for remove_network_devices_0

        Remove a single device
        """
        pass

    def test_remove_network_switch_stack_0(self) -> None:
        """Test case for remove_network_switch_stack_0

        Remove a switch from a stack
        """
        pass

    def test_renew_organization_licenses_seats_0(self) -> None:
        """Test case for renew_organization_licenses_seats_0

        Renew SM seats of a license
        """
        pass

    def test_rollbacks_network_firmware_upgrades_staged_events_0(self) -> None:
        """Test case for rollbacks_network_firmware_upgrades_staged_events_0

        Rollback a Staged Upgrade Event for a network
        """
        pass

    def test_split_network_0(self) -> None:
        """Test case for split_network_0

        Split a combined network into individual networks for each type of device
        """
        pass

    def test_swap_network_appliance_warm_spare_0(self) -> None:
        """Test case for swap_network_appliance_warm_spare_0

        Swap MX primary and warm spare appliances
        """
        pass

    def test_unbind_network_0(self) -> None:
        """Test case for unbind_network_0

        Unbind a network from a template.
        """
        pass

    def test_unenroll_network_sm_device_0(self) -> None:
        """Test case for unenroll_network_sm_device_0

        Unenroll a device
        """
        pass

    def test_update_device_0(self) -> None:
        """Test case for update_device_0

        Update the attributes of a device
        """
        pass

    def test_update_device_appliance_uplinks_settings_0(self) -> None:
        """Test case for update_device_appliance_uplinks_settings_0

        Update the uplink settings for an MX appliance
        """
        pass

    def test_update_device_camera_custom_analytics_0(self) -> None:
        """Test case for update_device_camera_custom_analytics_0

        Update custom analytics settings for a camera
        """
        pass

    def test_update_device_camera_quality_and_retention_0(self) -> None:
        """Test case for update_device_camera_quality_and_retention_0

        Update quality and retention settings for the given camera
        """
        pass

    def test_update_device_camera_sense_0(self) -> None:
        """Test case for update_device_camera_sense_0

        Update sense settings for the given camera
        """
        pass

    def test_update_device_camera_video_settings_0(self) -> None:
        """Test case for update_device_camera_video_settings_0

        Update video settings for the given camera
        """
        pass

    def test_update_device_camera_wireless_profiles_0(self) -> None:
        """Test case for update_device_camera_wireless_profiles_0

        Assign wireless profiles to the given camera
        """
        pass

    def test_update_device_cellular_gateway_lan_0(self) -> None:
        """Test case for update_device_cellular_gateway_lan_0

        Update the LAN Settings for a single MG.
        """
        pass

    def test_update_device_cellular_gateway_port_forwarding_rules_0(self) -> None:
        """Test case for update_device_cellular_gateway_port_forwarding_rules_0

        Updates the port forwarding rules for a single MG.
        """
        pass

    def test_update_device_cellular_sims_0(self) -> None:
        """Test case for update_device_cellular_sims_0

        Updates the SIM and APN configurations for a cellular device.
        """
        pass

    def test_update_device_management_interface_0(self) -> None:
        """Test case for update_device_management_interface_0

        Update the management interface settings for a device
        """
        pass

    def test_update_device_sensor_relationships_0(self) -> None:
        """Test case for update_device_sensor_relationships_0

        Assign one or more sensor roles to a given sensor or camera device.
        """
        pass

    def test_update_device_switch_port_0(self) -> None:
        """Test case for update_device_switch_port_0

        Update a switch port
        """
        pass

    def test_update_device_switch_routing_interface_0(self) -> None:
        """Test case for update_device_switch_routing_interface_0

        Update a layer 3 interface for a switch
        """
        pass

    def test_update_device_switch_routing_interface_dhcp_0(self) -> None:
        """Test case for update_device_switch_routing_interface_dhcp_0

        Update a layer 3 interface DHCP configuration for a switch
        """
        pass

    def test_update_device_switch_routing_static_route_0(self) -> None:
        """Test case for update_device_switch_routing_static_route_0

        Update a layer 3 static route for a switch
        """
        pass

    def test_update_device_switch_warm_spare_0(self) -> None:
        """Test case for update_device_switch_warm_spare_0

        Update warm spare configuration for a switch
        """
        pass

    def test_update_device_wireless_bluetooth_settings_0(self) -> None:
        """Test case for update_device_wireless_bluetooth_settings_0

        Update the bluetooth settings for a wireless device
        """
        pass

    def test_update_device_wireless_radio_settings_0(self) -> None:
        """Test case for update_device_wireless_radio_settings_0

        Update the radio settings of a device
        """
        pass

    def test_update_network_0(self) -> None:
        """Test case for update_network_0

        Update a network
        """
        pass

    def test_update_network_alerts_settings_0(self) -> None:
        """Test case for update_network_alerts_settings_0

        Update the alert configuration for this network
        """
        pass

    def test_update_network_appliance_connectivity_monitoring_destinations_0(self) -> None:
        """Test case for update_network_appliance_connectivity_monitoring_destinations_0

        Update the connectivity testing destinations for an MX network
        """
        pass

    def test_update_network_appliance_content_filtering_0(self) -> None:
        """Test case for update_network_appliance_content_filtering_0

        Update the content filtering settings for an MX network
        """
        pass

    def test_update_network_appliance_firewall_cellular_firewall_rules_0(self) -> None:
        """Test case for update_network_appliance_firewall_cellular_firewall_rules_0

        Update the cellular firewall rules of an MX network
        """
        pass

    def test_update_network_appliance_firewall_firewalled_service_0(self) -> None:
        """Test case for update_network_appliance_firewall_firewalled_service_0

        Updates the accessibility settings for the given service ('ICMP', 'web', or 'SNMP')
        """
        pass

    def test_update_network_appliance_firewall_inbound_cellular_firewall_rules_0(self) -> None:
        """Test case for update_network_appliance_firewall_inbound_cellular_firewall_rules_0

        Update the inbound cellular firewall rules of an MX network
        """
        pass

    def test_update_network_appliance_firewall_inbound_firewall_rules_0(self) -> None:
        """Test case for update_network_appliance_firewall_inbound_firewall_rules_0

        Update the inbound firewall rules of an MX network
        """
        pass

    def test_update_network_appliance_firewall_l3_firewall_rules_0(self) -> None:
        """Test case for update_network_appliance_firewall_l3_firewall_rules_0

        Update the L3 firewall rules of an MX network
        """
        pass

    def test_update_network_appliance_firewall_l7_firewall_rules_0(self) -> None:
        """Test case for update_network_appliance_firewall_l7_firewall_rules_0

        Update the MX L7 firewall rules for an MX network
        """
        pass

    def test_update_network_appliance_firewall_one_to_many_nat_rules_0(self) -> None:
        """Test case for update_network_appliance_firewall_one_to_many_nat_rules_0

        Set the 1:Many NAT mapping rules for an MX network
        """
        pass

    def test_update_network_appliance_firewall_one_to_one_nat_rules_0(self) -> None:
        """Test case for update_network_appliance_firewall_one_to_one_nat_rules_0

        Set the 1:1 NAT mapping rules for an MX network
        """
        pass

    def test_update_network_appliance_firewall_port_forwarding_rules_0(self) -> None:
        """Test case for update_network_appliance_firewall_port_forwarding_rules_0

        Update the port forwarding rules for an MX network
        """
        pass

    def test_update_network_appliance_firewall_settings_0(self) -> None:
        """Test case for update_network_appliance_firewall_settings_0

        Update the firewall settings for this network
        """
        pass

    def test_update_network_appliance_port_0(self) -> None:
        """Test case for update_network_appliance_port_0

        Update the per-port VLAN settings for a single MX port.
        """
        pass

    def test_update_network_appliance_prefixes_delegated_static_0(self) -> None:
        """Test case for update_network_appliance_prefixes_delegated_static_0

        Update a static delegated prefix from a network
        """
        pass

    def test_update_network_appliance_security_intrusion_0(self) -> None:
        """Test case for update_network_appliance_security_intrusion_0

        Set the supported intrusion settings for an MX network
        """
        pass

    def test_update_network_appliance_security_malware_0(self) -> None:
        """Test case for update_network_appliance_security_malware_0

        Set the supported malware settings for an MX network
        """
        pass

    def test_update_network_appliance_settings_0(self) -> None:
        """Test case for update_network_appliance_settings_0

        Update the appliance settings for a network
        """
        pass

    def test_update_network_appliance_single_lan_0(self) -> None:
        """Test case for update_network_appliance_single_lan_0

        Update single LAN configuration
        """
        pass

    def test_update_network_appliance_ssid_0(self) -> None:
        """Test case for update_network_appliance_ssid_0

        Update the attributes of an MX SSID
        """
        pass

    def test_update_network_appliance_static_route_0(self) -> None:
        """Test case for update_network_appliance_static_route_0

        Update a static route for an MX or teleworker network
        """
        pass

    def test_update_network_appliance_traffic_shaping_0(self) -> None:
        """Test case for update_network_appliance_traffic_shaping_0

        Update the traffic shaping settings for an MX network
        """
        pass

    def test_update_network_appliance_traffic_shaping_custom_performance_class_0(self) -> None:
        """Test case for update_network_appliance_traffic_shaping_custom_performance_class_0

        Update a custom performance class for an MX network
        """
        pass

    def test_update_network_appliance_traffic_shaping_rules_0(self) -> None:
        """Test case for update_network_appliance_traffic_shaping_rules_0

        Update the traffic shaping settings rules for an MX network
        """
        pass

    def test_update_network_appliance_traffic_shaping_uplink_bandwidth_0(self) -> None:
        """Test case for update_network_appliance_traffic_shaping_uplink_bandwidth_0

        Updates the uplink bandwidth settings for your MX network.
        """
        pass

    def test_update_network_appliance_traffic_shaping_uplink_selection_0(self) -> None:
        """Test case for update_network_appliance_traffic_shaping_uplink_selection_0

        Update uplink selection settings for an MX network
        """
        pass

    def test_update_network_appliance_vlan_0(self) -> None:
        """Test case for update_network_appliance_vlan_0

        Update a VLAN
        """
        pass

    def test_update_network_appliance_vlans_settings_0(self) -> None:
        """Test case for update_network_appliance_vlans_settings_0

        Enable/Disable VLANs for the given network
        """
        pass

    def test_update_network_appliance_vpn_bgp_0(self) -> None:
        """Test case for update_network_appliance_vpn_bgp_0

        Update a Hub BGP Configuration
        """
        pass

    def test_update_network_appliance_vpn_site_to_site_vpn_0(self) -> None:
        """Test case for update_network_appliance_vpn_site_to_site_vpn_0

        Update the site-to-site VPN settings of a network
        """
        pass

    def test_update_network_appliance_warm_spare_0(self) -> None:
        """Test case for update_network_appliance_warm_spare_0

        Update MX warm spare settings
        """
        pass

    def test_update_network_camera_quality_retention_profile_0(self) -> None:
        """Test case for update_network_camera_quality_retention_profile_0

        Update an existing quality retention profile for this network.
        """
        pass

    def test_update_network_camera_wireless_profile_0(self) -> None:
        """Test case for update_network_camera_wireless_profile_0

        Update an existing camera wireless profile in this network.
        """
        pass

    def test_update_network_cellular_gateway_connectivity_monitoring_destinations_0(self) -> None:
        """Test case for update_network_cellular_gateway_connectivity_monitoring_destinations_0

        Update the connectivity testing destinations for an MG network
        """
        pass

    def test_update_network_cellular_gateway_dhcp_0(self) -> None:
        """Test case for update_network_cellular_gateway_dhcp_0

        Update common DHCP settings of MGs
        """
        pass

    def test_update_network_cellular_gateway_subnet_pool_0(self) -> None:
        """Test case for update_network_cellular_gateway_subnet_pool_0

        Update the subnet pool and mask configuration for MGs in the network.
        """
        pass

    def test_update_network_cellular_gateway_uplink_0(self) -> None:
        """Test case for update_network_cellular_gateway_uplink_0

        Updates the uplink settings for your MG network.
        """
        pass

    def test_update_network_client_policy_0(self) -> None:
        """Test case for update_network_client_policy_0

        Update the policy assigned to a client on the network
        """
        pass

    def test_update_network_client_splash_authorization_status_0(self) -> None:
        """Test case for update_network_client_splash_authorization_status_0

        Update a client's splash authorization
        """
        pass

    def test_update_network_firmware_upgrades_0(self) -> None:
        """Test case for update_network_firmware_upgrades_0

        Update firmware upgrade information for a network
        """
        pass

    def test_update_network_firmware_upgrades_staged_events_0(self) -> None:
        """Test case for update_network_firmware_upgrades_staged_events_0

        Update the Staged Upgrade Event for a network
        """
        pass

    def test_update_network_firmware_upgrades_staged_group_0(self) -> None:
        """Test case for update_network_firmware_upgrades_staged_group_0

        Update a Staged Upgrade Group for a network
        """
        pass

    def test_update_network_firmware_upgrades_staged_stages_0(self) -> None:
        """Test case for update_network_firmware_upgrades_staged_stages_0

        Assign Staged Upgrade Group order in the sequence.
        """
        pass

    def test_update_network_floor_plan_0(self) -> None:
        """Test case for update_network_floor_plan_0

        Update a floor plan's geolocation and other meta data
        """
        pass

    def test_update_network_group_policy_0(self) -> None:
        """Test case for update_network_group_policy_0

        Update a group policy
        """
        pass

    def test_update_network_meraki_auth_user_0(self) -> None:
        """Test case for update_network_meraki_auth_user_0

        Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
        """
        pass

    def test_update_network_mqtt_broker_0(self) -> None:
        """Test case for update_network_mqtt_broker_0

        Update an MQTT broker
        """
        pass

    def test_update_network_netflow_0(self) -> None:
        """Test case for update_network_netflow_0

        Update the NetFlow traffic reporting settings for a network
        """
        pass

    def test_update_network_sensor_alerts_profile_0(self) -> None:
        """Test case for update_network_sensor_alerts_profile_0

        Updates a sensor alert profile for a network.
        """
        pass

    def test_update_network_settings_0(self) -> None:
        """Test case for update_network_settings_0

        Update the settings for a network
        """
        pass

    def test_update_network_sm_devices_fields_0(self) -> None:
        """Test case for update_network_sm_devices_fields_0

        Modify the fields of a device
        """
        pass

    def test_update_network_sm_target_group_0(self) -> None:
        """Test case for update_network_sm_target_group_0

        Update a target group
        """
        pass

    def test_update_network_snmp_0(self) -> None:
        """Test case for update_network_snmp_0

        Update the SNMP settings for a network
        """
        pass

    def test_update_network_switch_access_control_lists_0(self) -> None:
        """Test case for update_network_switch_access_control_lists_0

        Update the access control lists for a MS network
        """
        pass

    def test_update_network_switch_access_policy_0(self) -> None:
        """Test case for update_network_switch_access_policy_0

        Update an access policy for a switch network
        """
        pass

    def test_update_network_switch_alternate_management_interface_0(self) -> None:
        """Test case for update_network_switch_alternate_management_interface_0

        Update the switch alternate management interface for the network
        """
        pass

    def test_update_network_switch_dhcp_server_policy_0(self) -> None:
        """Test case for update_network_switch_dhcp_server_policy_0

        Update the DHCP server settings
        """
        pass

    def test_update_network_switch_dhcp_server_policy_arp_inspection_trusted_server_0(self) -> None:
        """Test case for update_network_switch_dhcp_server_policy_arp_inspection_trusted_server_0

        Update a server that is trusted by Dynamic ARP Inspection on this network
        """
        pass

    def test_update_network_switch_dscp_to_cos_mappings_0(self) -> None:
        """Test case for update_network_switch_dscp_to_cos_mappings_0

        Update the DSCP to CoS mappings
        """
        pass

    def test_update_network_switch_link_aggregation_0(self) -> None:
        """Test case for update_network_switch_link_aggregation_0

        Update a link aggregation group
        """
        pass

    def test_update_network_switch_mtu_0(self) -> None:
        """Test case for update_network_switch_mtu_0

        Update the MTU configuration
        """
        pass

    def test_update_network_switch_port_schedule_0(self) -> None:
        """Test case for update_network_switch_port_schedule_0

        Update a switch port schedule
        """
        pass

    def test_update_network_switch_qos_rule_0(self) -> None:
        """Test case for update_network_switch_qos_rule_0

        Update a quality of service rule
        """
        pass

    def test_update_network_switch_qos_rules_order_0(self) -> None:
        """Test case for update_network_switch_qos_rules_order_0

        Update the order in which the rules should be processed by the switch
        """
        pass

    def test_update_network_switch_routing_multicast_0(self) -> None:
        """Test case for update_network_switch_routing_multicast_0

        Update multicast settings for a network
        """
        pass

    def test_update_network_switch_routing_multicast_rendezvous_point_0(self) -> None:
        """Test case for update_network_switch_routing_multicast_rendezvous_point_0

        Update a multicast rendezvous point
        """
        pass

    def test_update_network_switch_routing_ospf_0(self) -> None:
        """Test case for update_network_switch_routing_ospf_0

        Update layer 3 OSPF routing configuration
        """
        pass

    def test_update_network_switch_settings_0(self) -> None:
        """Test case for update_network_switch_settings_0

        Update switch network settings
        """
        pass

    def test_update_network_switch_stack_routing_interface_0(self) -> None:
        """Test case for update_network_switch_stack_routing_interface_0

        Update a layer 3 interface for a switch stack
        """
        pass

    def test_update_network_switch_stack_routing_interface_dhcp_0(self) -> None:
        """Test case for update_network_switch_stack_routing_interface_dhcp_0

        Update a layer 3 interface DHCP configuration for a switch stack
        """
        pass

    def test_update_network_switch_stack_routing_static_route_0(self) -> None:
        """Test case for update_network_switch_stack_routing_static_route_0

        Update a layer 3 static route for a switch stack
        """
        pass

    def test_update_network_switch_storm_control_0(self) -> None:
        """Test case for update_network_switch_storm_control_0

        Update the storm control configuration for a switch network
        """
        pass

    def test_update_network_switch_stp_0(self) -> None:
        """Test case for update_network_switch_stp_0

        Updates STP settings
        """
        pass

    def test_update_network_syslog_servers_0(self) -> None:
        """Test case for update_network_syslog_servers_0

        Update the syslog servers for a network
        """
        pass

    def test_update_network_traffic_analysis_0(self) -> None:
        """Test case for update_network_traffic_analysis_0

        Update the traffic analysis settings for a network
        """
        pass

    def test_update_network_webhooks_http_server_0(self) -> None:
        """Test case for update_network_webhooks_http_server_0

        Update an HTTP server
        """
        pass

    def test_update_network_webhooks_payload_template_0(self) -> None:
        """Test case for update_network_webhooks_payload_template_0

        Update a webhook payload template for a network
        """
        pass

    def test_update_network_wireless_alternate_management_interface_0(self) -> None:
        """Test case for update_network_wireless_alternate_management_interface_0

        Update alternate management interface and device static IP
        """
        pass

    def test_update_network_wireless_billing_0(self) -> None:
        """Test case for update_network_wireless_billing_0

        Update the billing settings
        """
        pass

    def test_update_network_wireless_bluetooth_settings_0(self) -> None:
        """Test case for update_network_wireless_bluetooth_settings_0

        Update the Bluetooth settings for a network
        """
        pass

    def test_update_network_wireless_rf_profile_0(self) -> None:
        """Test case for update_network_wireless_rf_profile_0

        Updates specified RF profile for this network
        """
        pass

    def test_update_network_wireless_settings_0(self) -> None:
        """Test case for update_network_wireless_settings_0

        Update the wireless settings for a network
        """
        pass

    def test_update_network_wireless_ssid_0(self) -> None:
        """Test case for update_network_wireless_ssid_0

        Update the attributes of an MR SSID
        """
        pass

    def test_update_network_wireless_ssid_bonjour_forwarding_0(self) -> None:
        """Test case for update_network_wireless_ssid_bonjour_forwarding_0

        Update the bonjour forwarding setting and rules for the SSID
        """
        pass

    def test_update_network_wireless_ssid_device_type_group_policies_0(self) -> None:
        """Test case for update_network_wireless_ssid_device_type_group_policies_0

        Update the device type group policies for the SSID
        """
        pass

    def test_update_network_wireless_ssid_eap_override_0(self) -> None:
        """Test case for update_network_wireless_ssid_eap_override_0

        Update the EAP overridden parameters for an SSID.
        """
        pass

    def test_update_network_wireless_ssid_firewall_l3_firewall_rules_0(self) -> None:
        """Test case for update_network_wireless_ssid_firewall_l3_firewall_rules_0

        Update the L3 firewall rules of an SSID on an MR network
        """
        pass

    def test_update_network_wireless_ssid_firewall_l7_firewall_rules_0(self) -> None:
        """Test case for update_network_wireless_ssid_firewall_l7_firewall_rules_0

        Update the L7 firewall rules of an SSID on an MR network
        """
        pass

    def test_update_network_wireless_ssid_hotspot20_0(self) -> None:
        """Test case for update_network_wireless_ssid_hotspot20_0

        Update the Hotspot 2.0 settings of an SSID
        """
        pass

    def test_update_network_wireless_ssid_identity_psk_0(self) -> None:
        """Test case for update_network_wireless_ssid_identity_psk_0

        Update an Identity PSK
        """
        pass

    def test_update_network_wireless_ssid_schedules_0(self) -> None:
        """Test case for update_network_wireless_ssid_schedules_0

        Update the outage schedule for the SSID
        """
        pass

    def test_update_network_wireless_ssid_splash_settings_0(self) -> None:
        """Test case for update_network_wireless_ssid_splash_settings_0

        Modify the splash page settings for the given SSID
        """
        pass

    def test_update_network_wireless_ssid_traffic_shaping_rules_0(self) -> None:
        """Test case for update_network_wireless_ssid_traffic_shaping_rules_0

        Update the traffic shaping settings for an SSID on an MR network
        """
        pass

    def test_update_network_wireless_ssid_vpn_0(self) -> None:
        """Test case for update_network_wireless_ssid_vpn_0

        Update the VPN settings for the SSID
        """
        pass

    def test_update_organization_0(self) -> None:
        """Test case for update_organization_0

        Update an organization
        """
        pass

    def test_update_organization_action_batch_0(self) -> None:
        """Test case for update_organization_action_batch_0

        Update an action batch
        """
        pass

    def test_update_organization_adaptive_policy_acl_0(self) -> None:
        """Test case for update_organization_adaptive_policy_acl_0

        Updates an adaptive policy ACL
        """
        pass

    def test_update_organization_adaptive_policy_group_0(self) -> None:
        """Test case for update_organization_adaptive_policy_group_0

        Updates an adaptive policy group
        """
        pass

    def test_update_organization_adaptive_policy_policy_0(self) -> None:
        """Test case for update_organization_adaptive_policy_policy_0

        Update an Adaptive Policy
        """
        pass

    def test_update_organization_adaptive_policy_settings_0(self) -> None:
        """Test case for update_organization_adaptive_policy_settings_0

        Update global adaptive policy settings
        """
        pass

    def test_update_organization_admin_0(self) -> None:
        """Test case for update_organization_admin_0

        Update an administrator
        """
        pass

    def test_update_organization_alerts_profile_0(self) -> None:
        """Test case for update_organization_alerts_profile_0

        Update an organization-wide alert config
        """
        pass

    def test_update_organization_appliance_security_intrusion_0(self) -> None:
        """Test case for update_organization_appliance_security_intrusion_0

        Sets supported intrusion settings for an organization
        """
        pass

    def test_update_organization_appliance_vpn_third_party_vpn_peers_0(self) -> None:
        """Test case for update_organization_appliance_vpn_third_party_vpn_peers_0

        Update the third party VPN peers for an organization
        """
        pass

    def test_update_organization_appliance_vpn_vpn_firewall_rules_0(self) -> None:
        """Test case for update_organization_appliance_vpn_vpn_firewall_rules_0

        Update the firewall rules of an organization's site-to-site VPN
        """
        pass

    def test_update_organization_branding_policies_priorities_0(self) -> None:
        """Test case for update_organization_branding_policies_priorities_0

        Update the priority ordering of an organization's branding policies.
        """
        pass

    def test_update_organization_branding_policy_0(self) -> None:
        """Test case for update_organization_branding_policy_0

        Update a branding policy
        """
        pass

    def test_update_organization_camera_onboarding_statuses_0(self) -> None:
        """Test case for update_organization_camera_onboarding_statuses_0

        Notify that credential handoff to camera has completed
        """
        pass

    def test_update_organization_config_template_0(self) -> None:
        """Test case for update_organization_config_template_0

        Update a configuration template
        """
        pass

    def test_update_organization_config_template_switch_profile_port_0(self) -> None:
        """Test case for update_organization_config_template_switch_profile_port_0

        Update a switch profile port
        """
        pass

    def test_update_organization_early_access_features_opt_in_0(self) -> None:
        """Test case for update_organization_early_access_features_opt_in_0

        Update an early access feature opt-in for an organization
        """
        pass

    def test_update_organization_insight_monitored_media_server_0(self) -> None:
        """Test case for update_organization_insight_monitored_media_server_0

        Update a monitored media server for this organization
        """
        pass

    def test_update_organization_license_0(self) -> None:
        """Test case for update_organization_license_0

        Update a license
        """
        pass

    def test_update_organization_login_security_0(self) -> None:
        """Test case for update_organization_login_security_0

        Update the login security settings for an organization
        """
        pass

    def test_update_organization_policy_object_0(self) -> None:
        """Test case for update_organization_policy_object_0

        Updates a Policy Object.
        """
        pass

    def test_update_organization_policy_objects_group_0(self) -> None:
        """Test case for update_organization_policy_objects_group_0

        Updates a Policy Object Group.
        """
        pass

    def test_update_organization_saml_0(self) -> None:
        """Test case for update_organization_saml_0

        Updates the SAML SSO enabled settings for an organization.
        """
        pass

    def test_update_organization_saml_idp_0(self) -> None:
        """Test case for update_organization_saml_idp_0

        Update a SAML IdP in your organization
        """
        pass

    def test_update_organization_saml_role_0(self) -> None:
        """Test case for update_organization_saml_role_0

        Update a SAML role
        """
        pass

    def test_update_organization_snmp_0(self) -> None:
        """Test case for update_organization_snmp_0

        Update the SNMP settings for an organization
        """
        pass

    def test_vmx_network_devices_claim_0(self) -> None:
        """Test case for vmx_network_devices_claim_0

        Claim a vMX into a network
        """
        pass

    def test_wipe_network_sm_devices_0(self) -> None:
        """Test case for wipe_network_sm_devices_0

        Wipe a device
        """
        pass


if __name__ == '__main__':
    unittest.main()

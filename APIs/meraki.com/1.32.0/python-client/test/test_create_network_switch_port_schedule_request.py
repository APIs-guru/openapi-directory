# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.create_network_switch_port_schedule_request import CreateNetworkSwitchPortScheduleRequest

class TestCreateNetworkSwitchPortScheduleRequest(unittest.TestCase):
    """CreateNetworkSwitchPortScheduleRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateNetworkSwitchPortScheduleRequest:
        """Test CreateNetworkSwitchPortScheduleRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateNetworkSwitchPortScheduleRequest`
        """
        model = CreateNetworkSwitchPortScheduleRequest()
        if include_optional:
            return CreateNetworkSwitchPortScheduleRequest(
                name = '',
                port_schedule = openapi_client.models.create_network_switch_port_schedule_request_port_schedule.createNetworkSwitchPortSchedule_request_portSchedule(
                    friday = openapi_client.models.create_network_group_policy_request_scheduling_friday.createNetworkGroupPolicy_request_scheduling_friday(
                        active = True, 
                        from = '', 
                        to = '', ), 
                    monday = openapi_client.models.create_network_group_policy_request_scheduling_monday.createNetworkGroupPolicy_request_scheduling_monday(
                        active = True, 
                        from = '', 
                        to = '', ), 
                    saturday = openapi_client.models.create_network_group_policy_request_scheduling_saturday.createNetworkGroupPolicy_request_scheduling_saturday(
                        active = True, 
                        from = '', 
                        to = '', ), 
                    sunday = openapi_client.models.create_network_group_policy_request_scheduling_sunday.createNetworkGroupPolicy_request_scheduling_sunday(
                        active = True, 
                        from = '', 
                        to = '', ), 
                    thursday = openapi_client.models.create_network_group_policy_request_scheduling_thursday.createNetworkGroupPolicy_request_scheduling_thursday(
                        active = True, 
                        from = '', 
                        to = '', ), 
                    tuesday = openapi_client.models.create_network_group_policy_request_scheduling_tuesday.createNetworkGroupPolicy_request_scheduling_tuesday(
                        active = True, 
                        from = '', 
                        to = '', ), 
                    wednesday = openapi_client.models.create_network_group_policy_request_scheduling_wednesday.createNetworkGroupPolicy_request_scheduling_wednesday(
                        active = True, 
                        from = '', 
                        to = '', ), )
            )
        else:
            return CreateNetworkSwitchPortScheduleRequest(
                name = '',
        )
        """

    def testCreateNetworkSwitchPortScheduleRequest(self):
        """Test CreateNetworkSwitchPortScheduleRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

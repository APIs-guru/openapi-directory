# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.update_organization_appliance_vpn_third_party_vpn_peers_request import UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest

class TestUpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest(unittest.TestCase):
    """UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest:
        """Test UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest`
        """
        model = UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest()
        if include_optional:
            return UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest(
                peers = [
                    openapi_client.models.update_organization_appliance_vpn_third_party_vpn_peers_request_peers_inner.updateOrganizationApplianceVpnThirdPartyVPNPeers_request_peers_inner(
                        ike_version = '1', 
                        ipsec_policies = openapi_client.models.get_organization_appliance_vpn_third_party_vpn_peers_200_response_peers_inner_ipsec_policies.getOrganizationApplianceVpnThirdPartyVPNPeers_200_response_peers_inner_ipsecPolicies(
                            child_auth_algo = [
                                'md5'
                                ], 
                            child_cipher_algo = [
                                'aes128'
                                ], 
                            child_lifetime = 56, 
                            child_pfs_group = [
                                ''
                                ], 
                            ike_auth_algo = [
                                'md5'
                                ], 
                            ike_cipher_algo = [
                                'aes128'
                                ], 
                            ike_diffie_hellman_group = [
                                ''
                                ], 
                            ike_lifetime = 56, 
                            ike_prf_algo = [
                                'default'
                                ], ), 
                        ipsec_policies_preset = '', 
                        local_id = '', 
                        name = '', 
                        network_tags = [
                            ''
                            ], 
                        private_subnets = [
                            ''
                            ], 
                        public_ip = '', 
                        remote_id = '', 
                        secret = '', )
                    ]
            )
        else:
            return UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest(
                peers = [
                    openapi_client.models.update_organization_appliance_vpn_third_party_vpn_peers_request_peers_inner.updateOrganizationApplianceVpnThirdPartyVPNPeers_request_peers_inner(
                        ike_version = '1', 
                        ipsec_policies = openapi_client.models.get_organization_appliance_vpn_third_party_vpn_peers_200_response_peers_inner_ipsec_policies.getOrganizationApplianceVpnThirdPartyVPNPeers_200_response_peers_inner_ipsecPolicies(
                            child_auth_algo = [
                                'md5'
                                ], 
                            child_cipher_algo = [
                                'aes128'
                                ], 
                            child_lifetime = 56, 
                            child_pfs_group = [
                                ''
                                ], 
                            ike_auth_algo = [
                                'md5'
                                ], 
                            ike_cipher_algo = [
                                'aes128'
                                ], 
                            ike_diffie_hellman_group = [
                                ''
                                ], 
                            ike_lifetime = 56, 
                            ike_prf_algo = [
                                'default'
                                ], ), 
                        ipsec_policies_preset = '', 
                        local_id = '', 
                        name = '', 
                        network_tags = [
                            ''
                            ], 
                        private_subnets = [
                            ''
                            ], 
                        public_ip = '', 
                        remote_id = '', 
                        secret = '', )
                    ],
        )
        """

    def testUpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest(self):
        """Test UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

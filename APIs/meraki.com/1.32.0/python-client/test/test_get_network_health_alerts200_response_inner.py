# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.get_network_health_alerts200_response_inner import GetNetworkHealthAlerts200ResponseInner

class TestGetNetworkHealthAlerts200ResponseInner(unittest.TestCase):
    """GetNetworkHealthAlerts200ResponseInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetNetworkHealthAlerts200ResponseInner:
        """Test GetNetworkHealthAlerts200ResponseInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetNetworkHealthAlerts200ResponseInner`
        """
        model = GetNetworkHealthAlerts200ResponseInner()
        if include_optional:
            return GetNetworkHealthAlerts200ResponseInner(
                category = '',
                id = '',
                scope = openapi_client.models.get_network_health_alerts_200_response_inner_scope.getNetworkHealthAlerts_200_response_inner_scope(
                    applications = [
                        openapi_client.models.get_network_health_alerts_200_response_inner_scope_applications_inner.getNetworkHealthAlerts_200_response_inner_scope_applications_inner(
                            name = '', 
                            url = '', )
                        ], 
                    devices = [
                        openapi_client.models.get_network_health_alerts_200_response_inner_scope_devices_inner.getNetworkHealthAlerts_200_response_inner_scope_devices_inner(
                            clients = [
                                openapi_client.models.get_network_health_alerts_200_response_inner_scope_devices_inner_clients_inner.getNetworkHealthAlerts_200_response_inner_scope_devices_inner_clients_inner(
                                    mac = '', )
                                ], 
                            lldp = openapi_client.models.get_network_health_alerts_200_response_inner_scope_devices_inner_lldp.getNetworkHealthAlerts_200_response_inner_scope_devices_inner_lldp(
                                port_id = '', ), 
                            mac = '', 
                            name = '', 
                            product_type = '', 
                            serial = '', 
                            url = '', )
                        ], 
                    peers = [
                        openapi_client.models.get_network_health_alerts_200_response_inner_scope_peers_inner.getNetworkHealthAlerts_200_response_inner_scope_peers_inner(
                            network = openapi_client.models.get_network_health_alerts_200_response_inner_scope_peers_inner_network.getNetworkHealthAlerts_200_response_inner_scope_peers_inner_network(
                                id = '', 
                                name = '', ), 
                            url = '', )
                        ], ),
                severity = 'error',
                type = ''
            )
        else:
            return GetNetworkHealthAlerts200ResponseInner(
        )
        """

    def testGetNetworkHealthAlerts200ResponseInner(self):
        """Test GetNetworkHealthAlerts200ResponseInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

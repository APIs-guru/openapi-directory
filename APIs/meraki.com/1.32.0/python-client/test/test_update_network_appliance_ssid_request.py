# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.update_network_appliance_ssid_request import UpdateNetworkApplianceSsidRequest

class TestUpdateNetworkApplianceSsidRequest(unittest.TestCase):
    """UpdateNetworkApplianceSsidRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UpdateNetworkApplianceSsidRequest:
        """Test UpdateNetworkApplianceSsidRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UpdateNetworkApplianceSsidRequest`
        """
        model = UpdateNetworkApplianceSsidRequest()
        if include_optional:
            return UpdateNetworkApplianceSsidRequest(
                auth_mode = '8021x-meraki',
                default_vlan_id = 56,
                dhcp_enforced_deauthentication = openapi_client.models.update_network_appliance_ssid_request_dhcp_enforced_deauthentication.updateNetworkApplianceSsid_request_dhcpEnforcedDeauthentication(
                    enabled = True, ),
                enabled = True,
                encryption_mode = 'wep',
                name = '',
                psk = '',
                radius_servers = [
                    openapi_client.models.update_network_appliance_ssid_request_radius_servers_inner.updateNetworkApplianceSsid_request_radiusServers_inner(
                        host = '', 
                        port = 56, 
                        secret = '', )
                    ],
                visible = True,
                wpa_encryption_mode = 'WPA1 and WPA2'
            )
        else:
            return UpdateNetworkApplianceSsidRequest(
        )
        """

    def testUpdateNetworkApplianceSsidRequest(self):
        """Test UpdateNetworkApplianceSsidRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

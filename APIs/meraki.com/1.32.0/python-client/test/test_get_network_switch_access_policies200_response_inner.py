# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.get_network_switch_access_policies200_response_inner import GetNetworkSwitchAccessPolicies200ResponseInner

class TestGetNetworkSwitchAccessPolicies200ResponseInner(unittest.TestCase):
    """GetNetworkSwitchAccessPolicies200ResponseInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetNetworkSwitchAccessPolicies200ResponseInner:
        """Test GetNetworkSwitchAccessPolicies200ResponseInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetNetworkSwitchAccessPolicies200ResponseInner`
        """
        model = GetNetworkSwitchAccessPolicies200ResponseInner()
        if include_optional:
            return GetNetworkSwitchAccessPolicies200ResponseInner(
                access_policy_type = '802.1x',
                dot1x = openapi_client.models.get_network_switch_access_policies_200_response_inner_dot1x.getNetworkSwitchAccessPolicies_200_response_inner_dot1x(
                    control_direction = 'both', ),
                guest_port_bouncing = True,
                guest_vlan_id = 56,
                host_mode = 'Multi-Auth',
                increase_access_speed = True,
                name = '',
                radius = openapi_client.models.get_network_switch_access_policies_200_response_inner_radius.getNetworkSwitchAccessPolicies_200_response_inner_radius(
                    critical_auth = openapi_client.models.get_network_switch_access_policies_200_response_inner_radius_critical_auth.getNetworkSwitchAccessPolicies_200_response_inner_radius_criticalAuth(
                        data_vlan_id = 56, 
                        suspend_port_bounce = True, 
                        voice_vlan_id = 56, ), 
                    failed_auth_vlan_id = 56, 
                    re_authentication_interval = 56, ),
                radius_accounting_enabled = True,
                radius_accounting_servers = [
                    openapi_client.models.get_network_switch_access_policies_200_response_inner_radius_accounting_servers_inner.getNetworkSwitchAccessPolicies_200_response_inner_radiusAccountingServers_inner(
                        host = '', 
                        port = 56, )
                    ],
                radius_coa_support_enabled = True,
                radius_group_attribute = '',
                radius_servers = [
                    openapi_client.models.get_network_switch_access_policies_200_response_inner_radius_servers_inner.getNetworkSwitchAccessPolicies_200_response_inner_radiusServers_inner(
                        host = '', 
                        port = 56, )
                    ],
                radius_testing_enabled = True,
                url_redirect_walled_garden_enabled = True,
                url_redirect_walled_garden_ranges = [
                    ''
                    ],
                voice_vlan_clients = True
            )
        else:
            return GetNetworkSwitchAccessPolicies200ResponseInner(
        )
        """

    def testGetNetworkSwitchAccessPolicies200ResponseInner(self):
        """Test GetNetworkSwitchAccessPolicies200ResponseInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

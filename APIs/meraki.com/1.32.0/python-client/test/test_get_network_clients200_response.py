# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.get_network_clients200_response import GetNetworkClients200Response

class TestGetNetworkClients200Response(unittest.TestCase):
    """GetNetworkClients200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetNetworkClients200Response:
        """Test GetNetworkClients200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetNetworkClients200Response`
        """
        model = GetNetworkClients200Response()
        if include_optional:
            return GetNetworkClients200Response(
                adaptive_policy_group = '',
                description = '',
                device_type_prediction = '',
                first_seen = 56,
                group_policy8021x = '',
                id = '',
                ip = '',
                ip6 = '',
                ip6_local = '',
                last_seen = 56,
                mac = '',
                manufacturer = '',
                named_vlan = '',
                notes = '',
                os = '',
                recent_device_connection = 'Wired',
                recent_device_mac = '',
                recent_device_name = '',
                recent_device_serial = '',
                sm_installed = True,
                ssid = '',
                status = 'Offline',
                switchport = '',
                usage = openapi_client.models.get_network_clients_200_response_usage.getNetworkClients_200_response_usage(
                    recv = 1.337, 
                    sent = 1.337, ),
                user = '',
                vlan = '',
                wireless_capabilities = ''
            )
        else:
            return GetNetworkClients200Response(
        )
        """

    def testGetNetworkClients200Response(self):
        """Test GetNetworkClients200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

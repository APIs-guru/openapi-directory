# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.update_network_appliance_traffic_shaping_uplink_selection_request import UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest

class TestUpdateNetworkApplianceTrafficShapingUplinkSelectionRequest(unittest.TestCase):
    """UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest:
        """Test UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest`
        """
        model = UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest()
        if include_optional:
            return UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest(
                active_active_auto_vpn_enabled = True,
                default_uplink = 'wan1',
                failover_and_failback = openapi_client.models.update_network_appliance_traffic_shaping_uplink_selection_request_failover_and_failback.updateNetworkApplianceTrafficShapingUplinkSelection_request_failoverAndFailback(
                    immediate = openapi_client.models.update_network_appliance_traffic_shaping_uplink_selection_request_failover_and_failback_immediate.updateNetworkApplianceTrafficShapingUplinkSelection_request_failoverAndFailback_immediate(
                        enabled = True, ), ),
                load_balancing_enabled = True,
                vpn_traffic_uplink_preferences = [
                    openapi_client.models.update_network_appliance_traffic_shaping_uplink_selection_request_vpn_traffic_uplink_preferences_inner.updateNetworkApplianceTrafficShapingUplinkSelection_request_vpnTrafficUplinkPreferences_inner(
                        fail_over_criterion = 'poorPerformance', 
                        performance_class = openapi_client.models.update_network_appliance_traffic_shaping_uplink_selection_request_vpn_traffic_uplink_preferences_inner_performance_class.updateNetworkApplianceTrafficShapingUplinkSelection_request_vpnTrafficUplinkPreferences_inner_performanceClass(
                            builtin_performance_class_name = 'VoIP', 
                            custom_performance_class_id = '', 
                            type = 'builtin', ), 
                        preferred_uplink = 'bestForVoIP', 
                        traffic_filters = [
                            openapi_client.models.update_network_appliance_traffic_shaping_uplink_selection_request_vpn_traffic_uplink_preferences_inner_traffic_filters_inner.updateNetworkApplianceTrafficShapingUplinkSelection_request_vpnTrafficUplinkPreferences_inner_trafficFilters_inner(
                                type = 'application', 
                                value = openapi_client.models.update_network_appliance_traffic_shaping_uplink_selection_request_vpn_traffic_uplink_preferences_inner_traffic_filters_inner_value.updateNetworkApplianceTrafficShapingUplinkSelection_request_vpnTrafficUplinkPreferences_inner_trafficFilters_inner_value(
                                    destination = openapi_client.models.update_network_appliance_traffic_shaping_uplink_selection_request_vpn_traffic_uplink_preferences_inner_traffic_filters_inner_value_destination.updateNetworkApplianceTrafficShapingUplinkSelection_request_vpnTrafficUplinkPreferences_inner_trafficFilters_inner_value_destination(
                                        cidr = '', 
                                        fqdn = '', 
                                        host = 56, 
                                        network = '', 
                                        port = '', 
                                        vlan = 56, ), 
                                    id = '', 
                                    protocol = 'any', 
                                    source = openapi_client.models.update_network_appliance_traffic_shaping_uplink_selection_request_vpn_traffic_uplink_preferences_inner_traffic_filters_inner_value_source.updateNetworkApplianceTrafficShapingUplinkSelection_request_vpnTrafficUplinkPreferences_inner_trafficFilters_inner_value_source(
                                        cidr = '', 
                                        host = 56, 
                                        network = '', 
                                        port = '', 
                                        vlan = 56, ), ), )
                            ], )
                    ],
                wan_traffic_uplink_preferences = [
                    openapi_client.models.update_network_appliance_traffic_shaping_uplink_selection_request_wan_traffic_uplink_preferences_inner.updateNetworkApplianceTrafficShapingUplinkSelection_request_wanTrafficUplinkPreferences_inner(
                        preferred_uplink = 'wan1', 
                        traffic_filters = [
                            openapi_client.models.update_network_appliance_traffic_shaping_uplink_selection_request_wan_traffic_uplink_preferences_inner_traffic_filters_inner.updateNetworkApplianceTrafficShapingUplinkSelection_request_wanTrafficUplinkPreferences_inner_trafficFilters_inner(
                                type = 'custom', 
                                value = openapi_client.models.update_network_appliance_traffic_shaping_uplink_selection_request_wan_traffic_uplink_preferences_inner_traffic_filters_inner_value.updateNetworkApplianceTrafficShapingUplinkSelection_request_wanTrafficUplinkPreferences_inner_trafficFilters_inner_value(
                                    destination = openapi_client.models.update_network_appliance_traffic_shaping_uplink_selection_request_wan_traffic_uplink_preferences_inner_traffic_filters_inner_value_destination.updateNetworkApplianceTrafficShapingUplinkSelection_request_wanTrafficUplinkPreferences_inner_trafficFilters_inner_value_destination(
                                        cidr = '', 
                                        port = '', ), 
                                    protocol = 'any', 
                                    source = openapi_client.models.update_network_appliance_traffic_shaping_uplink_selection_request_wan_traffic_uplink_preferences_inner_traffic_filters_inner_value_source.updateNetworkApplianceTrafficShapingUplinkSelection_request_wanTrafficUplinkPreferences_inner_trafficFilters_inner_value_source(
                                        cidr = '', 
                                        host = 56, 
                                        port = '', 
                                        vlan = 56, ), ), )
                            ], )
                    ]
            )
        else:
            return UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest(
        )
        """

    def testUpdateNetworkApplianceTrafficShapingUplinkSelectionRequest(self):
        """Test UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.update_network_group_policy_request import UpdateNetworkGroupPolicyRequest

class TestUpdateNetworkGroupPolicyRequest(unittest.TestCase):
    """UpdateNetworkGroupPolicyRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UpdateNetworkGroupPolicyRequest:
        """Test UpdateNetworkGroupPolicyRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UpdateNetworkGroupPolicyRequest`
        """
        model = UpdateNetworkGroupPolicyRequest()
        if include_optional:
            return UpdateNetworkGroupPolicyRequest(
                bandwidth = openapi_client.models.create_network_group_policy_request_bandwidth.createNetworkGroupPolicy_request_bandwidth(
                    bandwidth_limits = openapi_client.models.create_network_group_policy_request_bandwidth_bandwidth_limits.createNetworkGroupPolicy_request_bandwidth_bandwidthLimits(
                        limit_down = 56, 
                        limit_up = 56, ), 
                    settings = 'custom', ),
                bonjour_forwarding = openapi_client.models.create_network_group_policy_request_bonjour_forwarding.createNetworkGroupPolicy_request_bonjourForwarding(
                    rules = [
                        openapi_client.models.create_network_group_policy_request_bonjour_forwarding_rules_inner.createNetworkGroupPolicy_request_bonjourForwarding_rules_inner(
                            description = '', 
                            services = [
                                'AFP'
                                ], 
                            vlan_id = '', )
                        ], 
                    settings = 'custom', ),
                content_filtering = openapi_client.models.create_network_group_policy_request_content_filtering.createNetworkGroupPolicy_request_contentFiltering(
                    allowed_url_patterns = openapi_client.models.create_network_group_policy_request_content_filtering_allowed_url_patterns.createNetworkGroupPolicy_request_contentFiltering_allowedUrlPatterns(
                        patterns = [
                            ''
                            ], 
                        settings = 'append', ), 
                    blocked_url_categories = openapi_client.models.create_network_group_policy_request_content_filtering_blocked_url_categories.createNetworkGroupPolicy_request_contentFiltering_blockedUrlCategories(
                        categories = [
                            ''
                            ], 
                        settings = 'append', ), 
                    blocked_url_patterns = openapi_client.models.create_network_group_policy_request_content_filtering_blocked_url_patterns.createNetworkGroupPolicy_request_contentFiltering_blockedUrlPatterns(
                        settings = 'append', ), ),
                firewall_and_traffic_shaping = openapi_client.models.create_network_group_policy_request_firewall_and_traffic_shaping.createNetworkGroupPolicy_request_firewallAndTrafficShaping(
                    l3_firewall_rules = [
                        openapi_client.models.create_network_group_policy_request_firewall_and_traffic_shaping_l3_firewall_rules_inner.createNetworkGroupPolicy_request_firewallAndTrafficShaping_l3FirewallRules_inner(
                            comment = '', 
                            dest_cidr = '', 
                            dest_port = '', 
                            policy = '', 
                            protocol = '', )
                        ], 
                    l7_firewall_rules = [
                        openapi_client.models.create_network_group_policy_request_firewall_and_traffic_shaping_l7_firewall_rules_inner.createNetworkGroupPolicy_request_firewallAndTrafficShaping_l7FirewallRules_inner(
                            policy = 'deny', 
                            type = 'application', 
                            value = '', )
                        ], 
                    settings = 'custom', 
                    traffic_shaping_rules = [
                        openapi_client.models.create_network_group_policy_request_firewall_and_traffic_shaping_traffic_shaping_rules_inner.createNetworkGroupPolicy_request_firewallAndTrafficShaping_trafficShapingRules_inner(
                            definitions = [
                                openapi_client.models.update_network_appliance_traffic_shaping_rules_request_rules_inner_definitions_inner.updateNetworkApplianceTrafficShapingRules_request_rules_inner_definitions_inner(
                                    type = 'application', 
                                    value = '', )
                                ], 
                            dscp_tag_value = 56, 
                            pcp_tag_value = 56, 
                            per_client_bandwidth_limits = openapi_client.models.update_network_appliance_traffic_shaping_rules_request_rules_inner_per_client_bandwidth_limits.updateNetworkApplianceTrafficShapingRules_request_rules_inner_perClientBandwidthLimits(
                                bandwidth_limits = openapi_client.models.update_network_appliance_traffic_shaping_rules_request_rules_inner_per_client_bandwidth_limits_bandwidth_limits.updateNetworkApplianceTrafficShapingRules_request_rules_inner_perClientBandwidthLimits_bandwidthLimits(
                                    limit_down = 56, 
                                    limit_up = 56, ), 
                                settings = '', ), 
                            priority = '', )
                        ], ),
                name = '',
                scheduling = openapi_client.models.create_network_group_policy_request_scheduling.createNetworkGroupPolicy_request_scheduling(
                    enabled = True, 
                    friday = openapi_client.models.create_network_group_policy_request_scheduling_friday.createNetworkGroupPolicy_request_scheduling_friday(
                        active = True, 
                        from = '', 
                        to = '', ), 
                    monday = openapi_client.models.create_network_group_policy_request_scheduling_monday.createNetworkGroupPolicy_request_scheduling_monday(
                        active = True, 
                        from = '', 
                        to = '', ), 
                    saturday = openapi_client.models.create_network_group_policy_request_scheduling_saturday.createNetworkGroupPolicy_request_scheduling_saturday(
                        active = True, 
                        from = '', 
                        to = '', ), 
                    sunday = openapi_client.models.create_network_group_policy_request_scheduling_sunday.createNetworkGroupPolicy_request_scheduling_sunday(
                        active = True, 
                        from = '', 
                        to = '', ), 
                    thursday = openapi_client.models.create_network_group_policy_request_scheduling_thursday.createNetworkGroupPolicy_request_scheduling_thursday(
                        active = True, 
                        from = '', 
                        to = '', ), 
                    tuesday = openapi_client.models.create_network_group_policy_request_scheduling_tuesday.createNetworkGroupPolicy_request_scheduling_tuesday(
                        active = True, 
                        from = '', 
                        to = '', ), 
                    wednesday = openapi_client.models.create_network_group_policy_request_scheduling_wednesday.createNetworkGroupPolicy_request_scheduling_wednesday(
                        active = True, 
                        from = '', 
                        to = '', ), ),
                splash_auth_settings = 'bypass',
                vlan_tagging = openapi_client.models.create_network_group_policy_request_vlan_tagging.createNetworkGroupPolicy_request_vlanTagging(
                    settings = 'custom', 
                    vlan_id = '', )
            )
        else:
            return UpdateNetworkGroupPolicyRequest(
        )
        """

    def testUpdateNetworkGroupPolicyRequest(self):
        """Test UpdateNetworkGroupPolicyRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.camera_api import CameraApi


class TestCameraApi(unittest.TestCase):
    """CameraApi unit test stubs"""

    def setUp(self) -> None:
        self.api = CameraApi()

    def tearDown(self) -> None:
        pass

    def test_create_network_camera_quality_retention_profile(self) -> None:
        """Test case for create_network_camera_quality_retention_profile

        Creates new quality retention profile for this network.
        """
        pass

    def test_create_network_camera_wireless_profile(self) -> None:
        """Test case for create_network_camera_wireless_profile

        Creates a new camera wireless profile for this network.
        """
        pass

    def test_create_organization_camera_custom_analytics_artifact(self) -> None:
        """Test case for create_organization_camera_custom_analytics_artifact

        Create custom analytics artifact
        """
        pass

    def test_delete_network_camera_quality_retention_profile(self) -> None:
        """Test case for delete_network_camera_quality_retention_profile

        Delete an existing quality retention profile for this network.
        """
        pass

    def test_delete_network_camera_wireless_profile(self) -> None:
        """Test case for delete_network_camera_wireless_profile

        Delete an existing camera wireless profile for this network.
        """
        pass

    def test_delete_organization_camera_custom_analytics_artifact(self) -> None:
        """Test case for delete_organization_camera_custom_analytics_artifact

        Delete Custom Analytics Artifact
        """
        pass

    def test_generate_device_camera_snapshot(self) -> None:
        """Test case for generate_device_camera_snapshot

        Generate a snapshot of what the camera sees at the specified time and return a link to that image.
        """
        pass

    def test_get_device_camera_analytics_live(self) -> None:
        """Test case for get_device_camera_analytics_live

        Returns live state from camera of analytics zones
        """
        pass

    def test_get_device_camera_analytics_overview(self) -> None:
        """Test case for get_device_camera_analytics_overview

        Returns an overview of aggregate analytics data for a timespan
        """
        pass

    def test_get_device_camera_analytics_recent(self) -> None:
        """Test case for get_device_camera_analytics_recent

        Returns most recent record for analytics zones
        """
        pass

    def test_get_device_camera_analytics_zone_history(self) -> None:
        """Test case for get_device_camera_analytics_zone_history

        Return historical records for analytic zones
        """
        pass

    def test_get_device_camera_analytics_zones(self) -> None:
        """Test case for get_device_camera_analytics_zones

        Returns all configured analytic zones for this camera
        """
        pass

    def test_get_device_camera_custom_analytics(self) -> None:
        """Test case for get_device_camera_custom_analytics

        Return custom analytics settings for a camera
        """
        pass

    def test_get_device_camera_quality_and_retention(self) -> None:
        """Test case for get_device_camera_quality_and_retention

        Returns quality and retention settings for the given camera
        """
        pass

    def test_get_device_camera_sense(self) -> None:
        """Test case for get_device_camera_sense

        Returns sense settings for a given camera
        """
        pass

    def test_get_device_camera_sense_object_detection_models(self) -> None:
        """Test case for get_device_camera_sense_object_detection_models

        Returns the MV Sense object detection model list for the given camera
        """
        pass

    def test_get_device_camera_video_link(self) -> None:
        """Test case for get_device_camera_video_link

        Returns video link to the specified camera
        """
        pass

    def test_get_device_camera_video_settings(self) -> None:
        """Test case for get_device_camera_video_settings

        Returns video settings for the given camera
        """
        pass

    def test_get_device_camera_wireless_profiles(self) -> None:
        """Test case for get_device_camera_wireless_profiles

        Returns wireless profile assigned to the given camera
        """
        pass

    def test_get_network_camera_quality_retention_profile(self) -> None:
        """Test case for get_network_camera_quality_retention_profile

        Retrieve a single quality retention profile
        """
        pass

    def test_get_network_camera_quality_retention_profiles(self) -> None:
        """Test case for get_network_camera_quality_retention_profiles

        List the quality retention profiles for this network
        """
        pass

    def test_get_network_camera_schedules(self) -> None:
        """Test case for get_network_camera_schedules

        Returns a list of all camera recording schedules.
        """
        pass

    def test_get_network_camera_wireless_profile(self) -> None:
        """Test case for get_network_camera_wireless_profile

        Retrieve a single camera wireless profile.
        """
        pass

    def test_get_network_camera_wireless_profiles(self) -> None:
        """Test case for get_network_camera_wireless_profiles

        List the camera wireless profiles for this network.
        """
        pass

    def test_get_organization_camera_custom_analytics_artifact(self) -> None:
        """Test case for get_organization_camera_custom_analytics_artifact

        Get Custom Analytics Artifact
        """
        pass

    def test_get_organization_camera_custom_analytics_artifacts(self) -> None:
        """Test case for get_organization_camera_custom_analytics_artifacts

        List Custom Analytics Artifacts
        """
        pass

    def test_get_organization_camera_onboarding_statuses(self) -> None:
        """Test case for get_organization_camera_onboarding_statuses

        Fetch onboarding status of cameras
        """
        pass

    def test_update_device_camera_custom_analytics(self) -> None:
        """Test case for update_device_camera_custom_analytics

        Update custom analytics settings for a camera
        """
        pass

    def test_update_device_camera_quality_and_retention(self) -> None:
        """Test case for update_device_camera_quality_and_retention

        Update quality and retention settings for the given camera
        """
        pass

    def test_update_device_camera_sense(self) -> None:
        """Test case for update_device_camera_sense

        Update sense settings for the given camera
        """
        pass

    def test_update_device_camera_video_settings(self) -> None:
        """Test case for update_device_camera_video_settings

        Update video settings for the given camera
        """
        pass

    def test_update_device_camera_wireless_profiles(self) -> None:
        """Test case for update_device_camera_wireless_profiles

        Assign wireless profiles to the given camera
        """
        pass

    def test_update_network_camera_quality_retention_profile(self) -> None:
        """Test case for update_network_camera_quality_retention_profile

        Update an existing quality retention profile for this network.
        """
        pass

    def test_update_network_camera_wireless_profile(self) -> None:
        """Test case for update_network_camera_wireless_profile

        Update an existing camera wireless profile in this network.
        """
        pass

    def test_update_organization_camera_onboarding_statuses(self) -> None:
        """Test case for update_organization_camera_onboarding_statuses

        Notify that credential handoff to camera has completed
        """
        pass


if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.devices_api import DevicesApi


class TestDevicesApi(unittest.TestCase):
    """DevicesApi unit test stubs"""

    def setUp(self) -> None:
        self.api = DevicesApi()

    def tearDown(self) -> None:
        pass

    def test_blink_device_leds(self) -> None:
        """Test case for blink_device_leds

        Blink the LEDs on a device
        """
        pass

    def test_checkin_network_sm_devices_1(self) -> None:
        """Test case for checkin_network_sm_devices_1

        Force check-in a set of devices
        """
        pass

    def test_claim_network_devices_1(self) -> None:
        """Test case for claim_network_devices_1

        Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
        """
        pass

    def test_clone_organization_switch_devices_1(self) -> None:
        """Test case for clone_organization_switch_devices_1

        Clone port-level and some switch-level configuration settings from a source switch to one or more target switches
        """
        pass

    def test_create_device_live_tools_ping(self) -> None:
        """Test case for create_device_live_tools_ping

        Enqueue a job to ping a target host from the device
        """
        pass

    def test_create_device_live_tools_ping_device(self) -> None:
        """Test case for create_device_live_tools_ping_device

        Enqueue a job to check connectivity status to the device
        """
        pass

    def test_get_device(self) -> None:
        """Test case for get_device

        Return a single device
        """
        pass

    def test_get_device_cellular_sims(self) -> None:
        """Test case for get_device_cellular_sims

        Return the SIM and APN configurations for a cellular device.
        """
        pass

    def test_get_device_clients(self) -> None:
        """Test case for get_device_clients

        List the clients of a device, up to a maximum of a month ago
        """
        pass

    def test_get_device_live_tools_ping(self) -> None:
        """Test case for get_device_live_tools_ping

        Return a ping job
        """
        pass

    def test_get_device_live_tools_ping_device(self) -> None:
        """Test case for get_device_live_tools_ping_device

        Return a ping device job
        """
        pass

    def test_get_device_lldp_cdp(self) -> None:
        """Test case for get_device_lldp_cdp

        List LLDP and CDP information for a device
        """
        pass

    def test_get_device_loss_and_latency_history(self) -> None:
        """Test case for get_device_loss_and_latency_history

        Get the uplink loss percentage and latency in milliseconds, and goodput in kilobits per second for a wired network device.
        """
        pass

    def test_get_device_management_interface(self) -> None:
        """Test case for get_device_management_interface

        Return the management interface settings for a device
        """
        pass

    def test_get_network_devices_1(self) -> None:
        """Test case for get_network_devices_1

        List the devices in a network
        """
        pass

    def test_get_network_sm_device_cellular_usage_history_1(self) -> None:
        """Test case for get_network_sm_device_cellular_usage_history_1

        Return the client's daily cellular data usage history
        """
        pass

    def test_get_network_sm_device_certs_1(self) -> None:
        """Test case for get_network_sm_device_certs_1

        List the certs on a device
        """
        pass

    def test_get_network_sm_device_connectivity_1(self) -> None:
        """Test case for get_network_sm_device_connectivity_1

        Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
        """
        pass

    def test_get_network_sm_device_desktop_logs_1(self) -> None:
        """Test case for get_network_sm_device_desktop_logs_1

        Return historical records of various Systems Manager network connection details for desktop devices.
        """
        pass

    def test_get_network_sm_device_device_command_logs_1(self) -> None:
        """Test case for get_network_sm_device_device_command_logs_1

        Return historical records of commands sent to Systems Manager devices
        """
        pass

    def test_get_network_sm_device_device_profiles_1(self) -> None:
        """Test case for get_network_sm_device_device_profiles_1

        Get the installed profiles associated with a device
        """
        pass

    def test_get_network_sm_device_network_adapters_1(self) -> None:
        """Test case for get_network_sm_device_network_adapters_1

        List the network adapters of a device
        """
        pass

    def test_get_network_sm_device_performance_history_1(self) -> None:
        """Test case for get_network_sm_device_performance_history_1

        Return historical records of various Systems Manager client metrics for desktop devices.
        """
        pass

    def test_get_network_sm_device_restrictions_1(self) -> None:
        """Test case for get_network_sm_device_restrictions_1

        List the restrictions on a device
        """
        pass

    def test_get_network_sm_device_security_centers_1(self) -> None:
        """Test case for get_network_sm_device_security_centers_1

        List the security centers on a device
        """
        pass

    def test_get_network_sm_device_softwares_1(self) -> None:
        """Test case for get_network_sm_device_softwares_1

        Get a list of softwares associated with a device
        """
        pass

    def test_get_network_sm_device_wlan_lists_1(self) -> None:
        """Test case for get_network_sm_device_wlan_lists_1

        List the saved SSID names on a device
        """
        pass

    def test_get_network_sm_devices_1(self) -> None:
        """Test case for get_network_sm_devices_1

        List the devices enrolled in an SM network with various specified fields and filters
        """
        pass

    def test_get_network_wireless_devices_connection_stats_1(self) -> None:
        """Test case for get_network_wireless_devices_connection_stats_1

        Aggregated connectivity info for this network, grouped by node
        """
        pass

    def test_get_network_wireless_devices_latency_stats_1(self) -> None:
        """Test case for get_network_wireless_devices_latency_stats_1

        Aggregated latency info for this network, grouped by node
        """
        pass

    def test_get_organization_devices_1(self) -> None:
        """Test case for get_organization_devices_1

        List the devices in an organization
        """
        pass

    def test_get_organization_devices_availabilities_1(self) -> None:
        """Test case for get_organization_devices_availabilities_1

        List the availability information for devices in an organization
        """
        pass

    def test_get_organization_devices_power_modules_statuses_by_device_1(self) -> None:
        """Test case for get_organization_devices_power_modules_statuses_by_device_1

        List the power status information for devices in an organization
        """
        pass

    def test_get_organization_devices_statuses_1(self) -> None:
        """Test case for get_organization_devices_statuses_1

        List the status of every Meraki device in the organization
        """
        pass

    def test_get_organization_devices_statuses_overview_1(self) -> None:
        """Test case for get_organization_devices_statuses_overview_1

        Return an overview of current device statuses
        """
        pass

    def test_get_organization_devices_uplinks_addresses_by_device_1(self) -> None:
        """Test case for get_organization_devices_uplinks_addresses_by_device_1

        List the current uplink addresses for devices in an organization.
        """
        pass

    def test_get_organization_devices_uplinks_loss_and_latency_1(self) -> None:
        """Test case for get_organization_devices_uplinks_loss_and_latency_1

        Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
        """
        pass

    def test_get_organization_inventory_device_2(self) -> None:
        """Test case for get_organization_inventory_device_2

        Return a single device from the inventory of an organization
        """
        pass

    def test_get_organization_inventory_devices_2(self) -> None:
        """Test case for get_organization_inventory_devices_2

        Return the device inventory for an organization
        """
        pass

    def test_get_organization_summary_top_devices_by_usage_3(self) -> None:
        """Test case for get_organization_summary_top_devices_by_usage_3

        Return metrics for organization's top 10 devices sorted by data usage over given time range
        """
        pass

    def test_get_organization_summary_top_devices_models_by_usage_3(self) -> None:
        """Test case for get_organization_summary_top_devices_models_by_usage_3

        Return metrics for organization's top 10 device models sorted by data usage over given time range
        """
        pass

    def test_get_organization_wireless_devices_ethernet_statuses_1(self) -> None:
        """Test case for get_organization_wireless_devices_ethernet_statuses_1

        Endpoint to see power status for wireless devices
        """
        pass

    def test_lock_network_sm_devices_1(self) -> None:
        """Test case for lock_network_sm_devices_1

        Lock a set of devices
        """
        pass

    def test_modify_network_sm_devices_tags_1(self) -> None:
        """Test case for modify_network_sm_devices_tags_1

        Add, delete, or update the tags of a set of devices
        """
        pass

    def test_move_network_sm_devices_1(self) -> None:
        """Test case for move_network_sm_devices_1

        Move a set of devices to a new network
        """
        pass

    def test_reboot_device(self) -> None:
        """Test case for reboot_device

        Reboot a device
        """
        pass

    def test_refresh_network_sm_device_details_1(self) -> None:
        """Test case for refresh_network_sm_device_details_1

        Refresh the details of a device
        """
        pass

    def test_remove_network_devices_1(self) -> None:
        """Test case for remove_network_devices_1

        Remove a single device
        """
        pass

    def test_unenroll_network_sm_device_1(self) -> None:
        """Test case for unenroll_network_sm_device_1

        Unenroll a device
        """
        pass

    def test_update_device(self) -> None:
        """Test case for update_device

        Update the attributes of a device
        """
        pass

    def test_update_device_cellular_sims(self) -> None:
        """Test case for update_device_cellular_sims

        Updates the SIM and APN configurations for a cellular device.
        """
        pass

    def test_update_device_management_interface(self) -> None:
        """Test case for update_device_management_interface

        Update the management interface settings for a device
        """
        pass

    def test_update_network_sm_devices_fields_1(self) -> None:
        """Test case for update_network_sm_devices_fields_1

        Modify the fields of a device
        """
        pass

    def test_vmx_network_devices_claim_1(self) -> None:
        """Test case for vmx_network_devices_claim_1

        Claim a vMX into a network
        """
        pass

    def test_wipe_network_sm_devices_1(self) -> None:
        """Test case for wipe_network_sm_devices_1

        Wipe a device
        """
        pass


if __name__ == '__main__':
    unittest.main()

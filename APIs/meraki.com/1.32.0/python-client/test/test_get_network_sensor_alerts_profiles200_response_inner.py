# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.get_network_sensor_alerts_profiles200_response_inner import GetNetworkSensorAlertsProfiles200ResponseInner

class TestGetNetworkSensorAlertsProfiles200ResponseInner(unittest.TestCase):
    """GetNetworkSensorAlertsProfiles200ResponseInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetNetworkSensorAlertsProfiles200ResponseInner:
        """Test GetNetworkSensorAlertsProfiles200ResponseInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetNetworkSensorAlertsProfiles200ResponseInner`
        """
        model = GetNetworkSensorAlertsProfiles200ResponseInner()
        if include_optional:
            return GetNetworkSensorAlertsProfiles200ResponseInner(
                conditions = [
                    openapi_client.models.get_network_sensor_alerts_profiles_200_response_inner_conditions_inner.getNetworkSensorAlertsProfiles_200_response_inner_conditions_inner(
                        direction = 'above', 
                        duration = 0, 
                        metric = '', 
                        threshold = openapi_client.models.get_network_sensor_alerts_profiles_200_response_inner_conditions_inner_threshold.getNetworkSensorAlertsProfiles_200_response_inner_conditions_inner_threshold(
                            door = openapi_client.models.get_network_sensor_alerts_profiles_200_response_inner_conditions_inner_threshold_door.getNetworkSensorAlertsProfiles_200_response_inner_conditions_inner_threshold_door(
                                open = True, ), 
                            humidity = openapi_client.models.get_network_sensor_alerts_profiles_200_response_inner_conditions_inner_threshold_humidity.getNetworkSensorAlertsProfiles_200_response_inner_conditions_inner_threshold_humidity(
                                quality = 'fair', 
                                relative_percentage = 56, ), 
                            indoor_air_quality = openapi_client.models.get_network_sensor_alerts_profiles_200_response_inner_conditions_inner_threshold_indoor_air_quality.getNetworkSensorAlertsProfiles_200_response_inner_conditions_inner_threshold_indoorAirQuality(
                                quality = 'fair', 
                                score = 56, ), 
                            noise = openapi_client.models.get_network_sensor_alerts_profiles_200_response_inner_conditions_inner_threshold_noise.getNetworkSensorAlertsProfiles_200_response_inner_conditions_inner_threshold_noise(
                                ambient = openapi_client.models.get_network_sensor_alerts_profiles_200_response_inner_conditions_inner_threshold_noise_ambient.getNetworkSensorAlertsProfiles_200_response_inner_conditions_inner_threshold_noise_ambient(
                                    level = 56, 
                                    quality = 'fair', ), ), 
                            pm25 = openapi_client.models.get_network_sensor_alerts_profiles_200_response_inner_conditions_inner_threshold_pm25.getNetworkSensorAlertsProfiles_200_response_inner_conditions_inner_threshold_pm25(
                                concentration = 56, 
                                quality = 'fair', ), 
                            temperature = openapi_client.models.get_network_sensor_alerts_profiles_200_response_inner_conditions_inner_threshold_temperature.getNetworkSensorAlertsProfiles_200_response_inner_conditions_inner_threshold_temperature(
                                celsius = 1.337, 
                                fahrenheit = 1.337, 
                                quality = 'fair', ), 
                            tvoc = openapi_client.models.get_network_sensor_alerts_profiles_200_response_inner_conditions_inner_threshold_tvoc.getNetworkSensorAlertsProfiles_200_response_inner_conditions_inner_threshold_tvoc(
                                concentration = 56, 
                                quality = 'fair', ), 
                            water = openapi_client.models.get_network_sensor_alerts_profiles_200_response_inner_conditions_inner_threshold_water.getNetworkSensorAlertsProfiles_200_response_inner_conditions_inner_threshold_water(
                                present = True, ), ), )
                    ],
                name = '',
                profile_id = '',
                recipients = openapi_client.models.get_network_sensor_alerts_profiles_200_response_inner_recipients.getNetworkSensorAlertsProfiles_200_response_inner_recipients(
                    emails = [
                        ''
                        ], 
                    http_server_ids = [
                        ''
                        ], 
                    sms_numbers = [
                        ''
                        ], ),
                schedule = openapi_client.models.get_network_sensor_alerts_profiles_200_response_inner_schedule.getNetworkSensorAlertsProfiles_200_response_inner_schedule(
                    id = '', 
                    name = '', ),
                serials = [
                    ''
                    ]
            )
        else:
            return GetNetworkSensorAlertsProfiles200ResponseInner(
                conditions = [
                    openapi_client.models.get_network_sensor_alerts_profiles_200_response_inner_conditions_inner.getNetworkSensorAlertsProfiles_200_response_inner_conditions_inner(
                        direction = 'above', 
                        duration = 0, 
                        metric = '', 
                        threshold = openapi_client.models.get_network_sensor_alerts_profiles_200_response_inner_conditions_inner_threshold.getNetworkSensorAlertsProfiles_200_response_inner_conditions_inner_threshold(
                            door = openapi_client.models.get_network_sensor_alerts_profiles_200_response_inner_conditions_inner_threshold_door.getNetworkSensorAlertsProfiles_200_response_inner_conditions_inner_threshold_door(
                                open = True, ), 
                            humidity = openapi_client.models.get_network_sensor_alerts_profiles_200_response_inner_conditions_inner_threshold_humidity.getNetworkSensorAlertsProfiles_200_response_inner_conditions_inner_threshold_humidity(
                                quality = 'fair', 
                                relative_percentage = 56, ), 
                            indoor_air_quality = openapi_client.models.get_network_sensor_alerts_profiles_200_response_inner_conditions_inner_threshold_indoor_air_quality.getNetworkSensorAlertsProfiles_200_response_inner_conditions_inner_threshold_indoorAirQuality(
                                quality = 'fair', 
                                score = 56, ), 
                            noise = openapi_client.models.get_network_sensor_alerts_profiles_200_response_inner_conditions_inner_threshold_noise.getNetworkSensorAlertsProfiles_200_response_inner_conditions_inner_threshold_noise(
                                ambient = openapi_client.models.get_network_sensor_alerts_profiles_200_response_inner_conditions_inner_threshold_noise_ambient.getNetworkSensorAlertsProfiles_200_response_inner_conditions_inner_threshold_noise_ambient(
                                    level = 56, 
                                    quality = 'fair', ), ), 
                            pm25 = openapi_client.models.get_network_sensor_alerts_profiles_200_response_inner_conditions_inner_threshold_pm25.getNetworkSensorAlertsProfiles_200_response_inner_conditions_inner_threshold_pm25(
                                concentration = 56, 
                                quality = 'fair', ), 
                            temperature = openapi_client.models.get_network_sensor_alerts_profiles_200_response_inner_conditions_inner_threshold_temperature.getNetworkSensorAlertsProfiles_200_response_inner_conditions_inner_threshold_temperature(
                                celsius = 1.337, 
                                fahrenheit = 1.337, 
                                quality = 'fair', ), 
                            tvoc = openapi_client.models.get_network_sensor_alerts_profiles_200_response_inner_conditions_inner_threshold_tvoc.getNetworkSensorAlertsProfiles_200_response_inner_conditions_inner_threshold_tvoc(
                                concentration = 56, 
                                quality = 'fair', ), 
                            water = openapi_client.models.get_network_sensor_alerts_profiles_200_response_inner_conditions_inner_threshold_water.getNetworkSensorAlertsProfiles_200_response_inner_conditions_inner_threshold_water(
                                present = True, ), ), )
                    ],
        )
        """

    def testGetNetworkSensorAlertsProfiles200ResponseInner(self):
        """Test GetNetworkSensorAlertsProfiles200ResponseInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.move_organization_licensing_coterm_licenses200_response import MoveOrganizationLicensingCotermLicenses200Response

class TestMoveOrganizationLicensingCotermLicenses200Response(unittest.TestCase):
    """MoveOrganizationLicensingCotermLicenses200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MoveOrganizationLicensingCotermLicenses200Response:
        """Test MoveOrganizationLicensingCotermLicenses200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MoveOrganizationLicensingCotermLicenses200Response`
        """
        model = MoveOrganizationLicensingCotermLicenses200Response()
        if include_optional:
            return MoveOrganizationLicensingCotermLicenses200Response(
                moved_licenses = [
                    openapi_client.models.get_organization_licensing_coterm_licenses_200_response_inner.getOrganizationLicensingCotermLicenses_200_response_inner(
                        claimed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        counts = [
                            openapi_client.models.get_organization_licensing_coterm_licenses_200_response_inner_counts_inner.getOrganizationLicensingCotermLicenses_200_response_inner_counts_inner(
                                count = 56, 
                                model = '', )
                            ], 
                        duration = 56, 
                        editions = [
                            openapi_client.models.get_organization_licensing_coterm_licenses_200_response_inner_editions_inner.getOrganizationLicensingCotermLicenses_200_response_inner_editions_inner(
                                edition = '', 
                                product_type = '', )
                            ], 
                        expired = True, 
                        invalidated = True, 
                        invalidated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        key = '', 
                        mode = 'addDevices', 
                        organization_id = '', 
                        started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                remainder_licenses = [
                    openapi_client.models.get_organization_licensing_coterm_licenses_200_response_inner.getOrganizationLicensingCotermLicenses_200_response_inner(
                        claimed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        counts = [
                            openapi_client.models.get_organization_licensing_coterm_licenses_200_response_inner_counts_inner.getOrganizationLicensingCotermLicenses_200_response_inner_counts_inner(
                                count = 56, 
                                model = '', )
                            ], 
                        duration = 56, 
                        editions = [
                            openapi_client.models.get_organization_licensing_coterm_licenses_200_response_inner_editions_inner.getOrganizationLicensingCotermLicenses_200_response_inner_editions_inner(
                                edition = '', 
                                product_type = '', )
                            ], 
                        expired = True, 
                        invalidated = True, 
                        invalidated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        key = '', 
                        mode = 'addDevices', 
                        organization_id = '', 
                        started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ]
            )
        else:
            return MoveOrganizationLicensingCotermLicenses200Response(
        )
        """

    def testMoveOrganizationLicensingCotermLicenses200Response(self):
        """Test MoveOrganizationLicensingCotermLicenses200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

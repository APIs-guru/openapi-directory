# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.create_network_firmware_upgrades_staged_event_request import CreateNetworkFirmwareUpgradesStagedEventRequest

class TestCreateNetworkFirmwareUpgradesStagedEventRequest(unittest.TestCase):
    """CreateNetworkFirmwareUpgradesStagedEventRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateNetworkFirmwareUpgradesStagedEventRequest:
        """Test CreateNetworkFirmwareUpgradesStagedEventRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateNetworkFirmwareUpgradesStagedEventRequest`
        """
        model = CreateNetworkFirmwareUpgradesStagedEventRequest()
        if include_optional:
            return CreateNetworkFirmwareUpgradesStagedEventRequest(
                products = openapi_client.models.create_network_firmware_upgrades_staged_event_request_products.createNetworkFirmwareUpgradesStagedEvent_request_products(
                    switch = openapi_client.models.create_network_firmware_upgrades_staged_event_request_products_switch.createNetworkFirmwareUpgradesStagedEvent_request_products_switch(
                        next_upgrade = openapi_client.models.create_network_firmware_upgrades_staged_event_request_products_switch_next_upgrade.createNetworkFirmwareUpgradesStagedEvent_request_products_switch_nextUpgrade(
                            to_version = openapi_client.models.create_network_firmware_upgrades_staged_event_request_products_switch_next_upgrade_to_version.createNetworkFirmwareUpgradesStagedEvent_request_products_switch_nextUpgrade_toVersion(
                                id = '', ), ), ), ),
                stages = [
                    openapi_client.models.update_network_firmware_upgrades_staged_events_request_stages_inner.updateNetworkFirmwareUpgradesStagedEvents_request_stages_inner(
                        group = openapi_client.models.update_network_firmware_upgrades_staged_events_request_stages_inner_group.updateNetworkFirmwareUpgradesStagedEvents_request_stages_inner_group(
                            id = '', ), 
                        milestones = openapi_client.models.update_network_firmware_upgrades_staged_events_request_stages_inner_milestones.updateNetworkFirmwareUpgradesStagedEvents_request_stages_inner_milestones(
                            scheduled_for = '', ), )
                    ]
            )
        else:
            return CreateNetworkFirmwareUpgradesStagedEventRequest(
                stages = [
                    openapi_client.models.update_network_firmware_upgrades_staged_events_request_stages_inner.updateNetworkFirmwareUpgradesStagedEvents_request_stages_inner(
                        group = openapi_client.models.update_network_firmware_upgrades_staged_events_request_stages_inner_group.updateNetworkFirmwareUpgradesStagedEvents_request_stages_inner_group(
                            id = '', ), 
                        milestones = openapi_client.models.update_network_firmware_upgrades_staged_events_request_stages_inner_milestones.updateNetworkFirmwareUpgradesStagedEvents_request_stages_inner_milestones(
                            scheduled_for = '', ), )
                    ],
        )
        """

    def testCreateNetworkFirmwareUpgradesStagedEventRequest(self):
        """Test CreateNetworkFirmwareUpgradesStagedEventRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

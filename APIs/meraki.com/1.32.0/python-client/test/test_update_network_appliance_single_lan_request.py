# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.update_network_appliance_single_lan_request import UpdateNetworkApplianceSingleLanRequest

class TestUpdateNetworkApplianceSingleLanRequest(unittest.TestCase):
    """UpdateNetworkApplianceSingleLanRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UpdateNetworkApplianceSingleLanRequest:
        """Test UpdateNetworkApplianceSingleLanRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UpdateNetworkApplianceSingleLanRequest`
        """
        model = UpdateNetworkApplianceSingleLanRequest()
        if include_optional:
            return UpdateNetworkApplianceSingleLanRequest(
                appliance_ip = '',
                ipv6 = openapi_client.models.update_network_appliance_single_lan_request_ipv6.updateNetworkApplianceSingleLan_request_ipv6(
                    enabled = True, 
                    prefix_assignments = [
                        openapi_client.models.update_network_appliance_single_lan_request_ipv6_prefix_assignments_inner.updateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner(
                            autonomous = True, 
                            origin = openapi_client.models.update_network_appliance_single_lan_request_ipv6_prefix_assignments_inner_origin.updateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner_origin(
                                interfaces = [
                                    ''
                                    ], 
                                type = 'independent', ), 
                            static_appliance_ip6 = '', 
                            static_prefix = '', )
                        ], ),
                mandatory_dhcp = openapi_client.models.update_network_appliance_single_lan_request_mandatory_dhcp.updateNetworkApplianceSingleLan_request_mandatoryDhcp(
                    enabled = True, ),
                subnet = ''
            )
        else:
            return UpdateNetworkApplianceSingleLanRequest(
        )
        """

    def testUpdateNetworkApplianceSingleLanRequest(self):
        """Test UpdateNetworkApplianceSingleLanRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

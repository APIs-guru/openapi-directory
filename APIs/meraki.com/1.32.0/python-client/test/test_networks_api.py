# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.networks_api import NetworksApi


class TestNetworksApi(unittest.TestCase):
    """NetworksApi unit test stubs"""

    def setUp(self) -> None:
        self.api = NetworksApi()

    def tearDown(self) -> None:
        pass

    def test_bind_network(self) -> None:
        """Test case for bind_network

        Bind a network to a template.
        """
        pass

    def test_claim_network_devices(self) -> None:
        """Test case for claim_network_devices

        Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
        """
        pass

    def test_combine_organization_networks_1(self) -> None:
        """Test case for combine_organization_networks_1

        Combine multiple networks into a single network
        """
        pass

    def test_create_network_firmware_upgrades_rollback(self) -> None:
        """Test case for create_network_firmware_upgrades_rollback

        Rollback a Firmware Upgrade For A Network
        """
        pass

    def test_create_network_firmware_upgrades_staged_event(self) -> None:
        """Test case for create_network_firmware_upgrades_staged_event

        Create a Staged Upgrade Event for a network
        """
        pass

    def test_create_network_firmware_upgrades_staged_group(self) -> None:
        """Test case for create_network_firmware_upgrades_staged_group

        Create a Staged Upgrade Group for a network
        """
        pass

    def test_create_network_floor_plan(self) -> None:
        """Test case for create_network_floor_plan

        Upload a floor plan
        """
        pass

    def test_create_network_group_policy(self) -> None:
        """Test case for create_network_group_policy

        Create a group policy
        """
        pass

    def test_create_network_meraki_auth_user(self) -> None:
        """Test case for create_network_meraki_auth_user

        Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
        """
        pass

    def test_create_network_mqtt_broker(self) -> None:
        """Test case for create_network_mqtt_broker

        Add an MQTT broker
        """
        pass

    def test_create_network_pii_request(self) -> None:
        """Test case for create_network_pii_request

        Submit a new delete or restrict processing PII request
        """
        pass

    def test_create_network_webhooks_http_server(self) -> None:
        """Test case for create_network_webhooks_http_server

        Add an HTTP server to a network
        """
        pass

    def test_create_network_webhooks_payload_template(self) -> None:
        """Test case for create_network_webhooks_payload_template

        Create a webhook payload template for a network
        """
        pass

    def test_create_network_webhooks_webhook_test(self) -> None:
        """Test case for create_network_webhooks_webhook_test

        Send a test webhook for a network
        """
        pass

    def test_create_organization_network_1(self) -> None:
        """Test case for create_organization_network_1

        Create a network
        """
        pass

    def test_defer_network_firmware_upgrades_staged_events(self) -> None:
        """Test case for defer_network_firmware_upgrades_staged_events

        Postpone by 1 week all pending staged upgrade stages for a network
        """
        pass

    def test_delete_network(self) -> None:
        """Test case for delete_network

        Delete a network
        """
        pass

    def test_delete_network_firmware_upgrades_staged_group(self) -> None:
        """Test case for delete_network_firmware_upgrades_staged_group

        Delete a Staged Upgrade Group
        """
        pass

    def test_delete_network_floor_plan(self) -> None:
        """Test case for delete_network_floor_plan

        Destroy a floor plan
        """
        pass

    def test_delete_network_group_policy(self) -> None:
        """Test case for delete_network_group_policy

        Delete a group policy
        """
        pass

    def test_delete_network_meraki_auth_user(self) -> None:
        """Test case for delete_network_meraki_auth_user

        Deauthorize a user
        """
        pass

    def test_delete_network_mqtt_broker(self) -> None:
        """Test case for delete_network_mqtt_broker

        Delete an MQTT broker
        """
        pass

    def test_delete_network_pii_request(self) -> None:
        """Test case for delete_network_pii_request

        Delete a restrict processing PII request
        """
        pass

    def test_delete_network_webhooks_http_server(self) -> None:
        """Test case for delete_network_webhooks_http_server

        Delete an HTTP server from a network
        """
        pass

    def test_delete_network_webhooks_payload_template(self) -> None:
        """Test case for delete_network_webhooks_payload_template

        Destroy a webhook payload template for a network
        """
        pass

    def test_get_network(self) -> None:
        """Test case for get_network

        Return a network
        """
        pass

    def test_get_network_alerts_history(self) -> None:
        """Test case for get_network_alerts_history

        Return the alert history for this network
        """
        pass

    def test_get_network_alerts_settings(self) -> None:
        """Test case for get_network_alerts_settings

        Return the alert configuration for this network
        """
        pass

    def test_get_network_bluetooth_client(self) -> None:
        """Test case for get_network_bluetooth_client

        Return a Bluetooth client
        """
        pass

    def test_get_network_bluetooth_clients(self) -> None:
        """Test case for get_network_bluetooth_clients

        List the Bluetooth clients seen by APs in this network
        """
        pass

    def test_get_network_client(self) -> None:
        """Test case for get_network_client

        Return the client associated with the given identifier
        """
        pass

    def test_get_network_client_policy(self) -> None:
        """Test case for get_network_client_policy

        Return the policy assigned to a client on the network
        """
        pass

    def test_get_network_client_splash_authorization_status(self) -> None:
        """Test case for get_network_client_splash_authorization_status

        Return the splash authorization for a client, for each SSID they've associated with through splash
        """
        pass

    def test_get_network_client_traffic_history(self) -> None:
        """Test case for get_network_client_traffic_history

        Return the client's network traffic data over time
        """
        pass

    def test_get_network_client_usage_history(self) -> None:
        """Test case for get_network_client_usage_history

        Return the client's daily usage history
        """
        pass

    def test_get_network_clients(self) -> None:
        """Test case for get_network_clients

        List the clients that have used this network in the timespan
        """
        pass

    def test_get_network_clients_application_usage(self) -> None:
        """Test case for get_network_clients_application_usage

        Return the application usage data for clients
        """
        pass

    def test_get_network_clients_bandwidth_usage_history(self) -> None:
        """Test case for get_network_clients_bandwidth_usage_history

        Returns a timeseries of total traffic consumption rates for all clients on a network within a given timespan, in megabits per second.
        """
        pass

    def test_get_network_clients_overview(self) -> None:
        """Test case for get_network_clients_overview

        Return overview statistics for network clients
        """
        pass

    def test_get_network_clients_usage_histories(self) -> None:
        """Test case for get_network_clients_usage_histories

        Return the usage histories for clients
        """
        pass

    def test_get_network_devices(self) -> None:
        """Test case for get_network_devices

        List the devices in a network
        """
        pass

    def test_get_network_events(self) -> None:
        """Test case for get_network_events

        List the events for the network
        """
        pass

    def test_get_network_events_event_types(self) -> None:
        """Test case for get_network_events_event_types

        List the event type to human-readable description
        """
        pass

    def test_get_network_firmware_upgrades(self) -> None:
        """Test case for get_network_firmware_upgrades

        Get firmware upgrade information for a network
        """
        pass

    def test_get_network_firmware_upgrades_staged_events(self) -> None:
        """Test case for get_network_firmware_upgrades_staged_events

        Get the Staged Upgrade Event from a network
        """
        pass

    def test_get_network_firmware_upgrades_staged_group(self) -> None:
        """Test case for get_network_firmware_upgrades_staged_group

        Get a Staged Upgrade Group from a network
        """
        pass

    def test_get_network_firmware_upgrades_staged_groups(self) -> None:
        """Test case for get_network_firmware_upgrades_staged_groups

        List of Staged Upgrade Groups in a network
        """
        pass

    def test_get_network_firmware_upgrades_staged_stages(self) -> None:
        """Test case for get_network_firmware_upgrades_staged_stages

        Order of Staged Upgrade Groups in a network
        """
        pass

    def test_get_network_floor_plan(self) -> None:
        """Test case for get_network_floor_plan

        Find a floor plan by ID
        """
        pass

    def test_get_network_floor_plans(self) -> None:
        """Test case for get_network_floor_plans

        List the floor plans that belong to your network
        """
        pass

    def test_get_network_group_policies(self) -> None:
        """Test case for get_network_group_policies

        List the group policies in a network
        """
        pass

    def test_get_network_group_policy(self) -> None:
        """Test case for get_network_group_policy

        Display a group policy
        """
        pass

    def test_get_network_health_alerts(self) -> None:
        """Test case for get_network_health_alerts

        Return all global alerts on this network
        """
        pass

    def test_get_network_meraki_auth_user(self) -> None:
        """Test case for get_network_meraki_auth_user

        Return the Meraki Auth splash guest, RADIUS, or client VPN user
        """
        pass

    def test_get_network_meraki_auth_users(self) -> None:
        """Test case for get_network_meraki_auth_users

        List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
        """
        pass

    def test_get_network_mqtt_broker(self) -> None:
        """Test case for get_network_mqtt_broker

        Return an MQTT broker
        """
        pass

    def test_get_network_mqtt_brokers(self) -> None:
        """Test case for get_network_mqtt_brokers

        List the MQTT brokers for this network
        """
        pass

    def test_get_network_netflow(self) -> None:
        """Test case for get_network_netflow

        Return the NetFlow traffic reporting settings for a network
        """
        pass

    def test_get_network_network_health_channel_utilization(self) -> None:
        """Test case for get_network_network_health_channel_utilization

        Get the channel utilization over each radio for all APs in a network.
        """
        pass

    def test_get_network_pii_pii_keys(self) -> None:
        """Test case for get_network_pii_pii_keys

        List the keys required to access Personally Identifiable Information (PII) for a given identifier
        """
        pass

    def test_get_network_pii_request(self) -> None:
        """Test case for get_network_pii_request

        Return a PII request
        """
        pass

    def test_get_network_pii_requests(self) -> None:
        """Test case for get_network_pii_requests

        List the PII requests for this network or organization
        """
        pass

    def test_get_network_pii_sm_devices_for_key(self) -> None:
        """Test case for get_network_pii_sm_devices_for_key

        Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier
        """
        pass

    def test_get_network_pii_sm_owners_for_key(self) -> None:
        """Test case for get_network_pii_sm_owners_for_key

        Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier
        """
        pass

    def test_get_network_policies_by_client(self) -> None:
        """Test case for get_network_policies_by_client

        Get policies for all clients with policies
        """
        pass

    def test_get_network_settings(self) -> None:
        """Test case for get_network_settings

        Return the settings for a network
        """
        pass

    def test_get_network_snmp(self) -> None:
        """Test case for get_network_snmp

        Return the SNMP settings for a network
        """
        pass

    def test_get_network_splash_login_attempts(self) -> None:
        """Test case for get_network_splash_login_attempts

        List the splash login attempts for a network
        """
        pass

    def test_get_network_syslog_servers(self) -> None:
        """Test case for get_network_syslog_servers

        List the syslog servers for a network
        """
        pass

    def test_get_network_topology_link_layer(self) -> None:
        """Test case for get_network_topology_link_layer

        List the LLDP and CDP information for all discovered devices and connections in a network.
        """
        pass

    def test_get_network_traffic(self) -> None:
        """Test case for get_network_traffic

        Return the traffic analysis data for this network
        """
        pass

    def test_get_network_traffic_analysis(self) -> None:
        """Test case for get_network_traffic_analysis

        Return the traffic analysis settings for a network
        """
        pass

    def test_get_network_traffic_shaping_application_categories(self) -> None:
        """Test case for get_network_traffic_shaping_application_categories

        Returns the application categories for traffic shaping rules.
        """
        pass

    def test_get_network_traffic_shaping_dscp_tagging_options(self) -> None:
        """Test case for get_network_traffic_shaping_dscp_tagging_options

        Returns the available DSCP tagging options for your traffic shaping rules.
        """
        pass

    def test_get_network_webhooks_http_server(self) -> None:
        """Test case for get_network_webhooks_http_server

        Return an HTTP server for a network
        """
        pass

    def test_get_network_webhooks_http_servers(self) -> None:
        """Test case for get_network_webhooks_http_servers

        List the HTTP servers for a network
        """
        pass

    def test_get_network_webhooks_payload_template(self) -> None:
        """Test case for get_network_webhooks_payload_template

        Get the webhook payload template for a network
        """
        pass

    def test_get_network_webhooks_payload_templates(self) -> None:
        """Test case for get_network_webhooks_payload_templates

        List the webhook payload templates for a network
        """
        pass

    def test_get_network_webhooks_webhook_test(self) -> None:
        """Test case for get_network_webhooks_webhook_test

        Return the status of a webhook test for a network
        """
        pass

    def test_get_organization_inventory_onboarding_cloud_monitoring_networks_4(self) -> None:
        """Test case for get_organization_inventory_onboarding_cloud_monitoring_networks_4

        Returns list of networks eligible for adding cloud monitored device
        """
        pass

    def test_get_organization_networks_1(self) -> None:
        """Test case for get_organization_networks_1

        List the networks that the user has privileges on in an organization
        """
        pass

    def test_provision_network_clients(self) -> None:
        """Test case for provision_network_clients

        Provisions a client with a name and policy
        """
        pass

    def test_remove_network_devices(self) -> None:
        """Test case for remove_network_devices

        Remove a single device
        """
        pass

    def test_rollbacks_network_firmware_upgrades_staged_events(self) -> None:
        """Test case for rollbacks_network_firmware_upgrades_staged_events

        Rollback a Staged Upgrade Event for a network
        """
        pass

    def test_split_network(self) -> None:
        """Test case for split_network

        Split a combined network into individual networks for each type of device
        """
        pass

    def test_unbind_network(self) -> None:
        """Test case for unbind_network

        Unbind a network from a template.
        """
        pass

    def test_update_network(self) -> None:
        """Test case for update_network

        Update a network
        """
        pass

    def test_update_network_alerts_settings(self) -> None:
        """Test case for update_network_alerts_settings

        Update the alert configuration for this network
        """
        pass

    def test_update_network_client_policy(self) -> None:
        """Test case for update_network_client_policy

        Update the policy assigned to a client on the network
        """
        pass

    def test_update_network_client_splash_authorization_status(self) -> None:
        """Test case for update_network_client_splash_authorization_status

        Update a client's splash authorization
        """
        pass

    def test_update_network_firmware_upgrades(self) -> None:
        """Test case for update_network_firmware_upgrades

        Update firmware upgrade information for a network
        """
        pass

    def test_update_network_firmware_upgrades_staged_events(self) -> None:
        """Test case for update_network_firmware_upgrades_staged_events

        Update the Staged Upgrade Event for a network
        """
        pass

    def test_update_network_firmware_upgrades_staged_group(self) -> None:
        """Test case for update_network_firmware_upgrades_staged_group

        Update a Staged Upgrade Group for a network
        """
        pass

    def test_update_network_firmware_upgrades_staged_stages(self) -> None:
        """Test case for update_network_firmware_upgrades_staged_stages

        Assign Staged Upgrade Group order in the sequence.
        """
        pass

    def test_update_network_floor_plan(self) -> None:
        """Test case for update_network_floor_plan

        Update a floor plan's geolocation and other meta data
        """
        pass

    def test_update_network_group_policy(self) -> None:
        """Test case for update_network_group_policy

        Update a group policy
        """
        pass

    def test_update_network_meraki_auth_user(self) -> None:
        """Test case for update_network_meraki_auth_user

        Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
        """
        pass

    def test_update_network_mqtt_broker(self) -> None:
        """Test case for update_network_mqtt_broker

        Update an MQTT broker
        """
        pass

    def test_update_network_netflow(self) -> None:
        """Test case for update_network_netflow

        Update the NetFlow traffic reporting settings for a network
        """
        pass

    def test_update_network_settings(self) -> None:
        """Test case for update_network_settings

        Update the settings for a network
        """
        pass

    def test_update_network_snmp(self) -> None:
        """Test case for update_network_snmp

        Update the SNMP settings for a network
        """
        pass

    def test_update_network_syslog_servers(self) -> None:
        """Test case for update_network_syslog_servers

        Update the syslog servers for a network
        """
        pass

    def test_update_network_traffic_analysis(self) -> None:
        """Test case for update_network_traffic_analysis

        Update the traffic analysis settings for a network
        """
        pass

    def test_update_network_webhooks_http_server(self) -> None:
        """Test case for update_network_webhooks_http_server

        Update an HTTP server
        """
        pass

    def test_update_network_webhooks_payload_template(self) -> None:
        """Test case for update_network_webhooks_payload_template

        Update a webhook payload template for a network
        """
        pass

    def test_vmx_network_devices_claim(self) -> None:
        """Test case for vmx_network_devices_claim

        Claim a vMX into a network
        """
        pass


if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.create_network_appliance_vlan_request import CreateNetworkApplianceVlanRequest

class TestCreateNetworkApplianceVlanRequest(unittest.TestCase):
    """CreateNetworkApplianceVlanRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateNetworkApplianceVlanRequest:
        """Test CreateNetworkApplianceVlanRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateNetworkApplianceVlanRequest`
        """
        model = CreateNetworkApplianceVlanRequest()
        if include_optional:
            return CreateNetworkApplianceVlanRequest(
                appliance_ip = '',
                cidr = '',
                group_policy_id = '',
                id = '',
                ipv6 = openapi_client.models.update_network_appliance_single_lan_request_ipv6.updateNetworkApplianceSingleLan_request_ipv6(
                    enabled = True, 
                    prefix_assignments = [
                        openapi_client.models.update_network_appliance_single_lan_request_ipv6_prefix_assignments_inner.updateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner(
                            autonomous = True, 
                            origin = openapi_client.models.update_network_appliance_single_lan_request_ipv6_prefix_assignments_inner_origin.updateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner_origin(
                                interfaces = [
                                    ''
                                    ], 
                                type = 'independent', ), 
                            static_appliance_ip6 = '', 
                            static_prefix = '', )
                        ], ),
                mandatory_dhcp = openapi_client.models.get_network_appliance_vlans_200_response_inner_mandatory_dhcp.getNetworkApplianceVlans_200_response_inner_mandatoryDhcp(
                    enabled = True, ),
                mask = 56,
                name = '',
                subnet = '',
                template_vlan_type = 'same'
            )
        else:
            return CreateNetworkApplianceVlanRequest(
                id = '',
                name = '',
        )
        """

    def testCreateNetworkApplianceVlanRequest(self):
        """Test CreateNetworkApplianceVlanRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

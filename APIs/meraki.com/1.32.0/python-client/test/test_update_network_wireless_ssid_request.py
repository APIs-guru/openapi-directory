# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.update_network_wireless_ssid_request import UpdateNetworkWirelessSsidRequest

class TestUpdateNetworkWirelessSsidRequest(unittest.TestCase):
    """UpdateNetworkWirelessSsidRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UpdateNetworkWirelessSsidRequest:
        """Test UpdateNetworkWirelessSsidRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UpdateNetworkWirelessSsidRequest`
        """
        model = UpdateNetworkWirelessSsidRequest()
        if include_optional:
            return UpdateNetworkWirelessSsidRequest(
                active_directory = openapi_client.models.update_network_wireless_ssid_request_active_directory.updateNetworkWirelessSsid_request_activeDirectory(
                    credentials = openapi_client.models.update_network_wireless_ssid_request_active_directory_credentials.updateNetworkWirelessSsid_request_activeDirectory_credentials(
                        logon_name = '', 
                        password = '', ), 
                    servers = [
                        openapi_client.models.update_network_wireless_ssid_request_active_directory_servers_inner.updateNetworkWirelessSsid_request_activeDirectory_servers_inner(
                            host = '', 
                            port = 56, )
                        ], ),
                adult_content_filtering_enabled = True,
                ap_tags_and_vlan_ids = [
                    openapi_client.models.update_network_wireless_ssid_request_ap_tags_and_vlan_ids_inner.updateNetworkWirelessSsid_request_apTagsAndVlanIds_inner(
                        tags = [
                            ''
                            ], 
                        vlan_id = 56, )
                    ],
                auth_mode = '8021x-google',
                availability_tags = [
                    ''
                    ],
                available_on_all_aps = True,
                band_selection = '',
                concentrator_network_id = '',
                default_vlan_id = 56,
                disassociate_clients_on_vpn_failover = True,
                dns_rewrite = openapi_client.models.update_network_wireless_ssid_request_dns_rewrite.updateNetworkWirelessSsid_request_dnsRewrite(
                    dns_custom_nameservers = [
                        ''
                        ], 
                    enabled = True, ),
                dot11r = openapi_client.models.update_network_wireless_ssid_request_dot11r.updateNetworkWirelessSsid_request_dot11r(
                    adaptive = True, 
                    enabled = True, ),
                dot11w = openapi_client.models.update_network_wireless_ssid_request_dot11w.updateNetworkWirelessSsid_request_dot11w(
                    enabled = True, 
                    required = True, ),
                enabled = True,
                encryption_mode = 'wep',
                enterprise_admin_access = 'access disabled',
                gre = openapi_client.models.update_network_wireless_ssid_request_gre.updateNetworkWirelessSsid_request_gre(
                    concentrator = openapi_client.models.update_network_wireless_ssid_request_gre_concentrator.updateNetworkWirelessSsid_request_gre_concentrator(
                        host = '', ), 
                    key = 56, ),
                ip_assignment_mode = '',
                lan_isolation_enabled = True,
                ldap = openapi_client.models.update_network_wireless_ssid_request_ldap.updateNetworkWirelessSsid_request_ldap(
                    base_distinguished_name = '', 
                    credentials = openapi_client.models.update_network_wireless_ssid_request_ldap_credentials.updateNetworkWirelessSsid_request_ldap_credentials(
                        distinguished_name = '', 
                        password = '', ), 
                    server_ca_certificate = openapi_client.models.update_network_wireless_ssid_request_ldap_server_ca_certificate.updateNetworkWirelessSsid_request_ldap_serverCaCertificate(
                        contents = '', ), 
                    servers = [
                        openapi_client.models.update_network_wireless_ssid_request_ldap_servers_inner.updateNetworkWirelessSsid_request_ldap_servers_inner(
                            host = '', 
                            port = 56, )
                        ], ),
                local_radius = openapi_client.models.update_network_wireless_ssid_request_local_radius.updateNetworkWirelessSsid_request_localRadius(
                    cache_timeout = 56, 
                    certificate_authentication = openapi_client.models.update_network_wireless_ssid_request_local_radius_certificate_authentication.updateNetworkWirelessSsid_request_localRadius_certificateAuthentication(
                        client_root_ca_certificate = openapi_client.models.update_network_wireless_ssid_request_local_radius_certificate_authentication_client_root_ca_certificate.updateNetworkWirelessSsid_request_localRadius_certificateAuthentication_clientRootCaCertificate(
                            contents = '', ), 
                        enabled = True, 
                        ocsp_responder_url = '', 
                        use_ldap = True, 
                        use_ocsp = True, ), 
                    password_authentication = openapi_client.models.update_network_wireless_ssid_request_local_radius_password_authentication.updateNetworkWirelessSsid_request_localRadius_passwordAuthentication(
                        enabled = True, ), ),
                mandatory_dhcp_enabled = True,
                min_bitrate = 1.337,
                name = '',
                oauth = openapi_client.models.update_network_wireless_ssid_request_oauth.updateNetworkWirelessSsid_request_oauth(
                    allowed_domains = [
                        ''
                        ], ),
                per_client_bandwidth_limit_down = 56,
                per_client_bandwidth_limit_up = 56,
                per_ssid_bandwidth_limit_down = 56,
                per_ssid_bandwidth_limit_up = 56,
                psk = '',
                radius_accounting_enabled = True,
                radius_accounting_interim_interval = 56,
                radius_accounting_servers = [
                    openapi_client.models.update_network_wireless_ssid_request_radius_accounting_servers_inner.updateNetworkWirelessSsid_request_radiusAccountingServers_inner(
                        ca_certificate = '', 
                        host = '', 
                        port = 56, 
                        radsec_enabled = True, 
                        secret = '', )
                    ],
                radius_attribute_for_group_policies = 'Airespace-ACL-Name',
                radius_authentication_nas_id = '',
                radius_called_station_id = '',
                radius_coa_enabled = True,
                radius_failover_policy = 'Allow access',
                radius_fallback_enabled = True,
                radius_guest_vlan_enabled = True,
                radius_guest_vlan_id = 56,
                radius_load_balancing_policy = 'Round robin',
                radius_override = True,
                radius_proxy_enabled = True,
                radius_server_attempts_limit = 56,
                radius_server_timeout = 56,
                radius_servers = [
                    openapi_client.models.update_network_wireless_ssid_request_radius_servers_inner.updateNetworkWirelessSsid_request_radiusServers_inner(
                        ca_certificate = '', 
                        host = '', 
                        open_roaming_certificate_id = 56, 
                        port = 56, 
                        radsec_enabled = True, 
                        secret = '', )
                    ],
                radius_testing_enabled = True,
                secondary_concentrator_network_id = '',
                speed_burst = openapi_client.models.update_network_wireless_ssid_request_speed_burst.updateNetworkWirelessSsid_request_speedBurst(
                    enabled = True, ),
                splash_guest_sponsor_domains = [
                    ''
                    ],
                splash_page = 'Billing',
                use_vlan_tagging = True,
                visible = True,
                vlan_id = 56,
                walled_garden_enabled = True,
                walled_garden_ranges = [
                    ''
                    ],
                wpa_encryption_mode = 'WPA1 and WPA2'
            )
        else:
            return UpdateNetworkWirelessSsidRequest(
        )
        """

    def testUpdateNetworkWirelessSsidRequest(self):
        """Test UpdateNetworkWirelessSsidRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Meraki Dashboard API

    The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

    The version of the OpenAPI document: 1.32.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.provision_network_clients_request_policies_by_ssid import ProvisionNetworkClientsRequestPoliciesBySsid

class TestProvisionNetworkClientsRequestPoliciesBySsid(unittest.TestCase):
    """ProvisionNetworkClientsRequestPoliciesBySsid unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ProvisionNetworkClientsRequestPoliciesBySsid:
        """Test ProvisionNetworkClientsRequestPoliciesBySsid
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ProvisionNetworkClientsRequestPoliciesBySsid`
        """
        model = ProvisionNetworkClientsRequestPoliciesBySsid()
        if include_optional:
            return ProvisionNetworkClientsRequestPoliciesBySsid(
                var_0 = openapi_client.models.provision_network_clients_request_policies_by_ssid_0.provisionNetworkClients_request_policiesBySsid_0(
                    device_policy = 'Allowed', 
                    group_policy_id = '', ),
                var_1 = openapi_client.models.provision_network_clients_request_policies_by_ssid_0.provisionNetworkClients_request_policiesBySsid_0(
                    device_policy = 'Allowed', 
                    group_policy_id = '', ),
                var_2 = openapi_client.models.provision_network_clients_request_policies_by_ssid_0.provisionNetworkClients_request_policiesBySsid_0(
                    device_policy = 'Allowed', 
                    group_policy_id = '', ),
                var_3 = openapi_client.models.provision_network_clients_request_policies_by_ssid_0.provisionNetworkClients_request_policiesBySsid_0(
                    device_policy = 'Allowed', 
                    group_policy_id = '', ),
                var_4 = openapi_client.models.provision_network_clients_request_policies_by_ssid_0.provisionNetworkClients_request_policiesBySsid_0(
                    device_policy = 'Allowed', 
                    group_policy_id = '', ),
                var_5 = openapi_client.models.provision_network_clients_request_policies_by_ssid_0.provisionNetworkClients_request_policiesBySsid_0(
                    device_policy = 'Allowed', 
                    group_policy_id = '', ),
                var_6 = openapi_client.models.provision_network_clients_request_policies_by_ssid_0.provisionNetworkClients_request_policiesBySsid_0(
                    device_policy = 'Allowed', 
                    group_policy_id = '', ),
                var_7 = openapi_client.models.provision_network_clients_request_policies_by_ssid_0.provisionNetworkClients_request_policiesBySsid_0(
                    device_policy = 'Allowed', 
                    group_policy_id = '', ),
                var_8 = openapi_client.models.provision_network_clients_request_policies_by_ssid_0.provisionNetworkClients_request_policiesBySsid_0(
                    device_policy = 'Allowed', 
                    group_policy_id = '', ),
                var_9 = openapi_client.models.provision_network_clients_request_policies_by_ssid_0.provisionNetworkClients_request_policiesBySsid_0(
                    device_policy = 'Allowed', 
                    group_policy_id = '', ),
                var_10 = openapi_client.models.provision_network_clients_request_policies_by_ssid_0.provisionNetworkClients_request_policiesBySsid_0(
                    device_policy = 'Allowed', 
                    group_policy_id = '', ),
                var_11 = openapi_client.models.provision_network_clients_request_policies_by_ssid_0.provisionNetworkClients_request_policiesBySsid_0(
                    device_policy = 'Allowed', 
                    group_policy_id = '', ),
                var_12 = openapi_client.models.provision_network_clients_request_policies_by_ssid_0.provisionNetworkClients_request_policiesBySsid_0(
                    device_policy = 'Allowed', 
                    group_policy_id = '', ),
                var_13 = openapi_client.models.provision_network_clients_request_policies_by_ssid_0.provisionNetworkClients_request_policiesBySsid_0(
                    device_policy = 'Allowed', 
                    group_policy_id = '', ),
                var_14 = openapi_client.models.provision_network_clients_request_policies_by_ssid_0.provisionNetworkClients_request_policiesBySsid_0(
                    device_policy = 'Allowed', 
                    group_policy_id = '', )
            )
        else:
            return ProvisionNetworkClientsRequestPoliciesBySsid(
        )
        """

    def testProvisionNetworkClientsRequestPoliciesBySsid(self):
        """Test ProvisionNetworkClientsRequestPoliciesBySsid"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

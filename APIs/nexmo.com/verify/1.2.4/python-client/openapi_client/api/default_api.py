# coding: utf-8

"""
    Verify API

    The Verify API helps you to implement 2FA (two-factor authentication) in your applications. This is useful for:  * Protecting against spam, by preventing spammers from creating multiple accounts * Monitoring suspicious activity, by forcing an account user to verify ownership of a number * Ensuring that you can reach your users at any time because you have their correct phone number More information is available at <https://developer.nexmo.com/verify>

    The version of the OpenAPI document: 1.2.4
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.verify_check200_response import VerifyCheck200Response
from openapi_client.models.verify_control200_response import VerifyControl200Response
from openapi_client.models.verify_request_with_psd2200_response import VerifyRequestWithPSD2200Response
from openapi_client.models.verify_search200_response import VerifySearch200Response

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def verify_check(
        self,
        format: Annotated[StrictStr, Field(description="The response format.")],
        api_key: Annotated[StrictStr, Field(description="You can find your API key in your [account dashboard](https://dashboard.nexmo.com)")],
        api_secret: Annotated[StrictStr, Field(description="You can find your API secret in your [account dashboard](https://dashboard.nexmo.com)")],
        code: Annotated[str, Field(min_length=4, strict=True, max_length=6, description="The verification code entered by your user.")],
        request_id: Annotated[str, Field(strict=True, max_length=32, description="The Verify request to check. This is the `request_id` you received in the response to the Verify request.")],
        ip_address: Annotated[Optional[StrictStr], Field(description="(This field is no longer used)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VerifyCheck200Response:
        """Verify Check

        Use Verify check to confirm that the PIN you received from your user matches the one sent by Vonage in your Verify request.  1. Send the verification `code` that your user supplied, with the corresponding `request_id` from the Verify request. 2. Check the `status` of the response to determine if the code the user supplied matches the one sent by Vonage.  *Note that this endpoint is available by `GET` request as well as `POST`.*

        :param format: The response format. (required)
        :type format: str
        :param api_key: You can find your API key in your [account dashboard](https://dashboard.nexmo.com) (required)
        :type api_key: str
        :param api_secret: You can find your API secret in your [account dashboard](https://dashboard.nexmo.com) (required)
        :type api_secret: str
        :param code: The verification code entered by your user. (required)
        :type code: str
        :param request_id: The Verify request to check. This is the `request_id` you received in the response to the Verify request. (required)
        :type request_id: str
        :param ip_address: (This field is no longer used)
        :type ip_address: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_check_serialize(
            format=format,
            api_key=api_key,
            api_secret=api_secret,
            code=code,
            request_id=request_id,
            ip_address=ip_address,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VerifyCheck200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def verify_check_with_http_info(
        self,
        format: Annotated[StrictStr, Field(description="The response format.")],
        api_key: Annotated[StrictStr, Field(description="You can find your API key in your [account dashboard](https://dashboard.nexmo.com)")],
        api_secret: Annotated[StrictStr, Field(description="You can find your API secret in your [account dashboard](https://dashboard.nexmo.com)")],
        code: Annotated[str, Field(min_length=4, strict=True, max_length=6, description="The verification code entered by your user.")],
        request_id: Annotated[str, Field(strict=True, max_length=32, description="The Verify request to check. This is the `request_id` you received in the response to the Verify request.")],
        ip_address: Annotated[Optional[StrictStr], Field(description="(This field is no longer used)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VerifyCheck200Response]:
        """Verify Check

        Use Verify check to confirm that the PIN you received from your user matches the one sent by Vonage in your Verify request.  1. Send the verification `code` that your user supplied, with the corresponding `request_id` from the Verify request. 2. Check the `status` of the response to determine if the code the user supplied matches the one sent by Vonage.  *Note that this endpoint is available by `GET` request as well as `POST`.*

        :param format: The response format. (required)
        :type format: str
        :param api_key: You can find your API key in your [account dashboard](https://dashboard.nexmo.com) (required)
        :type api_key: str
        :param api_secret: You can find your API secret in your [account dashboard](https://dashboard.nexmo.com) (required)
        :type api_secret: str
        :param code: The verification code entered by your user. (required)
        :type code: str
        :param request_id: The Verify request to check. This is the `request_id` you received in the response to the Verify request. (required)
        :type request_id: str
        :param ip_address: (This field is no longer used)
        :type ip_address: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_check_serialize(
            format=format,
            api_key=api_key,
            api_secret=api_secret,
            code=code,
            request_id=request_id,
            ip_address=ip_address,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VerifyCheck200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def verify_check_without_preload_content(
        self,
        format: Annotated[StrictStr, Field(description="The response format.")],
        api_key: Annotated[StrictStr, Field(description="You can find your API key in your [account dashboard](https://dashboard.nexmo.com)")],
        api_secret: Annotated[StrictStr, Field(description="You can find your API secret in your [account dashboard](https://dashboard.nexmo.com)")],
        code: Annotated[str, Field(min_length=4, strict=True, max_length=6, description="The verification code entered by your user.")],
        request_id: Annotated[str, Field(strict=True, max_length=32, description="The Verify request to check. This is the `request_id` you received in the response to the Verify request.")],
        ip_address: Annotated[Optional[StrictStr], Field(description="(This field is no longer used)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Verify Check

        Use Verify check to confirm that the PIN you received from your user matches the one sent by Vonage in your Verify request.  1. Send the verification `code` that your user supplied, with the corresponding `request_id` from the Verify request. 2. Check the `status` of the response to determine if the code the user supplied matches the one sent by Vonage.  *Note that this endpoint is available by `GET` request as well as `POST`.*

        :param format: The response format. (required)
        :type format: str
        :param api_key: You can find your API key in your [account dashboard](https://dashboard.nexmo.com) (required)
        :type api_key: str
        :param api_secret: You can find your API secret in your [account dashboard](https://dashboard.nexmo.com) (required)
        :type api_secret: str
        :param code: The verification code entered by your user. (required)
        :type code: str
        :param request_id: The Verify request to check. This is the `request_id` you received in the response to the Verify request. (required)
        :type request_id: str
        :param ip_address: (This field is no longer used)
        :type ip_address: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_check_serialize(
            format=format,
            api_key=api_key,
            api_secret=api_secret,
            code=code,
            request_id=request_id,
            ip_address=ip_address,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VerifyCheck200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _verify_check_serialize(
        self,
        format,
        api_key,
        api_secret,
        code,
        request_id,
        ip_address,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if format is not None:
            _path_params['format'] = format
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if api_key is not None:
            _form_params.append(('api_key', api_key))
        if api_secret is not None:
            _form_params.append(('api_secret', api_secret))
        if code is not None:
            _form_params.append(('code', code))
        if ip_address is not None:
            _form_params.append(('ip_address', ip_address))
        if request_id is not None:
            _form_params.append(('request_id', request_id))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/xml'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/check/{format}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def verify_control(
        self,
        format: Annotated[StrictStr, Field(description="The response format.")],
        api_key: Annotated[StrictStr, Field(description="You can find your API key in your [account dashboard](https://dashboard.nexmo.com)")],
        api_secret: Annotated[StrictStr, Field(description="You can find your API secret in your [account dashboard](https://dashboard.nexmo.com)")],
        cmd: Annotated[StrictStr, Field(description="The possible commands are `cancel` to request cancellation of the verification process, or `trigger_next_event` to advance  to the next verification event (if any). Cancellation is only possible 30 seconds after the start of the verification request and before the second event (either TTS or SMS) has taken place.")],
        request_id: Annotated[StrictStr, Field(description="The `request_id` you received in the response to the Verify request.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VerifyControl200Response:
        """Verify Control

        Control the progress of your Verify requests. To cancel an existing Verify request, or to trigger the next verification event:   1. Send a Verify control request with the appropriate command (`cmd`) for what you want to achieve.  2. Check the `status` in the response.   *Note that this endpoint is available by `GET` request as well as `POST`.*

        :param format: The response format. (required)
        :type format: str
        :param api_key: You can find your API key in your [account dashboard](https://dashboard.nexmo.com) (required)
        :type api_key: str
        :param api_secret: You can find your API secret in your [account dashboard](https://dashboard.nexmo.com) (required)
        :type api_secret: str
        :param cmd: The possible commands are `cancel` to request cancellation of the verification process, or `trigger_next_event` to advance  to the next verification event (if any). Cancellation is only possible 30 seconds after the start of the verification request and before the second event (either TTS or SMS) has taken place. (required)
        :type cmd: str
        :param request_id: The `request_id` you received in the response to the Verify request. (required)
        :type request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_control_serialize(
            format=format,
            api_key=api_key,
            api_secret=api_secret,
            cmd=cmd,
            request_id=request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VerifyControl200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def verify_control_with_http_info(
        self,
        format: Annotated[StrictStr, Field(description="The response format.")],
        api_key: Annotated[StrictStr, Field(description="You can find your API key in your [account dashboard](https://dashboard.nexmo.com)")],
        api_secret: Annotated[StrictStr, Field(description="You can find your API secret in your [account dashboard](https://dashboard.nexmo.com)")],
        cmd: Annotated[StrictStr, Field(description="The possible commands are `cancel` to request cancellation of the verification process, or `trigger_next_event` to advance  to the next verification event (if any). Cancellation is only possible 30 seconds after the start of the verification request and before the second event (either TTS or SMS) has taken place.")],
        request_id: Annotated[StrictStr, Field(description="The `request_id` you received in the response to the Verify request.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VerifyControl200Response]:
        """Verify Control

        Control the progress of your Verify requests. To cancel an existing Verify request, or to trigger the next verification event:   1. Send a Verify control request with the appropriate command (`cmd`) for what you want to achieve.  2. Check the `status` in the response.   *Note that this endpoint is available by `GET` request as well as `POST`.*

        :param format: The response format. (required)
        :type format: str
        :param api_key: You can find your API key in your [account dashboard](https://dashboard.nexmo.com) (required)
        :type api_key: str
        :param api_secret: You can find your API secret in your [account dashboard](https://dashboard.nexmo.com) (required)
        :type api_secret: str
        :param cmd: The possible commands are `cancel` to request cancellation of the verification process, or `trigger_next_event` to advance  to the next verification event (if any). Cancellation is only possible 30 seconds after the start of the verification request and before the second event (either TTS or SMS) has taken place. (required)
        :type cmd: str
        :param request_id: The `request_id` you received in the response to the Verify request. (required)
        :type request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_control_serialize(
            format=format,
            api_key=api_key,
            api_secret=api_secret,
            cmd=cmd,
            request_id=request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VerifyControl200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def verify_control_without_preload_content(
        self,
        format: Annotated[StrictStr, Field(description="The response format.")],
        api_key: Annotated[StrictStr, Field(description="You can find your API key in your [account dashboard](https://dashboard.nexmo.com)")],
        api_secret: Annotated[StrictStr, Field(description="You can find your API secret in your [account dashboard](https://dashboard.nexmo.com)")],
        cmd: Annotated[StrictStr, Field(description="The possible commands are `cancel` to request cancellation of the verification process, or `trigger_next_event` to advance  to the next verification event (if any). Cancellation is only possible 30 seconds after the start of the verification request and before the second event (either TTS or SMS) has taken place.")],
        request_id: Annotated[StrictStr, Field(description="The `request_id` you received in the response to the Verify request.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Verify Control

        Control the progress of your Verify requests. To cancel an existing Verify request, or to trigger the next verification event:   1. Send a Verify control request with the appropriate command (`cmd`) for what you want to achieve.  2. Check the `status` in the response.   *Note that this endpoint is available by `GET` request as well as `POST`.*

        :param format: The response format. (required)
        :type format: str
        :param api_key: You can find your API key in your [account dashboard](https://dashboard.nexmo.com) (required)
        :type api_key: str
        :param api_secret: You can find your API secret in your [account dashboard](https://dashboard.nexmo.com) (required)
        :type api_secret: str
        :param cmd: The possible commands are `cancel` to request cancellation of the verification process, or `trigger_next_event` to advance  to the next verification event (if any). Cancellation is only possible 30 seconds after the start of the verification request and before the second event (either TTS or SMS) has taken place. (required)
        :type cmd: str
        :param request_id: The `request_id` you received in the response to the Verify request. (required)
        :type request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_control_serialize(
            format=format,
            api_key=api_key,
            api_secret=api_secret,
            cmd=cmd,
            request_id=request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VerifyControl200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _verify_control_serialize(
        self,
        format,
        api_key,
        api_secret,
        cmd,
        request_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if format is not None:
            _path_params['format'] = format
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if api_key is not None:
            _form_params.append(('api_key', api_key))
        if api_secret is not None:
            _form_params.append(('api_secret', api_secret))
        if cmd is not None:
            _form_params.append(('cmd', cmd))
        if request_id is not None:
            _form_params.append(('request_id', request_id))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/xml'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/control/{format}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def verify_request_with_psd2(
        self,
        format: Annotated[StrictStr, Field(description="The response format.")],
        amount: Annotated[Union[StrictFloat, StrictInt], Field(description="The decimal amount of the payment to be confirmed, in Euros")],
        api_key: Annotated[StrictStr, Field(description="You can find your API key in your [account dashboard](https://dashboard.nexmo.com)")],
        api_secret: Annotated[StrictStr, Field(description="You can find your API secret in your [account dashboard](https://dashboard.nexmo.com)")],
        number: Annotated[StrictStr, Field(description="The mobile or landline phone number to verify. Unless you are setting `country` explicitly, this number must be in [E.164](https://en.wikipedia.org/wiki/E.164) format.")],
        payee: Annotated[str, Field(strict=True, max_length=18, description="An alphanumeric string to indicate to the user the name of the recipient that they are confirming a payment to.")],
        code_length: Annotated[Optional[StrictInt], Field(description="The length of the verification code.")] = None,
        country: Annotated[Optional[StrictStr], Field(description="If you do not provide `number` in international format or you are not sure if `number` is correctly formatted, specify the two-character country code in `country`. Verify will then format the number for you.")] = None,
        lg: Annotated[Optional[StrictStr], Field(description="By default, the SMS or text-to-speech (TTS) message is generated in the locale that matches the `number`. For example, the text message or TTS message for a `33*` number is sent in French. Use this parameter to explicitly control the language used. *Note: Voice calls in English for `bg-bg`, `ee-et`, `ga-ie`, `lv-lv`, `lt-lt`, `mt-mt`, `sk-sk`, `sk-si`")] = None,
        next_event_wait: Annotated[Optional[Annotated[int, Field(le=900, strict=True, ge=60)]], Field(description="Specifies the wait time in seconds between attempts to deliver the verification code.")] = None,
        pin_expiry: Annotated[Optional[Annotated[int, Field(le=3600, strict=True, ge=60)]], Field(description="How long the generated verification code is valid for, in seconds. When you specify both `pin_expiry` and `next_event_wait` then `pin_expiry` must be an integer multiple of `next_event_wait` otherwise `pin_expiry` is defaulted to equal next_event_wait. See [changing the event timings](https://developer.nexmo.com/verify/guides/changing-default-timings).")] = None,
        workflow_id: Annotated[Optional[StrictInt], Field(description="Selects the predefined sequence of SMS and TTS (Text To Speech) actions to use in order to convey the PIN to your user. For example, an id of 1 identifies the workflow SMS - TTS - TTS. For a list of all workflows and their associated ids, please visit the [developer portal](https://developer.nexmo.com/verify/guides/workflows-and-events).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VerifyRequestWithPSD2200Response:
        """PSD2 (Payment Services Directive 2) Request

        Use Verify request to generate and send a PIN to your user to authorize a payment: 1. Create a request to send a verification code to your user. 2. Check the `status` field in the response to ensure that your request was successful (zero is success). 3. Use the `request_id` field in the response for the Verify check. (Please note that XML format is not supported for the Payment Services Directive endpoint at this time.)

        :param format: The response format. (required)
        :type format: str
        :param amount: The decimal amount of the payment to be confirmed, in Euros (required)
        :type amount: float
        :param api_key: You can find your API key in your [account dashboard](https://dashboard.nexmo.com) (required)
        :type api_key: str
        :param api_secret: You can find your API secret in your [account dashboard](https://dashboard.nexmo.com) (required)
        :type api_secret: str
        :param number: The mobile or landline phone number to verify. Unless you are setting `country` explicitly, this number must be in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
        :type number: str
        :param payee: An alphanumeric string to indicate to the user the name of the recipient that they are confirming a payment to. (required)
        :type payee: str
        :param code_length: The length of the verification code.
        :type code_length: int
        :param country: If you do not provide `number` in international format or you are not sure if `number` is correctly formatted, specify the two-character country code in `country`. Verify will then format the number for you.
        :type country: str
        :param lg: By default, the SMS or text-to-speech (TTS) message is generated in the locale that matches the `number`. For example, the text message or TTS message for a `33*` number is sent in French. Use this parameter to explicitly control the language used. *Note: Voice calls in English for `bg-bg`, `ee-et`, `ga-ie`, `lv-lv`, `lt-lt`, `mt-mt`, `sk-sk`, `sk-si`
        :type lg: str
        :param next_event_wait: Specifies the wait time in seconds between attempts to deliver the verification code.
        :type next_event_wait: int
        :param pin_expiry: How long the generated verification code is valid for, in seconds. When you specify both `pin_expiry` and `next_event_wait` then `pin_expiry` must be an integer multiple of `next_event_wait` otherwise `pin_expiry` is defaulted to equal next_event_wait. See [changing the event timings](https://developer.nexmo.com/verify/guides/changing-default-timings).
        :type pin_expiry: int
        :param workflow_id: Selects the predefined sequence of SMS and TTS (Text To Speech) actions to use in order to convey the PIN to your user. For example, an id of 1 identifies the workflow SMS - TTS - TTS. For a list of all workflows and their associated ids, please visit the [developer portal](https://developer.nexmo.com/verify/guides/workflows-and-events).
        :type workflow_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_request_with_psd2_serialize(
            format=format,
            amount=amount,
            api_key=api_key,
            api_secret=api_secret,
            number=number,
            payee=payee,
            code_length=code_length,
            country=country,
            lg=lg,
            next_event_wait=next_event_wait,
            pin_expiry=pin_expiry,
            workflow_id=workflow_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VerifyRequestWithPSD2200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def verify_request_with_psd2_with_http_info(
        self,
        format: Annotated[StrictStr, Field(description="The response format.")],
        amount: Annotated[Union[StrictFloat, StrictInt], Field(description="The decimal amount of the payment to be confirmed, in Euros")],
        api_key: Annotated[StrictStr, Field(description="You can find your API key in your [account dashboard](https://dashboard.nexmo.com)")],
        api_secret: Annotated[StrictStr, Field(description="You can find your API secret in your [account dashboard](https://dashboard.nexmo.com)")],
        number: Annotated[StrictStr, Field(description="The mobile or landline phone number to verify. Unless you are setting `country` explicitly, this number must be in [E.164](https://en.wikipedia.org/wiki/E.164) format.")],
        payee: Annotated[str, Field(strict=True, max_length=18, description="An alphanumeric string to indicate to the user the name of the recipient that they are confirming a payment to.")],
        code_length: Annotated[Optional[StrictInt], Field(description="The length of the verification code.")] = None,
        country: Annotated[Optional[StrictStr], Field(description="If you do not provide `number` in international format or you are not sure if `number` is correctly formatted, specify the two-character country code in `country`. Verify will then format the number for you.")] = None,
        lg: Annotated[Optional[StrictStr], Field(description="By default, the SMS or text-to-speech (TTS) message is generated in the locale that matches the `number`. For example, the text message or TTS message for a `33*` number is sent in French. Use this parameter to explicitly control the language used. *Note: Voice calls in English for `bg-bg`, `ee-et`, `ga-ie`, `lv-lv`, `lt-lt`, `mt-mt`, `sk-sk`, `sk-si`")] = None,
        next_event_wait: Annotated[Optional[Annotated[int, Field(le=900, strict=True, ge=60)]], Field(description="Specifies the wait time in seconds between attempts to deliver the verification code.")] = None,
        pin_expiry: Annotated[Optional[Annotated[int, Field(le=3600, strict=True, ge=60)]], Field(description="How long the generated verification code is valid for, in seconds. When you specify both `pin_expiry` and `next_event_wait` then `pin_expiry` must be an integer multiple of `next_event_wait` otherwise `pin_expiry` is defaulted to equal next_event_wait. See [changing the event timings](https://developer.nexmo.com/verify/guides/changing-default-timings).")] = None,
        workflow_id: Annotated[Optional[StrictInt], Field(description="Selects the predefined sequence of SMS and TTS (Text To Speech) actions to use in order to convey the PIN to your user. For example, an id of 1 identifies the workflow SMS - TTS - TTS. For a list of all workflows and their associated ids, please visit the [developer portal](https://developer.nexmo.com/verify/guides/workflows-and-events).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VerifyRequestWithPSD2200Response]:
        """PSD2 (Payment Services Directive 2) Request

        Use Verify request to generate and send a PIN to your user to authorize a payment: 1. Create a request to send a verification code to your user. 2. Check the `status` field in the response to ensure that your request was successful (zero is success). 3. Use the `request_id` field in the response for the Verify check. (Please note that XML format is not supported for the Payment Services Directive endpoint at this time.)

        :param format: The response format. (required)
        :type format: str
        :param amount: The decimal amount of the payment to be confirmed, in Euros (required)
        :type amount: float
        :param api_key: You can find your API key in your [account dashboard](https://dashboard.nexmo.com) (required)
        :type api_key: str
        :param api_secret: You can find your API secret in your [account dashboard](https://dashboard.nexmo.com) (required)
        :type api_secret: str
        :param number: The mobile or landline phone number to verify. Unless you are setting `country` explicitly, this number must be in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
        :type number: str
        :param payee: An alphanumeric string to indicate to the user the name of the recipient that they are confirming a payment to. (required)
        :type payee: str
        :param code_length: The length of the verification code.
        :type code_length: int
        :param country: If you do not provide `number` in international format or you are not sure if `number` is correctly formatted, specify the two-character country code in `country`. Verify will then format the number for you.
        :type country: str
        :param lg: By default, the SMS or text-to-speech (TTS) message is generated in the locale that matches the `number`. For example, the text message or TTS message for a `33*` number is sent in French. Use this parameter to explicitly control the language used. *Note: Voice calls in English for `bg-bg`, `ee-et`, `ga-ie`, `lv-lv`, `lt-lt`, `mt-mt`, `sk-sk`, `sk-si`
        :type lg: str
        :param next_event_wait: Specifies the wait time in seconds between attempts to deliver the verification code.
        :type next_event_wait: int
        :param pin_expiry: How long the generated verification code is valid for, in seconds. When you specify both `pin_expiry` and `next_event_wait` then `pin_expiry` must be an integer multiple of `next_event_wait` otherwise `pin_expiry` is defaulted to equal next_event_wait. See [changing the event timings](https://developer.nexmo.com/verify/guides/changing-default-timings).
        :type pin_expiry: int
        :param workflow_id: Selects the predefined sequence of SMS and TTS (Text To Speech) actions to use in order to convey the PIN to your user. For example, an id of 1 identifies the workflow SMS - TTS - TTS. For a list of all workflows and their associated ids, please visit the [developer portal](https://developer.nexmo.com/verify/guides/workflows-and-events).
        :type workflow_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_request_with_psd2_serialize(
            format=format,
            amount=amount,
            api_key=api_key,
            api_secret=api_secret,
            number=number,
            payee=payee,
            code_length=code_length,
            country=country,
            lg=lg,
            next_event_wait=next_event_wait,
            pin_expiry=pin_expiry,
            workflow_id=workflow_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VerifyRequestWithPSD2200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def verify_request_with_psd2_without_preload_content(
        self,
        format: Annotated[StrictStr, Field(description="The response format.")],
        amount: Annotated[Union[StrictFloat, StrictInt], Field(description="The decimal amount of the payment to be confirmed, in Euros")],
        api_key: Annotated[StrictStr, Field(description="You can find your API key in your [account dashboard](https://dashboard.nexmo.com)")],
        api_secret: Annotated[StrictStr, Field(description="You can find your API secret in your [account dashboard](https://dashboard.nexmo.com)")],
        number: Annotated[StrictStr, Field(description="The mobile or landline phone number to verify. Unless you are setting `country` explicitly, this number must be in [E.164](https://en.wikipedia.org/wiki/E.164) format.")],
        payee: Annotated[str, Field(strict=True, max_length=18, description="An alphanumeric string to indicate to the user the name of the recipient that they are confirming a payment to.")],
        code_length: Annotated[Optional[StrictInt], Field(description="The length of the verification code.")] = None,
        country: Annotated[Optional[StrictStr], Field(description="If you do not provide `number` in international format or you are not sure if `number` is correctly formatted, specify the two-character country code in `country`. Verify will then format the number for you.")] = None,
        lg: Annotated[Optional[StrictStr], Field(description="By default, the SMS or text-to-speech (TTS) message is generated in the locale that matches the `number`. For example, the text message or TTS message for a `33*` number is sent in French. Use this parameter to explicitly control the language used. *Note: Voice calls in English for `bg-bg`, `ee-et`, `ga-ie`, `lv-lv`, `lt-lt`, `mt-mt`, `sk-sk`, `sk-si`")] = None,
        next_event_wait: Annotated[Optional[Annotated[int, Field(le=900, strict=True, ge=60)]], Field(description="Specifies the wait time in seconds between attempts to deliver the verification code.")] = None,
        pin_expiry: Annotated[Optional[Annotated[int, Field(le=3600, strict=True, ge=60)]], Field(description="How long the generated verification code is valid for, in seconds. When you specify both `pin_expiry` and `next_event_wait` then `pin_expiry` must be an integer multiple of `next_event_wait` otherwise `pin_expiry` is defaulted to equal next_event_wait. See [changing the event timings](https://developer.nexmo.com/verify/guides/changing-default-timings).")] = None,
        workflow_id: Annotated[Optional[StrictInt], Field(description="Selects the predefined sequence of SMS and TTS (Text To Speech) actions to use in order to convey the PIN to your user. For example, an id of 1 identifies the workflow SMS - TTS - TTS. For a list of all workflows and their associated ids, please visit the [developer portal](https://developer.nexmo.com/verify/guides/workflows-and-events).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """PSD2 (Payment Services Directive 2) Request

        Use Verify request to generate and send a PIN to your user to authorize a payment: 1. Create a request to send a verification code to your user. 2. Check the `status` field in the response to ensure that your request was successful (zero is success). 3. Use the `request_id` field in the response for the Verify check. (Please note that XML format is not supported for the Payment Services Directive endpoint at this time.)

        :param format: The response format. (required)
        :type format: str
        :param amount: The decimal amount of the payment to be confirmed, in Euros (required)
        :type amount: float
        :param api_key: You can find your API key in your [account dashboard](https://dashboard.nexmo.com) (required)
        :type api_key: str
        :param api_secret: You can find your API secret in your [account dashboard](https://dashboard.nexmo.com) (required)
        :type api_secret: str
        :param number: The mobile or landline phone number to verify. Unless you are setting `country` explicitly, this number must be in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
        :type number: str
        :param payee: An alphanumeric string to indicate to the user the name of the recipient that they are confirming a payment to. (required)
        :type payee: str
        :param code_length: The length of the verification code.
        :type code_length: int
        :param country: If you do not provide `number` in international format or you are not sure if `number` is correctly formatted, specify the two-character country code in `country`. Verify will then format the number for you.
        :type country: str
        :param lg: By default, the SMS or text-to-speech (TTS) message is generated in the locale that matches the `number`. For example, the text message or TTS message for a `33*` number is sent in French. Use this parameter to explicitly control the language used. *Note: Voice calls in English for `bg-bg`, `ee-et`, `ga-ie`, `lv-lv`, `lt-lt`, `mt-mt`, `sk-sk`, `sk-si`
        :type lg: str
        :param next_event_wait: Specifies the wait time in seconds between attempts to deliver the verification code.
        :type next_event_wait: int
        :param pin_expiry: How long the generated verification code is valid for, in seconds. When you specify both `pin_expiry` and `next_event_wait` then `pin_expiry` must be an integer multiple of `next_event_wait` otherwise `pin_expiry` is defaulted to equal next_event_wait. See [changing the event timings](https://developer.nexmo.com/verify/guides/changing-default-timings).
        :type pin_expiry: int
        :param workflow_id: Selects the predefined sequence of SMS and TTS (Text To Speech) actions to use in order to convey the PIN to your user. For example, an id of 1 identifies the workflow SMS - TTS - TTS. For a list of all workflows and their associated ids, please visit the [developer portal](https://developer.nexmo.com/verify/guides/workflows-and-events).
        :type workflow_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_request_with_psd2_serialize(
            format=format,
            amount=amount,
            api_key=api_key,
            api_secret=api_secret,
            number=number,
            payee=payee,
            code_length=code_length,
            country=country,
            lg=lg,
            next_event_wait=next_event_wait,
            pin_expiry=pin_expiry,
            workflow_id=workflow_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VerifyRequestWithPSD2200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _verify_request_with_psd2_serialize(
        self,
        format,
        amount,
        api_key,
        api_secret,
        number,
        payee,
        code_length,
        country,
        lg,
        next_event_wait,
        pin_expiry,
        workflow_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if format is not None:
            _path_params['format'] = format
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if amount is not None:
            _form_params.append(('amount', amount))
        if api_key is not None:
            _form_params.append(('api_key', api_key))
        if api_secret is not None:
            _form_params.append(('api_secret', api_secret))
        if code_length is not None:
            _form_params.append(('code_length', code_length))
        if country is not None:
            _form_params.append(('country', country))
        if lg is not None:
            _form_params.append(('lg', lg))
        if next_event_wait is not None:
            _form_params.append(('next_event_wait', next_event_wait))
        if number is not None:
            _form_params.append(('number', number))
        if payee is not None:
            _form_params.append(('payee', payee))
        if pin_expiry is not None:
            _form_params.append(('pin_expiry', pin_expiry))
        if workflow_id is not None:
            _form_params.append(('workflow_id', workflow_id))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/psd2/{format}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def verify_search(
        self,
        format: Annotated[StrictStr, Field(description="The response format.")],
        api_key: StrictStr,
        api_secret: StrictStr,
        request_id: Annotated[StrictStr, Field(description="The `request_id` you received in the Verify Request Response. Required if `request_ids` not provided.")],
        request_ids: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=10)]], Field(description="More than one `request_id`. Each `request_id` is a new parameter in the Verify Search request. Required if `request_id` not provided.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VerifySearch200Response:
        """Verify Search

        Use Verify search to check the status of past or current verification requests:  1. Send a Verify search request containing the `request_id`s of the verification requests you are interested in. 2. Use the `status` of each verification request in the `checks` array of the response object to determine the outcome.  *Note that this endpoint is available by `POST` request as well as `GET`.*

        :param format: The response format. (required)
        :type format: str
        :param api_key: (required)
        :type api_key: str
        :param api_secret: (required)
        :type api_secret: str
        :param request_id: The `request_id` you received in the Verify Request Response. Required if `request_ids` not provided. (required)
        :type request_id: str
        :param request_ids: More than one `request_id`. Each `request_id` is a new parameter in the Verify Search request. Required if `request_id` not provided.
        :type request_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_search_serialize(
            format=format,
            api_key=api_key,
            api_secret=api_secret,
            request_id=request_id,
            request_ids=request_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VerifySearch200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def verify_search_with_http_info(
        self,
        format: Annotated[StrictStr, Field(description="The response format.")],
        api_key: StrictStr,
        api_secret: StrictStr,
        request_id: Annotated[StrictStr, Field(description="The `request_id` you received in the Verify Request Response. Required if `request_ids` not provided.")],
        request_ids: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=10)]], Field(description="More than one `request_id`. Each `request_id` is a new parameter in the Verify Search request. Required if `request_id` not provided.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VerifySearch200Response]:
        """Verify Search

        Use Verify search to check the status of past or current verification requests:  1. Send a Verify search request containing the `request_id`s of the verification requests you are interested in. 2. Use the `status` of each verification request in the `checks` array of the response object to determine the outcome.  *Note that this endpoint is available by `POST` request as well as `GET`.*

        :param format: The response format. (required)
        :type format: str
        :param api_key: (required)
        :type api_key: str
        :param api_secret: (required)
        :type api_secret: str
        :param request_id: The `request_id` you received in the Verify Request Response. Required if `request_ids` not provided. (required)
        :type request_id: str
        :param request_ids: More than one `request_id`. Each `request_id` is a new parameter in the Verify Search request. Required if `request_id` not provided.
        :type request_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_search_serialize(
            format=format,
            api_key=api_key,
            api_secret=api_secret,
            request_id=request_id,
            request_ids=request_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VerifySearch200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def verify_search_without_preload_content(
        self,
        format: Annotated[StrictStr, Field(description="The response format.")],
        api_key: StrictStr,
        api_secret: StrictStr,
        request_id: Annotated[StrictStr, Field(description="The `request_id` you received in the Verify Request Response. Required if `request_ids` not provided.")],
        request_ids: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=10)]], Field(description="More than one `request_id`. Each `request_id` is a new parameter in the Verify Search request. Required if `request_id` not provided.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Verify Search

        Use Verify search to check the status of past or current verification requests:  1. Send a Verify search request containing the `request_id`s of the verification requests you are interested in. 2. Use the `status` of each verification request in the `checks` array of the response object to determine the outcome.  *Note that this endpoint is available by `POST` request as well as `GET`.*

        :param format: The response format. (required)
        :type format: str
        :param api_key: (required)
        :type api_key: str
        :param api_secret: (required)
        :type api_secret: str
        :param request_id: The `request_id` you received in the Verify Request Response. Required if `request_ids` not provided. (required)
        :type request_id: str
        :param request_ids: More than one `request_id`. Each `request_id` is a new parameter in the Verify Search request. Required if `request_id` not provided.
        :type request_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_search_serialize(
            format=format,
            api_key=api_key,
            api_secret=api_secret,
            request_id=request_id,
            request_ids=request_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VerifySearch200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _verify_search_serialize(
        self,
        format,
        api_key,
        api_secret,
        request_id,
        request_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'request_ids': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if format is not None:
            _path_params['format'] = format
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        if api_secret is not None:
            
            _query_params.append(('api_secret', api_secret))
            
        if request_id is not None:
            
            _query_params.append(('request_id', request_id))
            
        if request_ids is not None:
            
            _query_params.append(('request_ids', request_ids))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/search/{format}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    Verify API

    The Verify API helps you to implement 2FA (two-factor authentication) in your applications. This is useful for:  * Protecting against spam, by preventing spammers from creating multiple accounts * Monitoring suspicious activity, by forcing an account user to verify ownership of a number * Ensuring that you can reach your users at any time because you have their correct phone number More information is available at <https://developer.nexmo.com/verify>

    The version of the OpenAPI document: 1.2.4
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.search_response import SearchResponse

class TestSearchResponse(unittest.TestCase):
    """SearchResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SearchResponse:
        """Test SearchResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SearchResponse`
        """
        model = SearchResponse()
        if include_optional:
            return SearchResponse(
                account_id = 'abcdef01',
                checks = [
                    openapi_client.models.search_response_checks_inner.searchResponse_checks_inner(
                        code = '987654', 
                        date_received = '2020-01-01 12:00:00', 
                        ip_address = '123.0.0.255', 
                        status = 'VALID', )
                    ],
                currency = 'EUR',
                date_finalized = '2020-01-01 12:00:00',
                date_submitted = '2020-01-01 12:00:00',
                estimated_price_messages_sent = '0.03330000',
                events = [
                    openapi_client.models.search_response_events_inner.searchResponse_events_inner(
                        id = '', 
                        type = 'tts', )
                    ],
                first_event_date = '2020-01-01 12:00:00',
                last_event_date = '2020-01-01 12:00:00',
                number = '447700900000',
                price = '0.10000000',
                request_id = 'abcdef0123456789abcdef0123456789',
                sender_id = 'verify',
                status = 'IN PROGRESS'
            )
        else:
            return SearchResponse(
        )
        """

    def testSearchResponse(self):
        """Test SearchResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

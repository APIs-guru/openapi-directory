# coding: utf-8

"""
    Account API

    Enables users to manage their Vonage API Account by programmable means. More information is available here: <https://developer.nexmo.com/account/overview>.

    The version of the OpenAPI document: 1.0.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AccountSettings(BaseModel):
    """
    AccountSettings
    """ # noqa: E501
    dr_callback_url: Optional[StrictStr] = Field(default=None, description="The current or updated delivery receipt webhook URI", alias="dr-callback-url")
    max_calls_per_second: Optional[StrictInt] = Field(default=None, description="The maximum number of API calls per second.", alias="max-calls-per-second")
    max_inbound_request: Optional[StrictInt] = Field(default=None, description="The maximum number of inbound messages per second.", alias="max-inbound-request")
    max_outbound_request: Optional[StrictInt] = Field(default=None, description="The maximum number of outbound messages per second.", alias="max-outbound-request")
    mo_callback_url: Optional[StrictStr] = Field(default=None, description="The current or updated inbound message webhook URI", alias="mo-callback-url")
    __properties: ClassVar[List[str]] = ["dr-callback-url", "max-calls-per-second", "max-inbound-request", "max-outbound-request", "mo-callback-url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dr-callback-url": obj.get("dr-callback-url"),
            "max-calls-per-second": obj.get("max-calls-per-second"),
            "max-inbound-request": obj.get("max-inbound-request"),
            "max-outbound-request": obj.get("max-outbound-request"),
            "mo-callback-url": obj.get("mo-callback-url")
        })
        return _obj



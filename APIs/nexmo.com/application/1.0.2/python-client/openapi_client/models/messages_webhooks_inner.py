# coding: utf-8

"""
    Nexmo Application API

    <div class=\"Vlt-callout Vlt-callout--critical\"> <i></i> <div class=\"Vlt-callout__content\">   <h4>Applications V1 is deprecated</h4>   This version of the API has been deprecated. Please use <a href=\"/api/application.v2\">version 2</a> going forwards </div> </div> A Nexmo application contains the security and configuration information you need to connect to Nexmo endpoints and easily use our products.

    The version of the OpenAPI document: 1.0.2
    Contact: devrel@nexmo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class MessagesWebhooksInner(BaseModel):
    """
    MessagesWebhooksInner
    """ # noqa: E501
    endpoint: StrictStr = Field(description="`inbound_url`: The URL where inbound messages are delivered. `status_url`: The URL where message status is delivered.")
    endpoint_type: StrictStr
    http_method: StrictStr = Field(description="The HTTP method used to send data to the `inbound_url` or `status_url`. Default is POST.")
    __properties: ClassVar[List[str]] = ["endpoint", "endpoint_type", "http_method"]

    @field_validator('endpoint_type')
    def endpoint_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['inbound_url', 'status_url']):
            raise ValueError("must be one of enum values ('inbound_url', 'status_url')")
        return value

    @field_validator('http_method')
    def http_method_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['GET', 'POST']):
            raise ValueError("must be one of enum values ('GET', 'POST')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MessagesWebhooksInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MessagesWebhooksInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endpoint": obj.get("endpoint"),
            "endpoint_type": obj.get("endpoint_type"),
            "http_method": obj.get("http_method")
        })
        return _obj



# coding: utf-8

"""
    Pricing API

    The API to retrieve pricing information. Please note the Pricing API is rate limited to one request per second.

    The version of the OpenAPI document: 0.0.3
    Contact: devrel@nexmo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NetworkObject(BaseModel):
    """
    NetworkObject
    """ # noqa: E501
    currency: Optional[StrictStr] = Field(default=None, description="The currency used for prices for this network.")
    mcc: Optional[StrictStr] = Field(default=None, description="The [Mobile Country Code](https://en.wikipedia.org/wiki/Mobile_country_code) of the operator.")
    mnc: Optional[StrictStr] = Field(default=None, description="The Mobile Network Code of the operator.")
    network_code: Optional[StrictStr] = Field(default=None, description="The Mobile Country Code and Mobile Network Code combined to give a unique reference for the operator.", alias="networkCode")
    network_name: Optional[StrictStr] = Field(default=None, description="The company/organisational name of the operator.", alias="networkName")
    price: Optional[StrictStr] = Field(default=None, description="The cost to send a message or make a call to this network")
    type: Optional[StrictStr] = Field(default=None, description="The type of network: mobile or landline.")
    __properties: ClassVar[List[str]] = ["currency", "mcc", "mnc", "networkCode", "networkName", "price", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currency": obj.get("currency"),
            "mcc": obj.get("mcc"),
            "mnc": obj.get("mnc"),
            "networkCode": obj.get("networkCode"),
            "networkName": obj.get("networkName"),
            "price": obj.get("price"),
            "type": obj.get("type")
        })
        return _obj



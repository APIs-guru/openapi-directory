# coding: utf-8

"""
    Pricing API

    The API to retrieve pricing information. Please note the Pricing API is rate limited to one request per second.

    The version of the OpenAPI document: 0.0.3
    Contact: devrel@nexmo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.network_object import NetworkObject
from typing import Optional, Set
from typing_extensions import Self

class PricingCountryResponse(BaseModel):
    """
    PricingCountryResponse
    """ # noqa: E501
    country_code: Optional[StrictStr] = Field(default=None, description="Two letter country code.", alias="countryCode")
    country_display_name: Optional[StrictStr] = Field(default=None, description="Readable country name.", alias="countryDisplayName")
    country_name: Optional[StrictStr] = Field(default=None, description="Readable country name.", alias="countryName")
    currency: Optional[StrictStr] = Field(default=None, description="The currency that your account is being billed in (by default `Euros—EUR`). Can change in the Dashboard to US Dollars—USD.")
    default_price: Optional[StrictStr] = Field(default=None, description="The default price.", alias="defaultPrice")
    dialing_prefix: Optional[StrictStr] = Field(default=None, description="The dialling prefix.", alias="dialingPrefix")
    networks: Optional[List[NetworkObject]] = Field(default=None, description="An array of network objects")
    __properties: ClassVar[List[str]] = ["countryCode", "countryDisplayName", "countryName", "currency", "defaultPrice", "dialingPrefix", "networks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PricingCountryResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in networks (list)
        _items = []
        if self.networks:
            for _item_networks in self.networks:
                if _item_networks:
                    _items.append(_item_networks.to_dict())
            _dict['networks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PricingCountryResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "countryCode": obj.get("countryCode"),
            "countryDisplayName": obj.get("countryDisplayName"),
            "countryName": obj.get("countryName"),
            "currency": obj.get("currency"),
            "defaultPrice": obj.get("defaultPrice"),
            "dialingPrefix": obj.get("dialingPrefix"),
            "networks": [NetworkObject.from_dict(_item) for _item in obj["networks"]] if obj.get("networks") is not None else None
        })
        return _obj



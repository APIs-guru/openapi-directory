# coding: utf-8

"""
    Pricing API

    The API to retrieve pricing information. Please note the Pricing API is rate limited to one request per second.

    The version of the OpenAPI document: 0.0.3
    Contact: devrel@nexmo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing_extensions import Annotated
from openapi_client.models.pricing_countries_response import PricingCountriesResponse
from openapi_client.models.pricing_country_response import PricingCountryResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class PricingApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def retrieve_prefix_pricing(
        self,
        type: Annotated[StrictStr, Field(description="The type of service you wish to retrieve data about: either `sms`, `sms-transit` or `voice`.")],
        api_key: Annotated[StrictStr, Field(description="Your Nexmo API key.")],
        api_secret: Annotated[StrictStr, Field(description="Your Nexmo API secret.")],
        prefix: Annotated[StrictStr, Field(description="The numerical dialing prefix to look up pricing for. Examples include 44, 1 and so on.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PricingCountriesResponse:
        """Retrieve outbound pricing for a specific dialing prefix.

        Retrieves the pricing information based on the dialing prefix. 

        :param type: The type of service you wish to retrieve data about: either `sms`, `sms-transit` or `voice`. (required)
        :type type: str
        :param api_key: Your Nexmo API key. (required)
        :type api_key: str
        :param api_secret: Your Nexmo API secret. (required)
        :type api_secret: str
        :param prefix: The numerical dialing prefix to look up pricing for. Examples include 44, 1 and so on. (required)
        :type prefix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retrieve_prefix_pricing_serialize(
            type=type,
            api_key=api_key,
            api_secret=api_secret,
            prefix=prefix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PricingCountriesResponse",
            '400': "RetrievePricingAllCountries400Response",
            '401': "RetrievePricingAllCountries401Response",
            '404': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def retrieve_prefix_pricing_with_http_info(
        self,
        type: Annotated[StrictStr, Field(description="The type of service you wish to retrieve data about: either `sms`, `sms-transit` or `voice`.")],
        api_key: Annotated[StrictStr, Field(description="Your Nexmo API key.")],
        api_secret: Annotated[StrictStr, Field(description="Your Nexmo API secret.")],
        prefix: Annotated[StrictStr, Field(description="The numerical dialing prefix to look up pricing for. Examples include 44, 1 and so on.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PricingCountriesResponse]:
        """Retrieve outbound pricing for a specific dialing prefix.

        Retrieves the pricing information based on the dialing prefix. 

        :param type: The type of service you wish to retrieve data about: either `sms`, `sms-transit` or `voice`. (required)
        :type type: str
        :param api_key: Your Nexmo API key. (required)
        :type api_key: str
        :param api_secret: Your Nexmo API secret. (required)
        :type api_secret: str
        :param prefix: The numerical dialing prefix to look up pricing for. Examples include 44, 1 and so on. (required)
        :type prefix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retrieve_prefix_pricing_serialize(
            type=type,
            api_key=api_key,
            api_secret=api_secret,
            prefix=prefix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PricingCountriesResponse",
            '400': "RetrievePricingAllCountries400Response",
            '401': "RetrievePricingAllCountries401Response",
            '404': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def retrieve_prefix_pricing_without_preload_content(
        self,
        type: Annotated[StrictStr, Field(description="The type of service you wish to retrieve data about: either `sms`, `sms-transit` or `voice`.")],
        api_key: Annotated[StrictStr, Field(description="Your Nexmo API key.")],
        api_secret: Annotated[StrictStr, Field(description="Your Nexmo API secret.")],
        prefix: Annotated[StrictStr, Field(description="The numerical dialing prefix to look up pricing for. Examples include 44, 1 and so on.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve outbound pricing for a specific dialing prefix.

        Retrieves the pricing information based on the dialing prefix. 

        :param type: The type of service you wish to retrieve data about: either `sms`, `sms-transit` or `voice`. (required)
        :type type: str
        :param api_key: Your Nexmo API key. (required)
        :type api_key: str
        :param api_secret: Your Nexmo API secret. (required)
        :type api_secret: str
        :param prefix: The numerical dialing prefix to look up pricing for. Examples include 44, 1 and so on. (required)
        :type prefix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retrieve_prefix_pricing_serialize(
            type=type,
            api_key=api_key,
            api_secret=api_secret,
            prefix=prefix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PricingCountriesResponse",
            '400': "RetrievePricingAllCountries400Response",
            '401': "RetrievePricingAllCountries401Response",
            '404': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _retrieve_prefix_pricing_serialize(
        self,
        type,
        api_key,
        api_secret,
        prefix,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if type is not None:
            _path_params['type'] = type
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        if api_secret is not None:
            
            _query_params.append(('api_secret', api_secret))
            
        if prefix is not None:
            
            _query_params.append(('prefix', prefix))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/get-prefix-pricing/outbound/{type}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def retrieve_pricing_all_countries(
        self,
        type: Annotated[StrictStr, Field(description="The type of service you wish to retrieve data about: either `sms`, `sms-transit` or `voice`.")],
        api_key: Annotated[StrictStr, Field(description="Your Nexmo API key.")],
        api_secret: Annotated[StrictStr, Field(description="Your Nexmo API secret.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PricingCountriesResponse:
        """Retrieve outbound pricing for all countries.

        Retrieves the pricing information for all countries. 

        :param type: The type of service you wish to retrieve data about: either `sms`, `sms-transit` or `voice`. (required)
        :type type: str
        :param api_key: Your Nexmo API key. (required)
        :type api_key: str
        :param api_secret: Your Nexmo API secret. (required)
        :type api_secret: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retrieve_pricing_all_countries_serialize(
            type=type,
            api_key=api_key,
            api_secret=api_secret,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PricingCountriesResponse",
            '400': "RetrievePricingAllCountries400Response",
            '401': "RetrievePricingAllCountries401Response",
            '404': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def retrieve_pricing_all_countries_with_http_info(
        self,
        type: Annotated[StrictStr, Field(description="The type of service you wish to retrieve data about: either `sms`, `sms-transit` or `voice`.")],
        api_key: Annotated[StrictStr, Field(description="Your Nexmo API key.")],
        api_secret: Annotated[StrictStr, Field(description="Your Nexmo API secret.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PricingCountriesResponse]:
        """Retrieve outbound pricing for all countries.

        Retrieves the pricing information for all countries. 

        :param type: The type of service you wish to retrieve data about: either `sms`, `sms-transit` or `voice`. (required)
        :type type: str
        :param api_key: Your Nexmo API key. (required)
        :type api_key: str
        :param api_secret: Your Nexmo API secret. (required)
        :type api_secret: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retrieve_pricing_all_countries_serialize(
            type=type,
            api_key=api_key,
            api_secret=api_secret,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PricingCountriesResponse",
            '400': "RetrievePricingAllCountries400Response",
            '401': "RetrievePricingAllCountries401Response",
            '404': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def retrieve_pricing_all_countries_without_preload_content(
        self,
        type: Annotated[StrictStr, Field(description="The type of service you wish to retrieve data about: either `sms`, `sms-transit` or `voice`.")],
        api_key: Annotated[StrictStr, Field(description="Your Nexmo API key.")],
        api_secret: Annotated[StrictStr, Field(description="Your Nexmo API secret.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve outbound pricing for all countries.

        Retrieves the pricing information for all countries. 

        :param type: The type of service you wish to retrieve data about: either `sms`, `sms-transit` or `voice`. (required)
        :type type: str
        :param api_key: Your Nexmo API key. (required)
        :type api_key: str
        :param api_secret: Your Nexmo API secret. (required)
        :type api_secret: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retrieve_pricing_all_countries_serialize(
            type=type,
            api_key=api_key,
            api_secret=api_secret,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PricingCountriesResponse",
            '400': "RetrievePricingAllCountries400Response",
            '401': "RetrievePricingAllCountries401Response",
            '404': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _retrieve_pricing_all_countries_serialize(
        self,
        type,
        api_key,
        api_secret,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if type is not None:
            _path_params['type'] = type
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        if api_secret is not None:
            
            _query_params.append(('api_secret', api_secret))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/get-full-pricing/outbound/{type}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def retrieve_pricing_country(
        self,
        type: Annotated[StrictStr, Field(description="The type of service you wish to retrieve data about: either `sms`, `sms-transit` or `voice`.")],
        api_key: Annotated[StrictStr, Field(description="Your Nexmo API key.")],
        api_secret: Annotated[StrictStr, Field(description="Your Nexmo API secret.")],
        country: Annotated[StrictStr, Field(description="A two letter [country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). For example, `CA`.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PricingCountryResponse:
        """Retrieve outbound pricing for a specific country.

        Retrieves the pricing information based on the specified country. 

        :param type: The type of service you wish to retrieve data about: either `sms`, `sms-transit` or `voice`. (required)
        :type type: str
        :param api_key: Your Nexmo API key. (required)
        :type api_key: str
        :param api_secret: Your Nexmo API secret. (required)
        :type api_secret: str
        :param country: A two letter [country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). For example, `CA`. (required)
        :type country: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retrieve_pricing_country_serialize(
            type=type,
            api_key=api_key,
            api_secret=api_secret,
            country=country,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PricingCountryResponse",
            '400': "RetrievePricingAllCountries400Response",
            '401': "RetrievePricingAllCountries401Response",
            '404': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def retrieve_pricing_country_with_http_info(
        self,
        type: Annotated[StrictStr, Field(description="The type of service you wish to retrieve data about: either `sms`, `sms-transit` or `voice`.")],
        api_key: Annotated[StrictStr, Field(description="Your Nexmo API key.")],
        api_secret: Annotated[StrictStr, Field(description="Your Nexmo API secret.")],
        country: Annotated[StrictStr, Field(description="A two letter [country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). For example, `CA`.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PricingCountryResponse]:
        """Retrieve outbound pricing for a specific country.

        Retrieves the pricing information based on the specified country. 

        :param type: The type of service you wish to retrieve data about: either `sms`, `sms-transit` or `voice`. (required)
        :type type: str
        :param api_key: Your Nexmo API key. (required)
        :type api_key: str
        :param api_secret: Your Nexmo API secret. (required)
        :type api_secret: str
        :param country: A two letter [country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). For example, `CA`. (required)
        :type country: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retrieve_pricing_country_serialize(
            type=type,
            api_key=api_key,
            api_secret=api_secret,
            country=country,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PricingCountryResponse",
            '400': "RetrievePricingAllCountries400Response",
            '401': "RetrievePricingAllCountries401Response",
            '404': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def retrieve_pricing_country_without_preload_content(
        self,
        type: Annotated[StrictStr, Field(description="The type of service you wish to retrieve data about: either `sms`, `sms-transit` or `voice`.")],
        api_key: Annotated[StrictStr, Field(description="Your Nexmo API key.")],
        api_secret: Annotated[StrictStr, Field(description="Your Nexmo API secret.")],
        country: Annotated[StrictStr, Field(description="A two letter [country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). For example, `CA`.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve outbound pricing for a specific country.

        Retrieves the pricing information based on the specified country. 

        :param type: The type of service you wish to retrieve data about: either `sms`, `sms-transit` or `voice`. (required)
        :type type: str
        :param api_key: Your Nexmo API key. (required)
        :type api_key: str
        :param api_secret: Your Nexmo API secret. (required)
        :type api_secret: str
        :param country: A two letter [country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). For example, `CA`. (required)
        :type country: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retrieve_pricing_country_serialize(
            type=type,
            api_key=api_key,
            api_secret=api_secret,
            country=country,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PricingCountryResponse",
            '400': "RetrievePricingAllCountries400Response",
            '401': "RetrievePricingAllCountries401Response",
            '404': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _retrieve_pricing_country_serialize(
        self,
        type,
        api_key,
        api_secret,
        country,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if type is not None:
            _path_params['type'] = type
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        if api_secret is not None:
            
            _query_params.append(('api_secret', api_secret))
            
        if country is not None:
            
            _query_params.append(('country', country))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/get-pricing/outbound/{type}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



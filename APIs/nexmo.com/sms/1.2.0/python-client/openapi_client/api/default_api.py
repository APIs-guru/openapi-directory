# coding: utf-8

"""
    SMS API

    With the SMS API you can send SMS from your account and lookup messages both messages that you've sent as well as messages sent to your virtual numbers. Numbers are specified in E.164 format. More SMS API documentation is at <https://developer.nexmo.com/messaging/sms/overview>

    The version of the OpenAPI document: 1.2.0
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.send_an_sms200_response import SendAnSms200Response

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def send_an_sms(
        self,
        format: Annotated[StrictStr, Field(description="The format of the response")],
        api_key: Annotated[str, Field(min_length=8, strict=True, max_length=8, description="Your API key")],
        var_from: Annotated[StrictStr, Field(description="The name or number the message should be sent from. Alphanumeric senderID's are not supported in all countries, see [Global Messaging](/messaging/sms/guides/global-messaging#country-specific-features) for more details. If alphanumeric, spaces will be ignored. Numbers are specified in E.164 format.")],
        to: Annotated[str, Field(min_length=7, strict=True, max_length=15, description="The number that the message should be sent to. Numbers are specified in E.164 format.")],
        account_ref: Annotated[Optional[StrictStr], Field(description="**Advanced**: An optional string used to identify separate accounts using the SMS endpoint for billing purposes. To use this feature, please email [support@nexmo.com](mailto:support@nexmo.com)")] = None,
        api_secret: Annotated[Optional[Annotated[str, Field(min_length=6, strict=True, max_length=32)]], Field(description="Your API secret. Required unless `sig` is provided")] = None,
        body: Annotated[Optional[StrictStr], Field(description="**Advanced**: Hex encoded binary data. Depends on `type` parameter having the value `binary`.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="**Advanced**: The webhook endpoint the delivery receipt for this sms is sent to. This parameter overrides the webhook endpoint you set in Dashboard. Max 100 characters.")] = None,
        client_ref: Annotated[Optional[StrictStr], Field(description="**Advanced**: You can optionally include your own reference of up to 100 characters.")] = None,
        content_id: Annotated[Optional[StrictStr], Field(description="**Advanced**: A string parameter that satisfies regulatory requirements when sending an SMS to specific countries. For more information please refer to the [Country-Specific Outbound SMS Features](https://help.nexmo.com/hc/en-us/articles/115011781468)")] = None,
        entity_id: Annotated[Optional[StrictStr], Field(description="**Advanced**: A string parameter that satisfies regulatory requirements when sending an SMS to specific countries. For more information please refer to the [Country-Specific Outbound SMS Features](https://help.nexmo.com/hc/en-us/articles/115011781468)")] = None,
        message_class: Annotated[Optional[StrictInt], Field(description="**Advanced**: The Data Coding Scheme value of the message")] = None,
        protocol_id: Annotated[Optional[StrictInt], Field(description="**Advanced**: The value of the [protocol identifier](https://en.wikipedia.org/wiki/GSM_03.40#Protocol_Identifier) to use. Ensure that the value is aligned with `udh`.")] = None,
        sig: Annotated[Optional[Annotated[str, Field(min_length=16, strict=True, max_length=60)]], Field(description="The hash of the request parameters in alphabetical order, a timestamp and the signature secret. See [Signing Requests](/concepts/guides/signing-messages) for more details.")] = None,
        status_report_req: Annotated[Optional[StrictBool], Field(description="**Advanced**: Boolean indicating if you like to receive a [Delivery Receipt](/messaging/sms/building-blocks/receive-a-delivery-receipt).")] = None,
        text: Annotated[Optional[StrictStr], Field(description="The body of the message being sent. If your message contains characters that can be encoded according to the GSM Standard and Extended tables then you can set the `type` to `text`. If your message contains characters outside this range, then you will need to set the `type` to `unicode`.")] = None,
        ttl: Annotated[Optional[Annotated[int, Field(le=604800000, strict=True, ge=20000)]], Field(description="**Advanced**: The duration in milliseconds the delivery of an SMS will be attempted.§§ By default Vonage attempts delivery for 72 hours, however the maximum effective value depends on the operator and is typically 24 - 48 hours. We recommend this value should be kept at its default or at least 30 minutes.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="**Advanced**: The format of the message body")] = None,
        udh: Annotated[Optional[StrictStr], Field(description="**Advanced**: Your custom Hex encoded [User Data Header](https://en.wikipedia.org/wiki/User_Data_Header). Depends on `type` parameter having the value `binary`.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SendAnSms200Response:
        """Send an SMS

        Send an outbound SMS from your Vonage account

        :param format: The format of the response (required)
        :type format: str
        :param api_key: Your API key (required)
        :type api_key: str
        :param var_from: The name or number the message should be sent from. Alphanumeric senderID's are not supported in all countries, see [Global Messaging](/messaging/sms/guides/global-messaging#country-specific-features) for more details. If alphanumeric, spaces will be ignored. Numbers are specified in E.164 format. (required)
        :type var_from: str
        :param to: The number that the message should be sent to. Numbers are specified in E.164 format. (required)
        :type to: str
        :param account_ref: **Advanced**: An optional string used to identify separate accounts using the SMS endpoint for billing purposes. To use this feature, please email [support@nexmo.com](mailto:support@nexmo.com)
        :type account_ref: str
        :param api_secret: Your API secret. Required unless `sig` is provided
        :type api_secret: str
        :param body: **Advanced**: Hex encoded binary data. Depends on `type` parameter having the value `binary`.
        :type body: str
        :param param_callback: **Advanced**: The webhook endpoint the delivery receipt for this sms is sent to. This parameter overrides the webhook endpoint you set in Dashboard. Max 100 characters.
        :type param_callback: str
        :param client_ref: **Advanced**: You can optionally include your own reference of up to 100 characters.
        :type client_ref: str
        :param content_id: **Advanced**: A string parameter that satisfies regulatory requirements when sending an SMS to specific countries. For more information please refer to the [Country-Specific Outbound SMS Features](https://help.nexmo.com/hc/en-us/articles/115011781468)
        :type content_id: str
        :param entity_id: **Advanced**: A string parameter that satisfies regulatory requirements when sending an SMS to specific countries. For more information please refer to the [Country-Specific Outbound SMS Features](https://help.nexmo.com/hc/en-us/articles/115011781468)
        :type entity_id: str
        :param message_class: **Advanced**: The Data Coding Scheme value of the message
        :type message_class: int
        :param protocol_id: **Advanced**: The value of the [protocol identifier](https://en.wikipedia.org/wiki/GSM_03.40#Protocol_Identifier) to use. Ensure that the value is aligned with `udh`.
        :type protocol_id: int
        :param sig: The hash of the request parameters in alphabetical order, a timestamp and the signature secret. See [Signing Requests](/concepts/guides/signing-messages) for more details.
        :type sig: str
        :param status_report_req: **Advanced**: Boolean indicating if you like to receive a [Delivery Receipt](/messaging/sms/building-blocks/receive-a-delivery-receipt).
        :type status_report_req: bool
        :param text: The body of the message being sent. If your message contains characters that can be encoded according to the GSM Standard and Extended tables then you can set the `type` to `text`. If your message contains characters outside this range, then you will need to set the `type` to `unicode`.
        :type text: str
        :param ttl: **Advanced**: The duration in milliseconds the delivery of an SMS will be attempted.§§ By default Vonage attempts delivery for 72 hours, however the maximum effective value depends on the operator and is typically 24 - 48 hours. We recommend this value should be kept at its default or at least 30 minutes.
        :type ttl: int
        :param type: **Advanced**: The format of the message body
        :type type: str
        :param udh: **Advanced**: Your custom Hex encoded [User Data Header](https://en.wikipedia.org/wiki/User_Data_Header). Depends on `type` parameter having the value `binary`.
        :type udh: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._send_an_sms_serialize(
            format=format,
            api_key=api_key,
            var_from=var_from,
            to=to,
            account_ref=account_ref,
            api_secret=api_secret,
            body=body,
            param_callback=param_callback,
            client_ref=client_ref,
            content_id=content_id,
            entity_id=entity_id,
            message_class=message_class,
            protocol_id=protocol_id,
            sig=sig,
            status_report_req=status_report_req,
            text=text,
            ttl=ttl,
            type=type,
            udh=udh,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SendAnSms200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def send_an_sms_with_http_info(
        self,
        format: Annotated[StrictStr, Field(description="The format of the response")],
        api_key: Annotated[str, Field(min_length=8, strict=True, max_length=8, description="Your API key")],
        var_from: Annotated[StrictStr, Field(description="The name or number the message should be sent from. Alphanumeric senderID's are not supported in all countries, see [Global Messaging](/messaging/sms/guides/global-messaging#country-specific-features) for more details. If alphanumeric, spaces will be ignored. Numbers are specified in E.164 format.")],
        to: Annotated[str, Field(min_length=7, strict=True, max_length=15, description="The number that the message should be sent to. Numbers are specified in E.164 format.")],
        account_ref: Annotated[Optional[StrictStr], Field(description="**Advanced**: An optional string used to identify separate accounts using the SMS endpoint for billing purposes. To use this feature, please email [support@nexmo.com](mailto:support@nexmo.com)")] = None,
        api_secret: Annotated[Optional[Annotated[str, Field(min_length=6, strict=True, max_length=32)]], Field(description="Your API secret. Required unless `sig` is provided")] = None,
        body: Annotated[Optional[StrictStr], Field(description="**Advanced**: Hex encoded binary data. Depends on `type` parameter having the value `binary`.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="**Advanced**: The webhook endpoint the delivery receipt for this sms is sent to. This parameter overrides the webhook endpoint you set in Dashboard. Max 100 characters.")] = None,
        client_ref: Annotated[Optional[StrictStr], Field(description="**Advanced**: You can optionally include your own reference of up to 100 characters.")] = None,
        content_id: Annotated[Optional[StrictStr], Field(description="**Advanced**: A string parameter that satisfies regulatory requirements when sending an SMS to specific countries. For more information please refer to the [Country-Specific Outbound SMS Features](https://help.nexmo.com/hc/en-us/articles/115011781468)")] = None,
        entity_id: Annotated[Optional[StrictStr], Field(description="**Advanced**: A string parameter that satisfies regulatory requirements when sending an SMS to specific countries. For more information please refer to the [Country-Specific Outbound SMS Features](https://help.nexmo.com/hc/en-us/articles/115011781468)")] = None,
        message_class: Annotated[Optional[StrictInt], Field(description="**Advanced**: The Data Coding Scheme value of the message")] = None,
        protocol_id: Annotated[Optional[StrictInt], Field(description="**Advanced**: The value of the [protocol identifier](https://en.wikipedia.org/wiki/GSM_03.40#Protocol_Identifier) to use. Ensure that the value is aligned with `udh`.")] = None,
        sig: Annotated[Optional[Annotated[str, Field(min_length=16, strict=True, max_length=60)]], Field(description="The hash of the request parameters in alphabetical order, a timestamp and the signature secret. See [Signing Requests](/concepts/guides/signing-messages) for more details.")] = None,
        status_report_req: Annotated[Optional[StrictBool], Field(description="**Advanced**: Boolean indicating if you like to receive a [Delivery Receipt](/messaging/sms/building-blocks/receive-a-delivery-receipt).")] = None,
        text: Annotated[Optional[StrictStr], Field(description="The body of the message being sent. If your message contains characters that can be encoded according to the GSM Standard and Extended tables then you can set the `type` to `text`. If your message contains characters outside this range, then you will need to set the `type` to `unicode`.")] = None,
        ttl: Annotated[Optional[Annotated[int, Field(le=604800000, strict=True, ge=20000)]], Field(description="**Advanced**: The duration in milliseconds the delivery of an SMS will be attempted.§§ By default Vonage attempts delivery for 72 hours, however the maximum effective value depends on the operator and is typically 24 - 48 hours. We recommend this value should be kept at its default or at least 30 minutes.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="**Advanced**: The format of the message body")] = None,
        udh: Annotated[Optional[StrictStr], Field(description="**Advanced**: Your custom Hex encoded [User Data Header](https://en.wikipedia.org/wiki/User_Data_Header). Depends on `type` parameter having the value `binary`.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SendAnSms200Response]:
        """Send an SMS

        Send an outbound SMS from your Vonage account

        :param format: The format of the response (required)
        :type format: str
        :param api_key: Your API key (required)
        :type api_key: str
        :param var_from: The name or number the message should be sent from. Alphanumeric senderID's are not supported in all countries, see [Global Messaging](/messaging/sms/guides/global-messaging#country-specific-features) for more details. If alphanumeric, spaces will be ignored. Numbers are specified in E.164 format. (required)
        :type var_from: str
        :param to: The number that the message should be sent to. Numbers are specified in E.164 format. (required)
        :type to: str
        :param account_ref: **Advanced**: An optional string used to identify separate accounts using the SMS endpoint for billing purposes. To use this feature, please email [support@nexmo.com](mailto:support@nexmo.com)
        :type account_ref: str
        :param api_secret: Your API secret. Required unless `sig` is provided
        :type api_secret: str
        :param body: **Advanced**: Hex encoded binary data. Depends on `type` parameter having the value `binary`.
        :type body: str
        :param param_callback: **Advanced**: The webhook endpoint the delivery receipt for this sms is sent to. This parameter overrides the webhook endpoint you set in Dashboard. Max 100 characters.
        :type param_callback: str
        :param client_ref: **Advanced**: You can optionally include your own reference of up to 100 characters.
        :type client_ref: str
        :param content_id: **Advanced**: A string parameter that satisfies regulatory requirements when sending an SMS to specific countries. For more information please refer to the [Country-Specific Outbound SMS Features](https://help.nexmo.com/hc/en-us/articles/115011781468)
        :type content_id: str
        :param entity_id: **Advanced**: A string parameter that satisfies regulatory requirements when sending an SMS to specific countries. For more information please refer to the [Country-Specific Outbound SMS Features](https://help.nexmo.com/hc/en-us/articles/115011781468)
        :type entity_id: str
        :param message_class: **Advanced**: The Data Coding Scheme value of the message
        :type message_class: int
        :param protocol_id: **Advanced**: The value of the [protocol identifier](https://en.wikipedia.org/wiki/GSM_03.40#Protocol_Identifier) to use. Ensure that the value is aligned with `udh`.
        :type protocol_id: int
        :param sig: The hash of the request parameters in alphabetical order, a timestamp and the signature secret. See [Signing Requests](/concepts/guides/signing-messages) for more details.
        :type sig: str
        :param status_report_req: **Advanced**: Boolean indicating if you like to receive a [Delivery Receipt](/messaging/sms/building-blocks/receive-a-delivery-receipt).
        :type status_report_req: bool
        :param text: The body of the message being sent. If your message contains characters that can be encoded according to the GSM Standard and Extended tables then you can set the `type` to `text`. If your message contains characters outside this range, then you will need to set the `type` to `unicode`.
        :type text: str
        :param ttl: **Advanced**: The duration in milliseconds the delivery of an SMS will be attempted.§§ By default Vonage attempts delivery for 72 hours, however the maximum effective value depends on the operator and is typically 24 - 48 hours. We recommend this value should be kept at its default or at least 30 minutes.
        :type ttl: int
        :param type: **Advanced**: The format of the message body
        :type type: str
        :param udh: **Advanced**: Your custom Hex encoded [User Data Header](https://en.wikipedia.org/wiki/User_Data_Header). Depends on `type` parameter having the value `binary`.
        :type udh: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._send_an_sms_serialize(
            format=format,
            api_key=api_key,
            var_from=var_from,
            to=to,
            account_ref=account_ref,
            api_secret=api_secret,
            body=body,
            param_callback=param_callback,
            client_ref=client_ref,
            content_id=content_id,
            entity_id=entity_id,
            message_class=message_class,
            protocol_id=protocol_id,
            sig=sig,
            status_report_req=status_report_req,
            text=text,
            ttl=ttl,
            type=type,
            udh=udh,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SendAnSms200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def send_an_sms_without_preload_content(
        self,
        format: Annotated[StrictStr, Field(description="The format of the response")],
        api_key: Annotated[str, Field(min_length=8, strict=True, max_length=8, description="Your API key")],
        var_from: Annotated[StrictStr, Field(description="The name or number the message should be sent from. Alphanumeric senderID's are not supported in all countries, see [Global Messaging](/messaging/sms/guides/global-messaging#country-specific-features) for more details. If alphanumeric, spaces will be ignored. Numbers are specified in E.164 format.")],
        to: Annotated[str, Field(min_length=7, strict=True, max_length=15, description="The number that the message should be sent to. Numbers are specified in E.164 format.")],
        account_ref: Annotated[Optional[StrictStr], Field(description="**Advanced**: An optional string used to identify separate accounts using the SMS endpoint for billing purposes. To use this feature, please email [support@nexmo.com](mailto:support@nexmo.com)")] = None,
        api_secret: Annotated[Optional[Annotated[str, Field(min_length=6, strict=True, max_length=32)]], Field(description="Your API secret. Required unless `sig` is provided")] = None,
        body: Annotated[Optional[StrictStr], Field(description="**Advanced**: Hex encoded binary data. Depends on `type` parameter having the value `binary`.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="**Advanced**: The webhook endpoint the delivery receipt for this sms is sent to. This parameter overrides the webhook endpoint you set in Dashboard. Max 100 characters.")] = None,
        client_ref: Annotated[Optional[StrictStr], Field(description="**Advanced**: You can optionally include your own reference of up to 100 characters.")] = None,
        content_id: Annotated[Optional[StrictStr], Field(description="**Advanced**: A string parameter that satisfies regulatory requirements when sending an SMS to specific countries. For more information please refer to the [Country-Specific Outbound SMS Features](https://help.nexmo.com/hc/en-us/articles/115011781468)")] = None,
        entity_id: Annotated[Optional[StrictStr], Field(description="**Advanced**: A string parameter that satisfies regulatory requirements when sending an SMS to specific countries. For more information please refer to the [Country-Specific Outbound SMS Features](https://help.nexmo.com/hc/en-us/articles/115011781468)")] = None,
        message_class: Annotated[Optional[StrictInt], Field(description="**Advanced**: The Data Coding Scheme value of the message")] = None,
        protocol_id: Annotated[Optional[StrictInt], Field(description="**Advanced**: The value of the [protocol identifier](https://en.wikipedia.org/wiki/GSM_03.40#Protocol_Identifier) to use. Ensure that the value is aligned with `udh`.")] = None,
        sig: Annotated[Optional[Annotated[str, Field(min_length=16, strict=True, max_length=60)]], Field(description="The hash of the request parameters in alphabetical order, a timestamp and the signature secret. See [Signing Requests](/concepts/guides/signing-messages) for more details.")] = None,
        status_report_req: Annotated[Optional[StrictBool], Field(description="**Advanced**: Boolean indicating if you like to receive a [Delivery Receipt](/messaging/sms/building-blocks/receive-a-delivery-receipt).")] = None,
        text: Annotated[Optional[StrictStr], Field(description="The body of the message being sent. If your message contains characters that can be encoded according to the GSM Standard and Extended tables then you can set the `type` to `text`. If your message contains characters outside this range, then you will need to set the `type` to `unicode`.")] = None,
        ttl: Annotated[Optional[Annotated[int, Field(le=604800000, strict=True, ge=20000)]], Field(description="**Advanced**: The duration in milliseconds the delivery of an SMS will be attempted.§§ By default Vonage attempts delivery for 72 hours, however the maximum effective value depends on the operator and is typically 24 - 48 hours. We recommend this value should be kept at its default or at least 30 minutes.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="**Advanced**: The format of the message body")] = None,
        udh: Annotated[Optional[StrictStr], Field(description="**Advanced**: Your custom Hex encoded [User Data Header](https://en.wikipedia.org/wiki/User_Data_Header). Depends on `type` parameter having the value `binary`.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Send an SMS

        Send an outbound SMS from your Vonage account

        :param format: The format of the response (required)
        :type format: str
        :param api_key: Your API key (required)
        :type api_key: str
        :param var_from: The name or number the message should be sent from. Alphanumeric senderID's are not supported in all countries, see [Global Messaging](/messaging/sms/guides/global-messaging#country-specific-features) for more details. If alphanumeric, spaces will be ignored. Numbers are specified in E.164 format. (required)
        :type var_from: str
        :param to: The number that the message should be sent to. Numbers are specified in E.164 format. (required)
        :type to: str
        :param account_ref: **Advanced**: An optional string used to identify separate accounts using the SMS endpoint for billing purposes. To use this feature, please email [support@nexmo.com](mailto:support@nexmo.com)
        :type account_ref: str
        :param api_secret: Your API secret. Required unless `sig` is provided
        :type api_secret: str
        :param body: **Advanced**: Hex encoded binary data. Depends on `type` parameter having the value `binary`.
        :type body: str
        :param param_callback: **Advanced**: The webhook endpoint the delivery receipt for this sms is sent to. This parameter overrides the webhook endpoint you set in Dashboard. Max 100 characters.
        :type param_callback: str
        :param client_ref: **Advanced**: You can optionally include your own reference of up to 100 characters.
        :type client_ref: str
        :param content_id: **Advanced**: A string parameter that satisfies regulatory requirements when sending an SMS to specific countries. For more information please refer to the [Country-Specific Outbound SMS Features](https://help.nexmo.com/hc/en-us/articles/115011781468)
        :type content_id: str
        :param entity_id: **Advanced**: A string parameter that satisfies regulatory requirements when sending an SMS to specific countries. For more information please refer to the [Country-Specific Outbound SMS Features](https://help.nexmo.com/hc/en-us/articles/115011781468)
        :type entity_id: str
        :param message_class: **Advanced**: The Data Coding Scheme value of the message
        :type message_class: int
        :param protocol_id: **Advanced**: The value of the [protocol identifier](https://en.wikipedia.org/wiki/GSM_03.40#Protocol_Identifier) to use. Ensure that the value is aligned with `udh`.
        :type protocol_id: int
        :param sig: The hash of the request parameters in alphabetical order, a timestamp and the signature secret. See [Signing Requests](/concepts/guides/signing-messages) for more details.
        :type sig: str
        :param status_report_req: **Advanced**: Boolean indicating if you like to receive a [Delivery Receipt](/messaging/sms/building-blocks/receive-a-delivery-receipt).
        :type status_report_req: bool
        :param text: The body of the message being sent. If your message contains characters that can be encoded according to the GSM Standard and Extended tables then you can set the `type` to `text`. If your message contains characters outside this range, then you will need to set the `type` to `unicode`.
        :type text: str
        :param ttl: **Advanced**: The duration in milliseconds the delivery of an SMS will be attempted.§§ By default Vonage attempts delivery for 72 hours, however the maximum effective value depends on the operator and is typically 24 - 48 hours. We recommend this value should be kept at its default or at least 30 minutes.
        :type ttl: int
        :param type: **Advanced**: The format of the message body
        :type type: str
        :param udh: **Advanced**: Your custom Hex encoded [User Data Header](https://en.wikipedia.org/wiki/User_Data_Header). Depends on `type` parameter having the value `binary`.
        :type udh: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._send_an_sms_serialize(
            format=format,
            api_key=api_key,
            var_from=var_from,
            to=to,
            account_ref=account_ref,
            api_secret=api_secret,
            body=body,
            param_callback=param_callback,
            client_ref=client_ref,
            content_id=content_id,
            entity_id=entity_id,
            message_class=message_class,
            protocol_id=protocol_id,
            sig=sig,
            status_report_req=status_report_req,
            text=text,
            ttl=ttl,
            type=type,
            udh=udh,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SendAnSms200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _send_an_sms_serialize(
        self,
        format,
        api_key,
        var_from,
        to,
        account_ref,
        api_secret,
        body,
        param_callback,
        client_ref,
        content_id,
        entity_id,
        message_class,
        protocol_id,
        sig,
        status_report_req,
        text,
        ttl,
        type,
        udh,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if format is not None:
            _path_params['format'] = format
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if account_ref is not None:
            _form_params.append(('account-ref', account_ref))
        if api_key is not None:
            _form_params.append(('api_key', api_key))
        if api_secret is not None:
            _form_params.append(('api_secret', api_secret))
        if body is not None:
            _form_params.append(('body', body))
        if param_callback is not None:
            _form_params.append(('callback', param_callback))
        if client_ref is not None:
            _form_params.append(('client-ref', client_ref))
        if content_id is not None:
            _form_params.append(('content-id', content_id))
        if entity_id is not None:
            _form_params.append(('entity-id', entity_id))
        if var_from is not None:
            _form_params.append(('from', var_from))
        if message_class is not None:
            _form_params.append(('message-class', message_class))
        if protocol_id is not None:
            _form_params.append(('protocol-id', protocol_id))
        if sig is not None:
            _form_params.append(('sig', sig))
        if status_report_req is not None:
            _form_params.append(('status-report-req', status_report_req))
        if text is not None:
            _form_params.append(('text', text))
        if to is not None:
            _form_params.append(('to', to))
        if ttl is not None:
            _form_params.append(('ttl', ttl))
        if type is not None:
            _form_params.append(('type', type))
        if udh is not None:
            _form_params.append(('udh', udh))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/xml'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/{format}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    SMS API

    With the SMS API you can send SMS from your account and lookup messages both messages that you've sent as well as messages sent to your virtual numbers. Numbers are specified in E.164 format. More SMS API documentation is at <https://developer.nexmo.com/messaging/sms/overview>

    The version of the OpenAPI document: 1.2.0
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Message(BaseModel):
    """
    Message
    """ # noqa: E501
    account_ref: Optional[StrictStr] = Field(default=None, description="**Advanced**: An optional string used to identify separate accounts using the SMS endpoint for billing purposes. To use this feature, please email [support@nexmo.com](mailto:support@nexmo.com)", alias="account-ref")
    client_ref: Optional[StrictStr] = Field(default=None, description="If a `client-ref` was included when sending the SMS, this field will be included and hold the value that was sent.", alias="client-ref")
    message_id: Optional[StrictStr] = Field(default=None, description="The ID of the message", alias="message-id")
    message_price: Optional[StrictStr] = Field(default=None, description="The estimated cost of the message", alias="message-price")
    network: Optional[StrictStr] = Field(default=None, description="The estimated ID of the network of the recipient")
    remaining_balance: Optional[StrictStr] = Field(default=None, description="Your estimated remaining balance", alias="remaining-balance")
    status: Optional[StrictStr] = Field(default=None, description="The status of the message. See [Troubleshooting Failed SMS](/messaging/sms/guides/troubleshooting-sms).")
    to: Optional[StrictStr] = Field(default=None, description="The number the message was sent to. Numbers are specified in E.164 format.")
    __properties: ClassVar[List[str]] = ["account-ref", "client-ref", "message-id", "message-price", "network", "remaining-balance", "status", "to"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Message from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Message from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account-ref": obj.get("account-ref"),
            "client-ref": obj.get("client-ref"),
            "message-id": obj.get("message-id"),
            "message-price": obj.get("message-price"),
            "network": obj.get("network"),
            "remaining-balance": obj.get("remaining-balance"),
            "status": obj.get("status"),
            "to": obj.get("to")
        })
        return _obj



# coding: utf-8

"""
    SMS API

    With the SMS API you can send SMS from your account and lookup messages both messages that you've sent as well as messages sent to your virtual numbers. Numbers are specified in E.164 format. More SMS API documentation is at <https://developer.nexmo.com/messaging/sms/overview>

    The version of the OpenAPI document: 1.2.0
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.error_xml import ErrorXml
from openapi_client.models.sms_xml import SMSXml
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

SENDANSMS200RESPONSE1_ONE_OF_SCHEMAS = ["ErrorXml", "SMSXml"]

class SendAnSms200Response1(BaseModel):
    """
    SendAnSms200Response1
    """
    # data type: SMSXml
    oneof_schema_1_validator: Optional[SMSXml] = None
    # data type: ErrorXml
    oneof_schema_2_validator: Optional[ErrorXml] = None
    actual_instance: Optional[Union[ErrorXml, SMSXml]] = None
    one_of_schemas: Set[str] = { "ErrorXml", "SMSXml" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = SendAnSms200Response1.model_construct()
        error_messages = []
        match = 0
        # validate data type: SMSXml
        if not isinstance(v, SMSXml):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SMSXml`")
        else:
            match += 1
        # validate data type: ErrorXml
        if not isinstance(v, ErrorXml):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ErrorXml`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in SendAnSms200Response1 with oneOf schemas: ErrorXml, SMSXml. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in SendAnSms200Response1 with oneOf schemas: ErrorXml, SMSXml. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into SMSXml
        try:
            instance.actual_instance = SMSXml.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ErrorXml
        try:
            instance.actual_instance = ErrorXml.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into SendAnSms200Response1 with oneOf schemas: ErrorXml, SMSXml. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into SendAnSms200Response1 with oneOf schemas: ErrorXml, SMSXml. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], ErrorXml, SMSXml]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



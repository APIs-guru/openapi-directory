# coding: utf-8

"""
    Dispatch API

    The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.

    The version of the OpenAPI document: 0.3.4
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.message_property_content import MessagePropertyContent

class TestMessagePropertyContent(unittest.TestCase):
    """MessagePropertyContent unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MessagePropertyContent:
        """Test MessagePropertyContent
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MessagePropertyContent`
        """
        model = MessagePropertyContent()
        if include_optional:
            return MessagePropertyContent(
                audio = openapi_client.models.audio_property.AudioProperty(
                    url = 'https://example.com/audio.mp3', ),
                file = openapi_client.models.file_property.FileProperty(
                    caption = 'Additional text to accompany the image.', 
                    url = 'https://example.com/file.zip', ),
                image = openapi_client.models.image_property.ImageProperty(
                    caption = 'Additional text to accompany the image.', 
                    url = 'https://example.com/image.jpg', ),
                template = openapi_client.models.template_property.TemplateProperty(
                    name = 'whatsapp:hsm:technology:vonage:verify', 
                    parameters = [
                        openapi_client.models.template_property_parameters_inner.TemplateProperty_parameters_inner(
                            default = '1234', )
                        ], ),
                text = 'Vonage Verification code: 64873. Valid for 10 minutes.',
                type = 'text',
                video = openapi_client.models.video_property.VideoProperty(
                    url = 'https://example.com/video.mp4', )
            )
        else:
            return MessagePropertyContent(
                type = 'text',
        )
        """

    def testMessagePropertyContent(self):
        """Test MessagePropertyContent"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

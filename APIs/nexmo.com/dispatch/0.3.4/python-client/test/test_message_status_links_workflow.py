# coding: utf-8

"""
    Dispatch API

    The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.

    The version of the OpenAPI document: 0.3.4
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.message_status_links_workflow import MessageStatusLinksWorkflow

class TestMessageStatusLinksWorkflow(unittest.TestCase):
    """MessageStatusLinksWorkflow unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MessageStatusLinksWorkflow:
        """Test MessageStatusLinksWorkflow
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MessageStatusLinksWorkflow`
        """
        model = MessageStatusLinksWorkflow()
        if include_optional:
            return MessageStatusLinksWorkflow(
                dispatch_uuid = 'aaaaaaaa-bbbb-cccc-dddd-0123456789ab',
                href = '/workflows/aaaaaaaa-bbbb-cccc-dddd-0123456789ab'
            )
        else:
            return MessageStatusLinksWorkflow(
        )
        """

    def testMessageStatusLinksWorkflow(self):
        """Test MessageStatusLinksWorkflow"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

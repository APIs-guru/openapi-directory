# coding: utf-8

"""
    Dispatch API

    The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.

    The version of the OpenAPI document: 0.3.4
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.create_workflow_workflow_inner import CreateWorkflowWorkflowInner
from typing import Optional, Set
from typing_extensions import Self

class CreateWorkflow(BaseModel):
    """
    CreateWorkflow
    """ # noqa: E501
    template: Optional[StrictStr] = Field(default=None, description="The template that the Dispatch API will execute. For the initial version of the API the only available value will be failover")
    workflow: Optional[List[CreateWorkflowWorkflowInner]] = Field(default=None, description="Contains a message object that must reflect the current /messages resource. All parameters within the content object reflect the /messages docs.")
    __properties: ClassVar[List[str]] = ["template", "workflow"]

    @field_validator('template')
    def template_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['failover']):
            raise ValueError("must be one of enum values ('failover')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateWorkflow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in workflow (list)
        _items = []
        if self.workflow:
            for _item_workflow in self.workflow:
                if _item_workflow:
                    _items.append(_item_workflow.to_dict())
            _dict['workflow'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateWorkflow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "template": obj.get("template"),
            "workflow": [CreateWorkflowWorkflowInner.from_dict(_item) for _item in obj["workflow"]] if obj.get("workflow") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Dispatch API

    The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.

    The version of the OpenAPI document: 0.3.4
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.send_message import SendMessage
from openapi_client.models.send_with_failover_message import SendWithFailoverMessage
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

CREATEWORKFLOWWORKFLOWINNER_ONE_OF_SCHEMAS = ["SendMessage", "SendWithFailoverMessage"]

class CreateWorkflowWorkflowInner(BaseModel):
    """
    CreateWorkflowWorkflowInner
    """
    # data type: SendWithFailoverMessage
    oneof_schema_1_validator: Optional[SendWithFailoverMessage] = None
    # data type: SendMessage
    oneof_schema_2_validator: Optional[SendMessage] = None
    actual_instance: Optional[Union[SendMessage, SendWithFailoverMessage]] = None
    one_of_schemas: Set[str] = { "SendMessage", "SendWithFailoverMessage" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = CreateWorkflowWorkflowInner.model_construct()
        error_messages = []
        match = 0
        # validate data type: SendWithFailoverMessage
        if not isinstance(v, SendWithFailoverMessage):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendWithFailoverMessage`")
        else:
            match += 1
        # validate data type: SendMessage
        if not isinstance(v, SendMessage):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendMessage`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in CreateWorkflowWorkflowInner with oneOf schemas: SendMessage, SendWithFailoverMessage. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in CreateWorkflowWorkflowInner with oneOf schemas: SendMessage, SendWithFailoverMessage. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into SendWithFailoverMessage
        try:
            instance.actual_instance = SendWithFailoverMessage.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendMessage
        try:
            instance.actual_instance = SendMessage.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into CreateWorkflowWorkflowInner with oneOf schemas: SendMessage, SendWithFailoverMessage. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into CreateWorkflowWorkflowInner with oneOf schemas: SendMessage, SendWithFailoverMessage. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], SendMessage, SendWithFailoverMessage]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



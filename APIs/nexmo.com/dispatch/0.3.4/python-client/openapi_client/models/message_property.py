# coding: utf-8

"""
    Dispatch API

    The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.

    The version of the OpenAPI document: 0.3.4
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.message_property_content import MessagePropertyContent
from openapi_client.models.message_property_messenger import MessagePropertyMessenger
from openapi_client.models.message_property_viber_service_msg import MessagePropertyViberServiceMsg
from openapi_client.models.message_property_whatsapp import MessagePropertyWhatsapp
from typing import Optional, Set
from typing_extensions import Self

class MessageProperty(BaseModel):
    """
    MessageProperty
    """ # noqa: E501
    content: MessagePropertyContent
    messenger: Optional[MessagePropertyMessenger] = None
    viber_service_msg: Optional[MessagePropertyViberServiceMsg] = None
    whatsapp: Optional[MessagePropertyWhatsapp] = None
    __properties: ClassVar[List[str]] = ["content", "messenger", "viber_service_msg", "whatsapp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MessageProperty from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of messenger
        if self.messenger:
            _dict['messenger'] = self.messenger.to_dict()
        # override the default output from pydantic by calling `to_dict()` of viber_service_msg
        if self.viber_service_msg:
            _dict['viber_service_msg'] = self.viber_service_msg.to_dict()
        # override the default output from pydantic by calling `to_dict()` of whatsapp
        if self.whatsapp:
            _dict['whatsapp'] = self.whatsapp.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MessageProperty from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content": MessagePropertyContent.from_dict(obj["content"]) if obj.get("content") is not None else None,
            "messenger": MessagePropertyMessenger.from_dict(obj["messenger"]) if obj.get("messenger") is not None else None,
            "viber_service_msg": MessagePropertyViberServiceMsg.from_dict(obj["viber_service_msg"]) if obj.get("viber_service_msg") is not None else None,
            "whatsapp": MessagePropertyWhatsapp.from_dict(obj["whatsapp"]) if obj.get("whatsapp") is not None else None
        })
        return _obj



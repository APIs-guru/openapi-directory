# coding: utf-8

"""
    Dispatch API

    The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.

    The version of the OpenAPI document: 0.3.4
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.audio_property import AudioProperty
from openapi_client.models.file_property import FileProperty
from openapi_client.models.image_property import ImageProperty
from openapi_client.models.template_property import TemplateProperty
from openapi_client.models.video_property import VideoProperty
from typing import Optional, Set
from typing_extensions import Self

class MessagePropertyContent(BaseModel):
    """
    MessagePropertyContent
    """ # noqa: E501
    audio: Optional[AudioProperty] = None
    file: Optional[FileProperty] = None
    image: Optional[ImageProperty] = None
    template: Optional[TemplateProperty] = None
    text: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=4096)]] = Field(default=None, description="The text of the message.  **Messenger**: Is limited to 640 characters  **SMS** or **Viber**: Is 1000 characters  **WhatsApp**: is 4096 characters ")
    type: StrictStr = Field(description="The type of message that you are sending.  **Messenger**: supports `text`, `image`, `audio`, `video` and `file`.  **Viber Business Messages**: supports `image` and `text`.  **WhatsApp**: supports `template`, `text`, `image`, `audio`, `video` and `file`.  **SMS**: supports `text`. ")
    video: Optional[VideoProperty] = None
    __properties: ClassVar[List[str]] = ["audio", "file", "image", "template", "text", "type", "video"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['text', 'image', 'audio', 'video', 'file', 'template', 'custom']):
            raise ValueError("must be one of enum values ('text', 'image', 'audio', 'video', 'file', 'template', 'custom')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MessagePropertyContent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of audio
        if self.audio:
            _dict['audio'] = self.audio.to_dict()
        # override the default output from pydantic by calling `to_dict()` of file
        if self.file:
            _dict['file'] = self.file.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of template
        if self.template:
            _dict['template'] = self.template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video
        if self.video:
            _dict['video'] = self.video.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MessagePropertyContent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audio": AudioProperty.from_dict(obj["audio"]) if obj.get("audio") is not None else None,
            "file": FileProperty.from_dict(obj["file"]) if obj.get("file") is not None else None,
            "image": ImageProperty.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "template": TemplateProperty.from_dict(obj["template"]) if obj.get("template") is not None else None,
            "text": obj.get("text"),
            "type": obj.get("type"),
            "video": VideoProperty.from_dict(obj["video"]) if obj.get("video") is not None else None
        })
        return _obj



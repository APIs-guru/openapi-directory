# coding: utf-8

"""
    Dispatch API

    The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.

    The version of the OpenAPI document: 0.3.4
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.from_property import FromProperty
from openapi_client.models.message_status_error import MessageStatusError
from openapi_client.models.message_status_links import MessageStatusLinks
from openapi_client.models.message_status_usage import MessageStatusUsage
from openapi_client.models.to_property import ToProperty
from typing import Optional, Set
from typing_extensions import Self

class MessageStatus(BaseModel):
    """
    The callbacks for the message status are the same as defined in the Messaging API. The only difference will be that dispatch_uuid and link will be appended.
    """ # noqa: E501
    links: Optional[MessageStatusLinks] = Field(default=None, alias="_links")
    error: Optional[MessageStatusError] = None
    var_from: Optional[FromProperty] = Field(default=None, alias="from")
    message_uuid: Optional[StrictStr] = None
    status: Optional[StrictStr] = Field(default=None, description="The status of the message.")
    timestamp: Optional[StrictStr] = Field(default=None, description="The datetime of when the event occurred.")
    to: Optional[ToProperty] = None
    usage: Optional[MessageStatusUsage] = None
    __properties: ClassVar[List[str]] = ["_links", "error", "from", "message_uuid", "status", "timestamp", "to", "usage"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['submitted', 'delivered', 'read', 'rejected', 'undeliverable']):
            raise ValueError("must be one of enum values ('submitted', 'delivered', 'read', 'rejected', 'undeliverable')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MessageStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_from
        if self.var_from:
            _dict['from'] = self.var_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of to
        if self.to:
            _dict['to'] = self.to.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usage
        if self.usage:
            _dict['usage'] = self.usage.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MessageStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_links": MessageStatusLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "error": MessageStatusError.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "from": FromProperty.from_dict(obj["from"]) if obj.get("from") is not None else None,
            "message_uuid": obj.get("message_uuid"),
            "status": obj.get("status"),
            "timestamp": obj.get("timestamp"),
            "to": ToProperty.from_dict(obj["to"]) if obj.get("to") is not None else None,
            "usage": MessageStatusUsage.from_dict(obj["usage"]) if obj.get("usage") is not None else None
        })
        return _obj



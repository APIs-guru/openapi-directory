# coding: utf-8

"""
    Numbers API

    The Numbers API enables you to manage your existing numbers and buy new virtual numbers for use with the Vonage APIs. Further information is here: <https://developer.nexmo.com/numbers/overview>

    The version of the OpenAPI document: 1.0.20
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Ownednumber(BaseModel):
    """
    Ownednumber
    """ # noqa: E501
    country: Optional[Annotated[str, Field(min_length=2, strict=True, max_length=2)]] = Field(default=None, description="The two character country code in ISO 3166-1 alpha-2 format")
    features: Optional[List[StrictStr]] = Field(default=None, description="The capabilities of the number: `SMS` or `VOICE` or `SMS,VOICE` or `SMS,MMS` or `VOICE,MMS` or `SMS,MMS,VOICE`")
    messages_callback_type: Optional[StrictStr] = Field(default=None, description="The messages webhook type: always `app`", alias="messagesCallbackType")
    messages_callback_value: Optional[StrictStr] = Field(default=None, description="An Application ID", alias="messagesCallbackValue")
    mo_http_url: Optional[StrictStr] = Field(default=None, description="The URL of the webhook endpoint that handles inbound messages", alias="moHttpUrl")
    msisdn: Optional[StrictStr] = Field(default=None, description="An available inbound virtual number.")
    type: Optional[StrictStr] = Field(default=None, description="The type of number: `landline`, `landline-toll-free` or `mobile-lvn`")
    voice_callback_type: Optional[StrictStr] = Field(default=None, description="The voice webhook type: `sip`, `tel`, or `app`", alias="voiceCallbackType")
    voice_callback_value: Optional[StrictStr] = Field(default=None, description="A SIP URI, telephone number or Application ID", alias="voiceCallbackValue")
    __properties: ClassVar[List[str]] = ["country", "features", "messagesCallbackType", "messagesCallbackValue", "moHttpUrl", "msisdn", "type", "voiceCallbackType", "voiceCallbackValue"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Ownednumber from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Ownednumber from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "country": obj.get("country"),
            "features": obj.get("features"),
            "messagesCallbackType": obj.get("messagesCallbackType"),
            "messagesCallbackValue": obj.get("messagesCallbackValue"),
            "moHttpUrl": obj.get("moHttpUrl"),
            "msisdn": obj.get("msisdn"),
            "type": obj.get("type"),
            "voiceCallbackType": obj.get("voiceCallbackType"),
            "voiceCallbackValue": obj.get("voiceCallbackValue")
        })
        return _obj



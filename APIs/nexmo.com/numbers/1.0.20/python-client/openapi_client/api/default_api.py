# coding: utf-8

"""
    Numbers API

    The Numbers API enables you to manage your existing numbers and buy new virtual numbers for use with the Vonage APIs. Further information is here: <https://developer.nexmo.com/numbers/overview>

    The version of the OpenAPI document: 1.0.20
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.available_numbers import AvailableNumbers
from openapi_client.models.inbound_numbers import InboundNumbers
from openapi_client.models.response import Response

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def buy_a_number(
        self,
        country: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="The two character country code in ISO 3166-1 alpha-2 format")],
        msisdn: Annotated[StrictStr, Field(description="An available inbound virtual number.")],
        target_api_key: Annotated[Optional[StrictStr], Field(description="If you’d like to perform an action on a subaccount, provide the `api_key` of that account here. If you’d like to perform an action on your own account, you do not need to provide this field.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Response:
        """Buy a number

        Request to purchase a specific inbound number.

        :param country: The two character country code in ISO 3166-1 alpha-2 format (required)
        :type country: str
        :param msisdn: An available inbound virtual number. (required)
        :type msisdn: str
        :param target_api_key: If you’d like to perform an action on a subaccount, provide the `api_key` of that account here. If you’d like to perform an action on your own account, you do not need to provide this field.
        :type target_api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._buy_a_number_serialize(
            country=country,
            msisdn=msisdn,
            target_api_key=target_api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Response",
            '401': "Unauthorized",
            '420': "Response420",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def buy_a_number_with_http_info(
        self,
        country: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="The two character country code in ISO 3166-1 alpha-2 format")],
        msisdn: Annotated[StrictStr, Field(description="An available inbound virtual number.")],
        target_api_key: Annotated[Optional[StrictStr], Field(description="If you’d like to perform an action on a subaccount, provide the `api_key` of that account here. If you’d like to perform an action on your own account, you do not need to provide this field.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Response]:
        """Buy a number

        Request to purchase a specific inbound number.

        :param country: The two character country code in ISO 3166-1 alpha-2 format (required)
        :type country: str
        :param msisdn: An available inbound virtual number. (required)
        :type msisdn: str
        :param target_api_key: If you’d like to perform an action on a subaccount, provide the `api_key` of that account here. If you’d like to perform an action on your own account, you do not need to provide this field.
        :type target_api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._buy_a_number_serialize(
            country=country,
            msisdn=msisdn,
            target_api_key=target_api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Response",
            '401': "Unauthorized",
            '420': "Response420",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def buy_a_number_without_preload_content(
        self,
        country: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="The two character country code in ISO 3166-1 alpha-2 format")],
        msisdn: Annotated[StrictStr, Field(description="An available inbound virtual number.")],
        target_api_key: Annotated[Optional[StrictStr], Field(description="If you’d like to perform an action on a subaccount, provide the `api_key` of that account here. If you’d like to perform an action on your own account, you do not need to provide this field.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Buy a number

        Request to purchase a specific inbound number.

        :param country: The two character country code in ISO 3166-1 alpha-2 format (required)
        :type country: str
        :param msisdn: An available inbound virtual number. (required)
        :type msisdn: str
        :param target_api_key: If you’d like to perform an action on a subaccount, provide the `api_key` of that account here. If you’d like to perform an action on your own account, you do not need to provide this field.
        :type target_api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._buy_a_number_serialize(
            country=country,
            msisdn=msisdn,
            target_api_key=target_api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Response",
            '401': "Unauthorized",
            '420': "Response420",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _buy_a_number_serialize(
        self,
        country,
        msisdn,
        target_api_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if country is not None:
            _form_params.append(('country', country))
        if msisdn is not None:
            _form_params.append(('msisdn', msisdn))
        if target_api_key is not None:
            _form_params.append(('target_api_key', target_api_key))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/xml'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKey', 
            'apiSecret'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/number/buy',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def cancel_a_number(
        self,
        country: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="The two character country code in ISO 3166-1 alpha-2 format")],
        msisdn: Annotated[StrictStr, Field(description="An available inbound virtual number.")],
        target_api_key: Annotated[Optional[StrictStr], Field(description="If you’d like to perform an action on a subaccount, provide the `api_key` of that account here. If you’d like to perform an action on your own account, you do not need to provide this field.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Response:
        """Cancel a number

        Cancel your subscription for a specific inbound number.

        :param country: The two character country code in ISO 3166-1 alpha-2 format (required)
        :type country: str
        :param msisdn: An available inbound virtual number. (required)
        :type msisdn: str
        :param target_api_key: If you’d like to perform an action on a subaccount, provide the `api_key` of that account here. If you’d like to perform an action on your own account, you do not need to provide this field.
        :type target_api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancel_a_number_serialize(
            country=country,
            msisdn=msisdn,
            target_api_key=target_api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Response",
            '401': "Unauthorized",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def cancel_a_number_with_http_info(
        self,
        country: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="The two character country code in ISO 3166-1 alpha-2 format")],
        msisdn: Annotated[StrictStr, Field(description="An available inbound virtual number.")],
        target_api_key: Annotated[Optional[StrictStr], Field(description="If you’d like to perform an action on a subaccount, provide the `api_key` of that account here. If you’d like to perform an action on your own account, you do not need to provide this field.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Response]:
        """Cancel a number

        Cancel your subscription for a specific inbound number.

        :param country: The two character country code in ISO 3166-1 alpha-2 format (required)
        :type country: str
        :param msisdn: An available inbound virtual number. (required)
        :type msisdn: str
        :param target_api_key: If you’d like to perform an action on a subaccount, provide the `api_key` of that account here. If you’d like to perform an action on your own account, you do not need to provide this field.
        :type target_api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancel_a_number_serialize(
            country=country,
            msisdn=msisdn,
            target_api_key=target_api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Response",
            '401': "Unauthorized",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def cancel_a_number_without_preload_content(
        self,
        country: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="The two character country code in ISO 3166-1 alpha-2 format")],
        msisdn: Annotated[StrictStr, Field(description="An available inbound virtual number.")],
        target_api_key: Annotated[Optional[StrictStr], Field(description="If you’d like to perform an action on a subaccount, provide the `api_key` of that account here. If you’d like to perform an action on your own account, you do not need to provide this field.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Cancel a number

        Cancel your subscription for a specific inbound number.

        :param country: The two character country code in ISO 3166-1 alpha-2 format (required)
        :type country: str
        :param msisdn: An available inbound virtual number. (required)
        :type msisdn: str
        :param target_api_key: If you’d like to perform an action on a subaccount, provide the `api_key` of that account here. If you’d like to perform an action on your own account, you do not need to provide this field.
        :type target_api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancel_a_number_serialize(
            country=country,
            msisdn=msisdn,
            target_api_key=target_api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Response",
            '401': "Unauthorized",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _cancel_a_number_serialize(
        self,
        country,
        msisdn,
        target_api_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if country is not None:
            _form_params.append(('country', country))
        if msisdn is not None:
            _form_params.append(('msisdn', msisdn))
        if target_api_key is not None:
            _form_params.append(('target_api_key', target_api_key))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/xml'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKey', 
            'apiSecret'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/number/cancel',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_available_numbers(
        self,
        country: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="The two character country code to filter on (in ISO 3166-1 alpha-2 format)")],
        type: Annotated[Optional[StrictStr], Field(description="Set this parameter to filter the type of number, such as mobile or landline")] = None,
        pattern: Annotated[Optional[StrictStr], Field(description="The number pattern you want to search for. Use in conjunction with `search_pattern`.")] = None,
        search_pattern: Annotated[Optional[StrictInt], Field(description="The strategy you want to use for matching:   * `0` - Search for numbers that start with `pattern` (Note: all numbers are in E.164 format, so the starting pattern includes the country code, such as 1 for USA) * `1` - Search for numbers that contain `pattern` * `2` - Search for numbers that end with `pattern` ")] = None,
        features: Annotated[Optional[StrictStr], Field(description="Available features are `SMS`, `VOICE` and `MMS`. To look for numbers that support multiple features, use a comma-separated value: `SMS,MMS,VOICE`.")] = None,
        size: Annotated[Optional[Annotated[int, Field(le=100, strict=True)]], Field(description="Page size")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Page index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AvailableNumbers:
        """Search available numbers

        Retrieve inbound numbers that are available for the specified country.

        :param country: The two character country code to filter on (in ISO 3166-1 alpha-2 format) (required)
        :type country: str
        :param type: Set this parameter to filter the type of number, such as mobile or landline
        :type type: str
        :param pattern: The number pattern you want to search for. Use in conjunction with `search_pattern`.
        :type pattern: str
        :param search_pattern: The strategy you want to use for matching:   * `0` - Search for numbers that start with `pattern` (Note: all numbers are in E.164 format, so the starting pattern includes the country code, such as 1 for USA) * `1` - Search for numbers that contain `pattern` * `2` - Search for numbers that end with `pattern` 
        :type search_pattern: int
        :param features: Available features are `SMS`, `VOICE` and `MMS`. To look for numbers that support multiple features, use a comma-separated value: `SMS,MMS,VOICE`.
        :type features: str
        :param size: Page size
        :type size: int
        :param index: Page index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_available_numbers_serialize(
            country=country,
            type=type,
            pattern=pattern,
            search_pattern=search_pattern,
            features=features,
            size=size,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AvailableNumbers",
            '401': "AccountUnauthorized",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_available_numbers_with_http_info(
        self,
        country: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="The two character country code to filter on (in ISO 3166-1 alpha-2 format)")],
        type: Annotated[Optional[StrictStr], Field(description="Set this parameter to filter the type of number, such as mobile or landline")] = None,
        pattern: Annotated[Optional[StrictStr], Field(description="The number pattern you want to search for. Use in conjunction with `search_pattern`.")] = None,
        search_pattern: Annotated[Optional[StrictInt], Field(description="The strategy you want to use for matching:   * `0` - Search for numbers that start with `pattern` (Note: all numbers are in E.164 format, so the starting pattern includes the country code, such as 1 for USA) * `1` - Search for numbers that contain `pattern` * `2` - Search for numbers that end with `pattern` ")] = None,
        features: Annotated[Optional[StrictStr], Field(description="Available features are `SMS`, `VOICE` and `MMS`. To look for numbers that support multiple features, use a comma-separated value: `SMS,MMS,VOICE`.")] = None,
        size: Annotated[Optional[Annotated[int, Field(le=100, strict=True)]], Field(description="Page size")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Page index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AvailableNumbers]:
        """Search available numbers

        Retrieve inbound numbers that are available for the specified country.

        :param country: The two character country code to filter on (in ISO 3166-1 alpha-2 format) (required)
        :type country: str
        :param type: Set this parameter to filter the type of number, such as mobile or landline
        :type type: str
        :param pattern: The number pattern you want to search for. Use in conjunction with `search_pattern`.
        :type pattern: str
        :param search_pattern: The strategy you want to use for matching:   * `0` - Search for numbers that start with `pattern` (Note: all numbers are in E.164 format, so the starting pattern includes the country code, such as 1 for USA) * `1` - Search for numbers that contain `pattern` * `2` - Search for numbers that end with `pattern` 
        :type search_pattern: int
        :param features: Available features are `SMS`, `VOICE` and `MMS`. To look for numbers that support multiple features, use a comma-separated value: `SMS,MMS,VOICE`.
        :type features: str
        :param size: Page size
        :type size: int
        :param index: Page index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_available_numbers_serialize(
            country=country,
            type=type,
            pattern=pattern,
            search_pattern=search_pattern,
            features=features,
            size=size,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AvailableNumbers",
            '401': "AccountUnauthorized",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_available_numbers_without_preload_content(
        self,
        country: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="The two character country code to filter on (in ISO 3166-1 alpha-2 format)")],
        type: Annotated[Optional[StrictStr], Field(description="Set this parameter to filter the type of number, such as mobile or landline")] = None,
        pattern: Annotated[Optional[StrictStr], Field(description="The number pattern you want to search for. Use in conjunction with `search_pattern`.")] = None,
        search_pattern: Annotated[Optional[StrictInt], Field(description="The strategy you want to use for matching:   * `0` - Search for numbers that start with `pattern` (Note: all numbers are in E.164 format, so the starting pattern includes the country code, such as 1 for USA) * `1` - Search for numbers that contain `pattern` * `2` - Search for numbers that end with `pattern` ")] = None,
        features: Annotated[Optional[StrictStr], Field(description="Available features are `SMS`, `VOICE` and `MMS`. To look for numbers that support multiple features, use a comma-separated value: `SMS,MMS,VOICE`.")] = None,
        size: Annotated[Optional[Annotated[int, Field(le=100, strict=True)]], Field(description="Page size")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Page index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search available numbers

        Retrieve inbound numbers that are available for the specified country.

        :param country: The two character country code to filter on (in ISO 3166-1 alpha-2 format) (required)
        :type country: str
        :param type: Set this parameter to filter the type of number, such as mobile or landline
        :type type: str
        :param pattern: The number pattern you want to search for. Use in conjunction with `search_pattern`.
        :type pattern: str
        :param search_pattern: The strategy you want to use for matching:   * `0` - Search for numbers that start with `pattern` (Note: all numbers are in E.164 format, so the starting pattern includes the country code, such as 1 for USA) * `1` - Search for numbers that contain `pattern` * `2` - Search for numbers that end with `pattern` 
        :type search_pattern: int
        :param features: Available features are `SMS`, `VOICE` and `MMS`. To look for numbers that support multiple features, use a comma-separated value: `SMS,MMS,VOICE`.
        :type features: str
        :param size: Page size
        :type size: int
        :param index: Page index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_available_numbers_serialize(
            country=country,
            type=type,
            pattern=pattern,
            search_pattern=search_pattern,
            features=features,
            size=size,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AvailableNumbers",
            '401': "AccountUnauthorized",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_available_numbers_serialize(
        self,
        country,
        type,
        pattern,
        search_pattern,
        features,
        size,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if country is not None:
            
            _query_params.append(('country', country))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        if pattern is not None:
            
            _query_params.append(('pattern', pattern))
            
        if search_pattern is not None:
            
            _query_params.append(('search_pattern', search_pattern))
            
        if features is not None:
            
            _query_params.append(('features', features))
            
        if size is not None:
            
            _query_params.append(('size', size))
            
        if index is not None:
            
            _query_params.append(('index', index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey', 
            'apiSecret'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/number/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_owned_numbers(
        self,
        application_id: Annotated[Optional[StrictStr], Field(description="The Application that you want to return the numbers for.")] = None,
        has_application: Annotated[Optional[StrictBool], Field(description="Set this optional field to `true` to restrict your results to numbers associated with an Application (any Application). Set to `false` to find all numbers not associated with any Application. Omit the field to avoid filtering on whether or not the number is assigned to an Application. ")] = None,
        country: Optional[Annotated[str, Field(min_length=2, strict=True, max_length=2)]] = None,
        pattern: Annotated[Optional[StrictStr], Field(description="The number pattern you want to search for. Use in conjunction with `search_pattern`.")] = None,
        search_pattern: Annotated[Optional[StrictInt], Field(description="The strategy you want to use for matching:   * `0` - Search for numbers that start with `pattern` (Note: all numbers are in E.164 format, so the starting pattern includes the country code, such as 1 for USA) * `1` - Search for numbers that contain `pattern` * `2` - Search for numbers that end with `pattern` ")] = None,
        size: Annotated[Optional[Annotated[int, Field(le=100, strict=True)]], Field(description="Page size")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Page index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> InboundNumbers:
        """List the numbers you own

        Retrieve all the inbound numbers associated with your Vonage account.

        :param application_id: The Application that you want to return the numbers for.
        :type application_id: str
        :param has_application: Set this optional field to `true` to restrict your results to numbers associated with an Application (any Application). Set to `false` to find all numbers not associated with any Application. Omit the field to avoid filtering on whether or not the number is assigned to an Application. 
        :type has_application: bool
        :param country:
        :type country: str
        :param pattern: The number pattern you want to search for. Use in conjunction with `search_pattern`.
        :type pattern: str
        :param search_pattern: The strategy you want to use for matching:   * `0` - Search for numbers that start with `pattern` (Note: all numbers are in E.164 format, so the starting pattern includes the country code, such as 1 for USA) * `1` - Search for numbers that contain `pattern` * `2` - Search for numbers that end with `pattern` 
        :type search_pattern: int
        :param size: Page size
        :type size: int
        :param index: Page index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_owned_numbers_serialize(
            application_id=application_id,
            has_application=has_application,
            country=country,
            pattern=pattern,
            search_pattern=search_pattern,
            size=size,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InboundNumbers",
            '401': "AccountUnauthorized",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_owned_numbers_with_http_info(
        self,
        application_id: Annotated[Optional[StrictStr], Field(description="The Application that you want to return the numbers for.")] = None,
        has_application: Annotated[Optional[StrictBool], Field(description="Set this optional field to `true` to restrict your results to numbers associated with an Application (any Application). Set to `false` to find all numbers not associated with any Application. Omit the field to avoid filtering on whether or not the number is assigned to an Application. ")] = None,
        country: Optional[Annotated[str, Field(min_length=2, strict=True, max_length=2)]] = None,
        pattern: Annotated[Optional[StrictStr], Field(description="The number pattern you want to search for. Use in conjunction with `search_pattern`.")] = None,
        search_pattern: Annotated[Optional[StrictInt], Field(description="The strategy you want to use for matching:   * `0` - Search for numbers that start with `pattern` (Note: all numbers are in E.164 format, so the starting pattern includes the country code, such as 1 for USA) * `1` - Search for numbers that contain `pattern` * `2` - Search for numbers that end with `pattern` ")] = None,
        size: Annotated[Optional[Annotated[int, Field(le=100, strict=True)]], Field(description="Page size")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Page index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[InboundNumbers]:
        """List the numbers you own

        Retrieve all the inbound numbers associated with your Vonage account.

        :param application_id: The Application that you want to return the numbers for.
        :type application_id: str
        :param has_application: Set this optional field to `true` to restrict your results to numbers associated with an Application (any Application). Set to `false` to find all numbers not associated with any Application. Omit the field to avoid filtering on whether or not the number is assigned to an Application. 
        :type has_application: bool
        :param country:
        :type country: str
        :param pattern: The number pattern you want to search for. Use in conjunction with `search_pattern`.
        :type pattern: str
        :param search_pattern: The strategy you want to use for matching:   * `0` - Search for numbers that start with `pattern` (Note: all numbers are in E.164 format, so the starting pattern includes the country code, such as 1 for USA) * `1` - Search for numbers that contain `pattern` * `2` - Search for numbers that end with `pattern` 
        :type search_pattern: int
        :param size: Page size
        :type size: int
        :param index: Page index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_owned_numbers_serialize(
            application_id=application_id,
            has_application=has_application,
            country=country,
            pattern=pattern,
            search_pattern=search_pattern,
            size=size,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InboundNumbers",
            '401': "AccountUnauthorized",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_owned_numbers_without_preload_content(
        self,
        application_id: Annotated[Optional[StrictStr], Field(description="The Application that you want to return the numbers for.")] = None,
        has_application: Annotated[Optional[StrictBool], Field(description="Set this optional field to `true` to restrict your results to numbers associated with an Application (any Application). Set to `false` to find all numbers not associated with any Application. Omit the field to avoid filtering on whether or not the number is assigned to an Application. ")] = None,
        country: Optional[Annotated[str, Field(min_length=2, strict=True, max_length=2)]] = None,
        pattern: Annotated[Optional[StrictStr], Field(description="The number pattern you want to search for. Use in conjunction with `search_pattern`.")] = None,
        search_pattern: Annotated[Optional[StrictInt], Field(description="The strategy you want to use for matching:   * `0` - Search for numbers that start with `pattern` (Note: all numbers are in E.164 format, so the starting pattern includes the country code, such as 1 for USA) * `1` - Search for numbers that contain `pattern` * `2` - Search for numbers that end with `pattern` ")] = None,
        size: Annotated[Optional[Annotated[int, Field(le=100, strict=True)]], Field(description="Page size")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Page index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List the numbers you own

        Retrieve all the inbound numbers associated with your Vonage account.

        :param application_id: The Application that you want to return the numbers for.
        :type application_id: str
        :param has_application: Set this optional field to `true` to restrict your results to numbers associated with an Application (any Application). Set to `false` to find all numbers not associated with any Application. Omit the field to avoid filtering on whether or not the number is assigned to an Application. 
        :type has_application: bool
        :param country:
        :type country: str
        :param pattern: The number pattern you want to search for. Use in conjunction with `search_pattern`.
        :type pattern: str
        :param search_pattern: The strategy you want to use for matching:   * `0` - Search for numbers that start with `pattern` (Note: all numbers are in E.164 format, so the starting pattern includes the country code, such as 1 for USA) * `1` - Search for numbers that contain `pattern` * `2` - Search for numbers that end with `pattern` 
        :type search_pattern: int
        :param size: Page size
        :type size: int
        :param index: Page index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_owned_numbers_serialize(
            application_id=application_id,
            has_application=has_application,
            country=country,
            pattern=pattern,
            search_pattern=search_pattern,
            size=size,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InboundNumbers",
            '401': "AccountUnauthorized",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_owned_numbers_serialize(
        self,
        application_id,
        has_application,
        country,
        pattern,
        search_pattern,
        size,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if application_id is not None:
            
            _query_params.append(('application_id', application_id))
            
        if has_application is not None:
            
            _query_params.append(('has_application', has_application))
            
        if country is not None:
            
            _query_params.append(('country', country))
            
        if pattern is not None:
            
            _query_params.append(('pattern', pattern))
            
        if search_pattern is not None:
            
            _query_params.append(('search_pattern', search_pattern))
            
        if size is not None:
            
            _query_params.append(('size', size))
            
        if index is not None:
            
            _query_params.append(('index', index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey', 
            'apiSecret'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/account/numbers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_a_number(
        self,
        country: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="The two character country code in ISO 3166-1 alpha-2 format")],
        msisdn: Annotated[StrictStr, Field(description="An available inbound virtual number.")],
        app_id: Annotated[Optional[StrictStr], Field(description="The Application that will handle inbound traffic to this number.")] = None,
        messages_callback_type: Annotated[Optional[StrictStr], Field(description="<strong>DEPRECATED</strong> - We recommend that you use `app_id` instead.  Specifies the Messages webhook type (always `app`) associated with this number and must be used with the `messagesCallbackValue` parameter. ")] = None,
        messages_callback_value: Annotated[Optional[StrictStr], Field(description="<strong>DEPRECATED</strong> - We recommend that you use `app_id` instead.  Specifies the Application ID of your Messages application. It must be used with the `messagesCallbackType` parameter. ")] = None,
        mo_http_url: Annotated[Optional[StrictStr], Field(description="An URL-encoded URI to the webhook endpoint that handles inbound messages. Your webhook endpoint must be active before you make this request. Vonage makes a `GET` request to the endpoint and checks that it returns a `200 OK` response. Set this parameter's value to an empty string to remove the webhook.")] = None,
        mo_smpp_sys_type: Annotated[Optional[StrictStr], Field(description="The associated system type for your SMPP client")] = None,
        voice_callback_type: Annotated[Optional[StrictStr], Field(description="Specify whether inbound voice calls on your number are forwarded to a SIP or a telephone number.  This must be used with the `voiceCallbackValue` parameter. If set, `sip` or `tel` are prioritized over the Voice capability in your Application.  *Note: The `app` value is deprecated and will be removed in future.* ")] = None,
        voice_callback_value: Annotated[Optional[StrictStr], Field(description="A SIP URI or telephone number. Must be used with the `voiceCallbackType` parameter.")] = None,
        voice_status_callback: Annotated[Optional[StrictStr], Field(description="A webhook URI for Vonage to send a request to when a call ends")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Response:
        """Update a number

        Change the behaviour of a number that you own.

        :param country: The two character country code in ISO 3166-1 alpha-2 format (required)
        :type country: str
        :param msisdn: An available inbound virtual number. (required)
        :type msisdn: str
        :param app_id: The Application that will handle inbound traffic to this number.
        :type app_id: str
        :param messages_callback_type: <strong>DEPRECATED</strong> - We recommend that you use `app_id` instead.  Specifies the Messages webhook type (always `app`) associated with this number and must be used with the `messagesCallbackValue` parameter. 
        :type messages_callback_type: str
        :param messages_callback_value: <strong>DEPRECATED</strong> - We recommend that you use `app_id` instead.  Specifies the Application ID of your Messages application. It must be used with the `messagesCallbackType` parameter. 
        :type messages_callback_value: str
        :param mo_http_url: An URL-encoded URI to the webhook endpoint that handles inbound messages. Your webhook endpoint must be active before you make this request. Vonage makes a `GET` request to the endpoint and checks that it returns a `200 OK` response. Set this parameter's value to an empty string to remove the webhook.
        :type mo_http_url: str
        :param mo_smpp_sys_type: The associated system type for your SMPP client
        :type mo_smpp_sys_type: str
        :param voice_callback_type: Specify whether inbound voice calls on your number are forwarded to a SIP or a telephone number.  This must be used with the `voiceCallbackValue` parameter. If set, `sip` or `tel` are prioritized over the Voice capability in your Application.  *Note: The `app` value is deprecated and will be removed in future.* 
        :type voice_callback_type: str
        :param voice_callback_value: A SIP URI or telephone number. Must be used with the `voiceCallbackType` parameter.
        :type voice_callback_value: str
        :param voice_status_callback: A webhook URI for Vonage to send a request to when a call ends
        :type voice_status_callback: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_a_number_serialize(
            country=country,
            msisdn=msisdn,
            app_id=app_id,
            messages_callback_type=messages_callback_type,
            messages_callback_value=messages_callback_value,
            mo_http_url=mo_http_url,
            mo_smpp_sys_type=mo_smpp_sys_type,
            voice_callback_type=voice_callback_type,
            voice_callback_value=voice_callback_value,
            voice_status_callback=voice_status_callback,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Response",
            '401': "Unauthorized",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_a_number_with_http_info(
        self,
        country: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="The two character country code in ISO 3166-1 alpha-2 format")],
        msisdn: Annotated[StrictStr, Field(description="An available inbound virtual number.")],
        app_id: Annotated[Optional[StrictStr], Field(description="The Application that will handle inbound traffic to this number.")] = None,
        messages_callback_type: Annotated[Optional[StrictStr], Field(description="<strong>DEPRECATED</strong> - We recommend that you use `app_id` instead.  Specifies the Messages webhook type (always `app`) associated with this number and must be used with the `messagesCallbackValue` parameter. ")] = None,
        messages_callback_value: Annotated[Optional[StrictStr], Field(description="<strong>DEPRECATED</strong> - We recommend that you use `app_id` instead.  Specifies the Application ID of your Messages application. It must be used with the `messagesCallbackType` parameter. ")] = None,
        mo_http_url: Annotated[Optional[StrictStr], Field(description="An URL-encoded URI to the webhook endpoint that handles inbound messages. Your webhook endpoint must be active before you make this request. Vonage makes a `GET` request to the endpoint and checks that it returns a `200 OK` response. Set this parameter's value to an empty string to remove the webhook.")] = None,
        mo_smpp_sys_type: Annotated[Optional[StrictStr], Field(description="The associated system type for your SMPP client")] = None,
        voice_callback_type: Annotated[Optional[StrictStr], Field(description="Specify whether inbound voice calls on your number are forwarded to a SIP or a telephone number.  This must be used with the `voiceCallbackValue` parameter. If set, `sip` or `tel` are prioritized over the Voice capability in your Application.  *Note: The `app` value is deprecated and will be removed in future.* ")] = None,
        voice_callback_value: Annotated[Optional[StrictStr], Field(description="A SIP URI or telephone number. Must be used with the `voiceCallbackType` parameter.")] = None,
        voice_status_callback: Annotated[Optional[StrictStr], Field(description="A webhook URI for Vonage to send a request to when a call ends")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Response]:
        """Update a number

        Change the behaviour of a number that you own.

        :param country: The two character country code in ISO 3166-1 alpha-2 format (required)
        :type country: str
        :param msisdn: An available inbound virtual number. (required)
        :type msisdn: str
        :param app_id: The Application that will handle inbound traffic to this number.
        :type app_id: str
        :param messages_callback_type: <strong>DEPRECATED</strong> - We recommend that you use `app_id` instead.  Specifies the Messages webhook type (always `app`) associated with this number and must be used with the `messagesCallbackValue` parameter. 
        :type messages_callback_type: str
        :param messages_callback_value: <strong>DEPRECATED</strong> - We recommend that you use `app_id` instead.  Specifies the Application ID of your Messages application. It must be used with the `messagesCallbackType` parameter. 
        :type messages_callback_value: str
        :param mo_http_url: An URL-encoded URI to the webhook endpoint that handles inbound messages. Your webhook endpoint must be active before you make this request. Vonage makes a `GET` request to the endpoint and checks that it returns a `200 OK` response. Set this parameter's value to an empty string to remove the webhook.
        :type mo_http_url: str
        :param mo_smpp_sys_type: The associated system type for your SMPP client
        :type mo_smpp_sys_type: str
        :param voice_callback_type: Specify whether inbound voice calls on your number are forwarded to a SIP or a telephone number.  This must be used with the `voiceCallbackValue` parameter. If set, `sip` or `tel` are prioritized over the Voice capability in your Application.  *Note: The `app` value is deprecated and will be removed in future.* 
        :type voice_callback_type: str
        :param voice_callback_value: A SIP URI or telephone number. Must be used with the `voiceCallbackType` parameter.
        :type voice_callback_value: str
        :param voice_status_callback: A webhook URI for Vonage to send a request to when a call ends
        :type voice_status_callback: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_a_number_serialize(
            country=country,
            msisdn=msisdn,
            app_id=app_id,
            messages_callback_type=messages_callback_type,
            messages_callback_value=messages_callback_value,
            mo_http_url=mo_http_url,
            mo_smpp_sys_type=mo_smpp_sys_type,
            voice_callback_type=voice_callback_type,
            voice_callback_value=voice_callback_value,
            voice_status_callback=voice_status_callback,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Response",
            '401': "Unauthorized",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_a_number_without_preload_content(
        self,
        country: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="The two character country code in ISO 3166-1 alpha-2 format")],
        msisdn: Annotated[StrictStr, Field(description="An available inbound virtual number.")],
        app_id: Annotated[Optional[StrictStr], Field(description="The Application that will handle inbound traffic to this number.")] = None,
        messages_callback_type: Annotated[Optional[StrictStr], Field(description="<strong>DEPRECATED</strong> - We recommend that you use `app_id` instead.  Specifies the Messages webhook type (always `app`) associated with this number and must be used with the `messagesCallbackValue` parameter. ")] = None,
        messages_callback_value: Annotated[Optional[StrictStr], Field(description="<strong>DEPRECATED</strong> - We recommend that you use `app_id` instead.  Specifies the Application ID of your Messages application. It must be used with the `messagesCallbackType` parameter. ")] = None,
        mo_http_url: Annotated[Optional[StrictStr], Field(description="An URL-encoded URI to the webhook endpoint that handles inbound messages. Your webhook endpoint must be active before you make this request. Vonage makes a `GET` request to the endpoint and checks that it returns a `200 OK` response. Set this parameter's value to an empty string to remove the webhook.")] = None,
        mo_smpp_sys_type: Annotated[Optional[StrictStr], Field(description="The associated system type for your SMPP client")] = None,
        voice_callback_type: Annotated[Optional[StrictStr], Field(description="Specify whether inbound voice calls on your number are forwarded to a SIP or a telephone number.  This must be used with the `voiceCallbackValue` parameter. If set, `sip` or `tel` are prioritized over the Voice capability in your Application.  *Note: The `app` value is deprecated and will be removed in future.* ")] = None,
        voice_callback_value: Annotated[Optional[StrictStr], Field(description="A SIP URI or telephone number. Must be used with the `voiceCallbackType` parameter.")] = None,
        voice_status_callback: Annotated[Optional[StrictStr], Field(description="A webhook URI for Vonage to send a request to when a call ends")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a number

        Change the behaviour of a number that you own.

        :param country: The two character country code in ISO 3166-1 alpha-2 format (required)
        :type country: str
        :param msisdn: An available inbound virtual number. (required)
        :type msisdn: str
        :param app_id: The Application that will handle inbound traffic to this number.
        :type app_id: str
        :param messages_callback_type: <strong>DEPRECATED</strong> - We recommend that you use `app_id` instead.  Specifies the Messages webhook type (always `app`) associated with this number and must be used with the `messagesCallbackValue` parameter. 
        :type messages_callback_type: str
        :param messages_callback_value: <strong>DEPRECATED</strong> - We recommend that you use `app_id` instead.  Specifies the Application ID of your Messages application. It must be used with the `messagesCallbackType` parameter. 
        :type messages_callback_value: str
        :param mo_http_url: An URL-encoded URI to the webhook endpoint that handles inbound messages. Your webhook endpoint must be active before you make this request. Vonage makes a `GET` request to the endpoint and checks that it returns a `200 OK` response. Set this parameter's value to an empty string to remove the webhook.
        :type mo_http_url: str
        :param mo_smpp_sys_type: The associated system type for your SMPP client
        :type mo_smpp_sys_type: str
        :param voice_callback_type: Specify whether inbound voice calls on your number are forwarded to a SIP or a telephone number.  This must be used with the `voiceCallbackValue` parameter. If set, `sip` or `tel` are prioritized over the Voice capability in your Application.  *Note: The `app` value is deprecated and will be removed in future.* 
        :type voice_callback_type: str
        :param voice_callback_value: A SIP URI or telephone number. Must be used with the `voiceCallbackType` parameter.
        :type voice_callback_value: str
        :param voice_status_callback: A webhook URI for Vonage to send a request to when a call ends
        :type voice_status_callback: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_a_number_serialize(
            country=country,
            msisdn=msisdn,
            app_id=app_id,
            messages_callback_type=messages_callback_type,
            messages_callback_value=messages_callback_value,
            mo_http_url=mo_http_url,
            mo_smpp_sys_type=mo_smpp_sys_type,
            voice_callback_type=voice_callback_type,
            voice_callback_value=voice_callback_value,
            voice_status_callback=voice_status_callback,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Response",
            '401': "Unauthorized",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_a_number_serialize(
        self,
        country,
        msisdn,
        app_id,
        messages_callback_type,
        messages_callback_value,
        mo_http_url,
        mo_smpp_sys_type,
        voice_callback_type,
        voice_callback_value,
        voice_status_callback,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if app_id is not None:
            _form_params.append(('app_id', app_id))
        if country is not None:
            _form_params.append(('country', country))
        if messages_callback_type is not None:
            _form_params.append(('messagesCallbackType', messages_callback_type))
        if messages_callback_value is not None:
            _form_params.append(('messagesCallbackValue', messages_callback_value))
        if mo_http_url is not None:
            _form_params.append(('moHttpUrl', mo_http_url))
        if mo_smpp_sys_type is not None:
            _form_params.append(('moSmppSysType', mo_smpp_sys_type))
        if msisdn is not None:
            _form_params.append(('msisdn', msisdn))
        if voice_callback_type is not None:
            _form_params.append(('voiceCallbackType', voice_callback_type))
        if voice_callback_value is not None:
            _form_params.append(('voiceCallbackValue', voice_callback_value))
        if voice_status_callback is not None:
            _form_params.append(('voiceStatusCallback', voice_status_callback))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/xml'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKey', 
            'apiSecret'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/number/update',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



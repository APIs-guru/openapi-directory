# coding: utf-8

"""
    Voice API

    The Voice API lets you create outbound calls, control in-progress calls and get information about historical calls. More information about the Voice API can be found at <https://developer.nexmo.com/voice/voice-api/overview>.

    The version of the OpenAPI document: 1.3.10
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.language import Language
from openapi_client.models.voice_name import VoiceName
from typing import Optional, Set
from typing_extensions import Self

class StartTalkRequest(BaseModel):
    """
    StartTalkRequest
    """ # noqa: E501
    language: Optional[Language] = Language.EN_MINUS_US
    level: Optional[StrictStr] = Field(default='0', description="The volume level that the speech is played. This can be any value between `-1` to `1` in `0.1` increments, with `0` being the default.")
    loop: Optional[StrictInt] = Field(default=1, description="The number of times to repeat the text the file, 0 for infinite")
    premium: Optional[StrictBool] = Field(default=False, description="Set to true to use the premium version of the specified style if available, otherwise the standard version will be used. The default value is false. You can find more information about Premium Voices in the [Text-To-Speech guide](/voice/voice-api/guides/text-to-speech#premium-voices).")
    style: Optional[StrictInt] = Field(default=0, description="The vocal style (vocal range, tessitura, and timbre) to use")
    text: StrictStr = Field(description="The text to read")
    voice_name: Optional[VoiceName] = VoiceName.KIMBERLY
    __properties: ClassVar[List[str]] = ["language", "level", "loop", "premium", "style", "text", "voice_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StartTalkRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StartTalkRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "language": obj.get("language") if obj.get("language") is not None else Language.EN_MINUS_US,
            "level": obj.get("level") if obj.get("level") is not None else '0',
            "loop": obj.get("loop") if obj.get("loop") is not None else 1,
            "premium": obj.get("premium") if obj.get("premium") is not None else False,
            "style": obj.get("style") if obj.get("style") is not None else 0,
            "text": obj.get("text"),
            "voice_name": obj.get("voice_name") if obj.get("voice_name") is not None else VoiceName.KIMBERLY
        })
        return _obj



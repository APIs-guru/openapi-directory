# coding: utf-8

"""
    Voice API

    The Voice API lets you create outbound calls, control in-progress calls and get information about historical calls. More information about the Voice API can be found at <https://developer.nexmo.com/voice/voice-api/overview>.

    The version of the OpenAPI document: 1.3.10
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.direction import Direction
from openapi_client.models.get_call_response_links import GetCallResponseLinks
from openapi_client.models.model_from import ModelFrom
from openapi_client.models.to import To
from typing import Optional, Set
from typing_extensions import Self

class GetCallResponse(BaseModel):
    """
    GetCallResponse
    """ # noqa: E501
    links: Optional[GetCallResponseLinks] = Field(default=None, alias="_links")
    conversation_uuid: Optional[StrictStr] = Field(default=None, description="The unique identifier for the conversation this call leg is part of.")
    direction: Optional[Direction] = None
    duration: Optional[StrictStr] = Field(default=None, description="The time elapsed for the call to take place in seconds. This is only sent if `status` is `completed`.")
    end_time: Optional[StrictStr] = Field(default=None, description="The time the call started in the following format: `YYYY-MM-DD HH:MM:SS`. For xample, `2020-01-01 12:00:00`. This is only sent if `status` is `completed`.")
    var_from: Optional[ModelFrom] = Field(default=None, alias="from")
    network: Optional[StrictStr] = Field(default=None, description="The Mobile Country Code Mobile Network Code ([MCCMNC](https://en.wikipedia.org/wiki/Mobile_country_code)) for the carrier network used to make this call. This is only sent if `status` is `completed`.")
    price: Optional[StrictStr] = Field(default=None, description="The total price charged for this call. This is only sent if `status` is `completed`.")
    rate: Optional[StrictStr] = Field(default=None, description="The price per minute for this call. This is only sent if `status` is `completed`.")
    start_time: Optional[StrictStr] = Field(default=None, description="The time the call started in the following format: `YYYY-MM-DD HH:MM:SS`. For example, `2020-01-01 12:00:00`. This is only sent if `status` is `completed`.")
    status: Optional[StrictStr] = Field(default=None, description="The status of the call. [See possible values](https://developer.nexmo.com/voice/voice-api/guides/call-flow#event-objects)")
    to: Optional[To] = None
    uuid: Optional[StrictStr] = Field(default=None, description="The unique identifier for this call leg. The UUID is created when your call request is accepted by Vonage. You use the UUID in all requests for individual live calls")
    __properties: ClassVar[List[str]] = ["_links", "conversation_uuid", "direction", "duration", "end_time", "from", "network", "price", "rate", "start_time", "status", "to", "uuid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetCallResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_from
        if self.var_from:
            _dict['from'] = self.var_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of to
        if self.to:
            _dict['to'] = self.to.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetCallResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_links": GetCallResponseLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "conversation_uuid": obj.get("conversation_uuid"),
            "direction": obj.get("direction"),
            "duration": obj.get("duration"),
            "end_time": obj.get("end_time"),
            "from": ModelFrom.from_dict(obj["from"]) if obj.get("from") is not None else None,
            "network": obj.get("network"),
            "price": obj.get("price"),
            "rate": obj.get("rate"),
            "start_time": obj.get("start_time"),
            "status": obj.get("status"),
            "to": To.from_dict(obj["to"]) if obj.get("to") is not None else None,
            "uuid": obj.get("uuid")
        })
        return _obj



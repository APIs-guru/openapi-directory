# coding: utf-8

"""
    Voice API

    The Voice API lets you create outbound calls, control in-progress calls and get information about historical calls. More information about the Voice API can be found at <https://developer.nexmo.com/voice/voice-api/overview>.

    The version of the OpenAPI document: 1.3.10
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.create_call_request_base_to_inner import CreateCallRequestBaseToInner
from openapi_client.models.endpoint_phone_from import EndpointPhoneFrom
from typing import Optional, Set
from typing_extensions import Self

class CreateCallRequestNcco(BaseModel):
    """
    CreateCallRequestNcco
    """ # noqa: E501
    event_method: Optional[StrictStr] = Field(default='POST', description="The HTTP method used to send event information to `event_url`.")
    event_url: Optional[List[StrictStr]] = Field(default=None, description="**Required** unless `event_url` is configured at the application level, see [Create an Application](/api/application.v2#createApplication)  The webhook endpoint where call progress events are sent to. For more information about the values sent, see [Event webhook](/voice/voice-api/webhook-reference#event-webhook). ")
    var_from: EndpointPhoneFrom = Field(alias="from")
    length_timer: Optional[Annotated[int, Field(le=7200, strict=True, ge=1)]] = Field(default=7200, description="Set the number of seconds that elapse before Vonage hangs up after the call state changes to answered.")
    machine_detection: Optional[StrictStr] = Field(default=None, description="Configure the behavior when Vonage detects that the call is answered by voicemail. If `continue`, Vonage sends an HTTP request to `event_url` with the Call event machine. If `hangup`, Vonage ends the call.")
    random_from_number: Optional[StrictBool] = Field(default=False, description="Set to `true` to use random phone number as `from`. The number will be selected from the list of the numbers assigned to the current application. `random_from_number: true` cannot be used together with `from`.")
    ringing_timer: Optional[Annotated[int, Field(le=120, strict=True, ge=1)]] = Field(default=60, description="Set the number of seconds that elapse before Vonage hangs up after the call state changes to ‘ringing’.")
    to: List[CreateCallRequestBaseToInner]
    ncco: List[Dict[str, Any]] = Field(description="The [Nexmo Call Control Object](/voice/voice-api/ncco-reference) to use for this call. ")
    __properties: ClassVar[List[str]] = ["event_method", "event_url", "from", "length_timer", "machine_detection", "random_from_number", "ringing_timer", "to", "ncco"]

    @field_validator('event_method')
    def event_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['POST', 'GET']):
            raise ValueError("must be one of enum values ('POST', 'GET')")
        return value

    @field_validator('machine_detection')
    def machine_detection_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['continue', 'hangup']):
            raise ValueError("must be one of enum values ('continue', 'hangup')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateCallRequestNcco from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_from
        if self.var_from:
            _dict['from'] = self.var_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in to (list)
        _items = []
        if self.to:
            for _item_to in self.to:
                if _item_to:
                    _items.append(_item_to.to_dict())
            _dict['to'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateCallRequestNcco from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "event_method": obj.get("event_method") if obj.get("event_method") is not None else 'POST',
            "event_url": obj.get("event_url"),
            "from": EndpointPhoneFrom.from_dict(obj["from"]) if obj.get("from") is not None else None,
            "length_timer": obj.get("length_timer") if obj.get("length_timer") is not None else 7200,
            "machine_detection": obj.get("machine_detection"),
            "random_from_number": obj.get("random_from_number") if obj.get("random_from_number") is not None else False,
            "ringing_timer": obj.get("ringing_timer") if obj.get("ringing_timer") is not None else 60,
            "to": [CreateCallRequestBaseToInner.from_dict(_item) for _item in obj["to"]] if obj.get("to") is not None else None,
            "ncco": obj.get("ncco")
        })
        return _obj



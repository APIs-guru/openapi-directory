# coding: utf-8

"""
    External Accounts API

    The External Accounts API is used to manage accounts for Viber Business Messages, Facebook Messenger and Whatsapp for use in the [Messages](https://developer.nexmo.com/messages/overview) and [Dispatch](https://developer.nexmo.com/dispatch/overview) APIs.

    The version of the OpenAPI document: 0.1.5
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.create_messenger_account400_response import CreateMessengerAccount400Response

class TestCreateMessengerAccount400Response(unittest.TestCase):
    """CreateMessengerAccount400Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateMessengerAccount400Response:
        """Test CreateMessengerAccount400Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateMessengerAccount400Response`
        """
        model = CreateMessengerAccount400Response()
        if include_optional:
            return CreateMessengerAccount400Response(
                detail = 'Found errors validating 1 of your submitted parameters.',
                instance = '',
                invalid_params = [
                    openapi_client.models.create_messenger_account_400_response_invalid_params_inner.CreateMessengerAccount_400_response_invalid_params_inner(
                        name = 'external_id', 
                        reason = 'Missing `external_id` field', )
                    ],
                title = 'Your request parameters didn't validate.',
                type = 'https://www.nexmo.com/messages/Errors#InvalidParams'
            )
        else:
            return CreateMessengerAccount400Response(
        )
        """

    def testCreateMessengerAccount400Response(self):
        """Test CreateMessengerAccount400Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

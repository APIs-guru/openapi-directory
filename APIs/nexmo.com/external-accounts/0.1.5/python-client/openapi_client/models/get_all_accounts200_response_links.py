# coding: utf-8

"""
    External Accounts API

    The External Accounts API is used to manage accounts for Viber Business Messages, Facebook Messenger and Whatsapp for use in the [Messages](https://developer.nexmo.com/messages/overview) and [Dispatch](https://developer.nexmo.com/dispatch/overview) APIs.

    The version of the OpenAPI document: 0.1.5
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_all_accounts200_response_links_first import GetAllAccounts200ResponseLinksFirst
from openapi_client.models.get_all_accounts200_response_links_last import GetAllAccounts200ResponseLinksLast
from openapi_client.models.get_all_accounts200_response_links_next import GetAllAccounts200ResponseLinksNext
from typing import Optional, Set
from typing_extensions import Self

class GetAllAccounts200ResponseLinks(BaseModel):
    """
    GetAllAccounts200ResponseLinks
    """ # noqa: E501
    first: Optional[GetAllAccounts200ResponseLinksFirst] = None
    last: Optional[GetAllAccounts200ResponseLinksLast] = None
    next: Optional[GetAllAccounts200ResponseLinksNext] = None
    prev: Optional[GetAllAccounts200ResponseLinksFirst] = None
    var_self: Optional[GetAllAccounts200ResponseLinksFirst] = Field(default=None, alias="self")
    __properties: ClassVar[List[str]] = ["first", "last", "next", "prev", "self"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetAllAccounts200ResponseLinks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of first
        if self.first:
            _dict['first'] = self.first.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last
        if self.last:
            _dict['last'] = self.last.to_dict()
        # override the default output from pydantic by calling `to_dict()` of next
        if self.next:
            _dict['next'] = self.next.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prev
        if self.prev:
            _dict['prev'] = self.prev.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_self
        if self.var_self:
            _dict['self'] = self.var_self.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetAllAccounts200ResponseLinks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "first": GetAllAccounts200ResponseLinksFirst.from_dict(obj["first"]) if obj.get("first") is not None else None,
            "last": GetAllAccounts200ResponseLinksLast.from_dict(obj["last"]) if obj.get("last") is not None else None,
            "next": GetAllAccounts200ResponseLinksNext.from_dict(obj["next"]) if obj.get("next") is not None else None,
            "prev": GetAllAccounts200ResponseLinksFirst.from_dict(obj["prev"]) if obj.get("prev") is not None else None,
            "self": GetAllAccounts200ResponseLinksFirst.from_dict(obj["self"]) if obj.get("self") is not None else None
        })
        return _obj



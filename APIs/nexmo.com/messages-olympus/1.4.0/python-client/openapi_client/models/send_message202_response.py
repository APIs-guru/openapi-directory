# coding: utf-8

"""
    Messages API

    The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger

    The version of the OpenAPI document: 1.4.0
    Contact: devrel@nexmo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.send_message202_response_one_of import SendMessage202ResponseOneOf
from openapi_client.models.send_message202_response_one_of1 import SendMessage202ResponseOneOf1
from openapi_client.models.send_message202_response_one_of2 import SendMessage202ResponseOneOf2
from openapi_client.models.send_message202_response_one_of3 import SendMessage202ResponseOneOf3
from openapi_client.models.send_message202_response_one_of4 import SendMessage202ResponseOneOf4
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

SENDMESSAGE202RESPONSE_ONE_OF_SCHEMAS = ["SendMessage202ResponseOneOf", "SendMessage202ResponseOneOf1", "SendMessage202ResponseOneOf2", "SendMessage202ResponseOneOf3", "SendMessage202ResponseOneOf4"]

class SendMessage202Response(BaseModel):
    """
    SendMessage202Response
    """
    # data type: SendMessage202ResponseOneOf
    oneof_schema_1_validator: Optional[SendMessage202ResponseOneOf] = None
    # data type: SendMessage202ResponseOneOf1
    oneof_schema_2_validator: Optional[SendMessage202ResponseOneOf1] = None
    # data type: SendMessage202ResponseOneOf2
    oneof_schema_3_validator: Optional[SendMessage202ResponseOneOf2] = None
    # data type: SendMessage202ResponseOneOf3
    oneof_schema_4_validator: Optional[SendMessage202ResponseOneOf3] = None
    # data type: SendMessage202ResponseOneOf4
    oneof_schema_5_validator: Optional[SendMessage202ResponseOneOf4] = None
    actual_instance: Optional[Union[SendMessage202ResponseOneOf, SendMessage202ResponseOneOf1, SendMessage202ResponseOneOf2, SendMessage202ResponseOneOf3, SendMessage202ResponseOneOf4]] = None
    one_of_schemas: Set[str] = { "SendMessage202ResponseOneOf", "SendMessage202ResponseOneOf1", "SendMessage202ResponseOneOf2", "SendMessage202ResponseOneOf3", "SendMessage202ResponseOneOf4" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = SendMessage202Response.model_construct()
        error_messages = []
        match = 0
        # validate data type: SendMessage202ResponseOneOf
        if not isinstance(v, SendMessage202ResponseOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendMessage202ResponseOneOf`")
        else:
            match += 1
        # validate data type: SendMessage202ResponseOneOf1
        if not isinstance(v, SendMessage202ResponseOneOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendMessage202ResponseOneOf1`")
        else:
            match += 1
        # validate data type: SendMessage202ResponseOneOf2
        if not isinstance(v, SendMessage202ResponseOneOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendMessage202ResponseOneOf2`")
        else:
            match += 1
        # validate data type: SendMessage202ResponseOneOf3
        if not isinstance(v, SendMessage202ResponseOneOf3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendMessage202ResponseOneOf3`")
        else:
            match += 1
        # validate data type: SendMessage202ResponseOneOf4
        if not isinstance(v, SendMessage202ResponseOneOf4):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendMessage202ResponseOneOf4`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in SendMessage202Response with oneOf schemas: SendMessage202ResponseOneOf, SendMessage202ResponseOneOf1, SendMessage202ResponseOneOf2, SendMessage202ResponseOneOf3, SendMessage202ResponseOneOf4. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in SendMessage202Response with oneOf schemas: SendMessage202ResponseOneOf, SendMessage202ResponseOneOf1, SendMessage202ResponseOneOf2, SendMessage202ResponseOneOf3, SendMessage202ResponseOneOf4. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into SendMessage202ResponseOneOf
        try:
            instance.actual_instance = SendMessage202ResponseOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendMessage202ResponseOneOf1
        try:
            instance.actual_instance = SendMessage202ResponseOneOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendMessage202ResponseOneOf2
        try:
            instance.actual_instance = SendMessage202ResponseOneOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendMessage202ResponseOneOf3
        try:
            instance.actual_instance = SendMessage202ResponseOneOf3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendMessage202ResponseOneOf4
        try:
            instance.actual_instance = SendMessage202ResponseOneOf4.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into SendMessage202Response with oneOf schemas: SendMessage202ResponseOneOf, SendMessage202ResponseOneOf1, SendMessage202ResponseOneOf2, SendMessage202ResponseOneOf3, SendMessage202ResponseOneOf4. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into SendMessage202Response with oneOf schemas: SendMessage202ResponseOneOf, SendMessage202ResponseOneOf1, SendMessage202ResponseOneOf2, SendMessage202ResponseOneOf3, SendMessage202ResponseOneOf4. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], SendMessage202ResponseOneOf, SendMessage202ResponseOneOf1, SendMessage202ResponseOneOf2, SendMessage202ResponseOneOf3, SendMessage202ResponseOneOf4]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



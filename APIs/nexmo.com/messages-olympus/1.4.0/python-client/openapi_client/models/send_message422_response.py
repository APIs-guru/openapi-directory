# coding: utf-8

"""
    Messages API

    The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger

    The version of the OpenAPI document: 1.4.0
    Contact: devrel@nexmo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.error_channel import ErrorChannel
from openapi_client.models.error_channel_params import ErrorChannelParams
from openapi_client.models.error_client_reference import ErrorClientReference
from openapi_client.models.error_invalid_json import ErrorInvalidJson
from openapi_client.models.error_message_params import ErrorMessageParams
from openapi_client.models.error_message_type import ErrorMessageType
from openapi_client.models.error_recipient import ErrorRecipient
from openapi_client.models.error_sender import ErrorSender
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

SENDMESSAGE422RESPONSE_ONE_OF_SCHEMAS = ["ErrorChannel", "ErrorChannelParams", "ErrorClientReference", "ErrorInvalidJson", "ErrorMessageParams", "ErrorMessageType", "ErrorRecipient", "ErrorSender"]

class SendMessage422Response(BaseModel):
    """
    SendMessage422Response
    """
    # data type: ErrorInvalidJson
    oneof_schema_1_validator: Optional[ErrorInvalidJson] = None
    # data type: ErrorChannel
    oneof_schema_2_validator: Optional[ErrorChannel] = None
    # data type: ErrorChannelParams
    oneof_schema_3_validator: Optional[ErrorChannelParams] = None
    # data type: ErrorSender
    oneof_schema_4_validator: Optional[ErrorSender] = None
    # data type: ErrorRecipient
    oneof_schema_5_validator: Optional[ErrorRecipient] = None
    # data type: ErrorMessageType
    oneof_schema_6_validator: Optional[ErrorMessageType] = None
    # data type: ErrorMessageParams
    oneof_schema_7_validator: Optional[ErrorMessageParams] = None
    # data type: ErrorClientReference
    oneof_schema_8_validator: Optional[ErrorClientReference] = None
    actual_instance: Optional[Union[ErrorChannel, ErrorChannelParams, ErrorClientReference, ErrorInvalidJson, ErrorMessageParams, ErrorMessageType, ErrorRecipient, ErrorSender]] = None
    one_of_schemas: Set[str] = { "ErrorChannel", "ErrorChannelParams", "ErrorClientReference", "ErrorInvalidJson", "ErrorMessageParams", "ErrorMessageType", "ErrorRecipient", "ErrorSender" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = SendMessage422Response.model_construct()
        error_messages = []
        match = 0
        # validate data type: ErrorInvalidJson
        if not isinstance(v, ErrorInvalidJson):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ErrorInvalidJson`")
        else:
            match += 1
        # validate data type: ErrorChannel
        if not isinstance(v, ErrorChannel):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ErrorChannel`")
        else:
            match += 1
        # validate data type: ErrorChannelParams
        if not isinstance(v, ErrorChannelParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ErrorChannelParams`")
        else:
            match += 1
        # validate data type: ErrorSender
        if not isinstance(v, ErrorSender):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ErrorSender`")
        else:
            match += 1
        # validate data type: ErrorRecipient
        if not isinstance(v, ErrorRecipient):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ErrorRecipient`")
        else:
            match += 1
        # validate data type: ErrorMessageType
        if not isinstance(v, ErrorMessageType):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ErrorMessageType`")
        else:
            match += 1
        # validate data type: ErrorMessageParams
        if not isinstance(v, ErrorMessageParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ErrorMessageParams`")
        else:
            match += 1
        # validate data type: ErrorClientReference
        if not isinstance(v, ErrorClientReference):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ErrorClientReference`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in SendMessage422Response with oneOf schemas: ErrorChannel, ErrorChannelParams, ErrorClientReference, ErrorInvalidJson, ErrorMessageParams, ErrorMessageType, ErrorRecipient, ErrorSender. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in SendMessage422Response with oneOf schemas: ErrorChannel, ErrorChannelParams, ErrorClientReference, ErrorInvalidJson, ErrorMessageParams, ErrorMessageType, ErrorRecipient, ErrorSender. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into ErrorInvalidJson
        try:
            instance.actual_instance = ErrorInvalidJson.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ErrorChannel
        try:
            instance.actual_instance = ErrorChannel.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ErrorChannelParams
        try:
            instance.actual_instance = ErrorChannelParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ErrorSender
        try:
            instance.actual_instance = ErrorSender.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ErrorRecipient
        try:
            instance.actual_instance = ErrorRecipient.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ErrorMessageType
        try:
            instance.actual_instance = ErrorMessageType.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ErrorMessageParams
        try:
            instance.actual_instance = ErrorMessageParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ErrorClientReference
        try:
            instance.actual_instance = ErrorClientReference.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into SendMessage422Response with oneOf schemas: ErrorChannel, ErrorChannelParams, ErrorClientReference, ErrorInvalidJson, ErrorMessageParams, ErrorMessageType, ErrorRecipient, ErrorSender. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into SendMessage422Response with oneOf schemas: ErrorChannel, ErrorChannelParams, ErrorClientReference, ErrorInvalidJson, ErrorMessageParams, ErrorMessageType, ErrorRecipient, ErrorSender. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], ErrorChannel, ErrorChannelParams, ErrorClientReference, ErrorInvalidJson, ErrorMessageParams, ErrorMessageType, ErrorRecipient, ErrorSender]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



# coding: utf-8

"""
    Messages API

    The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger

    The version of the OpenAPI document: 1.4.0
    Contact: devrel@nexmo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.whats_app_one_of import WhatsAppOneOf
from openapi_client.models.whats_app_one_of1 import WhatsAppOneOf1
from openapi_client.models.whats_app_one_of2 import WhatsAppOneOf2
from openapi_client.models.whats_app_one_of3 import WhatsAppOneOf3
from openapi_client.models.whats_app_one_of4 import WhatsAppOneOf4
from openapi_client.models.whats_app_one_of5 import WhatsAppOneOf5
from openapi_client.models.whats_app_one_of6 import WhatsAppOneOf6
from openapi_client.models.whats_app_one_of7 import WhatsAppOneOf7
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

WHATSAPP_ONE_OF_SCHEMAS = ["WhatsAppOneOf", "WhatsAppOneOf1", "WhatsAppOneOf2", "WhatsAppOneOf3", "WhatsAppOneOf4", "WhatsAppOneOf5", "WhatsAppOneOf6", "WhatsAppOneOf7"]

class WhatsApp(BaseModel):
    """
    WhatsApp
    """
    # data type: WhatsAppOneOf
    oneof_schema_1_validator: Optional[WhatsAppOneOf] = None
    # data type: WhatsAppOneOf1
    oneof_schema_2_validator: Optional[WhatsAppOneOf1] = None
    # data type: WhatsAppOneOf2
    oneof_schema_3_validator: Optional[WhatsAppOneOf2] = None
    # data type: WhatsAppOneOf3
    oneof_schema_4_validator: Optional[WhatsAppOneOf3] = None
    # data type: WhatsAppOneOf4
    oneof_schema_5_validator: Optional[WhatsAppOneOf4] = None
    # data type: WhatsAppOneOf5
    oneof_schema_6_validator: Optional[WhatsAppOneOf5] = None
    # data type: WhatsAppOneOf6
    oneof_schema_7_validator: Optional[WhatsAppOneOf6] = None
    # data type: WhatsAppOneOf7
    oneof_schema_8_validator: Optional[WhatsAppOneOf7] = None
    actual_instance: Optional[Union[WhatsAppOneOf, WhatsAppOneOf1, WhatsAppOneOf2, WhatsAppOneOf3, WhatsAppOneOf4, WhatsAppOneOf5, WhatsAppOneOf6, WhatsAppOneOf7]] = None
    one_of_schemas: Set[str] = { "WhatsAppOneOf", "WhatsAppOneOf1", "WhatsAppOneOf2", "WhatsAppOneOf3", "WhatsAppOneOf4", "WhatsAppOneOf5", "WhatsAppOneOf6", "WhatsAppOneOf7" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = WhatsApp.model_construct()
        error_messages = []
        match = 0
        # validate data type: WhatsAppOneOf
        if not isinstance(v, WhatsAppOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WhatsAppOneOf`")
        else:
            match += 1
        # validate data type: WhatsAppOneOf1
        if not isinstance(v, WhatsAppOneOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WhatsAppOneOf1`")
        else:
            match += 1
        # validate data type: WhatsAppOneOf2
        if not isinstance(v, WhatsAppOneOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WhatsAppOneOf2`")
        else:
            match += 1
        # validate data type: WhatsAppOneOf3
        if not isinstance(v, WhatsAppOneOf3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WhatsAppOneOf3`")
        else:
            match += 1
        # validate data type: WhatsAppOneOf4
        if not isinstance(v, WhatsAppOneOf4):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WhatsAppOneOf4`")
        else:
            match += 1
        # validate data type: WhatsAppOneOf5
        if not isinstance(v, WhatsAppOneOf5):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WhatsAppOneOf5`")
        else:
            match += 1
        # validate data type: WhatsAppOneOf6
        if not isinstance(v, WhatsAppOneOf6):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WhatsAppOneOf6`")
        else:
            match += 1
        # validate data type: WhatsAppOneOf7
        if not isinstance(v, WhatsAppOneOf7):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WhatsAppOneOf7`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in WhatsApp with oneOf schemas: WhatsAppOneOf, WhatsAppOneOf1, WhatsAppOneOf2, WhatsAppOneOf3, WhatsAppOneOf4, WhatsAppOneOf5, WhatsAppOneOf6, WhatsAppOneOf7. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in WhatsApp with oneOf schemas: WhatsAppOneOf, WhatsAppOneOf1, WhatsAppOneOf2, WhatsAppOneOf3, WhatsAppOneOf4, WhatsAppOneOf5, WhatsAppOneOf6, WhatsAppOneOf7. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into WhatsAppOneOf
        try:
            instance.actual_instance = WhatsAppOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WhatsAppOneOf1
        try:
            instance.actual_instance = WhatsAppOneOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WhatsAppOneOf2
        try:
            instance.actual_instance = WhatsAppOneOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WhatsAppOneOf3
        try:
            instance.actual_instance = WhatsAppOneOf3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WhatsAppOneOf4
        try:
            instance.actual_instance = WhatsAppOneOf4.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WhatsAppOneOf5
        try:
            instance.actual_instance = WhatsAppOneOf5.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WhatsAppOneOf6
        try:
            instance.actual_instance = WhatsAppOneOf6.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WhatsAppOneOf7
        try:
            instance.actual_instance = WhatsAppOneOf7.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into WhatsApp with oneOf schemas: WhatsAppOneOf, WhatsAppOneOf1, WhatsAppOneOf2, WhatsAppOneOf3, WhatsAppOneOf4, WhatsAppOneOf5, WhatsAppOneOf6, WhatsAppOneOf7. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into WhatsApp with oneOf schemas: WhatsAppOneOf, WhatsAppOneOf1, WhatsAppOneOf2, WhatsAppOneOf3, WhatsAppOneOf4, WhatsAppOneOf5, WhatsAppOneOf6, WhatsAppOneOf7. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], WhatsAppOneOf, WhatsAppOneOf1, WhatsAppOneOf2, WhatsAppOneOf3, WhatsAppOneOf4, WhatsAppOneOf5, WhatsAppOneOf6, WhatsAppOneOf7]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



# coding: utf-8

"""
    Messages API

    The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger

    The version of the OpenAPI document: 1.4.0
    Contact: devrel@nexmo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.context import Context
from openapi_client.models.profile import Profile
from typing import Optional, Set
from typing_extensions import Self

class InboundWhatsAppMessageCommon(BaseModel):
    """
    InboundWhatsAppMessageCommon
    """ # noqa: E501
    channel: StrictStr = Field(description="The channel that the message came in on")
    context: Optional[Context] = None
    var_from: StrictStr = Field(description="The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details ", alias="from")
    message_uuid: StrictStr = Field(description="The UUID of the message")
    profile: Optional[Profile] = None
    provider_message: Optional[StrictStr] = Field(default=None, description="A message from the channel provider, which may contain a description, error codes or other information")
    timestamp: StrictStr = Field(description="The datetime of when the event occurred, in `ISO 8601` format.")
    to: Annotated[str, Field(min_length=7, strict=True, max_length=15)] = Field(description="The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. ")
    __properties: ClassVar[List[str]] = ["channel", "context", "from", "message_uuid", "profile", "provider_message", "timestamp", "to"]

    @field_validator('channel')
    def channel_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['whatsapp']):
            raise ValueError("must be one of enum values ('whatsapp')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InboundWhatsAppMessageCommon from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of profile
        if self.profile:
            _dict['profile'] = self.profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InboundWhatsAppMessageCommon from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channel": obj.get("channel"),
            "context": Context.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "from": obj.get("from"),
            "message_uuid": obj.get("message_uuid"),
            "profile": Profile.from_dict(obj["profile"]) if obj.get("profile") is not None else None,
            "provider_message": obj.get("provider_message"),
            "timestamp": obj.get("timestamp"),
            "to": obj.get("to")
        })
        return _obj



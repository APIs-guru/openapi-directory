# coding: utf-8

"""
    Number Insight API

    The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.

    The version of the OpenAPI document: 1.2.1
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.ni_response_xml_basic_error import NiResponseXmlBasicError
from openapi_client.models.ni_response_xml_basic_local_number import NiResponseXmlBasicLocalNumber
from typing import Optional, Set
from typing_extensions import Self

class NiResponseXmlBasic(BaseModel):
    """
    Basic
    """ # noqa: E501
    error: Optional[NiResponseXmlBasicError] = None
    international_format_number: Optional[StrictStr] = Field(default=None, description="The `number` in your request in international format.")
    local_number: Optional[NiResponseXmlBasicLocalNumber] = None
    request_id: Optional[Annotated[str, Field(strict=True, max_length=40)]] = Field(default=None, description="The unique identifier for your request. This is a alphanumeric string up to 40 characters.")
    __properties: ClassVar[List[str]] = ["error", "international_format_number", "local_number", "request_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NiResponseXmlBasic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of local_number
        if self.local_number:
            _dict['local_number'] = self.local_number.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NiResponseXmlBasic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "error": NiResponseXmlBasicError.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "international_format_number": obj.get("international_format_number"),
            "local_number": NiResponseXmlBasicLocalNumber.from_dict(obj["local_number"]) if obj.get("local_number") is not None else None,
            "request_id": obj.get("request_id")
        })
        return _obj



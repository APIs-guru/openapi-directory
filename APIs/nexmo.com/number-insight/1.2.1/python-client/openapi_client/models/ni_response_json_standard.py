# coding: utf-8

"""
    Number Insight API

    The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.

    The version of the OpenAPI document: 1.2.1
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.ni_basic_status import NiBasicStatus
from openapi_client.models.ni_caller_identity import NiCallerIdentity
from openapi_client.models.ni_current_carrier_properties import NiCurrentCarrierProperties
from openapi_client.models.ni_initial_carrier_properties import NiInitialCarrierProperties
from typing import Optional, Set
from typing_extensions import Self

class NiResponseJsonStandard(BaseModel):
    """
    Standard Response
    """ # noqa: E501
    country_code: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Two character country code for `number`. This is in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.")
    country_code_iso3: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Three character country code for `number`. This is in [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) format.")
    country_name: Optional[StrictStr] = Field(default=None, description="The full name of the country that `number` is registered in.")
    country_prefix: Optional[StrictStr] = Field(default=None, description="The numeric prefix for the country that `number` is registered in.")
    international_format_number: Optional[StrictStr] = Field(default=None, description="The `number` in your request in international format.")
    national_format_number: Optional[StrictStr] = Field(default=None, description="The `number` in your request in the format used by the country the number belongs to.")
    request_id: Optional[Annotated[str, Field(strict=True, max_length=40)]] = Field(default=None, description="The unique identifier for your request. This is a alphanumeric string up to 40 characters.")
    status: Optional[NiBasicStatus] = None
    status_message: Optional[StrictStr] = Field(default=None, description="The status description of your request.")
    caller_identity: Optional[NiCallerIdentity] = None
    caller_name: Optional[StrictStr] = Field(default=None, description="Full name of the person or business who owns the phone number. `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.")
    caller_type: Optional[StrictStr] = Field(default=None, description="The value will be `business` if the owner of a phone number is a business. If the owner is an individual the value will be `consumer`. The value will be `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.")
    current_carrier: Optional[NiCurrentCarrierProperties] = None
    first_name: Optional[StrictStr] = Field(default=None, description="First name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.")
    last_name: Optional[StrictStr] = Field(default=None, description="Last name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.")
    original_carrier: Optional[NiInitialCarrierProperties] = None
    ported: Optional[StrictStr] = Field(default=None, description="If the user has changed carrier for `number`. The assumed status means that the information supplier has replied to the request but has not said explicitly that the number is ported.")
    refund_price: Optional[StrictStr] = Field(default=None, description="If there is an internal lookup error, the `refund_price` will reflect the lookup price. If `cnam` is requested for a non-US number the `refund_price` will reflect the `cnam` price. If both of these conditions occur, `refund_price` is the sum of the lookup price and `cnam` price.")
    remaining_balance: Optional[StrictStr] = Field(default=None, description="Your account balance in EUR after this request.")
    request_price: Optional[StrictStr] = Field(default=None, description="The amount in EUR charged to your account.")
    __properties: ClassVar[List[str]] = ["country_code", "country_code_iso3", "country_name", "country_prefix", "international_format_number", "national_format_number", "request_id", "status", "status_message", "caller_identity", "caller_name", "caller_type", "current_carrier", "first_name", "last_name", "original_carrier", "ported", "refund_price", "remaining_balance", "request_price"]

    @field_validator('country_code')
    def country_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[A-Z]{2}", value):
            raise ValueError(r"must validate the regular expression /[A-Z]{2}/")
        return value

    @field_validator('country_code_iso3')
    def country_code_iso3_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[A-Z]{3}", value):
            raise ValueError(r"must validate the regular expression /[A-Z]{3}/")
        return value

    @field_validator('caller_type')
    def caller_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['business', 'consumer', 'unknown']):
            raise ValueError("must be one of enum values ('business', 'consumer', 'unknown')")
        return value

    @field_validator('ported')
    def ported_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['unknown', 'ported', 'not_ported', 'assumed_not_ported', 'assumed_ported', 'null']):
            raise ValueError("must be one of enum values ('unknown', 'ported', 'not_ported', 'assumed_not_ported', 'assumed_ported', 'null')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NiResponseJsonStandard from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of caller_identity
        if self.caller_identity:
            _dict['caller_identity'] = self.caller_identity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of current_carrier
        if self.current_carrier:
            _dict['current_carrier'] = self.current_carrier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of original_carrier
        if self.original_carrier:
            _dict['original_carrier'] = self.original_carrier.to_dict()
        # set to None if current_carrier (nullable) is None
        # and model_fields_set contains the field
        if self.current_carrier is None and "current_carrier" in self.model_fields_set:
            _dict['current_carrier'] = None

        # set to None if original_carrier (nullable) is None
        # and model_fields_set contains the field
        if self.original_carrier is None and "original_carrier" in self.model_fields_set:
            _dict['original_carrier'] = None

        # set to None if ported (nullable) is None
        # and model_fields_set contains the field
        if self.ported is None and "ported" in self.model_fields_set:
            _dict['ported'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NiResponseJsonStandard from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "country_code": obj.get("country_code"),
            "country_code_iso3": obj.get("country_code_iso3"),
            "country_name": obj.get("country_name"),
            "country_prefix": obj.get("country_prefix"),
            "international_format_number": obj.get("international_format_number"),
            "national_format_number": obj.get("national_format_number"),
            "request_id": obj.get("request_id"),
            "status": obj.get("status"),
            "status_message": obj.get("status_message"),
            "caller_identity": NiCallerIdentity.from_dict(obj["caller_identity"]) if obj.get("caller_identity") is not None else None,
            "caller_name": obj.get("caller_name"),
            "caller_type": obj.get("caller_type"),
            "current_carrier": NiCurrentCarrierProperties.from_dict(obj["current_carrier"]) if obj.get("current_carrier") is not None else None,
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "original_carrier": NiInitialCarrierProperties.from_dict(obj["original_carrier"]) if obj.get("original_carrier") is not None else None,
            "ported": obj.get("ported"),
            "refund_price": obj.get("refund_price"),
            "remaining_balance": obj.get("remaining_balance"),
            "request_price": obj.get("request_price")
        })
        return _obj



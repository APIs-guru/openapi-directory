# coding: utf-8

"""
    Number Insight API

    The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.

    The version of the OpenAPI document: 1.2.1
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.ni_standard_advanced_status import NiStandardAdvancedStatus
from typing import Optional, Set
from typing_extensions import Self

class NiResponseAsync(BaseModel):
    """
    NiResponseAsync
    """ # noqa: E501
    error_text: Optional[StrictStr] = Field(default=None, description="The status description of your request. Note: This field is equivalent to `status_message` field in the other endpoints")
    number: Optional[StrictStr] = Field(default=None, description="The `number` in your request")
    remaining_balance: Optional[StrictStr] = Field(default=None, description="Your account balance in EUR after this request.")
    request_id: Optional[Annotated[str, Field(strict=True, max_length=40)]] = Field(default=None, description="The unique identifier for your request. This is a alphanumeric string up to 40 characters.")
    request_price: Optional[StrictStr] = Field(default=None, description="If there is an internal lookup error, the `refund_price` will reflect the lookup price. If `cnam` is requested for a non-US number the `refund_price` will reflect the `cnam` price. If both of these conditions occur, `refund_price` is the sum of the lookup price and `cnam` price.")
    status: Optional[NiStandardAdvancedStatus] = None
    __properties: ClassVar[List[str]] = ["error_text", "number", "remaining_balance", "request_id", "request_price", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NiResponseAsync from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NiResponseAsync from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "error_text": obj.get("error_text"),
            "number": obj.get("number"),
            "remaining_balance": obj.get("remaining_balance"),
            "request_id": obj.get("request_id"),
            "request_price": obj.get("request_price"),
            "status": obj.get("status")
        })
        return _obj



# coding: utf-8

"""
    Number Insight API

    The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.

    The version of the OpenAPI document: 1.2.1
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.ni_current_carrier_properties import NiCurrentCarrierProperties
from openapi_client.models.ni_initial_carrier_properties import NiInitialCarrierProperties
from openapi_client.models.ni_response_xml_advanced_caller_identity import NiResponseXmlAdvancedCallerIdentity
from openapi_client.models.ni_response_xml_advanced_error import NiResponseXmlAdvancedError
from openapi_client.models.ni_response_xml_advanced_local_number import NiResponseXmlAdvancedLocalNumber
from openapi_client.models.ni_response_xml_advanced_lookup_outcome import NiResponseXmlAdvancedLookupOutcome
from openapi_client.models.ni_response_xml_advanced_ported import NiResponseXmlAdvancedPorted
from openapi_client.models.ni_roaming import NiRoaming
from typing import Optional, Set
from typing_extensions import Self

class NiResponseXmlAdvanced(BaseModel):
    """
    Advanced
    """ # noqa: E501
    caller_identity: Optional[NiResponseXmlAdvancedCallerIdentity] = None
    caller_name: Optional[StrictStr] = Field(default=None, description="Full name of the person or business who owns the phone number. `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.")
    caller_type: Optional[StrictStr] = Field(default=None, description="The value will be `business` if the owner of a phone number is a business. If the owner is an individual the value will be `consumer`. The value will be `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.")
    current_carrier: Optional[NiCurrentCarrierProperties] = None
    error: Optional[NiResponseXmlAdvancedError] = None
    firs_name: Optional[StrictStr] = Field(default=None, description="First name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.")
    international_format_number: Optional[StrictStr] = Field(default=None, description="The `number` in your request in international format.")
    ip_warnings: Optional[StrictStr] = Field(default=None, description="This property is deprecated and can safely be ignored.")
    last_name: Optional[StrictStr] = Field(default=None, description="Last name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.")
    local_number: Optional[NiResponseXmlAdvancedLocalNumber] = None
    lookup_outcome: Optional[NiResponseXmlAdvancedLookupOutcome] = None
    original_carrier: Optional[NiInitialCarrierProperties] = None
    ported: Optional[NiResponseXmlAdvancedPorted] = None
    reachable: Optional[StrictStr] = Field(default=None, description="Can you call `number` now. This is applicable to mobile numbers only.")
    remaining_balance: Optional[StrictStr] = Field(default=None, description="Your account balance in EUR after this request.")
    request_id: Optional[Annotated[str, Field(strict=True, max_length=40)]] = Field(default=None, description="The unique identifier for your request. This is a alphanumeric string up to 40 characters.")
    request_price: Optional[StrictStr] = Field(default=None, description="If there is an internal lookup error, the `refund_price` will reflect the lookup price. If `cnam` is requested for a non-US number the `refund_price` will reflect the `cnam` price. If both of these conditions occur, `refund_price` is the sum of the lookup price and `cnam` price.")
    roaming: Optional[NiRoaming] = None
    valid_number: Optional[StrictStr] = Field(default=None, description="Does `number` exist. `unknown` means the number could not be validated. `valid` means the number is valid. `not_valid` means the number is not valid. `inferred_not_valid` means that the number could not be determined as valid or invalid via an external system and the best guess is that the number is invalid. This is applicable to mobile numbers only.")
    __properties: ClassVar[List[str]] = ["caller_identity", "caller_name", "caller_type", "current_carrier", "error", "firs_name", "international_format_number", "ip_warnings", "last_name", "local_number", "lookup_outcome", "original_carrier", "ported", "reachable", "remaining_balance", "request_id", "request_price", "roaming", "valid_number"]

    @field_validator('caller_type')
    def caller_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['business', 'consumer', 'unknown']):
            raise ValueError("must be one of enum values ('business', 'consumer', 'unknown')")
        return value

    @field_validator('reachable')
    def reachable_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['unknown', 'reachable', 'undeliverable', 'absent', 'bad_number', 'blacklisted', 'null']):
            raise ValueError("must be one of enum values ('unknown', 'reachable', 'undeliverable', 'absent', 'bad_number', 'blacklisted', 'null')")
        return value

    @field_validator('valid_number')
    def valid_number_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['unknown', 'valid', 'not_valid', 'inferred_not_valid']):
            raise ValueError("must be one of enum values ('unknown', 'valid', 'not_valid', 'inferred_not_valid')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NiResponseXmlAdvanced from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of caller_identity
        if self.caller_identity:
            _dict['caller_identity'] = self.caller_identity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of current_carrier
        if self.current_carrier:
            _dict['current_carrier'] = self.current_carrier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of local_number
        if self.local_number:
            _dict['local_number'] = self.local_number.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lookup_outcome
        if self.lookup_outcome:
            _dict['lookup_outcome'] = self.lookup_outcome.to_dict()
        # override the default output from pydantic by calling `to_dict()` of original_carrier
        if self.original_carrier:
            _dict['original_carrier'] = self.original_carrier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ported
        if self.ported:
            _dict['ported'] = self.ported.to_dict()
        # override the default output from pydantic by calling `to_dict()` of roaming
        if self.roaming:
            _dict['roaming'] = self.roaming.to_dict()
        # set to None if current_carrier (nullable) is None
        # and model_fields_set contains the field
        if self.current_carrier is None and "current_carrier" in self.model_fields_set:
            _dict['current_carrier'] = None

        # set to None if ip_warnings (nullable) is None
        # and model_fields_set contains the field
        if self.ip_warnings is None and "ip_warnings" in self.model_fields_set:
            _dict['ip_warnings'] = None

        # set to None if original_carrier (nullable) is None
        # and model_fields_set contains the field
        if self.original_carrier is None and "original_carrier" in self.model_fields_set:
            _dict['original_carrier'] = None

        # set to None if ported (nullable) is None
        # and model_fields_set contains the field
        if self.ported is None and "ported" in self.model_fields_set:
            _dict['ported'] = None

        # set to None if reachable (nullable) is None
        # and model_fields_set contains the field
        if self.reachable is None and "reachable" in self.model_fields_set:
            _dict['reachable'] = None

        # set to None if roaming (nullable) is None
        # and model_fields_set contains the field
        if self.roaming is None and "roaming" in self.model_fields_set:
            _dict['roaming'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NiResponseXmlAdvanced from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "caller_identity": NiResponseXmlAdvancedCallerIdentity.from_dict(obj["caller_identity"]) if obj.get("caller_identity") is not None else None,
            "caller_name": obj.get("caller_name"),
            "caller_type": obj.get("caller_type"),
            "current_carrier": NiCurrentCarrierProperties.from_dict(obj["current_carrier"]) if obj.get("current_carrier") is not None else None,
            "error": NiResponseXmlAdvancedError.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "firs_name": obj.get("firs_name"),
            "international_format_number": obj.get("international_format_number"),
            "ip_warnings": obj.get("ip_warnings"),
            "last_name": obj.get("last_name"),
            "local_number": NiResponseXmlAdvancedLocalNumber.from_dict(obj["local_number"]) if obj.get("local_number") is not None else None,
            "lookup_outcome": NiResponseXmlAdvancedLookupOutcome.from_dict(obj["lookup_outcome"]) if obj.get("lookup_outcome") is not None else None,
            "original_carrier": NiInitialCarrierProperties.from_dict(obj["original_carrier"]) if obj.get("original_carrier") is not None else None,
            "ported": NiResponseXmlAdvancedPorted.from_dict(obj["ported"]) if obj.get("ported") is not None else None,
            "reachable": obj.get("reachable"),
            "remaining_balance": obj.get("remaining_balance"),
            "request_id": obj.get("request_id"),
            "request_price": obj.get("request_price"),
            "roaming": NiRoaming.from_dict(obj["roaming"]) if obj.get("roaming") is not None else None,
            "valid_number": obj.get("valid_number")
        })
        return _obj



# coding: utf-8

"""
    Number Insight API

    The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.

    The version of the OpenAPI document: 1.2.1
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.ni_caller_identity import NiCallerIdentity
from openapi_client.models.ni_current_carrier_properties import NiCurrentCarrierProperties
from openapi_client.models.ni_initial_carrier_properties import NiInitialCarrierProperties
from openapi_client.models.ni_roaming import NiRoaming
from openapi_client.models.ni_standard_advanced_status import NiStandardAdvancedStatus
from typing import Optional, Set
from typing_extensions import Self

class NiResponseJsonAdvancedAsync(BaseModel):
    """
    Advanced Response (Async)
    """ # noqa: E501
    caller_identity: Optional[NiCallerIdentity] = None
    country_code: Annotated[str, Field(strict=True)] = Field(description="Two character country code for `number`. This is in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.")
    country_code_iso3: Annotated[str, Field(strict=True)] = Field(description="Three character country code for `number`. This is in [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) format.")
    country_name: StrictStr = Field(description="The full name of the country that `number` is registered in.")
    country_prefix: StrictStr = Field(description="The numeric prefix for the country that `number` is registered in.")
    current_carrier: Optional[NiCurrentCarrierProperties] = None
    international_format_number: StrictStr = Field(description="The `number` in your request in international format.")
    lookup_outcome: Optional[StrictInt] = Field(default=None, description="Shows if all information about a phone number has been returned. Possible values:  Code | Text --- | --- 0 | Success 1 | Partial success - some fields populated 2 | Failed ")
    lookup_outcome_message: Optional[StrictStr] = Field(default=None, description="Shows if all information about a phone number has been returned.")
    national_format_number: StrictStr = Field(description="The `number` in your request in the format used by the country the number belongs to.")
    original_carrier: Optional[NiInitialCarrierProperties] = None
    ported: Optional[StrictStr] = Field(default=None, description="If the user has changed carrier for `number`. The assumed status means that the information supplier has replied to the request but has not said explicitly that the number is ported.")
    reachable: Optional[StrictStr] = Field(default=None, description="Can you call `number` now. This is applicable to mobile numbers only.")
    refund_price: Optional[StrictStr] = Field(default=None, description="If there is an internal lookup error, the `refund_price` will reflect the lookup price. If `cnam` is requested for a non-US number the `refund_price` will reflect the `cnam` price. If both of these conditions occur, `refund_price` is the sum of the lookup price and `cnam` price.")
    remaining_balance: Optional[StrictStr] = Field(default=None, description="Your account balance in EUR after this request.")
    request_id: Annotated[str, Field(strict=True, max_length=40)] = Field(description="The unique identifier for your request. This is a alphanumeric string up to 40 characters.")
    request_price: Optional[StrictStr] = Field(default=None, description="The amount in EUR charged to your account.")
    roaming: Optional[NiRoaming] = None
    status: NiStandardAdvancedStatus
    status_message: StrictStr = Field(description="The status description of your request.")
    valid_number: Optional[StrictStr] = Field(default=None, description="Does `number` exist. `unknown` means the number could not be validated. `valid` means the number is valid. `not_valid` means the number is not valid. `inferred_not_valid` means that the number could not be determined as valid or invalid via an external system and the best guess is that the number is invalid. This is applicable to mobile numbers only.")
    __properties: ClassVar[List[str]] = ["caller_identity", "country_code", "country_code_iso3", "country_name", "country_prefix", "current_carrier", "international_format_number", "lookup_outcome", "lookup_outcome_message", "national_format_number", "original_carrier", "ported", "reachable", "refund_price", "remaining_balance", "request_id", "request_price", "roaming", "status", "status_message", "valid_number"]

    @field_validator('country_code')
    def country_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"[A-Z]{2}", value):
            raise ValueError(r"must validate the regular expression /[A-Z]{2}/")
        return value

    @field_validator('country_code_iso3')
    def country_code_iso3_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"[A-Z]{3}", value):
            raise ValueError(r"must validate the regular expression /[A-Z]{3}/")
        return value

    @field_validator('lookup_outcome')
    def lookup_outcome_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 2]):
            raise ValueError("must be one of enum values (0, 1, 2)")
        return value

    @field_validator('ported')
    def ported_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['unknown', 'ported', 'not_ported', 'assumed_not_ported', 'assumed_ported', 'null']):
            raise ValueError("must be one of enum values ('unknown', 'ported', 'not_ported', 'assumed_not_ported', 'assumed_ported', 'null')")
        return value

    @field_validator('reachable')
    def reachable_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['unknown', 'reachable', 'undeliverable', 'absent', 'bad_number', 'blacklisted', 'null']):
            raise ValueError("must be one of enum values ('unknown', 'reachable', 'undeliverable', 'absent', 'bad_number', 'blacklisted', 'null')")
        return value

    @field_validator('valid_number')
    def valid_number_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['unknown', 'valid', 'not_valid', 'inferred', 'inferred_not_valid']):
            raise ValueError("must be one of enum values ('unknown', 'valid', 'not_valid', 'inferred', 'inferred_not_valid')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NiResponseJsonAdvancedAsync from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of caller_identity
        if self.caller_identity:
            _dict['caller_identity'] = self.caller_identity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of current_carrier
        if self.current_carrier:
            _dict['current_carrier'] = self.current_carrier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of original_carrier
        if self.original_carrier:
            _dict['original_carrier'] = self.original_carrier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of roaming
        if self.roaming:
            _dict['roaming'] = self.roaming.to_dict()
        # set to None if current_carrier (nullable) is None
        # and model_fields_set contains the field
        if self.current_carrier is None and "current_carrier" in self.model_fields_set:
            _dict['current_carrier'] = None

        # set to None if original_carrier (nullable) is None
        # and model_fields_set contains the field
        if self.original_carrier is None and "original_carrier" in self.model_fields_set:
            _dict['original_carrier'] = None

        # set to None if ported (nullable) is None
        # and model_fields_set contains the field
        if self.ported is None and "ported" in self.model_fields_set:
            _dict['ported'] = None

        # set to None if reachable (nullable) is None
        # and model_fields_set contains the field
        if self.reachable is None and "reachable" in self.model_fields_set:
            _dict['reachable'] = None

        # set to None if roaming (nullable) is None
        # and model_fields_set contains the field
        if self.roaming is None and "roaming" in self.model_fields_set:
            _dict['roaming'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NiResponseJsonAdvancedAsync from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "caller_identity": NiCallerIdentity.from_dict(obj["caller_identity"]) if obj.get("caller_identity") is not None else None,
            "country_code": obj.get("country_code"),
            "country_code_iso3": obj.get("country_code_iso3"),
            "country_name": obj.get("country_name"),
            "country_prefix": obj.get("country_prefix"),
            "current_carrier": NiCurrentCarrierProperties.from_dict(obj["current_carrier"]) if obj.get("current_carrier") is not None else None,
            "international_format_number": obj.get("international_format_number"),
            "lookup_outcome": obj.get("lookup_outcome"),
            "lookup_outcome_message": obj.get("lookup_outcome_message"),
            "national_format_number": obj.get("national_format_number"),
            "original_carrier": NiInitialCarrierProperties.from_dict(obj["original_carrier"]) if obj.get("original_carrier") is not None else None,
            "ported": obj.get("ported"),
            "reachable": obj.get("reachable"),
            "refund_price": obj.get("refund_price"),
            "remaining_balance": obj.get("remaining_balance"),
            "request_id": obj.get("request_id"),
            "request_price": obj.get("request_price"),
            "roaming": NiRoaming.from_dict(obj["roaming"]) if obj.get("roaming") is not None else None,
            "status": obj.get("status"),
            "status_message": obj.get("status_message"),
            "valid_number": obj.get("valid_number")
        })
        return _obj


